
Finch2_Tether.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ac70  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000188  20000000  0000ac70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000964  20000190  0000ae00  00020188  2**4
                  ALLOC
  3 .stack        00002004  20000af4  0000b764  00020188  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00087da1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009ff4  00000000  00000000  000a7faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000101f8  00000000  00000000  000b1f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010a8  00000000  00000000  000c2196  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013d8  00000000  00000000  000c323e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025c5b  00000000  00000000  000c4616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024a0a  00000000  00000000  000ea271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009507b  00000000  00000000  0010ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003020  00000000  00000000  001a3cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2a 00 20 ad 6c 00 00 a9 6c 00 00 a9 6c 00 00     .*. .l...l...l..
	...
      2c:	a9 6c 00 00 00 00 00 00 00 00 00 00 a9 6c 00 00     .l...........l..
      3c:	a9 6c 00 00 a9 6c 00 00 a9 6c 00 00 a9 6c 00 00     .l...l...l...l..
      4c:	a9 6c 00 00 cd 35 00 00 a9 6c 00 00 15 01 00 00     .l...5...l......
      5c:	d9 64 00 00 a9 6c 00 00 ad 43 00 00 bd 43 00 00     .d...l...C...C..
      6c:	cd 43 00 00 dd 43 00 00 ed 43 00 00 fd 43 00 00     .C...C...C...C..
      7c:	2d 4d 00 00 3d 4d 00 00 4d 4d 00 00 01 4e 00 00     -M..=M..MM...N..
      8c:	11 4e 00 00 21 4e 00 00 00 00 00 00 00 00 00 00     .N..!N..........
      9c:	a9 6c 00 00 a9 6c 00 00 a9 6c 00 00 a9 6c 00 00     .l...l...l...l..
      ac:	a9 6c 00 00 00 00 00 00                             .l......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000190 	.word	0x20000190
      d4:	00000000 	.word	0x00000000
      d8:	0000ac70 	.word	0x0000ac70

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000194 	.word	0x20000194
     108:	0000ac70 	.word	0x0000ac70
     10c:	0000ac70 	.word	0x0000ac70
     110:	00000000 	.word	0x00000000

00000114 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     114:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     116:	4b26      	ldr	r3, [pc, #152]	; (1b0 <DMAC_Handler+0x9c>)
     118:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     11a:	4926      	ldr	r1, [pc, #152]	; (1b4 <DMAC_Handler+0xa0>)
     11c:	8c0b      	ldrh	r3, [r1, #32]
     11e:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     120:	4013      	ands	r3, r2
     122:	009b      	lsls	r3, r3, #2
     124:	4824      	ldr	r0, [pc, #144]	; (1b8 <DMAC_Handler+0xa4>)
     126:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     128:	7803      	ldrb	r3, [r0, #0]
     12a:	401a      	ands	r2, r3
     12c:	233f      	movs	r3, #63	; 0x3f
     12e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     130:	330f      	adds	r3, #15
     132:	5cca      	ldrb	r2, [r1, r3]
     134:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     136:	7803      	ldrb	r3, [r0, #0]
     138:	011b      	lsls	r3, r3, #4
     13a:	4920      	ldr	r1, [pc, #128]	; (1bc <DMAC_Handler+0xa8>)
     13c:	18c9      	adds	r1, r1, r3
     13e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     140:	4c1f      	ldr	r4, [pc, #124]	; (1c0 <DMAC_Handler+0xac>)
     142:	18e3      	adds	r3, r4, r3
     144:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     146:	1acb      	subs	r3, r1, r3
     148:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     14a:	07d3      	lsls	r3, r2, #31
     14c:	d50f      	bpl.n	16e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     14e:	2101      	movs	r1, #1
     150:	234e      	movs	r3, #78	; 0x4e
     152:	4a18      	ldr	r2, [pc, #96]	; (1b4 <DMAC_Handler+0xa0>)
     154:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     156:	3b3e      	subs	r3, #62	; 0x3e
     158:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     15a:	7c03      	ldrb	r3, [r0, #16]
     15c:	07db      	lsls	r3, r3, #31
     15e:	d503      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     160:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     162:	2b00      	cmp	r3, #0
     164:	d000      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     166:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     168:	4b16      	ldr	r3, [pc, #88]	; (1c4 <DMAC_Handler+0xb0>)
     16a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     16c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     16e:	0793      	lsls	r3, r2, #30
     170:	d50d      	bpl.n	18e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     172:	2102      	movs	r1, #2
     174:	234e      	movs	r3, #78	; 0x4e
     176:	4a0f      	ldr	r2, [pc, #60]	; (1b4 <DMAC_Handler+0xa0>)
     178:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     17a:	2300      	movs	r3, #0
     17c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     17e:	7c03      	ldrb	r3, [r0, #16]
     180:	079b      	lsls	r3, r3, #30
     182:	d5f1      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     184:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     186:	2b00      	cmp	r3, #0
     188:	d0ee      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     18a:	4798      	blx	r3
     18c:	e7ec      	b.n	168 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     18e:	0753      	lsls	r3, r2, #29
     190:	d5ea      	bpl.n	168 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     192:	2104      	movs	r1, #4
     194:	234e      	movs	r3, #78	; 0x4e
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <DMAC_Handler+0xa0>)
     198:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     19a:	3b48      	subs	r3, #72	; 0x48
     19c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     19e:	7c03      	ldrb	r3, [r0, #16]
     1a0:	075b      	lsls	r3, r3, #29
     1a2:	d5e1      	bpl.n	168 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     1a4:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     1a6:	2b00      	cmp	r3, #0
     1a8:	d0de      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     1aa:	4798      	blx	r3
     1ac:	e7dc      	b.n	168 <DMAC_Handler+0x54>
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00002f99 	.word	0x00002f99
     1b4:	41004800 	.word	0x41004800
     1b8:	200001ac 	.word	0x200001ac
     1bc:	20000400 	.word	0x20000400
     1c0:	200001c0 	.word	0x200001c0
     1c4:	00002fd9 	.word	0x00002fd9

000001c8 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     1c8:	2300      	movs	r3, #0
     1ca:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     1cc:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     1ce:	2203      	movs	r2, #3
     1d0:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     1d2:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     1d4:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     1d6:	4770      	bx	lr

000001d8 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1da:	46ce      	mov	lr, r9
     1dc:	4647      	mov	r7, r8
     1de:	b580      	push	{r7, lr}
     1e0:	0005      	movs	r5, r0
     1e2:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     1e4:	4b45      	ldr	r3, [pc, #276]	; (2fc <dma_allocate+0x124>)
     1e6:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     1e8:	4b45      	ldr	r3, [pc, #276]	; (300 <dma_allocate+0x128>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d118      	bne.n	222 <dma_allocate+0x4a>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	PM->AHBMASK.reg |= ahb_mask;
     1f0:	4b44      	ldr	r3, [pc, #272]	; (304 <dma_allocate+0x12c>)
     1f2:	695a      	ldr	r2, [r3, #20]
     1f4:	2120      	movs	r1, #32
     1f6:	430a      	orrs	r2, r1
     1f8:	615a      	str	r2, [r3, #20]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1fa:	69da      	ldr	r2, [r3, #28]
     1fc:	3910      	subs	r1, #16
     1fe:	430a      	orrs	r2, r1
     200:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     202:	4b41      	ldr	r3, [pc, #260]	; (308 <dma_allocate+0x130>)
     204:	881a      	ldrh	r2, [r3, #0]
     206:	390e      	subs	r1, #14
     208:	438a      	bics	r2, r1
     20a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     20c:	2201      	movs	r2, #1
     20e:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     210:	4a3e      	ldr	r2, [pc, #248]	; (30c <dma_allocate+0x134>)
     212:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     214:	4a3e      	ldr	r2, [pc, #248]	; (310 <dma_allocate+0x138>)
     216:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     218:	4a3e      	ldr	r2, [pc, #248]	; (314 <dma_allocate+0x13c>)
     21a:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     21c:	4b38      	ldr	r3, [pc, #224]	; (300 <dma_allocate+0x128>)
     21e:	2201      	movs	r2, #1
     220:	701a      	strb	r2, [r3, #0]
     222:	4b36      	ldr	r3, [pc, #216]	; (2fc <dma_allocate+0x124>)
     224:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     226:	4b36      	ldr	r3, [pc, #216]	; (300 <dma_allocate+0x128>)
     228:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     22a:	07da      	lsls	r2, r3, #31
     22c:	d50f      	bpl.n	24e <dma_allocate+0x76>
		tmp = tmp >> 1;
     22e:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     230:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     232:	2201      	movs	r2, #1
     234:	421a      	tst	r2, r3
     236:	d00b      	beq.n	250 <dma_allocate+0x78>
		tmp = tmp >> 1;
     238:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     23a:	3401      	adds	r4, #1
     23c:	b2e4      	uxtb	r4, r4
     23e:	2c05      	cmp	r4, #5
     240:	d1f8      	bne.n	234 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     242:	4b35      	ldr	r3, [pc, #212]	; (318 <dma_allocate+0x140>)
     244:	4798      	blx	r3
     246:	4b34      	ldr	r3, [pc, #208]	; (318 <dma_allocate+0x140>)
     248:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     24a:	2014      	movs	r0, #20
     24c:	e051      	b.n	2f2 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     24e:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     250:	4a2b      	ldr	r2, [pc, #172]	; (300 <dma_allocate+0x128>)
     252:	6851      	ldr	r1, [r2, #4]
     254:	2301      	movs	r3, #1
     256:	40a3      	lsls	r3, r4
     258:	430b      	orrs	r3, r1
     25a:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     25c:	7a13      	ldrb	r3, [r2, #8]
     25e:	3b01      	subs	r3, #1
     260:	7213      	strb	r3, [r2, #8]
     262:	4b2d      	ldr	r3, [pc, #180]	; (318 <dma_allocate+0x140>)
     264:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     266:	2cff      	cmp	r4, #255	; 0xff
     268:	d0ed      	beq.n	246 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     26a:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     26c:	230f      	movs	r3, #15
     26e:	4698      	mov	r8, r3
     270:	401c      	ands	r4, r3
     272:	4f25      	ldr	r7, [pc, #148]	; (308 <dma_allocate+0x130>)
     274:	3330      	adds	r3, #48	; 0x30
     276:	4699      	mov	r9, r3
     278:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     27a:	3301      	adds	r3, #1
     27c:	5cfa      	ldrb	r2, [r7, r3]
     27e:	2102      	movs	r1, #2
     280:	438a      	bics	r2, r1
     282:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     284:	2401      	movs	r4, #1
     286:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     288:	4b1c      	ldr	r3, [pc, #112]	; (2fc <dma_allocate+0x124>)
     28a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     28c:	782b      	ldrb	r3, [r5, #0]
     28e:	4642      	mov	r2, r8
     290:	4013      	ands	r3, r2
     292:	464a      	mov	r2, r9
     294:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     296:	693b      	ldr	r3, [r7, #16]
     298:	782a      	ldrb	r2, [r5, #0]
     29a:	4094      	lsls	r4, r2
     29c:	43a3      	bics	r3, r4
     29e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2a0:	7832      	ldrb	r2, [r6, #0]
     2a2:	0152      	lsls	r2, r2, #5
     2a4:	2360      	movs	r3, #96	; 0x60
     2a6:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     2a8:	7872      	ldrb	r2, [r6, #1]
     2aa:	0212      	lsls	r2, r2, #8
     2ac:	21fc      	movs	r1, #252	; 0xfc
     2ae:	0189      	lsls	r1, r1, #6
     2b0:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2b2:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     2b4:	78b2      	ldrb	r2, [r6, #2]
     2b6:	0592      	lsls	r2, r2, #22
     2b8:	21c0      	movs	r1, #192	; 0xc0
     2ba:	0409      	lsls	r1, r1, #16
     2bc:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2be:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     2c0:	78f1      	ldrb	r1, [r6, #3]
     2c2:	2900      	cmp	r1, #0
     2c4:	d004      	beq.n	2d0 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     2c6:	2207      	movs	r2, #7
     2c8:	400a      	ands	r2, r1
     2ca:	2108      	movs	r1, #8
     2cc:	430a      	orrs	r2, r1
     2ce:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     2d0:	7932      	ldrb	r2, [r6, #4]
     2d2:	2a00      	cmp	r2, #0
     2d4:	d001      	beq.n	2da <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     2d6:	2210      	movs	r2, #16
     2d8:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     2da:	4a0b      	ldr	r2, [pc, #44]	; (308 <dma_allocate+0x130>)
     2dc:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     2de:	4c0e      	ldr	r4, [pc, #56]	; (318 <dma_allocate+0x140>)
     2e0:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     2e2:	2300      	movs	r3, #0
     2e4:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     2e6:	782b      	ldrb	r3, [r5, #0]
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <dma_allocate+0x144>)
     2ec:	509d      	str	r5, [r3, r2]
     2ee:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     2f0:	2000      	movs	r0, #0
}
     2f2:	bc0c      	pop	{r2, r3}
     2f4:	4690      	mov	r8, r2
     2f6:	4699      	mov	r9, r3
     2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00002f99 	.word	0x00002f99
     300:	20000000 	.word	0x20000000
     304:	40000400 	.word	0x40000400
     308:	41004800 	.word	0x41004800
     30c:	20000400 	.word	0x20000400
     310:	200001c0 	.word	0x200001c0
     314:	00000f02 	.word	0x00000f02
     318:	00002fd9 	.word	0x00002fd9
     31c:	200001ac 	.word	0x200001ac

00000320 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     324:	4b19      	ldr	r3, [pc, #100]	; (38c <dma_start_transfer_job+0x6c>)
     326:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     328:	7c63      	ldrb	r3, [r4, #17]
     32a:	2b05      	cmp	r3, #5
     32c:	d008      	beq.n	340 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     32e:	69a3      	ldr	r3, [r4, #24]
     330:	885b      	ldrh	r3, [r3, #2]
     332:	b29b      	uxth	r3, r3
     334:	2b00      	cmp	r3, #0
     336:	d107      	bne.n	348 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <dma_start_transfer_job+0x70>)
     33a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     33c:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     33e:	bd70      	pop	{r4, r5, r6, pc}
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <dma_start_transfer_job+0x70>)
     342:	4798      	blx	r3
		return STATUS_BUSY;
     344:	2005      	movs	r0, #5
     346:	e7fa      	b.n	33e <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     348:	2640      	movs	r6, #64	; 0x40
     34a:	4b12      	ldr	r3, [pc, #72]	; (394 <dma_start_transfer_job+0x74>)
     34c:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     34e:	7822      	ldrb	r2, [r4, #0]
     350:	230f      	movs	r3, #15
     352:	4013      	ands	r3, r2
     354:	4d10      	ldr	r5, [pc, #64]	; (398 <dma_start_transfer_job+0x78>)
     356:	223f      	movs	r2, #63	; 0x3f
     358:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     35a:	7823      	ldrb	r3, [r4, #0]
     35c:	4a0f      	ldr	r2, [pc, #60]	; (39c <dma_start_transfer_job+0x7c>)
     35e:	5cd2      	ldrb	r2, [r2, r3]
     360:	2307      	movs	r3, #7
     362:	4013      	ands	r3, r2
     364:	224d      	movs	r2, #77	; 0x4d
     366:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     368:	2305      	movs	r3, #5
     36a:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     36c:	7820      	ldrb	r0, [r4, #0]
     36e:	0100      	lsls	r0, r0, #4
     370:	4b0b      	ldr	r3, [pc, #44]	; (3a0 <dma_start_transfer_job+0x80>)
     372:	18c0      	adds	r0, r0, r3
     374:	69a1      	ldr	r1, [r4, #24]
     376:	3a3d      	subs	r2, #61	; 0x3d
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <dma_start_transfer_job+0x84>)
     37a:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     37c:	5dab      	ldrb	r3, [r5, r6]
     37e:	2202      	movs	r2, #2
     380:	4313      	orrs	r3, r2
     382:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <dma_start_transfer_job+0x70>)
     386:	4798      	blx	r3
	return STATUS_OK;
     388:	2000      	movs	r0, #0
     38a:	e7d8      	b.n	33e <dma_start_transfer_job+0x1e>
     38c:	00002f99 	.word	0x00002f99
     390:	00002fd9 	.word	0x00002fd9
     394:	e000e100 	.word	0xe000e100
     398:	41004800 	.word	0x41004800
     39c:	20000210 	.word	0x20000210
     3a0:	20000400 	.word	0x20000400
     3a4:	0000a4dd 	.word	0x0000a4dd

000003a8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     3aa:	780a      	ldrb	r2, [r1, #0]
     3ac:	8803      	ldrh	r3, [r0, #0]
     3ae:	2601      	movs	r6, #1
     3b0:	4032      	ands	r2, r6
     3b2:	2401      	movs	r4, #1
     3b4:	43a3      	bics	r3, r4
     3b6:	4313      	orrs	r3, r2
     3b8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     3ba:	784b      	ldrb	r3, [r1, #1]
     3bc:	8804      	ldrh	r4, [r0, #0]
     3be:	2703      	movs	r7, #3
     3c0:	403b      	ands	r3, r7
     3c2:	005b      	lsls	r3, r3, #1
     3c4:	2206      	movs	r2, #6
     3c6:	4394      	bics	r4, r2
     3c8:	431c      	orrs	r4, r3
     3ca:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     3cc:	788d      	ldrb	r5, [r1, #2]
     3ce:	8804      	ldrh	r4, [r0, #0]
     3d0:	403d      	ands	r5, r7
     3d2:	00ed      	lsls	r5, r5, #3
     3d4:	2318      	movs	r3, #24
     3d6:	439c      	bics	r4, r3
     3d8:	432c      	orrs	r4, r5
     3da:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     3dc:	78ca      	ldrb	r2, [r1, #3]
     3de:	8803      	ldrh	r3, [r0, #0]
     3e0:	403a      	ands	r2, r7
     3e2:	0212      	lsls	r2, r2, #8
     3e4:	4c16      	ldr	r4, [pc, #88]	; (440 <dma_descriptor_create+0x98>)
     3e6:	4023      	ands	r3, r4
     3e8:	4313      	orrs	r3, r2
     3ea:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     3ec:	790b      	ldrb	r3, [r1, #4]
     3ee:	8804      	ldrh	r4, [r0, #0]
     3f0:	4033      	ands	r3, r6
     3f2:	029b      	lsls	r3, r3, #10
     3f4:	4a13      	ldr	r2, [pc, #76]	; (444 <dma_descriptor_create+0x9c>)
     3f6:	4014      	ands	r4, r2
     3f8:	431c      	orrs	r4, r3
     3fa:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     3fc:	794d      	ldrb	r5, [r1, #5]
     3fe:	8804      	ldrh	r4, [r0, #0]
     400:	4035      	ands	r5, r6
     402:	02ed      	lsls	r5, r5, #11
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <dma_descriptor_create+0xa0>)
     406:	401c      	ands	r4, r3
     408:	432c      	orrs	r4, r5
     40a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     40c:	798a      	ldrb	r2, [r1, #6]
     40e:	8803      	ldrh	r3, [r0, #0]
     410:	4032      	ands	r2, r6
     412:	0312      	lsls	r2, r2, #12
     414:	4c0d      	ldr	r4, [pc, #52]	; (44c <dma_descriptor_create+0xa4>)
     416:	4023      	ands	r3, r4
     418:	4313      	orrs	r3, r2
     41a:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     41c:	79cb      	ldrb	r3, [r1, #7]
     41e:	2207      	movs	r2, #7
     420:	401a      	ands	r2, r3
     422:	8803      	ldrh	r3, [r0, #0]
     424:	0352      	lsls	r2, r2, #13
     426:	04db      	lsls	r3, r3, #19
     428:	0cdb      	lsrs	r3, r3, #19
     42a:	4313      	orrs	r3, r2
     42c:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     42e:	890b      	ldrh	r3, [r1, #8]
     430:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     432:	68cb      	ldr	r3, [r1, #12]
     434:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     436:	690b      	ldr	r3, [r1, #16]
     438:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     43a:	694b      	ldr	r3, [r1, #20]
     43c:	60c3      	str	r3, [r0, #12]
}
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     440:	fffffcff 	.word	0xfffffcff
     444:	fffffbff 	.word	0xfffffbff
     448:	fffff7ff 	.word	0xfffff7ff
     44c:	ffffefff 	.word	0xffffefff

00000450 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     450:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     452:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     454:	2a05      	cmp	r2, #5
     456:	d00b      	beq.n	470 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     458:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     45a:	2b00      	cmp	r3, #0
     45c:	d00a      	beq.n	474 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     45e:	68da      	ldr	r2, [r3, #12]
     460:	2a00      	cmp	r2, #0
     462:	d003      	beq.n	46c <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     464:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     466:	68da      	ldr	r2, [r3, #12]
     468:	2a00      	cmp	r2, #0
     46a:	d1fb      	bne.n	464 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     46c:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     46e:	2300      	movs	r3, #0
}
     470:	0018      	movs	r0, r3
     472:	4770      	bx	lr
		resource->descriptor = descriptor;
     474:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     476:	2300      	movs	r3, #0
     478:	e7fa      	b.n	470 <dma_add_descriptor+0x20>
	...

0000047c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     47c:	b5f0      	push	{r4, r5, r6, r7, lr}
     47e:	46de      	mov	lr, fp
     480:	4657      	mov	r7, sl
     482:	464e      	mov	r6, r9
     484:	4645      	mov	r5, r8
     486:	b5e0      	push	{r5, r6, r7, lr}
     488:	b091      	sub	sp, #68	; 0x44
     48a:	0005      	movs	r5, r0
     48c:	000c      	movs	r4, r1
     48e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     490:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     492:	0008      	movs	r0, r1
     494:	4bbb      	ldr	r3, [pc, #748]	; (784 <usart_init+0x308>)
     496:	4798      	blx	r3
     498:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     49a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     49c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     49e:	07db      	lsls	r3, r3, #31
     4a0:	d506      	bpl.n	4b0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     4a2:	b011      	add	sp, #68	; 0x44
     4a4:	bc3c      	pop	{r2, r3, r4, r5}
     4a6:	4690      	mov	r8, r2
     4a8:	4699      	mov	r9, r3
     4aa:	46a2      	mov	sl, r4
     4ac:	46ab      	mov	fp, r5
     4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4b0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     4b2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4b4:	079b      	lsls	r3, r3, #30
     4b6:	d4f4      	bmi.n	4a2 <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4b8:	49b3      	ldr	r1, [pc, #716]	; (788 <usart_init+0x30c>)
     4ba:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     4bc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4be:	2301      	movs	r3, #1
     4c0:	40bb      	lsls	r3, r7
     4c2:	4303      	orrs	r3, r0
     4c4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     4c6:	a90f      	add	r1, sp, #60	; 0x3c
     4c8:	272d      	movs	r7, #45	; 0x2d
     4ca:	5df3      	ldrb	r3, [r6, r7]
     4cc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4ce:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4d0:	b2d3      	uxtb	r3, r2
     4d2:	9302      	str	r3, [sp, #8]
     4d4:	0018      	movs	r0, r3
     4d6:	4bad      	ldr	r3, [pc, #692]	; (78c <usart_init+0x310>)
     4d8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     4da:	9802      	ldr	r0, [sp, #8]
     4dc:	4bac      	ldr	r3, [pc, #688]	; (790 <usart_init+0x314>)
     4de:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     4e0:	5df0      	ldrb	r0, [r6, r7]
     4e2:	2100      	movs	r1, #0
     4e4:	4bab      	ldr	r3, [pc, #684]	; (794 <usart_init+0x318>)
     4e6:	4798      	blx	r3
	module->character_size = config->character_size;
     4e8:	7af3      	ldrb	r3, [r6, #11]
     4ea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     4ec:	2324      	movs	r3, #36	; 0x24
     4ee:	5cf3      	ldrb	r3, [r6, r3]
     4f0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     4f2:	2325      	movs	r3, #37	; 0x25
     4f4:	5cf3      	ldrb	r3, [r6, r3]
     4f6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     4f8:	7ef3      	ldrb	r3, [r6, #27]
     4fa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     4fc:	7f33      	ldrb	r3, [r6, #28]
     4fe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     500:	682b      	ldr	r3, [r5, #0]
     502:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     504:	0018      	movs	r0, r3
     506:	4b9f      	ldr	r3, [pc, #636]	; (784 <usart_init+0x308>)
     508:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     50a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     50c:	2200      	movs	r2, #0
     50e:	230e      	movs	r3, #14
     510:	a906      	add	r1, sp, #24
     512:	468c      	mov	ip, r1
     514:	4463      	add	r3, ip
     516:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     518:	8a32      	ldrh	r2, [r6, #16]
     51a:	9202      	str	r2, [sp, #8]
     51c:	2380      	movs	r3, #128	; 0x80
     51e:	01db      	lsls	r3, r3, #7
     520:	429a      	cmp	r2, r3
     522:	d100      	bne.n	526 <usart_init+0xaa>
     524:	e09c      	b.n	660 <usart_init+0x1e4>
     526:	d90f      	bls.n	548 <usart_init+0xcc>
     528:	23c0      	movs	r3, #192	; 0xc0
     52a:	01db      	lsls	r3, r3, #7
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	429a      	cmp	r2, r3
     530:	d100      	bne.n	534 <usart_init+0xb8>
     532:	e090      	b.n	656 <usart_init+0x1da>
     534:	2380      	movs	r3, #128	; 0x80
     536:	021b      	lsls	r3, r3, #8
     538:	429a      	cmp	r2, r3
     53a:	d000      	beq.n	53e <usart_init+0xc2>
     53c:	e11d      	b.n	77a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     53e:	2303      	movs	r3, #3
     540:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     542:	2300      	movs	r3, #0
     544:	9307      	str	r3, [sp, #28]
     546:	e008      	b.n	55a <usart_init+0xde>
	switch (config->sample_rate) {
     548:	2380      	movs	r3, #128	; 0x80
     54a:	019b      	lsls	r3, r3, #6
     54c:	429a      	cmp	r2, r3
     54e:	d000      	beq.n	552 <usart_init+0xd6>
     550:	e113      	b.n	77a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     552:	2310      	movs	r3, #16
     554:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     556:	3b0f      	subs	r3, #15
     558:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     55a:	6833      	ldr	r3, [r6, #0]
     55c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     55e:	68f3      	ldr	r3, [r6, #12]
     560:	469b      	mov	fp, r3
		config->sample_adjustment |
     562:	6973      	ldr	r3, [r6, #20]
     564:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     566:	7e33      	ldrb	r3, [r6, #24]
     568:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     56a:	2326      	movs	r3, #38	; 0x26
     56c:	5cf3      	ldrb	r3, [r6, r3]
     56e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     570:	6873      	ldr	r3, [r6, #4]
     572:	4699      	mov	r9, r3
	switch (transfer_mode)
     574:	2b00      	cmp	r3, #0
     576:	d100      	bne.n	57a <usart_init+0xfe>
     578:	e09e      	b.n	6b8 <usart_init+0x23c>
     57a:	2380      	movs	r3, #128	; 0x80
     57c:	055b      	lsls	r3, r3, #21
     57e:	4599      	cmp	r9, r3
     580:	d100      	bne.n	584 <usart_init+0x108>
     582:	e082      	b.n	68a <usart_init+0x20e>
	if(config->encoding_format_enable) {
     584:	7e73      	ldrb	r3, [r6, #25]
     586:	2b00      	cmp	r3, #0
     588:	d002      	beq.n	590 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     58a:	7eb3      	ldrb	r3, [r6, #26]
     58c:	4642      	mov	r2, r8
     58e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     590:	682a      	ldr	r2, [r5, #0]
     592:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     594:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     596:	2b00      	cmp	r3, #0
     598:	d1fc      	bne.n	594 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     59a:	330e      	adds	r3, #14
     59c:	aa06      	add	r2, sp, #24
     59e:	4694      	mov	ip, r2
     5a0:	4463      	add	r3, ip
     5a2:	881b      	ldrh	r3, [r3, #0]
     5a4:	4642      	mov	r2, r8
     5a6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     5a8:	9b05      	ldr	r3, [sp, #20]
     5aa:	465a      	mov	r2, fp
     5ac:	4313      	orrs	r3, r2
     5ae:	9a03      	ldr	r2, [sp, #12]
     5b0:	4313      	orrs	r3, r2
     5b2:	464a      	mov	r2, r9
     5b4:	4313      	orrs	r3, r2
     5b6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     5b8:	9b04      	ldr	r3, [sp, #16]
     5ba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     5bc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     5be:	4653      	mov	r3, sl
     5c0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     5c2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     5c4:	2327      	movs	r3, #39	; 0x27
     5c6:	5cf3      	ldrb	r3, [r6, r3]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d101      	bne.n	5d0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     5cc:	3304      	adds	r3, #4
     5ce:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5d0:	7e73      	ldrb	r3, [r6, #25]
     5d2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5d4:	7f32      	ldrb	r2, [r6, #28]
     5d6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5d8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5da:	7f72      	ldrb	r2, [r6, #29]
     5dc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5de:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5e0:	2224      	movs	r2, #36	; 0x24
     5e2:	5cb2      	ldrb	r2, [r6, r2]
     5e4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5e6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     5e8:	2225      	movs	r2, #37	; 0x25
     5ea:	5cb2      	ldrb	r2, [r6, r2]
     5ec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5ee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     5f0:	7af1      	ldrb	r1, [r6, #11]
     5f2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     5f4:	8933      	ldrh	r3, [r6, #8]
     5f6:	2bff      	cmp	r3, #255	; 0xff
     5f8:	d100      	bne.n	5fc <usart_init+0x180>
     5fa:	e081      	b.n	700 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     5fc:	2280      	movs	r2, #128	; 0x80
     5fe:	0452      	lsls	r2, r2, #17
     600:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     602:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     604:	232c      	movs	r3, #44	; 0x2c
     606:	5cf3      	ldrb	r3, [r6, r3]
     608:	2b00      	cmp	r3, #0
     60a:	d103      	bne.n	614 <usart_init+0x198>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     60c:	4b62      	ldr	r3, [pc, #392]	; (798 <usart_init+0x31c>)
     60e:	789b      	ldrb	r3, [r3, #2]
     610:	079b      	lsls	r3, r3, #30
     612:	d501      	bpl.n	618 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     614:	2380      	movs	r3, #128	; 0x80
     616:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     618:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     61a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     61c:	2b00      	cmp	r3, #0
     61e:	d1fc      	bne.n	61a <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
     620:	4643      	mov	r3, r8
     622:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     624:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     626:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     628:	2b00      	cmp	r3, #0
     62a:	d1fc      	bne.n	626 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
     62c:	4643      	mov	r3, r8
     62e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     630:	ab0e      	add	r3, sp, #56	; 0x38
     632:	2280      	movs	r2, #128	; 0x80
     634:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     636:	2200      	movs	r2, #0
     638:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     63a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     63c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     63e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     640:	930a      	str	r3, [sp, #40]	; 0x28
     642:	6b73      	ldr	r3, [r6, #52]	; 0x34
     644:	930b      	str	r3, [sp, #44]	; 0x2c
     646:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     648:	930c      	str	r3, [sp, #48]	; 0x30
     64a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     64c:	9302      	str	r3, [sp, #8]
     64e:	930d      	str	r3, [sp, #52]	; 0x34
     650:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     652:	ae0a      	add	r6, sp, #40	; 0x28
     654:	e063      	b.n	71e <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     656:	2308      	movs	r3, #8
     658:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     65a:	3b07      	subs	r3, #7
     65c:	9307      	str	r3, [sp, #28]
     65e:	e77c      	b.n	55a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     660:	6833      	ldr	r3, [r6, #0]
     662:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     664:	68f3      	ldr	r3, [r6, #12]
     666:	469b      	mov	fp, r3
		config->sample_adjustment |
     668:	6973      	ldr	r3, [r6, #20]
     66a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     66c:	7e33      	ldrb	r3, [r6, #24]
     66e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     670:	2326      	movs	r3, #38	; 0x26
     672:	5cf3      	ldrb	r3, [r6, r3]
     674:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     676:	6873      	ldr	r3, [r6, #4]
     678:	4699      	mov	r9, r3
	switch (transfer_mode)
     67a:	2b00      	cmp	r3, #0
     67c:	d018      	beq.n	6b0 <usart_init+0x234>
     67e:	2380      	movs	r3, #128	; 0x80
     680:	055b      	lsls	r3, r3, #21
     682:	4599      	cmp	r9, r3
     684:	d001      	beq.n	68a <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
     686:	2000      	movs	r0, #0
     688:	e025      	b.n	6d6 <usart_init+0x25a>
			if (!config->use_external_clock) {
     68a:	2327      	movs	r3, #39	; 0x27
     68c:	5cf3      	ldrb	r3, [r6, r3]
     68e:	2b00      	cmp	r3, #0
     690:	d000      	beq.n	694 <usart_init+0x218>
     692:	e777      	b.n	584 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     694:	6a33      	ldr	r3, [r6, #32]
     696:	001f      	movs	r7, r3
     698:	b2c0      	uxtb	r0, r0
     69a:	4b40      	ldr	r3, [pc, #256]	; (79c <usart_init+0x320>)
     69c:	4798      	blx	r3
     69e:	0001      	movs	r1, r0
     6a0:	220e      	movs	r2, #14
     6a2:	ab06      	add	r3, sp, #24
     6a4:	469c      	mov	ip, r3
     6a6:	4462      	add	r2, ip
     6a8:	0038      	movs	r0, r7
     6aa:	4b3d      	ldr	r3, [pc, #244]	; (7a0 <usart_init+0x324>)
     6ac:	4798      	blx	r3
     6ae:	e012      	b.n	6d6 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6b0:	2308      	movs	r3, #8
     6b2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6b4:	2300      	movs	r3, #0
     6b6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     6b8:	2327      	movs	r3, #39	; 0x27
     6ba:	5cf3      	ldrb	r3, [r6, r3]
     6bc:	2b00      	cmp	r3, #0
     6be:	d00e      	beq.n	6de <usart_init+0x262>
				status_code =
     6c0:	9b06      	ldr	r3, [sp, #24]
     6c2:	9300      	str	r3, [sp, #0]
     6c4:	9b07      	ldr	r3, [sp, #28]
     6c6:	220e      	movs	r2, #14
     6c8:	a906      	add	r1, sp, #24
     6ca:	468c      	mov	ip, r1
     6cc:	4462      	add	r2, ip
     6ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6d0:	6a30      	ldr	r0, [r6, #32]
     6d2:	4f34      	ldr	r7, [pc, #208]	; (7a4 <usart_init+0x328>)
     6d4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     6d6:	2800      	cmp	r0, #0
     6d8:	d000      	beq.n	6dc <usart_init+0x260>
     6da:	e6e2      	b.n	4a2 <usart_init+0x26>
     6dc:	e752      	b.n	584 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     6de:	6a33      	ldr	r3, [r6, #32]
     6e0:	001f      	movs	r7, r3
     6e2:	b2c0      	uxtb	r0, r0
     6e4:	4b2d      	ldr	r3, [pc, #180]	; (79c <usart_init+0x320>)
     6e6:	4798      	blx	r3
     6e8:	0001      	movs	r1, r0
				status_code =
     6ea:	9b06      	ldr	r3, [sp, #24]
     6ec:	9300      	str	r3, [sp, #0]
     6ee:	9b07      	ldr	r3, [sp, #28]
     6f0:	220e      	movs	r2, #14
     6f2:	a806      	add	r0, sp, #24
     6f4:	4684      	mov	ip, r0
     6f6:	4462      	add	r2, ip
     6f8:	0038      	movs	r0, r7
     6fa:	4f2a      	ldr	r7, [pc, #168]	; (7a4 <usart_init+0x328>)
     6fc:	47b8      	blx	r7
     6fe:	e7ea      	b.n	6d6 <usart_init+0x25a>
		if(config->lin_slave_enable) {
     700:	7ef3      	ldrb	r3, [r6, #27]
     702:	2b00      	cmp	r3, #0
     704:	d100      	bne.n	708 <usart_init+0x28c>
     706:	e77d      	b.n	604 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     708:	2380      	movs	r3, #128	; 0x80
     70a:	04db      	lsls	r3, r3, #19
     70c:	431f      	orrs	r7, r3
     70e:	e779      	b.n	604 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     710:	0020      	movs	r0, r4
     712:	4b25      	ldr	r3, [pc, #148]	; (7a8 <usart_init+0x32c>)
     714:	4798      	blx	r3
     716:	e007      	b.n	728 <usart_init+0x2ac>
     718:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     71a:	2f04      	cmp	r7, #4
     71c:	d00d      	beq.n	73a <usart_init+0x2be>
     71e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     720:	00bb      	lsls	r3, r7, #2
     722:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     724:	2800      	cmp	r0, #0
     726:	d0f3      	beq.n	710 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
     728:	1c43      	adds	r3, r0, #1
     72a:	d0f5      	beq.n	718 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     72c:	a90e      	add	r1, sp, #56	; 0x38
     72e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     730:	0c00      	lsrs	r0, r0, #16
     732:	b2c0      	uxtb	r0, r0
     734:	4b1d      	ldr	r3, [pc, #116]	; (7ac <usart_init+0x330>)
     736:	4798      	blx	r3
     738:	e7ee      	b.n	718 <usart_init+0x29c>
		module->callback[i]            = NULL;
     73a:	2300      	movs	r3, #0
     73c:	60eb      	str	r3, [r5, #12]
     73e:	612b      	str	r3, [r5, #16]
     740:	616b      	str	r3, [r5, #20]
     742:	61ab      	str	r3, [r5, #24]
     744:	61eb      	str	r3, [r5, #28]
     746:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     748:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     74a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     74c:	2200      	movs	r2, #0
     74e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     750:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     752:	3330      	adds	r3, #48	; 0x30
     754:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     756:	3301      	adds	r3, #1
     758:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     75a:	3301      	adds	r3, #1
     75c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     75e:	3301      	adds	r3, #1
     760:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     762:	6828      	ldr	r0, [r5, #0]
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <usart_init+0x308>)
     766:	4798      	blx	r3
     768:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     76a:	4911      	ldr	r1, [pc, #68]	; (7b0 <usart_init+0x334>)
     76c:	4b11      	ldr	r3, [pc, #68]	; (7b4 <usart_init+0x338>)
     76e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     770:	00a4      	lsls	r4, r4, #2
     772:	4b11      	ldr	r3, [pc, #68]	; (7b8 <usart_init+0x33c>)
     774:	50e5      	str	r5, [r4, r3]
	return status_code;
     776:	2000      	movs	r0, #0
     778:	e693      	b.n	4a2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     77a:	2310      	movs	r3, #16
     77c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     77e:	2300      	movs	r3, #0
     780:	9307      	str	r3, [sp, #28]
     782:	e6ea      	b.n	55a <usart_init+0xde>
     784:	00004305 	.word	0x00004305
     788:	40000400 	.word	0x40000400
     78c:	000045a9 	.word	0x000045a9
     790:	0000451d 	.word	0x0000451d
     794:	00004141 	.word	0x00004141
     798:	41002000 	.word	0x41002000
     79c:	000045c5 	.word	0x000045c5
     7a0:	00003f49 	.word	0x00003f49
     7a4:	00003f71 	.word	0x00003f71
     7a8:	0000418d 	.word	0x0000418d
     7ac:	000046a1 	.word	0x000046a1
     7b0:	00000931 	.word	0x00000931
     7b4:	00004341 	.word	0x00004341
     7b8:	20000688 	.word	0x20000688

000007bc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7bc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     7be:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     7c0:	2a00      	cmp	r2, #0
     7c2:	d101      	bne.n	7c8 <usart_write_wait+0xc>
	}
	//cpu_irq_enable();
	//Enable the interrupts

	return STATUS_OK;
}
     7c4:	0018      	movs	r0, r3
     7c6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     7c8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     7ca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     7cc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     7ce:	2a00      	cmp	r2, #0
     7d0:	d1f8      	bne.n	7c4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     7d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     7d6:	2a00      	cmp	r2, #0
     7d8:	d1fc      	bne.n	7d4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     7da:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     7dc:	2102      	movs	r1, #2
     7de:	7e1a      	ldrb	r2, [r3, #24]
     7e0:	420a      	tst	r2, r1
     7e2:	d0fc      	beq.n	7de <usart_write_wait+0x22>
	return STATUS_OK;
     7e4:	2300      	movs	r3, #0
     7e6:	e7ed      	b.n	7c4 <usart_write_wait+0x8>

000007e8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ea:	46ce      	mov	lr, r9
     7ec:	4647      	mov	r7, r8
     7ee:	b580      	push	{r7, lr}
     7f0:	b083      	sub	sp, #12
     7f2:	0005      	movs	r5, r0
     7f4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     7f6:	2017      	movs	r0, #23
	if (length == 0) {
     7f8:	2a00      	cmp	r2, #0
     7fa:	d104      	bne.n	806 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     7fc:	b003      	add	sp, #12
     7fe:	bc0c      	pop	{r2, r3}
     800:	4690      	mov	r8, r2
     802:	4699      	mov	r9, r3
     804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     806:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     808:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     80a:	2b00      	cmp	r3, #0
     80c:	d0f6      	beq.n	7fc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     80e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     810:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     812:	2b00      	cmp	r3, #0
     814:	d1fc      	bne.n	810 <usart_write_buffer_wait+0x28>
	while (length--) {
     816:	3a01      	subs	r2, #1
     818:	b293      	uxth	r3, r2
     81a:	4699      	mov	r9, r3
     81c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     81e:	2701      	movs	r7, #1
	while (length--) {
     820:	4b1f      	ldr	r3, [pc, #124]	; (8a0 <usart_write_buffer_wait+0xb8>)
     822:	4698      	mov	r8, r3
     824:	e011      	b.n	84a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     826:	1c73      	adds	r3, r6, #1
     828:	b29b      	uxth	r3, r3
     82a:	9a01      	ldr	r2, [sp, #4]
     82c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     82e:	796a      	ldrb	r2, [r5, #5]
     830:	2a01      	cmp	r2, #1
     832:	d017      	beq.n	864 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     834:	b289      	uxth	r1, r1
     836:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     838:	0028      	movs	r0, r5
     83a:	4b1a      	ldr	r3, [pc, #104]	; (8a4 <usart_write_buffer_wait+0xbc>)
     83c:	4798      	blx	r3
	while (length--) {
     83e:	464b      	mov	r3, r9
     840:	3b01      	subs	r3, #1
     842:	b29b      	uxth	r3, r3
     844:	4699      	mov	r9, r3
     846:	4543      	cmp	r3, r8
     848:	d013      	beq.n	872 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     84a:	7e23      	ldrb	r3, [r4, #24]
     84c:	423b      	tst	r3, r7
     84e:	d1ea      	bne.n	826 <usart_write_buffer_wait+0x3e>
     850:	4b13      	ldr	r3, [pc, #76]	; (8a0 <usart_write_buffer_wait+0xb8>)
     852:	7e22      	ldrb	r2, [r4, #24]
     854:	423a      	tst	r2, r7
     856:	d1e6      	bne.n	826 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     858:	2b01      	cmp	r3, #1
     85a:	d019      	beq.n	890 <usart_write_buffer_wait+0xa8>
     85c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     85e:	2b00      	cmp	r3, #0
     860:	d1f7      	bne.n	852 <usart_write_buffer_wait+0x6a>
     862:	e7e0      	b.n	826 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     864:	3602      	adds	r6, #2
     866:	b2b6      	uxth	r6, r6
     868:	9a01      	ldr	r2, [sp, #4]
     86a:	5cd3      	ldrb	r3, [r2, r3]
     86c:	021b      	lsls	r3, r3, #8
     86e:	4319      	orrs	r1, r3
     870:	e7e2      	b.n	838 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     872:	7e23      	ldrb	r3, [r4, #24]
     874:	079b      	lsls	r3, r3, #30
     876:	d40d      	bmi.n	894 <usart_write_buffer_wait+0xac>
     878:	4b09      	ldr	r3, [pc, #36]	; (8a0 <usart_write_buffer_wait+0xb8>)
     87a:	2102      	movs	r1, #2
     87c:	7e22      	ldrb	r2, [r4, #24]
     87e:	420a      	tst	r2, r1
     880:	d10a      	bne.n	898 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     882:	2b01      	cmp	r3, #1
     884:	d00a      	beq.n	89c <usart_write_buffer_wait+0xb4>
     886:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     888:	2b00      	cmp	r3, #0
     88a:	d1f7      	bne.n	87c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     88c:	2000      	movs	r0, #0
     88e:	e7b5      	b.n	7fc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     890:	2012      	movs	r0, #18
     892:	e7b3      	b.n	7fc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     894:	2000      	movs	r0, #0
     896:	e7b1      	b.n	7fc <usart_write_buffer_wait+0x14>
     898:	2000      	movs	r0, #0
     89a:	e7af      	b.n	7fc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     89c:	2012      	movs	r0, #18
     89e:	e7ad      	b.n	7fc <usart_write_buffer_wait+0x14>
     8a0:	0000ffff 	.word	0x0000ffff
     8a4:	000007bd 	.word	0x000007bd

000008a8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8aa:	0004      	movs	r4, r0
     8ac:	000d      	movs	r5, r1
     8ae:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8b0:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     8b2:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <_usart_read_buffer+0x48>)
     8b4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     8b6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     8b8:	b29b      	uxth	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d003      	beq.n	8c6 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8be:	4b0d      	ldr	r3, [pc, #52]	; (8f4 <_usart_read_buffer+0x4c>)
     8c0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8c2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     8c6:	85a6      	strh	r6, [r4, #44]	; 0x2c
     8c8:	4b0a      	ldr	r3, [pc, #40]	; (8f4 <_usart_read_buffer+0x4c>)
     8ca:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     8cc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     8ce:	2205      	movs	r2, #5
     8d0:	2332      	movs	r3, #50	; 0x32
     8d2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     8d4:	3b2e      	subs	r3, #46	; 0x2e
     8d6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     8d8:	7a23      	ldrb	r3, [r4, #8]
     8da:	2b00      	cmp	r3, #0
     8dc:	d001      	beq.n	8e2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     8de:	2320      	movs	r3, #32
     8e0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     8e2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     8e4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     8e6:	2b00      	cmp	r3, #0
     8e8:	d0ec      	beq.n	8c4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     8ea:	2308      	movs	r3, #8
     8ec:	75bb      	strb	r3, [r7, #22]
     8ee:	e7e9      	b.n	8c4 <_usart_read_buffer+0x1c>
     8f0:	00002f99 	.word	0x00002f99
     8f4:	00002fd9 	.word	0x00002fd9

000008f8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     8f8:	1c93      	adds	r3, r2, #2
     8fa:	009b      	lsls	r3, r3, #2
     8fc:	18c3      	adds	r3, r0, r3
     8fe:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     900:	2130      	movs	r1, #48	; 0x30
     902:	2301      	movs	r3, #1
     904:	4093      	lsls	r3, r2
     906:	001a      	movs	r2, r3
     908:	5c43      	ldrb	r3, [r0, r1]
     90a:	4313      	orrs	r3, r2
     90c:	5443      	strb	r3, [r0, r1]
}
     90e:	4770      	bx	lr

00000910 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     910:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     912:	2317      	movs	r3, #23
	if (length == 0) {
     914:	2a00      	cmp	r2, #0
     916:	d101      	bne.n	91c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     918:	0018      	movs	r0, r3
     91a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     91c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     91e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     920:	2c00      	cmp	r4, #0
     922:	d0f9      	beq.n	918 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     924:	4b01      	ldr	r3, [pc, #4]	; (92c <usart_read_buffer_job+0x1c>)
     926:	4798      	blx	r3
     928:	0003      	movs	r3, r0
     92a:	e7f5      	b.n	918 <usart_read_buffer_job+0x8>
     92c:	000008a9 	.word	0x000008a9

00000930 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     932:	0080      	lsls	r0, r0, #2
     934:	4b56      	ldr	r3, [pc, #344]	; (a90 <_usart_interrupt_handler+0x160>)
     936:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     938:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     93a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     93c:	2b00      	cmp	r3, #0
     93e:	d1fc      	bne.n	93a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     940:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     942:	7da5      	ldrb	r5, [r4, #22]
     944:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
     946:	2330      	movs	r3, #48	; 0x30
     948:	5cf3      	ldrb	r3, [r6, r3]
     94a:	2231      	movs	r2, #49	; 0x31
     94c:	5cb7      	ldrb	r7, [r6, r2]
     94e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     950:	07eb      	lsls	r3, r5, #31
     952:	d522      	bpl.n	99a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     954:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     956:	b29b      	uxth	r3, r3
     958:	2b00      	cmp	r3, #0
     95a:	d01c      	beq.n	996 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     95c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     95e:	7813      	ldrb	r3, [r2, #0]
     960:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     962:	1c51      	adds	r1, r2, #1
     964:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     966:	7971      	ldrb	r1, [r6, #5]
     968:	2901      	cmp	r1, #1
     96a:	d00e      	beq.n	98a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     96c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     96e:	05db      	lsls	r3, r3, #23
     970:	0ddb      	lsrs	r3, r3, #23
     972:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     974:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     976:	3b01      	subs	r3, #1
     978:	b29b      	uxth	r3, r3
     97a:	85f3      	strh	r3, [r6, #46]	; 0x2e
     97c:	2b00      	cmp	r3, #0
     97e:	d10c      	bne.n	99a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     980:	3301      	adds	r3, #1
     982:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     984:	3301      	adds	r3, #1
     986:	75a3      	strb	r3, [r4, #22]
     988:	e007      	b.n	99a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     98a:	7851      	ldrb	r1, [r2, #1]
     98c:	0209      	lsls	r1, r1, #8
     98e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     990:	3202      	adds	r2, #2
     992:	62b2      	str	r2, [r6, #40]	; 0x28
     994:	e7eb      	b.n	96e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     996:	2301      	movs	r3, #1
     998:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     99a:	07ab      	lsls	r3, r5, #30
     99c:	d506      	bpl.n	9ac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     99e:	2302      	movs	r3, #2
     9a0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9a2:	2200      	movs	r2, #0
     9a4:	3331      	adds	r3, #49	; 0x31
     9a6:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9a8:	07fb      	lsls	r3, r7, #31
     9aa:	d42a      	bmi.n	a02 <_usart_interrupt_handler+0xd2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9ac:	076b      	lsls	r3, r5, #29
     9ae:	d512      	bpl.n	9d6 <_usart_interrupt_handler+0xa6>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9b0:	8b63      	ldrh	r3, [r4, #26]
     9b2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     9b4:	071a      	lsls	r2, r3, #28
     9b6:	d428      	bmi.n	a0a <_usart_interrupt_handler+0xda>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9b8:	223f      	movs	r2, #63	; 0x3f
     9ba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9bc:	2b00      	cmp	r3, #0
     9be:	d054      	beq.n	a6a <_usart_interrupt_handler+0x13a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9c0:	079a      	lsls	r2, r3, #30
     9c2:	d525      	bpl.n	a10 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9c4:	221a      	movs	r2, #26
     9c6:	2332      	movs	r3, #50	; 0x32
     9c8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9ca:	8b63      	ldrh	r3, [r4, #26]
     9cc:	3a18      	subs	r2, #24
     9ce:	4313      	orrs	r3, r2
     9d0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     9d2:	077b      	lsls	r3, r7, #29
     9d4:	d445      	bmi.n	a62 <_usart_interrupt_handler+0x132>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     9d6:	06eb      	lsls	r3, r5, #27
     9d8:	d504      	bpl.n	9e4 <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     9da:	2310      	movs	r3, #16
     9dc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     9de:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     9e0:	06fb      	lsls	r3, r7, #27
     9e2:	d448      	bmi.n	a76 <_usart_interrupt_handler+0x146>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     9e4:	06ab      	lsls	r3, r5, #26
     9e6:	d504      	bpl.n	9f2 <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     9e8:	2320      	movs	r3, #32
     9ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     9ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     9ee:	073b      	lsls	r3, r7, #28
     9f0:	d445      	bmi.n	a7e <_usart_interrupt_handler+0x14e>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     9f2:	072b      	lsls	r3, r5, #28
     9f4:	d504      	bpl.n	a00 <_usart_interrupt_handler+0xd0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     9f6:	2308      	movs	r3, #8
     9f8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     9fa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     9fc:	06bb      	lsls	r3, r7, #26
     9fe:	d442      	bmi.n	a86 <_usart_interrupt_handler+0x156>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a02:	0030      	movs	r0, r6
     a04:	68f3      	ldr	r3, [r6, #12]
     a06:	4798      	blx	r3
     a08:	e7d0      	b.n	9ac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a0a:	2237      	movs	r2, #55	; 0x37
     a0c:	4013      	ands	r3, r2
     a0e:	e7d5      	b.n	9bc <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a10:	075a      	lsls	r2, r3, #29
     a12:	d507      	bpl.n	a24 <_usart_interrupt_handler+0xf4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a14:	221e      	movs	r2, #30
     a16:	2332      	movs	r3, #50	; 0x32
     a18:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     a1a:	8b63      	ldrh	r3, [r4, #26]
     a1c:	3a1a      	subs	r2, #26
     a1e:	4313      	orrs	r3, r2
     a20:	8363      	strh	r3, [r4, #26]
     a22:	e7d6      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a24:	07da      	lsls	r2, r3, #31
     a26:	d507      	bpl.n	a38 <_usart_interrupt_handler+0x108>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a28:	2213      	movs	r2, #19
     a2a:	2332      	movs	r3, #50	; 0x32
     a2c:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a2e:	8b63      	ldrh	r3, [r4, #26]
     a30:	3a12      	subs	r2, #18
     a32:	4313      	orrs	r3, r2
     a34:	8363      	strh	r3, [r4, #26]
     a36:	e7cc      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a38:	06da      	lsls	r2, r3, #27
     a3a:	d507      	bpl.n	a4c <_usart_interrupt_handler+0x11c>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a3c:	2242      	movs	r2, #66	; 0x42
     a3e:	2332      	movs	r3, #50	; 0x32
     a40:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a42:	8b63      	ldrh	r3, [r4, #26]
     a44:	3a32      	subs	r2, #50	; 0x32
     a46:	4313      	orrs	r3, r2
     a48:	8363      	strh	r3, [r4, #26]
     a4a:	e7c2      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a4c:	2220      	movs	r2, #32
     a4e:	421a      	tst	r2, r3
     a50:	d0bf      	beq.n	9d2 <_usart_interrupt_handler+0xa2>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a52:	3221      	adds	r2, #33	; 0x21
     a54:	2332      	movs	r3, #50	; 0x32
     a56:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a58:	8b63      	ldrh	r3, [r4, #26]
     a5a:	3a21      	subs	r2, #33	; 0x21
     a5c:	4313      	orrs	r3, r2
     a5e:	8363      	strh	r3, [r4, #26]
     a60:	e7b7      	b.n	9d2 <_usart_interrupt_handler+0xa2>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a62:	0030      	movs	r0, r6
     a64:	6973      	ldr	r3, [r6, #20]
     a66:	4798      	blx	r3
     a68:	e7b5      	b.n	9d6 <_usart_interrupt_handler+0xa6>
				if (callback_status
     a6a:	07bb      	lsls	r3, r7, #30
     a6c:	d5b3      	bpl.n	9d6 <_usart_interrupt_handler+0xa6>
					(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a6e:	0030      	movs	r0, r6
     a70:	6933      	ldr	r3, [r6, #16]
     a72:	4798      	blx	r3
     a74:	e7af      	b.n	9d6 <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     a76:	0030      	movs	r0, r6
     a78:	69f3      	ldr	r3, [r6, #28]
     a7a:	4798      	blx	r3
     a7c:	e7b2      	b.n	9e4 <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     a7e:	0030      	movs	r0, r6
     a80:	69b3      	ldr	r3, [r6, #24]
     a82:	4798      	blx	r3
     a84:	e7b5      	b.n	9f2 <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     a86:	6a33      	ldr	r3, [r6, #32]
     a88:	0030      	movs	r0, r6
     a8a:	4798      	blx	r3
}
     a8c:	e7b8      	b.n	a00 <_usart_interrupt_handler+0xd0>
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	20000688 	.word	0x20000688

00000a94 <configure_batt_status_pins>:
#include "orb.h"
#include "battery.h"


void configure_batt_status_pins()
{
     a94:	b500      	push	{lr}
     a96:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     a98:	a901      	add	r1, sp, #4
     a9a:	2300      	movs	r3, #0
     a9c:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     a9e:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     aa0:	3302      	adds	r3, #2
     aa2:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(BATT_STATUS , &config_port_pin);
     aa4:	2013      	movs	r0, #19
     aa6:	4b02      	ldr	r3, [pc, #8]	; (ab0 <configure_batt_status_pins+0x1c>)
     aa8:	4798      	blx	r3
}
     aaa:	b003      	add	sp, #12
     aac:	bd00      	pop	{pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	00003731 	.word	0x00003731

00000ab4 <check_batterylevel_initial>:

void check_batterylevel_initial()
{
     ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab6:	46d6      	mov	lr, sl
     ab8:	4647      	mov	r7, r8
     aba:	b580      	push	{r7, lr}
     abc:	b083      	sub	sp, #12
	uint8_t low_battery_adc = 0;
	uint8_t i=0;
	bool fade_increase = false;
	low_battery_adc = adc_start_read_result(BATT_MTR);
     abe:	200a      	movs	r0, #10
     ac0:	4b28      	ldr	r3, [pc, #160]	; (b64 <check_batterylevel_initial+0xb0>)
     ac2:	4798      	blx	r3
	while(low_battery_adc < LOW_BATTERY_THRESHOLD)
     ac4:	4b28      	ldr	r3, [pc, #160]	; (b68 <check_batterylevel_initial+0xb4>)
     ac6:	4798      	blx	r3
     ac8:	4a28      	ldr	r2, [pc, #160]	; (b6c <check_batterylevel_initial+0xb8>)
     aca:	4b29      	ldr	r3, [pc, #164]	; (b70 <check_batterylevel_initial+0xbc>)
     acc:	4c29      	ldr	r4, [pc, #164]	; (b74 <check_batterylevel_initial+0xc0>)
     ace:	47a0      	blx	r4
     ad0:	2700      	movs	r7, #0
     ad2:	2400      	movs	r4, #0
     ad4:	2800      	cmp	r0, #0
     ad6:	d03a      	beq.n	b4e <check_batterylevel_initial+0x9a>
	{
		low_battery_adc = adc_start_read_result(BATT_MTR);
     ad8:	4e22      	ldr	r6, [pc, #136]	; (b64 <check_batterylevel_initial+0xb0>)
		if(fade_increase == false)
		{
			set_led_left_new(RED_MAX-i, 0, 0);
     ada:	4b27      	ldr	r3, [pc, #156]	; (b78 <check_batterylevel_initial+0xc4>)
     adc:	469a      	mov	sl, r3
			set_led_right_new(RED_MAX-i,0, 0);
     ade:	4b27      	ldr	r3, [pc, #156]	; (b7c <check_batterylevel_initial+0xc8>)
     ae0:	4698      	mov	r8, r3
     ae2:	e019      	b.n	b18 <check_batterylevel_initial+0x64>
			}
			
		}
		else
		{
			set_led_left_new(i, 0, 0);
     ae4:	2200      	movs	r2, #0
     ae6:	2100      	movs	r1, #0
     ae8:	0020      	movs	r0, r4
     aea:	4b23      	ldr	r3, [pc, #140]	; (b78 <check_batterylevel_initial+0xc4>)
     aec:	4798      	blx	r3
			set_led_right_new(i,0, 0);
     aee:	2200      	movs	r2, #0
     af0:	2100      	movs	r1, #0
     af2:	0020      	movs	r0, r4
     af4:	4b21      	ldr	r3, [pc, #132]	; (b7c <check_batterylevel_initial+0xc8>)
     af6:	4798      	blx	r3
			i++;
     af8:	3401      	adds	r4, #1
     afa:	b2e4      	uxtb	r4, r4
			if(i > RED_MAX)
     afc:	2cff      	cmp	r4, #255	; 0xff
     afe:	d023      	beq.n	b48 <check_batterylevel_initial+0x94>
				i=0;
				fade_increase = false;
			}
			
		}
		delay_cycles_ms(3);
     b00:	2003      	movs	r0, #3
     b02:	4b1f      	ldr	r3, [pc, #124]	; (b80 <check_batterylevel_initial+0xcc>)
     b04:	4798      	blx	r3
	while(low_battery_adc < LOW_BATTERY_THRESHOLD)
     b06:	9801      	ldr	r0, [sp, #4]
     b08:	4b17      	ldr	r3, [pc, #92]	; (b68 <check_batterylevel_initial+0xb4>)
     b0a:	4798      	blx	r3
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <check_batterylevel_initial+0xb8>)
     b0e:	4b18      	ldr	r3, [pc, #96]	; (b70 <check_batterylevel_initial+0xbc>)
     b10:	4d18      	ldr	r5, [pc, #96]	; (b74 <check_batterylevel_initial+0xc0>)
     b12:	47a8      	blx	r5
     b14:	2800      	cmp	r0, #0
     b16:	d01a      	beq.n	b4e <check_batterylevel_initial+0x9a>
		low_battery_adc = adc_start_read_result(BATT_MTR);
     b18:	200a      	movs	r0, #10
     b1a:	47b0      	blx	r6
     b1c:	9001      	str	r0, [sp, #4]
		if(fade_increase == false)
     b1e:	2f00      	cmp	r7, #0
     b20:	d1e0      	bne.n	ae4 <check_batterylevel_initial+0x30>
			set_led_left_new(RED_MAX-i, 0, 0);
     b22:	2502      	movs	r5, #2
     b24:	426d      	negs	r5, r5
     b26:	1b2d      	subs	r5, r5, r4
     b28:	b2ed      	uxtb	r5, r5
     b2a:	2200      	movs	r2, #0
     b2c:	2100      	movs	r1, #0
     b2e:	0028      	movs	r0, r5
     b30:	47d0      	blx	sl
			set_led_right_new(RED_MAX-i,0, 0);
     b32:	2200      	movs	r2, #0
     b34:	2100      	movs	r1, #0
     b36:	0028      	movs	r0, r5
     b38:	47c0      	blx	r8
			i++;
     b3a:	3401      	adds	r4, #1
     b3c:	b2e4      	uxtb	r4, r4
			if(i > RED_MAX)
     b3e:	2cff      	cmp	r4, #255	; 0xff
     b40:	d1de      	bne.n	b00 <check_batterylevel_initial+0x4c>
				fade_increase = true;
     b42:	3701      	adds	r7, #1
				i=0;
     b44:	2400      	movs	r4, #0
     b46:	e7db      	b.n	b00 <check_batterylevel_initial+0x4c>
				fade_increase = false;
     b48:	2700      	movs	r7, #0
				i=0;
     b4a:	2400      	movs	r4, #0
     b4c:	e7d8      	b.n	b00 <check_batterylevel_initial+0x4c>
		//motors_stop();
		//turn_off_motors();
	}
	set_led_left_new(20, 20, 20);
     b4e:	2214      	movs	r2, #20
     b50:	2114      	movs	r1, #20
     b52:	2014      	movs	r0, #20
     b54:	4b08      	ldr	r3, [pc, #32]	; (b78 <check_batterylevel_initial+0xc4>)
     b56:	4798      	blx	r3
	
}
     b58:	b003      	add	sp, #12
     b5a:	bc0c      	pop	{r2, r3}
     b5c:	4690      	mov	r8, r2
     b5e:	469a      	mov	sl, r3
     b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00006e1d 	.word	0x00006e1d
     b68:	0000a3fd 	.word	0x0000a3fd
     b6c:	5b5f4f8f 	.word	0x5b5f4f8f
     b70:	40650c1c 	.word	0x40650c1c
     b74:	00008eed 	.word	0x00008eed
     b78:	00001145 	.word	0x00001145
     b7c:	00001159 	.word	0x00001159
     b80:	00001a19 	.word	0x00001a19

00000b84 <configure_batt_status>:

void configure_batt_status()
{
     b84:	b510      	push	{r4, lr}
	configure_batt_status_pins();
     b86:	4b01      	ldr	r3, [pc, #4]	; (b8c <configure_batt_status+0x8>)
     b88:	4798      	blx	r3
     b8a:	bd10      	pop	{r4, pc}
     b8c:	00000a95 	.word	0x00000a95

00000b90 <board_init>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void board_init(void)
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     b90:	4a40      	ldr	r2, [pc, #256]	; (c94 <board_init+0x104>)
     b92:	6853      	ldr	r3, [r2, #4]
     b94:	211e      	movs	r1, #30
     b96:	438b      	bics	r3, r1
     b98:	391c      	subs	r1, #28
     b9a:	430b      	orrs	r3, r1
     b9c:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     b9e:	4a3e      	ldr	r2, [pc, #248]	; (c98 <board_init+0x108>)
     ba0:	6993      	ldr	r3, [r2, #24]
     ba2:	3106      	adds	r1, #6
     ba4:	430b      	orrs	r3, r1
     ba6:	6193      	str	r3, [r2, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     ba8:	4b3c      	ldr	r3, [pc, #240]	; (c9c <board_init+0x10c>)
     baa:	4a3d      	ldr	r2, [pc, #244]	; (ca0 <board_init+0x110>)
     bac:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K;
  SYSCTRL->XOSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     bae:	8a9a      	ldrh	r2, [r3, #20]
     bb0:	2102      	movs	r1, #2
     bb2:	430a      	orrs	r2, r1
     bb4:	829a      	strh	r2, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     bb6:	0019      	movs	r1, r3
     bb8:	2202      	movs	r2, #2
     bba:	68cb      	ldr	r3, [r1, #12]
     bbc:	421a      	tst	r2, r3
     bbe:	d0fc      	beq.n	bba <board_init+0x2a>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     bc0:	2201      	movs	r2, #1
     bc2:	4b38      	ldr	r3, [pc, #224]	; (ca4 <board_init+0x114>)
     bc4:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     bc6:	001a      	movs	r2, r3
     bc8:	2101      	movs	r1, #1
     bca:	7813      	ldrb	r3, [r2, #0]
     bcc:	420b      	tst	r3, r1
     bce:	d003      	beq.n	bd8 <board_init+0x48>
     bd0:	7853      	ldrb	r3, [r2, #1]
     bd2:	b25b      	sxtb	r3, r3
     bd4:	2b00      	cmp	r3, #0
     bd6:	dbf8      	blt.n	bca <board_init+0x3a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ); // Generic Clock Generator 1
     bd8:	2201      	movs	r2, #1
     bda:	4b32      	ldr	r3, [pc, #200]	; (ca4 <board_init+0x114>)
     bdc:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     bde:	001a      	movs	r2, r3
     be0:	7853      	ldrb	r3, [r2, #1]
     be2:	b25b      	sxtb	r3, r3
     be4:	2b00      	cmp	r3, #0
     be6:	dbfb      	blt.n	be0 <board_init+0x50>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
     be8:	4a2f      	ldr	r2, [pc, #188]	; (ca8 <board_init+0x118>)
     bea:	4b2e      	ldr	r3, [pc, #184]	; (ca4 <board_init+0x114>)
     bec:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     bee:	001a      	movs	r2, r3
     bf0:	7853      	ldrb	r3, [r2, #1]
     bf2:	b25b      	sxtb	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	dbfb      	blt.n	bf0 <board_init+0x60>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     bf8:	2282      	movs	r2, #130	; 0x82
     bfa:	01d2      	lsls	r2, r2, #7
     bfc:	4b29      	ldr	r3, [pc, #164]	; (ca4 <board_init+0x114>)
     bfe:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c00:	001a      	movs	r2, r3
     c02:	7853      	ldrb	r3, [r2, #1]
     c04:	b25b      	sxtb	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	dbfb      	blt.n	c02 <board_init+0x72>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     c0a:	4a24      	ldr	r2, [pc, #144]	; (c9c <board_init+0x10c>)
     c0c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c0e:	2180      	movs	r1, #128	; 0x80
     c10:	438b      	bics	r3, r1
     c12:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c14:	0011      	movs	r1, r2
     c16:	2210      	movs	r2, #16
     c18:	68cb      	ldr	r3, [r1, #12]
     c1a:	421a      	tst	r2, r3
     c1c:	d0fc      	beq.n	c18 <board_init+0x88>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     c1e:	4a23      	ldr	r2, [pc, #140]	; (cac <board_init+0x11c>)
     c20:	4b1e      	ldr	r3, [pc, #120]	; (c9c <board_init+0x10c>)
     c22:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ); // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c24:	0019      	movs	r1, r3
     c26:	2210      	movs	r2, #16
     c28:	68cb      	ldr	r3, [r1, #12]
     c2a:	421a      	tst	r2, r3
     c2c:	d0fc      	beq.n	c28 <board_init+0x98>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     c2e:	4a1b      	ldr	r2, [pc, #108]	; (c9c <board_init+0x10c>)
     c30:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c32:	491f      	ldr	r1, [pc, #124]	; (cb0 <board_init+0x120>)
     c34:	430b      	orrs	r3, r1
     c36:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c38:	0011      	movs	r1, r2
     c3a:	2210      	movs	r2, #16
     c3c:	68cb      	ldr	r3, [r1, #12]
     c3e:	421a      	tst	r2, r3
     c40:	d0fc      	beq.n	c3c <board_init+0xac>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE;
     c42:	4a16      	ldr	r2, [pc, #88]	; (c9c <board_init+0x10c>)
     c44:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c46:	2102      	movs	r1, #2
     c48:	430b      	orrs	r3, r1
     c4a:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c4c:	317e      	adds	r1, #126	; 0x7e
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c4e:	2040      	movs	r0, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c50:	68d3      	ldr	r3, [r2, #12]
     c52:	4219      	tst	r1, r3
     c54:	d0fc      	beq.n	c50 <board_init+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c56:	68d3      	ldr	r3, [r2, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c58:	4218      	tst	r0, r3
     c5a:	d0f9      	beq.n	c50 <board_init+0xc0>
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c5c:	490f      	ldr	r1, [pc, #60]	; (c9c <board_init+0x10c>)
     c5e:	2210      	movs	r2, #16
     c60:	68cb      	ldr	r3, [r1, #12]
     c62:	421a      	tst	r2, r3
     c64:	d0fc      	beq.n	c60 <board_init+0xd0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ); // Generic Clock Generator 0
     c66:	2200      	movs	r2, #0
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <board_init+0x114>)
     c6a:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c6c:	001a      	movs	r2, r3
     c6e:	7853      	ldrb	r3, [r2, #1]
     c70:	b25b      	sxtb	r3, r3
     c72:	2b00      	cmp	r3, #0
     c74:	dbfb      	blt.n	c6e <board_init+0xde>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <board_init+0x124>)
     c78:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <board_init+0x114>)
     c7a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c7c:	001a      	movs	r2, r3
     c7e:	7853      	ldrb	r3, [r2, #1]
     c80:	b25b      	sxtb	r3, r3
     c82:	2b00      	cmp	r3, #0
     c84:	dbfb      	blt.n	c7e <board_init+0xee>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * These values are normally the ones present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1;
     c86:	4b04      	ldr	r3, [pc, #16]	; (c98 <board_init+0x108>)
     c88:	2200      	movs	r2, #0
     c8a:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val;
     c8c:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val;
     c8e:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val;
     c90:	72da      	strb	r2, [r3, #11]
  
  /* Initialize External hardware */
  
}
     c92:	4770      	bx	lr
     c94:	41004000 	.word	0x41004000
     c98:	40000400 	.word	0x40000400
     c9c:	40000800 	.word	0x40000800
     ca0:	0000060c 	.word	0x0000060c
     ca4:	40000c00 	.word	0x40000c00
     ca8:	00010501 	.word	0x00010501
     cac:	7dff05b8 	.word	0x7dff05b8
     cb0:	00000a04 	.word	0x00000a04
     cb4:	00030700 	.word	0x00030700

00000cb8 <write_data_encoders>:
	
}

// Helper function to just execute a simple write
void write_data_encoders(uint8_t *bufferSend, uint8_t length, struct i2c_master_module *const module)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	b084      	sub	sp, #16
     cbc:	0016      	movs	r6, r2
	struct i2c_master_packet packet = {
     cbe:	ab01      	add	r3, sp, #4
     cc0:	225e      	movs	r2, #94	; 0x5e
     cc2:	801a      	strh	r2, [r3, #0]
     cc4:	8059      	strh	r1, [r3, #2]
     cc6:	9002      	str	r0, [sp, #8]
     cc8:	2200      	movs	r2, #0
     cca:	721a      	strb	r2, [r3, #8]
     ccc:	725a      	strb	r2, [r3, #9]
     cce:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		error_code = i2c_master_write_packet_wait(module, &packet);
     cd0:	4d04      	ldr	r5, [pc, #16]	; (ce4 <write_data_encoders+0x2c>)
     cd2:	4c05      	ldr	r4, [pc, #20]	; (ce8 <write_data_encoders+0x30>)
     cd4:	a901      	add	r1, sp, #4
     cd6:	0030      	movs	r0, r6
     cd8:	47a8      	blx	r5
     cda:	7020      	strb	r0, [r4, #0]
		
	}
	while (error_code != STATUS_OK);
     cdc:	2800      	cmp	r0, #0
     cde:	d1f9      	bne.n	cd4 <write_data_encoders+0x1c>
	
}
     ce0:	b004      	add	sp, #16
     ce2:	bd70      	pop	{r4, r5, r6, pc}
     ce4:	00003c69 	.word	0x00003c69
     ce8:	2000053c 	.word	0x2000053c

00000cec <config_I2C_SERCOM4>:

void config_I2C_SERCOM4()
{
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	b08e      	sub	sp, #56	; 0x38
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     cf0:	ab01      	add	r3, sp, #4
     cf2:	4a24      	ldr	r2, [pc, #144]	; (d84 <config_I2C_SERCOM4+0x98>)
     cf4:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     cf6:	2200      	movs	r2, #0
     cf8:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     cfa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     cfc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     cfe:	2101      	movs	r1, #1
     d00:	4249      	negs	r1, r1
     d02:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d04:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d06:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
     d08:	3125      	adds	r1, #37	; 0x25
     d0a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     d0c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     d0e:	3108      	adds	r1, #8
     d10:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     d12:	3101      	adds	r1, #1
     d14:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     d16:	3101      	adds	r1, #1
     d18:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     d1a:	32d7      	adds	r2, #215	; 0xd7
     d1c:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
     d1e:	4a1a      	ldr	r2, [pc, #104]	; (d88 <config_I2C_SERCOM4+0x9c>)
     d20:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     d22:	22c8      	movs	r2, #200	; 0xc8
     d24:	0052      	lsls	r2, r2, #1
     d26:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
     d28:	22c0      	movs	r2, #192	; 0xc0
     d2a:	0392      	lsls	r2, r2, #14
     d2c:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do 
	{
		error_code = i2c_master_init(&i2c_master_encoder_right, RIGHT_ENCODER_SERCOMM_4, &config_i2c_master);
     d2e:	4e17      	ldr	r6, [pc, #92]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d30:	4d17      	ldr	r5, [pc, #92]	; (d90 <config_I2C_SERCOM4+0xa4>)
     d32:	4c18      	ldr	r4, [pc, #96]	; (d94 <config_I2C_SERCOM4+0xa8>)
     d34:	aa01      	add	r2, sp, #4
     d36:	4918      	ldr	r1, [pc, #96]	; (d98 <config_I2C_SERCOM4+0xac>)
     d38:	0030      	movs	r0, r6
     d3a:	47a8      	blx	r5
     d3c:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
     d3e:	2800      	cmp	r0, #0
     d40:	d1f8      	bne.n	d34 <config_I2C_SERCOM4+0x48>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d42:	4b12      	ldr	r3, [pc, #72]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d44:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d46:	2207      	movs	r2, #7
     d48:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     d4a:	421a      	tst	r2, r3
     d4c:	d1fc      	bne.n	d48 <config_I2C_SERCOM4+0x5c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     d4e:	6823      	ldr	r3, [r4, #0]
     d50:	2202      	movs	r2, #2
     d52:	4313      	orrs	r3, r2
     d54:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d56:	4d0d      	ldr	r5, [pc, #52]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d58:	6828      	ldr	r0, [r5, #0]
     d5a:	4b10      	ldr	r3, [pc, #64]	; (d9c <config_I2C_SERCOM4+0xb0>)
     d5c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d5e:	231f      	movs	r3, #31
     d60:	4018      	ands	r0, r3
     d62:	3b1e      	subs	r3, #30
     d64:	4083      	lsls	r3, r0
     d66:	4a0e      	ldr	r2, [pc, #56]	; (da0 <config_I2C_SERCOM4+0xb4>)
     d68:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     d6a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     d6c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     d6e:	2110      	movs	r1, #16
     d70:	8b62      	ldrh	r2, [r4, #26]
     d72:	420a      	tst	r2, r1
     d74:	d104      	bne.n	d80 <config_I2C_SERCOM4+0x94>
		timeout_counter++;
     d76:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     d78:	4283      	cmp	r3, r0
     d7a:	d3f9      	bcc.n	d70 <config_I2C_SERCOM4+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     d7c:	2310      	movs	r3, #16
     d7e:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder_right);
}
     d80:	b00e      	add	sp, #56	; 0x38
     d82:	bd70      	pop	{r4, r5, r6, pc}
     d84:	00000d48 	.word	0x00000d48
     d88:	ffff9c40 	.word	0xffff9c40
     d8c:	200004ec 	.word	0x200004ec
     d90:	00003761 	.word	0x00003761
     d94:	2000053c 	.word	0x2000053c
     d98:	42001800 	.word	0x42001800
     d9c:	0000437d 	.word	0x0000437d
     da0:	e000e100 	.word	0xe000e100

00000da4 <config_I2C_SERCOM3>:

void config_I2C_SERCOM3()
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	b08e      	sub	sp, #56	; 0x38
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     da8:	ab01      	add	r3, sp, #4
     daa:	4a24      	ldr	r2, [pc, #144]	; (e3c <config_I2C_SERCOM3+0x98>)
     dac:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     dae:	2200      	movs	r2, #0
     db0:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
     db2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     db4:	761a      	strb	r2, [r3, #24]
	config->unknown_bus_state_timeout = 65535;
     db6:	2101      	movs	r1, #1
     db8:	4249      	negs	r1, r1
     dba:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     dbc:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     dbe:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
     dc0:	3125      	adds	r1, #37	; 0x25
     dc2:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     dc4:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
     dc6:	3108      	adds	r1, #8
     dc8:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
     dca:	3101      	adds	r1, #1
     dcc:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     dce:	3101      	adds	r1, #1
     dd0:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
     dd2:	32d7      	adds	r2, #215	; 0xd7
     dd4:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
     dd6:	4a1a      	ldr	r2, [pc, #104]	; (e40 <config_I2C_SERCOM3+0x9c>)
     dd8:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     dda:	22c8      	movs	r2, #200	; 0xc8
     ddc:	0052      	lsls	r2, r2, #1
     dde:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
     de0:	22c0      	movs	r2, #192	; 0xc0
     de2:	0392      	lsls	r2, r2, #14
     de4:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do
	{
		error_code = i2c_master_init(&i2c_master_encoder_left, LEFT_ENCODER_SERCOMM_3, &config_i2c_master);
     de6:	4e17      	ldr	r6, [pc, #92]	; (e44 <config_I2C_SERCOM3+0xa0>)
     de8:	4d17      	ldr	r5, [pc, #92]	; (e48 <config_I2C_SERCOM3+0xa4>)
     dea:	4c18      	ldr	r4, [pc, #96]	; (e4c <config_I2C_SERCOM3+0xa8>)
     dec:	aa01      	add	r2, sp, #4
     dee:	4918      	ldr	r1, [pc, #96]	; (e50 <config_I2C_SERCOM3+0xac>)
     df0:	0030      	movs	r0, r6
     df2:	47a8      	blx	r5
     df4:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
     df6:	2800      	cmp	r0, #0
     df8:	d1f8      	bne.n	dec <config_I2C_SERCOM3+0x48>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dfa:	4b12      	ldr	r3, [pc, #72]	; (e44 <config_I2C_SERCOM3+0xa0>)
     dfc:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     dfe:	2207      	movs	r2, #7
     e00:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     e02:	421a      	tst	r2, r3
     e04:	d1fc      	bne.n	e00 <config_I2C_SERCOM3+0x5c>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e06:	6823      	ldr	r3, [r4, #0]
     e08:	2202      	movs	r2, #2
     e0a:	4313      	orrs	r3, r2
     e0c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e0e:	4d0d      	ldr	r5, [pc, #52]	; (e44 <config_I2C_SERCOM3+0xa0>)
     e10:	6828      	ldr	r0, [r5, #0]
     e12:	4b10      	ldr	r3, [pc, #64]	; (e54 <config_I2C_SERCOM3+0xb0>)
     e14:	4798      	blx	r3
     e16:	231f      	movs	r3, #31
     e18:	4018      	ands	r0, r3
     e1a:	3b1e      	subs	r3, #30
     e1c:	4083      	lsls	r3, r0
     e1e:	4a0e      	ldr	r2, [pc, #56]	; (e58 <config_I2C_SERCOM3+0xb4>)
     e20:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e22:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     e24:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e26:	2110      	movs	r1, #16
     e28:	8b62      	ldrh	r2, [r4, #26]
     e2a:	420a      	tst	r2, r1
     e2c:	d104      	bne.n	e38 <config_I2C_SERCOM3+0x94>
		timeout_counter++;
     e2e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e30:	4283      	cmp	r3, r0
     e32:	d3f9      	bcc.n	e28 <config_I2C_SERCOM3+0x84>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e34:	2310      	movs	r3, #16
     e36:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder_left);
}
     e38:	b00e      	add	sp, #56	; 0x38
     e3a:	bd70      	pop	{r4, r5, r6, pc}
     e3c:	00000d48 	.word	0x00000d48
     e40:	ffff9c40 	.word	0xffff9c40
     e44:	20000514 	.word	0x20000514
     e48:	00003761 	.word	0x00003761
     e4c:	2000053c 	.word	0x2000053c
     e50:	42001400 	.word	0x42001400
     e54:	0000437d 	.word	0x0000437d
     e58:	e000e100 	.word	0xe000e100

00000e5c <initialize_left_encoder>:


void initialize_left_encoder()
{
     e5c:	b500      	push	{lr}
     e5e:	b083      	sub	sp, #12
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
     e60:	a801      	add	r0, sp, #4
     e62:	2300      	movs	r3, #0
     e64:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000110;
     e66:	2206      	movs	r2, #6
     e68:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
     e6a:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;  
     e6c:	3380      	adds	r3, #128	; 0x80
     e6e:	70c3      	strb	r3, [r0, #3]
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder_left);
     e70:	4a02      	ldr	r2, [pc, #8]	; (e7c <initialize_left_encoder+0x20>)
     e72:	2104      	movs	r1, #4
     e74:	4b02      	ldr	r3, [pc, #8]	; (e80 <initialize_left_encoder+0x24>)
     e76:	4798      	blx	r3
	
}
     e78:	b003      	add	sp, #12
     e7a:	bd00      	pop	{pc}
     e7c:	20000514 	.word	0x20000514
     e80:	00000cb9 	.word	0x00000cb9

00000e84 <initialize_right_encoder>:

void initialize_right_encoder()
{
     e84:	b500      	push	{lr}
     e86:	b083      	sub	sp, #12
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
     e88:	a801      	add	r0, sp, #4
     e8a:	2300      	movs	r3, #0
     e8c:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000110;
     e8e:	2206      	movs	r2, #6
     e90:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
     e92:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;
     e94:	3380      	adds	r3, #128	; 0x80
     e96:	70c3      	strb	r3, [r0, #3]
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder_right);
     e98:	4a02      	ldr	r2, [pc, #8]	; (ea4 <initialize_right_encoder+0x20>)
     e9a:	2104      	movs	r1, #4
     e9c:	4b02      	ldr	r3, [pc, #8]	; (ea8 <initialize_right_encoder+0x24>)
     e9e:	4798      	blx	r3
	
}
     ea0:	b003      	add	sp, #12
     ea2:	bd00      	pop	{pc}
     ea4:	200004ec 	.word	0x200004ec
     ea8:	00000cb9 	.word	0x00000cb9

00000eac <config_left_encoder>:

void config_left_encoder()
{
     eac:	b510      	push	{r4, lr}
	config_I2C_SERCOM3(); //have to change
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <config_left_encoder+0xc>)
     eb0:	4798      	blx	r3
	initialize_left_encoder();
     eb2:	4b02      	ldr	r3, [pc, #8]	; (ebc <config_left_encoder+0x10>)
     eb4:	4798      	blx	r3
}
     eb6:	bd10      	pop	{r4, pc}
     eb8:	00000da5 	.word	0x00000da5
     ebc:	00000e5d 	.word	0x00000e5d

00000ec0 <config_right_encoder>:

void config_right_encoder()
{
     ec0:	b510      	push	{r4, lr}
	config_I2C_SERCOM4(); 
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <config_right_encoder+0xc>)
     ec4:	4798      	blx	r3
	initialize_right_encoder();
     ec6:	4b02      	ldr	r3, [pc, #8]	; (ed0 <config_right_encoder+0x10>)
     ec8:	4798      	blx	r3
	
}
     eca:	bd10      	pop	{r4, pc}
     ecc:	00000ced 	.word	0x00000ced
     ed0:	00000e85 	.word	0x00000e85

00000ed4 <config_encoders_modules>:
void config_encoders_modules()
{
     ed4:	b510      	push	{r4, lr}
	config_right_encoder();
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <config_encoders_modules+0xc>)
     ed8:	4798      	blx	r3
	config_left_encoder();
     eda:	4b02      	ldr	r3, [pc, #8]	; (ee4 <config_encoders_modules+0x10>)
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}
     ee0:	00000ec1 	.word	0x00000ec1
     ee4:	00000ead 	.word	0x00000ead

00000ee8 <configure_encoders>:
void configure_encoders()
{
     ee8:	b510      	push	{r4, lr}
	config_encoders_modules();
     eea:	4b01      	ldr	r3, [pc, #4]	; (ef0 <configure_encoders+0x8>)
     eec:	4798      	blx	r3
}
     eee:	bd10      	pop	{r4, pc}
     ef0:	00000ed5 	.word	0x00000ed5

00000ef4 <tc_callback_PWM>:
//Sad used a bubble sort , six elements so did not spend much time on writing a  beautiful code

//! [callback_funcs]
void tc_callback_PWM(
struct tc_module *const module_inst)
{
     ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef6:	46de      	mov	lr, fp
     ef8:	4657      	mov	r7, sl
     efa:	4646      	mov	r6, r8
     efc:	b5c0      	push	{r6, r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	9001      	str	r0, [sp, #4]
	volatile uint32_t count;
	//count = tc_get_count_value(&tc_instance);
	//tc_stop_counter(&tc_instance);
	//count = count +1;
	//Enable the LED
	if(first_time == false)
     f02:	4b51      	ldr	r3, [pc, #324]	; (1048 <tc_callback_PWM+0x154>)
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	2b00      	cmp	r3, #0
     f08:	d000      	beq.n	f0c <tc_callback_PWM+0x18>
     f0a:	e094      	b.n	1036 <tc_callback_PWM+0x142>
	{
		port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f0c:	4a4f      	ldr	r2, [pc, #316]	; (104c <tc_callback_PWM+0x158>)
     f0e:	7813      	ldrb	r3, [r2, #0]
     f10:	1c59      	adds	r1, r3, #1
     f12:	b2c9      	uxtb	r1, r1
     f14:	7011      	strb	r1, [r2, #0]
     f16:	4a4e      	ldr	r2, [pc, #312]	; (1050 <tc_callback_PWM+0x15c>)
     f18:	5cd2      	ldrb	r2, [r2, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f1a:	09d0      	lsrs	r0, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f1c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     f1e:	2800      	cmp	r0, #0
     f20:	d104      	bne.n	f2c <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
     f22:	0953      	lsrs	r3, r2, #5
     f24:	01db      	lsls	r3, r3, #7
     f26:	484b      	ldr	r0, [pc, #300]	; (1054 <tc_callback_PWM+0x160>)
     f28:	4684      	mov	ip, r0
     f2a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f2c:	201f      	movs	r0, #31
     f2e:	4010      	ands	r0, r2
     f30:	2201      	movs	r2, #1
     f32:	4082      	lsls	r2, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f34:	615a      	str	r2, [r3, #20]
		 
		if(time_array_ID < N_valid_compares-1 )
     f36:	4b48      	ldr	r3, [pc, #288]	; (1058 <tc_callback_PWM+0x164>)
     f38:	781e      	ldrb	r6, [r3, #0]
     f3a:	4b48      	ldr	r3, [pc, #288]	; (105c <tc_callback_PWM+0x168>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	3b01      	subs	r3, #1
     f40:	4698      	mov	r8, r3
     f42:	429e      	cmp	r6, r3
     f44:	db00      	blt.n	f48 <tc_callback_PWM+0x54>
     f46:	e070      	b.n	102a <tc_callback_PWM+0x136>
		{
			compare_value_last = time_array[time_array_ID];
     f48:	4845      	ldr	r0, [pc, #276]	; (1060 <tc_callback_PWM+0x16c>)
     f4a:	5d82      	ldrb	r2, [r0, r6]
     f4c:	4b45      	ldr	r3, [pc, #276]	; (1064 <tc_callback_PWM+0x170>)
     f4e:	701a      	strb	r2, [r3, #0]
			compare_value_current = time_array[++time_array_ID];
     f50:	3601      	adds	r6, #1
     f52:	b2f6      	uxtb	r6, r6
     f54:	4b40      	ldr	r3, [pc, #256]	; (1058 <tc_callback_PWM+0x164>)
     f56:	701e      	strb	r6, [r3, #0]
     f58:	0033      	movs	r3, r6
     f5a:	5d85      	ldrb	r5, [r0, r6]
     f5c:	4842      	ldr	r0, [pc, #264]	; (1068 <tc_callback_PWM+0x174>)
     f5e:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f60:	42aa      	cmp	r2, r5
     f62:	d135      	bne.n	fd0 <tc_callback_PWM+0xdc>
     f64:	45b0      	cmp	r8, r6
     f66:	db53      	blt.n	1010 <tc_callback_PWM+0x11c>
     f68:	0008      	movs	r0, r1
			{
				//Enable the LED
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f6a:	4a39      	ldr	r2, [pc, #228]	; (1050 <tc_callback_PWM+0x15c>)
     f6c:	4693      	mov	fp, r2
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f6e:	221f      	movs	r2, #31
     f70:	4692      	mov	sl, r2
     f72:	2701      	movs	r7, #1
				compare_value_last = time_array[time_array_ID];
     f74:	4c3a      	ldr	r4, [pc, #232]	; (1060 <tc_callback_PWM+0x16c>)
     f76:	1a76      	subs	r6, r6, r1
     f78:	e00f      	b.n	f9a <tc_callback_PWM+0xa6>
     f7a:	4655      	mov	r5, sl
     f7c:	402a      	ands	r2, r5
     f7e:	003d      	movs	r5, r7
     f80:	4095      	lsls	r5, r2
		port_base->OUTCLR.reg = pin_mask;
     f82:	6145      	str	r5, [r0, #20]
     f84:	5ce2      	ldrb	r2, [r4, r3]
     f86:	198b      	adds	r3, r1, r6
     f88:	b2db      	uxtb	r3, r3
				compare_value_current = time_array[++time_array_ID];
     f8a:	9300      	str	r3, [sp, #0]
     f8c:	5ce0      	ldrb	r0, [r4, r3]
     f8e:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f90:	4282      	cmp	r2, r0
     f92:	d112      	bne.n	fba <tc_callback_PWM+0xc6>
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f94:	0008      	movs	r0, r1
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f96:	4598      	cmp	r8, r3
     f98:	db2d      	blt.n	ff6 <tc_callback_PWM+0x102>
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f9a:	1c41      	adds	r1, r0, #1
     f9c:	b2c9      	uxtb	r1, r1
     f9e:	465a      	mov	r2, fp
     fa0:	5c12      	ldrb	r2, [r2, r0]
	if (port_index < PORT_INST_NUM) {
     fa2:	09d0      	lsrs	r0, r2, #7
     fa4:	4684      	mov	ip, r0
		return NULL;
     fa6:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
     fa8:	4665      	mov	r5, ip
     faa:	2d00      	cmp	r5, #0
     fac:	d1e5      	bne.n	f7a <tc_callback_PWM+0x86>
		return &(ports[port_index]->Group[group_index]);
     fae:	0950      	lsrs	r0, r2, #5
     fb0:	01c0      	lsls	r0, r0, #7
     fb2:	4d28      	ldr	r5, [pc, #160]	; (1054 <tc_callback_PWM+0x160>)
     fb4:	46ac      	mov	ip, r5
     fb6:	4460      	add	r0, ip
     fb8:	e7df      	b.n	f7a <tc_callback_PWM+0x86>
     fba:	0005      	movs	r5, r0
     fbc:	4b29      	ldr	r3, [pc, #164]	; (1064 <tc_callback_PWM+0x170>)
     fbe:	701a      	strb	r2, [r3, #0]
     fc0:	4b25      	ldr	r3, [pc, #148]	; (1058 <tc_callback_PWM+0x164>)
     fc2:	4668      	mov	r0, sp
     fc4:	7800      	ldrb	r0, [r0, #0]
     fc6:	7018      	strb	r0, [r3, #0]
     fc8:	4b27      	ldr	r3, [pc, #156]	; (1068 <tc_callback_PWM+0x174>)
     fca:	701d      	strb	r5, [r3, #0]
     fcc:	4b1f      	ldr	r3, [pc, #124]	; (104c <tc_callback_PWM+0x158>)
     fce:	7019      	strb	r1, [r3, #0]
			}
			if(compare_value_current != 255)
     fd0:	2dff      	cmp	r5, #255	; 0xff
     fd2:	d01f      	beq.n	1014 <tc_callback_PWM+0x120>
			{
				tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_last);
     fd4:	2100      	movs	r1, #0
     fd6:	9c01      	ldr	r4, [sp, #4]
     fd8:	0020      	movs	r0, r4
     fda:	4b24      	ldr	r3, [pc, #144]	; (106c <tc_callback_PWM+0x178>)
     fdc:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
     fde:	4b22      	ldr	r3, [pc, #136]	; (1068 <tc_callback_PWM+0x174>)
     fe0:	781a      	ldrb	r2, [r3, #0]
     fe2:	2100      	movs	r1, #0
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <tc_callback_PWM+0x17c>)
     fe8:	4798      	blx	r3
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
	//tc_start_counter(&tc_instance);
	
}
     fea:	b002      	add	sp, #8
     fec:	bc1c      	pop	{r2, r3, r4}
     fee:	4690      	mov	r8, r2
     ff0:	469a      	mov	sl, r3
     ff2:	46a3      	mov	fp, r4
     ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ff6:	4665      	mov	r5, ip
     ff8:	4b1a      	ldr	r3, [pc, #104]	; (1064 <tc_callback_PWM+0x170>)
     ffa:	701a      	strb	r2, [r3, #0]
     ffc:	4b16      	ldr	r3, [pc, #88]	; (1058 <tc_callback_PWM+0x164>)
     ffe:	4668      	mov	r0, sp
    1000:	7800      	ldrb	r0, [r0, #0]
    1002:	7018      	strb	r0, [r3, #0]
    1004:	4b18      	ldr	r3, [pc, #96]	; (1068 <tc_callback_PWM+0x174>)
    1006:	701a      	strb	r2, [r3, #0]
    1008:	4b10      	ldr	r3, [pc, #64]	; (104c <tc_callback_PWM+0x158>)
    100a:	7019      	strb	r1, [r3, #0]
				compare_value_current = time_array[++time_array_ID];
    100c:	4662      	mov	r2, ip
    100e:	e7df      	b.n	fd0 <tc_callback_PWM+0xdc>
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
    1010:	0015      	movs	r5, r2
    1012:	e7dd      	b.n	fd0 <tc_callback_PWM+0xdc>
				tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_last);
    1014:	2100      	movs	r1, #0
    1016:	9c01      	ldr	r4, [sp, #4]
    1018:	0020      	movs	r0, r4
    101a:	4b14      	ldr	r3, [pc, #80]	; (106c <tc_callback_PWM+0x178>)
    101c:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    101e:	2200      	movs	r2, #0
    1020:	2100      	movs	r1, #0
    1022:	0020      	movs	r0, r4
    1024:	4b12      	ldr	r3, [pc, #72]	; (1070 <tc_callback_PWM+0x17c>)
    1026:	4798      	blx	r3
    1028:	e7df      	b.n	fea <tc_callback_PWM+0xf6>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    102a:	2200      	movs	r2, #0
    102c:	2100      	movs	r1, #0
    102e:	9801      	ldr	r0, [sp, #4]
    1030:	4b0f      	ldr	r3, [pc, #60]	; (1070 <tc_callback_PWM+0x17c>)
    1032:	4798      	blx	r3
    1034:	e7d9      	b.n	fea <tc_callback_PWM+0xf6>
		first_time = false;
    1036:	2200      	movs	r2, #0
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <tc_callback_PWM+0x154>)
    103a:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    103c:	2100      	movs	r1, #0
    103e:	9801      	ldr	r0, [sp, #4]
    1040:	4b0b      	ldr	r3, [pc, #44]	; (1070 <tc_callback_PWM+0x17c>)
    1042:	4798      	blx	r3
}
    1044:	e7d1      	b.n	fea <tc_callback_PWM+0xf6>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	2000000d 	.word	0x2000000d
    104c:	20000574 	.word	0x20000574
    1050:	20000578 	.word	0x20000578
    1054:	41004400 	.word	0x41004400
    1058:	20000546 	.word	0x20000546
    105c:	2000000c 	.word	0x2000000c
    1060:	20000550 	.word	0x20000550
    1064:	20000216 	.word	0x20000216
    1068:	20000215 	.word	0x20000215
    106c:	00005153 	.word	0x00005153
    1070:	00005103 	.word	0x00005103

00001074 <increasing_sort_tag>:
	//tc_start_counter(&tc_instance);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
}

void increasing_sort_tag()
{
    1074:	b5f0      	push	{r4, r5, r6, r7, lr}
    1076:	46ce      	mov	lr, r9
    1078:	b500      	push	{lr}
	uint8_t i,j ,temp;
	uint8_t N=6;
	for(i=0; i< N-1 ;i++)
	{
		for(j=0;j< N-i-1;j++)
    107a:	2305      	movs	r3, #5
    107c:	4699      	mov	r9, r3
		{
			if(temp_time_array[j]>temp_time_array[j+1])
    107e:	4f13      	ldr	r7, [pc, #76]	; (10cc <increasing_sort_tag+0x58>)
			{
				temp = temp_time_array[j];
				temp_time_array[j] = temp_time_array[j+1];
    1080:	003e      	movs	r6, r7
				temp_time_array[j+1]= temp;
				
				temp = temp_led_array[j];
    1082:	4d13      	ldr	r5, [pc, #76]	; (10d0 <increasing_sort_tag+0x5c>)
    1084:	e017      	b.n	10b6 <increasing_sort_tag+0x42>
		for(j=0;j< N-i-1;j++)
    1086:	3301      	adds	r3, #1
    1088:	b2db      	uxtb	r3, r3
    108a:	001a      	movs	r2, r3
    108c:	4563      	cmp	r3, ip
    108e:	da0b      	bge.n	10a8 <increasing_sort_tag+0x34>
			if(temp_time_array[j]>temp_time_array[j+1])
    1090:	5cb8      	ldrb	r0, [r7, r2]
    1092:	1c51      	adds	r1, r2, #1
    1094:	5c7c      	ldrb	r4, [r7, r1]
    1096:	42a0      	cmp	r0, r4
    1098:	d9f5      	bls.n	1086 <increasing_sort_tag+0x12>
				temp_time_array[j] = temp_time_array[j+1];
    109a:	54b4      	strb	r4, [r6, r2]
				temp_time_array[j+1]= temp;
    109c:	5470      	strb	r0, [r6, r1]
				temp = temp_led_array[j];
    109e:	5ca8      	ldrb	r0, [r5, r2]
				temp_led_array[j] = temp_led_array[j+1];
    10a0:	5c6c      	ldrb	r4, [r5, r1]
    10a2:	54ac      	strb	r4, [r5, r2]
				temp_led_array[j+1] = temp;
    10a4:	5468      	strb	r0, [r5, r1]
    10a6:	e7ee      	b.n	1086 <increasing_sort_tag+0x12>
    10a8:	2301      	movs	r3, #1
    10aa:	425b      	negs	r3, r3
    10ac:	469c      	mov	ip, r3
    10ae:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    10b0:	464b      	mov	r3, r9
    10b2:	2b00      	cmp	r3, #0
    10b4:	d006      	beq.n	10c4 <increasing_sort_tag+0x50>
		for(j=0;j< N-i-1;j++)
    10b6:	46cc      	mov	ip, r9
    10b8:	2200      	movs	r2, #0
    10ba:	2300      	movs	r3, #0
    10bc:	4649      	mov	r1, r9
    10be:	2900      	cmp	r1, #0
    10c0:	dce6      	bgt.n	1090 <increasing_sort_tag+0x1c>
    10c2:	e7f1      	b.n	10a8 <increasing_sort_tag+0x34>
				
			}
		}
	}
}
    10c4:	bc04      	pop	{r2}
    10c6:	4691      	mov	r9, r2
    10c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	20000540 	.word	0x20000540
    10d0:	20000548 	.word	0x20000548

000010d4 <transfer_temp>:

void transfer_temp()
{
    10d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t i;
	N_valid_compares = 0;
    10d6:	2200      	movs	r2, #0
    10d8:	4b0d      	ldr	r3, [pc, #52]	; (1110 <transfer_temp+0x3c>)
    10da:	701a      	strb	r2, [r3, #0]
    10dc:	2300      	movs	r3, #0
    10de:	2600      	movs	r6, #0
	for(i=0;i<=5;i++)
	{
		if(temp_time_array[i] != 255)
    10e0:	4d0c      	ldr	r5, [pc, #48]	; (1114 <transfer_temp+0x40>)
		{
			N_valid_compares++;
		}
		time_array[i] = temp_time_array[i] ;
    10e2:	4f0d      	ldr	r7, [pc, #52]	; (1118 <transfer_temp+0x44>)
		led_array[i]  = temp_led_array[i];
    10e4:	4c0d      	ldr	r4, [pc, #52]	; (111c <transfer_temp+0x48>)
    10e6:	480e      	ldr	r0, [pc, #56]	; (1120 <transfer_temp+0x4c>)
    10e8:	e005      	b.n	10f6 <transfer_temp+0x22>
		time_array[i] = temp_time_array[i] ;
    10ea:	54f9      	strb	r1, [r7, r3]
		led_array[i]  = temp_led_array[i];
    10ec:	5cc1      	ldrb	r1, [r0, r3]
    10ee:	54e1      	strb	r1, [r4, r3]
    10f0:	3301      	adds	r3, #1
	for(i=0;i<=5;i++)
    10f2:	2b06      	cmp	r3, #6
    10f4:	d006      	beq.n	1104 <transfer_temp+0x30>
		if(temp_time_array[i] != 255)
    10f6:	5ce9      	ldrb	r1, [r5, r3]
    10f8:	29ff      	cmp	r1, #255	; 0xff
    10fa:	d0f6      	beq.n	10ea <transfer_temp+0x16>
			N_valid_compares++;
    10fc:	3201      	adds	r2, #1
    10fe:	b2d2      	uxtb	r2, r2
    1100:	2601      	movs	r6, #1
    1102:	e7f2      	b.n	10ea <transfer_temp+0x16>
    1104:	2e00      	cmp	r6, #0
    1106:	d100      	bne.n	110a <transfer_temp+0x36>
	}
}
    1108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    110a:	4b01      	ldr	r3, [pc, #4]	; (1110 <transfer_temp+0x3c>)
    110c:	701a      	strb	r2, [r3, #0]
    110e:	e7fb      	b.n	1108 <transfer_temp+0x34>
    1110:	2000000c 	.word	0x2000000c
    1114:	20000540 	.word	0x20000540
    1118:	20000550 	.word	0x20000550
    111c:	20000578 	.word	0x20000578
    1120:	20000548 	.word	0x20000548

00001124 <initializing_led_pins>:

void initializing_led_pins()
{
	
	temp_led_array[0]  = PIN_PA07;
    1124:	4b06      	ldr	r3, [pc, #24]	; (1140 <initializing_led_pins+0x1c>)
    1126:	2207      	movs	r2, #7
    1128:	701a      	strb	r2, [r3, #0]
	temp_led_array[1]  = PIN_PA06;
    112a:	3a01      	subs	r2, #1
    112c:	705a      	strb	r2, [r3, #1]
	temp_led_array[2]  = PIN_PB22;
    112e:	3230      	adds	r2, #48	; 0x30
    1130:	709a      	strb	r2, [r3, #2]
	temp_led_array[3]  = PIN_PB11;
    1132:	3a0b      	subs	r2, #11
    1134:	70da      	strb	r2, [r3, #3]
	temp_led_array[4]  = PIN_PB10;
    1136:	3a01      	subs	r2, #1
    1138:	711a      	strb	r2, [r3, #4]
	temp_led_array[5]  = PIN_PA27;
    113a:	3a0f      	subs	r2, #15
    113c:	715a      	strb	r2, [r3, #5]
}
    113e:	4770      	bx	lr
    1140:	20000548 	.word	0x20000548

00001144 <set_led_left_new>:

void set_led_left_new(uint8_t red, uint8_t green, uint8_t blue)
{
	temp_time_array[0] = MAX_INTENSITY - red;
    1144:	4b03      	ldr	r3, [pc, #12]	; (1154 <set_led_left_new+0x10>)
    1146:	43c0      	mvns	r0, r0
    1148:	7018      	strb	r0, [r3, #0]
	temp_time_array[1] = MAX_INTENSITY - green;
    114a:	43c9      	mvns	r1, r1
    114c:	7059      	strb	r1, [r3, #1]
	temp_time_array[2] = MAX_INTENSITY - blue;
    114e:	43d2      	mvns	r2, r2
    1150:	709a      	strb	r2, [r3, #2]
	//initializing_led_pins();
	
	//increasing_sort_tag();
	//update_LED = true;

}
    1152:	4770      	bx	lr
    1154:	20000540 	.word	0x20000540

00001158 <set_led_right_new>:

void set_led_right_new(uint8_t red, uint8_t green, uint8_t blue)
{
    1158:	b510      	push	{r4, lr}
	temp_time_array[3] = MAX_INTENSITY - red;
    115a:	4b07      	ldr	r3, [pc, #28]	; (1178 <set_led_right_new+0x20>)
    115c:	43c0      	mvns	r0, r0
    115e:	70d8      	strb	r0, [r3, #3]
	temp_time_array[4] = MAX_INTENSITY - green;
    1160:	43c9      	mvns	r1, r1
    1162:	7119      	strb	r1, [r3, #4]
	temp_time_array[5] = MAX_INTENSITY- blue;
    1164:	43d2      	mvns	r2, r2
    1166:	715a      	strb	r2, [r3, #5]
	initializing_led_pins();
    1168:	4b04      	ldr	r3, [pc, #16]	; (117c <set_led_right_new+0x24>)
    116a:	4798      	blx	r3
	
	increasing_sort_tag();
    116c:	4b04      	ldr	r3, [pc, #16]	; (1180 <set_led_right_new+0x28>)
    116e:	4798      	blx	r3
	update_LED = true;
    1170:	2201      	movs	r2, #1
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <set_led_right_new+0x2c>)
    1174:	701a      	strb	r2, [r3, #0]
}
    1176:	bd10      	pop	{r4, pc}
    1178:	20000540 	.word	0x20000540
    117c:	00001125 	.word	0x00001125
    1180:	00001075 	.word	0x00001075
    1184:	20000217 	.word	0x20000217

00001188 <initializing_leds>:

void initializing_leds()
{

	temp_time_array[0] = 254;//Left -- R
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <initializing_leds+0x14>)
    118a:	22fe      	movs	r2, #254	; 0xfe
    118c:	701a      	strb	r2, [r3, #0]
	temp_time_array[1] = 254;//Left  -- G
    118e:	705a      	strb	r2, [r3, #1]
	temp_time_array[2] = 254;//Left  -- B
    1190:	709a      	strb	r2, [r3, #2]
	temp_time_array[3] = 254;//Right -- R
    1192:	70da      	strb	r2, [r3, #3]
	temp_time_array[4] = 254;//Right  -- G
    1194:	711a      	strb	r2, [r3, #4]
	temp_time_array[5] = 254;//Right -- B
    1196:	715a      	strb	r2, [r3, #5]

}
    1198:	4770      	bx	lr
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	20000540 	.word	0x20000540

000011a0 <setup_output_levels_leds_off>:
		port_base->OUTSET.reg = pin_mask;
    11a0:	4a09      	ldr	r2, [pc, #36]	; (11c8 <setup_output_levels_leds_off+0x28>)
    11a2:	2380      	movs	r3, #128	; 0x80
    11a4:	6193      	str	r3, [r2, #24]
    11a6:	2140      	movs	r1, #64	; 0x40
    11a8:	6191      	str	r1, [r2, #24]
    11aa:	4694      	mov	ip, r2
    11ac:	4463      	add	r3, ip
    11ae:	2180      	movs	r1, #128	; 0x80
    11b0:	03c9      	lsls	r1, r1, #15
    11b2:	6199      	str	r1, [r3, #24]
    11b4:	2180      	movs	r1, #128	; 0x80
    11b6:	0109      	lsls	r1, r1, #4
    11b8:	6199      	str	r1, [r3, #24]
    11ba:	2180      	movs	r1, #128	; 0x80
    11bc:	00c9      	lsls	r1, r1, #3
    11be:	6199      	str	r1, [r3, #24]
    11c0:	2380      	movs	r3, #128	; 0x80
    11c2:	051b      	lsls	r3, r3, #20
    11c4:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(L_BLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_RLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_GLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_BLED_PIN,RGB_LED_ENABLE);
	
}
    11c6:	4770      	bx	lr
    11c8:	41004400 	.word	0x41004400

000011cc <tc_callback_OF>:
{
    11cc:	b510      	push	{r4, lr}
    11ce:	0004      	movs	r4, r0
	setup_output_levels_leds_off();
    11d0:	4b20      	ldr	r3, [pc, #128]	; (1254 <tc_callback_OF+0x88>)
    11d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11d4:	4b20      	ldr	r3, [pc, #128]	; (1258 <tc_callback_OF+0x8c>)
    11d6:	6818      	ldr	r0, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11d8:	7bc3      	ldrb	r3, [r0, #15]

	while (tc_is_syncing(module_inst)) {
    11da:	b25b      	sxtb	r3, r3
    11dc:	2b00      	cmp	r3, #0
    11de:	dbfb      	blt.n	11d8 <tc_callback_OF+0xc>
		/* Wait for sync */
	}
	
	/* Enable TC module */
	tc_module->INTFLAG.reg = 0x30; //Clearing the Channel 0 and Channel 1 interrupt
    11e0:	2330      	movs	r3, #48	; 0x30
    11e2:	7383      	strb	r3, [r0, #14]
	if(update_LED == true)
    11e4:	4b1d      	ldr	r3, [pc, #116]	; (125c <tc_callback_OF+0x90>)
    11e6:	781b      	ldrb	r3, [r3, #0]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d115      	bne.n	1218 <tc_callback_OF+0x4c>
	time_array_ID = 0;
    11ec:	2300      	movs	r3, #0
    11ee:	4a1c      	ldr	r2, [pc, #112]	; (1260 <tc_callback_OF+0x94>)
    11f0:	7013      	strb	r3, [r2, #0]
	led_array_ID  = 0;
    11f2:	4a1c      	ldr	r2, [pc, #112]	; (1264 <tc_callback_OF+0x98>)
    11f4:	7013      	strb	r3, [r2, #0]
	compare_value = time_array[0];
    11f6:	4b1c      	ldr	r3, [pc, #112]	; (1268 <tc_callback_OF+0x9c>)
    11f8:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    11fa:	2aff      	cmp	r2, #255	; 0xff
    11fc:	d124      	bne.n	1248 <tc_callback_OF+0x7c>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    11fe:	4b16      	ldr	r3, [pc, #88]	; (1258 <tc_callback_OF+0x8c>)
    1200:	2110      	movs	r1, #16
    1202:	681a      	ldr	r2, [r3, #0]
    1204:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1206:	7e5a      	ldrb	r2, [r3, #25]
    1208:	438a      	bics	r2, r1
    120a:	765a      	strb	r2, [r3, #25]
	tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    120c:	2200      	movs	r2, #0
    120e:	2100      	movs	r1, #0
    1210:	0020      	movs	r0, r4
    1212:	4b16      	ldr	r3, [pc, #88]	; (126c <tc_callback_OF+0xa0>)
    1214:	4798      	blx	r3
}
    1216:	bd10      	pop	{r4, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1218:	4b15      	ldr	r3, [pc, #84]	; (1270 <tc_callback_OF+0xa4>)
    121a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    121c:	4b15      	ldr	r3, [pc, #84]	; (1274 <tc_callback_OF+0xa8>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    121e:	5c1b      	ldrb	r3, [r3, r0]
    1220:	221f      	movs	r2, #31
    1222:	401a      	ands	r2, r3
    1224:	2301      	movs	r3, #1
    1226:	4093      	lsls	r3, r2
    1228:	4a13      	ldr	r2, [pc, #76]	; (1278 <tc_callback_OF+0xac>)
    122a:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    122c:	4b0a      	ldr	r3, [pc, #40]	; (1258 <tc_callback_OF+0x8c>)
    122e:	7e5a      	ldrb	r2, [r3, #25]
    1230:	2110      	movs	r1, #16
    1232:	430a      	orrs	r2, r1
    1234:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	2210      	movs	r2, #16
    123a:	735a      	strb	r2, [r3, #13]
		transfer_temp();
    123c:	4b0f      	ldr	r3, [pc, #60]	; (127c <tc_callback_OF+0xb0>)
    123e:	4798      	blx	r3
		update_LED = false;
    1240:	2200      	movs	r2, #0
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <tc_callback_OF+0x90>)
    1244:	701a      	strb	r2, [r3, #0]
    1246:	e7d1      	b.n	11ec <tc_callback_OF+0x20>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    1248:	2100      	movs	r1, #0
    124a:	0020      	movs	r0, r4
    124c:	4b0c      	ldr	r3, [pc, #48]	; (1280 <tc_callback_OF+0xb4>)
    124e:	4798      	blx	r3
    1250:	e7dc      	b.n	120c <tc_callback_OF+0x40>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	000011a1 	.word	0x000011a1
    1258:	20000558 	.word	0x20000558
    125c:	20000217 	.word	0x20000217
    1260:	20000546 	.word	0x20000546
    1264:	20000574 	.word	0x20000574
    1268:	20000550 	.word	0x20000550
    126c:	00005153 	.word	0x00005153
    1270:	00004e31 	.word	0x00004e31
    1274:	0000a5e4 	.word	0x0000a5e4
    1278:	e000e100 	.word	0xe000e100
    127c:	000010d5 	.word	0x000010d5
    1280:	00005103 	.word	0x00005103

00001284 <setup_outputs_leds>:

void setup_outputs_leds()
{
    1284:	b530      	push	{r4, r5, lr}
    1286:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1288:	ac01      	add	r4, sp, #4
    128a:	2301      	movs	r3, #1
    128c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    128e:	2200      	movs	r2, #0
    1290:	70a2      	strb	r2, [r4, #2]
	
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1292:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(L_RLED_PIN, &config_port_pin);
    1294:	0021      	movs	r1, r4
    1296:	2007      	movs	r0, #7
    1298:	4d0a      	ldr	r5, [pc, #40]	; (12c4 <setup_outputs_leds+0x40>)
    129a:	47a8      	blx	r5
	port_pin_set_config(L_GLED_PIN, &config_port_pin);
    129c:	0021      	movs	r1, r4
    129e:	2006      	movs	r0, #6
    12a0:	47a8      	blx	r5
	port_pin_set_config(L_BLED_PIN, &config_port_pin);
    12a2:	0021      	movs	r1, r4
    12a4:	2036      	movs	r0, #54	; 0x36
    12a6:	47a8      	blx	r5
	port_pin_set_config(R_RLED_PIN, &config_port_pin);
    12a8:	0021      	movs	r1, r4
    12aa:	202b      	movs	r0, #43	; 0x2b
    12ac:	47a8      	blx	r5
	port_pin_set_config(R_GLED_PIN, &config_port_pin);
    12ae:	0021      	movs	r1, r4
    12b0:	202a      	movs	r0, #42	; 0x2a
    12b2:	47a8      	blx	r5
	port_pin_set_config(R_BLED_PIN, &config_port_pin);
    12b4:	0021      	movs	r1, r4
    12b6:	201b      	movs	r0, #27
    12b8:	47a8      	blx	r5
	setup_output_levels_leds_off();
    12ba:	4b03      	ldr	r3, [pc, #12]	; (12c8 <setup_outputs_leds+0x44>)
    12bc:	4798      	blx	r3

}
    12be:	b003      	add	sp, #12
    12c0:	bd30      	pop	{r4, r5, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	00003731 	.word	0x00003731
    12c8:	000011a1 	.word	0x000011a1

000012cc <configure_rgb_led>:


void configure_rgb_led(void)
{	
    12cc:	b510      	push	{r4, lr}
    12ce:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    12d0:	aa01      	add	r2, sp, #4
    12d2:	2300      	movs	r3, #0
    12d4:	2100      	movs	r1, #0
    12d6:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    12d8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    12da:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    12dc:	2000      	movs	r0, #0
    12de:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    12e0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    12e2:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    12e4:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    12e6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    12e8:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    12ea:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    12ec:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    12ee:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    12f0:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    12f2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    12f4:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    12f6:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    12f8:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    12fa:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config rgb_led_config;
	tc_get_config_defaults(&rgb_led_config);
	//rgb_led_config.clock_source = GCLK_GENERATOR_1;
	rgb_led_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    12fc:	23e0      	movs	r3, #224	; 0xe0
    12fe:	00db      	lsls	r3, r3, #3
    1300:	8093      	strh	r3, [r2, #4]
	rgb_led_config.counter_size = TC_COUNTER_SIZE_8BIT; 
    1302:	2304      	movs	r3, #4
    1304:	7093      	strb	r3, [r2, #2]
	rgb_led_config.counter_8_bit.period = 0XFF;
    1306:	21ff      	movs	r1, #255	; 0xff
    1308:	3325      	adds	r3, #37	; 0x25
    130a:	54d1      	strb	r1, [r2, r3]
	rgb_led_config.counter_8_bit.compare_capture_channel[0] = 0;
	
	tc_init(&tc_instance, TC3, &rgb_led_config);
    130c:	4c0c      	ldr	r4, [pc, #48]	; (1340 <configure_rgb_led+0x74>)
    130e:	490d      	ldr	r1, [pc, #52]	; (1344 <configure_rgb_led+0x78>)
    1310:	0020      	movs	r0, r4
    1312:	4b0d      	ldr	r3, [pc, #52]	; (1348 <configure_rgb_led+0x7c>)
    1314:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1316:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1318:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    131a:	b25b      	sxtb	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	dbfb      	blt.n	1318 <configure_rgb_led+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1320:	8813      	ldrh	r3, [r2, #0]
    1322:	2102      	movs	r1, #2
    1324:	430b      	orrs	r3, r1
    1326:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
	
	initializing_leds();
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <configure_rgb_led+0x80>)
    132a:	4798      	blx	r3
	initializing_led_pins();
    132c:	4b08      	ldr	r3, [pc, #32]	; (1350 <configure_rgb_led+0x84>)
    132e:	4798      	blx	r3
	increasing_sort_tag();
    1330:	4b08      	ldr	r3, [pc, #32]	; (1354 <configure_rgb_led+0x88>)
    1332:	4798      	blx	r3
	transfer_temp();
    1334:	4b08      	ldr	r3, [pc, #32]	; (1358 <configure_rgb_led+0x8c>)
    1336:	4798      	blx	r3
	setup_outputs_leds();
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <configure_rgb_led+0x90>)
    133a:	4798      	blx	r3
}
    133c:	b00e      	add	sp, #56	; 0x38
    133e:	bd10      	pop	{r4, pc}
    1340:	20000558 	.word	0x20000558
    1344:	42002c00 	.word	0x42002c00
    1348:	00004e69 	.word	0x00004e69
    134c:	00001189 	.word	0x00001189
    1350:	00001125 	.word	0x00001125
    1354:	00001075 	.word	0x00001075
    1358:	000010d5 	.word	0x000010d5
    135c:	00001285 	.word	0x00001285

00001360 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	46ce      	mov	lr, r9
    1364:	4647      	mov	r7, r8
    1366:	b580      	push	{r7, lr}
	tc_register_callback(&tc_instance, tc_callback_OF,
    1368:	4c17      	ldr	r4, [pc, #92]	; (13c8 <configure_tc_callbacks+0x68>)
    136a:	2200      	movs	r2, #0
    136c:	4917      	ldr	r1, [pc, #92]	; (13cc <configure_tc_callbacks+0x6c>)
    136e:	0020      	movs	r0, r4
    1370:	4d17      	ldr	r5, [pc, #92]	; (13d0 <configure_tc_callbacks+0x70>)
    1372:	47a8      	blx	r5
	TC_CALLBACK_OVERFLOW);
	tc_register_callback(&tc_instance, tc_callback_PWM,
    1374:	2202      	movs	r2, #2
    1376:	4917      	ldr	r1, [pc, #92]	; (13d4 <configure_tc_callbacks+0x74>)
    1378:	0020      	movs	r0, r4
    137a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    137c:	6820      	ldr	r0, [r4, #0]
    137e:	4b16      	ldr	r3, [pc, #88]	; (13d8 <configure_tc_callbacks+0x78>)
    1380:	4699      	mov	r9, r3
    1382:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1384:	4b15      	ldr	r3, [pc, #84]	; (13dc <configure_tc_callbacks+0x7c>)
    1386:	4698      	mov	r8, r3
    1388:	5c1b      	ldrb	r3, [r3, r0]
    138a:	261f      	movs	r6, #31
    138c:	4033      	ands	r3, r6
    138e:	2501      	movs	r5, #1
    1390:	002a      	movs	r2, r5
    1392:	409a      	lsls	r2, r3
    1394:	4f12      	ldr	r7, [pc, #72]	; (13e0 <configure_tc_callbacks+0x80>)
    1396:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    1398:	7e63      	ldrb	r3, [r4, #25]
    139a:	2201      	movs	r2, #1
    139c:	4313      	orrs	r3, r2
    139e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    13a0:	6823      	ldr	r3, [r4, #0]
    13a2:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    13a4:	0018      	movs	r0, r3
    13a6:	47c8      	blx	r9
    13a8:	4643      	mov	r3, r8
    13aa:	5c1b      	ldrb	r3, [r3, r0]
    13ac:	401e      	ands	r6, r3
    13ae:	40b5      	lsls	r5, r6
    13b0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    13b2:	7e63      	ldrb	r3, [r4, #25]
    13b4:	2210      	movs	r2, #16
    13b6:	4313      	orrs	r3, r2
    13b8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    13ba:	6823      	ldr	r3, [r4, #0]
    13bc:	2210      	movs	r2, #16
    13be:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	
}
    13c0:	bc0c      	pop	{r2, r3}
    13c2:	4690      	mov	r8, r2
    13c4:	4699      	mov	r9, r3
    13c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13c8:	20000558 	.word	0x20000558
    13cc:	000011cd 	.word	0x000011cd
    13d0:	00004d5d 	.word	0x00004d5d
    13d4:	00000ef5 	.word	0x00000ef5
    13d8:	00004e31 	.word	0x00004e31
    13dc:	0000a5e4 	.word	0x0000a5e4
    13e0:	e000e100 	.word	0xe000e100

000013e4 <switch_off_LEDS>:

void switch_off_LEDS()
{
    13e4:	b510      	push	{r4, lr}
	temp_time_array[0] = MAX_INTENSITY - red;
    13e6:	4b05      	ldr	r3, [pc, #20]	; (13fc <switch_off_LEDS+0x18>)
    13e8:	22ff      	movs	r2, #255	; 0xff
    13ea:	701a      	strb	r2, [r3, #0]
	temp_time_array[1] = MAX_INTENSITY - green;
    13ec:	705a      	strb	r2, [r3, #1]
	temp_time_array[2] = MAX_INTENSITY - blue;
    13ee:	709a      	strb	r2, [r3, #2]
	set_led_left_new(VALUE_LED_OFF,VALUE_LED_OFF,VALUE_LED_OFF);
	set_led_right_new(VALUE_LED_OFF,VALUE_LED_OFF,VALUE_LED_OFF);
    13f0:	2200      	movs	r2, #0
    13f2:	2100      	movs	r1, #0
    13f4:	2000      	movs	r0, #0
    13f6:	4b02      	ldr	r3, [pc, #8]	; (1400 <switch_off_LEDS+0x1c>)
    13f8:	4798      	blx	r3
	
}
    13fa:	bd10      	pop	{r4, pc}
    13fc:	20000540 	.word	0x20000540
    1400:	00001159 	.word	0x00001159

00001404 <enable_power_ic>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <enable_power_ic+0x10>)
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	02d2      	lsls	r2, r2, #11
    140a:	619a      	str	r2, [r3, #24]
    140c:	2280      	movs	r2, #128	; 0x80
    140e:	01d2      	lsls	r2, r2, #7
    1410:	619a      	str	r2, [r3, #24]

void enable_power_ic(void)
{
	port_pin_set_output_level(ENABLE_PIN_PWIC,ENABLE_PWIC);
	port_pin_set_output_level(ENABLE_PIN_5V,ENABLE_5V);
}
    1412:	4770      	bx	lr
    1414:	41004400 	.word	0x41004400

00001418 <configure_power_enable_pins>:


void configure_power_enable_pins(void)
{
    1418:	b530      	push	{r4, r5, lr}
    141a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    141c:	ac01      	add	r4, sp, #4
    141e:	2301      	movs	r3, #1
    1420:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1422:	2200      	movs	r2, #0
    1424:	70a2      	strb	r2, [r4, #2]

	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1426:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ENABLE_PIN_PWIC, &config_port_pin);
    1428:	0021      	movs	r1, r4
    142a:	2012      	movs	r0, #18
    142c:	4d03      	ldr	r5, [pc, #12]	; (143c <configure_power_enable_pins+0x24>)
    142e:	47a8      	blx	r5
	port_pin_set_config(ENABLE_PIN_5V, &config_port_pin);
    1430:	0021      	movs	r1, r4
    1432:	200e      	movs	r0, #14
    1434:	47a8      	blx	r5


	
    1436:	b003      	add	sp, #12
    1438:	bd30      	pop	{r4, r5, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00003731 	.word	0x00003731

00001440 <usart_read_callback>:
{
	serial_ble_usart_configure();	
}

void usart_read_callback(struct usart_module *const usart_module)
{
    1440:	b530      	push	{r4, r5, lr}
	uint16_t received_data;
	received_data_updated = true;
    1442:	4809      	ldr	r0, [pc, #36]	; (1468 <usart_read_callback+0x28>)
    1444:	2401      	movs	r4, #1
    1446:	7004      	strb	r4, [r0, #0]
	received_data = (usart_ble_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    1448:	4b08      	ldr	r3, [pc, #32]	; (146c <usart_read_callback+0x2c>)
    144a:	681b      	ldr	r3, [r3, #0]
    144c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
	*(ring_buffer + head_ring_buffer) = (uint8_t)received_data;
    144e:	4a08      	ldr	r2, [pc, #32]	; (1470 <usart_read_callback+0x30>)
    1450:	7815      	ldrb	r5, [r2, #0]
    1452:	4b08      	ldr	r3, [pc, #32]	; (1474 <usart_read_callback+0x34>)
    1454:	195b      	adds	r3, r3, r5
    1456:	b2c9      	uxtb	r1, r1
    1458:	7019      	strb	r1, [r3, #0]
	head_ring_buffer++;
    145a:	7813      	ldrb	r3, [r2, #0]
    145c:	3301      	adds	r3, #1
    145e:	b2db      	uxtb	r3, r3
    1460:	7013      	strb	r3, [r2, #0]
	received_data_updated = true;
    1462:	7004      	strb	r4, [r0, #0]
}
    1464:	bd30      	pop	{r4, r5, pc}
    1466:	46c0      	nop			; (mov r8, r8)
    1468:	200003e8 	.word	0x200003e8
    146c:	20000584 	.word	0x20000584
    1470:	200003d2 	.word	0x200003d2
    1474:	200009f0 	.word	0x200009f0

00001478 <serial_ble_usart_configure>:
{
    1478:	b530      	push	{r4, r5, lr}
    147a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    147c:	2380      	movs	r3, #128	; 0x80
    147e:	05db      	lsls	r3, r3, #23
    1480:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1482:	2300      	movs	r3, #0
    1484:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1486:	22ff      	movs	r2, #255	; 0xff
    1488:	4669      	mov	r1, sp
    148a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    148c:	2200      	movs	r2, #0
    148e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1490:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1492:	2101      	movs	r1, #1
    1494:	2024      	movs	r0, #36	; 0x24
    1496:	466c      	mov	r4, sp
    1498:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    149a:	3001      	adds	r0, #1
    149c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    149e:	3125      	adds	r1, #37	; 0x25
    14a0:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    14a2:	3101      	adds	r1, #1
    14a4:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    14a6:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    14a8:	3105      	adds	r1, #5
    14aa:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    14ac:	3101      	adds	r1, #1
    14ae:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    14b0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    14b2:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    14b4:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    14b6:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    14b8:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    14ba:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    14bc:	2313      	movs	r3, #19
    14be:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    14c0:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    14c2:	23e1      	movs	r3, #225	; 0xe1
    14c4:	025b      	lsls	r3, r3, #9
    14c6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = BLE_SERCOM_MUX_SETTING;
    14c8:	23c4      	movs	r3, #196	; 0xc4
    14ca:	039b      	lsls	r3, r3, #14
    14cc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = BLE_SERCOM_PINMUX_PAD0;
    14ce:	2301      	movs	r3, #1
    14d0:	425b      	negs	r3, r3
    14d2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = BLE_SERCOM_PINMUX_PAD1;
    14d4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = BLE_SERCOM_PINMUX_PAD2;
    14d6:	4b10      	ldr	r3, [pc, #64]	; (1518 <serial_ble_usart_configure+0xa0>)
    14d8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = BLE_SERCOM_PINMUX_PAD3;
    14da:	4b10      	ldr	r3, [pc, #64]	; (151c <serial_ble_usart_configure+0xa4>)
    14dc:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_ble_instance,BLE_SERCOM, &config_usart) != STATUS_OK) 
    14de:	4d10      	ldr	r5, [pc, #64]	; (1520 <serial_ble_usart_configure+0xa8>)
    14e0:	4c10      	ldr	r4, [pc, #64]	; (1524 <serial_ble_usart_configure+0xac>)
    14e2:	466a      	mov	r2, sp
    14e4:	4910      	ldr	r1, [pc, #64]	; (1528 <serial_ble_usart_configure+0xb0>)
    14e6:	0028      	movs	r0, r5
    14e8:	47a0      	blx	r4
    14ea:	2800      	cmp	r0, #0
    14ec:	d1f9      	bne.n	14e2 <serial_ble_usart_configure+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14ee:	4d0c      	ldr	r5, [pc, #48]	; (1520 <serial_ble_usart_configure+0xa8>)
    14f0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14f2:	0020      	movs	r0, r4
    14f4:	4b0d      	ldr	r3, [pc, #52]	; (152c <serial_ble_usart_configure+0xb4>)
    14f6:	4798      	blx	r3
    14f8:	231f      	movs	r3, #31
    14fa:	4018      	ands	r0, r3
    14fc:	3b1e      	subs	r3, #30
    14fe:	4083      	lsls	r3, r0
    1500:	4a0b      	ldr	r2, [pc, #44]	; (1530 <serial_ble_usart_configure+0xb8>)
    1502:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1504:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1506:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1508:	2b00      	cmp	r3, #0
    150a:	d1fc      	bne.n	1506 <serial_ble_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    150c:	6823      	ldr	r3, [r4, #0]
    150e:	2202      	movs	r2, #2
    1510:	4313      	orrs	r3, r2
    1512:	6023      	str	r3, [r4, #0]
}
    1514:	b011      	add	sp, #68	; 0x44
    1516:	bd30      	pop	{r4, r5, pc}
    1518:	000a0003 	.word	0x000a0003
    151c:	000b0003 	.word	0x000b0003
    1520:	20000584 	.word	0x20000584
    1524:	0000047d 	.word	0x0000047d
    1528:	42001000 	.word	0x42001000
    152c:	0000437d 	.word	0x0000437d
    1530:	e000e100 	.word	0xe000e100

00001534 <serial_ble_enable>:
{
    1534:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1536:	4805      	ldr	r0, [pc, #20]	; (154c <serial_ble_enable+0x18>)
    1538:	2231      	movs	r2, #49	; 0x31
    153a:	5c83      	ldrb	r3, [r0, r2]
    153c:	2102      	movs	r1, #2
    153e:	430b      	orrs	r3, r1
    1540:	5483      	strb	r3, [r0, r2]
	usart_read_buffer_job(&usart_ble_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1542:	3a30      	subs	r2, #48	; 0x30
    1544:	4902      	ldr	r1, [pc, #8]	; (1550 <serial_ble_enable+0x1c>)
    1546:	4b03      	ldr	r3, [pc, #12]	; (1554 <serial_ble_enable+0x20>)
    1548:	4798      	blx	r3
}
    154a:	bd10      	pop	{r4, pc}
    154c:	20000584 	.word	0x20000584
    1550:	20000580 	.word	0x20000580
    1554:	00000911 	.word	0x00000911

00001558 <configure_usart_ble_callbacks>:

void configure_usart_ble_callbacks(void)
{
    1558:	b510      	push	{r4, lr}
	//usart_register_callback(&usart_ble_instance,usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_ble_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    155a:	2201      	movs	r2, #1
    155c:	4902      	ldr	r1, [pc, #8]	; (1568 <configure_usart_ble_callbacks+0x10>)
    155e:	4803      	ldr	r0, [pc, #12]	; (156c <configure_usart_ble_callbacks+0x14>)
    1560:	4b03      	ldr	r3, [pc, #12]	; (1570 <configure_usart_ble_callbacks+0x18>)
    1562:	4798      	blx	r3
}
    1564:	bd10      	pop	{r4, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	00001441 	.word	0x00001441
    156c:	20000584 	.word	0x20000584
    1570:	000008f9 	.word	0x000008f9

00001574 <serial_ble_configure>:
{
	configure_usart_ble_callbacks();
}

void serial_ble_configure()
{
    1574:	b510      	push	{r4, lr}
	serial_ble_usart_configure();	
    1576:	4b03      	ldr	r3, [pc, #12]	; (1584 <serial_ble_configure+0x10>)
    1578:	4798      	blx	r3
	configure_usart_ble_callbacks();
    157a:	4b03      	ldr	r3, [pc, #12]	; (1588 <serial_ble_configure+0x14>)
    157c:	4798      	blx	r3
	//serial_ble_pins_configure();
	serial_ble_modules_configure();
	serial_ble_callbacks_configure();
	serial_ble_enable();
    157e:	4b03      	ldr	r3, [pc, #12]	; (158c <serial_ble_configure+0x18>)
    1580:	4798      	blx	r3
}
    1582:	bd10      	pop	{r4, pc}
    1584:	00001479 	.word	0x00001479
    1588:	00001559 	.word	0x00001559
    158c:	00001535 	.word	0x00001535

00001590 <new_echo_detection_callback>:
	//tc_start_counter(&tc_instance4);
}


void new_echo_detection_callback(void)
{
    1590:	b510      	push	{r4, lr}
	//stop timer
	//tc_stop_counter(&tc_instance4);
	//disable echo interrupt
	
	//tc_set_count_value(&tc_instance4, 0);
	one_minute_count = one_minute_count + 1;
    1592:	4a1e      	ldr	r2, [pc, #120]	; (160c <new_echo_detection_callback+0x7c>)
    1594:	8813      	ldrh	r3, [r2, #0]
    1596:	3301      	adds	r3, #1
    1598:	8013      	strh	r3, [r2, #0]
	serial_timeout_count = serial_timeout_count + 1;
    159a:	4a1d      	ldr	r2, [pc, #116]	; (1610 <new_echo_detection_callback+0x80>)
    159c:	7813      	ldrb	r3, [r2, #0]
    159e:	3301      	adds	r3, #1
    15a0:	b2db      	uxtb	r3, r3
    15a2:	7013      	strb	r3, [r2, #0]
	count_broadcast = count_broadcast + 1; 
    15a4:	4a1b      	ldr	r2, [pc, #108]	; (1614 <new_echo_detection_callback+0x84>)
    15a6:	7813      	ldrb	r3, [r2, #0]
    15a8:	3301      	adds	r3, #1
    15aa:	b2db      	uxtb	r3, r3
    15ac:	7013      	strb	r3, [r2, #0]
	
	if(interrupt_edge == true )
    15ae:	4b1a      	ldr	r3, [pc, #104]	; (1618 <new_echo_detection_callback+0x88>)
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d01c      	beq.n	15f0 <new_echo_detection_callback+0x60>
	{
		tc_set_count_value(&tc_instance4, 0);
    15b6:	2100      	movs	r1, #0
    15b8:	4818      	ldr	r0, [pc, #96]	; (161c <new_echo_detection_callback+0x8c>)
    15ba:	4b19      	ldr	r3, [pc, #100]	; (1620 <new_echo_detection_callback+0x90>)
    15bc:	4798      	blx	r3
		interrupt_edge = false;
    15be:	2200      	movs	r2, #0
    15c0:	4b15      	ldr	r3, [pc, #84]	; (1618 <new_echo_detection_callback+0x88>)
    15c2:	701a      	strb	r2, [r3, #0]
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    15c4:	4b12      	ldr	r3, [pc, #72]	; (1610 <new_echo_detection_callback+0x80>)
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	b2db      	uxtb	r3, r3
    15ca:	2bfa      	cmp	r3, #250	; 0xfa
    15cc:	d905      	bls.n	15da <new_echo_detection_callback+0x4a>
		{
			serial_timeout = true;
    15ce:	3201      	adds	r2, #1
    15d0:	4b14      	ldr	r3, [pc, #80]	; (1624 <new_echo_detection_callback+0x94>)
    15d2:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    15d4:	2200      	movs	r2, #0
    15d6:	4b0e      	ldr	r3, [pc, #56]	; (1610 <new_echo_detection_callback+0x80>)
    15d8:	701a      	strb	r2, [r3, #0]
		}
		if(one_minute_count > 690)
    15da:	4b13      	ldr	r3, [pc, #76]	; (1628 <new_echo_detection_callback+0x98>)
    15dc:	4a0b      	ldr	r2, [pc, #44]	; (160c <new_echo_detection_callback+0x7c>)
    15de:	8812      	ldrh	r2, [r2, #0]
    15e0:	429a      	cmp	r2, r3
    15e2:	d911      	bls.n	1608 <new_echo_detection_callback+0x78>
		{
			one_minute_count = 0;	 //One Minute 
    15e4:	2200      	movs	r2, #0
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <new_echo_detection_callback+0x7c>)
    15e8:	801a      	strh	r2, [r3, #0]
			check_batterylevel_initial();
    15ea:	4b10      	ldr	r3, [pc, #64]	; (162c <new_echo_detection_callback+0x9c>)
    15ec:	4798      	blx	r3
    15ee:	e00b      	b.n	1608 <new_echo_detection_callback+0x78>
		}	
	}
	else
	{
		interrupt_edge = true;
    15f0:	2301      	movs	r3, #1
    15f2:	4a09      	ldr	r2, [pc, #36]	; (1618 <new_echo_detection_callback+0x88>)
    15f4:	7013      	strb	r3, [r2, #0]
		resource_distance_lock  = true;
    15f6:	4c0e      	ldr	r4, [pc, #56]	; (1630 <new_echo_detection_callback+0xa0>)
    15f8:	7023      	strb	r3, [r4, #0]
		distance_16b = tc_get_count_value(&tc_instance4);
    15fa:	4808      	ldr	r0, [pc, #32]	; (161c <new_echo_detection_callback+0x8c>)
    15fc:	4b0d      	ldr	r3, [pc, #52]	; (1634 <new_echo_detection_callback+0xa4>)
    15fe:	4798      	blx	r3
    1600:	4b0d      	ldr	r3, [pc, #52]	; (1638 <new_echo_detection_callback+0xa8>)
    1602:	6018      	str	r0, [r3, #0]
		resource_distance_lock = false;
    1604:	2300      	movs	r3, #0
    1606:	7023      	strb	r3, [r4, #0]
	//extint_chan_disable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//read counter value
	//distance_16b = tc_get_count_value(&tc_instance4);
	//start timer
	//tc_start_counter(&tc_instance4);
}
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	2000021c 	.word	0x2000021c
    1610:	200003eb 	.word	0x200003eb
    1614:	200003c8 	.word	0x200003c8
    1618:	2000000e 	.word	0x2000000e
    161c:	200004d0 	.word	0x200004d0
    1620:	000050a5 	.word	0x000050a5
    1624:	200003ea 	.word	0x200003ea
    1628:	000002b2 	.word	0x000002b2
    162c:	00000ab5 	.word	0x00000ab5
    1630:	200003e9 	.word	0x200003e9
    1634:	000050d7 	.word	0x000050d7
    1638:	20000218 	.word	0x20000218

0000163c <configure_pins>:
{
    163c:	b570      	push	{r4, r5, r6, lr}
    163e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1640:	ac01      	add	r4, sp, #4
    1642:	2301      	movs	r3, #1
    1644:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1646:	2600      	movs	r6, #0
    1648:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    164a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(TRIG_PIN, &config_port_pin);
    164c:	0021      	movs	r1, r4
    164e:	2003      	movs	r0, #3
    1650:	4d05      	ldr	r5, [pc, #20]	; (1668 <configure_pins+0x2c>)
    1652:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1654:	2208      	movs	r2, #8
    1656:	4b05      	ldr	r3, [pc, #20]	; (166c <configure_pins+0x30>)
    1658:	615a      	str	r2, [r3, #20]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    165a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(ECHO_PIN, &config_port_pin);
    165c:	0021      	movs	r1, r4
    165e:	200f      	movs	r0, #15
    1660:	47a8      	blx	r5
}
    1662:	b002      	add	sp, #8
    1664:	bd70      	pop	{r4, r5, r6, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	00003731 	.word	0x00003731
    166c:	41004400 	.word	0x41004400

00001670 <configure_tc4>:
{
    1670:	b510      	push	{r4, lr}
    1672:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    1674:	aa01      	add	r2, sp, #4
    1676:	2300      	movs	r3, #0
    1678:	2100      	movs	r1, #0
    167a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    167c:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    167e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1680:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1682:	2000      	movs	r0, #0
    1684:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1686:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1688:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    168a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    168c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    168e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1690:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1692:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1694:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1696:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1698:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    169a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    169c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    169e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    16a0:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64; //64
    16a2:	23a0      	movs	r3, #160	; 0xa0
    16a4:	00db      	lsls	r3, r3, #3
    16a6:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance4, TC4, &config_tc);
    16a8:	4c07      	ldr	r4, [pc, #28]	; (16c8 <configure_tc4+0x58>)
    16aa:	4908      	ldr	r1, [pc, #32]	; (16cc <configure_tc4+0x5c>)
    16ac:	0020      	movs	r0, r4
    16ae:	4b08      	ldr	r3, [pc, #32]	; (16d0 <configure_tc4+0x60>)
    16b0:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16b2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16b4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    16b6:	b25b      	sxtb	r3, r3
    16b8:	2b00      	cmp	r3, #0
    16ba:	dbfb      	blt.n	16b4 <configure_tc4+0x44>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    16bc:	8813      	ldrh	r3, [r2, #0]
    16be:	2102      	movs	r1, #2
    16c0:	430b      	orrs	r3, r1
    16c2:	8013      	strh	r3, [r2, #0]
}
    16c4:	b00e      	add	sp, #56	; 0x38
    16c6:	bd10      	pop	{r4, pc}
    16c8:	200004d0 	.word	0x200004d0
    16cc:	42003000 	.word	0x42003000
    16d0:	00004e69 	.word	0x00004e69

000016d4 <configure_echo_extint>:
{
    16d4:	b510      	push	{r4, lr}
    16d6:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    16d8:	ac01      	add	r4, sp, #4
    16da:	0020      	movs	r0, r4
    16dc:	4b08      	ldr	r3, [pc, #32]	; (1700 <configure_echo_extint+0x2c>)
    16de:	4798      	blx	r3
	config_extint_chan.gpio_pin           = ECHO_PIN_EIC;
    16e0:	230f      	movs	r3, #15
    16e2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = ECHO_PIN_MUX;
    16e4:	23f0      	movs	r3, #240	; 0xf0
    16e6:	031b      	lsls	r3, r3, #12
    16e8:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    16ea:	2302      	movs	r3, #2
    16ec:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    16ee:	3301      	adds	r3, #1
    16f0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ECHO_EIC_LINE, &config_extint_chan);
    16f2:	0021      	movs	r1, r4
    16f4:	200f      	movs	r0, #15
    16f6:	4b03      	ldr	r3, [pc, #12]	; (1704 <configure_echo_extint+0x30>)
    16f8:	4798      	blx	r3
}
    16fa:	b004      	add	sp, #16
    16fc:	bd10      	pop	{r4, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	000036a5 	.word	0x000036a5
    1704:	000036b9 	.word	0x000036b9

00001708 <setup_ultrasound>:
{
    1708:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTSET.reg = pin_mask;
    170a:	4c06      	ldr	r4, [pc, #24]	; (1724 <setup_ultrasound+0x1c>)
    170c:	2508      	movs	r5, #8
    170e:	61a5      	str	r5, [r4, #24]
	delay_us(100); 
    1710:	2064      	movs	r0, #100	; 0x64
    1712:	4b05      	ldr	r3, [pc, #20]	; (1728 <setup_ultrasound+0x20>)
    1714:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    1716:	6165      	str	r5, [r4, #20]
	tc_set_count_value(&tc_instance4, 0);
    1718:	2100      	movs	r1, #0
    171a:	4804      	ldr	r0, [pc, #16]	; (172c <setup_ultrasound+0x24>)
    171c:	4b04      	ldr	r3, [pc, #16]	; (1730 <setup_ultrasound+0x28>)
    171e:	4798      	blx	r3
}
    1720:	bd70      	pop	{r4, r5, r6, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	41004400 	.word	0x41004400
    1728:	000019ed 	.word	0x000019ed
    172c:	200004d0 	.word	0x200004d0
    1730:	000050a5 	.word	0x000050a5

00001734 <TC4_OV_callback>:
{
    1734:	b510      	push	{r4, lr}
	setup_ultrasound();
    1736:	4b01      	ldr	r3, [pc, #4]	; (173c <TC4_OV_callback+0x8>)
    1738:	4798      	blx	r3
}
    173a:	bd10      	pop	{r4, pc}
    173c:	00001709 	.word	0x00001709

00001740 <get_ultrasound_distance>:
char* get_ultrasound_distance()
{
	char* distance_ultrasound= NULL;
	distance_ultrasound= &distance_16b;
	return distance_ultrasound;
}
    1740:	4800      	ldr	r0, [pc, #0]	; (1744 <get_ultrasound_distance+0x4>)
    1742:	4770      	bx	lr
    1744:	20000218 	.word	0x20000218

00001748 <configure_TC4_callback>:

void configure_TC4_callback()
{
    1748:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance4, TC4_OV_callback,TC_CALLBACK_OVERFLOW);
    174a:	4c0c      	ldr	r4, [pc, #48]	; (177c <configure_TC4_callback+0x34>)
    174c:	2200      	movs	r2, #0
    174e:	490c      	ldr	r1, [pc, #48]	; (1780 <configure_TC4_callback+0x38>)
    1750:	0020      	movs	r0, r4
    1752:	4b0c      	ldr	r3, [pc, #48]	; (1784 <configure_TC4_callback+0x3c>)
    1754:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1756:	6820      	ldr	r0, [r4, #0]
    1758:	4b0b      	ldr	r3, [pc, #44]	; (1788 <configure_TC4_callback+0x40>)
    175a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    175c:	4b0b      	ldr	r3, [pc, #44]	; (178c <configure_TC4_callback+0x44>)
    175e:	5c1a      	ldrb	r2, [r3, r0]
    1760:	231f      	movs	r3, #31
    1762:	4013      	ands	r3, r2
    1764:	2201      	movs	r2, #1
    1766:	0011      	movs	r1, r2
    1768:	4099      	lsls	r1, r3
    176a:	4b09      	ldr	r3, [pc, #36]	; (1790 <configure_TC4_callback+0x48>)
    176c:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    176e:	7e63      	ldrb	r3, [r4, #25]
    1770:	2101      	movs	r1, #1
    1772:	430b      	orrs	r3, r1
    1774:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance4, TC_CALLBACK_OVERFLOW);
}
    177a:	bd10      	pop	{r4, pc}
    177c:	200004d0 	.word	0x200004d0
    1780:	00001735 	.word	0x00001735
    1784:	00004d5d 	.word	0x00004d5d
    1788:	00004e31 	.word	0x00004e31
    178c:	0000a5e8 	.word	0x0000a5e8
    1790:	e000e100 	.word	0xe000e100

00001794 <configure_ext_callback>:

void configure_ext_callback()
{
    1794:	b510      	push	{r4, lr}
	extint_register_callback(new_echo_detection_callback,ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1796:	2200      	movs	r2, #0
    1798:	210f      	movs	r1, #15
    179a:	4804      	ldr	r0, [pc, #16]	; (17ac <configure_ext_callback+0x18>)
    179c:	4b04      	ldr	r3, [pc, #16]	; (17b0 <configure_ext_callback+0x1c>)
    179e:	4798      	blx	r3
	extint_chan_enable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    17a0:	2100      	movs	r1, #0
    17a2:	200f      	movs	r0, #15
    17a4:	4b03      	ldr	r3, [pc, #12]	; (17b4 <configure_ext_callback+0x20>)
    17a6:	4798      	blx	r3
}
    17a8:	bd10      	pop	{r4, pc}
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	00001591 	.word	0x00001591
    17b0:	00003581 	.word	0x00003581
    17b4:	000035ad 	.word	0x000035ad

000017b8 <configure_callbacks>:

void configure_callbacks()
{
    17b8:	b510      	push	{r4, lr}
	configure_TC4_callback();
    17ba:	4b02      	ldr	r3, [pc, #8]	; (17c4 <configure_callbacks+0xc>)
    17bc:	4798      	blx	r3
	configure_ext_callback();
    17be:	4b02      	ldr	r3, [pc, #8]	; (17c8 <configure_callbacks+0x10>)
    17c0:	4798      	blx	r3
	
}
    17c2:	bd10      	pop	{r4, pc}
    17c4:	00001749 	.word	0x00001749
    17c8:	00001795 	.word	0x00001795

000017cc <configure_modules>:
void configure_modules()
{
    17cc:	b510      	push	{r4, lr}
	configure_tc4();
    17ce:	4b02      	ldr	r3, [pc, #8]	; (17d8 <configure_modules+0xc>)
    17d0:	4798      	blx	r3
	configure_echo_extint();
    17d2:	4b02      	ldr	r3, [pc, #8]	; (17dc <configure_modules+0x10>)
    17d4:	4798      	blx	r3
}
    17d6:	bd10      	pop	{r4, pc}
    17d8:	00001671 	.word	0x00001671
    17dc:	000016d5 	.word	0x000016d5

000017e0 <configure_ultrasound>:

void configure_ultrasound()
{
    17e0:	b510      	push	{r4, lr}
	configure_pins();
    17e2:	4b03      	ldr	r3, [pc, #12]	; (17f0 <configure_ultrasound+0x10>)
    17e4:	4798      	blx	r3
	configure_modules();
    17e6:	4b03      	ldr	r3, [pc, #12]	; (17f4 <configure_ultrasound+0x14>)
    17e8:	4798      	blx	r3
	configure_callbacks();
    17ea:	4b03      	ldr	r3, [pc, #12]	; (17f8 <configure_ultrasound+0x18>)
    17ec:	4798      	blx	r3
    17ee:	bd10      	pop	{r4, pc}
    17f0:	0000163d 	.word	0x0000163d
    17f4:	000017cd 	.word	0x000017cd
    17f8:	000017b9 	.word	0x000017b9

000017fc <write_data>:
	
}

// Helper function to just execute a simple write
void write_data(uint8_t *bufferSend, uint8_t length)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	b084      	sub	sp, #16
	struct i2c_master_packet packet = {
    1800:	ab01      	add	r3, sp, #4
    1802:	224c      	movs	r2, #76	; 0x4c
    1804:	801a      	strh	r2, [r3, #0]
    1806:	8059      	strh	r1, [r3, #2]
    1808:	9002      	str	r0, [sp, #8]
    180a:	2200      	movs	r2, #0
    180c:	721a      	strb	r2, [r3, #8]
    180e:	725a      	strb	r2, [r3, #9]
    1810:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		calc_baud = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    1812:	4e05      	ldr	r6, [pc, #20]	; (1828 <write_data+0x2c>)
    1814:	4d05      	ldr	r5, [pc, #20]	; (182c <write_data+0x30>)
    1816:	4c06      	ldr	r4, [pc, #24]	; (1830 <write_data+0x34>)
    1818:	a901      	add	r1, sp, #4
    181a:	0030      	movs	r0, r6
    181c:	47a8      	blx	r5
    181e:	7020      	strb	r0, [r4, #0]
		
	}
	while (calc_baud != STATUS_OK);
    1820:	2800      	cmp	r0, #0
    1822:	d1f9      	bne.n	1818 <write_data+0x1c>
	
    1824:	b004      	add	sp, #16
    1826:	bd70      	pop	{r4, r5, r6, pc}
    1828:	200005bc 	.word	0x200005bc
    182c:	00003c69 	.word	0x00003c69
    1830:	200005e5 	.word	0x200005e5

00001834 <config_accel>:
{
    1834:	b570      	push	{r4, r5, r6, lr}
    1836:	b090      	sub	sp, #64	; 0x40
	config->direction  = PORT_PIN_DIR_INPUT;
    1838:	ad0e      	add	r5, sp, #56	; 0x38
    183a:	2400      	movs	r4, #0
    183c:	702c      	strb	r4, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    183e:	2301      	movs	r3, #1
    1840:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
    1842:	70ac      	strb	r4, [r5, #2]
	port_pin_set_config(PIN_PA23, &config_port_pin);
    1844:	0029      	movs	r1, r5
    1846:	2017      	movs	r0, #23
    1848:	4e3f      	ldr	r6, [pc, #252]	; (1948 <config_accel+0x114>)
    184a:	47b0      	blx	r6
	port_pin_set_config(PIN_PA22, &config_port_pin);
    184c:	0029      	movs	r1, r5
    184e:	2016      	movs	r0, #22
    1850:	47b0      	blx	r6
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1852:	ab01      	add	r3, sp, #4
    1854:	4a3d      	ldr	r2, [pc, #244]	; (194c <config_accel+0x118>)
    1856:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1858:	9403      	str	r4, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    185a:	731c      	strb	r4, [r3, #12]
	config->run_in_standby   = false;
    185c:	761c      	strb	r4, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    185e:	2201      	movs	r2, #1
    1860:	4252      	negs	r2, r2
    1862:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1864:	9408      	str	r4, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1866:	9409      	str	r4, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1868:	3225      	adds	r2, #37	; 0x25
    186a:	549c      	strb	r4, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    186c:	940b      	str	r4, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    186e:	3208      	adds	r2, #8
    1870:	549c      	strb	r4, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1872:	3201      	adds	r2, #1
    1874:	549c      	strb	r4, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    1876:	3201      	adds	r2, #1
    1878:	549c      	strb	r4, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    187a:	32a9      	adds	r2, #169	; 0xa9
    187c:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.buffer_timeout = 40000;
    187e:	4a34      	ldr	r2, [pc, #208]	; (1950 <config_accel+0x11c>)
    1880:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1882:	22c8      	movs	r2, #200	; 0xc8
    1884:	0052      	lsls	r2, r2, #1
    1886:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    1888:	22c0      	movs	r2, #192	; 0xc0
    188a:	0392      	lsls	r2, r2, #14
    188c:	9205      	str	r2, [sp, #20]
		value = i2c_master_init(&i2c_master_instance, SERCOM5, &config_i2c_master);
    188e:	4e31      	ldr	r6, [pc, #196]	; (1954 <config_accel+0x120>)
    1890:	4d31      	ldr	r5, [pc, #196]	; (1958 <config_accel+0x124>)
    1892:	4c32      	ldr	r4, [pc, #200]	; (195c <config_accel+0x128>)
    1894:	aa01      	add	r2, sp, #4
    1896:	4932      	ldr	r1, [pc, #200]	; (1960 <config_accel+0x12c>)
    1898:	0030      	movs	r0, r6
    189a:	47a8      	blx	r5
    189c:	7020      	strb	r0, [r4, #0]
	while(value != STATUS_OK); 
    189e:	2800      	cmp	r0, #0
    18a0:	d1f8      	bne.n	1894 <config_accel+0x60>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    18a2:	4b2c      	ldr	r3, [pc, #176]	; (1954 <config_accel+0x120>)
    18a4:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    18a6:	2207      	movs	r2, #7
    18a8:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    18aa:	421a      	tst	r2, r3
    18ac:	d1fc      	bne.n	18a8 <config_accel+0x74>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    18ae:	6823      	ldr	r3, [r4, #0]
    18b0:	2202      	movs	r2, #2
    18b2:	4313      	orrs	r3, r2
    18b4:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    18b6:	4d27      	ldr	r5, [pc, #156]	; (1954 <config_accel+0x120>)
    18b8:	6828      	ldr	r0, [r5, #0]
    18ba:	4b2a      	ldr	r3, [pc, #168]	; (1964 <config_accel+0x130>)
    18bc:	4798      	blx	r3
    18be:	231f      	movs	r3, #31
    18c0:	4018      	ands	r0, r3
    18c2:	3b1e      	subs	r3, #30
    18c4:	4083      	lsls	r3, r0
    18c6:	4a28      	ldr	r2, [pc, #160]	; (1968 <config_accel+0x134>)
    18c8:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18ca:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    18cc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    18ce:	2110      	movs	r1, #16
    18d0:	8b62      	ldrh	r2, [r4, #26]
    18d2:	420a      	tst	r2, r1
    18d4:	d104      	bne.n	18e0 <config_accel+0xac>
		timeout_counter++;
    18d6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18d8:	4283      	cmp	r3, r0
    18da:	d3f9      	bcc.n	18d0 <config_accel+0x9c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    18dc:	2310      	movs	r3, #16
    18de:	8363      	strh	r3, [r4, #26]
	bufferSend[0] = 0x07;
    18e0:	ac0f      	add	r4, sp, #60	; 0x3c
    18e2:	2607      	movs	r6, #7
    18e4:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
    18e6:	2350      	movs	r3, #80	; 0x50
    18e8:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18ea:	2102      	movs	r1, #2
    18ec:	0020      	movs	r0, r4
    18ee:	4d1f      	ldr	r5, [pc, #124]	; (196c <config_accel+0x138>)
    18f0:	47a8      	blx	r5
	bufferSend[0] = 0x05;
    18f2:	2305      	movs	r3, #5
    18f4:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00000000;
    18f6:	2300      	movs	r3, #0
    18f8:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18fa:	2102      	movs	r1, #2
    18fc:	0020      	movs	r0, r4
    18fe:	47a8      	blx	r5
	bufferSend[0] = 0x06;
    1900:	2306      	movs	r3, #6
    1902:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
    1904:	33de      	adds	r3, #222	; 0xde
    1906:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1908:	2102      	movs	r1, #2
    190a:	0020      	movs	r0, r4
    190c:	47a8      	blx	r5
	bufferSend[0] = 0x08;
    190e:	2308      	movs	r3, #8
    1910:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100000;
    1912:	33d8      	adds	r3, #216	; 0xd8
    1914:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1916:	2102      	movs	r1, #2
    1918:	0020      	movs	r0, r4
    191a:	47a8      	blx	r5
	bufferSend[0] = 0x09;
    191c:	2309      	movs	r3, #9
    191e:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b01101000;
    1920:	335f      	adds	r3, #95	; 0x5f
    1922:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1924:	2102      	movs	r1, #2
    1926:	0020      	movs	r0, r4
    1928:	47a8      	blx	r5
	bufferSend[0] = 0x0A;
    192a:	230a      	movs	r3, #10
    192c:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00010000;
    192e:	3306      	adds	r3, #6
    1930:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1932:	2102      	movs	r1, #2
    1934:	0020      	movs	r0, r4
    1936:	47a8      	blx	r5
	bufferSend[0] = 0x07;
    1938:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010001;
    193a:	2351      	movs	r3, #81	; 0x51
    193c:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    193e:	2102      	movs	r1, #2
    1940:	0020      	movs	r0, r4
    1942:	47a8      	blx	r5
}
    1944:	b010      	add	sp, #64	; 0x40
    1946:	bd70      	pop	{r4, r5, r6, pc}
    1948:	00003731 	.word	0x00003731
    194c:	00000d48 	.word	0x00000d48
    1950:	ffff9c40 	.word	0xffff9c40
    1954:	200005bc 	.word	0x200005bc
    1958:	00003761 	.word	0x00003761
    195c:	200005e4 	.word	0x200005e4
    1960:	42001c00 	.word	0x42001c00
    1964:	0000437d 	.word	0x0000437d
    1968:	e000e100 	.word	0xe000e100
    196c:	000017fd 	.word	0x000017fd

00001970 <get_accel_data>:
{
    1970:	b530      	push	{r4, r5, lr}
    1972:	b085      	sub	sp, #20
	struct i2c_master_packet packet = {
    1974:	aa01      	add	r2, sp, #4
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <get_accel_data+0x2c>)
    1978:	cb13      	ldmia	r3!, {r0, r1, r4}
    197a:	c213      	stmia	r2!, {r0, r1, r4}
	bufferSend[0] = 0x00;
    197c:	2300      	movs	r3, #0
    197e:	466a      	mov	r2, sp
    1980:	7013      	strb	r3, [r2, #0]
	write_data(bufferSend, 1);
    1982:	2101      	movs	r1, #1
    1984:	4668      	mov	r0, sp
    1986:	4b06      	ldr	r3, [pc, #24]	; (19a0 <get_accel_data+0x30>)
    1988:	4798      	blx	r3
	while(i2c_master_read_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    198a:	4d06      	ldr	r5, [pc, #24]	; (19a4 <get_accel_data+0x34>)
    198c:	4c06      	ldr	r4, [pc, #24]	; (19a8 <get_accel_data+0x38>)
    198e:	a901      	add	r1, sp, #4
    1990:	0028      	movs	r0, r5
    1992:	47a0      	blx	r4
    1994:	2800      	cmp	r0, #0
    1996:	d1fa      	bne.n	198e <get_accel_data+0x1e>
}
    1998:	b005      	add	sp, #20
    199a:	bd30      	pop	{r4, r5, pc}
    199c:	0000a5ec 	.word	0x0000a5ec
    19a0:	000017fd 	.word	0x000017fd
    19a4:	200005bc 	.word	0x200005bc
    19a8:	00003c45 	.word	0x00003c45

000019ac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    19ac:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    19ae:	2000      	movs	r0, #0
    19b0:	4b08      	ldr	r3, [pc, #32]	; (19d4 <delay_init+0x28>)
    19b2:	4798      	blx	r3
    19b4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    19b6:	4c08      	ldr	r4, [pc, #32]	; (19d8 <delay_init+0x2c>)
    19b8:	21fa      	movs	r1, #250	; 0xfa
    19ba:	0089      	lsls	r1, r1, #2
    19bc:	47a0      	blx	r4
    19be:	4b07      	ldr	r3, [pc, #28]	; (19dc <delay_init+0x30>)
    19c0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    19c2:	4907      	ldr	r1, [pc, #28]	; (19e0 <delay_init+0x34>)
    19c4:	0028      	movs	r0, r5
    19c6:	47a0      	blx	r4
    19c8:	4b06      	ldr	r3, [pc, #24]	; (19e4 <delay_init+0x38>)
    19ca:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    19cc:	2205      	movs	r2, #5
    19ce:	4b06      	ldr	r3, [pc, #24]	; (19e8 <delay_init+0x3c>)
    19d0:	601a      	str	r2, [r3, #0]
}
    19d2:	bd70      	pop	{r4, r5, r6, pc}
    19d4:	00004491 	.word	0x00004491
    19d8:	00008bd5 	.word	0x00008bd5
    19dc:	20000010 	.word	0x20000010
    19e0:	000f4240 	.word	0x000f4240
    19e4:	20000014 	.word	0x20000014
    19e8:	e000e010 	.word	0xe000e010

000019ec <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    19ec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    19ee:	4b08      	ldr	r3, [pc, #32]	; (1a10 <delay_cycles_us+0x24>)
    19f0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    19f2:	4a08      	ldr	r2, [pc, #32]	; (1a14 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    19f4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19f6:	2180      	movs	r1, #128	; 0x80
    19f8:	0249      	lsls	r1, r1, #9
	while (n--) {
    19fa:	3801      	subs	r0, #1
    19fc:	d307      	bcc.n	1a0e <delay_cycles_us+0x22>
	if (n > 0) {
    19fe:	2c00      	cmp	r4, #0
    1a00:	d0fb      	beq.n	19fa <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    1a02:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1a04:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a06:	6813      	ldr	r3, [r2, #0]
    1a08:	420b      	tst	r3, r1
    1a0a:	d0fc      	beq.n	1a06 <delay_cycles_us+0x1a>
    1a0c:	e7f5      	b.n	19fa <delay_cycles_us+0xe>
	}
}
    1a0e:	bd30      	pop	{r4, r5, pc}
    1a10:	20000014 	.word	0x20000014
    1a14:	e000e010 	.word	0xe000e010

00001a18 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1a18:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1a1a:	4b08      	ldr	r3, [pc, #32]	; (1a3c <delay_cycles_ms+0x24>)
    1a1c:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    1a1e:	4a08      	ldr	r2, [pc, #32]	; (1a40 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1a20:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a22:	2180      	movs	r1, #128	; 0x80
    1a24:	0249      	lsls	r1, r1, #9
	while (n--) {
    1a26:	3801      	subs	r0, #1
    1a28:	d307      	bcc.n	1a3a <delay_cycles_ms+0x22>
	if (n > 0) {
    1a2a:	2c00      	cmp	r4, #0
    1a2c:	d0fb      	beq.n	1a26 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1a2e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1a30:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a32:	6813      	ldr	r3, [r2, #0]
    1a34:	420b      	tst	r3, r1
    1a36:	d0fc      	beq.n	1a32 <delay_cycles_ms+0x1a>
    1a38:	e7f5      	b.n	1a26 <delay_cycles_ms+0xe>
	}
}
    1a3a:	bd30      	pop	{r4, r5, pc}
    1a3c:	20000010 	.word	0x20000010
    1a40:	e000e010 	.word	0xe000e010

00001a44 <config_motors>:
}
//! [setup]


void config_motors(void)
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    1a48:	4e17      	ldr	r6, [pc, #92]	; (1aa8 <config_motors+0x64>)
    1a4a:	ac01      	add	r4, sp, #4
    1a4c:	0031      	movs	r1, r6
    1a4e:	0020      	movs	r0, r4
    1a50:	4b16      	ldr	r3, [pc, #88]	; (1aac <config_motors+0x68>)
    1a52:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    1a54:	2306      	movs	r3, #6
    1a56:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0x00FF;
    1a58:	33f9      	adds	r3, #249	; 0xf9
    1a5a:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1a5c:	3bfd      	subs	r3, #253	; 0xfd
    1a5e:	7623      	strb	r3, [r4, #24]
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CH] = TCC_WAVE_POLARITY_0;
    1a60:	2300      	movs	r3, #0
    1a62:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CH] = TCC_WAVE_POLARITY_0;
    1a64:	7563      	strb	r3, [r4, #21]
	config_tcc.compare.match[LEFT_MOTOR_CH] = 0;
    1a66:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_WO] = true;
    1a68:	2201      	movs	r2, #1
    1a6a:	2198      	movs	r1, #152	; 0x98
    1a6c:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_WO]        = PIN_PA05E_TCC0_WO1; //this is no longer correct--- should be now
    1a6e:	3993      	subs	r1, #147	; 0x93
    1a70:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_WO]    = PINMUX_PA05E_TCC0_WO1; // this is no longer correct --- should be now
    1a72:	490f      	ldr	r1, [pc, #60]	; (1ab0 <config_motors+0x6c>)
    1a74:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.compare.match[RIGHT_MOTOR_CH] = 0;
    1a76:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_WO] = true;
    1a78:	3399      	adds	r3, #153	; 0x99
    1a7a:	54e2      	strb	r2, [r4, r3]
    config_tcc.pins.wave_out_pin[RIGHT_MOTOR_WO]        = PIN_PA04E_TCC0_WO0; // this is no longer correct --- should be now
    1a7c:	3b95      	subs	r3, #149	; 0x95
    1a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_WO]    = PINMUX_PA04E_TCC0_WO0; // this is no longer correct --- should be now
    1a80:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <config_motors+0x70>)
    1a82:	67e3      	str	r3, [r4, #124]	; 0x7c
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    1a84:	4d0c      	ldr	r5, [pc, #48]	; (1ab8 <config_motors+0x74>)
    1a86:	0022      	movs	r2, r4
    1a88:	0031      	movs	r1, r6
    1a8a:	0028      	movs	r0, r5
    1a8c:	4b0b      	ldr	r3, [pc, #44]	; (1abc <config_motors+0x78>)
    1a8e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1a90:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1a92:	2102      	movs	r1, #2
    1a94:	6893      	ldr	r3, [r2, #8]
    1a96:	4219      	tst	r1, r3
    1a98:	d1fc      	bne.n	1a94 <config_motors+0x50>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1a9a:	6813      	ldr	r3, [r2, #0]
    1a9c:	2102      	movs	r1, #2
    1a9e:	430b      	orrs	r3, r1
    1aa0:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(PIN_PA20, true);
	port_pin_set_output_level(PIN_PA21, true);
	motor_enable = false;
	*/
	
}
    1aa2:	b02a      	add	sp, #168	; 0xa8
    1aa4:	bd70      	pop	{r4, r5, r6, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	42002000 	.word	0x42002000
    1aac:	00004779 	.word	0x00004779
    1ab0:	00050004 	.word	0x00050004
    1ab4:	00040004 	.word	0x00040004
    1ab8:	20000450 	.word	0x20000450
    1abc:	000048c5 	.word	0x000048c5

00001ac0 <set_motor_left>:


// PWM is on BIN1/BIN2 - PA13 and PA21
// Depending on direction, set other pin to standard output and set it to low
void set_motor_left(uint8_t dir, uint8_t speed)
{
    1ac0:	b530      	push	{r4, r5, lr}
    1ac2:	b083      	sub	sp, #12
    1ac4:	0004      	movs	r4, r0
    1ac6:	000d      	movs	r5, r1
	if(motor_enable == false)
    1ac8:	4b1f      	ldr	r3, [pc, #124]	; (1b48 <set_motor_left+0x88>)
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	2b00      	cmp	r3, #0
    1ace:	d106      	bne.n	1ade <set_motor_left+0x1e>
		port_base->OUTSET.reg = pin_mask;
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	0512      	lsls	r2, r2, #20
    1ad4:	4b1d      	ldr	r3, [pc, #116]	; (1b4c <set_motor_left+0x8c>)
    1ad6:	619a      	str	r2, [r3, #24]
	{
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
		
		// set flag to true
		motor_enable = true;
    1ad8:	2201      	movs	r2, #1
    1ada:	4b1b      	ldr	r3, [pc, #108]	; (1b48 <set_motor_left+0x88>)
    1adc:	701a      	strb	r2, [r3, #0]
	}
	if(old_left_dir != dir)
    1ade:	4b1c      	ldr	r3, [pc, #112]	; (1b50 <set_motor_left+0x90>)
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	42a3      	cmp	r3, r4
    1ae4:	d017      	beq.n	1b16 <set_motor_left+0x56>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1ae6:	2201      	movs	r2, #1
    1ae8:	466b      	mov	r3, sp
    1aea:	701a      	strb	r2, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1aec:	ab01      	add	r3, sp, #4
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aee:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1af0:	2100      	movs	r1, #0
    1af2:	70d9      	strb	r1, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1af4:	705a      	strb	r2, [r3, #1]
		// need to configure PWM with opposite pins
		if(dir == 0)
    1af6:	2c00      	cmp	r4, #0
    1af8:	d116      	bne.n	1b28 <set_motor_left+0x68>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA21F_TCC0_WO7;
    1afa:	0019      	movs	r1, r3
    1afc:	2305      	movs	r3, #5
    1afe:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA21F_TCC0_WO7, &pin_config);
    1b00:	2015      	movs	r0, #21
    1b02:	4b14      	ldr	r3, [pc, #80]	; (1b54 <set_motor_left+0x94>)
    1b04:	4798      	blx	r3
			port_pin_set_config(PIN_PA13, &config_port_pin);
    1b06:	4669      	mov	r1, sp
    1b08:	200d      	movs	r0, #13
    1b0a:	4b13      	ldr	r3, [pc, #76]	; (1b58 <set_motor_left+0x98>)
    1b0c:	4798      	blx	r3
    1b0e:	2280      	movs	r2, #128	; 0x80
    1b10:	0192      	lsls	r2, r2, #6
    1b12:	4b0e      	ldr	r3, [pc, #56]	; (1b4c <set_motor_left+0x8c>)
    1b14:	619a      	str	r2, [r3, #24]
			system_pinmux_pin_set_config(PIN_PA13F_TCC0_WO7, &pin_config);
			port_pin_set_config(PIN_PA21, &config_port_pin);
			port_pin_set_output_level(PIN_PA21, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CH, speed);
    1b16:	002a      	movs	r2, r5
    1b18:	2100      	movs	r1, #0
    1b1a:	4810      	ldr	r0, [pc, #64]	; (1b5c <set_motor_left+0x9c>)
    1b1c:	4b10      	ldr	r3, [pc, #64]	; (1b60 <set_motor_left+0xa0>)
    1b1e:	4798      	blx	r3
	//tcc_enable(&tcc_instance0);
	old_left_dir = dir;
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <set_motor_left+0x90>)
    1b22:	701c      	strb	r4, [r3, #0]
}
    1b24:	b003      	add	sp, #12
    1b26:	bd30      	pop	{r4, r5, pc}
			pin_config.mux_position = (uint8_t)PINMUX_PA13F_TCC0_WO7;
    1b28:	a901      	add	r1, sp, #4
    1b2a:	2305      	movs	r3, #5
    1b2c:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA13F_TCC0_WO7, &pin_config);
    1b2e:	200d      	movs	r0, #13
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <set_motor_left+0x94>)
    1b32:	4798      	blx	r3
			port_pin_set_config(PIN_PA21, &config_port_pin);
    1b34:	4669      	mov	r1, sp
    1b36:	2015      	movs	r0, #21
    1b38:	4b07      	ldr	r3, [pc, #28]	; (1b58 <set_motor_left+0x98>)
    1b3a:	4798      	blx	r3
    1b3c:	2280      	movs	r2, #128	; 0x80
    1b3e:	0392      	lsls	r2, r2, #14
    1b40:	4b02      	ldr	r3, [pc, #8]	; (1b4c <set_motor_left+0x8c>)
    1b42:	619a      	str	r2, [r3, #24]
    1b44:	e7e7      	b.n	1b16 <set_motor_left+0x56>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	2000021e 	.word	0x2000021e
    1b4c:	41004400 	.word	0x41004400
    1b50:	20000018 	.word	0x20000018
    1b54:	000046a1 	.word	0x000046a1
    1b58:	00003731 	.word	0x00003731
    1b5c:	20000450 	.word	0x20000450
    1b60:	00004cd1 	.word	0x00004cd1

00001b64 <set_motor_right>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor_right(uint8_t dir, uint8_t speed)
{
    1b64:	b530      	push	{r4, r5, lr}
    1b66:	b083      	sub	sp, #12
    1b68:	0004      	movs	r4, r0
    1b6a:	000d      	movs	r5, r1
	if(motor_enable == false)
    1b6c:	4b1f      	ldr	r3, [pc, #124]	; (1bec <set_motor_right+0x88>)
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d106      	bne.n	1b82 <set_motor_right+0x1e>
    1b74:	2280      	movs	r2, #128	; 0x80
    1b76:	0512      	lsls	r2, r2, #20
    1b78:	4b1d      	ldr	r3, [pc, #116]	; (1bf0 <set_motor_right+0x8c>)
    1b7a:	619a      	str	r2, [r3, #24]
	{
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
		// enable PWM
		// set flag to true
		motor_enable = true;
    1b7c:	2201      	movs	r2, #1
    1b7e:	4b1b      	ldr	r3, [pc, #108]	; (1bec <set_motor_right+0x88>)
    1b80:	701a      	strb	r2, [r3, #0]
	}
	if(old_right_dir != dir)
    1b82:	4b1c      	ldr	r3, [pc, #112]	; (1bf4 <set_motor_right+0x90>)
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	42a3      	cmp	r3, r4
    1b88:	d017      	beq.n	1bba <set_motor_right+0x56>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1b8a:	2101      	movs	r1, #1
    1b8c:	466b      	mov	r3, sp
    1b8e:	7019      	strb	r1, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b90:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b92:	2200      	movs	r2, #0
    1b94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b96:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1b98:	70da      	strb	r2, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		// need to configure PWM with opposite pins
		if(dir == 0)
    1b9a:	2c00      	cmp	r4, #0
    1b9c:	d116      	bne.n	1bcc <set_motor_right+0x68>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA20F_TCC0_WO6;
    1b9e:	0019      	movs	r1, r3
    1ba0:	2305      	movs	r3, #5
    1ba2:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA20F_TCC0_WO6, &pin_config);
    1ba4:	2014      	movs	r0, #20
    1ba6:	4b14      	ldr	r3, [pc, #80]	; (1bf8 <set_motor_right+0x94>)
    1ba8:	4798      	blx	r3
			port_pin_set_config(PIN_PA12, &config_port_pin);
    1baa:	4669      	mov	r1, sp
    1bac:	200c      	movs	r0, #12
    1bae:	4b13      	ldr	r3, [pc, #76]	; (1bfc <set_motor_right+0x98>)
    1bb0:	4798      	blx	r3
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	0152      	lsls	r2, r2, #5
    1bb6:	4b0e      	ldr	r3, [pc, #56]	; (1bf0 <set_motor_right+0x8c>)
    1bb8:	619a      	str	r2, [r3, #24]
			system_pinmux_pin_set_config(PIN_PA12F_TCC0_WO6, &pin_config);
			port_pin_set_config(PIN_PA20, &config_port_pin);
			port_pin_set_output_level(PIN_PA20, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CH, speed);
    1bba:	002a      	movs	r2, r5
    1bbc:	2101      	movs	r1, #1
    1bbe:	4810      	ldr	r0, [pc, #64]	; (1c00 <set_motor_right+0x9c>)
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <set_motor_right+0xa0>)
    1bc2:	4798      	blx	r3
	old_right_dir = dir;
    1bc4:	4b0b      	ldr	r3, [pc, #44]	; (1bf4 <set_motor_right+0x90>)
    1bc6:	701c      	strb	r4, [r3, #0]
}
    1bc8:	b003      	add	sp, #12
    1bca:	bd30      	pop	{r4, r5, pc}
			pin_config.mux_position = (uint8_t)PINMUX_PA12F_TCC0_WO6;
    1bcc:	a901      	add	r1, sp, #4
    1bce:	2305      	movs	r3, #5
    1bd0:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA12F_TCC0_WO6, &pin_config);
    1bd2:	200c      	movs	r0, #12
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <set_motor_right+0x94>)
    1bd6:	4798      	blx	r3
			port_pin_set_config(PIN_PA20, &config_port_pin);
    1bd8:	4669      	mov	r1, sp
    1bda:	2014      	movs	r0, #20
    1bdc:	4b07      	ldr	r3, [pc, #28]	; (1bfc <set_motor_right+0x98>)
    1bde:	4798      	blx	r3
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	0352      	lsls	r2, r2, #13
    1be4:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <set_motor_right+0x8c>)
    1be6:	619a      	str	r2, [r3, #24]
    1be8:	e7e7      	b.n	1bba <set_motor_right+0x56>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	2000021e 	.word	0x2000021e
    1bf0:	41004400 	.word	0x41004400
    1bf4:	20000019 	.word	0x20000019
    1bf8:	000046a1 	.word	0x000046a1
    1bfc:	00003731 	.word	0x00003731
    1c00:	20000450 	.word	0x20000450
    1c04:	00004cd1 	.word	0x00004cd1

00001c08 <turn_off_motors>:

void turn_off_motors()
{
    1c08:	b510      	push	{r4, lr}
	
	// disable the chip to save power - this is no longer an option as we needed the sleep mode i/o pin for something else
	// port_pin_set_output_level(PIN_PA27, false); 
	// Turn PWM to 0, no need to turn everything off
	set_motor_left(0,0);
    1c0a:	2100      	movs	r1, #0
    1c0c:	2000      	movs	r0, #0
    1c0e:	4b05      	ldr	r3, [pc, #20]	; (1c24 <turn_off_motors+0x1c>)
    1c10:	4798      	blx	r3
	set_motor_right(0,0);
    1c12:	2100      	movs	r1, #0
    1c14:	2000      	movs	r0, #0
    1c16:	4b04      	ldr	r3, [pc, #16]	; (1c28 <turn_off_motors+0x20>)
    1c18:	4798      	blx	r3
	
	// Set flag to false
	motor_enable = false;
    1c1a:	2200      	movs	r2, #0
    1c1c:	4b03      	ldr	r3, [pc, #12]	; (1c2c <turn_off_motors+0x24>)
    1c1e:	701a      	strb	r2, [r3, #0]
}
    1c20:	bd10      	pop	{r4, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00001ac1 	.word	0x00001ac1
    1c28:	00001b65 	.word	0x00001b65
    1c2c:	2000021e 	.word	0x2000021e

00001c30 <configure_dac>:
static volatile uint16_t waveform_volume = 0; //100 highest
volatile static uint16_t waveform_frequency = 262;  //1KHz


void configure_dac(void)
{
    1c30:	b500      	push	{lr}
    1c32:	b083      	sub	sp, #12
	struct dac_config config_dac;
	dac_get_config_defaults(&config_dac);
    1c34:	4668      	mov	r0, sp
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <configure_dac+0x1c>)
    1c38:	4798      	blx	r3
	config_dac.reference = DAC_REFERENCE_AVCC;
    1c3a:	2340      	movs	r3, #64	; 0x40
    1c3c:	466a      	mov	r2, sp
    1c3e:	7013      	strb	r3, [r2, #0]
	dac_init(&dac_instance, DAC, &config_dac);
    1c40:	4903      	ldr	r1, [pc, #12]	; (1c50 <configure_dac+0x20>)
    1c42:	4804      	ldr	r0, [pc, #16]	; (1c54 <configure_dac+0x24>)
    1c44:	4b04      	ldr	r3, [pc, #16]	; (1c58 <configure_dac+0x28>)
    1c46:	4798      	blx	r3
	//dac_enable(&dac_instance);	
}
    1c48:	b003      	add	sp, #12
    1c4a:	bd00      	pop	{pc}
    1c4c:	00003449 	.word	0x00003449
    1c50:	42004800 	.word	0x42004800
    1c54:	2000060c 	.word	0x2000060c
    1c58:	0000345d 	.word	0x0000345d

00001c5c <configure_dac_channel>:

void configure_dac_channel(void)
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	b082      	sub	sp, #8
	
	struct dac_chan_config config_dac_chan;
	dac_chan_get_config_defaults(&config_dac_chan);
    1c60:	a801      	add	r0, sp, #4
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <configure_dac_channel+0x24>)
    1c64:	4798      	blx	r3
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    1c66:	4c07      	ldr	r4, [pc, #28]	; (1c84 <configure_dac_channel+0x28>)
    1c68:	aa01      	add	r2, sp, #4
    1c6a:	2100      	movs	r1, #0
    1c6c:	0020      	movs	r0, r4
    1c6e:	4b06      	ldr	r3, [pc, #24]	; (1c88 <configure_dac_channel+0x2c>)
    1c70:	4798      	blx	r3
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    1c72:	2100      	movs	r1, #0
    1c74:	0020      	movs	r0, r4
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <configure_dac_channel+0x30>)
    1c78:	4798      	blx	r3
	
}
    1c7a:	b002      	add	sp, #8
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	00003579 	.word	0x00003579
    1c84:	2000060c 	.word	0x2000060c
    1c88:	0000357b 	.word	0x0000357b
    1c8c:	0000357d 	.word	0x0000357d

00001c90 <configure_buzzer_pins>:

void configure_buzzer_pins()
{
    1c90:	b500      	push	{lr}
    1c92:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c94:	a901      	add	r1, sp, #4
    1c96:	2301      	movs	r3, #1
    1c98:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1c9a:	2200      	movs	r2, #0
    1c9c:	708a      	strb	r2, [r1, #2]
	// Enable output on the I/O line
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1c9e:	700b      	strb	r3, [r1, #0]
	//port_pin_set_config(PIN_PA02, &config_port_pin);
	port_pin_set_config(AUDIO_SDB, &config_port_pin);
    1ca0:	2037      	movs	r0, #55	; 0x37
    1ca2:	4b02      	ldr	r3, [pc, #8]	; (1cac <configure_buzzer_pins+0x1c>)
    1ca4:	4798      	blx	r3

}
    1ca6:	b003      	add	sp, #12
    1ca8:	bd00      	pop	{pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00003731 	.word	0x00003731

00001cb0 <calculate_frequency>:



struct speaker_timer* calculate_frequency(void)
{	
    1cb0:	b510      	push	{r4, lr}
	static struct speaker_timer* I_1 = NULL;
	static first_time = true;
	uint8_t prescalar_value = 1;
	if(first_time == true)
    1cb2:	4b48      	ldr	r3, [pc, #288]	; (1dd4 <calculate_frequency+0x124>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	2b01      	cmp	r3, #1
    1cb8:	d01e      	beq.n	1cf8 <calculate_frequency+0x48>
	{
		I_1 = malloc(sizeof(struct speaker_timer));
		first_time = false;
	}
	
	if((waveform_frequency <= 10000) & (waveform_frequency > 2941))
    1cba:	4b47      	ldr	r3, [pc, #284]	; (1dd8 <calculate_frequency+0x128>)
    1cbc:	881a      	ldrh	r2, [r3, #0]
    1cbe:	b292      	uxth	r2, r2
    1cc0:	8819      	ldrh	r1, [r3, #0]
    1cc2:	b289      	uxth	r1, r1
    1cc4:	2300      	movs	r3, #0
    1cc6:	4845      	ldr	r0, [pc, #276]	; (1ddc <calculate_frequency+0x12c>)
    1cc8:	4290      	cmp	r0, r2
    1cca:	415b      	adcs	r3, r3
    1ccc:	b2db      	uxtb	r3, r3
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d01b      	beq.n	1d0a <calculate_frequency+0x5a>
    1cd2:	4b43      	ldr	r3, [pc, #268]	; (1de0 <calculate_frequency+0x130>)
    1cd4:	428b      	cmp	r3, r1
    1cd6:	d218      	bcs.n	1d0a <calculate_frequency+0x5a>
	{
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV1;
    1cd8:	4b42      	ldr	r3, [pc, #264]	; (1de4 <calculate_frequency+0x134>)
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	2200      	movs	r2, #0
    1cde:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_1 ; 
    1ce0:	3201      	adds	r2, #1
	else 
	{
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV64;
		prescalar_value = PRESCALAR_64 ; 	
	}
	I_1->speaker_period = (OPTIMIZE_COUNT_CALCULATION/((prescalar_value)*(waveform_frequency)));
    1ce2:	4b40      	ldr	r3, [pc, #256]	; (1de4 <calculate_frequency+0x134>)
    1ce4:	681c      	ldr	r4, [r3, #0]
    1ce6:	4b3c      	ldr	r3, [pc, #240]	; (1dd8 <calculate_frequency+0x128>)
    1ce8:	8819      	ldrh	r1, [r3, #0]
    1cea:	4351      	muls	r1, r2
    1cec:	483e      	ldr	r0, [pc, #248]	; (1de8 <calculate_frequency+0x138>)
    1cee:	4b3f      	ldr	r3, [pc, #252]	; (1dec <calculate_frequency+0x13c>)
    1cf0:	4798      	blx	r3
    1cf2:	7020      	strb	r0, [r4, #0]
	
	return I_1; 
}
    1cf4:	0020      	movs	r0, r4
    1cf6:	bd10      	pop	{r4, pc}
		I_1 = malloc(sizeof(struct speaker_timer));
    1cf8:	2008      	movs	r0, #8
    1cfa:	4b3d      	ldr	r3, [pc, #244]	; (1df0 <calculate_frequency+0x140>)
    1cfc:	4798      	blx	r3
    1cfe:	4b39      	ldr	r3, [pc, #228]	; (1de4 <calculate_frequency+0x134>)
    1d00:	6018      	str	r0, [r3, #0]
		first_time = false;
    1d02:	2200      	movs	r2, #0
    1d04:	4b33      	ldr	r3, [pc, #204]	; (1dd4 <calculate_frequency+0x124>)
    1d06:	601a      	str	r2, [r3, #0]
    1d08:	e7d7      	b.n	1cba <calculate_frequency+0xa>
	else if((waveform_frequency <= 2941) & (waveform_frequency > 1470))
    1d0a:	4b33      	ldr	r3, [pc, #204]	; (1dd8 <calculate_frequency+0x128>)
    1d0c:	881a      	ldrh	r2, [r3, #0]
    1d0e:	b292      	uxth	r2, r2
    1d10:	8819      	ldrh	r1, [r3, #0]
    1d12:	b289      	uxth	r1, r1
    1d14:	2300      	movs	r3, #0
    1d16:	4832      	ldr	r0, [pc, #200]	; (1de0 <calculate_frequency+0x130>)
    1d18:	4290      	cmp	r0, r2
    1d1a:	415b      	adcs	r3, r3
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d009      	beq.n	1d36 <calculate_frequency+0x86>
    1d22:	4b34      	ldr	r3, [pc, #208]	; (1df4 <calculate_frequency+0x144>)
    1d24:	428b      	cmp	r3, r1
    1d26:	d206      	bcs.n	1d36 <calculate_frequency+0x86>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV2;
    1d28:	4b2e      	ldr	r3, [pc, #184]	; (1de4 <calculate_frequency+0x134>)
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	2280      	movs	r2, #128	; 0x80
    1d2e:	0052      	lsls	r2, r2, #1
    1d30:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_2 ; 
    1d32:	3afe      	subs	r2, #254	; 0xfe
    1d34:	e7d5      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency <= 1470) & (waveform_frequency > 732))
    1d36:	4b28      	ldr	r3, [pc, #160]	; (1dd8 <calculate_frequency+0x128>)
    1d38:	881a      	ldrh	r2, [r3, #0]
    1d3a:	b292      	uxth	r2, r2
    1d3c:	8819      	ldrh	r1, [r3, #0]
    1d3e:	b289      	uxth	r1, r1
    1d40:	2300      	movs	r3, #0
    1d42:	482c      	ldr	r0, [pc, #176]	; (1df4 <calculate_frequency+0x144>)
    1d44:	4290      	cmp	r0, r2
    1d46:	415b      	adcs	r3, r3
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d00b      	beq.n	1d66 <calculate_frequency+0xb6>
    1d4e:	23b7      	movs	r3, #183	; 0xb7
    1d50:	009b      	lsls	r3, r3, #2
    1d52:	428b      	cmp	r3, r1
    1d54:	d207      	bcs.n	1d66 <calculate_frequency+0xb6>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV4;
    1d56:	4b23      	ldr	r3, [pc, #140]	; (1de4 <calculate_frequency+0x134>)
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	2280      	movs	r2, #128	; 0x80
    1d5c:	0092      	lsls	r2, r2, #2
    1d5e:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_4 ; 	
    1d60:	3afd      	subs	r2, #253	; 0xfd
    1d62:	3aff      	subs	r2, #255	; 0xff
    1d64:	e7bd      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency <= 732) & (waveform_frequency > 366))
    1d66:	4b1c      	ldr	r3, [pc, #112]	; (1dd8 <calculate_frequency+0x128>)
    1d68:	881a      	ldrh	r2, [r3, #0]
    1d6a:	b292      	uxth	r2, r2
    1d6c:	8819      	ldrh	r1, [r3, #0]
    1d6e:	b289      	uxth	r1, r1
    1d70:	2300      	movs	r3, #0
    1d72:	20b7      	movs	r0, #183	; 0xb7
    1d74:	0080      	lsls	r0, r0, #2
    1d76:	4290      	cmp	r0, r2
    1d78:	415b      	adcs	r3, r3
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d00a      	beq.n	1d96 <calculate_frequency+0xe6>
    1d80:	23b7      	movs	r3, #183	; 0xb7
    1d82:	005b      	lsls	r3, r3, #1
    1d84:	428b      	cmp	r3, r1
    1d86:	d206      	bcs.n	1d96 <calculate_frequency+0xe6>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV8;
    1d88:	4b16      	ldr	r3, [pc, #88]	; (1de4 <calculate_frequency+0x134>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	22c0      	movs	r2, #192	; 0xc0
    1d8e:	0092      	lsls	r2, r2, #2
    1d90:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_8 ; 
    1d92:	2208      	movs	r2, #8
    1d94:	e7a5      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency>= 366) & (waveform_frequency < 183))
    1d96:	4a10      	ldr	r2, [pc, #64]	; (1dd8 <calculate_frequency+0x128>)
    1d98:	8813      	ldrh	r3, [r2, #0]
    1d9a:	b29b      	uxth	r3, r3
    1d9c:	8812      	ldrh	r2, [r2, #0]
    1d9e:	b292      	uxth	r2, r2
    1da0:	216e      	movs	r1, #110	; 0x6e
    1da2:	31ff      	adds	r1, #255	; 0xff
    1da4:	4299      	cmp	r1, r3
    1da6:	d20d      	bcs.n	1dc4 <calculate_frequency+0x114>
    1da8:	2300      	movs	r3, #0
    1daa:	39b7      	subs	r1, #183	; 0xb7
    1dac:	4291      	cmp	r1, r2
    1dae:	415b      	adcs	r3, r3
    1db0:	b2db      	uxtb	r3, r3
    1db2:	2b00      	cmp	r3, #0
    1db4:	d006      	beq.n	1dc4 <calculate_frequency+0x114>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV16;
    1db6:	4b0b      	ldr	r3, [pc, #44]	; (1de4 <calculate_frequency+0x134>)
    1db8:	681b      	ldr	r3, [r3, #0]
    1dba:	2280      	movs	r2, #128	; 0x80
    1dbc:	00d2      	lsls	r2, r2, #3
    1dbe:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_32 ; 	
    1dc0:	2220      	movs	r2, #32
    1dc2:	e78e      	b.n	1ce2 <calculate_frequency+0x32>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV64;
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <calculate_frequency+0x134>)
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	22a0      	movs	r2, #160	; 0xa0
    1dca:	00d2      	lsls	r2, r2, #3
    1dcc:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_64 ; 	
    1dce:	2240      	movs	r2, #64	; 0x40
    1dd0:	e787      	b.n	1ce2 <calculate_frequency+0x32>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	2000001c 	.word	0x2000001c
    1dd8:	20000022 	.word	0x20000022
    1ddc:	00002710 	.word	0x00002710
    1de0:	00000b7d 	.word	0x00000b7d
    1de4:	20000220 	.word	0x20000220
    1de8:	000b71b0 	.word	0x000b71b0
    1dec:	00008bd5 	.word	0x00008bd5
    1df0:	0000a4c9 	.word	0x0000a4c9
    1df4:	000005be 	.word	0x000005be

00001df8 <configure_dma_resource_dac>:



//DMA initialization
void configure_dma_resource_dac(struct dma_resource *resource)
{
    1df8:	b510      	push	{r4, lr}
    1dfa:	b082      	sub	sp, #8
    1dfc:	0004      	movs	r4, r0
	struct dma_resource_config config;
	dma_get_config_defaults(&config);
    1dfe:	4668      	mov	r0, sp
    1e00:	4b06      	ldr	r3, [pc, #24]	; (1e1c <configure_dma_resource_dac+0x24>)
    1e02:	4798      	blx	r3
	config.peripheral_trigger = TC5_DMAC_ID_OVF;
    1e04:	231e      	movs	r3, #30
    1e06:	466a      	mov	r2, sp
    1e08:	7053      	strb	r3, [r2, #1]
	config.trigger_action = DMA_TRIGGER_ACTON_BEAT;
    1e0a:	3b1c      	subs	r3, #28
    1e0c:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1e0e:	4669      	mov	r1, sp
    1e10:	0020      	movs	r0, r4
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <configure_dma_resource_dac+0x28>)
    1e14:	4798      	blx	r3
}
    1e16:	b002      	add	sp, #8
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	000001c9 	.word	0x000001c9
    1e20:	000001d9 	.word	0x000001d9

00001e24 <setup_transfer_descriptor_dac>:

void setup_transfer_descriptor_dac(DmacDescriptor *descriptor)
{
    1e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e26:	46de      	mov	lr, fp
    1e28:	4657      	mov	r7, sl
    1e2a:	464e      	mov	r6, r9
    1e2c:	4645      	mov	r5, r8
    1e2e:	b5e0      	push	{r5, r6, r7, lr}
    1e30:	b08b      	sub	sp, #44	; 0x2c
    1e32:	9003      	str	r0, [sp, #12]
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1e34:	2201      	movs	r2, #1
    1e36:	ab04      	add	r3, sp, #16
    1e38:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1e3a:	2300      	movs	r3, #0
    1e3c:	a904      	add	r1, sp, #16
    1e3e:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1e40:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1e42:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    1e44:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
    1e46:	714a      	strb	r2, [r1, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1e48:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1e4a:	71cb      	strb	r3, [r1, #7]
	/* Default transfer size is set to 0 */
	config->block_transfer_count = 0;
    1e4c:	810b      	strh	r3, [r1, #8]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
    1e4e:	9307      	str	r3, [sp, #28]
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
    1e50:	9308      	str	r3, [sp, #32]
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    1e52:	9309      	str	r3, [sp, #36]	; 0x24
	waveform_amplitude = waveform_volume*MAX_AMPLITUDE;
    1e54:	4b72      	ldr	r3, [pc, #456]	; (2020 <STACK_SIZE+0x20>)
    1e56:	8818      	ldrh	r0, [r3, #0]
    1e58:	b280      	uxth	r0, r0
    1e5a:	4b72      	ldr	r3, [pc, #456]	; (2024 <STACK_SIZE+0x24>)
    1e5c:	4798      	blx	r3
    1e5e:	4a72      	ldr	r2, [pc, #456]	; (2028 <STACK_SIZE+0x28>)
    1e60:	4b72      	ldr	r3, [pc, #456]	; (202c <STACK_SIZE+0x2c>)
    1e62:	4c73      	ldr	r4, [pc, #460]	; (2030 <STACK_SIZE+0x30>)
    1e64:	47a0      	blx	r4
    1e66:	4b73      	ldr	r3, [pc, #460]	; (2034 <STACK_SIZE+0x34>)
    1e68:	4798      	blx	r3
    1e6a:	b284      	uxth	r4, r0
	if(first_run == true )
    1e6c:	4b72      	ldr	r3, [pc, #456]	; (2038 <STACK_SIZE+0x38>)
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d13b      	bne.n	1eec <setup_transfer_descriptor_dac+0xc8>
	if(waveform_type == square )
    1e74:	4b71      	ldr	r3, [pc, #452]	; (203c <STACK_SIZE+0x3c>)
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d14e      	bne.n	1f1a <setup_transfer_descriptor_dac+0xf6>
		waveform_current = waveform_square;
    1e7c:	4b70      	ldr	r3, [pc, #448]	; (2040 <STACK_SIZE+0x40>)
    1e7e:	6818      	ldr	r0, [r3, #0]
    1e80:	4b70      	ldr	r3, [pc, #448]	; (2044 <STACK_SIZE+0x44>)
    1e82:	6018      	str	r0, [r3, #0]
    1e84:	0003      	movs	r3, r0
    1e86:	0002      	movs	r2, r0
    1e88:	3240      	adds	r2, #64	; 0x40
			*waveform_square = waveform_amplitude;
    1e8a:	801c      	strh	r4, [r3, #0]
    1e8c:	3302      	adds	r3, #2
		for(i=0;i<(NO_DATA_SQUARE/2);i++)
    1e8e:	4293      	cmp	r3, r2
    1e90:	d1fb      	bne.n	1e8a <setup_transfer_descriptor_dac+0x66>
    1e92:	0001      	movs	r1, r0
    1e94:	3180      	adds	r1, #128	; 0x80
			*waveform_square = 0;
    1e96:	2200      	movs	r2, #0
    1e98:	801a      	strh	r2, [r3, #0]
    1e9a:	3302      	adds	r3, #2
		for(i=(NO_DATA_SQUARE/2);i<NO_DATA_SQUARE;i++)
    1e9c:	4299      	cmp	r1, r3
    1e9e:	d1fb      	bne.n	1e98 <setup_transfer_descriptor_dac+0x74>
		waveform_square = waveform_current;
    1ea0:	4b67      	ldr	r3, [pc, #412]	; (2040 <STACK_SIZE+0x40>)
    1ea2:	6018      	str	r0, [r3, #0]
	return waveform_current;
    1ea4:	4b67      	ldr	r3, [pc, #412]	; (2044 <STACK_SIZE+0x44>)
    1ea6:	681b      	ldr	r3, [r3, #0]
	uint16_t* waveform=NULL;
	static bool first_time = true;
	struct dma_descriptor_config descriptor_config;
	dma_descriptor_get_config_defaults(&descriptor_config);
	waveform = calculate_wave();
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    1ea8:	2201      	movs	r2, #1
    1eaa:	a904      	add	r1, sp, #16
    1eac:	70ca      	strb	r2, [r1, #3]
	descriptor_config.dst_increment_enable = false;
    1eae:	2200      	movs	r2, #0
    1eb0:	714a      	strb	r2, [r1, #5]
	descriptor_config.block_transfer_count = NO_DATA_SINE;
    1eb2:	3240      	adds	r2, #64	; 0x40
    1eb4:	810a      	strh	r2, [r1, #8]
	descriptor_config.source_address = (uint32_t)waveform +  NO_DATA_SINE*2;
    1eb6:	3380      	adds	r3, #128	; 0x80
    1eb8:	9307      	str	r3, [sp, #28]
	//descriptor_config.block_transfer_count = sizeof(start_up_song);
	//descriptor_config.source_address = (uint32_t)start_up_song +  sizeof(start_up_song);
	descriptor_config.destination_address = (uint32_t)(&dac_instance.hw->DATA.reg);
    1eba:	4b63      	ldr	r3, [pc, #396]	; (2048 <STACK_SIZE+0x48>)
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	3308      	adds	r3, #8
    1ec0:	9308      	str	r3, [sp, #32]
	descriptor_config.next_descriptor_address = (uint32_t)descriptor;
    1ec2:	9b03      	ldr	r3, [sp, #12]
    1ec4:	9309      	str	r3, [sp, #36]	; 0x24

	if(first_time == true)
    1ec6:	4b61      	ldr	r3, [pc, #388]	; (204c <STACK_SIZE+0x4c>)
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d000      	beq.n	1ed0 <setup_transfer_descriptor_dac+0xac>
    1ece:	e09f      	b.n	2010 <STACK_SIZE+0x10>
		first_time = false;
	}
	else
	{
		//dma_suspend_job( &resource_DAC);
		dma_descriptor_create(descriptor, &descriptor_config);
    1ed0:	a904      	add	r1, sp, #16
    1ed2:	9803      	ldr	r0, [sp, #12]
    1ed4:	4b5e      	ldr	r3, [pc, #376]	; (2050 <STACK_SIZE+0x50>)
    1ed6:	4798      	blx	r3
		dma_start_transfer_job(&resource_DAC);
    1ed8:	485e      	ldr	r0, [pc, #376]	; (2054 <STACK_SIZE+0x54>)
    1eda:	4b5f      	ldr	r3, [pc, #380]	; (2058 <STACK_SIZE+0x58>)
    1edc:	4798      	blx	r3
		//dma_resume_job( &resource_DAC);
	}
	
}
    1ede:	b00b      	add	sp, #44	; 0x2c
    1ee0:	bc3c      	pop	{r2, r3, r4, r5}
    1ee2:	4690      	mov	r8, r2
    1ee4:	4699      	mov	r9, r3
    1ee6:	46a2      	mov	sl, r4
    1ee8:	46ab      	mov	fp, r5
    1eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		waveform_sine = malloc(NO_DATA_SINE*sizeof(waveform_sine));
    1eec:	2680      	movs	r6, #128	; 0x80
    1eee:	0076      	lsls	r6, r6, #1
    1ef0:	0030      	movs	r0, r6
    1ef2:	4d5a      	ldr	r5, [pc, #360]	; (205c <STACK_SIZE+0x5c>)
    1ef4:	47a8      	blx	r5
    1ef6:	4b5a      	ldr	r3, [pc, #360]	; (2060 <STACK_SIZE+0x60>)
    1ef8:	6018      	str	r0, [r3, #0]
		waveform_ramp = malloc(NO_DATA_RAMP*sizeof(waveform_ramp));
    1efa:	0030      	movs	r0, r6
    1efc:	47a8      	blx	r5
    1efe:	4b59      	ldr	r3, [pc, #356]	; (2064 <STACK_SIZE+0x64>)
    1f00:	6018      	str	r0, [r3, #0]
		waveform_tri = malloc(NO_DATA_TRI*sizeof(waveform_tri));
    1f02:	0030      	movs	r0, r6
    1f04:	47a8      	blx	r5
    1f06:	4b58      	ldr	r3, [pc, #352]	; (2068 <STACK_SIZE+0x68>)
    1f08:	6018      	str	r0, [r3, #0]
		waveform_square = malloc(NO_DATA_TRI*sizeof(waveform_square));
    1f0a:	0030      	movs	r0, r6
    1f0c:	47a8      	blx	r5
    1f0e:	4b4c      	ldr	r3, [pc, #304]	; (2040 <STACK_SIZE+0x40>)
    1f10:	6018      	str	r0, [r3, #0]
		first_run = false;
    1f12:	2200      	movs	r2, #0
    1f14:	4b48      	ldr	r3, [pc, #288]	; (2038 <STACK_SIZE+0x38>)
    1f16:	701a      	strb	r2, [r3, #0]
    1f18:	e7ac      	b.n	1e74 <setup_transfer_descriptor_dac+0x50>
	else if(waveform_type == ramp )
    1f1a:	4b48      	ldr	r3, [pc, #288]	; (203c <STACK_SIZE+0x3c>)
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	2b01      	cmp	r3, #1
    1f20:	d03b      	beq.n	1f9a <setup_transfer_descriptor_dac+0x176>
	else if(waveform_type == triangular)
    1f22:	4b46      	ldr	r3, [pc, #280]	; (203c <STACK_SIZE+0x3c>)
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	2b02      	cmp	r3, #2
    1f28:	d04e      	beq.n	1fc8 <setup_transfer_descriptor_dac+0x1a4>
	else if(waveform_type == sine)
    1f2a:	4b44      	ldr	r3, [pc, #272]	; (203c <STACK_SIZE+0x3c>)
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	2b03      	cmp	r3, #3
    1f30:	d1b8      	bne.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_sine;
    1f32:	4b4b      	ldr	r3, [pc, #300]	; (2060 <STACK_SIZE+0x60>)
    1f34:	681f      	ldr	r7, [r3, #0]
    1f36:	4b43      	ldr	r3, [pc, #268]	; (2044 <STACK_SIZE+0x44>)
    1f38:	601f      	str	r7, [r3, #0]
			waveform_test[i] =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f3a:	0860      	lsrs	r0, r4, #1
    1f3c:	4b39      	ldr	r3, [pc, #228]	; (2024 <STACK_SIZE+0x24>)
    1f3e:	4798      	blx	r3
    1f40:	9000      	str	r0, [sp, #0]
    1f42:	9101      	str	r1, [sp, #4]
    1f44:	2500      	movs	r5, #0
		for(i=0;i<NO_DATA_SINE;i++)
    1f46:	2400      	movs	r4, #0
			waveform_test[i] =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f48:	4b36      	ldr	r3, [pc, #216]	; (2024 <STACK_SIZE+0x24>)
    1f4a:	469b      	mov	fp, r3
    1f4c:	4e38      	ldr	r6, [pc, #224]	; (2030 <STACK_SIZE+0x30>)
    1f4e:	4b47      	ldr	r3, [pc, #284]	; (206c <STACK_SIZE+0x6c>)
    1f50:	469a      	mov	sl, r3
    1f52:	4b38      	ldr	r3, [pc, #224]	; (2034 <STACK_SIZE+0x34>)
    1f54:	4699      	mov	r9, r3
    1f56:	4b46      	ldr	r3, [pc, #280]	; (2070 <STACK_SIZE+0x70>)
    1f58:	4698      	mov	r8, r3
    1f5a:	9702      	str	r7, [sp, #8]
    1f5c:	0028      	movs	r0, r5
    1f5e:	47d8      	blx	fp
    1f60:	4a44      	ldr	r2, [pc, #272]	; (2074 <STACK_SIZE+0x74>)
    1f62:	4b45      	ldr	r3, [pc, #276]	; (2078 <STACK_SIZE+0x78>)
    1f64:	47b0      	blx	r6
    1f66:	2200      	movs	r2, #0
    1f68:	4b44      	ldr	r3, [pc, #272]	; (207c <STACK_SIZE+0x7c>)
    1f6a:	47b0      	blx	r6
    1f6c:	47d0      	blx	sl
    1f6e:	9a00      	ldr	r2, [sp, #0]
    1f70:	9b01      	ldr	r3, [sp, #4]
    1f72:	47b0      	blx	r6
    1f74:	9a00      	ldr	r2, [sp, #0]
    1f76:	9b01      	ldr	r3, [sp, #4]
    1f78:	4f41      	ldr	r7, [pc, #260]	; (2080 <STACK_SIZE+0x80>)
    1f7a:	47b8      	blx	r7
    1f7c:	47c8      	blx	r9
    1f7e:	b280      	uxth	r0, r0
    1f80:	0063      	lsls	r3, r4, #1
    1f82:	4642      	mov	r2, r8
    1f84:	5298      	strh	r0, [r3, r2]
			*waveform_sine =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f86:	9b02      	ldr	r3, [sp, #8]
    1f88:	5358      	strh	r0, [r3, r5]
		for(i=0;i<NO_DATA_SINE;i++)
    1f8a:	3401      	adds	r4, #1
    1f8c:	3502      	adds	r5, #2
    1f8e:	2c40      	cmp	r4, #64	; 0x40
    1f90:	d1e4      	bne.n	1f5c <setup_transfer_descriptor_dac+0x138>
    1f92:	001f      	movs	r7, r3
		waveform_sine = waveform_current; 
    1f94:	4b32      	ldr	r3, [pc, #200]	; (2060 <STACK_SIZE+0x60>)
    1f96:	601f      	str	r7, [r3, #0]
    1f98:	e784      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_ramp;
    1f9a:	4b32      	ldr	r3, [pc, #200]	; (2064 <STACK_SIZE+0x64>)
    1f9c:	681f      	ldr	r7, [r3, #0]
    1f9e:	4b29      	ldr	r3, [pc, #164]	; (2044 <STACK_SIZE+0x44>)
    1fa0:	601f      	str	r7, [r3, #0]
    1fa2:	003d      	movs	r5, r7
    1fa4:	2040      	movs	r0, #64	; 0x40
		for(i=0;i<NO_DATA_RAMP;i++)
    1fa6:	2100      	movs	r1, #0
			*waveform_ramp = (i*waveform_amplitude) / NO_DATA_RAMP;
    1fa8:	263f      	movs	r6, #63	; 0x3f
    1faa:	000a      	movs	r2, r1
    1fac:	4362      	muls	r2, r4
    1fae:	17d3      	asrs	r3, r2, #31
    1fb0:	4033      	ands	r3, r6
    1fb2:	189b      	adds	r3, r3, r2
    1fb4:	119b      	asrs	r3, r3, #6
    1fb6:	802b      	strh	r3, [r5, #0]
			 waveform_ramp++;
    1fb8:	3502      	adds	r5, #2
		for(i=0;i<NO_DATA_RAMP;i++)
    1fba:	3101      	adds	r1, #1
    1fbc:	3801      	subs	r0, #1
    1fbe:	2800      	cmp	r0, #0
    1fc0:	d1f3      	bne.n	1faa <setup_transfer_descriptor_dac+0x186>
		waveform_ramp = waveform_current;
    1fc2:	4b28      	ldr	r3, [pc, #160]	; (2064 <STACK_SIZE+0x64>)
    1fc4:	601f      	str	r7, [r3, #0]
    1fc6:	e76d      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_tri;
    1fc8:	4b27      	ldr	r3, [pc, #156]	; (2068 <STACK_SIZE+0x68>)
    1fca:	681d      	ldr	r5, [r3, #0]
    1fcc:	4b1d      	ldr	r3, [pc, #116]	; (2044 <STACK_SIZE+0x44>)
    1fce:	601d      	str	r5, [r3, #0]
    1fd0:	002b      	movs	r3, r5
    1fd2:	0064      	lsls	r4, r4, #1
    1fd4:	0027      	movs	r7, r4
    1fd6:	002e      	movs	r6, r5
    1fd8:	3640      	adds	r6, #64	; 0x40
    1fda:	2100      	movs	r1, #0
			*waveform_tri = (i*waveform_amplitude*2) / NO_DATA_TRI;
    1fdc:	203f      	movs	r0, #63	; 0x3f
    1fde:	17ca      	asrs	r2, r1, #31
    1fe0:	4002      	ands	r2, r0
    1fe2:	1852      	adds	r2, r2, r1
    1fe4:	1192      	asrs	r2, r2, #6
    1fe6:	801a      	strh	r2, [r3, #0]
    1fe8:	3302      	adds	r3, #2
    1fea:	19c9      	adds	r1, r1, r7
		for(i=0;i<(NO_DATA_TRI/2);i++)
    1fec:	42b3      	cmp	r3, r6
    1fee:	d1f6      	bne.n	1fde <setup_transfer_descriptor_dac+0x1ba>
    1ff0:	0161      	lsls	r1, r4, #5
    1ff2:	002e      	movs	r6, r5
    1ff4:	3680      	adds	r6, #128	; 0x80
			*waveform_tri = ((NO_DATA_TRI-i)*(waveform_amplitude*2))/NO_DATA_TRI;
    1ff6:	203f      	movs	r0, #63	; 0x3f
    1ff8:	17ca      	asrs	r2, r1, #31
    1ffa:	4002      	ands	r2, r0
    1ffc:	1852      	adds	r2, r2, r1
    1ffe:	1192      	asrs	r2, r2, #6
    2000:	801a      	strh	r2, [r3, #0]
    2002:	3302      	adds	r3, #2
    2004:	1b09      	subs	r1, r1, r4
		for(i= (NO_DATA_TRI/2);i<NO_DATA_TRI;i++)
    2006:	42b3      	cmp	r3, r6
    2008:	d1f6      	bne.n	1ff8 <setup_transfer_descriptor_dac+0x1d4>
		waveform_tri = waveform_current; 
    200a:	4b17      	ldr	r3, [pc, #92]	; (2068 <STACK_SIZE+0x68>)
    200c:	601d      	str	r5, [r3, #0]
    200e:	e749      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		dma_descriptor_create(descriptor, &descriptor_config);
    2010:	9803      	ldr	r0, [sp, #12]
    2012:	4b0f      	ldr	r3, [pc, #60]	; (2050 <STACK_SIZE+0x50>)
    2014:	4798      	blx	r3
		first_time = false;
    2016:	2200      	movs	r2, #0
    2018:	4b0c      	ldr	r3, [pc, #48]	; (204c <STACK_SIZE+0x4c>)
    201a:	701a      	strb	r2, [r3, #0]
    201c:	e75f      	b.n	1ede <setup_transfer_descriptor_dac+0xba>
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	200002bc 	.word	0x200002bc
    2024:	0000a3fd 	.word	0x0000a3fd
    2028:	8f5c28f6 	.word	0x8f5c28f6
    202c:	402475c2 	.word	0x402475c2
    2030:	00009869 	.word	0x00009869
    2034:	0000900d 	.word	0x0000900d
    2038:	2000001a 	.word	0x2000001a
    203c:	20000024 	.word	0x20000024
    2040:	20000234 	.word	0x20000234
    2044:	20000228 	.word	0x20000228
    2048:	2000060c 	.word	0x2000060c
    204c:	20000020 	.word	0x20000020
    2050:	000003a9 	.word	0x000003a9
    2054:	20000614 	.word	0x20000614
    2058:	00000321 	.word	0x00000321
    205c:	0000a4c9 	.word	0x0000a4c9
    2060:	20000230 	.word	0x20000230
    2064:	2000022c 	.word	0x2000022c
    2068:	200002b8 	.word	0x200002b8
    206c:	00007871 	.word	0x00007871
    2070:	20000238 	.word	0x20000238
    2074:	c083126f 	.word	0xc083126f
    2078:	400921ca 	.word	0x400921ca
    207c:	3f900000 	.word	0x3f900000
    2080:	00009049 	.word	0x00009049

00002084 <setup_prescalar>:

void setup_prescalar(struct speaker_timer* I_1)
{
    2084:	b530      	push	{r4, r5, lr}
    2086:	b083      	sub	sp, #12
	volatile uint16_t temp = 0;
    2088:	2200      	movs	r2, #0
    208a:	466b      	mov	r3, sp
    208c:	80da      	strh	r2, [r3, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    208e:	4b11      	ldr	r3, [pc, #68]	; (20d4 <setup_prescalar+0x50>)
    2090:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2092:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2094:	b25b      	sxtb	r3, r3
    2096:	2b00      	cmp	r3, #0
    2098:	dbfb      	blt.n	2092 <setup_prescalar+0xe>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    209a:	8813      	ldrh	r3, [r2, #0]
    209c:	2102      	movs	r1, #2
    209e:	438b      	bics	r3, r1
    20a0:	8013      	strh	r3, [r2, #0]
	tc_disable(&tc_instance5);

	tc_instance5.hw->COUNT8.PER.reg	=  (uint8_t)I_1->speaker_period ;
    20a2:	4c0c      	ldr	r4, [pc, #48]	; (20d4 <setup_prescalar+0x50>)
    20a4:	6821      	ldr	r1, [r4, #0]
    20a6:	7803      	ldrb	r3, [r0, #0]
    20a8:	750b      	strb	r3, [r1, #20]
	temp = tc_instance5.hw->COUNT8.CTRLA.reg ;
    20aa:	880b      	ldrh	r3, [r1, #0]
    20ac:	b29b      	uxth	r3, r3
    20ae:	466a      	mov	r2, sp
    20b0:	80d3      	strh	r3, [r2, #6]
	temp = ((uint16_t)I_1->speaker_prescalar) | (temp & PRESCALAR_MASK); 
    20b2:	88d3      	ldrh	r3, [r2, #6]
    20b4:	4d08      	ldr	r5, [pc, #32]	; (20d8 <setup_prescalar+0x54>)
    20b6:	402b      	ands	r3, r5
    20b8:	8880      	ldrh	r0, [r0, #4]
    20ba:	4303      	orrs	r3, r0
    20bc:	80d3      	strh	r3, [r2, #6]
	tc_instance5.hw->COUNT8.CTRLA.reg =  temp;
    20be:	88d3      	ldrh	r3, [r2, #6]
    20c0:	b29b      	uxth	r3, r3
    20c2:	800b      	strh	r3, [r1, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    20c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    20c6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(&tc_instance5)) {
    20c8:	b25b      	sxtb	r3, r3
    20ca:	2b00      	cmp	r3, #0
    20cc:	dbfb      	blt.n	20c6 <setup_prescalar+0x42>
		/* Wait for sync */
	}
	
}
    20ce:	b003      	add	sp, #12
    20d0:	bd30      	pop	{r4, r5, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	200005f0 	.word	0x200005f0
    20d8:	fffff8ff 	.word	0xfffff8ff

000020dc <configure_tc5>:
	speaker_update();
}

//
void configure_tc5(struct speaker_timer* I_1)
{
    20dc:	b510      	push	{r4, lr}
    20de:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    20e0:	aa01      	add	r2, sp, #4
    20e2:	2300      	movs	r3, #0
    20e4:	2100      	movs	r1, #0
    20e6:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    20e8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    20ea:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    20ec:	2400      	movs	r4, #0
    20ee:	7054      	strb	r4, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    20f0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    20f2:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    20f4:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    20f6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    20f8:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    20fa:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    20fc:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    20fe:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2100:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2102:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2104:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2106:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2108:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    210a:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //16
    210c:	3304      	adds	r3, #4
    210e:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = I_1->speaker_prescalar; //64
    2110:	8883      	ldrh	r3, [r0, #4]
    2112:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = I_1->speaker_period; // 10KHz waveform
    2114:	7801      	ldrb	r1, [r0, #0]
    2116:	2329      	movs	r3, #41	; 0x29
    2118:	54d1      	strb	r1, [r2, r3]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	tc_init(&tc_instance5, TC5, &config_tc);
    211a:	4903      	ldr	r1, [pc, #12]	; (2128 <configure_tc5+0x4c>)
    211c:	4803      	ldr	r0, [pc, #12]	; (212c <configure_tc5+0x50>)
    211e:	4b04      	ldr	r3, [pc, #16]	; (2130 <configure_tc5+0x54>)
    2120:	4798      	blx	r3
}
    2122:	b00e      	add	sp, #56	; 0x38
    2124:	bd10      	pop	{r4, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	42003400 	.word	0x42003400
    212c:	200005f0 	.word	0x200005f0
    2130:	00004e69 	.word	0x00004e69

00002134 <disable_speaker>:
{
	configure_TC5_callback();
}

void disable_speaker()
{
    2134:	b510      	push	{r4, lr}
		port_base->OUTCLR.reg = pin_mask;
    2136:	2280      	movs	r2, #128	; 0x80
    2138:	0412      	lsls	r2, r2, #16
    213a:	4b08      	ldr	r3, [pc, #32]	; (215c <disable_speaker+0x28>)
    213c:	615a      	str	r2, [r3, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <disable_speaker+0x2c>)
    2140:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2142:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2144:	b25b      	sxtb	r3, r3
    2146:	2b00      	cmp	r3, #0
    2148:	dbfb      	blt.n	2142 <disable_speaker+0xe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    214a:	8813      	ldrh	r3, [r2, #0]
    214c:	2102      	movs	r1, #2
    214e:	438b      	bics	r3, r1
    2150:	8013      	strh	r3, [r2, #0]
	//Disable the all the modules which are involved in speaker which work independently
	port_pin_set_output_level(AUDIO_SDB, false);
	tc_disable(&tc_instance5);
	dac_disable(&dac_instance);
    2152:	4804      	ldr	r0, [pc, #16]	; (2164 <disable_speaker+0x30>)
    2154:	4b04      	ldr	r3, [pc, #16]	; (2168 <disable_speaker+0x34>)
    2156:	4798      	blx	r3

}
    2158:	bd10      	pop	{r4, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	41004480 	.word	0x41004480
    2160:	200005f0 	.word	0x200005f0
    2164:	2000060c 	.word	0x2000060c
    2168:	00003559 	.word	0x00003559

0000216c <enable_speaker>:

void enable_speaker()
{
    216c:	b510      	push	{r4, lr}
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    216e:	4b0e      	ldr	r3, [pc, #56]	; (21a8 <enable_speaker+0x3c>)
    2170:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2172:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2174:	b25b      	sxtb	r3, r3
    2176:	2b00      	cmp	r3, #0
    2178:	dbfb      	blt.n	2172 <enable_speaker+0x6>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    217a:	8813      	ldrh	r3, [r2, #0]
    217c:	2102      	movs	r1, #2
    217e:	430b      	orrs	r3, r1
    2180:	8013      	strh	r3, [r2, #0]
	static bool first_time = true; 
	//configure_dac_callbacks();
	tc_enable(&tc_instance5);
	dac_enable(&dac_instance);
    2182:	480a      	ldr	r0, [pc, #40]	; (21ac <enable_speaker+0x40>)
    2184:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <enable_speaker+0x44>)
    2186:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2188:	2280      	movs	r2, #128	; 0x80
    218a:	0412      	lsls	r2, r2, #16
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <enable_speaker+0x48>)
    218e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AUDIO_SDB, true);
	if(first_time == true)
    2190:	4b09      	ldr	r3, [pc, #36]	; (21b8 <enable_speaker+0x4c>)
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	2b00      	cmp	r3, #0
    2196:	d100      	bne.n	219a <enable_speaker+0x2e>
	{
		dma_start_transfer_job(&resource_DAC);
		first_time = false;
	}
	//dma_start_transfer_job(&resource_DAC);
}
    2198:	bd10      	pop	{r4, pc}
		dma_start_transfer_job(&resource_DAC);
    219a:	4808      	ldr	r0, [pc, #32]	; (21bc <enable_speaker+0x50>)
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <enable_speaker+0x54>)
    219e:	4798      	blx	r3
		first_time = false;
    21a0:	2200      	movs	r2, #0
    21a2:	4b05      	ldr	r3, [pc, #20]	; (21b8 <enable_speaker+0x4c>)
    21a4:	701a      	strb	r2, [r3, #0]
}
    21a6:	e7f7      	b.n	2198 <enable_speaker+0x2c>
    21a8:	200005f0 	.word	0x200005f0
    21ac:	2000060c 	.word	0x2000060c
    21b0:	0000351d 	.word	0x0000351d
    21b4:	41004480 	.word	0x41004480
    21b8:	20000021 	.word	0x20000021
    21bc:	20000614 	.word	0x20000614
    21c0:	00000321 	.word	0x00000321

000021c4 <speaker_update>:
{
    21c4:	b510      	push	{r4, lr}
	waveform_type      =   buzz_type;
    21c6:	4b19      	ldr	r3, [pc, #100]	; (222c <speaker_update+0x68>)
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b2db      	uxtb	r3, r3
    21cc:	4a18      	ldr	r2, [pc, #96]	; (2230 <speaker_update+0x6c>)
    21ce:	7013      	strb	r3, [r2, #0]
	waveform_frequency =   buzz_frequency;
    21d0:	4b18      	ldr	r3, [pc, #96]	; (2234 <speaker_update+0x70>)
    21d2:	881b      	ldrh	r3, [r3, #0]
    21d4:	b29b      	uxth	r3, r3
    21d6:	4a18      	ldr	r2, [pc, #96]	; (2238 <speaker_update+0x74>)
    21d8:	8013      	strh	r3, [r2, #0]
	waveform_volume    =   buzz_volume;
    21da:	4b18      	ldr	r3, [pc, #96]	; (223c <speaker_update+0x78>)
    21dc:	881b      	ldrh	r3, [r3, #0]
    21de:	b29b      	uxth	r3, r3
    21e0:	4917      	ldr	r1, [pc, #92]	; (2240 <speaker_update+0x7c>)
    21e2:	800b      	strh	r3, [r1, #0]
	if((waveform_frequency > 0) && (waveform_volume > 0))
    21e4:	8813      	ldrh	r3, [r2, #0]
    21e6:	b29b      	uxth	r3, r3
    21e8:	2b00      	cmp	r3, #0
    21ea:	d003      	beq.n	21f4 <speaker_update+0x30>
    21ec:	880b      	ldrh	r3, [r1, #0]
    21ee:	b29b      	uxth	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d105      	bne.n	2200 <speaker_update+0x3c>
		speaker_enable = false;
    21f4:	2200      	movs	r2, #0
    21f6:	4b13      	ldr	r3, [pc, #76]	; (2244 <speaker_update+0x80>)
    21f8:	701a      	strb	r2, [r3, #0]
		disable_speaker();
    21fa:	4b13      	ldr	r3, [pc, #76]	; (2248 <speaker_update+0x84>)
    21fc:	4798      	blx	r3
}
    21fe:	bd10      	pop	{r4, pc}
		I_1 = calculate_frequency() ;
    2200:	4b12      	ldr	r3, [pc, #72]	; (224c <speaker_update+0x88>)
    2202:	4798      	blx	r3
    2204:	0004      	movs	r4, r0
		setup_transfer_descriptor_dac(&descriptor_DAC);
    2206:	4812      	ldr	r0, [pc, #72]	; (2250 <speaker_update+0x8c>)
    2208:	4b12      	ldr	r3, [pc, #72]	; (2254 <speaker_update+0x90>)
    220a:	4798      	blx	r3
		setup_prescalar(I_1);
    220c:	0020      	movs	r0, r4
    220e:	4b12      	ldr	r3, [pc, #72]	; (2258 <speaker_update+0x94>)
    2210:	4798      	blx	r3
		dma_start_transfer_job(&resource_DAC);
    2212:	4812      	ldr	r0, [pc, #72]	; (225c <speaker_update+0x98>)
    2214:	4b12      	ldr	r3, [pc, #72]	; (2260 <speaker_update+0x9c>)
    2216:	4798      	blx	r3
		enable_speaker();
    2218:	4b12      	ldr	r3, [pc, #72]	; (2264 <speaker_update+0xa0>)
    221a:	4798      	blx	r3
		if(speaker_enable == false)
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <speaker_update+0x80>)
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d1ec      	bne.n	21fe <speaker_update+0x3a>
			speaker_enable = true;
    2224:	2201      	movs	r2, #1
    2226:	4b07      	ldr	r3, [pc, #28]	; (2244 <speaker_update+0x80>)
    2228:	701a      	strb	r2, [r3, #0]
    222a:	e7e8      	b.n	21fe <speaker_update+0x3a>
    222c:	200003c4 	.word	0x200003c4
    2230:	20000024 	.word	0x20000024
    2234:	200003c2 	.word	0x200003c2
    2238:	20000022 	.word	0x20000022
    223c:	200003c6 	.word	0x200003c6
    2240:	200002bc 	.word	0x200002bc
    2244:	20000224 	.word	0x20000224
    2248:	00002135 	.word	0x00002135
    224c:	00001cb1 	.word	0x00001cb1
    2250:	20000630 	.word	0x20000630
    2254:	00001e25 	.word	0x00001e25
    2258:	00002085 	.word	0x00002085
    225c:	20000614 	.word	0x20000614
    2260:	00000321 	.word	0x00000321
    2264:	0000216d 	.word	0x0000216d

00002268 <turn_off_speaker>:
{
    2268:	b510      	push	{r4, lr}
	buzz_type		= 0x00; //Square wave -- not important
    226a:	2300      	movs	r3, #0
    226c:	4a04      	ldr	r2, [pc, #16]	; (2280 <turn_off_speaker+0x18>)
    226e:	7013      	strb	r3, [r2, #0]
	buzz_frequency  = 0x0000; //Zero frequency
    2270:	4a04      	ldr	r2, [pc, #16]	; (2284 <turn_off_speaker+0x1c>)
    2272:	8013      	strh	r3, [r2, #0]
	buzz_volume		= 0; //Zero Volume
    2274:	4a04      	ldr	r2, [pc, #16]	; (2288 <turn_off_speaker+0x20>)
    2276:	8013      	strh	r3, [r2, #0]
	speaker_update();
    2278:	4b04      	ldr	r3, [pc, #16]	; (228c <turn_off_speaker+0x24>)
    227a:	4798      	blx	r3
}
    227c:	bd10      	pop	{r4, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	200003c4 	.word	0x200003c4
    2284:	200003c2 	.word	0x200003c2
    2288:	200003c6 	.word	0x200003c6
    228c:	000021c5 	.word	0x000021c5

00002290 <configure_dma_buzzer>:

void configure_dma_buzzer()
{
    2290:	b570      	push	{r4, r5, r6, lr}
	configure_dma_resource_dac(&resource_DAC);
    2292:	4c06      	ldr	r4, [pc, #24]	; (22ac <configure_dma_buzzer+0x1c>)
    2294:	0020      	movs	r0, r4
    2296:	4b06      	ldr	r3, [pc, #24]	; (22b0 <configure_dma_buzzer+0x20>)
    2298:	4798      	blx	r3
	setup_transfer_descriptor_dac(&descriptor_DAC);
    229a:	4d06      	ldr	r5, [pc, #24]	; (22b4 <configure_dma_buzzer+0x24>)
    229c:	0028      	movs	r0, r5
    229e:	4b06      	ldr	r3, [pc, #24]	; (22b8 <configure_dma_buzzer+0x28>)
    22a0:	4798      	blx	r3
	dma_add_descriptor(&resource_DAC, &descriptor_DAC);
    22a2:	0029      	movs	r1, r5
    22a4:	0020      	movs	r0, r4
    22a6:	4b05      	ldr	r3, [pc, #20]	; (22bc <configure_dma_buzzer+0x2c>)
    22a8:	4798      	blx	r3
}
    22aa:	bd70      	pop	{r4, r5, r6, pc}
    22ac:	20000614 	.word	0x20000614
    22b0:	00001df9 	.word	0x00001df9
    22b4:	20000630 	.word	0x20000630
    22b8:	00001e25 	.word	0x00001e25
    22bc:	00000451 	.word	0x00000451

000022c0 <configure_buzzer_modules>:

void configure_buzzer_modules()
{
    22c0:	b510      	push	{r4, lr}
	struct speaker_timer* I_2 = NULL;
	configure_dac();
    22c2:	4b05      	ldr	r3, [pc, #20]	; (22d8 <configure_buzzer_modules+0x18>)
    22c4:	4798      	blx	r3
	configure_dac_channel();
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <configure_buzzer_modules+0x1c>)
    22c8:	4798      	blx	r3
	I_2 = calculate_frequency();
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <configure_buzzer_modules+0x20>)
    22cc:	4798      	blx	r3
	configure_tc5(I_2);
    22ce:	4b05      	ldr	r3, [pc, #20]	; (22e4 <configure_buzzer_modules+0x24>)
    22d0:	4798      	blx	r3
	configure_dma_buzzer();
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <configure_buzzer_modules+0x28>)
    22d4:	4798      	blx	r3
}
    22d6:	bd10      	pop	{r4, pc}
    22d8:	00001c31 	.word	0x00001c31
    22dc:	00001c5d 	.word	0x00001c5d
    22e0:	00001cb1 	.word	0x00001cb1
    22e4:	000020dd 	.word	0x000020dd
    22e8:	00002291 	.word	0x00002291

000022ec <configure_buzzer>:

void configure_buzzer()
{
    22ec:	b510      	push	{r4, lr}
	configure_buzzer_pins();
    22ee:	4b03      	ldr	r3, [pc, #12]	; (22fc <configure_buzzer+0x10>)
    22f0:	4798      	blx	r3
	configure_buzzer_modules();
    22f2:	4b03      	ldr	r3, [pc, #12]	; (2300 <configure_buzzer+0x14>)
    22f4:	4798      	blx	r3
	enable_speaker();	
    22f6:	4b03      	ldr	r3, [pc, #12]	; (2304 <configure_buzzer+0x18>)
    22f8:	4798      	blx	r3
    22fa:	bd10      	pop	{r4, pc}
    22fc:	00001c91 	.word	0x00001c91
    2300:	000022c1 	.word	0x000022c1
    2304:	0000216d 	.word	0x0000216d

00002308 <ui_init>:

void ui_init(void)
{
	/* Initialize LEDs */
	//LED_On(LED_0_PIN);
}
    2308:	4770      	bx	lr

0000230a <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
    230a:	4770      	bx	lr

0000230c <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{

}
    230c:	4770      	bx	lr

0000230e <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{

}
    230e:	4770      	bx	lr

00002310 <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
    2310:	4770      	bx	lr

00002312 <ui_process>:
	if (b_btn_state != btn0_last_state) {
		ui_hid_report[0] = b_btn_state;
		udi_hid_generic_send_report_in(ui_hid_report);
		btn0_last_state = b_btn_state;
	}*/
}
    2312:	4770      	bx	lr

00002314 <ui_handle_report>:

void ui_handle_report(uint8_t *report)
{
    2314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2316:	0004      	movs	r4, r0
	
	uint8_t temp_batt_level	= 0;
	uint8_t temp_batt_status = 0;
	
	int i;
	count++;
    2318:	4bad      	ldr	r3, [pc, #692]	; (25d0 <ui_handle_report+0x2bc>)
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	3301      	adds	r3, #1
	if(count > 255)
    231e:	2bff      	cmp	r3, #255	; 0xff
    2320:	dc0b      	bgt.n	233a <ui_handle_report+0x26>
	count++;
    2322:	4aab      	ldr	r2, [pc, #684]	; (25d0 <ui_handle_report+0x2bc>)
    2324:	6013      	str	r3, [r2, #0]
		count = 0;
		

	// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
	switch(report[0]) {
    2326:	7823      	ldrb	r3, [r4, #0]
    2328:	3b41      	subs	r3, #65	; 0x41
    232a:	b2da      	uxtb	r2, r3
    232c:	2a39      	cmp	r2, #57	; 0x39
    232e:	d900      	bls.n	2332 <ui_handle_report+0x1e>
    2330:	e0d6      	b.n	24e0 <ui_handle_report+0x1cc>
    2332:	0093      	lsls	r3, r2, #2
    2334:	4aa7      	ldr	r2, [pc, #668]	; (25d4 <ui_handle_report+0x2c0>)
    2336:	58d3      	ldr	r3, [r2, r3]
    2338:	469f      	mov	pc, r3
		count = 0;
    233a:	2200      	movs	r2, #0
    233c:	4ba4      	ldr	r3, [pc, #656]	; (25d0 <ui_handle_report+0x2bc>)
    233e:	601a      	str	r2, [r3, #0]
    2340:	e7f1      	b.n	2326 <ui_handle_report+0x12>
		
		//Get all the sensors values except for accelerometer
		case 'v':
			
			//Transmit LDR values
			ui_hid_report[0] = adc_start_read_result(LEFT_LIGHT);
    2342:	200b      	movs	r0, #11
    2344:	4ea4      	ldr	r6, [pc, #656]	; (25d8 <ui_handle_report+0x2c4>)
    2346:	47b0      	blx	r6
    2348:	4da4      	ldr	r5, [pc, #656]	; (25dc <ui_handle_report+0x2c8>)
    234a:	7028      	strb	r0, [r5, #0]
			ui_hid_report[1] = adc_start_read_result(RIGHT_LIGHT);
    234c:	2003      	movs	r0, #3
    234e:	47b0      	blx	r6
    2350:	7068      	strb	r0, [r5, #1]
				
			//Line Follower
			ui_hid_report[2] = adc_start_read_result(LINE_FOLLOWER);
    2352:	2002      	movs	r0, #2
    2354:	47b0      	blx	r6
    2356:	70a8      	strb	r0, [r5, #2]
				
			//Ultrasound
			echo_distance = get_ultrasound_distance();
    2358:	4ba1      	ldr	r3, [pc, #644]	; (25e0 <ui_handle_report+0x2cc>)
    235a:	4798      	blx	r3
			ui_hid_report[3] = *echo_distance++;
    235c:	7803      	ldrb	r3, [r0, #0]
    235e:	70eb      	strb	r3, [r5, #3]
			ui_hid_report[4] = *echo_distance;
    2360:	7843      	ldrb	r3, [r0, #1]
    2362:	712b      	strb	r3, [r5, #4]
			
			temp_batt_level = adc_start_read_result(BATT_MTR);
    2364:	200a      	movs	r0, #10
    2366:	47b0      	blx	r6
	return (port_base->OUT.reg & pin_mask);
    2368:	4b9e      	ldr	r3, [pc, #632]	; (25e4 <ui_handle_report+0x2d0>)
    236a:	691b      	ldr	r3, [r3, #16]
    236c:	031b      	lsls	r3, r3, #12
			temp_batt_level = temp_batt_level >> 1;
			temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    236e:	0fdb      	lsrs	r3, r3, #31
			temp_batt_level = temp_batt_level >> 1;
    2370:	0840      	lsrs	r0, r0, #1
			temp_batt_status = temp_batt_status << 7;
    2372:	01db      	lsls	r3, r3, #7
			ui_hid_report[5] = temp_batt_status | temp_batt_level;
    2374:	4303      	orrs	r3, r0
    2376:	716b      	strb	r3, [r5, #5]
				
			break;
    2378:	e0b2      	b.n	24e0 <ui_handle_report+0x1cc>
			
			*/
			//Test LED
		case 'O':	
			
			set_led_left_new(report[1], report[2], report[3]);
    237a:	78e2      	ldrb	r2, [r4, #3]
    237c:	78a1      	ldrb	r1, [r4, #2]
    237e:	7860      	ldrb	r0, [r4, #1]
    2380:	4b99      	ldr	r3, [pc, #612]	; (25e8 <ui_handle_report+0x2d4>)
    2382:	4798      	blx	r3
			set_led_right_new(report[1], report[2], report[3]);
    2384:	78e2      	ldrb	r2, [r4, #3]
    2386:	78a1      	ldrb	r1, [r4, #2]
    2388:	7860      	ldrb	r0, [r4, #1]
    238a:	4b98      	ldr	r3, [pc, #608]	; (25ec <ui_handle_report+0x2d8>)
    238c:	4798      	blx	r3
				
			break;
    238e:	e0a7      	b.n	24e0 <ui_handle_report+0x1cc>
				
		//Set all the actuators except speakers
		// If 'M', use bytes 1-4 to set motor speed and direction
		case 'M':
		
			if(report[2] == 0 && report[4] == 0)
    2390:	78a3      	ldrb	r3, [r4, #2]
    2392:	2b00      	cmp	r3, #0
    2394:	d102      	bne.n	239c <ui_handle_report+0x88>
    2396:	7923      	ldrb	r3, [r4, #4]
    2398:	2b00      	cmp	r3, #0
    239a:	d008      	beq.n	23ae <ui_handle_report+0x9a>
			{
				turn_off_motors();
			}
			set_motor_left(report[1], report[2]); // directions and speed are inputs
    239c:	78a1      	ldrb	r1, [r4, #2]
    239e:	7860      	ldrb	r0, [r4, #1]
    23a0:	4b93      	ldr	r3, [pc, #588]	; (25f0 <ui_handle_report+0x2dc>)
    23a2:	4798      	blx	r3
			set_motor_right(report[3], report[4]);
    23a4:	7921      	ldrb	r1, [r4, #4]
    23a6:	78e0      	ldrb	r0, [r4, #3]
    23a8:	4b92      	ldr	r3, [pc, #584]	; (25f4 <ui_handle_report+0x2e0>)
    23aa:	4798      	blx	r3
		
			break;
    23ac:	e098      	b.n	24e0 <ui_handle_report+0x1cc>
				turn_off_motors();
    23ae:	4b92      	ldr	r3, [pc, #584]	; (25f8 <ui_handle_report+0x2e4>)
    23b0:	4798      	blx	r3
    23b2:	e7f3      	b.n	239c <ui_handle_report+0x88>
			
		// Creates an outgoing report with the accelerometer data
		case 'A':
		
			get_accel_data();
    23b4:	4b91      	ldr	r3, [pc, #580]	; (25fc <ui_handle_report+0x2e8>)
    23b6:	4798      	blx	r3
			// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23b8:	4a91      	ldr	r2, [pc, #580]	; (2600 <ui_handle_report+0x2ec>)
    23ba:	7853      	ldrb	r3, [r2, #1]
    23bc:	7811      	ldrb	r1, [r2, #0]
    23be:	430b      	orrs	r3, r1
    23c0:	7891      	ldrb	r1, [r2, #2]
    23c2:	430b      	orrs	r3, r1
    23c4:	78d2      	ldrb	r2, [r2, #3]
    23c6:	4313      	orrs	r3, r2
    23c8:	065b      	lsls	r3, r3, #25
    23ca:	d50c      	bpl.n	23e6 <ui_handle_report+0xd2>
				get_accel_data();
    23cc:	4f8b      	ldr	r7, [pc, #556]	; (25fc <ui_handle_report+0x2e8>)
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23ce:	4d8c      	ldr	r5, [pc, #560]	; (2600 <ui_handle_report+0x2ec>)
    23d0:	2640      	movs	r6, #64	; 0x40
				get_accel_data();
    23d2:	47b8      	blx	r7
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23d4:	782b      	ldrb	r3, [r5, #0]
    23d6:	786a      	ldrb	r2, [r5, #1]
    23d8:	4313      	orrs	r3, r2
    23da:	78aa      	ldrb	r2, [r5, #2]
    23dc:	4313      	orrs	r3, r2
    23de:	78ea      	ldrb	r2, [r5, #3]
    23e0:	4313      	orrs	r3, r2
    23e2:	421e      	tst	r6, r3
    23e4:	d1f5      	bne.n	23d2 <ui_handle_report+0xbe>
			}
			ui_hid_report[0] = 153; // legacy reasons
    23e6:	4b7d      	ldr	r3, [pc, #500]	; (25dc <ui_handle_report+0x2c8>)
    23e8:	2299      	movs	r2, #153	; 0x99
    23ea:	701a      	strb	r2, [r3, #0]
			for(i = 1; i < 5; i++) {
				ui_hid_report[i] = bufferReceive[i-1];
    23ec:	4a84      	ldr	r2, [pc, #528]	; (2600 <ui_handle_report+0x2ec>)
    23ee:	7811      	ldrb	r1, [r2, #0]
    23f0:	7059      	strb	r1, [r3, #1]
    23f2:	7851      	ldrb	r1, [r2, #1]
    23f4:	7099      	strb	r1, [r3, #2]
    23f6:	7891      	ldrb	r1, [r2, #2]
    23f8:	70d9      	strb	r1, [r3, #3]
    23fa:	78d2      	ldrb	r2, [r2, #3]
    23fc:	711a      	strb	r2, [r3, #4]
    23fe:	e06f      	b.n	24e0 <ui_handle_report+0x1cc>

		
		// If 'L', create an outgoing report with the light sensor values
		case 'L':
		
			ui_hid_report[0] = adc_start_read_result(LEFT_LIGHT);
    2400:	200b      	movs	r0, #11
    2402:	4e75      	ldr	r6, [pc, #468]	; (25d8 <ui_handle_report+0x2c4>)
    2404:	47b0      	blx	r6
    2406:	4d75      	ldr	r5, [pc, #468]	; (25dc <ui_handle_report+0x2c8>)
    2408:	7028      	strb	r0, [r5, #0]
			ui_hid_report[1] = adc_start_read_result(RIGHT_LIGHT);
    240a:	2003      	movs	r0, #3
    240c:	47b0      	blx	r6
    240e:	7068      	strb	r0, [r5, #1]
			break;
    2410:	e066      	b.n	24e0 <ui_handle_report+0x1cc>
	
		
		// Use bytes 1-4 to set buzzer frequency and duration
		case 'B':

			buzz_type =  report[1];
    2412:	7862      	ldrb	r2, [r4, #1]
    2414:	4b7b      	ldr	r3, [pc, #492]	; (2604 <ui_handle_report+0x2f0>)
    2416:	701a      	strb	r2, [r3, #0]
			buzz_frequency =  (report[2]<<8) + report[3];
    2418:	78a2      	ldrb	r2, [r4, #2]
    241a:	0212      	lsls	r2, r2, #8
    241c:	78e3      	ldrb	r3, [r4, #3]
    241e:	189b      	adds	r3, r3, r2
    2420:	b29b      	uxth	r3, r3
    2422:	4a79      	ldr	r2, [pc, #484]	; (2608 <ui_handle_report+0x2f4>)
    2424:	8013      	strh	r3, [r2, #0]
			buzz_volume    =  report[4];
    2426:	7922      	ldrb	r2, [r4, #4]
    2428:	4b78      	ldr	r3, [pc, #480]	; (260c <ui_handle_report+0x2f8>)
    242a:	801a      	strh	r2, [r3, #0]
			speaker_update();
    242c:	4b78      	ldr	r3, [pc, #480]	; (2610 <ui_handle_report+0x2fc>)
    242e:	4798      	blx	r3
			break;
    2430:	e056      	b.n	24e0 <ui_handle_report+0x1cc>
		
		//Line Follower
		case 'F':
			ui_hid_report[0] = adc_start_read_result(LINE_FOLLOWER);
    2432:	2002      	movs	r0, #2
    2434:	4b68      	ldr	r3, [pc, #416]	; (25d8 <ui_handle_report+0x2c4>)
    2436:	4798      	blx	r3
    2438:	4b68      	ldr	r3, [pc, #416]	; (25dc <ui_handle_report+0x2c8>)
    243a:	7018      	strb	r0, [r3, #0]
			break;
    243c:	e050      	b.n	24e0 <ui_handle_report+0x1cc>
		
		//Ultrasound sensor --ascii value 55
		case 'U':
		
			echo_distance = get_ultrasound_distance();
    243e:	4b68      	ldr	r3, [pc, #416]	; (25e0 <ui_handle_report+0x2cc>)
    2440:	4798      	blx	r3
			echo_current[0]	= *echo_distance++;
    2442:	7803      	ldrb	r3, [r0, #0]
    2444:	b2db      	uxtb	r3, r3
    2446:	4a73      	ldr	r2, [pc, #460]	; (2614 <ui_handle_report+0x300>)
    2448:	7013      	strb	r3, [r2, #0]
			echo_current[1]	= *echo_distance;
    244a:	7843      	ldrb	r3, [r0, #1]
    244c:	b2db      	uxtb	r3, r3
    244e:	7053      	strb	r3, [r2, #1]
			if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    2450:	4b71      	ldr	r3, [pc, #452]	; (2618 <ui_handle_report+0x304>)
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	2b00      	cmp	r3, #0
    2456:	d103      	bne.n	2460 <ui_handle_report+0x14c>
    2458:	7853      	ldrb	r3, [r2, #1]
    245a:	b2db      	uxtb	r3, r3
    245c:	2b75      	cmp	r3, #117	; 0x75
    245e:	d90d      	bls.n	247c <ui_handle_report+0x168>
			{
				
				ui_hid_report[1] = echo_prev[0];
    2460:	4a6e      	ldr	r2, [pc, #440]	; (261c <ui_handle_report+0x308>)
    2462:	7811      	ldrb	r1, [r2, #0]
    2464:	4b5d      	ldr	r3, [pc, #372]	; (25dc <ui_handle_report+0x2c8>)
    2466:	7059      	strb	r1, [r3, #1]
				ui_hid_report[0] = echo_prev[1];
    2468:	7852      	ldrb	r2, [r2, #1]
    246a:	701a      	strb	r2, [r3, #0]
				ui_hid_report[1] = echo_current[1];
				echo_prev[0]	  = echo_current[0];
				echo_prev[1]	  = echo_current[1];
				
			}
			echo_distance = get_ultrasound_distance();
    246c:	4b5c      	ldr	r3, [pc, #368]	; (25e0 <ui_handle_report+0x2cc>)
    246e:	4798      	blx	r3
			ui_hid_report[0] = *echo_distance++;
    2470:	7802      	ldrb	r2, [r0, #0]
    2472:	4b5a      	ldr	r3, [pc, #360]	; (25dc <ui_handle_report+0x2c8>)
    2474:	701a      	strb	r2, [r3, #0]
			ui_hid_report[1] = *echo_distance;
    2476:	7842      	ldrb	r2, [r0, #1]
    2478:	705a      	strb	r2, [r3, #1]
			break;
    247a:	e031      	b.n	24e0 <ui_handle_report+0x1cc>
				ui_hid_report[0] = echo_current[0];
    247c:	4b65      	ldr	r3, [pc, #404]	; (2614 <ui_handle_report+0x300>)
    247e:	7819      	ldrb	r1, [r3, #0]
    2480:	4a56      	ldr	r2, [pc, #344]	; (25dc <ui_handle_report+0x2c8>)
    2482:	7011      	strb	r1, [r2, #0]
				ui_hid_report[1] = echo_current[1];
    2484:	7859      	ldrb	r1, [r3, #1]
    2486:	7051      	strb	r1, [r2, #1]
				echo_prev[0]	  = echo_current[0];
    2488:	781a      	ldrb	r2, [r3, #0]
    248a:	b2d2      	uxtb	r2, r2
    248c:	4963      	ldr	r1, [pc, #396]	; (261c <ui_handle_report+0x308>)
    248e:	700a      	strb	r2, [r1, #0]
				echo_prev[1]	  = echo_current[1];
    2490:	785b      	ldrb	r3, [r3, #1]
    2492:	b2db      	uxtb	r3, r3
    2494:	704b      	strb	r3, [r1, #1]
    2496:	e7e9      	b.n	246c <ui_handle_report+0x158>
		
		//Fast way to turn everything off
		//Yet to be done
		case 'E':
		
			temp_batt_level = adc_start_read_result(BATT_MTR);
    2498:	200a      	movs	r0, #10
    249a:	4b4f      	ldr	r3, [pc, #316]	; (25d8 <ui_handle_report+0x2c4>)
    249c:	4798      	blx	r3
    249e:	4b51      	ldr	r3, [pc, #324]	; (25e4 <ui_handle_report+0x2d0>)
    24a0:	691b      	ldr	r3, [r3, #16]
    24a2:	031b      	lsls	r3, r3, #12
			temp_batt_level = temp_batt_level >> 1;
			temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    24a4:	0fdb      	lsrs	r3, r3, #31
			temp_batt_level = temp_batt_level >> 1;
    24a6:	0840      	lsrs	r0, r0, #1
			temp_batt_status = temp_batt_status << 7;
    24a8:	01db      	lsls	r3, r3, #7
			ui_hid_report[0] = temp_batt_status | temp_batt_level;
    24aa:	4303      	orrs	r3, r0
    24ac:	4a4b      	ldr	r2, [pc, #300]	; (25dc <ui_handle_report+0x2c8>)
    24ae:	7013      	strb	r3, [r2, #0]
			break;
    24b0:	e016      	b.n	24e0 <ui_handle_report+0x1cc>

		case 's' :
			switch(report[1])
    24b2:	7863      	ldrb	r3, [r4, #1]
    24b4:	3b31      	subs	r3, #49	; 0x31
    24b6:	b2da      	uxtb	r2, r3
    24b8:	2a05      	cmp	r2, #5
    24ba:	d80b      	bhi.n	24d4 <ui_handle_report+0x1c0>
    24bc:	0093      	lsls	r3, r2, #2
    24be:	4a58      	ldr	r2, [pc, #352]	; (2620 <ui_handle_report+0x30c>)
    24c0:	58d3      	ldr	r3, [r2, r3]
    24c2:	469f      	mov	pc, r3
			{
				case '1':
					
					ui_hid_report[0] = adc_start_read_result(LEFT_LIGHT);
    24c4:	200b      	movs	r0, #11
    24c6:	4e44      	ldr	r6, [pc, #272]	; (25d8 <ui_handle_report+0x2c4>)
    24c8:	47b0      	blx	r6
    24ca:	4d44      	ldr	r5, [pc, #272]	; (25dc <ui_handle_report+0x2c8>)
    24cc:	7028      	strb	r0, [r5, #0]
					ui_hid_report[1] = adc_start_read_result(RIGHT_LIGHT);
    24ce:	2003      	movs	r0, #3
    24d0:	47b0      	blx	r6
    24d2:	7068      	strb	r0, [r5, #1]
			turn_off_motors();
			turn_off_buzz();
			initial_orb = 0;
			set_orb0(0,0,0);
			exit_count = 0;*/
			turn_off_motors();
    24d4:	4b48      	ldr	r3, [pc, #288]	; (25f8 <ui_handle_report+0x2e4>)
    24d6:	4798      	blx	r3
			turn_off_speaker();
    24d8:	4b52      	ldr	r3, [pc, #328]	; (2624 <ui_handle_report+0x310>)
    24da:	4798      	blx	r3
			switch_off_LEDS();
    24dc:	4b52      	ldr	r3, [pc, #328]	; (2628 <ui_handle_report+0x314>)
    24de:	4798      	blx	r3
			
		default:
			break;
	}
	
	report[0] = 0x00;
    24e0:	2300      	movs	r3, #0
    24e2:	7023      	strb	r3, [r4, #0]
	// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
	ui_hid_report[7]= report[7];
    24e4:	79e3      	ldrb	r3, [r4, #7]
    24e6:	483d      	ldr	r0, [pc, #244]	; (25dc <ui_handle_report+0x2c8>)
    24e8:	71c3      	strb	r3, [r0, #7]
	udi_hid_generic_send_report_in(ui_hid_report);
    24ea:	4b50      	ldr	r3, [pc, #320]	; (262c <ui_handle_report+0x318>)
    24ec:	4798      	blx	r3
}
    24ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					get_accel_data();
    24f0:	4b42      	ldr	r3, [pc, #264]	; (25fc <ui_handle_report+0x2e8>)
    24f2:	4798      	blx	r3
					while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    24f4:	4a42      	ldr	r2, [pc, #264]	; (2600 <ui_handle_report+0x2ec>)
    24f6:	7813      	ldrb	r3, [r2, #0]
    24f8:	7851      	ldrb	r1, [r2, #1]
    24fa:	430b      	orrs	r3, r1
    24fc:	7891      	ldrb	r1, [r2, #2]
    24fe:	430b      	orrs	r3, r1
    2500:	78d2      	ldrb	r2, [r2, #3]
    2502:	4313      	orrs	r3, r2
    2504:	065b      	lsls	r3, r3, #25
    2506:	d50c      	bpl.n	2522 <ui_handle_report+0x20e>
						get_accel_data();
    2508:	4f3c      	ldr	r7, [pc, #240]	; (25fc <ui_handle_report+0x2e8>)
					while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    250a:	4d3d      	ldr	r5, [pc, #244]	; (2600 <ui_handle_report+0x2ec>)
    250c:	2640      	movs	r6, #64	; 0x40
						get_accel_data();
    250e:	47b8      	blx	r7
					while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    2510:	782b      	ldrb	r3, [r5, #0]
    2512:	786a      	ldrb	r2, [r5, #1]
    2514:	4313      	orrs	r3, r2
    2516:	78aa      	ldrb	r2, [r5, #2]
    2518:	4313      	orrs	r3, r2
    251a:	78ea      	ldrb	r2, [r5, #3]
    251c:	4313      	orrs	r3, r2
    251e:	421e      	tst	r6, r3
    2520:	d1f5      	bne.n	250e <ui_handle_report+0x1fa>
					ui_hid_report[0] = 153; // legacy reasons
    2522:	4b2e      	ldr	r3, [pc, #184]	; (25dc <ui_handle_report+0x2c8>)
    2524:	2299      	movs	r2, #153	; 0x99
    2526:	701a      	strb	r2, [r3, #0]
						ui_hid_report[i] = bufferReceive[i-1];
    2528:	4a35      	ldr	r2, [pc, #212]	; (2600 <ui_handle_report+0x2ec>)
    252a:	7811      	ldrb	r1, [r2, #0]
    252c:	7059      	strb	r1, [r3, #1]
    252e:	7851      	ldrb	r1, [r2, #1]
    2530:	7099      	strb	r1, [r3, #2]
    2532:	7891      	ldrb	r1, [r2, #2]
    2534:	70d9      	strb	r1, [r3, #3]
    2536:	78d2      	ldrb	r2, [r2, #3]
    2538:	711a      	strb	r2, [r3, #4]
    253a:	e7cb      	b.n	24d4 <ui_handle_report+0x1c0>
					ui_hid_report[0] = adc_start_read_result(LINE_FOLLOWER);
    253c:	2002      	movs	r0, #2
    253e:	4b26      	ldr	r3, [pc, #152]	; (25d8 <ui_handle_report+0x2c4>)
    2540:	4798      	blx	r3
    2542:	4b26      	ldr	r3, [pc, #152]	; (25dc <ui_handle_report+0x2c8>)
    2544:	7018      	strb	r0, [r3, #0]
					break;
    2546:	e7c5      	b.n	24d4 <ui_handle_report+0x1c0>
					echo_distance = get_ultrasound_distance();
    2548:	4b25      	ldr	r3, [pc, #148]	; (25e0 <ui_handle_report+0x2cc>)
    254a:	4798      	blx	r3
					echo_current[0]	= *echo_distance++;
    254c:	7803      	ldrb	r3, [r0, #0]
    254e:	b2db      	uxtb	r3, r3
    2550:	4a30      	ldr	r2, [pc, #192]	; (2614 <ui_handle_report+0x300>)
    2552:	7013      	strb	r3, [r2, #0]
					echo_current[1]	= *echo_distance;
    2554:	7843      	ldrb	r3, [r0, #1]
    2556:	b2db      	uxtb	r3, r3
    2558:	7053      	strb	r3, [r2, #1]
					if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    255a:	4b2f      	ldr	r3, [pc, #188]	; (2618 <ui_handle_report+0x304>)
    255c:	781b      	ldrb	r3, [r3, #0]
    255e:	2b00      	cmp	r3, #0
    2560:	d103      	bne.n	256a <ui_handle_report+0x256>
    2562:	7853      	ldrb	r3, [r2, #1]
    2564:	b2db      	uxtb	r3, r3
    2566:	2b75      	cmp	r3, #117	; 0x75
    2568:	d90d      	bls.n	2586 <ui_handle_report+0x272>
						ui_hid_report[1] = echo_prev[0];
    256a:	4a2c      	ldr	r2, [pc, #176]	; (261c <ui_handle_report+0x308>)
    256c:	7811      	ldrb	r1, [r2, #0]
    256e:	4b1b      	ldr	r3, [pc, #108]	; (25dc <ui_handle_report+0x2c8>)
    2570:	7059      	strb	r1, [r3, #1]
						ui_hid_report[0] = echo_prev[1];
    2572:	7852      	ldrb	r2, [r2, #1]
    2574:	701a      	strb	r2, [r3, #0]
					echo_distance = get_ultrasound_distance();
    2576:	4b1a      	ldr	r3, [pc, #104]	; (25e0 <ui_handle_report+0x2cc>)
    2578:	4798      	blx	r3
					ui_hid_report[0] = *echo_distance++;
    257a:	7802      	ldrb	r2, [r0, #0]
    257c:	4b17      	ldr	r3, [pc, #92]	; (25dc <ui_handle_report+0x2c8>)
    257e:	701a      	strb	r2, [r3, #0]
					ui_hid_report[1] = *echo_distance;
    2580:	7842      	ldrb	r2, [r0, #1]
    2582:	705a      	strb	r2, [r3, #1]
					break;
    2584:	e7a6      	b.n	24d4 <ui_handle_report+0x1c0>
						ui_hid_report[0] = echo_current[0];
    2586:	4b23      	ldr	r3, [pc, #140]	; (2614 <ui_handle_report+0x300>)
    2588:	7819      	ldrb	r1, [r3, #0]
    258a:	4a14      	ldr	r2, [pc, #80]	; (25dc <ui_handle_report+0x2c8>)
    258c:	7011      	strb	r1, [r2, #0]
						ui_hid_report[1] = echo_current[1];
    258e:	7859      	ldrb	r1, [r3, #1]
    2590:	7051      	strb	r1, [r2, #1]
						echo_prev[0]	  = echo_current[0];
    2592:	781a      	ldrb	r2, [r3, #0]
    2594:	b2d2      	uxtb	r2, r2
    2596:	4921      	ldr	r1, [pc, #132]	; (261c <ui_handle_report+0x308>)
    2598:	700a      	strb	r2, [r1, #0]
						echo_prev[1]	  = echo_current[1];
    259a:	785b      	ldrb	r3, [r3, #1]
    259c:	b2db      	uxtb	r3, r3
    259e:	704b      	strb	r3, [r1, #1]
    25a0:	e7e9      	b.n	2576 <ui_handle_report+0x262>
					ui_hid_report[0] = FW_VERSION_MSB;
    25a2:	4b0e      	ldr	r3, [pc, #56]	; (25dc <ui_handle_report+0x2c8>)
    25a4:	2100      	movs	r1, #0
    25a6:	7019      	strb	r1, [r3, #0]
					ui_hid_report[1] = FW_VERSION_LSB;
    25a8:	2201      	movs	r2, #1
    25aa:	705a      	strb	r2, [r3, #1]
					ui_hid_report[2] = HW_VERSION_MSB;
    25ac:	7099      	strb	r1, [r3, #2]
					ui_hid_report[3] = HW_VERSION_LSB;
    25ae:	70da      	strb	r2, [r3, #3]
					break;
    25b0:	e790      	b.n	24d4 <ui_handle_report+0x1c0>
			ui_hid_report[0] = count;
    25b2:	4b07      	ldr	r3, [pc, #28]	; (25d0 <ui_handle_report+0x2bc>)
    25b4:	681b      	ldr	r3, [r3, #0]
    25b6:	4a09      	ldr	r2, [pc, #36]	; (25dc <ui_handle_report+0x2c8>)
    25b8:	7013      	strb	r3, [r2, #0]
			count++;
    25ba:	3301      	adds	r3, #1
			if(count > 255) {
    25bc:	2bff      	cmp	r3, #255	; 0xff
    25be:	dd03      	ble.n	25c8 <ui_handle_report+0x2b4>
				count = 0;
    25c0:	2200      	movs	r2, #0
    25c2:	4b03      	ldr	r3, [pc, #12]	; (25d0 <ui_handle_report+0x2bc>)
    25c4:	601a      	str	r2, [r3, #0]
    25c6:	e78b      	b.n	24e0 <ui_handle_report+0x1cc>
			count++;
    25c8:	4a01      	ldr	r2, [pc, #4]	; (25d0 <ui_handle_report+0x2bc>)
    25ca:	6013      	str	r3, [r2, #0]
    25cc:	e788      	b.n	24e0 <ui_handle_report+0x1cc>
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	200002c0 	.word	0x200002c0
    25d4:	0000a5f8 	.word	0x0000a5f8
    25d8:	00006e1d 	.word	0x00006e1d
    25dc:	200002cc 	.word	0x200002cc
    25e0:	00001741 	.word	0x00001741
    25e4:	41004400 	.word	0x41004400
    25e8:	00001145 	.word	0x00001145
    25ec:	00001159 	.word	0x00001159
    25f0:	00001ac1 	.word	0x00001ac1
    25f4:	00001b65 	.word	0x00001b65
    25f8:	00001c09 	.word	0x00001c09
    25fc:	00001971 	.word	0x00001971
    2600:	200005b8 	.word	0x200005b8
    2604:	200003c4 	.word	0x200003c4
    2608:	200003c2 	.word	0x200003c2
    260c:	200003c6 	.word	0x200003c6
    2610:	000021c5 	.word	0x000021c5
    2614:	200002c4 	.word	0x200002c4
    2618:	200003e9 	.word	0x200003e9
    261c:	200002c8 	.word	0x200002c8
    2620:	0000a6e0 	.word	0x0000a6e0
    2624:	00002269 	.word	0x00002269
    2628:	000013e5 	.word	0x000013e5
    262c:	0000274d 	.word	0x0000274d

00002630 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    2630:	2000      	movs	r0, #0
    2632:	4770      	bx	lr

00002634 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    2634:	4b0b      	ldr	r3, [pc, #44]	; (2664 <udi_hid_generic_setreport+0x30>)
    2636:	885b      	ldrh	r3, [r3, #2]
    2638:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
    263a:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    263c:	2a03      	cmp	r2, #3
    263e:	d000      	beq.n	2642 <udi_hid_generic_setreport+0xe>
}
    2640:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2642:	32fc      	adds	r2, #252	; 0xfc
    2644:	421a      	tst	r2, r3
    2646:	d1fb      	bne.n	2640 <udi_hid_generic_setreport+0xc>
					udd_g_ctrlreq.req.wLength)) {
    2648:	4b06      	ldr	r3, [pc, #24]	; (2664 <udi_hid_generic_setreport+0x30>)
			&& (sizeof(udi_hid_generic_report_feature) ==
    264a:	88db      	ldrh	r3, [r3, #6]
    264c:	2b04      	cmp	r3, #4
    264e:	d1f7      	bne.n	2640 <udi_hid_generic_setreport+0xc>
		udd_g_ctrlreq.payload =
    2650:	4b04      	ldr	r3, [pc, #16]	; (2664 <udi_hid_generic_setreport+0x30>)
    2652:	4a05      	ldr	r2, [pc, #20]	; (2668 <udi_hid_generic_setreport+0x34>)
    2654:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    2656:	4a05      	ldr	r2, [pc, #20]	; (266c <udi_hid_generic_setreport+0x38>)
    2658:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
    265a:	2204      	movs	r2, #4
    265c:	819a      	strh	r2, [r3, #12]
		return true;
    265e:	3001      	adds	r0, #1
    2660:	e7ee      	b.n	2640 <udi_hid_generic_setreport+0xc>
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	200008a0 	.word	0x200008a0
    2668:	200002e0 	.word	0x200002e0
    266c:	0000272d 	.word	0x0000272d

00002670 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    2670:	2201      	movs	r2, #1
    2672:	4b01      	ldr	r3, [pc, #4]	; (2678 <udi_hid_generic_report_in_sent+0x8>)
    2674:	701a      	strb	r2, [r3, #0]
}
    2676:	4770      	bx	lr
    2678:	200002d4 	.word	0x200002d4

0000267c <udi_hid_generic_report_out_enable>:
{
    267c:	b510      	push	{r4, lr}
    267e:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
    2680:	4b04      	ldr	r3, [pc, #16]	; (2694 <udi_hid_generic_report_out_enable+0x18>)
    2682:	9300      	str	r3, [sp, #0]
    2684:	2308      	movs	r3, #8
    2686:	4a04      	ldr	r2, [pc, #16]	; (2698 <udi_hid_generic_report_out_enable+0x1c>)
    2688:	2100      	movs	r1, #0
    268a:	2002      	movs	r0, #2
    268c:	4c03      	ldr	r4, [pc, #12]	; (269c <udi_hid_generic_report_out_enable+0x20>)
    268e:	47a0      	blx	r4
}
    2690:	b002      	add	sp, #8
    2692:	bd10      	pop	{r4, pc}
    2694:	000026d9 	.word	0x000026d9
    2698:	200002ec 	.word	0x200002ec
    269c:	00005b2d 	.word	0x00005b2d

000026a0 <udi_hid_generic_enable>:
{
    26a0:	b510      	push	{r4, lr}
	udi_hid_generic_rate = 0;
    26a2:	2300      	movs	r3, #0
    26a4:	4a07      	ldr	r2, [pc, #28]	; (26c4 <udi_hid_generic_enable+0x24>)
    26a6:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
    26a8:	4a07      	ldr	r2, [pc, #28]	; (26c8 <udi_hid_generic_enable+0x28>)
    26aa:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
    26ac:	2201      	movs	r2, #1
    26ae:	4b07      	ldr	r3, [pc, #28]	; (26cc <udi_hid_generic_enable+0x2c>)
    26b0:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
    26b2:	4b07      	ldr	r3, [pc, #28]	; (26d0 <udi_hid_generic_enable+0x30>)
    26b4:	4798      	blx	r3
    26b6:	2800      	cmp	r0, #0
    26b8:	d100      	bne.n	26bc <udi_hid_generic_enable+0x1c>
}
    26ba:	bd10      	pop	{r4, pc}
	return UDI_HID_GENERIC_ENABLE_EXT();
    26bc:	4b05      	ldr	r3, [pc, #20]	; (26d4 <udi_hid_generic_enable+0x34>)
    26be:	4798      	blx	r3
    26c0:	e7fb      	b.n	26ba <udi_hid_generic_enable+0x1a>
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	200002dc 	.word	0x200002dc
    26c8:	200002d8 	.word	0x200002d8
    26cc:	200002d4 	.word	0x200002d4
    26d0:	0000267d 	.word	0x0000267d
    26d4:	00007851 	.word	0x00007851

000026d8 <udi_hid_generic_report_out_received>:
{
    26d8:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status)
    26da:	2800      	cmp	r0, #0
    26dc:	d103      	bne.n	26e6 <udi_hid_generic_report_out_received+0xe>
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
    26de:	2908      	cmp	r1, #8
    26e0:	d002      	beq.n	26e8 <udi_hid_generic_report_out_received+0x10>
	udi_hid_generic_report_out_enable();
    26e2:	4b03      	ldr	r3, [pc, #12]	; (26f0 <udi_hid_generic_report_out_received+0x18>)
    26e4:	4798      	blx	r3
}
    26e6:	bd10      	pop	{r4, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
    26e8:	4802      	ldr	r0, [pc, #8]	; (26f4 <udi_hid_generic_report_out_received+0x1c>)
    26ea:	4b03      	ldr	r3, [pc, #12]	; (26f8 <udi_hid_generic_report_out_received+0x20>)
    26ec:	4798      	blx	r3
    26ee:	e7f8      	b.n	26e2 <udi_hid_generic_report_out_received+0xa>
    26f0:	0000267d 	.word	0x0000267d
    26f4:	200002ec 	.word	0x200002ec
    26f8:	00002315 	.word	0x00002315

000026fc <udi_hid_generic_disable>:
{
    26fc:	b510      	push	{r4, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
    26fe:	4b01      	ldr	r3, [pc, #4]	; (2704 <udi_hid_generic_disable+0x8>)
    2700:	4798      	blx	r3
}
    2702:	bd10      	pop	{r4, pc}
    2704:	00007861 	.word	0x00007861

00002708 <udi_hid_generic_setup>:
{
    2708:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
    270a:	4b03      	ldr	r3, [pc, #12]	; (2718 <udi_hid_generic_setup+0x10>)
    270c:	4a03      	ldr	r2, [pc, #12]	; (271c <udi_hid_generic_setup+0x14>)
    270e:	4904      	ldr	r1, [pc, #16]	; (2720 <udi_hid_generic_setup+0x18>)
    2710:	4804      	ldr	r0, [pc, #16]	; (2724 <udi_hid_generic_setup+0x1c>)
    2712:	4c05      	ldr	r4, [pc, #20]	; (2728 <udi_hid_generic_setup+0x20>)
    2714:	47a0      	blx	r4
}
    2716:	bd10      	pop	{r4, pc}
    2718:	00002635 	.word	0x00002635
    271c:	2000003c 	.word	0x2000003c
    2720:	200002d8 	.word	0x200002d8
    2724:	200002dc 	.word	0x200002dc
    2728:	000027d5 	.word	0x000027d5

0000272c <udi_hid_generic_setfeature_valid>:
{
    272c:	b510      	push	{r4, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
    272e:	4b04      	ldr	r3, [pc, #16]	; (2740 <udi_hid_generic_setfeature_valid+0x14>)
    2730:	899b      	ldrh	r3, [r3, #12]
    2732:	2b04      	cmp	r3, #4
    2734:	d000      	beq.n	2738 <udi_hid_generic_setfeature_valid+0xc>
}
    2736:	bd10      	pop	{r4, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
    2738:	4802      	ldr	r0, [pc, #8]	; (2744 <udi_hid_generic_setfeature_valid+0x18>)
    273a:	4b03      	ldr	r3, [pc, #12]	; (2748 <udi_hid_generic_setfeature_valid+0x1c>)
    273c:	4798      	blx	r3
    273e:	e7fa      	b.n	2736 <udi_hid_generic_setfeature_valid+0xa>
    2740:	200008a0 	.word	0x200008a0
    2744:	200002e0 	.word	0x200002e0
    2748:	0000786d 	.word	0x0000786d

0000274c <udi_hid_generic_send_report_in>:
{
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	b082      	sub	sp, #8
    2750:	0005      	movs	r5, r0
	if (!udi_hid_generic_b_report_in_free)
    2752:	4b19      	ldr	r3, [pc, #100]	; (27b8 <udi_hid_generic_send_report_in+0x6c>)
    2754:	7818      	ldrb	r0, [r3, #0]
    2756:	2800      	cmp	r0, #0
    2758:	d101      	bne.n	275e <udi_hid_generic_send_report_in+0x12>
}
    275a:	b002      	add	sp, #8
    275c:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    275e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    2762:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2764:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2768:	2200      	movs	r2, #0
    276a:	4b14      	ldr	r3, [pc, #80]	; (27bc <udi_hid_generic_send_report_in+0x70>)
    276c:	701a      	strb	r2, [r3, #0]
	memset(&udi_hid_generic_report_in, 0,
    276e:	4e14      	ldr	r6, [pc, #80]	; (27c0 <udi_hid_generic_send_report_in+0x74>)
    2770:	3208      	adds	r2, #8
    2772:	2100      	movs	r1, #0
    2774:	0030      	movs	r0, r6
    2776:	4b13      	ldr	r3, [pc, #76]	; (27c4 <udi_hid_generic_send_report_in+0x78>)
    2778:	4798      	blx	r3
	memcpy(&udi_hid_generic_report_in, data,
    277a:	2208      	movs	r2, #8
    277c:	0029      	movs	r1, r5
    277e:	0030      	movs	r0, r6
    2780:	4b11      	ldr	r3, [pc, #68]	; (27c8 <udi_hid_generic_send_report_in+0x7c>)
    2782:	4798      	blx	r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    2784:	4b11      	ldr	r3, [pc, #68]	; (27cc <udi_hid_generic_send_report_in+0x80>)
    2786:	9300      	str	r3, [sp, #0]
    2788:	2308      	movs	r3, #8
    278a:	0032      	movs	r2, r6
    278c:	2100      	movs	r1, #0
    278e:	2081      	movs	r0, #129	; 0x81
    2790:	4d0f      	ldr	r5, [pc, #60]	; (27d0 <udi_hid_generic_send_report_in+0x84>)
    2792:	47a8      	blx	r5
							udi_hid_generic_report_in_sent);
    2794:	2301      	movs	r3, #1
    2796:	4058      	eors	r0, r3
	udi_hid_generic_b_report_in_free =
    2798:	4b07      	ldr	r3, [pc, #28]	; (27b8 <udi_hid_generic_send_report_in+0x6c>)
    279a:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    279c:	2c00      	cmp	r4, #0
    279e:	d105      	bne.n	27ac <udi_hid_generic_send_report_in+0x60>
		cpu_irq_enable();
    27a0:	2201      	movs	r2, #1
    27a2:	4b06      	ldr	r3, [pc, #24]	; (27bc <udi_hid_generic_send_report_in+0x70>)
    27a4:	701a      	strb	r2, [r3, #0]
    27a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    27aa:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
    27ac:	4b02      	ldr	r3, [pc, #8]	; (27b8 <udi_hid_generic_send_report_in+0x6c>)
    27ae:	7818      	ldrb	r0, [r3, #0]
    27b0:	2301      	movs	r3, #1
    27b2:	4058      	eors	r0, r3
    27b4:	e7d1      	b.n	275a <udi_hid_generic_send_report_in+0xe>
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	200002d4 	.word	0x200002d4
    27bc:	20000122 	.word	0x20000122
    27c0:	200002e4 	.word	0x200002e4
    27c4:	0000a4ef 	.word	0x0000a4ef
    27c8:	0000a4dd 	.word	0x0000a4dd
    27cc:	00002671 	.word	0x00002671
    27d0:	00005b2d 	.word	0x00005b2d

000027d4 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	0005      	movs	r5, r0
    27d8:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
    27da:	4a3b      	ldr	r2, [pc, #236]	; (28c8 <udi_hid_setup+0xf4>)
    27dc:	7812      	ldrb	r2, [r2, #0]
    27de:	b250      	sxtb	r0, r2
    27e0:	2800      	cmp	r0, #0
    27e2:	db05      	blt.n	27f0 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    27e4:	2460      	movs	r4, #96	; 0x60
    27e6:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    27e8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    27ea:	2a20      	cmp	r2, #32
    27ec:	d04f      	beq.n	288e <udi_hid_setup+0xba>
}
    27ee:	bd70      	pop	{r4, r5, r6, pc}
    27f0:	2060      	movs	r0, #96	; 0x60
    27f2:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    27f4:	d103      	bne.n	27fe <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
    27f6:	4834      	ldr	r0, [pc, #208]	; (28c8 <udi_hid_setup+0xf4>)
    27f8:	7840      	ldrb	r0, [r0, #1]
    27fa:	2806      	cmp	r0, #6
    27fc:	d00d      	beq.n	281a <udi_hid_setup+0x46>
	return false;	// Request not supported
    27fe:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2800:	2a20      	cmp	r2, #32
    2802:	d1f4      	bne.n	27ee <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    2804:	4a30      	ldr	r2, [pc, #192]	; (28c8 <udi_hid_setup+0xf4>)
    2806:	7852      	ldrb	r2, [r2, #1]
    2808:	2a02      	cmp	r2, #2
    280a:	d034      	beq.n	2876 <udi_hid_setup+0xa2>
    280c:	2a03      	cmp	r2, #3
    280e:	d038      	beq.n	2882 <udi_hid_setup+0xae>
	return false;	// Request not supported
    2810:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2812:	2a01      	cmp	r2, #1
    2814:	d1eb      	bne.n	27ee <udi_hid_setup+0x1a>
				return setup_report();
    2816:	4798      	blx	r3
    2818:	e7e9      	b.n	27ee <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    281a:	4b2c      	ldr	r3, [pc, #176]	; (28cc <udi_hid_setup+0xf8>)
    281c:	4798      	blx	r3
    281e:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    2820:	7a82      	ldrb	r2, [r0, #10]
		return false;
    2822:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    2824:	2a21      	cmp	r2, #33	; 0x21
    2826:	d1e2      	bne.n	27ee <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2828:	4a27      	ldr	r2, [pc, #156]	; (28c8 <udi_hid_setup+0xf4>)
    282a:	8852      	ldrh	r2, [r2, #2]
    282c:	0a12      	lsrs	r2, r2, #8
    282e:	2a21      	cmp	r2, #33	; 0x21
    2830:	d013      	beq.n	285a <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    2832:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    2834:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
    2836:	4291      	cmp	r1, r2
    2838:	d1d9      	bne.n	27ee <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
    283a:	4a23      	ldr	r2, [pc, #140]	; (28c8 <udi_hid_setup+0xf4>)
    283c:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    283e:	7c19      	ldrb	r1, [r3, #16]
    2840:	3309      	adds	r3, #9
    2842:	7a1b      	ldrb	r3, [r3, #8]
    2844:	021b      	lsls	r3, r3, #8
    2846:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
    2848:	88d0      	ldrh	r0, [r2, #6]
    284a:	1c19      	adds	r1, r3, #0
    284c:	b29b      	uxth	r3, r3
    284e:	4283      	cmp	r3, r0
    2850:	d900      	bls.n	2854 <udi_hid_setup+0x80>
    2852:	1c01      	adds	r1, r0, #0
    2854:	8191      	strh	r1, [r2, #12]
		return true;
    2856:	2001      	movs	r0, #1
    2858:	e7c9      	b.n	27ee <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    285a:	4a1b      	ldr	r2, [pc, #108]	; (28c8 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    285c:	0019      	movs	r1, r3
    285e:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2860:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    2862:	7a5b      	ldrb	r3, [r3, #9]
    2864:	88d0      	ldrh	r0, [r2, #6]
    2866:	1c19      	adds	r1, r3, #0
    2868:	b29b      	uxth	r3, r3
    286a:	4283      	cmp	r3, r0
    286c:	d900      	bls.n	2870 <udi_hid_setup+0x9c>
    286e:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
    2870:	8191      	strh	r1, [r2, #12]
		return true;
    2872:	2001      	movs	r0, #1
    2874:	e7bb      	b.n	27ee <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
    2876:	4b14      	ldr	r3, [pc, #80]	; (28c8 <udi_hid_setup+0xf4>)
    2878:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    287a:	2201      	movs	r2, #1
    287c:	819a      	strh	r2, [r3, #12]
				return true;
    287e:	2001      	movs	r0, #1
    2880:	e7b5      	b.n	27ee <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
    2882:	4b11      	ldr	r3, [pc, #68]	; (28c8 <udi_hid_setup+0xf4>)
    2884:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2886:	2201      	movs	r2, #1
    2888:	819a      	strh	r2, [r3, #12]
				return true;
    288a:	2001      	movs	r0, #1
    288c:	e7af      	b.n	27ee <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    288e:	4a0e      	ldr	r2, [pc, #56]	; (28c8 <udi_hid_setup+0xf4>)
    2890:	7852      	ldrb	r2, [r2, #1]
    2892:	2a0a      	cmp	r2, #10
    2894:	d006      	beq.n	28a4 <udi_hid_setup+0xd0>
    2896:	2a0b      	cmp	r2, #11
    2898:	d00a      	beq.n	28b0 <udi_hid_setup+0xdc>
	return false;	// Request not supported
    289a:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    289c:	2a09      	cmp	r2, #9
    289e:	d1a6      	bne.n	27ee <udi_hid_setup+0x1a>
				return setup_report();
    28a0:	4798      	blx	r3
    28a2:	e7a4      	b.n	27ee <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    28a4:	4b08      	ldr	r3, [pc, #32]	; (28c8 <udi_hid_setup+0xf4>)
    28a6:	885b      	ldrh	r3, [r3, #2]
    28a8:	0a1b      	lsrs	r3, r3, #8
    28aa:	702b      	strb	r3, [r5, #0]
				return true;
    28ac:	2001      	movs	r0, #1
    28ae:	e79e      	b.n	27ee <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
    28b0:	4b05      	ldr	r3, [pc, #20]	; (28c8 <udi_hid_setup+0xf4>)
    28b2:	88db      	ldrh	r3, [r3, #6]
					return false;
    28b4:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
    28b6:	2b00      	cmp	r3, #0
    28b8:	d000      	beq.n	28bc <udi_hid_setup+0xe8>
    28ba:	e798      	b.n	27ee <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
    28bc:	4b02      	ldr	r3, [pc, #8]	; (28c8 <udi_hid_setup+0xf4>)
    28be:	885b      	ldrh	r3, [r3, #2]
    28c0:	700b      	strb	r3, [r1, #0]
				return true;
    28c2:	3001      	adds	r0, #1
    28c4:	e793      	b.n	27ee <udi_hid_setup+0x1a>
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	200008a0 	.word	0x200008a0
    28cc:	00002a6d 	.word	0x00002a6d

000028d0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    28d0:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    28d2:	4b11      	ldr	r3, [pc, #68]	; (2918 <udc_next_desc_in_iface+0x48>)
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    28d8:	7894      	ldrb	r4, [r2, #2]
    28da:	78d3      	ldrb	r3, [r2, #3]
    28dc:	021b      	lsls	r3, r3, #8
    28de:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    28e0:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    28e2:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    28e4:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    28e6:	4290      	cmp	r0, r2
    28e8:	d210      	bcs.n	290c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    28ea:	7843      	ldrb	r3, [r0, #1]
    28ec:	2b04      	cmp	r3, #4
    28ee:	d00f      	beq.n	2910 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    28f0:	428b      	cmp	r3, r1
    28f2:	d00a      	beq.n	290a <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    28f4:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    28f6:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    28f8:	4290      	cmp	r0, r2
    28fa:	d205      	bcs.n	2908 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    28fc:	7843      	ldrb	r3, [r0, #1]
    28fe:	2b04      	cmp	r3, #4
    2900:	d008      	beq.n	2914 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    2902:	428b      	cmp	r3, r1
    2904:	d1f6      	bne.n	28f4 <udc_next_desc_in_iface+0x24>
    2906:	e000      	b.n	290a <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    2908:	2000      	movs	r0, #0
}
    290a:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    290c:	2000      	movs	r0, #0
    290e:	e7fc      	b.n	290a <udc_next_desc_in_iface+0x3a>
    2910:	2000      	movs	r0, #0
    2912:	e7fa      	b.n	290a <udc_next_desc_in_iface+0x3a>
    2914:	2000      	movs	r0, #0
    2916:	e7f8      	b.n	290a <udc_next_desc_in_iface+0x3a>
    2918:	20000300 	.word	0x20000300

0000291c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    291c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    291e:	4b03      	ldr	r3, [pc, #12]	; (292c <udc_valid_address+0x10>)
    2920:	885b      	ldrh	r3, [r3, #2]
    2922:	207f      	movs	r0, #127	; 0x7f
    2924:	4018      	ands	r0, r3
    2926:	4b02      	ldr	r3, [pc, #8]	; (2930 <udc_valid_address+0x14>)
    2928:	4798      	blx	r3
}
    292a:	bd10      	pop	{r4, pc}
    292c:	200008a0 	.word	0x200008a0
    2930:	00005cfd 	.word	0x00005cfd

00002934 <udc_update_iface_desc>:
{
    2934:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    2936:	4b19      	ldr	r3, [pc, #100]	; (299c <udc_update_iface_desc+0x68>)
    2938:	781b      	ldrb	r3, [r3, #0]
		return false;
    293a:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    293c:	2b00      	cmp	r3, #0
    293e:	d029      	beq.n	2994 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2940:	4b17      	ldr	r3, [pc, #92]	; (29a0 <udc_update_iface_desc+0x6c>)
    2942:	681b      	ldr	r3, [r3, #0]
    2944:	681b      	ldr	r3, [r3, #0]
    2946:	791c      	ldrb	r4, [r3, #4]
    2948:	4284      	cmp	r4, r0
    294a:	d923      	bls.n	2994 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    294c:	4a15      	ldr	r2, [pc, #84]	; (29a4 <udc_update_iface_desc+0x70>)
    294e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    2950:	789a      	ldrb	r2, [r3, #2]
    2952:	78dc      	ldrb	r4, [r3, #3]
    2954:	0224      	lsls	r4, r4, #8
    2956:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    2958:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    295a:	42a3      	cmp	r3, r4
    295c:	d21c      	bcs.n	2998 <udc_update_iface_desc+0x64>
    295e:	2500      	movs	r5, #0
    2960:	2601      	movs	r6, #1
    2962:	e007      	b.n	2974 <udc_update_iface_desc+0x40>
    2964:	4a0f      	ldr	r2, [pc, #60]	; (29a4 <udc_update_iface_desc+0x70>)
    2966:	6013      	str	r3, [r2, #0]
    2968:	e00f      	b.n	298a <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    296a:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    296c:	189b      	adds	r3, r3, r2
    296e:	0035      	movs	r5, r6
	while (ptr_end_desc >
    2970:	42a3      	cmp	r3, r4
    2972:	d20c      	bcs.n	298e <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    2974:	785a      	ldrb	r2, [r3, #1]
    2976:	2a04      	cmp	r2, #4
    2978:	d1f7      	bne.n	296a <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    297a:	789a      	ldrb	r2, [r3, #2]
    297c:	4282      	cmp	r2, r0
    297e:	d1f4      	bne.n	296a <udc_update_iface_desc+0x36>
    2980:	78da      	ldrb	r2, [r3, #3]
    2982:	428a      	cmp	r2, r1
    2984:	d1f1      	bne.n	296a <udc_update_iface_desc+0x36>
    2986:	2d00      	cmp	r5, #0
    2988:	d1ec      	bne.n	2964 <udc_update_iface_desc+0x30>
				return true; // Interface found
    298a:	2201      	movs	r2, #1
    298c:	e002      	b.n	2994 <udc_update_iface_desc+0x60>
    298e:	4a05      	ldr	r2, [pc, #20]	; (29a4 <udc_update_iface_desc+0x70>)
    2990:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    2992:	2200      	movs	r2, #0
}
    2994:	0010      	movs	r0, r2
    2996:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    2998:	2200      	movs	r2, #0
    299a:	e7fb      	b.n	2994 <udc_update_iface_desc+0x60>
    299c:	200002fc 	.word	0x200002fc
    29a0:	20000300 	.word	0x20000300
    29a4:	20000304 	.word	0x20000304

000029a8 <udc_iface_disable>:
{
    29a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29aa:	46c6      	mov	lr, r8
    29ac:	b500      	push	{lr}
    29ae:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    29b0:	2100      	movs	r1, #0
    29b2:	4b13      	ldr	r3, [pc, #76]	; (2a00 <udc_iface_disable+0x58>)
    29b4:	4798      	blx	r3
    29b6:	1e05      	subs	r5, r0, #0
    29b8:	d103      	bne.n	29c2 <udc_iface_disable+0x1a>
}
    29ba:	0028      	movs	r0, r5
    29bc:	bc04      	pop	{r2}
    29be:	4690      	mov	r8, r2
    29c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    29c2:	4b10      	ldr	r3, [pc, #64]	; (2a04 <udc_iface_disable+0x5c>)
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	685b      	ldr	r3, [r3, #4]
    29c8:	00a2      	lsls	r2, r4, #2
    29ca:	58d3      	ldr	r3, [r2, r3]
    29cc:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    29ce:	68db      	ldr	r3, [r3, #12]
    29d0:	4798      	blx	r3
    29d2:	0001      	movs	r1, r0
    29d4:	0020      	movs	r0, r4
    29d6:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <udc_iface_disable+0x58>)
    29d8:	4798      	blx	r3
    29da:	1e05      	subs	r5, r0, #0
    29dc:	d0ed      	beq.n	29ba <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    29de:	4b0a      	ldr	r3, [pc, #40]	; (2a08 <udc_iface_disable+0x60>)
    29e0:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    29e2:	4e0a      	ldr	r6, [pc, #40]	; (2a0c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    29e4:	4f0a      	ldr	r7, [pc, #40]	; (2a10 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    29e6:	2105      	movs	r1, #5
    29e8:	0020      	movs	r0, r4
    29ea:	47b0      	blx	r6
    29ec:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    29ee:	d002      	beq.n	29f6 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    29f0:	7880      	ldrb	r0, [r0, #2]
    29f2:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    29f4:	e7f7      	b.n	29e6 <udc_iface_disable+0x3e>
	udi_api->disable();
    29f6:	4643      	mov	r3, r8
    29f8:	685b      	ldr	r3, [r3, #4]
    29fa:	4798      	blx	r3
	return true;
    29fc:	e7dd      	b.n	29ba <udc_iface_disable+0x12>
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	00002935 	.word	0x00002935
    2a04:	20000300 	.word	0x20000300
    2a08:	20000304 	.word	0x20000304
    2a0c:	000028d1 	.word	0x000028d1
    2a10:	00005845 	.word	0x00005845

00002a14 <udc_iface_enable>:
{
    2a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a16:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    2a18:	4b0f      	ldr	r3, [pc, #60]	; (2a58 <udc_iface_enable+0x44>)
    2a1a:	4798      	blx	r3
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d019      	beq.n	2a54 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    2a20:	4b0e      	ldr	r3, [pc, #56]	; (2a5c <udc_iface_enable+0x48>)
    2a22:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    2a24:	4e0e      	ldr	r6, [pc, #56]	; (2a60 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    2a26:	4f0f      	ldr	r7, [pc, #60]	; (2a64 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    2a28:	2105      	movs	r1, #5
    2a2a:	0020      	movs	r0, r4
    2a2c:	47b0      	blx	r6
    2a2e:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    2a30:	d009      	beq.n	2a46 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    2a32:	7903      	ldrb	r3, [r0, #4]
    2a34:	7942      	ldrb	r2, [r0, #5]
    2a36:	0212      	lsls	r2, r2, #8
    2a38:	431a      	orrs	r2, r3
    2a3a:	78c1      	ldrb	r1, [r0, #3]
    2a3c:	7880      	ldrb	r0, [r0, #2]
    2a3e:	47b8      	blx	r7
    2a40:	2800      	cmp	r0, #0
    2a42:	d1f1      	bne.n	2a28 <udc_iface_enable+0x14>
    2a44:	e006      	b.n	2a54 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    2a46:	4b08      	ldr	r3, [pc, #32]	; (2a68 <udc_iface_enable+0x54>)
    2a48:	681b      	ldr	r3, [r3, #0]
    2a4a:	685b      	ldr	r3, [r3, #4]
    2a4c:	00ad      	lsls	r5, r5, #2
    2a4e:	58eb      	ldr	r3, [r5, r3]
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	4798      	blx	r3
}
    2a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	00002935 	.word	0x00002935
    2a5c:	20000304 	.word	0x20000304
    2a60:	000028d1 	.word	0x000028d1
    2a64:	0000589d 	.word	0x0000589d
    2a68:	20000300 	.word	0x20000300

00002a6c <udc_get_interface_desc>:
	return udc_ptr_iface;
    2a6c:	4b01      	ldr	r3, [pc, #4]	; (2a74 <udc_get_interface_desc+0x8>)
    2a6e:	6818      	ldr	r0, [r3, #0]
}
    2a70:	4770      	bx	lr
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	20000304 	.word	0x20000304

00002a78 <udc_start>:
{
    2a78:	b510      	push	{r4, lr}
	udd_enable();
    2a7a:	4b01      	ldr	r3, [pc, #4]	; (2a80 <udc_start+0x8>)
    2a7c:	4798      	blx	r3
}
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	00005dad 	.word	0x00005dad

00002a84 <udc_reset>:
{
    2a84:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    2a86:	4b12      	ldr	r3, [pc, #72]	; (2ad0 <udc_reset+0x4c>)
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d011      	beq.n	2ab2 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a8e:	4b11      	ldr	r3, [pc, #68]	; (2ad4 <udc_reset+0x50>)
    2a90:	681b      	ldr	r3, [r3, #0]
    2a92:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2a94:	791b      	ldrb	r3, [r3, #4]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d00b      	beq.n	2ab2 <udc_reset+0x2e>
    2a9a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    2a9c:	4e0e      	ldr	r6, [pc, #56]	; (2ad8 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a9e:	4d0d      	ldr	r5, [pc, #52]	; (2ad4 <udc_reset+0x50>)
			udc_iface_disable(iface_num);
    2aa0:	0020      	movs	r0, r4
    2aa2:	47b0      	blx	r6
				iface_num++) {
    2aa4:	3401      	adds	r4, #1
    2aa6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2aa8:	682b      	ldr	r3, [r5, #0]
    2aaa:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2aac:	791b      	ldrb	r3, [r3, #4]
    2aae:	42a3      	cmp	r3, r4
    2ab0:	d8f6      	bhi.n	2aa0 <udc_reset+0x1c>
	udc_num_configuration = 0;
    2ab2:	2200      	movs	r2, #0
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <udc_reset+0x4c>)
    2ab6:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    2ab8:	4b08      	ldr	r3, [pc, #32]	; (2adc <udc_reset+0x58>)
    2aba:	881b      	ldrh	r3, [r3, #0]
    2abc:	079b      	lsls	r3, r3, #30
    2abe:	d403      	bmi.n	2ac8 <udc_reset+0x44>
	udc_device_status =
    2ac0:	2200      	movs	r2, #0
    2ac2:	4b06      	ldr	r3, [pc, #24]	; (2adc <udc_reset+0x58>)
    2ac4:	801a      	strh	r2, [r3, #0]
}
    2ac6:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <udc_reset+0x5c>)
    2aca:	4798      	blx	r3
    2acc:	e7f8      	b.n	2ac0 <udc_reset+0x3c>
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	200002fc 	.word	0x200002fc
    2ad4:	20000300 	.word	0x20000300
    2ad8:	000029a9 	.word	0x000029a9
    2adc:	200002f4 	.word	0x200002f4
    2ae0:	00007845 	.word	0x00007845

00002ae4 <udc_sof_notify>:
{
    2ae4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    2ae6:	4b0e      	ldr	r3, [pc, #56]	; (2b20 <udc_sof_notify+0x3c>)
    2ae8:	781b      	ldrb	r3, [r3, #0]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d017      	beq.n	2b1e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2aee:	4b0d      	ldr	r3, [pc, #52]	; (2b24 <udc_sof_notify+0x40>)
    2af0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2af2:	681a      	ldr	r2, [r3, #0]
    2af4:	7912      	ldrb	r2, [r2, #4]
    2af6:	2a00      	cmp	r2, #0
    2af8:	d011      	beq.n	2b1e <udc_sof_notify+0x3a>
    2afa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2afc:	4d09      	ldr	r5, [pc, #36]	; (2b24 <udc_sof_notify+0x40>)
    2afe:	e006      	b.n	2b0e <udc_sof_notify+0x2a>
				iface_num++) {
    2b00:	3401      	adds	r4, #1
    2b02:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2b04:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    2b06:	681a      	ldr	r2, [r3, #0]
    2b08:	7912      	ldrb	r2, [r2, #4]
    2b0a:	42a2      	cmp	r2, r4
    2b0c:	d907      	bls.n	2b1e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	00a2      	lsls	r2, r4, #2
    2b12:	58d3      	ldr	r3, [r2, r3]
    2b14:	691b      	ldr	r3, [r3, #16]
    2b16:	2b00      	cmp	r3, #0
    2b18:	d0f2      	beq.n	2b00 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    2b1a:	4798      	blx	r3
    2b1c:	e7f0      	b.n	2b00 <udc_sof_notify+0x1c>
}
    2b1e:	bd70      	pop	{r4, r5, r6, pc}
    2b20:	200002fc 	.word	0x200002fc
    2b24:	20000300 	.word	0x20000300

00002b28 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    2b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    2b2a:	4bb6      	ldr	r3, [pc, #728]	; (2e04 <udc_process_setup+0x2dc>)
    2b2c:	2200      	movs	r2, #0
    2b2e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    2b30:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    2b32:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	b25a      	sxtb	r2, r3
    2b38:	2a00      	cmp	r2, #0
    2b3a:	db13      	blt.n	2b64 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2b3c:	2260      	movs	r2, #96	; 0x60
    2b3e:	421a      	tst	r2, r3
    2b40:	d100      	bne.n	2b44 <udc_process_setup+0x1c>
    2b42:	e0d7      	b.n	2cf4 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    2b44:	4baf      	ldr	r3, [pc, #700]	; (2e04 <udc_process_setup+0x2dc>)
    2b46:	781a      	ldrb	r2, [r3, #0]
    2b48:	231f      	movs	r3, #31
    2b4a:	4013      	ands	r3, r2
    2b4c:	2b01      	cmp	r3, #1
    2b4e:	d100      	bne.n	2b52 <udc_process_setup+0x2a>
    2b50:	e18e      	b.n	2e70 <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    2b52:	4bac      	ldr	r3, [pc, #688]	; (2e04 <udc_process_setup+0x2dc>)
    2b54:	781a      	ldrb	r2, [r3, #0]
    2b56:	231f      	movs	r3, #31
    2b58:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2b5a:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    2b5c:	2b02      	cmp	r3, #2
    2b5e:	d100      	bne.n	2b62 <udc_process_setup+0x3a>
    2b60:	e1df      	b.n	2f22 <udc_process_setup+0x3fa>
#endif
}
    2b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    2b64:	4aa7      	ldr	r2, [pc, #668]	; (2e04 <udc_process_setup+0x2dc>)
    2b66:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    2b68:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    2b6a:	2a00      	cmp	r2, #0
    2b6c:	d0f9      	beq.n	2b62 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2b6e:	2160      	movs	r1, #96	; 0x60
    2b70:	4219      	tst	r1, r3
    2b72:	d1e7      	bne.n	2b44 <udc_process_setup+0x1c>
    2b74:	211f      	movs	r1, #31
    2b76:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2b78:	d108      	bne.n	2b8c <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b7a:	49a2      	ldr	r1, [pc, #648]	; (2e04 <udc_process_setup+0x2dc>)
    2b7c:	7849      	ldrb	r1, [r1, #1]
    2b7e:	2906      	cmp	r1, #6
    2b80:	d023      	beq.n	2bca <udc_process_setup+0xa2>
    2b82:	2908      	cmp	r1, #8
    2b84:	d100      	bne.n	2b88 <udc_process_setup+0x60>
    2b86:	e084      	b.n	2c92 <udc_process_setup+0x16a>
    2b88:	2900      	cmp	r1, #0
    2b8a:	d017      	beq.n	2bbc <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d100      	bne.n	2b92 <udc_process_setup+0x6a>
    2b90:	e087      	b.n	2ca2 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2b92:	2b02      	cmp	r3, #2
    2b94:	d1d6      	bne.n	2b44 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b96:	4b9b      	ldr	r3, [pc, #620]	; (2e04 <udc_process_setup+0x2dc>)
    2b98:	785b      	ldrb	r3, [r3, #1]
	return false;
    2b9a:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d000      	beq.n	2ba2 <udc_process_setup+0x7a>
    2ba0:	e12b      	b.n	2dfa <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2ba2:	2a02      	cmp	r2, #2
    2ba4:	d1d5      	bne.n	2b52 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2ba6:	4b97      	ldr	r3, [pc, #604]	; (2e04 <udc_process_setup+0x2dc>)
    2ba8:	7918      	ldrb	r0, [r3, #4]
    2baa:	4b97      	ldr	r3, [pc, #604]	; (2e08 <udc_process_setup+0x2e0>)
    2bac:	4798      	blx	r3
    2bae:	4b97      	ldr	r3, [pc, #604]	; (2e0c <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    2bb0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2bb2:	2102      	movs	r1, #2
    2bb4:	0018      	movs	r0, r3
    2bb6:	4b96      	ldr	r3, [pc, #600]	; (2e10 <udc_process_setup+0x2e8>)
    2bb8:	4798      	blx	r3
    2bba:	e0fd      	b.n	2db8 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2bbc:	2a02      	cmp	r2, #2
    2bbe:	d1c8      	bne.n	2b52 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    2bc0:	3102      	adds	r1, #2
    2bc2:	4894      	ldr	r0, [pc, #592]	; (2e14 <udc_process_setup+0x2ec>)
    2bc4:	4b92      	ldr	r3, [pc, #584]	; (2e10 <udc_process_setup+0x2e8>)
    2bc6:	4798      	blx	r3
    2bc8:	e0f6      	b.n	2db8 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2bca:	4b8e      	ldr	r3, [pc, #568]	; (2e04 <udc_process_setup+0x2dc>)
    2bcc:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2bce:	0a13      	lsrs	r3, r2, #8
    2bd0:	2b02      	cmp	r3, #2
    2bd2:	d023      	beq.n	2c1c <udc_process_setup+0xf4>
    2bd4:	b2d9      	uxtb	r1, r3
    2bd6:	2902      	cmp	r1, #2
    2bd8:	d90f      	bls.n	2bfa <udc_process_setup+0xd2>
    2bda:	2b03      	cmp	r3, #3
    2bdc:	d034      	beq.n	2c48 <udc_process_setup+0x120>
    2bde:	2b0f      	cmp	r3, #15
    2be0:	d000      	beq.n	2be4 <udc_process_setup+0xbc>
    2be2:	e19c      	b.n	2f1e <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
    2be4:	4b8c      	ldr	r3, [pc, #560]	; (2e18 <udc_process_setup+0x2f0>)
    2be6:	6898      	ldr	r0, [r3, #8]
    2be8:	2800      	cmp	r0, #0
    2bea:	d0b2      	beq.n	2b52 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    2bec:	7883      	ldrb	r3, [r0, #2]
    2bee:	78c1      	ldrb	r1, [r0, #3]
    2bf0:	0209      	lsls	r1, r1, #8
    2bf2:	4319      	orrs	r1, r3
    2bf4:	4b86      	ldr	r3, [pc, #536]	; (2e10 <udc_process_setup+0x2e8>)
    2bf6:	4798      	blx	r3
    2bf8:	e007      	b.n	2c0a <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2bfa:	2b01      	cmp	r3, #1
    2bfc:	d000      	beq.n	2c00 <udc_process_setup+0xd8>
    2bfe:	e18e      	b.n	2f1e <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
    2c00:	4b85      	ldr	r3, [pc, #532]	; (2e18 <udc_process_setup+0x2f0>)
    2c02:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    2c04:	7801      	ldrb	r1, [r0, #0]
    2c06:	4b82      	ldr	r3, [pc, #520]	; (2e10 <udc_process_setup+0x2e8>)
    2c08:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2c0a:	4b7e      	ldr	r3, [pc, #504]	; (2e04 <udc_process_setup+0x2dc>)
    2c0c:	88da      	ldrh	r2, [r3, #6]
    2c0e:	899b      	ldrh	r3, [r3, #12]
    2c10:	4293      	cmp	r3, r2
    2c12:	d800      	bhi.n	2c16 <udc_process_setup+0xee>
    2c14:	e0d0      	b.n	2db8 <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2c16:	4b7b      	ldr	r3, [pc, #492]	; (2e04 <udc_process_setup+0x2dc>)
    2c18:	819a      	strh	r2, [r3, #12]
    2c1a:	e0cd      	b.n	2db8 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2c1c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    2c1e:	4b7e      	ldr	r3, [pc, #504]	; (2e18 <udc_process_setup+0x2f0>)
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	7c5b      	ldrb	r3, [r3, #17]
    2c24:	4293      	cmp	r3, r2
    2c26:	d800      	bhi.n	2c2a <udc_process_setup+0x102>
    2c28:	e793      	b.n	2b52 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    2c2a:	4b7b      	ldr	r3, [pc, #492]	; (2e18 <udc_process_setup+0x2f0>)
    2c2c:	685b      	ldr	r3, [r3, #4]
    2c2e:	00d2      	lsls	r2, r2, #3
    2c30:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    2c32:	7883      	ldrb	r3, [r0, #2]
    2c34:	78c1      	ldrb	r1, [r0, #3]
    2c36:	0209      	lsls	r1, r1, #8
    2c38:	4319      	orrs	r1, r3
    2c3a:	4b75      	ldr	r3, [pc, #468]	; (2e10 <udc_process_setup+0x2e8>)
    2c3c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2c3e:	4b71      	ldr	r3, [pc, #452]	; (2e04 <udc_process_setup+0x2dc>)
    2c40:	689b      	ldr	r3, [r3, #8]
    2c42:	2202      	movs	r2, #2
    2c44:	705a      	strb	r2, [r3, #1]
    2c46:	e7e0      	b.n	2c0a <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2c48:	23ff      	movs	r3, #255	; 0xff
    2c4a:	401a      	ands	r2, r3
    2c4c:	2a01      	cmp	r2, #1
    2c4e:	d01d      	beq.n	2c8c <udc_process_setup+0x164>
    2c50:	2a00      	cmp	r2, #0
    2c52:	d016      	beq.n	2c82 <udc_process_setup+0x15a>
    2c54:	2a02      	cmp	r2, #2
    2c56:	d000      	beq.n	2c5a <udc_process_setup+0x132>
    2c58:	e774      	b.n	2b44 <udc_process_setup+0x1c>
		str = udc_string_product_name;
    2c5a:	4c70      	ldr	r4, [pc, #448]	; (2e1c <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2c5c:	2109      	movs	r1, #9
    2c5e:	4a70      	ldr	r2, [pc, #448]	; (2e20 <udc_process_setup+0x2f8>)
    2c60:	3202      	adds	r2, #2
    2c62:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    2c64:	5ce0      	ldrb	r0, [r4, r3]
    2c66:	8010      	strh	r0, [r2, #0]
    2c68:	3301      	adds	r3, #1
    2c6a:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    2c6c:	b2d8      	uxtb	r0, r3
    2c6e:	4288      	cmp	r0, r1
    2c70:	d3f8      	bcc.n	2c64 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    2c72:	0049      	lsls	r1, r1, #1
    2c74:	3102      	adds	r1, #2
    2c76:	486a      	ldr	r0, [pc, #424]	; (2e20 <udc_process_setup+0x2f8>)
    2c78:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    2c7a:	b289      	uxth	r1, r1
    2c7c:	4b64      	ldr	r3, [pc, #400]	; (2e10 <udc_process_setup+0x2e8>)
    2c7e:	4798      	blx	r3
    2c80:	e7c3      	b.n	2c0a <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2c82:	2104      	movs	r1, #4
    2c84:	4867      	ldr	r0, [pc, #412]	; (2e24 <udc_process_setup+0x2fc>)
    2c86:	4b62      	ldr	r3, [pc, #392]	; (2e10 <udc_process_setup+0x2e8>)
    2c88:	4798      	blx	r3
    2c8a:	e7be      	b.n	2c0a <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    2c8c:	4c66      	ldr	r4, [pc, #408]	; (2e28 <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2c8e:	2116      	movs	r1, #22
    2c90:	e7e5      	b.n	2c5e <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2c92:	2a01      	cmp	r2, #1
    2c94:	d000      	beq.n	2c98 <udc_process_setup+0x170>
    2c96:	e75c      	b.n	2b52 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    2c98:	2101      	movs	r1, #1
    2c9a:	4864      	ldr	r0, [pc, #400]	; (2e2c <udc_process_setup+0x304>)
    2c9c:	4b5c      	ldr	r3, [pc, #368]	; (2e10 <udc_process_setup+0x2e8>)
    2c9e:	4798      	blx	r3
    2ca0:	e08a      	b.n	2db8 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    2ca2:	4958      	ldr	r1, [pc, #352]	; (2e04 <udc_process_setup+0x2dc>)
    2ca4:	7849      	ldrb	r1, [r1, #1]
    2ca6:	290a      	cmp	r1, #10
    2ca8:	d000      	beq.n	2cac <udc_process_setup+0x184>
    2caa:	e772      	b.n	2b92 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2cac:	2a01      	cmp	r2, #1
    2cae:	d000      	beq.n	2cb2 <udc_process_setup+0x18a>
    2cb0:	e0de      	b.n	2e70 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    2cb2:	4b5e      	ldr	r3, [pc, #376]	; (2e2c <udc_process_setup+0x304>)
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d100      	bne.n	2cbc <udc_process_setup+0x194>
    2cba:	e0d9      	b.n	2e70 <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2cbc:	4b51      	ldr	r3, [pc, #324]	; (2e04 <udc_process_setup+0x2dc>)
    2cbe:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2cc0:	4b5b      	ldr	r3, [pc, #364]	; (2e30 <udc_process_setup+0x308>)
    2cc2:	681d      	ldr	r5, [r3, #0]
    2cc4:	682b      	ldr	r3, [r5, #0]
    2cc6:	791b      	ldrb	r3, [r3, #4]
    2cc8:	42a3      	cmp	r3, r4
    2cca:	d800      	bhi.n	2cce <udc_process_setup+0x1a6>
    2ccc:	e0d0      	b.n	2e70 <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2cce:	2100      	movs	r1, #0
    2cd0:	0020      	movs	r0, r4
    2cd2:	4b58      	ldr	r3, [pc, #352]	; (2e34 <udc_process_setup+0x30c>)
    2cd4:	4798      	blx	r3
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d100      	bne.n	2cdc <udc_process_setup+0x1b4>
    2cda:	e733      	b.n	2b44 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2cdc:	686b      	ldr	r3, [r5, #4]
    2cde:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    2ce0:	58e3      	ldr	r3, [r4, r3]
    2ce2:	68db      	ldr	r3, [r3, #12]
    2ce4:	4798      	blx	r3
    2ce6:	4b54      	ldr	r3, [pc, #336]	; (2e38 <udc_process_setup+0x310>)
    2ce8:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    2cea:	2101      	movs	r1, #1
    2cec:	0018      	movs	r0, r3
    2cee:	4b48      	ldr	r3, [pc, #288]	; (2e10 <udc_process_setup+0x2e8>)
    2cf0:	4798      	blx	r3
    2cf2:	e061      	b.n	2db8 <udc_process_setup+0x290>
    2cf4:	221f      	movs	r2, #31
    2cf6:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2cf8:	d172      	bne.n	2de0 <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
    2cfa:	4a42      	ldr	r2, [pc, #264]	; (2e04 <udc_process_setup+0x2dc>)
    2cfc:	7852      	ldrb	r2, [r2, #1]
    2cfe:	2a03      	cmp	r2, #3
    2d00:	d05c      	beq.n	2dbc <udc_process_setup+0x294>
    2d02:	b2d1      	uxtb	r1, r2
    2d04:	2903      	cmp	r1, #3
    2d06:	d93b      	bls.n	2d80 <udc_process_setup+0x258>
    2d08:	2a05      	cmp	r2, #5
    2d0a:	d04d      	beq.n	2da8 <udc_process_setup+0x280>
    2d0c:	2a09      	cmp	r2, #9
    2d0e:	d167      	bne.n	2de0 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    2d10:	4b3c      	ldr	r3, [pc, #240]	; (2e04 <udc_process_setup+0x2dc>)
    2d12:	88db      	ldrh	r3, [r3, #6]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d000      	beq.n	2d1a <udc_process_setup+0x1f2>
    2d18:	e71b      	b.n	2b52 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    2d1a:	4b48      	ldr	r3, [pc, #288]	; (2e3c <udc_process_setup+0x314>)
    2d1c:	4798      	blx	r3
    2d1e:	2800      	cmp	r0, #0
    2d20:	d100      	bne.n	2d24 <udc_process_setup+0x1fc>
    2d22:	e70f      	b.n	2b44 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2d24:	4b37      	ldr	r3, [pc, #220]	; (2e04 <udc_process_setup+0x2dc>)
    2d26:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    2d28:	4b3b      	ldr	r3, [pc, #236]	; (2e18 <udc_process_setup+0x2f0>)
    2d2a:	681b      	ldr	r3, [r3, #0]
    2d2c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2d2e:	429a      	cmp	r2, r3
    2d30:	dd00      	ble.n	2d34 <udc_process_setup+0x20c>
    2d32:	e707      	b.n	2b44 <udc_process_setup+0x1c>
	udc_reset();
    2d34:	4b42      	ldr	r3, [pc, #264]	; (2e40 <udc_process_setup+0x318>)
    2d36:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2d38:	4b32      	ldr	r3, [pc, #200]	; (2e04 <udc_process_setup+0x2dc>)
    2d3a:	789b      	ldrb	r3, [r3, #2]
    2d3c:	4a3b      	ldr	r2, [pc, #236]	; (2e2c <udc_process_setup+0x304>)
    2d3e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    2d40:	2b00      	cmp	r3, #0
    2d42:	d039      	beq.n	2db8 <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2d44:	4a3f      	ldr	r2, [pc, #252]	; (2e44 <udc_process_setup+0x31c>)
    2d46:	4694      	mov	ip, r2
    2d48:	4463      	add	r3, ip
    2d4a:	00db      	lsls	r3, r3, #3
    2d4c:	4a32      	ldr	r2, [pc, #200]	; (2e18 <udc_process_setup+0x2f0>)
    2d4e:	6852      	ldr	r2, [r2, #4]
    2d50:	18d3      	adds	r3, r2, r3
    2d52:	4a37      	ldr	r2, [pc, #220]	; (2e30 <udc_process_setup+0x308>)
    2d54:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2d56:	681b      	ldr	r3, [r3, #0]
    2d58:	791b      	ldrb	r3, [r3, #4]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d02c      	beq.n	2db8 <udc_process_setup+0x290>
    2d5e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    2d60:	4d39      	ldr	r5, [pc, #228]	; (2e48 <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2d62:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    2d64:	2100      	movs	r1, #0
    2d66:	0020      	movs	r0, r4
    2d68:	47a8      	blx	r5
    2d6a:	2800      	cmp	r0, #0
    2d6c:	d100      	bne.n	2d70 <udc_process_setup+0x248>
    2d6e:	e6e9      	b.n	2b44 <udc_process_setup+0x1c>
			iface_num++) {
    2d70:	3401      	adds	r4, #1
    2d72:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2d74:	6833      	ldr	r3, [r6, #0]
    2d76:	681b      	ldr	r3, [r3, #0]
    2d78:	791b      	ldrb	r3, [r3, #4]
    2d7a:	42a3      	cmp	r3, r4
    2d7c:	d8f2      	bhi.n	2d64 <udc_process_setup+0x23c>
    2d7e:	e01b      	b.n	2db8 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    2d80:	2a01      	cmp	r2, #1
    2d82:	d12d      	bne.n	2de0 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    2d84:	4b1f      	ldr	r3, [pc, #124]	; (2e04 <udc_process_setup+0x2dc>)
    2d86:	88db      	ldrh	r3, [r3, #6]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d000      	beq.n	2d8e <udc_process_setup+0x266>
    2d8c:	e6e1      	b.n	2b52 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2d8e:	4b1d      	ldr	r3, [pc, #116]	; (2e04 <udc_process_setup+0x2dc>)
    2d90:	885b      	ldrh	r3, [r3, #2]
    2d92:	2b01      	cmp	r3, #1
    2d94:	d000      	beq.n	2d98 <udc_process_setup+0x270>
    2d96:	e6dc      	b.n	2b52 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2d98:	4a1e      	ldr	r2, [pc, #120]	; (2e14 <udc_process_setup+0x2ec>)
    2d9a:	8813      	ldrh	r3, [r2, #0]
    2d9c:	2102      	movs	r1, #2
    2d9e:	438b      	bics	r3, r1
    2da0:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
    2da2:	4b2a      	ldr	r3, [pc, #168]	; (2e4c <udc_process_setup+0x324>)
    2da4:	4798      	blx	r3
    2da6:	e007      	b.n	2db8 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    2da8:	4b16      	ldr	r3, [pc, #88]	; (2e04 <udc_process_setup+0x2dc>)
    2daa:	88db      	ldrh	r3, [r3, #6]
    2dac:	2b00      	cmp	r3, #0
    2dae:	d000      	beq.n	2db2 <udc_process_setup+0x28a>
    2db0:	e6cf      	b.n	2b52 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    2db2:	4a27      	ldr	r2, [pc, #156]	; (2e50 <udc_process_setup+0x328>)
    2db4:	4b13      	ldr	r3, [pc, #76]	; (2e04 <udc_process_setup+0x2dc>)
    2db6:	611a      	str	r2, [r3, #16]
			return true;
    2db8:	2001      	movs	r0, #1
    2dba:	e6d2      	b.n	2b62 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
    2dbc:	4b11      	ldr	r3, [pc, #68]	; (2e04 <udc_process_setup+0x2dc>)
    2dbe:	88db      	ldrh	r3, [r3, #6]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d000      	beq.n	2dc6 <udc_process_setup+0x29e>
    2dc4:	e6c5      	b.n	2b52 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
    2dc6:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <udc_process_setup+0x2dc>)
    2dc8:	885b      	ldrh	r3, [r3, #2]
	return false;
    2dca:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
    2dcc:	2b01      	cmp	r3, #1
    2dce:	d114      	bne.n	2dfa <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    2dd0:	4a10      	ldr	r2, [pc, #64]	; (2e14 <udc_process_setup+0x2ec>)
    2dd2:	8813      	ldrh	r3, [r2, #0]
    2dd4:	2102      	movs	r1, #2
    2dd6:	430b      	orrs	r3, r1
    2dd8:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    2dda:	4b1e      	ldr	r3, [pc, #120]	; (2e54 <udc_process_setup+0x32c>)
    2ddc:	4798      	blx	r3
    2dde:	e7eb      	b.n	2db8 <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2de0:	2b01      	cmp	r3, #1
    2de2:	d039      	beq.n	2e58 <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2de4:	2b02      	cmp	r3, #2
    2de6:	d000      	beq.n	2dea <udc_process_setup+0x2c2>
    2de8:	e6ac      	b.n	2b44 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2dea:	4b06      	ldr	r3, [pc, #24]	; (2e04 <udc_process_setup+0x2dc>)
    2dec:	785b      	ldrb	r3, [r3, #1]
    2dee:	2b01      	cmp	r3, #1
    2df0:	d074      	beq.n	2edc <udc_process_setup+0x3b4>
    2df2:	2b03      	cmp	r3, #3
    2df4:	d100      	bne.n	2df8 <udc_process_setup+0x2d0>
    2df6:	e080      	b.n	2efa <udc_process_setup+0x3d2>
	return false;
    2df8:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2dfa:	2800      	cmp	r0, #0
    2dfc:	d000      	beq.n	2e00 <udc_process_setup+0x2d8>
    2dfe:	e6b0      	b.n	2b62 <udc_process_setup+0x3a>
    2e00:	e6a0      	b.n	2b44 <udc_process_setup+0x1c>
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	200008a0 	.word	0x200008a0
    2e08:	000059a5 	.word	0x000059a5
    2e0c:	200002f6 	.word	0x200002f6
    2e10:	00005d1d 	.word	0x00005d1d
    2e14:	200002f4 	.word	0x200002f4
    2e18:	20000074 	.word	0x20000074
    2e1c:	20000118 	.word	0x20000118
    2e20:	200000cc 	.word	0x200000cc
    2e24:	200000fc 	.word	0x200000fc
    2e28:	20000100 	.word	0x20000100
    2e2c:	200002fc 	.word	0x200002fc
    2e30:	20000300 	.word	0x20000300
    2e34:	00002935 	.word	0x00002935
    2e38:	200002f8 	.word	0x200002f8
    2e3c:	00005d0d 	.word	0x00005d0d
    2e40:	00002a85 	.word	0x00002a85
    2e44:	1fffffff 	.word	0x1fffffff
    2e48:	00002a15 	.word	0x00002a15
    2e4c:	00007845 	.word	0x00007845
    2e50:	0000291d 	.word	0x0000291d
    2e54:	00007839 	.word	0x00007839
			switch (udd_g_ctrlreq.req.bRequest) {
    2e58:	4a46      	ldr	r2, [pc, #280]	; (2f74 <udc_process_setup+0x44c>)
    2e5a:	7852      	ldrb	r2, [r2, #1]
    2e5c:	2a0b      	cmp	r2, #11
    2e5e:	d1c1      	bne.n	2de4 <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
    2e60:	4b44      	ldr	r3, [pc, #272]	; (2f74 <udc_process_setup+0x44c>)
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d103      	bne.n	2e70 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    2e68:	4b43      	ldr	r3, [pc, #268]	; (2f78 <udc_process_setup+0x450>)
    2e6a:	781b      	ldrb	r3, [r3, #0]
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	d127      	bne.n	2ec0 <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
    2e70:	4b41      	ldr	r3, [pc, #260]	; (2f78 <udc_process_setup+0x450>)
    2e72:	781b      	ldrb	r3, [r3, #0]
	return false;
    2e74:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    2e76:	2b00      	cmp	r3, #0
    2e78:	d100      	bne.n	2e7c <udc_process_setup+0x354>
    2e7a:	e672      	b.n	2b62 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2e7c:	4b3d      	ldr	r3, [pc, #244]	; (2f74 <udc_process_setup+0x44c>)
    2e7e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2e80:	4b3e      	ldr	r3, [pc, #248]	; (2f7c <udc_process_setup+0x454>)
    2e82:	681d      	ldr	r5, [r3, #0]
    2e84:	682b      	ldr	r3, [r5, #0]
    2e86:	791b      	ldrb	r3, [r3, #4]
    2e88:	42a3      	cmp	r3, r4
    2e8a:	d800      	bhi.n	2e8e <udc_process_setup+0x366>
    2e8c:	e669      	b.n	2b62 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2e8e:	2100      	movs	r1, #0
    2e90:	0020      	movs	r0, r4
    2e92:	4b3b      	ldr	r3, [pc, #236]	; (2f80 <udc_process_setup+0x458>)
    2e94:	4798      	blx	r3
    2e96:	2800      	cmp	r0, #0
    2e98:	d100      	bne.n	2e9c <udc_process_setup+0x374>
    2e9a:	e65a      	b.n	2b52 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2e9c:	686b      	ldr	r3, [r5, #4]
    2e9e:	00a2      	lsls	r2, r4, #2
    2ea0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2ea2:	68eb      	ldr	r3, [r5, #12]
    2ea4:	4798      	blx	r3
    2ea6:	0001      	movs	r1, r0
    2ea8:	0020      	movs	r0, r4
    2eaa:	4b35      	ldr	r3, [pc, #212]	; (2f80 <udc_process_setup+0x458>)
    2eac:	4798      	blx	r3
    2eae:	2800      	cmp	r0, #0
    2eb0:	d100      	bne.n	2eb4 <udc_process_setup+0x38c>
    2eb2:	e64e      	b.n	2b52 <udc_process_setup+0x2a>
	return udi_api->setup();
    2eb4:	68ab      	ldr	r3, [r5, #8]
    2eb6:	4798      	blx	r3
		if (udc_req_iface()) {
    2eb8:	2800      	cmp	r0, #0
    2eba:	d000      	beq.n	2ebe <udc_process_setup+0x396>
    2ebc:	e651      	b.n	2b62 <udc_process_setup+0x3a>
    2ebe:	e648      	b.n	2b52 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2ec0:	4b2c      	ldr	r3, [pc, #176]	; (2f74 <udc_process_setup+0x44c>)
    2ec2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2ec4:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    2ec6:	0028      	movs	r0, r5
    2ec8:	4b2e      	ldr	r3, [pc, #184]	; (2f84 <udc_process_setup+0x45c>)
    2eca:	4798      	blx	r3
    2ecc:	2800      	cmp	r0, #0
    2ece:	d100      	bne.n	2ed2 <udc_process_setup+0x3aa>
    2ed0:	e638      	b.n	2b44 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    2ed2:	b2e1      	uxtb	r1, r4
    2ed4:	0028      	movs	r0, r5
    2ed6:	4b2c      	ldr	r3, [pc, #176]	; (2f88 <udc_process_setup+0x460>)
    2ed8:	4798      	blx	r3
    2eda:	e78e      	b.n	2dfa <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2edc:	4b25      	ldr	r3, [pc, #148]	; (2f74 <udc_process_setup+0x44c>)
    2ede:	88db      	ldrh	r3, [r3, #6]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d000      	beq.n	2ee6 <udc_process_setup+0x3be>
    2ee4:	e635      	b.n	2b52 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2ee6:	4b23      	ldr	r3, [pc, #140]	; (2f74 <udc_process_setup+0x44c>)
    2ee8:	885b      	ldrh	r3, [r3, #2]
    2eea:	2b00      	cmp	r3, #0
    2eec:	d000      	beq.n	2ef0 <udc_process_setup+0x3c8>
    2eee:	e630      	b.n	2b52 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2ef0:	4b20      	ldr	r3, [pc, #128]	; (2f74 <udc_process_setup+0x44c>)
    2ef2:	7918      	ldrb	r0, [r3, #4]
    2ef4:	4b25      	ldr	r3, [pc, #148]	; (2f8c <udc_process_setup+0x464>)
    2ef6:	4798      	blx	r3
    2ef8:	e77f      	b.n	2dfa <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2efa:	4b1e      	ldr	r3, [pc, #120]	; (2f74 <udc_process_setup+0x44c>)
    2efc:	88db      	ldrh	r3, [r3, #6]
    2efe:	2b00      	cmp	r3, #0
    2f00:	d000      	beq.n	2f04 <udc_process_setup+0x3dc>
    2f02:	e626      	b.n	2b52 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2f04:	4b1b      	ldr	r3, [pc, #108]	; (2f74 <udc_process_setup+0x44c>)
    2f06:	885b      	ldrh	r3, [r3, #2]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d000      	beq.n	2f0e <udc_process_setup+0x3e6>
    2f0c:	e621      	b.n	2b52 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2f0e:	4c19      	ldr	r4, [pc, #100]	; (2f74 <udc_process_setup+0x44c>)
    2f10:	7920      	ldrb	r0, [r4, #4]
    2f12:	4b1f      	ldr	r3, [pc, #124]	; (2f90 <udc_process_setup+0x468>)
    2f14:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2f16:	7920      	ldrb	r0, [r4, #4]
    2f18:	4b1e      	ldr	r3, [pc, #120]	; (2f94 <udc_process_setup+0x46c>)
    2f1a:	4798      	blx	r3
    2f1c:	e76d      	b.n	2dfa <udc_process_setup+0x2d2>
		return false;
    2f1e:	2000      	movs	r0, #0
    2f20:	e76b      	b.n	2dfa <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
    2f22:	4b15      	ldr	r3, [pc, #84]	; (2f78 <udc_process_setup+0x450>)
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	2b00      	cmp	r3, #0
    2f28:	d100      	bne.n	2f2c <udc_process_setup+0x404>
    2f2a:	e61a      	b.n	2b62 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2f2c:	4b13      	ldr	r3, [pc, #76]	; (2f7c <udc_process_setup+0x454>)
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	681a      	ldr	r2, [r3, #0]
    2f32:	7912      	ldrb	r2, [r2, #4]
    2f34:	2a00      	cmp	r2, #0
    2f36:	d01a      	beq.n	2f6e <udc_process_setup+0x446>
    2f38:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2f3a:	4e11      	ldr	r6, [pc, #68]	; (2f80 <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2f3c:	4f0f      	ldr	r7, [pc, #60]	; (2f7c <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2f3e:	685b      	ldr	r3, [r3, #4]
    2f40:	00aa      	lsls	r2, r5, #2
    2f42:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2f44:	68e3      	ldr	r3, [r4, #12]
    2f46:	4798      	blx	r3
    2f48:	0001      	movs	r1, r0
    2f4a:	0028      	movs	r0, r5
    2f4c:	47b0      	blx	r6
    2f4e:	2800      	cmp	r0, #0
    2f50:	d100      	bne.n	2f54 <udc_process_setup+0x42c>
    2f52:	e606      	b.n	2b62 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    2f54:	68a3      	ldr	r3, [r4, #8]
    2f56:	4798      	blx	r3
    2f58:	2800      	cmp	r0, #0
    2f5a:	d000      	beq.n	2f5e <udc_process_setup+0x436>
    2f5c:	e601      	b.n	2b62 <udc_process_setup+0x3a>
			iface_num++) {
    2f5e:	3501      	adds	r5, #1
    2f60:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2f62:	683b      	ldr	r3, [r7, #0]
    2f64:	681a      	ldr	r2, [r3, #0]
    2f66:	7912      	ldrb	r2, [r2, #4]
    2f68:	42aa      	cmp	r2, r5
    2f6a:	d8e8      	bhi.n	2f3e <udc_process_setup+0x416>
    2f6c:	e5f9      	b.n	2b62 <udc_process_setup+0x3a>
	return false;
    2f6e:	2000      	movs	r0, #0
    2f70:	e5f7      	b.n	2b62 <udc_process_setup+0x3a>
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	200008a0 	.word	0x200008a0
    2f78:	200002fc 	.word	0x200002fc
    2f7c:	20000300 	.word	0x20000300
    2f80:	00002935 	.word	0x00002935
    2f84:	000029a9 	.word	0x000029a9
    2f88:	00002a15 	.word	0x00002a15
    2f8c:	00005ae9 	.word	0x00005ae9
    2f90:	000057f9 	.word	0x000057f9
    2f94:	000059b9 	.word	0x000059b9

00002f98 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2f98:	4b0c      	ldr	r3, [pc, #48]	; (2fcc <cpu_irq_enter_critical+0x34>)
    2f9a:	681b      	ldr	r3, [r3, #0]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d106      	bne.n	2fae <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fa0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d007      	beq.n	2fb8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2fa8:	2200      	movs	r2, #0
    2faa:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <cpu_irq_enter_critical+0x38>)
    2fac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2fae:	4a07      	ldr	r2, [pc, #28]	; (2fcc <cpu_irq_enter_critical+0x34>)
    2fb0:	6813      	ldr	r3, [r2, #0]
    2fb2:	3301      	adds	r3, #1
    2fb4:	6013      	str	r3, [r2, #0]
}
    2fb6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2fb8:	b672      	cpsid	i
    2fba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2fbe:	2200      	movs	r2, #0
    2fc0:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <cpu_irq_enter_critical+0x3c>)
    2fc2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2fc4:	3201      	adds	r2, #1
    2fc6:	4b02      	ldr	r3, [pc, #8]	; (2fd0 <cpu_irq_enter_critical+0x38>)
    2fc8:	701a      	strb	r2, [r3, #0]
    2fca:	e7f0      	b.n	2fae <cpu_irq_enter_critical+0x16>
    2fcc:	20000308 	.word	0x20000308
    2fd0:	2000030c 	.word	0x2000030c
    2fd4:	20000122 	.word	0x20000122

00002fd8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fd8:	4b08      	ldr	r3, [pc, #32]	; (2ffc <cpu_irq_leave_critical+0x24>)
    2fda:	681a      	ldr	r2, [r3, #0]
    2fdc:	3a01      	subs	r2, #1
    2fde:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2fe0:	681b      	ldr	r3, [r3, #0]
    2fe2:	2b00      	cmp	r3, #0
    2fe4:	d109      	bne.n	2ffa <cpu_irq_leave_critical+0x22>
    2fe6:	4b06      	ldr	r3, [pc, #24]	; (3000 <cpu_irq_leave_critical+0x28>)
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d005      	beq.n	2ffa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2fee:	2201      	movs	r2, #1
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <cpu_irq_leave_critical+0x2c>)
    2ff2:	701a      	strb	r2, [r3, #0]
    2ff4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ff8:	b662      	cpsie	i
	}
}
    2ffa:	4770      	bx	lr
    2ffc:	20000308 	.word	0x20000308
    3000:	2000030c 	.word	0x2000030c
    3004:	20000122 	.word	0x20000122

00003008 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    3008:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    300a:	2200      	movs	r2, #0
    300c:	2300      	movs	r3, #0
    300e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    3010:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    3012:	2100      	movs	r1, #0
    3014:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    3016:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    3018:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    301a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    301c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    301e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    3020:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    3022:	24c0      	movs	r4, #192	; 0xc0
    3024:	0164      	lsls	r4, r4, #5
    3026:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    3028:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    302a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    302c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    302e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    3030:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    3032:	242a      	movs	r4, #42	; 0x2a
    3034:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    3036:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    3038:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    303a:	3c06      	subs	r4, #6
    303c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    303e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    3040:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    3042:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    3044:	232b      	movs	r3, #43	; 0x2b
    3046:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    3048:	3301      	adds	r3, #1
    304a:	54c1      	strb	r1, [r0, r3]
}
    304c:	bd10      	pop	{r4, pc}
	...

00003050 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    3050:	b5f0      	push	{r4, r5, r6, r7, lr}
    3052:	46d6      	mov	lr, sl
    3054:	464f      	mov	r7, r9
    3056:	4646      	mov	r6, r8
    3058:	b5c0      	push	{r6, r7, lr}
    305a:	b096      	sub	sp, #88	; 0x58
    305c:	0007      	movs	r7, r0
    305e:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3060:	6001      	str	r1, [r0, #0]
    3062:	4acb      	ldr	r2, [pc, #812]	; (3390 <adc_init+0x340>)
    3064:	6a10      	ldr	r0, [r2, #32]
    3066:	2380      	movs	r3, #128	; 0x80
    3068:	025b      	lsls	r3, r3, #9
    306a:	4303      	orrs	r3, r0
    306c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    306e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3070:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    3072:	07db      	lsls	r3, r3, #31
    3074:	d505      	bpl.n	3082 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    3076:	b016      	add	sp, #88	; 0x58
    3078:	bc1c      	pop	{r2, r3, r4}
    307a:	4690      	mov	r8, r2
    307c:	4699      	mov	r9, r3
    307e:	46a2      	mov	sl, r4
    3080:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3082:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    3084:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3086:	079b      	lsls	r3, r3, #30
    3088:	d4f5      	bmi.n	3076 <adc_init+0x26>
	module_inst->reference = config->reference;
    308a:	7873      	ldrb	r3, [r6, #1]
    308c:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    308e:	2b00      	cmp	r3, #0
    3090:	d104      	bne.n	309c <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    3092:	4ac0      	ldr	r2, [pc, #768]	; (3394 <adc_init+0x344>)
    3094:	6c13      	ldr	r3, [r2, #64]	; 0x40
    3096:	2104      	movs	r1, #4
    3098:	430b      	orrs	r3, r1
    309a:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    309c:	683b      	ldr	r3, [r7, #0]
    309e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    30a0:	7833      	ldrb	r3, [r6, #0]
    30a2:	466a      	mov	r2, sp
    30a4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    30a6:	4669      	mov	r1, sp
    30a8:	201e      	movs	r0, #30
    30aa:	4bbb      	ldr	r3, [pc, #748]	; (3398 <adc_init+0x348>)
    30ac:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    30ae:	201e      	movs	r0, #30
    30b0:	4bba      	ldr	r3, [pc, #744]	; (339c <adc_init+0x34c>)
    30b2:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    30b4:	232c      	movs	r3, #44	; 0x2c
    30b6:	5cf2      	ldrb	r2, [r6, r3]
    30b8:	2a00      	cmp	r2, #0
    30ba:	d054      	beq.n	3166 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    30bc:	3b01      	subs	r3, #1
    30be:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    30c0:	7b33      	ldrb	r3, [r6, #12]
    30c2:	18eb      	adds	r3, r5, r3
    30c4:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    30c6:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    30c8:	b2c9      	uxtb	r1, r1
    30ca:	428b      	cmp	r3, r1
    30cc:	d221      	bcs.n	3112 <adc_init+0xc2>
    30ce:	1952      	adds	r2, r2, r5
    30d0:	b2d3      	uxtb	r3, r2
    30d2:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    30d4:	4bb2      	ldr	r3, [pc, #712]	; (33a0 <adc_init+0x350>)
    30d6:	469a      	mov	sl, r3
    30d8:	e003      	b.n	30e2 <adc_init+0x92>
			offset++;
    30da:	3501      	adds	r5, #1
    30dc:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    30de:	45a9      	cmp	r9, r5
    30e0:	d017      	beq.n	3112 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    30e2:	240f      	movs	r4, #15
    30e4:	402c      	ands	r4, r5
    30e6:	7b33      	ldrb	r3, [r6, #12]
    30e8:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    30ea:	2250      	movs	r2, #80	; 0x50
    30ec:	49ad      	ldr	r1, [pc, #692]	; (33a4 <adc_init+0x354>)
    30ee:	a802      	add	r0, sp, #8
    30f0:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    30f2:	2c13      	cmp	r4, #19
    30f4:	d8f1      	bhi.n	30da <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    30f6:	00a4      	lsls	r4, r4, #2
    30f8:	ab02      	add	r3, sp, #8
    30fa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    30fc:	a901      	add	r1, sp, #4
    30fe:	2300      	movs	r3, #0
    3100:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3102:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3104:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    3106:	3301      	adds	r3, #1
    3108:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    310a:	b2c0      	uxtb	r0, r0
    310c:	4ba6      	ldr	r3, [pc, #664]	; (33a8 <adc_init+0x358>)
    310e:	4798      	blx	r3
    3110:	e7e3      	b.n	30da <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    3112:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    3114:	2250      	movs	r2, #80	; 0x50
    3116:	49a3      	ldr	r1, [pc, #652]	; (33a4 <adc_init+0x354>)
    3118:	a802      	add	r0, sp, #8
    311a:	4ba1      	ldr	r3, [pc, #644]	; (33a0 <adc_init+0x350>)
    311c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    311e:	2c13      	cmp	r4, #19
    3120:	d913      	bls.n	314a <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    3122:	7d73      	ldrb	r3, [r6, #21]
    3124:	009b      	lsls	r3, r3, #2
    3126:	b2db      	uxtb	r3, r3
    3128:	4642      	mov	r2, r8
    312a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    312c:	7db3      	ldrb	r3, [r6, #22]
    312e:	01db      	lsls	r3, r3, #7
    3130:	7872      	ldrb	r2, [r6, #1]
    3132:	4313      	orrs	r3, r2
    3134:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    3136:	4642      	mov	r2, r8
    3138:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    313a:	7933      	ldrb	r3, [r6, #4]
    313c:	2b34      	cmp	r3, #52	; 0x34
    313e:	d900      	bls.n	3142 <adc_init+0xf2>
    3140:	e178      	b.n	3434 <adc_init+0x3e4>
    3142:	009b      	lsls	r3, r3, #2
    3144:	4a99      	ldr	r2, [pc, #612]	; (33ac <adc_init+0x35c>)
    3146:	58d3      	ldr	r3, [r2, r3]
    3148:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    314a:	00a4      	lsls	r4, r4, #2
    314c:	ab02      	add	r3, sp, #8
    314e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3150:	a901      	add	r1, sp, #4
    3152:	2300      	movs	r3, #0
    3154:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3156:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3158:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    315a:	3301      	adds	r3, #1
    315c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    315e:	b2c0      	uxtb	r0, r0
    3160:	4b91      	ldr	r3, [pc, #580]	; (33a8 <adc_init+0x358>)
    3162:	4798      	blx	r3
    3164:	e7dd      	b.n	3122 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    3166:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    3168:	2250      	movs	r2, #80	; 0x50
    316a:	498e      	ldr	r1, [pc, #568]	; (33a4 <adc_init+0x354>)
    316c:	a802      	add	r0, sp, #8
    316e:	4b8c      	ldr	r3, [pc, #560]	; (33a0 <adc_init+0x350>)
    3170:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    3172:	2c13      	cmp	r4, #19
    3174:	d915      	bls.n	31a2 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    3176:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    3178:	2250      	movs	r2, #80	; 0x50
    317a:	498a      	ldr	r1, [pc, #552]	; (33a4 <adc_init+0x354>)
    317c:	a802      	add	r0, sp, #8
    317e:	4b88      	ldr	r3, [pc, #544]	; (33a0 <adc_init+0x350>)
    3180:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    3182:	2c13      	cmp	r4, #19
    3184:	d8cd      	bhi.n	3122 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    3186:	00a4      	lsls	r4, r4, #2
    3188:	ab02      	add	r3, sp, #8
    318a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    318c:	a901      	add	r1, sp, #4
    318e:	2300      	movs	r3, #0
    3190:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3192:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3194:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    3196:	3301      	adds	r3, #1
    3198:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    319a:	b2c0      	uxtb	r0, r0
    319c:	4b82      	ldr	r3, [pc, #520]	; (33a8 <adc_init+0x358>)
    319e:	4798      	blx	r3
    31a0:	e7bf      	b.n	3122 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    31a2:	00a4      	lsls	r4, r4, #2
    31a4:	ab02      	add	r3, sp, #8
    31a6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31a8:	a901      	add	r1, sp, #4
    31aa:	2300      	movs	r3, #0
    31ac:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    31ae:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    31b0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    31b2:	3301      	adds	r3, #1
    31b4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    31b6:	b2c0      	uxtb	r0, r0
    31b8:	4b7b      	ldr	r3, [pc, #492]	; (33a8 <adc_init+0x358>)
    31ba:	4798      	blx	r3
    31bc:	e7db      	b.n	3176 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    31be:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    31c0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    31c2:	2102      	movs	r1, #2
    31c4:	e01a      	b.n	31fc <adc_init+0x1ac>
		adjres = config->divide_result;
    31c6:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    31c8:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    31ca:	2410      	movs	r4, #16
    31cc:	e016      	b.n	31fc <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    31ce:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    31d0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    31d2:	2101      	movs	r1, #1
    31d4:	e012      	b.n	31fc <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    31d6:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    31d8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    31da:	2100      	movs	r1, #0
    31dc:	e00e      	b.n	31fc <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    31de:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    31e0:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    31e2:	2100      	movs	r1, #0
    31e4:	e00a      	b.n	31fc <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    31e6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    31e8:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    31ea:	2100      	movs	r1, #0
    31ec:	e006      	b.n	31fc <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    31ee:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    31f0:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    31f2:	2100      	movs	r1, #0
    31f4:	e002      	b.n	31fc <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    31f6:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    31f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    31fa:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    31fc:	0109      	lsls	r1, r1, #4
    31fe:	2270      	movs	r2, #112	; 0x70
    3200:	400a      	ands	r2, r1
    3202:	4313      	orrs	r3, r2
    3204:	4642      	mov	r2, r8
    3206:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    3208:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    320a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    320c:	2b3f      	cmp	r3, #63	; 0x3f
    320e:	d900      	bls.n	3212 <adc_init+0x1c2>
    3210:	e731      	b.n	3076 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    3212:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3214:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3216:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3218:	b25b      	sxtb	r3, r3
    321a:	2b00      	cmp	r3, #0
    321c:	dbfb      	blt.n	3216 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    321e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3220:	8872      	ldrh	r2, [r6, #2]
    3222:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    3224:	2224      	movs	r2, #36	; 0x24
    3226:	5cb2      	ldrb	r2, [r6, r2]
    3228:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    322a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    322c:	7d32      	ldrb	r2, [r6, #20]
    322e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3230:	4313      	orrs	r3, r2
    3232:	7cb2      	ldrb	r2, [r6, #18]
    3234:	0052      	lsls	r2, r2, #1
    3236:	4313      	orrs	r3, r2
    3238:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    323a:	4642      	mov	r2, r8
    323c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    323e:	7e33      	ldrb	r3, [r6, #24]
    3240:	2b00      	cmp	r3, #0
    3242:	d020      	beq.n	3286 <adc_init+0x236>
		switch (resolution) {
    3244:	2c10      	cmp	r4, #16
    3246:	d100      	bne.n	324a <adc_init+0x1fa>
    3248:	e0d6      	b.n	33f8 <adc_init+0x3a8>
    324a:	d800      	bhi.n	324e <adc_init+0x1fe>
    324c:	e080      	b.n	3350 <adc_init+0x300>
    324e:	2c20      	cmp	r4, #32
    3250:	d100      	bne.n	3254 <adc_init+0x204>
    3252:	e0b3      	b.n	33bc <adc_init+0x36c>
    3254:	2c30      	cmp	r4, #48	; 0x30
    3256:	d116      	bne.n	3286 <adc_init+0x236>
			if (config->differential_mode &&
    3258:	7cf2      	ldrb	r2, [r6, #19]
    325a:	2a00      	cmp	r2, #0
    325c:	d00a      	beq.n	3274 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    325e:	69f2      	ldr	r2, [r6, #28]
    3260:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    3262:	2017      	movs	r0, #23
			if (config->differential_mode &&
    3264:	2aff      	cmp	r2, #255	; 0xff
    3266:	d900      	bls.n	326a <adc_init+0x21a>
    3268:	e705      	b.n	3076 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    326a:	6a32      	ldr	r2, [r6, #32]
    326c:	3280      	adds	r2, #128	; 0x80
    326e:	2aff      	cmp	r2, #255	; 0xff
    3270:	d900      	bls.n	3274 <adc_init+0x224>
    3272:	e700      	b.n	3076 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    3274:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    3276:	69f2      	ldr	r2, [r6, #28]
    3278:	2aff      	cmp	r2, #255	; 0xff
    327a:	dd00      	ble.n	327e <adc_init+0x22e>
    327c:	e6fb      	b.n	3076 <adc_init+0x26>
    327e:	6a32      	ldr	r2, [r6, #32]
    3280:	2aff      	cmp	r2, #255	; 0xff
    3282:	dd00      	ble.n	3286 <adc_init+0x236>
    3284:	e6f7      	b.n	3076 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    3286:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3288:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    328a:	b252      	sxtb	r2, r2
    328c:	2a00      	cmp	r2, #0
    328e:	dbfb      	blt.n	3288 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    3290:	4642      	mov	r2, r8
    3292:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    3294:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3296:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3298:	b25b      	sxtb	r3, r3
    329a:	2b00      	cmp	r3, #0
    329c:	dbfb      	blt.n	3296 <adc_init+0x246>
	adc_module->WINLT.reg =
    329e:	8bb3      	ldrh	r3, [r6, #28]
    32a0:	4642      	mov	r2, r8
    32a2:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    32a4:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32a6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    32a8:	b25b      	sxtb	r3, r3
    32aa:	2b00      	cmp	r3, #0
    32ac:	dbfb      	blt.n	32a6 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    32ae:	8c33      	ldrh	r3, [r6, #32]
    32b0:	4642      	mov	r2, r8
    32b2:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    32b4:	232c      	movs	r3, #44	; 0x2c
    32b6:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    32b8:	2b00      	cmp	r3, #0
    32ba:	d005      	beq.n	32c8 <adc_init+0x278>
		inputs_to_scan--;
    32bc:	3b01      	subs	r3, #1
    32be:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    32c0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    32c2:	2b0f      	cmp	r3, #15
    32c4:	d900      	bls.n	32c8 <adc_init+0x278>
    32c6:	e6d6      	b.n	3076 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    32c8:	222b      	movs	r2, #43	; 0x2b
    32ca:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    32cc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    32ce:	290f      	cmp	r1, #15
    32d0:	d900      	bls.n	32d4 <adc_init+0x284>
    32d2:	e6d0      	b.n	3076 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    32d4:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32d6:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    32d8:	b252      	sxtb	r2, r2
    32da:	2a00      	cmp	r2, #0
    32dc:	dbfb      	blt.n	32d6 <adc_init+0x286>
			config->negative_input |
    32de:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    32e0:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    32e2:	4302      	orrs	r2, r0
    32e4:	68b0      	ldr	r0, [r6, #8]
    32e6:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    32e8:	0509      	lsls	r1, r1, #20
			config->negative_input |
    32ea:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    32ec:	041b      	lsls	r3, r3, #16
			config->negative_input |
    32ee:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    32f0:	4642      	mov	r2, r8
    32f2:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    32f4:	232a      	movs	r3, #42	; 0x2a
    32f6:	5cf3      	ldrb	r3, [r6, r3]
    32f8:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    32fa:	230f      	movs	r3, #15
    32fc:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    32fe:	3315      	adds	r3, #21
    3300:	5cf3      	ldrb	r3, [r6, r3]
    3302:	2b00      	cmp	r3, #0
    3304:	d012      	beq.n	332c <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    3306:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    3308:	4a29      	ldr	r2, [pc, #164]	; (33b0 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    330a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    330c:	4293      	cmp	r3, r2
    330e:	d900      	bls.n	3312 <adc_init+0x2c2>
    3310:	e6b1      	b.n	3076 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    3312:	4642      	mov	r2, r8
    3314:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    3316:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    3318:	2380      	movs	r3, #128	; 0x80
    331a:	011b      	lsls	r3, r3, #4
    331c:	18d3      	adds	r3, r2, r3
    331e:	4924      	ldr	r1, [pc, #144]	; (33b0 <adc_init+0x360>)
    3320:	b29b      	uxth	r3, r3
    3322:	428b      	cmp	r3, r1
    3324:	d900      	bls.n	3328 <adc_init+0x2d8>
    3326:	e6a6      	b.n	3076 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    3328:	4643      	mov	r3, r8
    332a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    332c:	4b21      	ldr	r3, [pc, #132]	; (33b4 <adc_init+0x364>)
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	015b      	lsls	r3, r3, #5
    3332:	22e0      	movs	r2, #224	; 0xe0
    3334:	00d2      	lsls	r2, r2, #3
    3336:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    3338:	4a1f      	ldr	r2, [pc, #124]	; (33b8 <adc_init+0x368>)
    333a:	6851      	ldr	r1, [r2, #4]
    333c:	0149      	lsls	r1, r1, #5
    333e:	6812      	ldr	r2, [r2, #0]
    3340:	0ed2      	lsrs	r2, r2, #27
    3342:	430a      	orrs	r2, r1
    3344:	b2d2      	uxtb	r2, r2
			) |
    3346:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    3348:	4642      	mov	r2, r8
    334a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    334c:	2000      	movs	r0, #0
    334e:	e692      	b.n	3076 <adc_init+0x26>
		switch (resolution) {
    3350:	2c00      	cmp	r4, #0
    3352:	d198      	bne.n	3286 <adc_init+0x236>
			if (config->differential_mode &&
    3354:	7cf2      	ldrb	r2, [r6, #19]
    3356:	2a00      	cmp	r2, #0
    3358:	d00f      	beq.n	337a <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    335a:	69f2      	ldr	r2, [r6, #28]
    335c:	2180      	movs	r1, #128	; 0x80
    335e:	0109      	lsls	r1, r1, #4
    3360:	468c      	mov	ip, r1
    3362:	4462      	add	r2, ip
			if (config->differential_mode &&
    3364:	4912      	ldr	r1, [pc, #72]	; (33b0 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    3366:	2017      	movs	r0, #23
			if (config->differential_mode &&
    3368:	428a      	cmp	r2, r1
    336a:	d900      	bls.n	336e <adc_init+0x31e>
    336c:	e683      	b.n	3076 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    336e:	6a32      	ldr	r2, [r6, #32]
    3370:	4462      	add	r2, ip
    3372:	490f      	ldr	r1, [pc, #60]	; (33b0 <adc_init+0x360>)
    3374:	428a      	cmp	r2, r1
    3376:	d900      	bls.n	337a <adc_init+0x32a>
    3378:	e67d      	b.n	3076 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    337a:	4a0d      	ldr	r2, [pc, #52]	; (33b0 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    337c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    337e:	69f1      	ldr	r1, [r6, #28]
    3380:	4291      	cmp	r1, r2
    3382:	dd00      	ble.n	3386 <adc_init+0x336>
    3384:	e677      	b.n	3076 <adc_init+0x26>
    3386:	6a31      	ldr	r1, [r6, #32]
    3388:	4291      	cmp	r1, r2
    338a:	dd00      	ble.n	338e <adc_init+0x33e>
    338c:	e673      	b.n	3076 <adc_init+0x26>
    338e:	e77a      	b.n	3286 <adc_init+0x236>
    3390:	40000400 	.word	0x40000400
    3394:	40000800 	.word	0x40000800
    3398:	000045a9 	.word	0x000045a9
    339c:	0000451d 	.word	0x0000451d
    33a0:	0000a4dd 	.word	0x0000a4dd
    33a4:	0000a7cc 	.word	0x0000a7cc
    33a8:	000046a1 	.word	0x000046a1
    33ac:	0000a6f8 	.word	0x0000a6f8
    33b0:	00000fff 	.word	0x00000fff
    33b4:	00806024 	.word	0x00806024
    33b8:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    33bc:	7cf2      	ldrb	r2, [r6, #19]
    33be:	2a00      	cmp	r2, #0
    33c0:	d00f      	beq.n	33e2 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    33c2:	69f2      	ldr	r2, [r6, #28]
    33c4:	2180      	movs	r1, #128	; 0x80
    33c6:	0089      	lsls	r1, r1, #2
    33c8:	468c      	mov	ip, r1
    33ca:	4462      	add	r2, ip
			if (config->differential_mode &&
    33cc:	491a      	ldr	r1, [pc, #104]	; (3438 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    33ce:	2017      	movs	r0, #23
			if (config->differential_mode &&
    33d0:	428a      	cmp	r2, r1
    33d2:	d900      	bls.n	33d6 <adc_init+0x386>
    33d4:	e64f      	b.n	3076 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    33d6:	6a32      	ldr	r2, [r6, #32]
    33d8:	4462      	add	r2, ip
    33da:	4917      	ldr	r1, [pc, #92]	; (3438 <adc_init+0x3e8>)
    33dc:	428a      	cmp	r2, r1
    33de:	d900      	bls.n	33e2 <adc_init+0x392>
    33e0:	e649      	b.n	3076 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    33e2:	4a15      	ldr	r2, [pc, #84]	; (3438 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    33e4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    33e6:	69f1      	ldr	r1, [r6, #28]
    33e8:	4291      	cmp	r1, r2
    33ea:	dd00      	ble.n	33ee <adc_init+0x39e>
    33ec:	e643      	b.n	3076 <adc_init+0x26>
    33ee:	6a31      	ldr	r1, [r6, #32]
    33f0:	4291      	cmp	r1, r2
    33f2:	dd00      	ble.n	33f6 <adc_init+0x3a6>
    33f4:	e63f      	b.n	3076 <adc_init+0x26>
    33f6:	e746      	b.n	3286 <adc_init+0x236>
			if (config->differential_mode &&
    33f8:	7cf2      	ldrb	r2, [r6, #19]
    33fa:	2a00      	cmp	r2, #0
    33fc:	d00f      	beq.n	341e <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    33fe:	69f2      	ldr	r2, [r6, #28]
    3400:	2180      	movs	r1, #128	; 0x80
    3402:	0209      	lsls	r1, r1, #8
    3404:	468c      	mov	ip, r1
    3406:	4462      	add	r2, ip
			if (config->differential_mode &&
    3408:	490c      	ldr	r1, [pc, #48]	; (343c <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    340a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    340c:	428a      	cmp	r2, r1
    340e:	d900      	bls.n	3412 <adc_init+0x3c2>
    3410:	e631      	b.n	3076 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    3412:	6a32      	ldr	r2, [r6, #32]
    3414:	4462      	add	r2, ip
    3416:	4909      	ldr	r1, [pc, #36]	; (343c <adc_init+0x3ec>)
    3418:	428a      	cmp	r2, r1
    341a:	d900      	bls.n	341e <adc_init+0x3ce>
    341c:	e62b      	b.n	3076 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    341e:	4a07      	ldr	r2, [pc, #28]	; (343c <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    3420:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    3422:	69f1      	ldr	r1, [r6, #28]
    3424:	4291      	cmp	r1, r2
    3426:	dd00      	ble.n	342a <adc_init+0x3da>
    3428:	e625      	b.n	3076 <adc_init+0x26>
    342a:	6a31      	ldr	r1, [r6, #32]
    342c:	4291      	cmp	r1, r2
    342e:	dd00      	ble.n	3432 <adc_init+0x3e2>
    3430:	e621      	b.n	3076 <adc_init+0x26>
    3432:	e728      	b.n	3286 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    3434:	2017      	movs	r0, #23
    3436:	e61e      	b.n	3076 <adc_init+0x26>
    3438:	000003ff 	.word	0x000003ff
    343c:	0000ffff 	.word	0x0000ffff

00003440 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    3440:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    3442:	79d8      	ldrb	r0, [r3, #7]
    3444:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
    3446:	4770      	bx	lr

00003448 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    3448:	2300      	movs	r3, #0
    344a:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    344c:	2201      	movs	r2, #1
    344e:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    3450:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    3452:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
    3454:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    3456:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    3458:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    345a:	4770      	bx	lr

0000345c <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    345c:	b5f0      	push	{r4, r5, r6, r7, lr}
    345e:	46c6      	mov	lr, r8
    3460:	b500      	push	{lr}
    3462:	b082      	sub	sp, #8
    3464:	0005      	movs	r5, r0
    3466:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    3468:	6001      	str	r1, [r0, #0]
    346a:	4a27      	ldr	r2, [pc, #156]	; (3508 <dac_init+0xac>)
    346c:	6a10      	ldr	r0, [r2, #32]
    346e:	2380      	movs	r3, #128	; 0x80
    3470:	02db      	lsls	r3, r3, #11
    3472:	4303      	orrs	r3, r0
    3474:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    3476:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    3478:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    347a:	079b      	lsls	r3, r3, #30
    347c:	d503      	bpl.n	3486 <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    347e:	b002      	add	sp, #8
    3480:	bc04      	pop	{r2}
    3482:	4690      	mov	r8, r2
    3484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    3486:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
    3488:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    348a:	07db      	lsls	r3, r3, #31
    348c:	d4f7      	bmi.n	347e <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
    348e:	a901      	add	r1, sp, #4
    3490:	78e3      	ldrb	r3, [r4, #3]
    3492:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    3494:	301c      	adds	r0, #28
    3496:	4b1d      	ldr	r3, [pc, #116]	; (350c <dac_init+0xb0>)
    3498:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    349a:	2021      	movs	r0, #33	; 0x21
    349c:	4b1c      	ldr	r3, [pc, #112]	; (3510 <dac_init+0xb4>)
    349e:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34a0:	2600      	movs	r6, #0
    34a2:	466b      	mov	r3, sp
    34a4:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    34a6:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    34a8:	2301      	movs	r3, #1
    34aa:	466a      	mov	r2, sp
    34ac:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    34ae:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    34b0:	4669      	mov	r1, sp
    34b2:	2002      	movs	r0, #2
    34b4:	4b17      	ldr	r3, [pc, #92]	; (3514 <dac_init+0xb8>)
    34b6:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
    34b8:	682b      	ldr	r3, [r5, #0]
    34ba:	4698      	mov	r8, r3
	module_inst->output = config->output;
    34bc:	7863      	ldrb	r3, [r4, #1]
    34be:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
    34c0:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
    34c2:	79a3      	ldrb	r3, [r4, #6]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    34c4:	1e5a      	subs	r2, r3, #1
    34c6:	4193      	sbcs	r3, r2
    34c8:	009b      	lsls	r3, r3, #2
	new_ctrlb |= config->reference;
    34ca:	7826      	ldrb	r6, [r4, #0]
	if (config->left_adjust) {
    34cc:	78a2      	ldrb	r2, [r4, #2]
    34ce:	2a00      	cmp	r2, #0
    34d0:	d001      	beq.n	34d6 <dac_init+0x7a>
    34d2:	2204      	movs	r2, #4
    34d4:	4316      	orrs	r6, r2
	if (config->databuf_protection_bypass) {
    34d6:	7922      	ldrb	r2, [r4, #4]
    34d8:	2a00      	cmp	r2, #0
    34da:	d001      	beq.n	34e0 <dac_init+0x84>
    34dc:	2210      	movs	r2, #16
    34de:	4316      	orrs	r6, r2
	if (config->voltage_pump_disable) {
    34e0:	7962      	ldrb	r2, [r4, #5]
    34e2:	2a00      	cmp	r2, #0
    34e4:	d001      	beq.n	34ea <dac_init+0x8e>
    34e6:	2208      	movs	r2, #8
    34e8:	4316      	orrs	r6, r2
	dac_module->CTRLA.reg = new_ctrla;
    34ea:	b2db      	uxtb	r3, r3
    34ec:	4642      	mov	r2, r8
    34ee:	7013      	strb	r3, [r2, #0]
	while (dac_is_syncing(module_inst)) {
    34f0:	4f09      	ldr	r7, [pc, #36]	; (3518 <dac_init+0xbc>)
    34f2:	0028      	movs	r0, r5
    34f4:	47b8      	blx	r7
    34f6:	2800      	cmp	r0, #0
    34f8:	d1fb      	bne.n	34f2 <dac_init+0x96>
	dac_module->CTRLB.reg = new_ctrlb;
    34fa:	b2f6      	uxtb	r6, r6
    34fc:	4643      	mov	r3, r8
    34fe:	705e      	strb	r6, [r3, #1]
	module_inst->reference = config->reference;
    3500:	7823      	ldrb	r3, [r4, #0]
    3502:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    3504:	e7bb      	b.n	347e <dac_init+0x22>
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	40000400 	.word	0x40000400
    350c:	000045a9 	.word	0x000045a9
    3510:	0000451d 	.word	0x0000451d
    3514:	000046a1 	.word	0x000046a1
    3518:	00003441 	.word	0x00003441

0000351c <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    351c:	b570      	push	{r4, r5, r6, lr}
    351e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    3520:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    3522:	7873      	ldrb	r3, [r6, #1]
    3524:	7902      	ldrb	r2, [r0, #4]
    3526:	4313      	orrs	r3, r2
    3528:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
    352a:	4d09      	ldr	r5, [pc, #36]	; (3550 <dac_enable+0x34>)
    352c:	0020      	movs	r0, r4
    352e:	47a8      	blx	r5
    3530:	2800      	cmp	r0, #0
    3532:	d1fb      	bne.n	352c <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    3534:	7833      	ldrb	r3, [r6, #0]
    3536:	2202      	movs	r2, #2
    3538:	4313      	orrs	r3, r2
    353a:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    353c:	7963      	ldrb	r3, [r4, #5]
    353e:	2b00      	cmp	r3, #0
    3540:	d104      	bne.n	354c <dac_enable+0x30>
    3542:	4a04      	ldr	r2, [pc, #16]	; (3554 <dac_enable+0x38>)
    3544:	6c13      	ldr	r3, [r2, #64]	; 0x40
    3546:	2104      	movs	r1, #4
    3548:	430b      	orrs	r3, r1
    354a:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    354c:	bd70      	pop	{r4, r5, r6, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	00003441 	.word	0x00003441
    3554:	40000800 	.word	0x40000800

00003558 <dac_disable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_disable(
		struct dac_module *const module_inst)
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    355c:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    355e:	4d05      	ldr	r5, [pc, #20]	; (3574 <dac_disable+0x1c>)
    3560:	0020      	movs	r0, r4
    3562:	47a8      	blx	r5
    3564:	2800      	cmp	r0, #0
    3566:	d1fb      	bne.n	3560 <dac_disable+0x8>
	};

	/* Disable DAC */
	dac_module->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
    3568:	7833      	ldrb	r3, [r6, #0]
    356a:	2202      	movs	r2, #2
    356c:	4393      	bics	r3, r2
    356e:	7033      	strb	r3, [r6, #0]
}
    3570:	bd70      	pop	{r4, r5, r6, pc}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	00003441 	.word	0x00003441

00003578 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
    3578:	4770      	bx	lr

0000357a <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
    357a:	4770      	bx	lr

0000357c <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
    357c:	4770      	bx	lr
	...

00003580 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3580:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3582:	2a00      	cmp	r2, #0
    3584:	d001      	beq.n	358a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3586:	0018      	movs	r0, r3
    3588:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    358a:	008b      	lsls	r3, r1, #2
    358c:	4a06      	ldr	r2, [pc, #24]	; (35a8 <extint_register_callback+0x28>)
    358e:	589b      	ldr	r3, [r3, r2]
    3590:	2b00      	cmp	r3, #0
    3592:	d003      	beq.n	359c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3594:	4283      	cmp	r3, r0
    3596:	d005      	beq.n	35a4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3598:	231d      	movs	r3, #29
    359a:	e7f4      	b.n	3586 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    359c:	0089      	lsls	r1, r1, #2
    359e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    35a0:	2300      	movs	r3, #0
    35a2:	e7f0      	b.n	3586 <extint_register_callback+0x6>
		return STATUS_OK;
    35a4:	2300      	movs	r3, #0
    35a6:	e7ee      	b.n	3586 <extint_register_callback+0x6>
    35a8:	20000648 	.word	0x20000648

000035ac <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    35ac:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    35ae:	2900      	cmp	r1, #0
    35b0:	d001      	beq.n	35b6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    35b2:	0018      	movs	r0, r3
    35b4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    35b6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    35b8:	281f      	cmp	r0, #31
    35ba:	d800      	bhi.n	35be <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    35bc:	4a02      	ldr	r2, [pc, #8]	; (35c8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    35be:	2301      	movs	r3, #1
    35c0:	4083      	lsls	r3, r0
    35c2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    35c4:	2300      	movs	r3, #0
    35c6:	e7f4      	b.n	35b2 <extint_chan_enable_callback+0x6>
    35c8:	40001800 	.word	0x40001800

000035cc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    35cc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    35ce:	2200      	movs	r2, #0
    35d0:	4b10      	ldr	r3, [pc, #64]	; (3614 <EIC_Handler+0x48>)
    35d2:	701a      	strb	r2, [r3, #0]
    35d4:	2300      	movs	r3, #0
    35d6:	4910      	ldr	r1, [pc, #64]	; (3618 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    35d8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    35da:	4e10      	ldr	r6, [pc, #64]	; (361c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    35dc:	4c0d      	ldr	r4, [pc, #52]	; (3614 <EIC_Handler+0x48>)
    35de:	e00a      	b.n	35f6 <EIC_Handler+0x2a>
		return eics[eic_index];
    35e0:	490d      	ldr	r1, [pc, #52]	; (3618 <EIC_Handler+0x4c>)
    35e2:	e008      	b.n	35f6 <EIC_Handler+0x2a>
    35e4:	7823      	ldrb	r3, [r4, #0]
    35e6:	3301      	adds	r3, #1
    35e8:	b2db      	uxtb	r3, r3
    35ea:	7023      	strb	r3, [r4, #0]
    35ec:	2b0f      	cmp	r3, #15
    35ee:	d810      	bhi.n	3612 <EIC_Handler+0x46>
		return NULL;
    35f0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    35f2:	2b1f      	cmp	r3, #31
    35f4:	d9f4      	bls.n	35e0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    35f6:	0028      	movs	r0, r5
    35f8:	4018      	ands	r0, r3
    35fa:	2201      	movs	r2, #1
    35fc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    35fe:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3600:	4210      	tst	r0, r2
    3602:	d0ef      	beq.n	35e4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3604:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3606:	009b      	lsls	r3, r3, #2
    3608:	599b      	ldr	r3, [r3, r6]
    360a:	2b00      	cmp	r3, #0
    360c:	d0ea      	beq.n	35e4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    360e:	4798      	blx	r3
    3610:	e7e8      	b.n	35e4 <EIC_Handler+0x18>
			}
		}
	}
}
    3612:	bd70      	pop	{r4, r5, r6, pc}
    3614:	20000645 	.word	0x20000645
    3618:	40001800 	.word	0x40001800
    361c:	20000648 	.word	0x20000648

00003620 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3620:	4a04      	ldr	r2, [pc, #16]	; (3634 <_extint_enable+0x14>)
    3622:	7813      	ldrb	r3, [r2, #0]
    3624:	2102      	movs	r1, #2
    3626:	430b      	orrs	r3, r1
    3628:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    362a:	7853      	ldrb	r3, [r2, #1]
    362c:	b25b      	sxtb	r3, r3
    362e:	2b00      	cmp	r3, #0
    3630:	dbfb      	blt.n	362a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3632:	4770      	bx	lr
    3634:	40001800 	.word	0x40001800

00003638 <_system_extint_init>:
{
    3638:	b500      	push	{lr}
    363a:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    363c:	4a12      	ldr	r2, [pc, #72]	; (3688 <_system_extint_init+0x50>)
    363e:	6993      	ldr	r3, [r2, #24]
    3640:	2140      	movs	r1, #64	; 0x40
    3642:	430b      	orrs	r3, r1
    3644:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3646:	a901      	add	r1, sp, #4
    3648:	2300      	movs	r3, #0
    364a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    364c:	2005      	movs	r0, #5
    364e:	4b0f      	ldr	r3, [pc, #60]	; (368c <_system_extint_init+0x54>)
    3650:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    3652:	2005      	movs	r0, #5
    3654:	4b0e      	ldr	r3, [pc, #56]	; (3690 <_system_extint_init+0x58>)
    3656:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3658:	4a0e      	ldr	r2, [pc, #56]	; (3694 <_system_extint_init+0x5c>)
    365a:	7813      	ldrb	r3, [r2, #0]
    365c:	2101      	movs	r1, #1
    365e:	430b      	orrs	r3, r1
    3660:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3662:	7853      	ldrb	r3, [r2, #1]
    3664:	b25b      	sxtb	r3, r3
    3666:	2b00      	cmp	r3, #0
    3668:	dbfb      	blt.n	3662 <_system_extint_init+0x2a>
    366a:	4b0b      	ldr	r3, [pc, #44]	; (3698 <_system_extint_init+0x60>)
    366c:	0019      	movs	r1, r3
    366e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    3670:	2200      	movs	r2, #0
    3672:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3674:	4299      	cmp	r1, r3
    3676:	d1fc      	bne.n	3672 <_system_extint_init+0x3a>
    3678:	2210      	movs	r2, #16
    367a:	4b08      	ldr	r3, [pc, #32]	; (369c <_system_extint_init+0x64>)
    367c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    367e:	4b08      	ldr	r3, [pc, #32]	; (36a0 <_system_extint_init+0x68>)
    3680:	4798      	blx	r3
}
    3682:	b003      	add	sp, #12
    3684:	bd00      	pop	{pc}
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	40000400 	.word	0x40000400
    368c:	000045a9 	.word	0x000045a9
    3690:	0000451d 	.word	0x0000451d
    3694:	40001800 	.word	0x40001800
    3698:	20000648 	.word	0x20000648
    369c:	e000e100 	.word	0xe000e100
    36a0:	00003621 	.word	0x00003621

000036a4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    36a4:	2300      	movs	r3, #0
    36a6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    36a8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    36aa:	2201      	movs	r2, #1
    36ac:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    36ae:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    36b0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    36b2:	3302      	adds	r3, #2
    36b4:	72c3      	strb	r3, [r0, #11]
}
    36b6:	4770      	bx	lr

000036b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    36b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ba:	b083      	sub	sp, #12
    36bc:	0005      	movs	r5, r0
    36be:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36c0:	a901      	add	r1, sp, #4
    36c2:	2300      	movs	r3, #0
    36c4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    36c6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    36c8:	7923      	ldrb	r3, [r4, #4]
    36ca:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    36cc:	7a23      	ldrb	r3, [r4, #8]
    36ce:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    36d0:	7820      	ldrb	r0, [r4, #0]
    36d2:	4b15      	ldr	r3, [pc, #84]	; (3728 <extint_chan_set_config+0x70>)
    36d4:	4798      	blx	r3
		return NULL;
    36d6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    36d8:	2d1f      	cmp	r5, #31
    36da:	d800      	bhi.n	36de <extint_chan_set_config+0x26>
		return eics[eic_index];
    36dc:	4813      	ldr	r0, [pc, #76]	; (372c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    36de:	2207      	movs	r2, #7
    36e0:	402a      	ands	r2, r5
    36e2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    36e4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    36e6:	7aa3      	ldrb	r3, [r4, #10]
    36e8:	2b00      	cmp	r3, #0
    36ea:	d001      	beq.n	36f0 <extint_chan_set_config+0x38>
    36ec:	2308      	movs	r3, #8
    36ee:	431f      	orrs	r7, r3
    36f0:	08eb      	lsrs	r3, r5, #3
    36f2:	009b      	lsls	r3, r3, #2
    36f4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    36f6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    36f8:	260f      	movs	r6, #15
    36fa:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    36fc:	43b1      	bics	r1, r6
			(new_config << config_pos);
    36fe:	4097      	lsls	r7, r2
    3700:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3702:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    3704:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3706:	7a63      	ldrb	r3, [r4, #9]
    3708:	2b00      	cmp	r3, #0
    370a:	d106      	bne.n	371a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    370c:	6943      	ldr	r3, [r0, #20]
    370e:	2201      	movs	r2, #1
    3710:	40aa      	lsls	r2, r5
    3712:	4393      	bics	r3, r2
    3714:	6143      	str	r3, [r0, #20]
	}
}
    3716:	b003      	add	sp, #12
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    371a:	6942      	ldr	r2, [r0, #20]
    371c:	2301      	movs	r3, #1
    371e:	40ab      	lsls	r3, r5
    3720:	4313      	orrs	r3, r2
    3722:	6143      	str	r3, [r0, #20]
    3724:	e7f7      	b.n	3716 <extint_chan_set_config+0x5e>
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	000046a1 	.word	0x000046a1
    372c:	40001800 	.word	0x40001800

00003730 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3730:	b500      	push	{lr}
    3732:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3734:	ab01      	add	r3, sp, #4
    3736:	2280      	movs	r2, #128	; 0x80
    3738:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    373a:	780a      	ldrb	r2, [r1, #0]
    373c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    373e:	784a      	ldrb	r2, [r1, #1]
    3740:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3742:	788a      	ldrb	r2, [r1, #2]
    3744:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3746:	0019      	movs	r1, r3
    3748:	4b01      	ldr	r3, [pc, #4]	; (3750 <port_pin_set_config+0x20>)
    374a:	4798      	blx	r3
}
    374c:	b003      	add	sp, #12
    374e:	bd00      	pop	{pc}
    3750:	000046a1 	.word	0x000046a1

00003754 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3754:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3756:	2207      	movs	r2, #7
    3758:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    375a:	421a      	tst	r2, r3
    375c:	d1fc      	bne.n	3758 <_i2c_master_wait_for_sync+0x4>
}
    375e:	4770      	bx	lr

00003760 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3760:	b5f0      	push	{r4, r5, r6, r7, lr}
    3762:	46c6      	mov	lr, r8
    3764:	b500      	push	{lr}
    3766:	b082      	sub	sp, #8
    3768:	0007      	movs	r7, r0
    376a:	000d      	movs	r5, r1
    376c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    376e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3770:	0008      	movs	r0, r1
    3772:	4b67      	ldr	r3, [pc, #412]	; (3910 <i2c_master_init+0x1b0>)
    3774:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    3776:	4a67      	ldr	r2, [pc, #412]	; (3914 <i2c_master_init+0x1b4>)
    3778:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    377a:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    377c:	2301      	movs	r3, #1
    377e:	40a3      	lsls	r3, r4
    3780:	430b      	orrs	r3, r1
    3782:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3784:	a901      	add	r1, sp, #4
    3786:	7b33      	ldrb	r3, [r6, #12]
    3788:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    378a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    378c:	b2c4      	uxtb	r4, r0
    378e:	0020      	movs	r0, r4
    3790:	4b61      	ldr	r3, [pc, #388]	; (3918 <i2c_master_init+0x1b8>)
    3792:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3794:	0020      	movs	r0, r4
    3796:	4b61      	ldr	r3, [pc, #388]	; (391c <i2c_master_init+0x1bc>)
    3798:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    379a:	7b30      	ldrb	r0, [r6, #12]
    379c:	2100      	movs	r1, #0
    379e:	4b60      	ldr	r3, [pc, #384]	; (3920 <i2c_master_init+0x1c0>)
    37a0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    37a2:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    37a4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    37a6:	079b      	lsls	r3, r3, #30
    37a8:	d503      	bpl.n	37b2 <i2c_master_init+0x52>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    37aa:	b002      	add	sp, #8
    37ac:	bc04      	pop	{r2}
    37ae:	4690      	mov	r8, r2
    37b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    37b2:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    37b4:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    37b6:	07db      	lsls	r3, r3, #31
    37b8:	d4f7      	bmi.n	37aa <i2c_master_init+0x4a>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    37ba:	6838      	ldr	r0, [r7, #0]
    37bc:	4b54      	ldr	r3, [pc, #336]	; (3910 <i2c_master_init+0x1b0>)
    37be:	4698      	mov	r8, r3
    37c0:	4798      	blx	r3
    37c2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    37c4:	4957      	ldr	r1, [pc, #348]	; (3924 <i2c_master_init+0x1c4>)
    37c6:	4b58      	ldr	r3, [pc, #352]	; (3928 <i2c_master_init+0x1c8>)
    37c8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    37ca:	00a4      	lsls	r4, r4, #2
    37cc:	4b57      	ldr	r3, [pc, #348]	; (392c <i2c_master_init+0x1cc>)
    37ce:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    37d0:	2300      	movs	r3, #0
    37d2:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    37d4:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    37d6:	2400      	movs	r4, #0
    37d8:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    37da:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    37dc:	2225      	movs	r2, #37	; 0x25
    37de:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
    37e0:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    37e2:	3314      	adds	r3, #20
    37e4:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    37e6:	683d      	ldr	r5, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    37e8:	0028      	movs	r0, r5
    37ea:	47c0      	blx	r8
    37ec:	2380      	movs	r3, #128	; 0x80
    37ee:	466a      	mov	r2, sp
    37f0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    37f2:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    37f4:	2301      	movs	r3, #1
    37f6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    37f8:	70d4      	strb	r4, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    37fa:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    37fc:	6a34      	ldr	r4, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    37fe:	2800      	cmp	r0, #0
    3800:	d070      	beq.n	38e4 <i2c_master_init+0x184>
	pin_conf.mux_position = pad0 & 0xFFFF;
    3802:	466b      	mov	r3, sp
    3804:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3806:	2302      	movs	r3, #2
    3808:	466a      	mov	r2, sp
    380a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    380c:	0c00      	lsrs	r0, r0, #16
    380e:	b2c0      	uxtb	r0, r0
    3810:	4669      	mov	r1, sp
    3812:	4b47      	ldr	r3, [pc, #284]	; (3930 <i2c_master_init+0x1d0>)
    3814:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    3816:	2c00      	cmp	r4, #0
    3818:	d069      	beq.n	38ee <i2c_master_init+0x18e>
	pin_conf.mux_position = pad1 & 0xFFFF;
    381a:	466b      	mov	r3, sp
    381c:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    381e:	2302      	movs	r3, #2
    3820:	466a      	mov	r2, sp
    3822:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3824:	0c24      	lsrs	r4, r4, #16
    3826:	b2e0      	uxtb	r0, r4
    3828:	4669      	mov	r1, sp
    382a:	4b41      	ldr	r3, [pc, #260]	; (3930 <i2c_master_init+0x1d0>)
    382c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    382e:	8ab3      	ldrh	r3, [r6, #20]
    3830:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    3832:	8af3      	ldrh	r3, [r6, #22]
    3834:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    3836:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3838:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    383a:	2b00      	cmp	r3, #0
    383c:	d104      	bne.n	3848 <i2c_master_init+0xe8>
    383e:	4b3d      	ldr	r3, [pc, #244]	; (3934 <i2c_master_init+0x1d4>)
    3840:	789b      	ldrb	r3, [r3, #2]
    3842:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3844:	0fdb      	lsrs	r3, r3, #31
    3846:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    3848:	6933      	ldr	r3, [r6, #16]
    384a:	68b1      	ldr	r1, [r6, #8]
    384c:	430b      	orrs	r3, r1
    384e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    3850:	2224      	movs	r2, #36	; 0x24
    3852:	5cb2      	ldrb	r2, [r6, r2]
    3854:	2a00      	cmp	r2, #0
    3856:	d002      	beq.n	385e <i2c_master_init+0xfe>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3858:	2280      	movs	r2, #128	; 0x80
    385a:	05d2      	lsls	r2, r2, #23
    385c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    385e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    3860:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit) {
    3862:	222c      	movs	r2, #44	; 0x2c
    3864:	5cb2      	ldrb	r2, [r6, r2]
    3866:	2a00      	cmp	r2, #0
    3868:	d002      	beq.n	3870 <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    386a:	2280      	movs	r2, #128	; 0x80
    386c:	0512      	lsls	r2, r2, #20
    386e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    3870:	222d      	movs	r2, #45	; 0x2d
    3872:	5cb2      	ldrb	r2, [r6, r2]
    3874:	2a00      	cmp	r2, #0
    3876:	d002      	beq.n	387e <i2c_master_init+0x11e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3878:	2280      	movs	r2, #128	; 0x80
    387a:	0412      	lsls	r2, r2, #16
    387c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    387e:	222e      	movs	r2, #46	; 0x2e
    3880:	5cb2      	ldrb	r2, [r6, r2]
    3882:	2a00      	cmp	r2, #0
    3884:	d002      	beq.n	388c <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3886:	2280      	movs	r2, #128	; 0x80
    3888:	03d2      	lsls	r2, r2, #15
    388a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    388c:	682a      	ldr	r2, [r5, #0]
    388e:	4313      	orrs	r3, r2
    3890:	602b      	str	r3, [r5, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3892:	2380      	movs	r3, #128	; 0x80
    3894:	005b      	lsls	r3, r3, #1
    3896:	606b      	str	r3, [r5, #4]
	uint32_t fscl        = 1000*config->baud_rate;
    3898:	27fa      	movs	r7, #250	; 0xfa
    389a:	00bf      	lsls	r7, r7, #2
    389c:	6833      	ldr	r3, [r6, #0]
    389e:	435f      	muls	r7, r3
	int32_t  denominator = 2*fscl;
    38a0:	007b      	lsls	r3, r7, #1
    38a2:	4698      	mov	r8, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
    38a4:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    38a6:	4c24      	ldr	r4, [pc, #144]	; (3938 <i2c_master_init+0x1d8>)
    38a8:	4360      	muls	r0, r4
    38aa:	4924      	ldr	r1, [pc, #144]	; (393c <i2c_master_init+0x1dc>)
    38ac:	4b24      	ldr	r3, [pc, #144]	; (3940 <i2c_master_init+0x1e0>)
    38ae:	4798      	blx	r3
    38b0:	300a      	adds	r0, #10
    38b2:	4378      	muls	r0, r7
    38b4:	1a20      	subs	r0, r4, r0
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    38b6:	4440      	add	r0, r8
    38b8:	3801      	subs	r0, #1
    38ba:	4641      	mov	r1, r8
    38bc:	4b21      	ldr	r3, [pc, #132]	; (3944 <i2c_master_init+0x1e4>)
    38be:	4798      	blx	r3
    38c0:	0004      	movs	r4, r0
	if (tmp_baud > 255 || tmp_baud < 0) {
    38c2:	2040      	movs	r0, #64	; 0x40
    38c4:	2cff      	cmp	r4, #255	; 0xff
    38c6:	d900      	bls.n	38ca <i2c_master_init+0x16a>
    38c8:	e76f      	b.n	37aa <i2c_master_init+0x4a>
		tmp_baud_hs = (int32_t)(div_ceil(
    38ca:	6873      	ldr	r3, [r6, #4]
    38cc:	21fa      	movs	r1, #250	; 0xfa
    38ce:	00c9      	lsls	r1, r1, #3
    38d0:	4359      	muls	r1, r3
    38d2:	4b1d      	ldr	r3, [pc, #116]	; (3948 <i2c_master_init+0x1e8>)
    38d4:	18c8      	adds	r0, r1, r3
    38d6:	4b1a      	ldr	r3, [pc, #104]	; (3940 <i2c_master_init+0x1e0>)
    38d8:	4798      	blx	r3
				(2000*(config->baud_rate_high_speed))) - 1);
    38da:	3801      	subs	r0, #1
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    38dc:	28ff      	cmp	r0, #255	; 0xff
    38de:	d90c      	bls.n	38fa <i2c_master_init+0x19a>
    38e0:	2040      	movs	r0, #64	; 0x40
    38e2:	e762      	b.n	37aa <i2c_master_init+0x4a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    38e4:	2100      	movs	r1, #0
    38e6:	0028      	movs	r0, r5
    38e8:	4b18      	ldr	r3, [pc, #96]	; (394c <i2c_master_init+0x1ec>)
    38ea:	4798      	blx	r3
    38ec:	e789      	b.n	3802 <i2c_master_init+0xa2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    38ee:	2101      	movs	r1, #1
    38f0:	0028      	movs	r0, r5
    38f2:	4b16      	ldr	r3, [pc, #88]	; (394c <i2c_master_init+0x1ec>)
    38f4:	4798      	blx	r3
    38f6:	0004      	movs	r4, r0
    38f8:	e78f      	b.n	381a <i2c_master_init+0xba>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    38fa:	0400      	lsls	r0, r0, #16
    38fc:	23ff      	movs	r3, #255	; 0xff
    38fe:	041b      	lsls	r3, r3, #16
    3900:	4018      	ands	r0, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3902:	23ff      	movs	r3, #255	; 0xff
    3904:	4023      	ands	r3, r4
    3906:	4318      	orrs	r0, r3
    3908:	60e8      	str	r0, [r5, #12]
	enum status_code tmp_status_code = STATUS_OK;
    390a:	2000      	movs	r0, #0
    390c:	e74d      	b.n	37aa <i2c_master_init+0x4a>
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	00004305 	.word	0x00004305
    3914:	40000400 	.word	0x40000400
    3918:	000045a9 	.word	0x000045a9
    391c:	0000451d 	.word	0x0000451d
    3920:	00004141 	.word	0x00004141
    3924:	00003d5d 	.word	0x00003d5d
    3928:	00004341 	.word	0x00004341
    392c:	20000688 	.word	0x20000688
    3930:	000046a1 	.word	0x000046a1
    3934:	41002000 	.word	0x41002000
    3938:	02dc6c00 	.word	0x02dc6c00
    393c:	3b9aca00 	.word	0x3b9aca00
    3940:	00008bd5 	.word	0x00008bd5
    3944:	00008ce9 	.word	0x00008ce9
    3948:	02dc6bff 	.word	0x02dc6bff
    394c:	0000418d 	.word	0x0000418d

00003950 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3950:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3952:	7e1a      	ldrb	r2, [r3, #24]
    3954:	0792      	lsls	r2, r2, #30
    3956:	d507      	bpl.n	3968 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3958:	2202      	movs	r2, #2
    395a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    395c:	8b5b      	ldrh	r3, [r3, #26]
    395e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3960:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    3962:	17db      	asrs	r3, r3, #31
    3964:	4018      	ands	r0, r3
}
    3966:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3968:	8b5a      	ldrh	r2, [r3, #26]
    396a:	0752      	lsls	r2, r2, #29
    396c:	d506      	bpl.n	397c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    396e:	6859      	ldr	r1, [r3, #4]
    3970:	22c0      	movs	r2, #192	; 0xc0
    3972:	0292      	lsls	r2, r2, #10
    3974:	430a      	orrs	r2, r1
    3976:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    3978:	2018      	movs	r0, #24
    397a:	e7f4      	b.n	3966 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    397c:	2000      	movs	r0, #0
    397e:	e7f2      	b.n	3966 <_i2c_master_address_response+0x16>

00003980 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3980:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3982:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3984:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3986:	2401      	movs	r4, #1
    3988:	2502      	movs	r5, #2
    398a:	7e11      	ldrb	r1, [r2, #24]
    398c:	4221      	tst	r1, r4
    398e:	d10b      	bne.n	39a8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3990:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3992:	4229      	tst	r1, r5
    3994:	d106      	bne.n	39a4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3996:	3301      	adds	r3, #1
    3998:	b29b      	uxth	r3, r3
    399a:	8901      	ldrh	r1, [r0, #8]
    399c:	4299      	cmp	r1, r3
    399e:	d8f4      	bhi.n	398a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    39a0:	2012      	movs	r0, #18
    39a2:	e002      	b.n	39aa <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    39a4:	2000      	movs	r0, #0
    39a6:	e000      	b.n	39aa <_i2c_master_wait_for_bus+0x2a>
    39a8:	2000      	movs	r0, #0
}
    39aa:	bd30      	pop	{r4, r5, pc}

000039ac <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    39ac:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    39ae:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    39b0:	6862      	ldr	r2, [r4, #4]
    39b2:	2380      	movs	r3, #128	; 0x80
    39b4:	02db      	lsls	r3, r3, #11
    39b6:	4313      	orrs	r3, r2
    39b8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    39ba:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    39bc:	4b02      	ldr	r3, [pc, #8]	; (39c8 <_i2c_master_send_hs_master_code+0x1c>)
    39be:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    39c0:	2301      	movs	r3, #1
    39c2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    39c4:	bd10      	pop	{r4, pc}
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	00003981 	.word	0x00003981

000039cc <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    39cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ce:	46de      	mov	lr, fp
    39d0:	4657      	mov	r7, sl
    39d2:	464e      	mov	r6, r9
    39d4:	4645      	mov	r5, r8
    39d6:	b5e0      	push	{r5, r6, r7, lr}
    39d8:	b083      	sub	sp, #12
    39da:	0006      	movs	r6, r0
    39dc:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    39de:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    39e0:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    39e2:	682b      	ldr	r3, [r5, #0]
    39e4:	011b      	lsls	r3, r3, #4
    39e6:	0fdb      	lsrs	r3, r3, #31
    39e8:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    39ea:	7a4b      	ldrb	r3, [r1, #9]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d123      	bne.n	3a38 <_i2c_master_read_packet+0x6c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39f0:	686b      	ldr	r3, [r5, #4]
    39f2:	4a51      	ldr	r2, [pc, #324]	; (3b38 <_i2c_master_read_packet+0x16c>)
    39f4:	4013      	ands	r3, r2
    39f6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    39f8:	464b      	mov	r3, r9
    39fa:	7a1b      	ldrb	r3, [r3, #8]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d11f      	bne.n	3a40 <_i2c_master_read_packet+0x74>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a00:	464b      	mov	r3, r9
    3a02:	881b      	ldrh	r3, [r3, #0]
    3a04:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a06:	464a      	mov	r2, r9
    3a08:	7a52      	ldrb	r2, [r2, #9]
    3a0a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3a0c:	4313      	orrs	r3, r2
    3a0e:	2201      	movs	r2, #1
    3a10:	4313      	orrs	r3, r2
    3a12:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a14:	0030      	movs	r0, r6
    3a16:	4b49      	ldr	r3, [pc, #292]	; (3b3c <_i2c_master_read_packet+0x170>)
    3a18:	4798      	blx	r3
    3a1a:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3a1c:	686b      	ldr	r3, [r5, #4]
    3a1e:	4a46      	ldr	r2, [pc, #280]	; (3b38 <_i2c_master_read_packet+0x16c>)
    3a20:	4013      	ands	r3, r2
    3a22:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a24:	2800      	cmp	r0, #0
    3a26:	d034      	beq.n	3a92 <_i2c_master_read_packet+0xc6>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    3a28:	9801      	ldr	r0, [sp, #4]
    3a2a:	b003      	add	sp, #12
    3a2c:	bc3c      	pop	{r2, r3, r4, r5}
    3a2e:	4690      	mov	r8, r2
    3a30:	4699      	mov	r9, r3
    3a32:	46a2      	mov	sl, r4
    3a34:	46ab      	mov	fp, r5
    3a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3a38:	7a89      	ldrb	r1, [r1, #10]
    3a3a:	4b41      	ldr	r3, [pc, #260]	; (3b40 <_i2c_master_read_packet+0x174>)
    3a3c:	4798      	blx	r3
    3a3e:	e7d7      	b.n	39f0 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    3a40:	464b      	mov	r3, r9
    3a42:	881b      	ldrh	r3, [r3, #0]
    3a44:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a46:	464a      	mov	r2, r9
    3a48:	7a52      	ldrb	r2, [r2, #9]
    3a4a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3a4c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a4e:	2280      	movs	r2, #128	; 0x80
    3a50:	0212      	lsls	r2, r2, #8
    3a52:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    3a54:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    3a56:	0030      	movs	r0, r6
    3a58:	4b38      	ldr	r3, [pc, #224]	; (3b3c <_i2c_master_read_packet+0x170>)
    3a5a:	4798      	blx	r3
    3a5c:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3a5e:	686b      	ldr	r3, [r5, #4]
    3a60:	4a35      	ldr	r2, [pc, #212]	; (3b38 <_i2c_master_read_packet+0x16c>)
    3a62:	4013      	ands	r3, r2
    3a64:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    3a66:	2800      	cmp	r0, #0
    3a68:	d1de      	bne.n	3a28 <_i2c_master_read_packet+0x5c>
			tmp_status = _i2c_master_address_response(module);
    3a6a:	0030      	movs	r0, r6
    3a6c:	4b35      	ldr	r3, [pc, #212]	; (3b44 <_i2c_master_read_packet+0x178>)
    3a6e:	4798      	blx	r3
    3a70:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    3a72:	2800      	cmp	r0, #0
    3a74:	d1d8      	bne.n	3a28 <_i2c_master_read_packet+0x5c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a76:	464b      	mov	r3, r9
    3a78:	881b      	ldrh	r3, [r3, #0]
    3a7a:	0a1b      	lsrs	r3, r3, #8
    3a7c:	2278      	movs	r2, #120	; 0x78
    3a7e:	4313      	orrs	r3, r2
    3a80:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a82:	464a      	mov	r2, r9
    3a84:	7a52      	ldrb	r2, [r2, #9]
    3a86:	0392      	lsls	r2, r2, #14
    3a88:	2101      	movs	r1, #1
    3a8a:	430a      	orrs	r2, r1
    3a8c:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3a8e:	626b      	str	r3, [r5, #36]	; 0x24
    3a90:	e7c0      	b.n	3a14 <_i2c_master_read_packet+0x48>
		tmp_status = _i2c_master_address_response(module);
    3a92:	0030      	movs	r0, r6
    3a94:	4b2b      	ldr	r3, [pc, #172]	; (3b44 <_i2c_master_read_packet+0x178>)
    3a96:	4798      	blx	r3
    3a98:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3a9a:	2800      	cmp	r0, #0
    3a9c:	d1c4      	bne.n	3a28 <_i2c_master_read_packet+0x5c>
    3a9e:	3c01      	subs	r4, #1
    3aa0:	b2a4      	uxth	r4, r4
    3aa2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    3aa4:	4b28      	ldr	r3, [pc, #160]	; (3b48 <_i2c_master_read_packet+0x17c>)
    3aa6:	469b      	mov	fp, r3
    3aa8:	e015      	b.n	3ad6 <_i2c_master_read_packet+0x10a>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3aaa:	2c01      	cmp	r4, #1
    3aac:	d020      	beq.n	3af0 <_i2c_master_read_packet+0x124>
				_i2c_master_wait_for_sync(module);
    3aae:	0030      	movs	r0, r6
    3ab0:	4b26      	ldr	r3, [pc, #152]	; (3b4c <_i2c_master_read_packet+0x180>)
    3ab2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3ab4:	4643      	mov	r3, r8
    3ab6:	1c5f      	adds	r7, r3, #1
    3ab8:	b2bf      	uxth	r7, r7
    3aba:	2328      	movs	r3, #40	; 0x28
    3abc:	5ceb      	ldrb	r3, [r5, r3]
    3abe:	464a      	mov	r2, r9
    3ac0:	6852      	ldr	r2, [r2, #4]
    3ac2:	4641      	mov	r1, r8
    3ac4:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    3ac6:	0030      	movs	r0, r6
    3ac8:	4b1c      	ldr	r3, [pc, #112]	; (3b3c <_i2c_master_read_packet+0x170>)
    3aca:	4798      	blx	r3
    3acc:	3c01      	subs	r4, #1
    3ace:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d115      	bne.n	3b00 <_i2c_master_read_packet+0x134>
				packet->data[counter++] = i2c_module->DATA.reg;
    3ad4:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    3ad6:	455c      	cmp	r4, fp
    3ad8:	d014      	beq.n	3b04 <_i2c_master_read_packet+0x138>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3ada:	8b6b      	ldrh	r3, [r5, #26]
    3adc:	069b      	lsls	r3, r3, #26
    3ade:	d527      	bpl.n	3b30 <_i2c_master_read_packet+0x164>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3ae0:	7af3      	ldrb	r3, [r6, #11]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d0e3      	beq.n	3aae <_i2c_master_read_packet+0xe2>
    3ae6:	4653      	mov	r3, sl
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d1de      	bne.n	3aaa <_i2c_master_read_packet+0xde>
    3aec:	2c00      	cmp	r4, #0
    3aee:	d1de      	bne.n	3aae <_i2c_master_read_packet+0xe2>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3af0:	686a      	ldr	r2, [r5, #4]
    3af2:	2380      	movs	r3, #128	; 0x80
    3af4:	02db      	lsls	r3, r3, #11
    3af6:	4313      	orrs	r3, r2
    3af8:	606b      	str	r3, [r5, #4]
    3afa:	3c01      	subs	r4, #1
    3afc:	b2a4      	uxth	r4, r4
    3afe:	e7ea      	b.n	3ad6 <_i2c_master_read_packet+0x10a>
				packet->data[counter++] = i2c_module->DATA.reg;
    3b00:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    3b02:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3b04:	7ab3      	ldrb	r3, [r6, #10]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d109      	bne.n	3b1e <_i2c_master_read_packet+0x152>
		_i2c_master_wait_for_sync(module);
    3b0a:	0030      	movs	r0, r6
    3b0c:	4b0f      	ldr	r3, [pc, #60]	; (3b4c <_i2c_master_read_packet+0x180>)
    3b0e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3b10:	2328      	movs	r3, #40	; 0x28
    3b12:	5cea      	ldrb	r2, [r5, r3]
    3b14:	464b      	mov	r3, r9
    3b16:	685b      	ldr	r3, [r3, #4]
    3b18:	4641      	mov	r1, r8
    3b1a:	545a      	strb	r2, [r3, r1]
    3b1c:	e784      	b.n	3a28 <_i2c_master_read_packet+0x5c>
			_i2c_master_wait_for_sync(module);
    3b1e:	0030      	movs	r0, r6
    3b20:	4b0a      	ldr	r3, [pc, #40]	; (3b4c <_i2c_master_read_packet+0x180>)
    3b22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b24:	686a      	ldr	r2, [r5, #4]
    3b26:	23c0      	movs	r3, #192	; 0xc0
    3b28:	029b      	lsls	r3, r3, #10
    3b2a:	4313      	orrs	r3, r2
    3b2c:	606b      	str	r3, [r5, #4]
    3b2e:	e7ec      	b.n	3b0a <_i2c_master_read_packet+0x13e>
				return STATUS_ERR_PACKET_COLLISION;
    3b30:	2341      	movs	r3, #65	; 0x41
    3b32:	9301      	str	r3, [sp, #4]
    3b34:	e778      	b.n	3a28 <_i2c_master_read_packet+0x5c>
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	fffbffff 	.word	0xfffbffff
    3b3c:	00003981 	.word	0x00003981
    3b40:	000039ad 	.word	0x000039ad
    3b44:	00003951 	.word	0x00003951
    3b48:	0000ffff 	.word	0x0000ffff
    3b4c:	00003755 	.word	0x00003755

00003b50 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b52:	46de      	mov	lr, fp
    3b54:	4657      	mov	r7, sl
    3b56:	464e      	mov	r6, r9
    3b58:	4645      	mov	r5, r8
    3b5a:	b5e0      	push	{r5, r6, r7, lr}
    3b5c:	b083      	sub	sp, #12
    3b5e:	0006      	movs	r6, r0
    3b60:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b62:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3b64:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    3b66:	4b32      	ldr	r3, [pc, #200]	; (3c30 <_i2c_master_write_packet+0xe0>)
    3b68:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3b6a:	7a7b      	ldrb	r3, [r7, #9]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d11d      	bne.n	3bac <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3b70:	686b      	ldr	r3, [r5, #4]
    3b72:	4a30      	ldr	r2, [pc, #192]	; (3c34 <_i2c_master_write_packet+0xe4>)
    3b74:	4013      	ands	r3, r2
    3b76:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3b78:	7a3b      	ldrb	r3, [r7, #8]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d01b      	beq.n	3bb6 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b7e:	883b      	ldrh	r3, [r7, #0]
    3b80:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3b82:	7a7a      	ldrb	r2, [r7, #9]
    3b84:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b86:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	0212      	lsls	r2, r2, #8
    3b8c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3b8e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3b90:	0030      	movs	r0, r6
    3b92:	4b29      	ldr	r3, [pc, #164]	; (3c38 <_i2c_master_write_packet+0xe8>)
    3b94:	4798      	blx	r3
    3b96:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3b98:	2800      	cmp	r0, #0
    3b9a:	d013      	beq.n	3bc4 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    3b9c:	9801      	ldr	r0, [sp, #4]
    3b9e:	b003      	add	sp, #12
    3ba0:	bc3c      	pop	{r2, r3, r4, r5}
    3ba2:	4690      	mov	r8, r2
    3ba4:	4699      	mov	r9, r3
    3ba6:	46a2      	mov	sl, r4
    3ba8:	46ab      	mov	fp, r5
    3baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3bac:	7ab9      	ldrb	r1, [r7, #10]
    3bae:	0030      	movs	r0, r6
    3bb0:	4b22      	ldr	r3, [pc, #136]	; (3c3c <_i2c_master_write_packet+0xec>)
    3bb2:	4798      	blx	r3
    3bb4:	e7dc      	b.n	3b70 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bb6:	883b      	ldrh	r3, [r7, #0]
    3bb8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3bba:	7a7a      	ldrb	r2, [r7, #9]
    3bbc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3bbe:	4313      	orrs	r3, r2
    3bc0:	626b      	str	r3, [r5, #36]	; 0x24
    3bc2:	e7e5      	b.n	3b90 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    3bc4:	0030      	movs	r0, r6
    3bc6:	4b1e      	ldr	r3, [pc, #120]	; (3c40 <_i2c_master_write_packet+0xf0>)
    3bc8:	4798      	blx	r3
    3bca:	1e03      	subs	r3, r0, #0
    3bcc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3bce:	d1e5      	bne.n	3b9c <_i2c_master_write_packet+0x4c>
    3bd0:	46a0      	mov	r8, r4
    3bd2:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3bd4:	3320      	adds	r3, #32
    3bd6:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    3bd8:	4b15      	ldr	r3, [pc, #84]	; (3c30 <_i2c_master_write_packet+0xe0>)
    3bda:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    3bdc:	4b16      	ldr	r3, [pc, #88]	; (3c38 <_i2c_master_write_packet+0xe8>)
    3bde:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    3be0:	4544      	cmp	r4, r8
    3be2:	d015      	beq.n	3c10 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3be4:	8b6b      	ldrh	r3, [r5, #26]
    3be6:	464a      	mov	r2, r9
    3be8:	4213      	tst	r3, r2
    3bea:	d01d      	beq.n	3c28 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    3bec:	0030      	movs	r0, r6
    3bee:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3bf0:	687b      	ldr	r3, [r7, #4]
    3bf2:	5d1a      	ldrb	r2, [r3, r4]
    3bf4:	2328      	movs	r3, #40	; 0x28
    3bf6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    3bf8:	0030      	movs	r0, r6
    3bfa:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    3bfc:	2800      	cmp	r0, #0
    3bfe:	d106      	bne.n	3c0e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3c00:	8b6b      	ldrh	r3, [r5, #26]
    3c02:	3401      	adds	r4, #1
    3c04:	075b      	lsls	r3, r3, #29
    3c06:	d5eb      	bpl.n	3be0 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    3c08:	231e      	movs	r3, #30
    3c0a:	9301      	str	r3, [sp, #4]
    3c0c:	e000      	b.n	3c10 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    3c0e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3c10:	7ab3      	ldrb	r3, [r6, #10]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d0c2      	beq.n	3b9c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    3c16:	0030      	movs	r0, r6
    3c18:	4b05      	ldr	r3, [pc, #20]	; (3c30 <_i2c_master_write_packet+0xe0>)
    3c1a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3c1c:	686a      	ldr	r2, [r5, #4]
    3c1e:	23c0      	movs	r3, #192	; 0xc0
    3c20:	029b      	lsls	r3, r3, #10
    3c22:	4313      	orrs	r3, r2
    3c24:	606b      	str	r3, [r5, #4]
    3c26:	e7b9      	b.n	3b9c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    3c28:	2341      	movs	r3, #65	; 0x41
    3c2a:	9301      	str	r3, [sp, #4]
    3c2c:	e7b6      	b.n	3b9c <_i2c_master_write_packet+0x4c>
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	00003755 	.word	0x00003755
    3c34:	fffbffff 	.word	0xfffbffff
    3c38:	00003981 	.word	0x00003981
    3c3c:	000039ad 	.word	0x000039ad
    3c40:	00003951 	.word	0x00003951

00003c44 <i2c_master_read_packet_wait_no_stop>:
{
    3c44:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    3c46:	8b83      	ldrh	r3, [r0, #28]
    3c48:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3c4a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d001      	beq.n	3c54 <i2c_master_read_packet_wait_no_stop+0x10>
}
    3c50:	0010      	movs	r0, r2
    3c52:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    3c54:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3c56:	3301      	adds	r3, #1
    3c58:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    3c5a:	4b02      	ldr	r3, [pc, #8]	; (3c64 <i2c_master_read_packet_wait_no_stop+0x20>)
    3c5c:	4798      	blx	r3
    3c5e:	0002      	movs	r2, r0
    3c60:	e7f6      	b.n	3c50 <i2c_master_read_packet_wait_no_stop+0xc>
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	000039cd 	.word	0x000039cd

00003c68 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3c68:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3c6a:	8b83      	ldrh	r3, [r0, #28]
    3c6c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3c6e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3c70:	2b00      	cmp	r3, #0
    3c72:	d001      	beq.n	3c78 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    3c74:	0010      	movs	r0, r2
    3c76:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    3c78:	3301      	adds	r3, #1
    3c7a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3c7c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    3c7e:	4b02      	ldr	r3, [pc, #8]	; (3c88 <i2c_master_write_packet_wait+0x20>)
    3c80:	4798      	blx	r3
    3c82:	0002      	movs	r2, r0
    3c84:	e7f6      	b.n	3c74 <i2c_master_write_packet_wait+0xc>
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	00003b51 	.word	0x00003b51

00003c8c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3c8c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3c8e:	2207      	movs	r2, #7
    3c90:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    3c92:	421a      	tst	r2, r3
    3c94:	d1fc      	bne.n	3c90 <_i2c_master_wait_for_sync+0x4>
}
    3c96:	4770      	bx	lr

00003c98 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3c98:	b570      	push	{r4, r5, r6, lr}
    3c9a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c9c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3c9e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3ca0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3ca2:	8b83      	ldrh	r3, [r0, #28]
    3ca4:	1aed      	subs	r5, r5, r3
    3ca6:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    3ca8:	8b83      	ldrh	r3, [r0, #28]
    3caa:	3b01      	subs	r3, #1
    3cac:	b29b      	uxth	r3, r3
    3cae:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    3cb0:	0113      	lsls	r3, r2, #4
    3cb2:	d51d      	bpl.n	3cf0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    3cb4:	7ac3      	ldrb	r3, [r0, #11]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d003      	beq.n	3cc2 <_i2c_master_read+0x2a>
    3cba:	8b83      	ldrh	r3, [r0, #28]
    3cbc:	b29b      	uxth	r3, r3
    3cbe:	2b01      	cmp	r3, #1
    3cc0:	d010      	beq.n	3ce4 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    3cc2:	8ba3      	ldrh	r3, [r4, #28]
    3cc4:	b29b      	uxth	r3, r3
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d102      	bne.n	3cd0 <_i2c_master_read+0x38>
		if (module->send_stop) {
    3cca:	7aa3      	ldrb	r3, [r4, #10]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d11c      	bne.n	3d0a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3cd0:	0020      	movs	r0, r4
    3cd2:	4b12      	ldr	r3, [pc, #72]	; (3d1c <_i2c_master_read+0x84>)
    3cd4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3cd6:	6a23      	ldr	r3, [r4, #32]
    3cd8:	195d      	adds	r5, r3, r5
    3cda:	2328      	movs	r3, #40	; 0x28
    3cdc:	5cf3      	ldrb	r3, [r6, r3]
    3cde:	b2db      	uxtb	r3, r3
    3ce0:	702b      	strb	r3, [r5, #0]
}
    3ce2:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3ce4:	6872      	ldr	r2, [r6, #4]
    3ce6:	2380      	movs	r3, #128	; 0x80
    3ce8:	02db      	lsls	r3, r3, #11
    3cea:	4313      	orrs	r3, r2
    3cec:	6073      	str	r3, [r6, #4]
    3cee:	e7e8      	b.n	3cc2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    3cf0:	7ac3      	ldrb	r3, [r0, #11]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d0e5      	beq.n	3cc2 <_i2c_master_read+0x2a>
    3cf6:	8b83      	ldrh	r3, [r0, #28]
    3cf8:	b29b      	uxth	r3, r3
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d1e1      	bne.n	3cc2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3cfe:	6872      	ldr	r2, [r6, #4]
    3d00:	2380      	movs	r3, #128	; 0x80
    3d02:	02db      	lsls	r3, r3, #11
    3d04:	4313      	orrs	r3, r2
    3d06:	6073      	str	r3, [r6, #4]
    3d08:	e7db      	b.n	3cc2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    3d0a:	0020      	movs	r0, r4
    3d0c:	4b03      	ldr	r3, [pc, #12]	; (3d1c <_i2c_master_read+0x84>)
    3d0e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d10:	6872      	ldr	r2, [r6, #4]
    3d12:	23c0      	movs	r3, #192	; 0xc0
    3d14:	029b      	lsls	r3, r3, #10
    3d16:	4313      	orrs	r3, r2
    3d18:	6073      	str	r3, [r6, #4]
    3d1a:	e7d9      	b.n	3cd0 <_i2c_master_read+0x38>
    3d1c:	00003c8d 	.word	0x00003c8d

00003d20 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3d20:	b570      	push	{r4, r5, r6, lr}
    3d22:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3d24:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3d26:	8b6b      	ldrh	r3, [r5, #26]
    3d28:	075b      	lsls	r3, r3, #29
    3d2a:	d503      	bpl.n	3d34 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3d2c:	221e      	movs	r2, #30
    3d2e:	2325      	movs	r3, #37	; 0x25
    3d30:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    3d32:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    3d34:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3d36:	8b83      	ldrh	r3, [r0, #28]
    3d38:	1af6      	subs	r6, r6, r3
    3d3a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    3d3c:	8b83      	ldrh	r3, [r0, #28]
    3d3e:	3b01      	subs	r3, #1
    3d40:	b29b      	uxth	r3, r3
    3d42:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    3d44:	4b04      	ldr	r3, [pc, #16]	; (3d58 <_i2c_master_write+0x38>)
    3d46:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3d48:	6a23      	ldr	r3, [r4, #32]
    3d4a:	199e      	adds	r6, r3, r6
    3d4c:	7833      	ldrb	r3, [r6, #0]
    3d4e:	b2db      	uxtb	r3, r3
    3d50:	2228      	movs	r2, #40	; 0x28
    3d52:	54ab      	strb	r3, [r5, r2]
    3d54:	e7ed      	b.n	3d32 <_i2c_master_write+0x12>
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	00003c8d 	.word	0x00003c8d

00003d5c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    3d5c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    3d5e:	0080      	lsls	r0, r0, #2
    3d60:	4b75      	ldr	r3, [pc, #468]	; (3f38 <_i2c_master_interrupt_handler+0x1dc>)
    3d62:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3d64:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3d66:	682b      	ldr	r3, [r5, #0]
    3d68:	011b      	lsls	r3, r3, #4
    3d6a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    3d6c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    3d6e:	7e26      	ldrb	r6, [r4, #24]
    3d70:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    3d72:	8b63      	ldrh	r3, [r4, #26]
    3d74:	b29b      	uxth	r3, r3
    3d76:	2b00      	cmp	r3, #0
    3d78:	d103      	bne.n	3d82 <_i2c_master_interrupt_handler+0x26>
    3d7a:	8ba3      	ldrh	r3, [r4, #28]
    3d7c:	b29b      	uxth	r3, r3
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d123      	bne.n	3dca <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3d82:	8b63      	ldrh	r3, [r4, #26]
    3d84:	b29b      	uxth	r3, r3
    3d86:	2b00      	cmp	r3, #0
    3d88:	d008      	beq.n	3d9c <_i2c_master_interrupt_handler+0x40>
    3d8a:	8ba3      	ldrh	r3, [r4, #28]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d104      	bne.n	3d9c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    3d92:	3325      	adds	r3, #37	; 0x25
    3d94:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3d96:	2b05      	cmp	r3, #5
    3d98:	d100      	bne.n	3d9c <_i2c_master_interrupt_handler+0x40>
    3d9a:	e06d      	b.n	3e78 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    3d9c:	8b63      	ldrh	r3, [r4, #26]
    3d9e:	b29b      	uxth	r3, r3
    3da0:	2b00      	cmp	r3, #0
    3da2:	d024      	beq.n	3dee <_i2c_master_interrupt_handler+0x92>
    3da4:	8ba3      	ldrh	r3, [r4, #28]
    3da6:	b29b      	uxth	r3, r3
    3da8:	2b00      	cmp	r3, #0
    3daa:	d020      	beq.n	3dee <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3dac:	8b6b      	ldrh	r3, [r5, #26]
    3dae:	069b      	lsls	r3, r3, #26
    3db0:	d500      	bpl.n	3db4 <_i2c_master_interrupt_handler+0x58>
    3db2:	e081      	b.n	3eb8 <_i2c_master_interrupt_handler+0x15c>
    3db4:	2a00      	cmp	r2, #0
    3db6:	d004      	beq.n	3dc2 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3db8:	8ba3      	ldrh	r3, [r4, #28]
    3dba:	b29b      	uxth	r3, r3
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d100      	bne.n	3dc2 <_i2c_master_interrupt_handler+0x66>
    3dc0:	e07a      	b.n	3eb8 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3dc2:	2241      	movs	r2, #65	; 0x41
    3dc4:	2325      	movs	r3, #37	; 0x25
    3dc6:	54e2      	strb	r2, [r4, r3]
    3dc8:	e011      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3dca:	7e2b      	ldrb	r3, [r5, #24]
    3dcc:	07db      	lsls	r3, r3, #31
    3dce:	d533      	bpl.n	3e38 <_i2c_master_interrupt_handler+0xdc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3dd0:	2301      	movs	r3, #1
    3dd2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3dd4:	8b6b      	ldrh	r3, [r5, #26]
    3dd6:	079b      	lsls	r3, r3, #30
    3dd8:	d502      	bpl.n	3de0 <_i2c_master_interrupt_handler+0x84>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3dda:	2241      	movs	r2, #65	; 0x41
    3ddc:	2325      	movs	r3, #37	; 0x25
    3dde:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    3de0:	8ba3      	ldrh	r3, [r4, #28]
    3de2:	b29b      	uxth	r3, r3
    3de4:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    3de6:	2325      	movs	r3, #37	; 0x25
    3de8:	5ce3      	ldrb	r3, [r4, r3]
    3dea:	2b05      	cmp	r3, #5
    3dec:	d038      	beq.n	3e60 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3dee:	8b63      	ldrh	r3, [r4, #26]
    3df0:	b29b      	uxth	r3, r3
    3df2:	2b00      	cmp	r3, #0
    3df4:	d007      	beq.n	3e06 <_i2c_master_interrupt_handler+0xaa>
    3df6:	8ba3      	ldrh	r3, [r4, #28]
    3df8:	b29b      	uxth	r3, r3
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d103      	bne.n	3e06 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    3dfe:	3325      	adds	r3, #37	; 0x25
    3e00:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3e02:	2b05      	cmp	r3, #5
    3e04:	d064      	beq.n	3ed0 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    3e06:	2325      	movs	r3, #37	; 0x25
    3e08:	5ce3      	ldrb	r3, [r4, r3]
    3e0a:	2b05      	cmp	r3, #5
    3e0c:	d013      	beq.n	3e36 <_i2c_master_interrupt_handler+0xda>
    3e0e:	2325      	movs	r3, #37	; 0x25
    3e10:	5ce3      	ldrb	r3, [r4, r3]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d00f      	beq.n	3e36 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    3e16:	2303      	movs	r3, #3
    3e18:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3e1a:	2300      	movs	r3, #0
    3e1c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    3e1e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3e20:	3325      	adds	r3, #37	; 0x25
    3e22:	5ce3      	ldrb	r3, [r4, r3]
    3e24:	2b41      	cmp	r3, #65	; 0x41
    3e26:	d003      	beq.n	3e30 <_i2c_master_interrupt_handler+0xd4>
    3e28:	7aa3      	ldrb	r3, [r4, #10]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d000      	beq.n	3e30 <_i2c_master_interrupt_handler+0xd4>
    3e2e:	e075      	b.n	3f1c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    3e30:	0773      	lsls	r3, r6, #29
    3e32:	d500      	bpl.n	3e36 <_i2c_master_interrupt_handler+0xda>
    3e34:	e07b      	b.n	3f2e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    3e36:	bd70      	pop	{r4, r5, r6, pc}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3e38:	8b6b      	ldrh	r3, [r5, #26]
    3e3a:	075b      	lsls	r3, r3, #29
    3e3c:	d5d0      	bpl.n	3de0 <_i2c_master_interrupt_handler+0x84>
		module->status           = STATUS_ERR_BAD_ADDRESS;
    3e3e:	2218      	movs	r2, #24
    3e40:	2325      	movs	r3, #37	; 0x25
    3e42:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
    3e44:	2300      	movs	r3, #0
    3e46:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
    3e48:	7aa3      	ldrb	r3, [r4, #10]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d0c8      	beq.n	3de0 <_i2c_master_interrupt_handler+0x84>
			_i2c_master_wait_for_sync(module);
    3e4e:	0020      	movs	r0, r4
    3e50:	4b3a      	ldr	r3, [pc, #232]	; (3f3c <_i2c_master_interrupt_handler+0x1e0>)
    3e52:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3e54:	686a      	ldr	r2, [r5, #4]
    3e56:	23c0      	movs	r3, #192	; 0xc0
    3e58:	029b      	lsls	r3, r3, #10
    3e5a:	4313      	orrs	r3, r2
    3e5c:	606b      	str	r3, [r5, #4]
    3e5e:	e7bf      	b.n	3de0 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3e60:	331f      	adds	r3, #31
    3e62:	5ce3      	ldrb	r3, [r4, r3]
    3e64:	2b00      	cmp	r3, #0
    3e66:	d003      	beq.n	3e70 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    3e68:	0020      	movs	r0, r4
    3e6a:	4b35      	ldr	r3, [pc, #212]	; (3f40 <_i2c_master_interrupt_handler+0x1e4>)
    3e6c:	4798      	blx	r3
    3e6e:	e7be      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    3e70:	0020      	movs	r0, r4
    3e72:	4b34      	ldr	r3, [pc, #208]	; (3f44 <_i2c_master_interrupt_handler+0x1e8>)
    3e74:	4798      	blx	r3
    3e76:	e7ba      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3e78:	331f      	adds	r3, #31
    3e7a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3e7c:	2b00      	cmp	r3, #0
    3e7e:	d000      	beq.n	3e82 <_i2c_master_interrupt_handler+0x126>
    3e80:	e78c      	b.n	3d9c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    3e82:	3303      	adds	r3, #3
    3e84:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3e86:	2300      	movs	r3, #0
    3e88:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3e8a:	3325      	adds	r3, #37	; 0x25
    3e8c:	2200      	movs	r2, #0
    3e8e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    3e90:	7aa3      	ldrb	r3, [r4, #10]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d107      	bne.n	3ea6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3e96:	2301      	movs	r3, #1
    3e98:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3e9a:	07f3      	lsls	r3, r6, #31
    3e9c:	d5a7      	bpl.n	3dee <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3e9e:	68e3      	ldr	r3, [r4, #12]
    3ea0:	0020      	movs	r0, r4
    3ea2:	4798      	blx	r3
    3ea4:	e7a3      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    3ea6:	0020      	movs	r0, r4
    3ea8:	4b24      	ldr	r3, [pc, #144]	; (3f3c <_i2c_master_interrupt_handler+0x1e0>)
    3eaa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3eac:	686a      	ldr	r2, [r5, #4]
    3eae:	23c0      	movs	r3, #192	; 0xc0
    3eb0:	029b      	lsls	r3, r3, #10
    3eb2:	4313      	orrs	r3, r2
    3eb4:	606b      	str	r3, [r5, #4]
    3eb6:	e7f0      	b.n	3e9a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3eb8:	2324      	movs	r3, #36	; 0x24
    3eba:	5ce3      	ldrb	r3, [r4, r3]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d103      	bne.n	3ec8 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    3ec0:	0020      	movs	r0, r4
    3ec2:	4b20      	ldr	r3, [pc, #128]	; (3f44 <_i2c_master_interrupt_handler+0x1e8>)
    3ec4:	4798      	blx	r3
    3ec6:	e792      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    3ec8:	0020      	movs	r0, r4
    3eca:	4b1d      	ldr	r3, [pc, #116]	; (3f40 <_i2c_master_interrupt_handler+0x1e4>)
    3ecc:	4798      	blx	r3
    3ece:	e78e      	b.n	3dee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    3ed0:	331f      	adds	r3, #31
    3ed2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3ed4:	2b01      	cmp	r3, #1
    3ed6:	d196      	bne.n	3e06 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3ed8:	7e2b      	ldrb	r3, [r5, #24]
    3eda:	079b      	lsls	r3, r3, #30
    3edc:	d501      	bpl.n	3ee2 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3ede:	2302      	movs	r3, #2
    3ee0:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    3ee2:	2303      	movs	r3, #3
    3ee4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3ee6:	2300      	movs	r3, #0
    3ee8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3eea:	3325      	adds	r3, #37	; 0x25
    3eec:	2200      	movs	r2, #0
    3eee:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3ef0:	07b3      	lsls	r3, r6, #30
    3ef2:	d503      	bpl.n	3efc <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    3ef4:	2324      	movs	r3, #36	; 0x24
    3ef6:	5ce3      	ldrb	r3, [r4, r3]
    3ef8:	2b01      	cmp	r3, #1
    3efa:	d00b      	beq.n	3f14 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3efc:	07f3      	lsls	r3, r6, #31
    3efe:	d400      	bmi.n	3f02 <_i2c_master_interrupt_handler+0x1a6>
    3f00:	e781      	b.n	3e06 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3f02:	2324      	movs	r3, #36	; 0x24
    3f04:	5ce3      	ldrb	r3, [r4, r3]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d000      	beq.n	3f0c <_i2c_master_interrupt_handler+0x1b0>
    3f0a:	e77c      	b.n	3e06 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3f0c:	68e3      	ldr	r3, [r4, #12]
    3f0e:	0020      	movs	r0, r4
    3f10:	4798      	blx	r3
    3f12:	e778      	b.n	3e06 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    3f14:	6923      	ldr	r3, [r4, #16]
    3f16:	0020      	movs	r0, r4
    3f18:	4798      	blx	r3
    3f1a:	e774      	b.n	3e06 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    3f1c:	0020      	movs	r0, r4
    3f1e:	4b07      	ldr	r3, [pc, #28]	; (3f3c <_i2c_master_interrupt_handler+0x1e0>)
    3f20:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    3f22:	686a      	ldr	r2, [r5, #4]
    3f24:	23e0      	movs	r3, #224	; 0xe0
    3f26:	02db      	lsls	r3, r3, #11
    3f28:	4313      	orrs	r3, r2
    3f2a:	606b      	str	r3, [r5, #4]
    3f2c:	e780      	b.n	3e30 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3f2e:	6963      	ldr	r3, [r4, #20]
    3f30:	0020      	movs	r0, r4
    3f32:	4798      	blx	r3
}
    3f34:	e77f      	b.n	3e36 <_i2c_master_interrupt_handler+0xda>
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	20000688 	.word	0x20000688
    3f3c:	00003c8d 	.word	0x00003c8d
    3f40:	00003c99 	.word	0x00003c99
    3f44:	00003d21 	.word	0x00003d21

00003f48 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3f48:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3f4a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3f4c:	2340      	movs	r3, #64	; 0x40
    3f4e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3f50:	4281      	cmp	r1, r0
    3f52:	d202      	bcs.n	3f5a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3f54:	0018      	movs	r0, r3
    3f56:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3f58:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    3f5a:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3f5c:	1c63      	adds	r3, r4, #1
    3f5e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    3f60:	4288      	cmp	r0, r1
    3f62:	d9f9      	bls.n	3f58 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3f64:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3f66:	2cff      	cmp	r4, #255	; 0xff
    3f68:	d8f4      	bhi.n	3f54 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    3f6a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    3f6c:	2300      	movs	r3, #0
    3f6e:	e7f1      	b.n	3f54 <_sercom_get_sync_baud_val+0xc>

00003f70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f72:	46de      	mov	lr, fp
    3f74:	4657      	mov	r7, sl
    3f76:	464e      	mov	r6, r9
    3f78:	4645      	mov	r5, r8
    3f7a:	b5e0      	push	{r5, r6, r7, lr}
    3f7c:	b089      	sub	sp, #36	; 0x24
    3f7e:	000c      	movs	r4, r1
    3f80:	9205      	str	r2, [sp, #20]
    3f82:	aa12      	add	r2, sp, #72	; 0x48
    3f84:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3f86:	0005      	movs	r5, r0
    3f88:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3f8a:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3f8c:	42a5      	cmp	r5, r4
    3f8e:	d907      	bls.n	3fa0 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3f90:	0010      	movs	r0, r2
    3f92:	b009      	add	sp, #36	; 0x24
    3f94:	bc3c      	pop	{r2, r3, r4, r5}
    3f96:	4690      	mov	r8, r2
    3f98:	4699      	mov	r9, r3
    3f9a:	46a2      	mov	sl, r4
    3f9c:	46ab      	mov	fp, r5
    3f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d155      	bne.n	4050 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3fa4:	0002      	movs	r2, r0
    3fa6:	0008      	movs	r0, r1
    3fa8:	2100      	movs	r1, #0
    3faa:	4d63      	ldr	r5, [pc, #396]	; (4138 <_sercom_get_async_baud_val+0x1c8>)
    3fac:	47a8      	blx	r5
    3fae:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3fb0:	0026      	movs	r6, r4
    3fb2:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    3fb4:	2300      	movs	r3, #0
    3fb6:	2400      	movs	r4, #0
    3fb8:	9300      	str	r3, [sp, #0]
    3fba:	9401      	str	r4, [sp, #4]
    3fbc:	2200      	movs	r2, #0
    3fbe:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3fc0:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3fc2:	2120      	movs	r1, #32
    3fc4:	468c      	mov	ip, r1
    3fc6:	391f      	subs	r1, #31
    3fc8:	9602      	str	r6, [sp, #8]
    3fca:	9703      	str	r7, [sp, #12]
    3fcc:	e014      	b.n	3ff8 <_sercom_get_async_baud_val+0x88>
    3fce:	4664      	mov	r4, ip
    3fd0:	1a24      	subs	r4, r4, r0
    3fd2:	000d      	movs	r5, r1
    3fd4:	40e5      	lsrs	r5, r4
    3fd6:	46a8      	mov	r8, r5
    3fd8:	e015      	b.n	4006 <_sercom_get_async_baud_val+0x96>
			r = r - d;
    3fda:	9c02      	ldr	r4, [sp, #8]
    3fdc:	9d03      	ldr	r5, [sp, #12]
    3fde:	1b12      	subs	r2, r2, r4
    3fe0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3fe2:	464d      	mov	r5, r9
    3fe4:	9e00      	ldr	r6, [sp, #0]
    3fe6:	9f01      	ldr	r7, [sp, #4]
    3fe8:	4335      	orrs	r5, r6
    3fea:	003c      	movs	r4, r7
    3fec:	4646      	mov	r6, r8
    3fee:	4334      	orrs	r4, r6
    3ff0:	9500      	str	r5, [sp, #0]
    3ff2:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    3ff4:	3801      	subs	r0, #1
    3ff6:	d31d      	bcc.n	4034 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    3ff8:	2420      	movs	r4, #32
    3ffa:	4264      	negs	r4, r4
    3ffc:	1904      	adds	r4, r0, r4
    3ffe:	d4e6      	bmi.n	3fce <_sercom_get_async_baud_val+0x5e>
    4000:	000d      	movs	r5, r1
    4002:	40a5      	lsls	r5, r4
    4004:	46a8      	mov	r8, r5
    4006:	000c      	movs	r4, r1
    4008:	4084      	lsls	r4, r0
    400a:	46a1      	mov	r9, r4
		r = r << 1;
    400c:	1892      	adds	r2, r2, r2
    400e:	415b      	adcs	r3, r3
    4010:	0014      	movs	r4, r2
    4012:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4014:	4646      	mov	r6, r8
    4016:	465f      	mov	r7, fp
    4018:	423e      	tst	r6, r7
    401a:	d003      	beq.n	4024 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    401c:	000e      	movs	r6, r1
    401e:	4326      	orrs	r6, r4
    4020:	0032      	movs	r2, r6
    4022:	002b      	movs	r3, r5
		if (r >= d) {
    4024:	9c02      	ldr	r4, [sp, #8]
    4026:	9d03      	ldr	r5, [sp, #12]
    4028:	429d      	cmp	r5, r3
    402a:	d8e3      	bhi.n	3ff4 <_sercom_get_async_baud_val+0x84>
    402c:	d1d5      	bne.n	3fda <_sercom_get_async_baud_val+0x6a>
    402e:	4294      	cmp	r4, r2
    4030:	d8e0      	bhi.n	3ff4 <_sercom_get_async_baud_val+0x84>
    4032:	e7d2      	b.n	3fda <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4034:	2200      	movs	r2, #0
    4036:	2301      	movs	r3, #1
    4038:	9800      	ldr	r0, [sp, #0]
    403a:	9901      	ldr	r1, [sp, #4]
    403c:	1a12      	subs	r2, r2, r0
    403e:	418b      	sbcs	r3, r1
    4040:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    4042:	0c13      	lsrs	r3, r2, #16
    4044:	040a      	lsls	r2, r1, #16
    4046:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4048:	9b05      	ldr	r3, [sp, #20]
    404a:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    404c:	2200      	movs	r2, #0
    404e:	e79f      	b.n	3f90 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    4050:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4052:	2b01      	cmp	r3, #1
    4054:	d1f8      	bne.n	4048 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    4056:	0f63      	lsrs	r3, r4, #29
    4058:	9304      	str	r3, [sp, #16]
    405a:	00e3      	lsls	r3, r4, #3
    405c:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    405e:	000a      	movs	r2, r1
    4060:	2300      	movs	r3, #0
    4062:	2100      	movs	r1, #0
    4064:	4c34      	ldr	r4, [pc, #208]	; (4138 <_sercom_get_async_baud_val+0x1c8>)
    4066:	47a0      	blx	r4
    4068:	0004      	movs	r4, r0
    406a:	000d      	movs	r5, r1
    406c:	2300      	movs	r3, #0
    406e:	469c      	mov	ip, r3
    4070:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    4072:	3320      	adds	r3, #32
    4074:	469b      	mov	fp, r3
    4076:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    4078:	4663      	mov	r3, ip
    407a:	9307      	str	r3, [sp, #28]
    407c:	e048      	b.n	4110 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    407e:	4659      	mov	r1, fp
    4080:	1bc9      	subs	r1, r1, r7
    4082:	0030      	movs	r0, r6
    4084:	40c8      	lsrs	r0, r1
    4086:	4682      	mov	sl, r0
    4088:	e010      	b.n	40ac <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    408a:	9800      	ldr	r0, [sp, #0]
    408c:	9901      	ldr	r1, [sp, #4]
    408e:	1a12      	subs	r2, r2, r0
    4090:	418b      	sbcs	r3, r1
			q |= bit_shift;
    4092:	9902      	ldr	r1, [sp, #8]
    4094:	4648      	mov	r0, r9
    4096:	4301      	orrs	r1, r0
    4098:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    409a:	3f01      	subs	r7, #1
    409c:	d325      	bcc.n	40ea <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    409e:	2120      	movs	r1, #32
    40a0:	4249      	negs	r1, r1
    40a2:	1879      	adds	r1, r7, r1
    40a4:	d4eb      	bmi.n	407e <_sercom_get_async_baud_val+0x10e>
    40a6:	0030      	movs	r0, r6
    40a8:	4088      	lsls	r0, r1
    40aa:	4682      	mov	sl, r0
    40ac:	0031      	movs	r1, r6
    40ae:	40b9      	lsls	r1, r7
    40b0:	4689      	mov	r9, r1
		r = r << 1;
    40b2:	1892      	adds	r2, r2, r2
    40b4:	415b      	adcs	r3, r3
    40b6:	0010      	movs	r0, r2
    40b8:	0019      	movs	r1, r3
		if (n & bit_shift) {
    40ba:	4644      	mov	r4, r8
    40bc:	464d      	mov	r5, r9
    40be:	402c      	ands	r4, r5
    40c0:	46a4      	mov	ip, r4
    40c2:	4654      	mov	r4, sl
    40c4:	9d04      	ldr	r5, [sp, #16]
    40c6:	402c      	ands	r4, r5
    40c8:	46a2      	mov	sl, r4
    40ca:	4664      	mov	r4, ip
    40cc:	4655      	mov	r5, sl
    40ce:	432c      	orrs	r4, r5
    40d0:	d003      	beq.n	40da <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    40d2:	0034      	movs	r4, r6
    40d4:	4304      	orrs	r4, r0
    40d6:	0022      	movs	r2, r4
    40d8:	000b      	movs	r3, r1
		if (r >= d) {
    40da:	9800      	ldr	r0, [sp, #0]
    40dc:	9901      	ldr	r1, [sp, #4]
    40de:	4299      	cmp	r1, r3
    40e0:	d8db      	bhi.n	409a <_sercom_get_async_baud_val+0x12a>
    40e2:	d1d2      	bne.n	408a <_sercom_get_async_baud_val+0x11a>
    40e4:	4290      	cmp	r0, r2
    40e6:	d8d8      	bhi.n	409a <_sercom_get_async_baud_val+0x12a>
    40e8:	e7cf      	b.n	408a <_sercom_get_async_baud_val+0x11a>
    40ea:	9c00      	ldr	r4, [sp, #0]
    40ec:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    40ee:	9902      	ldr	r1, [sp, #8]
    40f0:	9a07      	ldr	r2, [sp, #28]
    40f2:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    40f4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    40f6:	4911      	ldr	r1, [pc, #68]	; (413c <_sercom_get_async_baud_val+0x1cc>)
    40f8:	428b      	cmp	r3, r1
    40fa:	d914      	bls.n	4126 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    40fc:	9b06      	ldr	r3, [sp, #24]
    40fe:	3301      	adds	r3, #1
    4100:	b2db      	uxtb	r3, r3
    4102:	0019      	movs	r1, r3
    4104:	9306      	str	r3, [sp, #24]
    4106:	0013      	movs	r3, r2
    4108:	3301      	adds	r3, #1
    410a:	9307      	str	r3, [sp, #28]
    410c:	2908      	cmp	r1, #8
    410e:	d008      	beq.n	4122 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    4110:	2300      	movs	r3, #0
    4112:	9302      	str	r3, [sp, #8]
    4114:	2200      	movs	r2, #0
    4116:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    4118:	213f      	movs	r1, #63	; 0x3f
    411a:	9400      	str	r4, [sp, #0]
    411c:	9501      	str	r5, [sp, #4]
    411e:	000f      	movs	r7, r1
    4120:	e7bd      	b.n	409e <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4122:	2240      	movs	r2, #64	; 0x40
    4124:	e734      	b.n	3f90 <_sercom_get_async_baud_val+0x20>
    4126:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    4128:	9906      	ldr	r1, [sp, #24]
    412a:	2908      	cmp	r1, #8
    412c:	d100      	bne.n	4130 <_sercom_get_async_baud_val+0x1c0>
    412e:	e72f      	b.n	3f90 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    4130:	034a      	lsls	r2, r1, #13
    4132:	431a      	orrs	r2, r3
    4134:	e788      	b.n	4048 <_sercom_get_async_baud_val+0xd8>
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	00008fb9 	.word	0x00008fb9
    413c:	00001fff 	.word	0x00001fff

00004140 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4140:	b510      	push	{r4, lr}
    4142:	b082      	sub	sp, #8
    4144:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4146:	4b0e      	ldr	r3, [pc, #56]	; (4180 <sercom_set_gclk_generator+0x40>)
    4148:	781b      	ldrb	r3, [r3, #0]
    414a:	2b00      	cmp	r3, #0
    414c:	d007      	beq.n	415e <sercom_set_gclk_generator+0x1e>
    414e:	2900      	cmp	r1, #0
    4150:	d105      	bne.n	415e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4152:	4b0b      	ldr	r3, [pc, #44]	; (4180 <sercom_set_gclk_generator+0x40>)
    4154:	785b      	ldrb	r3, [r3, #1]
    4156:	4283      	cmp	r3, r0
    4158:	d010      	beq.n	417c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    415a:	201d      	movs	r0, #29
    415c:	e00c      	b.n	4178 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    415e:	a901      	add	r1, sp, #4
    4160:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4162:	2013      	movs	r0, #19
    4164:	4b07      	ldr	r3, [pc, #28]	; (4184 <sercom_set_gclk_generator+0x44>)
    4166:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4168:	2013      	movs	r0, #19
    416a:	4b07      	ldr	r3, [pc, #28]	; (4188 <sercom_set_gclk_generator+0x48>)
    416c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    416e:	4b04      	ldr	r3, [pc, #16]	; (4180 <sercom_set_gclk_generator+0x40>)
    4170:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4172:	2201      	movs	r2, #1
    4174:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4176:	2000      	movs	r0, #0
}
    4178:	b002      	add	sp, #8
    417a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    417c:	2000      	movs	r0, #0
    417e:	e7fb      	b.n	4178 <sercom_set_gclk_generator+0x38>
    4180:	20000310 	.word	0x20000310
    4184:	000045a9 	.word	0x000045a9
    4188:	0000451d 	.word	0x0000451d

0000418c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    418c:	4b40      	ldr	r3, [pc, #256]	; (4290 <_sercom_get_default_pad+0x104>)
    418e:	4298      	cmp	r0, r3
    4190:	d031      	beq.n	41f6 <_sercom_get_default_pad+0x6a>
    4192:	d90a      	bls.n	41aa <_sercom_get_default_pad+0x1e>
    4194:	4b3f      	ldr	r3, [pc, #252]	; (4294 <_sercom_get_default_pad+0x108>)
    4196:	4298      	cmp	r0, r3
    4198:	d04d      	beq.n	4236 <_sercom_get_default_pad+0xaa>
    419a:	4b3f      	ldr	r3, [pc, #252]	; (4298 <_sercom_get_default_pad+0x10c>)
    419c:	4298      	cmp	r0, r3
    419e:	d05a      	beq.n	4256 <_sercom_get_default_pad+0xca>
    41a0:	4b3e      	ldr	r3, [pc, #248]	; (429c <_sercom_get_default_pad+0x110>)
    41a2:	4298      	cmp	r0, r3
    41a4:	d037      	beq.n	4216 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    41a6:	2000      	movs	r0, #0
}
    41a8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    41aa:	4b3d      	ldr	r3, [pc, #244]	; (42a0 <_sercom_get_default_pad+0x114>)
    41ac:	4298      	cmp	r0, r3
    41ae:	d00c      	beq.n	41ca <_sercom_get_default_pad+0x3e>
    41b0:	4b3c      	ldr	r3, [pc, #240]	; (42a4 <_sercom_get_default_pad+0x118>)
    41b2:	4298      	cmp	r0, r3
    41b4:	d1f7      	bne.n	41a6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    41b6:	2901      	cmp	r1, #1
    41b8:	d017      	beq.n	41ea <_sercom_get_default_pad+0x5e>
    41ba:	2900      	cmp	r1, #0
    41bc:	d05d      	beq.n	427a <_sercom_get_default_pad+0xee>
    41be:	2902      	cmp	r1, #2
    41c0:	d015      	beq.n	41ee <_sercom_get_default_pad+0x62>
    41c2:	2903      	cmp	r1, #3
    41c4:	d015      	beq.n	41f2 <_sercom_get_default_pad+0x66>
	return 0;
    41c6:	2000      	movs	r0, #0
    41c8:	e7ee      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    41ca:	2901      	cmp	r1, #1
    41cc:	d007      	beq.n	41de <_sercom_get_default_pad+0x52>
    41ce:	2900      	cmp	r1, #0
    41d0:	d051      	beq.n	4276 <_sercom_get_default_pad+0xea>
    41d2:	2902      	cmp	r1, #2
    41d4:	d005      	beq.n	41e2 <_sercom_get_default_pad+0x56>
    41d6:	2903      	cmp	r1, #3
    41d8:	d005      	beq.n	41e6 <_sercom_get_default_pad+0x5a>
	return 0;
    41da:	2000      	movs	r0, #0
    41dc:	e7e4      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    41de:	4832      	ldr	r0, [pc, #200]	; (42a8 <_sercom_get_default_pad+0x11c>)
    41e0:	e7e2      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41e2:	4832      	ldr	r0, [pc, #200]	; (42ac <_sercom_get_default_pad+0x120>)
    41e4:	e7e0      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41e6:	4832      	ldr	r0, [pc, #200]	; (42b0 <_sercom_get_default_pad+0x124>)
    41e8:	e7de      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41ea:	4832      	ldr	r0, [pc, #200]	; (42b4 <_sercom_get_default_pad+0x128>)
    41ec:	e7dc      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41ee:	4832      	ldr	r0, [pc, #200]	; (42b8 <_sercom_get_default_pad+0x12c>)
    41f0:	e7da      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41f2:	4832      	ldr	r0, [pc, #200]	; (42bc <_sercom_get_default_pad+0x130>)
    41f4:	e7d8      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    41f6:	2901      	cmp	r1, #1
    41f8:	d007      	beq.n	420a <_sercom_get_default_pad+0x7e>
    41fa:	2900      	cmp	r1, #0
    41fc:	d03f      	beq.n	427e <_sercom_get_default_pad+0xf2>
    41fe:	2902      	cmp	r1, #2
    4200:	d005      	beq.n	420e <_sercom_get_default_pad+0x82>
    4202:	2903      	cmp	r1, #3
    4204:	d005      	beq.n	4212 <_sercom_get_default_pad+0x86>
	return 0;
    4206:	2000      	movs	r0, #0
    4208:	e7ce      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    420a:	482d      	ldr	r0, [pc, #180]	; (42c0 <_sercom_get_default_pad+0x134>)
    420c:	e7cc      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    420e:	482d      	ldr	r0, [pc, #180]	; (42c4 <_sercom_get_default_pad+0x138>)
    4210:	e7ca      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4212:	482d      	ldr	r0, [pc, #180]	; (42c8 <_sercom_get_default_pad+0x13c>)
    4214:	e7c8      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4216:	2901      	cmp	r1, #1
    4218:	d007      	beq.n	422a <_sercom_get_default_pad+0x9e>
    421a:	2900      	cmp	r1, #0
    421c:	d031      	beq.n	4282 <_sercom_get_default_pad+0xf6>
    421e:	2902      	cmp	r1, #2
    4220:	d005      	beq.n	422e <_sercom_get_default_pad+0xa2>
    4222:	2903      	cmp	r1, #3
    4224:	d005      	beq.n	4232 <_sercom_get_default_pad+0xa6>
	return 0;
    4226:	2000      	movs	r0, #0
    4228:	e7be      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    422a:	4828      	ldr	r0, [pc, #160]	; (42cc <_sercom_get_default_pad+0x140>)
    422c:	e7bc      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    422e:	4828      	ldr	r0, [pc, #160]	; (42d0 <_sercom_get_default_pad+0x144>)
    4230:	e7ba      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4232:	4828      	ldr	r0, [pc, #160]	; (42d4 <_sercom_get_default_pad+0x148>)
    4234:	e7b8      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4236:	2901      	cmp	r1, #1
    4238:	d007      	beq.n	424a <_sercom_get_default_pad+0xbe>
    423a:	2900      	cmp	r1, #0
    423c:	d023      	beq.n	4286 <_sercom_get_default_pad+0xfa>
    423e:	2902      	cmp	r1, #2
    4240:	d005      	beq.n	424e <_sercom_get_default_pad+0xc2>
    4242:	2903      	cmp	r1, #3
    4244:	d005      	beq.n	4252 <_sercom_get_default_pad+0xc6>
	return 0;
    4246:	2000      	movs	r0, #0
    4248:	e7ae      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    424a:	4823      	ldr	r0, [pc, #140]	; (42d8 <_sercom_get_default_pad+0x14c>)
    424c:	e7ac      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    424e:	4823      	ldr	r0, [pc, #140]	; (42dc <_sercom_get_default_pad+0x150>)
    4250:	e7aa      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4252:	4823      	ldr	r0, [pc, #140]	; (42e0 <_sercom_get_default_pad+0x154>)
    4254:	e7a8      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4256:	2901      	cmp	r1, #1
    4258:	d007      	beq.n	426a <_sercom_get_default_pad+0xde>
    425a:	2900      	cmp	r1, #0
    425c:	d015      	beq.n	428a <_sercom_get_default_pad+0xfe>
    425e:	2902      	cmp	r1, #2
    4260:	d005      	beq.n	426e <_sercom_get_default_pad+0xe2>
    4262:	2903      	cmp	r1, #3
    4264:	d005      	beq.n	4272 <_sercom_get_default_pad+0xe6>
	return 0;
    4266:	2000      	movs	r0, #0
    4268:	e79e      	b.n	41a8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    426a:	481e      	ldr	r0, [pc, #120]	; (42e4 <_sercom_get_default_pad+0x158>)
    426c:	e79c      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    426e:	481e      	ldr	r0, [pc, #120]	; (42e8 <_sercom_get_default_pad+0x15c>)
    4270:	e79a      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4272:	481e      	ldr	r0, [pc, #120]	; (42ec <_sercom_get_default_pad+0x160>)
    4274:	e798      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4276:	481e      	ldr	r0, [pc, #120]	; (42f0 <_sercom_get_default_pad+0x164>)
    4278:	e796      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    427a:	2003      	movs	r0, #3
    427c:	e794      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    427e:	481d      	ldr	r0, [pc, #116]	; (42f4 <_sercom_get_default_pad+0x168>)
    4280:	e792      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4282:	481d      	ldr	r0, [pc, #116]	; (42f8 <_sercom_get_default_pad+0x16c>)
    4284:	e790      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    4286:	481d      	ldr	r0, [pc, #116]	; (42fc <_sercom_get_default_pad+0x170>)
    4288:	e78e      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    428a:	481d      	ldr	r0, [pc, #116]	; (4300 <_sercom_get_default_pad+0x174>)
    428c:	e78c      	b.n	41a8 <_sercom_get_default_pad+0x1c>
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	42001000 	.word	0x42001000
    4294:	42001800 	.word	0x42001800
    4298:	42001c00 	.word	0x42001c00
    429c:	42001400 	.word	0x42001400
    42a0:	42000800 	.word	0x42000800
    42a4:	42000c00 	.word	0x42000c00
    42a8:	00050003 	.word	0x00050003
    42ac:	00060003 	.word	0x00060003
    42b0:	00070003 	.word	0x00070003
    42b4:	00010003 	.word	0x00010003
    42b8:	001e0003 	.word	0x001e0003
    42bc:	001f0003 	.word	0x001f0003
    42c0:	00090003 	.word	0x00090003
    42c4:	000a0003 	.word	0x000a0003
    42c8:	000b0003 	.word	0x000b0003
    42cc:	00110003 	.word	0x00110003
    42d0:	00120003 	.word	0x00120003
    42d4:	00130003 	.word	0x00130003
    42d8:	000d0003 	.word	0x000d0003
    42dc:	000e0003 	.word	0x000e0003
    42e0:	000f0003 	.word	0x000f0003
    42e4:	00170003 	.word	0x00170003
    42e8:	00180003 	.word	0x00180003
    42ec:	00190003 	.word	0x00190003
    42f0:	00040003 	.word	0x00040003
    42f4:	00080003 	.word	0x00080003
    42f8:	00100003 	.word	0x00100003
    42fc:	000c0003 	.word	0x000c0003
    4300:	00160003 	.word	0x00160003

00004304 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4304:	b530      	push	{r4, r5, lr}
    4306:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4308:	4b0b      	ldr	r3, [pc, #44]	; (4338 <_sercom_get_sercom_inst_index+0x34>)
    430a:	466a      	mov	r2, sp
    430c:	cb32      	ldmia	r3!, {r1, r4, r5}
    430e:	c232      	stmia	r2!, {r1, r4, r5}
    4310:	cb32      	ldmia	r3!, {r1, r4, r5}
    4312:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4314:	9b00      	ldr	r3, [sp, #0]
    4316:	4283      	cmp	r3, r0
    4318:	d00b      	beq.n	4332 <_sercom_get_sercom_inst_index+0x2e>
    431a:	2301      	movs	r3, #1
    431c:	009a      	lsls	r2, r3, #2
    431e:	4669      	mov	r1, sp
    4320:	5852      	ldr	r2, [r2, r1]
    4322:	4282      	cmp	r2, r0
    4324:	d006      	beq.n	4334 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4326:	3301      	adds	r3, #1
    4328:	2b06      	cmp	r3, #6
    432a:	d1f7      	bne.n	431c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    432c:	2000      	movs	r0, #0
}
    432e:	b007      	add	sp, #28
    4330:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4332:	2300      	movs	r3, #0
			return i;
    4334:	b2d8      	uxtb	r0, r3
    4336:	e7fa      	b.n	432e <_sercom_get_sercom_inst_index+0x2a>
    4338:	0000a81c 	.word	0x0000a81c

0000433c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    433c:	4770      	bx	lr
	...

00004340 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4340:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4342:	4b0a      	ldr	r3, [pc, #40]	; (436c <_sercom_set_handler+0x2c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	2b00      	cmp	r3, #0
    4348:	d10c      	bne.n	4364 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    434a:	4f09      	ldr	r7, [pc, #36]	; (4370 <_sercom_set_handler+0x30>)
    434c:	4e09      	ldr	r6, [pc, #36]	; (4374 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    434e:	4d0a      	ldr	r5, [pc, #40]	; (4378 <_sercom_set_handler+0x38>)
    4350:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4352:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4354:	195a      	adds	r2, r3, r5
    4356:	6014      	str	r4, [r2, #0]
    4358:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    435a:	2b18      	cmp	r3, #24
    435c:	d1f9      	bne.n	4352 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    435e:	2201      	movs	r2, #1
    4360:	4b02      	ldr	r3, [pc, #8]	; (436c <_sercom_set_handler+0x2c>)
    4362:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4364:	0080      	lsls	r0, r0, #2
    4366:	4b02      	ldr	r3, [pc, #8]	; (4370 <_sercom_set_handler+0x30>)
    4368:	50c1      	str	r1, [r0, r3]
}
    436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    436c:	20000312 	.word	0x20000312
    4370:	20000314 	.word	0x20000314
    4374:	0000433d 	.word	0x0000433d
    4378:	20000688 	.word	0x20000688

0000437c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    437c:	b500      	push	{lr}
    437e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4380:	2309      	movs	r3, #9
    4382:	466a      	mov	r2, sp
    4384:	7013      	strb	r3, [r2, #0]
    4386:	3301      	adds	r3, #1
    4388:	7053      	strb	r3, [r2, #1]
    438a:	3301      	adds	r3, #1
    438c:	7093      	strb	r3, [r2, #2]
    438e:	3301      	adds	r3, #1
    4390:	70d3      	strb	r3, [r2, #3]
    4392:	3301      	adds	r3, #1
    4394:	7113      	strb	r3, [r2, #4]
    4396:	3301      	adds	r3, #1
    4398:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    439a:	4b03      	ldr	r3, [pc, #12]	; (43a8 <_sercom_get_interrupt_vector+0x2c>)
    439c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    439e:	466b      	mov	r3, sp
    43a0:	5618      	ldrsb	r0, [r3, r0]
}
    43a2:	b003      	add	sp, #12
    43a4:	bd00      	pop	{pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	00004305 	.word	0x00004305

000043ac <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    43ac:	b510      	push	{r4, lr}
    43ae:	4b02      	ldr	r3, [pc, #8]	; (43b8 <SERCOM0_Handler+0xc>)
    43b0:	681b      	ldr	r3, [r3, #0]
    43b2:	2000      	movs	r0, #0
    43b4:	4798      	blx	r3
    43b6:	bd10      	pop	{r4, pc}
    43b8:	20000314 	.word	0x20000314

000043bc <SERCOM1_Handler>:
    43bc:	b510      	push	{r4, lr}
    43be:	4b02      	ldr	r3, [pc, #8]	; (43c8 <SERCOM1_Handler+0xc>)
    43c0:	685b      	ldr	r3, [r3, #4]
    43c2:	2001      	movs	r0, #1
    43c4:	4798      	blx	r3
    43c6:	bd10      	pop	{r4, pc}
    43c8:	20000314 	.word	0x20000314

000043cc <SERCOM2_Handler>:
    43cc:	b510      	push	{r4, lr}
    43ce:	4b02      	ldr	r3, [pc, #8]	; (43d8 <SERCOM2_Handler+0xc>)
    43d0:	689b      	ldr	r3, [r3, #8]
    43d2:	2002      	movs	r0, #2
    43d4:	4798      	blx	r3
    43d6:	bd10      	pop	{r4, pc}
    43d8:	20000314 	.word	0x20000314

000043dc <SERCOM3_Handler>:
    43dc:	b510      	push	{r4, lr}
    43de:	4b02      	ldr	r3, [pc, #8]	; (43e8 <SERCOM3_Handler+0xc>)
    43e0:	68db      	ldr	r3, [r3, #12]
    43e2:	2003      	movs	r0, #3
    43e4:	4798      	blx	r3
    43e6:	bd10      	pop	{r4, pc}
    43e8:	20000314 	.word	0x20000314

000043ec <SERCOM4_Handler>:
    43ec:	b510      	push	{r4, lr}
    43ee:	4b02      	ldr	r3, [pc, #8]	; (43f8 <SERCOM4_Handler+0xc>)
    43f0:	691b      	ldr	r3, [r3, #16]
    43f2:	2004      	movs	r0, #4
    43f4:	4798      	blx	r3
    43f6:	bd10      	pop	{r4, pc}
    43f8:	20000314 	.word	0x20000314

000043fc <SERCOM5_Handler>:
    43fc:	b510      	push	{r4, lr}
    43fe:	4b02      	ldr	r3, [pc, #8]	; (4408 <SERCOM5_Handler+0xc>)
    4400:	695b      	ldr	r3, [r3, #20]
    4402:	2005      	movs	r0, #5
    4404:	4798      	blx	r3
    4406:	bd10      	pop	{r4, pc}
    4408:	20000314 	.word	0x20000314

0000440c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    440c:	b510      	push	{r4, lr}
	switch (clock_source) {
    440e:	2808      	cmp	r0, #8
    4410:	d803      	bhi.n	441a <system_clock_source_get_hz+0xe>
    4412:	0080      	lsls	r0, r0, #2
    4414:	4b18      	ldr	r3, [pc, #96]	; (4478 <system_clock_source_get_hz+0x6c>)
    4416:	581b      	ldr	r3, [r3, r0]
    4418:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    441a:	2000      	movs	r0, #0
    441c:	e02b      	b.n	4476 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.xosc.frequency;
    441e:	4b17      	ldr	r3, [pc, #92]	; (447c <system_clock_source_get_hz+0x70>)
    4420:	6918      	ldr	r0, [r3, #16]
    4422:	e028      	b.n	4476 <system_clock_source_get_hz+0x6a>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4424:	4b16      	ldr	r3, [pc, #88]	; (4480 <system_clock_source_get_hz+0x74>)
    4426:	6a1b      	ldr	r3, [r3, #32]
    4428:	059b      	lsls	r3, r3, #22
    442a:	0f9b      	lsrs	r3, r3, #30
    442c:	4815      	ldr	r0, [pc, #84]	; (4484 <system_clock_source_get_hz+0x78>)
    442e:	40d8      	lsrs	r0, r3
    4430:	e021      	b.n	4476 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.xosc32k.frequency;
    4432:	4b12      	ldr	r3, [pc, #72]	; (447c <system_clock_source_get_hz+0x70>)
    4434:	6958      	ldr	r0, [r3, #20]
    4436:	e01e      	b.n	4476 <system_clock_source_get_hz+0x6a>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4438:	4911      	ldr	r1, [pc, #68]	; (4480 <system_clock_source_get_hz+0x74>)
    443a:	2210      	movs	r2, #16
    443c:	68cb      	ldr	r3, [r1, #12]
    443e:	421a      	tst	r2, r3
    4440:	d0fc      	beq.n	443c <system_clock_source_get_hz+0x30>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4442:	4b0e      	ldr	r3, [pc, #56]	; (447c <system_clock_source_get_hz+0x70>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	075b      	lsls	r3, r3, #29
    4448:	d401      	bmi.n	444e <system_clock_source_get_hz+0x42>
		return 48000000UL;
    444a:	480f      	ldr	r0, [pc, #60]	; (4488 <system_clock_source_get_hz+0x7c>)
    444c:	e013      	b.n	4476 <system_clock_source_get_hz+0x6a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    444e:	2000      	movs	r0, #0
    4450:	4b0e      	ldr	r3, [pc, #56]	; (448c <system_clock_source_get_hz+0x80>)
    4452:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4454:	4b09      	ldr	r3, [pc, #36]	; (447c <system_clock_source_get_hz+0x70>)
    4456:	689b      	ldr	r3, [r3, #8]
    4458:	041b      	lsls	r3, r3, #16
    445a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    445c:	4358      	muls	r0, r3
    445e:	e00a      	b.n	4476 <system_clock_source_get_hz+0x6a>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4460:	2350      	movs	r3, #80	; 0x50
    4462:	4a07      	ldr	r2, [pc, #28]	; (4480 <system_clock_source_get_hz+0x74>)
    4464:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4466:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4468:	075b      	lsls	r3, r3, #29
    446a:	d504      	bpl.n	4476 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.dpll.frequency;
    446c:	4b03      	ldr	r3, [pc, #12]	; (447c <system_clock_source_get_hz+0x70>)
    446e:	68d8      	ldr	r0, [r3, #12]
    4470:	e001      	b.n	4476 <system_clock_source_get_hz+0x6a>
		return 32768UL;
    4472:	2080      	movs	r0, #128	; 0x80
    4474:	0200      	lsls	r0, r0, #8
	}
}
    4476:	bd10      	pop	{r4, pc}
    4478:	0000a834 	.word	0x0000a834
    447c:	2000032c 	.word	0x2000032c
    4480:	40000800 	.word	0x40000800
    4484:	007a1200 	.word	0x007a1200
    4488:	02dc6c00 	.word	0x02dc6c00
    448c:	000045c5 	.word	0x000045c5

00004490 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4490:	b570      	push	{r4, r5, r6, lr}
    4492:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4494:	4a1a      	ldr	r2, [pc, #104]	; (4500 <system_gclk_gen_get_hz+0x70>)
    4496:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4498:	b25b      	sxtb	r3, r3
    449a:	2b00      	cmp	r3, #0
    449c:	dbfb      	blt.n	4496 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    449e:	4b19      	ldr	r3, [pc, #100]	; (4504 <system_gclk_gen_get_hz+0x74>)
    44a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    44a2:	4b19      	ldr	r3, [pc, #100]	; (4508 <system_gclk_gen_get_hz+0x78>)
    44a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    44a6:	4a16      	ldr	r2, [pc, #88]	; (4500 <system_gclk_gen_get_hz+0x70>)
    44a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    44aa:	b25b      	sxtb	r3, r3
    44ac:	2b00      	cmp	r3, #0
    44ae:	dbfb      	blt.n	44a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    44b0:	4e13      	ldr	r6, [pc, #76]	; (4500 <system_gclk_gen_get_hz+0x70>)
    44b2:	6870      	ldr	r0, [r6, #4]
    44b4:	04c0      	lsls	r0, r0, #19
    44b6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    44b8:	4b14      	ldr	r3, [pc, #80]	; (450c <system_gclk_gen_get_hz+0x7c>)
    44ba:	4798      	blx	r3
    44bc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    44be:	4b12      	ldr	r3, [pc, #72]	; (4508 <system_gclk_gen_get_hz+0x78>)
    44c0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    44c2:	6876      	ldr	r6, [r6, #4]
    44c4:	02f6      	lsls	r6, r6, #11
    44c6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    44c8:	4b11      	ldr	r3, [pc, #68]	; (4510 <system_gclk_gen_get_hz+0x80>)
    44ca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    44cc:	4a0c      	ldr	r2, [pc, #48]	; (4500 <system_gclk_gen_get_hz+0x70>)
    44ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    44d0:	b25b      	sxtb	r3, r3
    44d2:	2b00      	cmp	r3, #0
    44d4:	dbfb      	blt.n	44ce <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    44d6:	4b0a      	ldr	r3, [pc, #40]	; (4500 <system_gclk_gen_get_hz+0x70>)
    44d8:	689c      	ldr	r4, [r3, #8]
    44da:	0224      	lsls	r4, r4, #8
    44dc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    44de:	4b0d      	ldr	r3, [pc, #52]	; (4514 <system_gclk_gen_get_hz+0x84>)
    44e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    44e2:	2e00      	cmp	r6, #0
    44e4:	d107      	bne.n	44f6 <system_gclk_gen_get_hz+0x66>
    44e6:	2c01      	cmp	r4, #1
    44e8:	d907      	bls.n	44fa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    44ea:	0021      	movs	r1, r4
    44ec:	0028      	movs	r0, r5
    44ee:	4b0a      	ldr	r3, [pc, #40]	; (4518 <system_gclk_gen_get_hz+0x88>)
    44f0:	4798      	blx	r3
    44f2:	0005      	movs	r5, r0
    44f4:	e001      	b.n	44fa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    44f6:	3401      	adds	r4, #1
    44f8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    44fa:	0028      	movs	r0, r5
    44fc:	bd70      	pop	{r4, r5, r6, pc}
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	40000c00 	.word	0x40000c00
    4504:	00002f99 	.word	0x00002f99
    4508:	40000c04 	.word	0x40000c04
    450c:	0000440d 	.word	0x0000440d
    4510:	40000c08 	.word	0x40000c08
    4514:	00002fd9 	.word	0x00002fd9
    4518:	00008bd5 	.word	0x00008bd5

0000451c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    451c:	b510      	push	{r4, lr}
    451e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4520:	4b06      	ldr	r3, [pc, #24]	; (453c <system_gclk_chan_enable+0x20>)
    4522:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4524:	4b06      	ldr	r3, [pc, #24]	; (4540 <system_gclk_chan_enable+0x24>)
    4526:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4528:	4a06      	ldr	r2, [pc, #24]	; (4544 <system_gclk_chan_enable+0x28>)
    452a:	8853      	ldrh	r3, [r2, #2]
    452c:	2180      	movs	r1, #128	; 0x80
    452e:	01c9      	lsls	r1, r1, #7
    4530:	430b      	orrs	r3, r1
    4532:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4534:	4b04      	ldr	r3, [pc, #16]	; (4548 <system_gclk_chan_enable+0x2c>)
    4536:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4538:	bd10      	pop	{r4, pc}
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	00002f99 	.word	0x00002f99
    4540:	40000c02 	.word	0x40000c02
    4544:	40000c00 	.word	0x40000c00
    4548:	00002fd9 	.word	0x00002fd9

0000454c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    454c:	b510      	push	{r4, lr}
    454e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4550:	4b0f      	ldr	r3, [pc, #60]	; (4590 <system_gclk_chan_disable+0x44>)
    4552:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4554:	4b0f      	ldr	r3, [pc, #60]	; (4594 <system_gclk_chan_disable+0x48>)
    4556:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4558:	4a0f      	ldr	r2, [pc, #60]	; (4598 <system_gclk_chan_disable+0x4c>)
    455a:	8853      	ldrh	r3, [r2, #2]
    455c:	051b      	lsls	r3, r3, #20
    455e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4560:	8853      	ldrh	r3, [r2, #2]
    4562:	490e      	ldr	r1, [pc, #56]	; (459c <system_gclk_chan_disable+0x50>)
    4564:	400b      	ands	r3, r1
    4566:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4568:	8853      	ldrh	r3, [r2, #2]
    456a:	490d      	ldr	r1, [pc, #52]	; (45a0 <system_gclk_chan_disable+0x54>)
    456c:	400b      	ands	r3, r1
    456e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4570:	0011      	movs	r1, r2
    4572:	2280      	movs	r2, #128	; 0x80
    4574:	01d2      	lsls	r2, r2, #7
    4576:	884b      	ldrh	r3, [r1, #2]
    4578:	4213      	tst	r3, r2
    457a:	d1fc      	bne.n	4576 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    457c:	4906      	ldr	r1, [pc, #24]	; (4598 <system_gclk_chan_disable+0x4c>)
    457e:	884a      	ldrh	r2, [r1, #2]
    4580:	0203      	lsls	r3, r0, #8
    4582:	4806      	ldr	r0, [pc, #24]	; (459c <system_gclk_chan_disable+0x50>)
    4584:	4002      	ands	r2, r0
    4586:	4313      	orrs	r3, r2
    4588:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    458a:	4b06      	ldr	r3, [pc, #24]	; (45a4 <system_gclk_chan_disable+0x58>)
    458c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    458e:	bd10      	pop	{r4, pc}
    4590:	00002f99 	.word	0x00002f99
    4594:	40000c02 	.word	0x40000c02
    4598:	40000c00 	.word	0x40000c00
    459c:	fffff0ff 	.word	0xfffff0ff
    45a0:	ffffbfff 	.word	0xffffbfff
    45a4:	00002fd9 	.word	0x00002fd9

000045a8 <system_gclk_chan_set_config>:
{
    45a8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    45aa:	780c      	ldrb	r4, [r1, #0]
    45ac:	0224      	lsls	r4, r4, #8
    45ae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    45b0:	4b02      	ldr	r3, [pc, #8]	; (45bc <system_gclk_chan_set_config+0x14>)
    45b2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    45b4:	b2a4      	uxth	r4, r4
    45b6:	4b02      	ldr	r3, [pc, #8]	; (45c0 <system_gclk_chan_set_config+0x18>)
    45b8:	805c      	strh	r4, [r3, #2]
}
    45ba:	bd10      	pop	{r4, pc}
    45bc:	0000454d 	.word	0x0000454d
    45c0:	40000c00 	.word	0x40000c00

000045c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    45c4:	b510      	push	{r4, lr}
    45c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    45c8:	4b06      	ldr	r3, [pc, #24]	; (45e4 <system_gclk_chan_get_hz+0x20>)
    45ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    45cc:	4b06      	ldr	r3, [pc, #24]	; (45e8 <system_gclk_chan_get_hz+0x24>)
    45ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    45d0:	4b06      	ldr	r3, [pc, #24]	; (45ec <system_gclk_chan_get_hz+0x28>)
    45d2:	885c      	ldrh	r4, [r3, #2]
    45d4:	0524      	lsls	r4, r4, #20
    45d6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    45d8:	4b05      	ldr	r3, [pc, #20]	; (45f0 <system_gclk_chan_get_hz+0x2c>)
    45da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    45dc:	0020      	movs	r0, r4
    45de:	4b05      	ldr	r3, [pc, #20]	; (45f4 <system_gclk_chan_get_hz+0x30>)
    45e0:	4798      	blx	r3
}
    45e2:	bd10      	pop	{r4, pc}
    45e4:	00002f99 	.word	0x00002f99
    45e8:	40000c02 	.word	0x40000c02
    45ec:	40000c00 	.word	0x40000c00
    45f0:	00002fd9 	.word	0x00002fd9
    45f4:	00004491 	.word	0x00004491

000045f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    45f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    45fa:	78d3      	ldrb	r3, [r2, #3]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d135      	bne.n	466c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4600:	7813      	ldrb	r3, [r2, #0]
    4602:	2b80      	cmp	r3, #128	; 0x80
    4604:	d029      	beq.n	465a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4606:	061b      	lsls	r3, r3, #24
    4608:	2480      	movs	r4, #128	; 0x80
    460a:	0264      	lsls	r4, r4, #9
    460c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    460e:	7854      	ldrb	r4, [r2, #1]
    4610:	2502      	movs	r5, #2
    4612:	43ac      	bics	r4, r5
    4614:	d106      	bne.n	4624 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4616:	7894      	ldrb	r4, [r2, #2]
    4618:	2c00      	cmp	r4, #0
    461a:	d120      	bne.n	465e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    461c:	2480      	movs	r4, #128	; 0x80
    461e:	02a4      	lsls	r4, r4, #10
    4620:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4622:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4624:	7854      	ldrb	r4, [r2, #1]
    4626:	3c01      	subs	r4, #1
    4628:	2c01      	cmp	r4, #1
    462a:	d91c      	bls.n	4666 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    462c:	040d      	lsls	r5, r1, #16
    462e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4630:	24a0      	movs	r4, #160	; 0xa0
    4632:	05e4      	lsls	r4, r4, #23
    4634:	432c      	orrs	r4, r5
    4636:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4638:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    463a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    463c:	24d0      	movs	r4, #208	; 0xd0
    463e:	0624      	lsls	r4, r4, #24
    4640:	432c      	orrs	r4, r5
    4642:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4644:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4646:	78d4      	ldrb	r4, [r2, #3]
    4648:	2c00      	cmp	r4, #0
    464a:	d122      	bne.n	4692 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    464c:	035b      	lsls	r3, r3, #13
    464e:	d51c      	bpl.n	468a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4650:	7893      	ldrb	r3, [r2, #2]
    4652:	2b01      	cmp	r3, #1
    4654:	d01e      	beq.n	4694 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4656:	6141      	str	r1, [r0, #20]
    4658:	e017      	b.n	468a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    465a:	2300      	movs	r3, #0
    465c:	e7d7      	b.n	460e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    465e:	24c0      	movs	r4, #192	; 0xc0
    4660:	02e4      	lsls	r4, r4, #11
    4662:	4323      	orrs	r3, r4
    4664:	e7dd      	b.n	4622 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4666:	4c0d      	ldr	r4, [pc, #52]	; (469c <_system_pinmux_config+0xa4>)
    4668:	4023      	ands	r3, r4
    466a:	e7df      	b.n	462c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    466c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    466e:	040c      	lsls	r4, r1, #16
    4670:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4672:	23a0      	movs	r3, #160	; 0xa0
    4674:	05db      	lsls	r3, r3, #23
    4676:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4678:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    467a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    467c:	23d0      	movs	r3, #208	; 0xd0
    467e:	061b      	lsls	r3, r3, #24
    4680:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4682:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4684:	78d3      	ldrb	r3, [r2, #3]
    4686:	2b00      	cmp	r3, #0
    4688:	d103      	bne.n	4692 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    468a:	7853      	ldrb	r3, [r2, #1]
    468c:	3b01      	subs	r3, #1
    468e:	2b01      	cmp	r3, #1
    4690:	d902      	bls.n	4698 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4692:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4694:	6181      	str	r1, [r0, #24]
    4696:	e7f8      	b.n	468a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4698:	6081      	str	r1, [r0, #8]
}
    469a:	e7fa      	b.n	4692 <_system_pinmux_config+0x9a>
    469c:	fffbffff 	.word	0xfffbffff

000046a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    46a0:	b510      	push	{r4, lr}
    46a2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    46a4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    46a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    46a8:	2900      	cmp	r1, #0
    46aa:	d104      	bne.n	46b6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    46ac:	0943      	lsrs	r3, r0, #5
    46ae:	01db      	lsls	r3, r3, #7
    46b0:	4905      	ldr	r1, [pc, #20]	; (46c8 <system_pinmux_pin_set_config+0x28>)
    46b2:	468c      	mov	ip, r1
    46b4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    46b6:	241f      	movs	r4, #31
    46b8:	4020      	ands	r0, r4
    46ba:	2101      	movs	r1, #1
    46bc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    46be:	0018      	movs	r0, r3
    46c0:	4b02      	ldr	r3, [pc, #8]	; (46cc <system_pinmux_pin_set_config+0x2c>)
    46c2:	4798      	blx	r3
}
    46c4:	bd10      	pop	{r4, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	41004400 	.word	0x41004400
    46cc:	000045f9 	.word	0x000045f9

000046d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    46d0:	b510      	push	{r4, lr}

	/* Initialize EVSYS hardware */
	//_system_events_init();

	/* Initialize External hardware */
	_system_extint_init();
    46d2:	4b01      	ldr	r3, [pc, #4]	; (46d8 <system_init+0x8>)
    46d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	//_system_divas_init();
}
    46d6:	bd10      	pop	{r4, pc}
    46d8:	00003639 	.word	0x00003639

000046dc <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    46dc:	4b09      	ldr	r3, [pc, #36]	; (4704 <_tcc_get_inst_index+0x28>)
    46de:	4298      	cmp	r0, r3
    46e0:	d00c      	beq.n	46fc <_tcc_get_inst_index+0x20>
    46e2:	4b09      	ldr	r3, [pc, #36]	; (4708 <_tcc_get_inst_index+0x2c>)
    46e4:	4298      	cmp	r0, r3
    46e6:	d007      	beq.n	46f8 <_tcc_get_inst_index+0x1c>
    46e8:	4a08      	ldr	r2, [pc, #32]	; (470c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    46ea:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    46ec:	4290      	cmp	r0, r2
    46ee:	d001      	beq.n	46f4 <_tcc_get_inst_index+0x18>
}
    46f0:	0018      	movs	r0, r3
    46f2:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    46f4:	3302      	adds	r3, #2
    46f6:	e002      	b.n	46fe <_tcc_get_inst_index+0x22>
    46f8:	2301      	movs	r3, #1
    46fa:	e000      	b.n	46fe <_tcc_get_inst_index+0x22>
    46fc:	2300      	movs	r3, #0
			return i;
    46fe:	b2db      	uxtb	r3, r3
    4700:	e7f6      	b.n	46f0 <_tcc_get_inst_index+0x14>
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	42002000 	.word	0x42002000
    4708:	42002400 	.word	0x42002400
    470c:	42002800 	.word	0x42002800

00004710 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    4710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4712:	000f      	movs	r7, r1
    4714:	0015      	movs	r5, r2
    4716:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    4718:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    471a:	0020      	movs	r0, r4
    471c:	4b13      	ldr	r3, [pc, #76]	; (476c <_tcc_set_compare_value+0x5c>)
    471e:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    4720:	4b13      	ldr	r3, [pc, #76]	; (4770 <_tcc_set_compare_value+0x60>)
    4722:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    4724:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    4726:	42ba      	cmp	r2, r7
    4728:	d801      	bhi.n	472e <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    472a:	0018      	movs	r0, r3
    472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
    472e:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
    4730:	4b10      	ldr	r3, [pc, #64]	; (4774 <_tcc_set_compare_value+0x64>)
    4732:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    4734:	2317      	movs	r3, #23
	if (compare > max_count) {
    4736:	42aa      	cmp	r2, r5
    4738:	d3f7      	bcc.n	472a <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
    473a:	2e00      	cmp	r6, #0
    473c:	d00a      	beq.n	4754 <_tcc_set_compare_value+0x44>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    473e:	2280      	movs	r2, #128	; 0x80
    4740:	0312      	lsls	r2, r2, #12
    4742:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
    4744:	68a3      	ldr	r3, [r4, #8]
    4746:	421a      	tst	r2, r3
    4748:	d1fc      	bne.n	4744 <_tcc_set_compare_value+0x34>
		tcc_module->CCB[channel_index].reg = compare;
    474a:	371c      	adds	r7, #28
    474c:	00bf      	lsls	r7, r7, #2
    474e:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
    4750:	2300      	movs	r3, #0
    4752:	e7ea      	b.n	472a <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    4754:	2280      	movs	r2, #128	; 0x80
    4756:	0052      	lsls	r2, r2, #1
    4758:	40ba      	lsls	r2, r7
    475a:	68a3      	ldr	r3, [r4, #8]
    475c:	421a      	tst	r2, r3
    475e:	d1fc      	bne.n	475a <_tcc_set_compare_value+0x4a>
		tcc_module->CC[channel_index].reg = compare;
    4760:	3710      	adds	r7, #16
    4762:	00bf      	lsls	r7, r7, #2
    4764:	19e4      	adds	r4, r4, r7
    4766:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
    4768:	2300      	movs	r3, #0
    476a:	e7de      	b.n	472a <_tcc_set_compare_value+0x1a>
    476c:	000046dd 	.word	0x000046dd
    4770:	0000a864 	.word	0x0000a864
    4774:	0000a86c 	.word	0x0000a86c

00004778 <tcc_get_config_defaults>:
{
    4778:	b510      	push	{r4, lr}
    477a:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    477c:	0008      	movs	r0, r1
    477e:	4b4f      	ldr	r3, [pc, #316]	; (48bc <tcc_get_config_defaults+0x144>)
    4780:	4798      	blx	r3
	config->counter.count                  = 0;
    4782:	2300      	movs	r3, #0
    4784:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    4786:	0080      	lsls	r0, r0, #2
    4788:	4a4d      	ldr	r2, [pc, #308]	; (48c0 <tcc_get_config_defaults+0x148>)
    478a:	5882      	ldr	r2, [r0, r2]
    478c:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    478e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    4790:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    4792:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4794:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    4796:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    4798:	61e3      	str	r3, [r4, #28]
    479a:	6223      	str	r3, [r4, #32]
    479c:	6263      	str	r3, [r4, #36]	; 0x24
    479e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    47a0:	7523      	strb	r3, [r4, #20]
    47a2:	7563      	strb	r3, [r4, #21]
    47a4:	75a3      	strb	r3, [r4, #22]
    47a6:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    47a8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    47aa:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    47ac:	7423      	strb	r3, [r4, #16]
    47ae:	7463      	strb	r3, [r4, #17]
    47b0:	74a3      	strb	r3, [r4, #18]
    47b2:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    47b4:	222c      	movs	r2, #44	; 0x2c
    47b6:	54a3      	strb	r3, [r4, r2]
    47b8:	3201      	adds	r2, #1
    47ba:	54a3      	strb	r3, [r4, r2]
    47bc:	3201      	adds	r2, #1
    47be:	54a3      	strb	r3, [r4, r2]
    47c0:	3201      	adds	r2, #1
    47c2:	54a3      	strb	r3, [r4, r2]
    47c4:	3201      	adds	r2, #1
    47c6:	54a3      	strb	r3, [r4, r2]
    47c8:	3201      	adds	r2, #1
    47ca:	54a3      	strb	r3, [r4, r2]
    47cc:	3201      	adds	r2, #1
    47ce:	54a3      	strb	r3, [r4, r2]
    47d0:	3201      	adds	r2, #1
    47d2:	54a3      	strb	r3, [r4, r2]
    47d4:	3201      	adds	r2, #1
    47d6:	54a3      	strb	r3, [r4, r2]
    47d8:	3201      	adds	r2, #1
    47da:	54a3      	strb	r3, [r4, r2]
    47dc:	3201      	adds	r2, #1
    47de:	54a3      	strb	r3, [r4, r2]
    47e0:	3201      	adds	r2, #1
    47e2:	54a3      	strb	r3, [r4, r2]
    47e4:	3201      	adds	r2, #1
    47e6:	54a3      	strb	r3, [r4, r2]
    47e8:	3201      	adds	r2, #1
    47ea:	54a3      	strb	r3, [r4, r2]
    47ec:	3201      	adds	r2, #1
    47ee:	54a3      	strb	r3, [r4, r2]
    47f0:	3201      	adds	r2, #1
    47f2:	54a3      	strb	r3, [r4, r2]
    47f4:	3201      	adds	r2, #1
    47f6:	54a3      	strb	r3, [r4, r2]
    47f8:	3201      	adds	r2, #1
    47fa:	54a3      	strb	r3, [r4, r2]
    47fc:	3201      	adds	r2, #1
    47fe:	54a3      	strb	r3, [r4, r2]
    4800:	3201      	adds	r2, #1
    4802:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4804:	3201      	adds	r2, #1
    4806:	54a3      	strb	r3, [r4, r2]
    4808:	3201      	adds	r2, #1
    480a:	54a3      	strb	r3, [r4, r2]
    480c:	3201      	adds	r2, #1
    480e:	54a3      	strb	r3, [r4, r2]
    4810:	3201      	adds	r2, #1
    4812:	54a3      	strb	r3, [r4, r2]
    4814:	3201      	adds	r2, #1
    4816:	54a3      	strb	r3, [r4, r2]
    4818:	3201      	adds	r2, #1
    481a:	54a3      	strb	r3, [r4, r2]
    481c:	3201      	adds	r2, #1
    481e:	54a3      	strb	r3, [r4, r2]
    4820:	3201      	adds	r2, #1
    4822:	54a3      	strb	r3, [r4, r2]
    4824:	3201      	adds	r2, #1
    4826:	54a3      	strb	r3, [r4, r2]
    4828:	3201      	adds	r2, #1
    482a:	54a3      	strb	r3, [r4, r2]
    482c:	3201      	adds	r2, #1
    482e:	54a3      	strb	r3, [r4, r2]
    4830:	3201      	adds	r2, #1
    4832:	54a3      	strb	r3, [r4, r2]
    4834:	3201      	adds	r2, #1
    4836:	54a3      	strb	r3, [r4, r2]
    4838:	3201      	adds	r2, #1
    483a:	54a3      	strb	r3, [r4, r2]
    483c:	3201      	adds	r2, #1
    483e:	54a3      	strb	r3, [r4, r2]
    4840:	3201      	adds	r2, #1
    4842:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    4844:	3201      	adds	r2, #1
    4846:	54a3      	strb	r3, [r4, r2]
    4848:	3201      	adds	r2, #1
    484a:	54a3      	strb	r3, [r4, r2]
    484c:	3201      	adds	r2, #1
    484e:	54a3      	strb	r3, [r4, r2]
    4850:	3201      	adds	r2, #1
    4852:	54a3      	strb	r3, [r4, r2]
    4854:	3201      	adds	r2, #1
    4856:	54a3      	strb	r3, [r4, r2]
    4858:	3201      	adds	r2, #1
    485a:	54a3      	strb	r3, [r4, r2]
    485c:	3201      	adds	r2, #1
    485e:	54a3      	strb	r3, [r4, r2]
    4860:	3201      	adds	r2, #1
    4862:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    4864:	3241      	adds	r2, #65	; 0x41
    4866:	54a3      	strb	r3, [r4, r2]
    4868:	65a3      	str	r3, [r4, #88]	; 0x58
    486a:	67a3      	str	r3, [r4, #120]	; 0x78
    486c:	3201      	adds	r2, #1
    486e:	54a3      	strb	r3, [r4, r2]
    4870:	65e3      	str	r3, [r4, #92]	; 0x5c
    4872:	67e3      	str	r3, [r4, #124]	; 0x7c
    4874:	3201      	adds	r2, #1
    4876:	54a3      	strb	r3, [r4, r2]
    4878:	6623      	str	r3, [r4, #96]	; 0x60
    487a:	3a1a      	subs	r2, #26
    487c:	50a3      	str	r3, [r4, r2]
    487e:	321b      	adds	r2, #27
    4880:	54a3      	strb	r3, [r4, r2]
    4882:	6663      	str	r3, [r4, #100]	; 0x64
    4884:	3a17      	subs	r2, #23
    4886:	50a3      	str	r3, [r4, r2]
    4888:	3218      	adds	r2, #24
    488a:	54a3      	strb	r3, [r4, r2]
    488c:	66a3      	str	r3, [r4, #104]	; 0x68
    488e:	3a14      	subs	r2, #20
    4890:	50a3      	str	r3, [r4, r2]
    4892:	3215      	adds	r2, #21
    4894:	54a3      	strb	r3, [r4, r2]
    4896:	66e3      	str	r3, [r4, #108]	; 0x6c
    4898:	3a11      	subs	r2, #17
    489a:	50a3      	str	r3, [r4, r2]
    489c:	3212      	adds	r2, #18
    489e:	54a3      	strb	r3, [r4, r2]
    48a0:	6723      	str	r3, [r4, #112]	; 0x70
    48a2:	3a0e      	subs	r2, #14
    48a4:	50a3      	str	r3, [r4, r2]
    48a6:	320f      	adds	r2, #15
    48a8:	54a3      	strb	r3, [r4, r2]
    48aa:	6763      	str	r3, [r4, #116]	; 0x74
    48ac:	3a0b      	subs	r2, #11
    48ae:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    48b0:	2101      	movs	r1, #1
    48b2:	320c      	adds	r2, #12
    48b4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    48b6:	3201      	adds	r2, #1
    48b8:	54a3      	strb	r3, [r4, r2]
}
    48ba:	bd10      	pop	{r4, pc}
    48bc:	000046dd 	.word	0x000046dd
    48c0:	0000a86c 	.word	0x0000a86c

000048c4 <tcc_init>:
{
    48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48c6:	46de      	mov	lr, fp
    48c8:	4657      	mov	r7, sl
    48ca:	464e      	mov	r6, r9
    48cc:	4645      	mov	r5, r8
    48ce:	b5e0      	push	{r5, r6, r7, lr}
    48d0:	b091      	sub	sp, #68	; 0x44
    48d2:	9001      	str	r0, [sp, #4]
    48d4:	000c      	movs	r4, r1
    48d6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    48d8:	0008      	movs	r0, r1
    48da:	4bc3      	ldr	r3, [pc, #780]	; (4be8 <tcc_init+0x324>)
    48dc:	4798      	blx	r3
    48de:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    48e0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    48e2:	48c2      	ldr	r0, [pc, #776]	; (4bec <tcc_init+0x328>)
    48e4:	6a02      	ldr	r2, [r0, #32]
    48e6:	009e      	lsls	r6, r3, #2
    48e8:	4fc1      	ldr	r7, [pc, #772]	; (4bf0 <tcc_init+0x32c>)
    48ea:	59f7      	ldr	r7, [r6, r7]
    48ec:	433a      	orrs	r2, r7
    48ee:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    48f0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    48f2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    48f4:	0792      	lsls	r2, r2, #30
    48f6:	d506      	bpl.n	4906 <tcc_init+0x42>
}
    48f8:	b011      	add	sp, #68	; 0x44
    48fa:	bc3c      	pop	{r2, r3, r4, r5}
    48fc:	4690      	mov	r8, r2
    48fe:	4699      	mov	r9, r3
    4900:	46a2      	mov	sl, r4
    4902:	46ab      	mov	fp, r5
    4904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    4906:	6822      	ldr	r2, [r4, #0]
    4908:	2701      	movs	r7, #1
    490a:	4017      	ands	r7, r2
    490c:	d1f4      	bne.n	48f8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    490e:	48b9      	ldr	r0, [pc, #740]	; (4bf4 <tcc_init+0x330>)
    4910:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    4912:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    4914:	682e      	ldr	r6, [r5, #0]
    4916:	42b2      	cmp	r2, r6
    4918:	d3ee      	bcc.n	48f8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    491a:	686e      	ldr	r6, [r5, #4]
    491c:	42b2      	cmp	r2, r6
    491e:	d3eb      	bcc.n	48f8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    4920:	69e8      	ldr	r0, [r5, #28]
    4922:	4282      	cmp	r2, r0
    4924:	d200      	bcs.n	4928 <tcc_init+0x64>
    4926:	e1b9      	b.n	4c9c <tcc_init+0x3d8>
    4928:	6a28      	ldr	r0, [r5, #32]
    492a:	4282      	cmp	r2, r0
    492c:	d200      	bcs.n	4930 <tcc_init+0x6c>
    492e:	e1b7      	b.n	4ca0 <tcc_init+0x3dc>
    4930:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4932:	4282      	cmp	r2, r0
    4934:	d200      	bcs.n	4938 <tcc_init+0x74>
    4936:	e1b5      	b.n	4ca4 <tcc_init+0x3e0>
    4938:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    493a:	4282      	cmp	r2, r0
    493c:	d200      	bcs.n	4940 <tcc_init+0x7c>
    493e:	e1b3      	b.n	4ca8 <tcc_init+0x3e4>
    4940:	2298      	movs	r2, #152	; 0x98
    4942:	4694      	mov	ip, r2
    4944:	44ac      	add	ip, r5
    4946:	4662      	mov	r2, ip
    4948:	9208      	str	r2, [sp, #32]
    494a:	2000      	movs	r0, #0
    494c:	e003      	b.n	4956 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    494e:	3001      	adds	r0, #1
    4950:	3201      	adds	r2, #1
    4952:	2808      	cmp	r0, #8
    4954:	d008      	beq.n	4968 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    4956:	7816      	ldrb	r6, [r2, #0]
    4958:	2e00      	cmp	r6, #0
    495a:	d0f8      	beq.n	494e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    495c:	4ea6      	ldr	r6, [pc, #664]	; (4bf8 <tcc_init+0x334>)
    495e:	5c76      	ldrb	r6, [r6, r1]
    4960:	4286      	cmp	r6, r0
    4962:	dcf4      	bgt.n	494e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    4964:	2017      	movs	r0, #23
    4966:	e7c7      	b.n	48f8 <tcc_init+0x34>
    4968:	2200      	movs	r2, #0
    496a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    496c:	2080      	movs	r0, #128	; 0x80
    496e:	0440      	lsls	r0, r0, #17
    4970:	4684      	mov	ip, r0
    4972:	e002      	b.n	497a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4974:	3201      	adds	r2, #1
    4976:	2a04      	cmp	r2, #4
    4978:	d00e      	beq.n	4998 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    497a:	18a8      	adds	r0, r5, r2
    497c:	7c00      	ldrb	r0, [r0, #16]
    497e:	2801      	cmp	r0, #1
    4980:	d1f8      	bne.n	4974 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    4982:	489e      	ldr	r0, [pc, #632]	; (4bfc <tcc_init+0x338>)
    4984:	5c40      	ldrb	r0, [r0, r1]
    4986:	4290      	cmp	r0, r2
    4988:	da00      	bge.n	498c <tcc_init+0xc8>
    498a:	e18f      	b.n	4cac <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    498c:	4660      	mov	r0, ip
    498e:	4090      	lsls	r0, r2
    4990:	9e02      	ldr	r6, [sp, #8]
    4992:	4306      	orrs	r6, r0
    4994:	9602      	str	r6, [sp, #8]
    4996:	e7ed      	b.n	4974 <tcc_init+0xb0>
	if (config->run_in_standby) {
    4998:	329d      	adds	r2, #157	; 0x9d
    499a:	5caa      	ldrb	r2, [r5, r2]
    499c:	2a00      	cmp	r2, #0
    499e:	d004      	beq.n	49aa <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    49a0:	2280      	movs	r2, #128	; 0x80
    49a2:	0112      	lsls	r2, r2, #4
    49a4:	9902      	ldr	r1, [sp, #8]
    49a6:	4311      	orrs	r1, r2
    49a8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    49aa:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    49ac:	1e51      	subs	r1, r2, #1
    49ae:	418a      	sbcs	r2, r1
    49b0:	0092      	lsls	r2, r2, #2
    49b2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    49b4:	7a6a      	ldrb	r2, [r5, #9]
    49b6:	2a01      	cmp	r2, #1
    49b8:	d022      	beq.n	4a00 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    49ba:	4a90      	ldr	r2, [pc, #576]	; (4bfc <tcc_init+0x338>)
    49bc:	5cd2      	ldrb	r2, [r2, r3]
    49be:	0011      	movs	r1, r2
    49c0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    49c2:	2235      	movs	r2, #53	; 0x35
    49c4:	5caa      	ldrb	r2, [r5, r2]
    49c6:	428a      	cmp	r2, r1
    49c8:	d300      	bcc.n	49cc <tcc_init+0x108>
    49ca:	e179      	b.n	4cc0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    49cc:	212c      	movs	r1, #44	; 0x2c
    49ce:	5c69      	ldrb	r1, [r5, r1]
    49d0:	290f      	cmp	r1, #15
    49d2:	d900      	bls.n	49d6 <tcc_init+0x112>
    49d4:	e174      	b.n	4cc0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    49d6:	7b28      	ldrb	r0, [r5, #12]
    49d8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    49da:	7ae8      	ldrb	r0, [r5, #11]
    49dc:	900b      	str	r0, [sp, #44]	; 0x2c
    49de:	202d      	movs	r0, #45	; 0x2d
    49e0:	4682      	mov	sl, r0
    49e2:	44aa      	add	sl, r5
    49e4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    49e6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    49e8:	ae0e      	add	r6, sp, #56	; 0x38
    49ea:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    49ec:	26c0      	movs	r6, #192	; 0xc0
    49ee:	0136      	lsls	r6, r6, #4
    49f0:	46b1      	mov	r9, r6
    49f2:	4684      	mov	ip, r0
    49f4:	46a0      	mov	r8, r4
    49f6:	0028      	movs	r0, r5
    49f8:	4655      	mov	r5, sl
    49fa:	9309      	str	r3, [sp, #36]	; 0x24
    49fc:	4682      	mov	sl, r0
    49fe:	e035      	b.n	4a6c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    4a00:	9906      	ldr	r1, [sp, #24]
    4a02:	4311      	orrs	r1, r2
    4a04:	9106      	str	r1, [sp, #24]
    4a06:	e7d8      	b.n	49ba <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4a08:	0292      	lsls	r2, r2, #10
    4a0a:	464f      	mov	r7, r9
    4a0c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a0e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    4a10:	7919      	ldrb	r1, [r3, #4]
    4a12:	468b      	mov	fp, r1
    4a14:	2103      	movs	r1, #3
    4a16:	465f      	mov	r7, fp
    4a18:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a1a:	430a      	orrs	r2, r1
    4a1c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    4a1e:	795a      	ldrb	r2, [r3, #5]
    4a20:	0152      	lsls	r2, r2, #5
    4a22:	2160      	movs	r1, #96	; 0x60
    4a24:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a26:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    4a28:	7999      	ldrb	r1, [r3, #6]
    4a2a:	0209      	lsls	r1, r1, #8
    4a2c:	26c0      	movs	r6, #192	; 0xc0
    4a2e:	00b6      	lsls	r6, r6, #2
    4a30:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a32:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    4a34:	79da      	ldrb	r2, [r3, #7]
    4a36:	0312      	lsls	r2, r2, #12
    4a38:	21e0      	movs	r1, #224	; 0xe0
    4a3a:	01c9      	lsls	r1, r1, #7
    4a3c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a3e:	4316      	orrs	r6, r2
    4a40:	4334      	orrs	r4, r6
    4a42:	9a03      	ldr	r2, [sp, #12]
    4a44:	4314      	orrs	r4, r2
    4a46:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    4a48:	4662      	mov	r2, ip
    4a4a:	9907      	ldr	r1, [sp, #28]
    4a4c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    4a4e:	2a04      	cmp	r2, #4
    4a50:	d02a      	beq.n	4aa8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    4a52:	7c9a      	ldrb	r2, [r3, #18]
    4a54:	9905      	ldr	r1, [sp, #20]
    4a56:	4291      	cmp	r1, r2
    4a58:	d800      	bhi.n	4a5c <tcc_init+0x198>
    4a5a:	e131      	b.n	4cc0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4a5c:	7a59      	ldrb	r1, [r3, #9]
    4a5e:	350a      	adds	r5, #10
    4a60:	2304      	movs	r3, #4
    4a62:	469b      	mov	fp, r3
    4a64:	44dc      	add	ip, fp
    4a66:	290f      	cmp	r1, #15
    4a68:	d900      	bls.n	4a6c <tcc_init+0x1a8>
    4a6a:	e129      	b.n	4cc0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    4a6c:	0609      	lsls	r1, r1, #24
    4a6e:	23f0      	movs	r3, #240	; 0xf0
    4a70:	051b      	lsls	r3, r3, #20
    4a72:	4019      	ands	r1, r3
    4a74:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4a76:	782e      	ldrb	r6, [r5, #0]
    4a78:	0436      	lsls	r6, r6, #16
    4a7a:	20ff      	movs	r0, #255	; 0xff
    4a7c:	0400      	lsls	r0, r0, #16
    4a7e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4a80:	7868      	ldrb	r0, [r5, #1]
    4a82:	2480      	movs	r4, #128	; 0x80
    4a84:	2800      	cmp	r0, #0
    4a86:	d100      	bne.n	4a8a <tcc_init+0x1c6>
    4a88:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4a8a:	7898      	ldrb	r0, [r3, #2]
    4a8c:	2708      	movs	r7, #8
    4a8e:	9703      	str	r7, [sp, #12]
    4a90:	2800      	cmp	r0, #0
    4a92:	d101      	bne.n	4a98 <tcc_init+0x1d4>
    4a94:	9804      	ldr	r0, [sp, #16]
    4a96:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4a98:	78d8      	ldrb	r0, [r3, #3]
    4a9a:	4683      	mov	fp, r0
    4a9c:	2010      	movs	r0, #16
    4a9e:	465f      	mov	r7, fp
    4aa0:	2f00      	cmp	r7, #0
    4aa2:	d1b1      	bne.n	4a08 <tcc_init+0x144>
    4aa4:	9804      	ldr	r0, [sp, #16]
    4aa6:	e7af      	b.n	4a08 <tcc_init+0x144>
    4aa8:	4644      	mov	r4, r8
    4aaa:	4655      	mov	r5, sl
    4aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    4aae:	4a52      	ldr	r2, [pc, #328]	; (4bf8 <tcc_init+0x334>)
    4ab0:	5cd2      	ldrb	r2, [r2, r3]
    4ab2:	4691      	mov	r9, r2
    4ab4:	4651      	mov	r1, sl
    4ab6:	3150      	adds	r1, #80	; 0x50
    4ab8:	4650      	mov	r0, sl
    4aba:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    4abc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4abe:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4ac0:	2601      	movs	r6, #1
    4ac2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4ac4:	2602      	movs	r6, #2
    4ac6:	36ff      	adds	r6, #255	; 0xff
    4ac8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4aca:	2680      	movs	r6, #128	; 0x80
    4acc:	0276      	lsls	r6, r6, #9
    4ace:	46b0      	mov	r8, r6
    4ad0:	46a4      	mov	ip, r4
    4ad2:	001c      	movs	r4, r3
    4ad4:	464b      	mov	r3, r9
    4ad6:	e00f      	b.n	4af8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4ad8:	7806      	ldrb	r6, [r0, #0]
    4ada:	2e00      	cmp	r6, #0
    4adc:	d007      	beq.n	4aee <tcc_init+0x22a>
			if (i >= ow_num) {
    4ade:	4293      	cmp	r3, r2
    4ae0:	d800      	bhi.n	4ae4 <tcc_init+0x220>
    4ae2:	e0e7      	b.n	4cb4 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4ae4:	2e02      	cmp	r6, #2
    4ae6:	d014      	beq.n	4b12 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4ae8:	4656      	mov	r6, sl
    4aea:	4096      	lsls	r6, r2
    4aec:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    4aee:	3201      	adds	r2, #1
    4af0:	3101      	adds	r1, #1
    4af2:	3002      	adds	r0, #2
    4af4:	2a08      	cmp	r2, #8
    4af6:	d010      	beq.n	4b1a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    4af8:	780e      	ldrb	r6, [r1, #0]
    4afa:	2e00      	cmp	r6, #0
    4afc:	d0ec      	beq.n	4ad8 <tcc_init+0x214>
			if (i >= ow_num) {
    4afe:	4293      	cmp	r3, r2
    4b00:	d800      	bhi.n	4b04 <tcc_init+0x240>
    4b02:	e0d5      	b.n	4cb0 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4b04:	4646      	mov	r6, r8
    4b06:	4096      	lsls	r6, r2
    4b08:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4b0a:	7806      	ldrb	r6, [r0, #0]
    4b0c:	2e00      	cmp	r6, #0
    4b0e:	d1e9      	bne.n	4ae4 <tcc_init+0x220>
    4b10:	e7ed      	b.n	4aee <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4b12:	465e      	mov	r6, fp
    4b14:	4096      	lsls	r6, r2
    4b16:	4337      	orrs	r7, r6
    4b18:	e7e9      	b.n	4aee <tcc_init+0x22a>
    4b1a:	4699      	mov	r9, r3
    4b1c:	0023      	movs	r3, r4
    4b1e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4b20:	7e6a      	ldrb	r2, [r5, #25]
    4b22:	0112      	lsls	r2, r2, #4
    4b24:	2130      	movs	r1, #48	; 0x30
    4b26:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    4b28:	7e28      	ldrb	r0, [r5, #24]
    4b2a:	2207      	movs	r2, #7
    4b2c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    4b2e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4b30:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    4b32:	2080      	movs	r0, #128	; 0x80
    4b34:	0240      	lsls	r0, r0, #9
    4b36:	000e      	movs	r6, r1
    4b38:	e002      	b.n	4b40 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    4b3a:	3201      	adds	r2, #1
    4b3c:	2a04      	cmp	r2, #4
    4b3e:	d00b      	beq.n	4b58 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    4b40:	18a9      	adds	r1, r5, r2
    4b42:	7d09      	ldrb	r1, [r1, #20]
    4b44:	2900      	cmp	r1, #0
    4b46:	d0f8      	beq.n	4b3a <tcc_init+0x276>
			if (n >= cc_num) {
    4b48:	9905      	ldr	r1, [sp, #20]
    4b4a:	4291      	cmp	r1, r2
    4b4c:	dc00      	bgt.n	4b50 <tcc_init+0x28c>
    4b4e:	e0b3      	b.n	4cb8 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    4b50:	0001      	movs	r1, r0
    4b52:	4091      	lsls	r1, r2
    4b54:	430e      	orrs	r6, r1
    4b56:	e7f0      	b.n	4b3a <tcc_init+0x276>
    4b58:	46b2      	mov	sl, r6
    4b5a:	9801      	ldr	r0, [sp, #4]
    4b5c:	0002      	movs	r2, r0
    4b5e:	3204      	adds	r2, #4
    4b60:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    4b62:	2100      	movs	r1, #0
    4b64:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    4b66:	4282      	cmp	r2, r0
    4b68:	d1fc      	bne.n	4b64 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    4b6a:	2200      	movs	r2, #0
    4b6c:	9801      	ldr	r0, [sp, #4]
    4b6e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    4b70:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    4b72:	0099      	lsls	r1, r3, #2
    4b74:	4a22      	ldr	r2, [pc, #136]	; (4c00 <tcc_init+0x33c>)
    4b76:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    4b78:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    4b7a:	22a0      	movs	r2, #160	; 0xa0
    4b7c:	5ca9      	ldrb	r1, [r5, r2]
    4b7e:	3a64      	subs	r2, #100	; 0x64
    4b80:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    4b82:	a90d      	add	r1, sp, #52	; 0x34
    4b84:	7aaa      	ldrb	r2, [r5, #10]
    4b86:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    4b88:	4a1e      	ldr	r2, [pc, #120]	; (4c04 <tcc_init+0x340>)
    4b8a:	5cd6      	ldrb	r6, [r2, r3]
    4b8c:	0030      	movs	r0, r6
    4b8e:	4b1e      	ldr	r3, [pc, #120]	; (4c08 <tcc_init+0x344>)
    4b90:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    4b92:	0030      	movs	r0, r6
    4b94:	4b1d      	ldr	r3, [pc, #116]	; (4c0c <tcc_init+0x348>)
    4b96:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    4b98:	464b      	mov	r3, r9
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	dd3c      	ble.n	4c18 <tcc_init+0x354>
    4b9e:	002e      	movs	r6, r5
    4ba0:	3658      	adds	r6, #88	; 0x58
    4ba2:	3398      	adds	r3, #152	; 0x98
    4ba4:	4698      	mov	r8, r3
    4ba6:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4ba8:	2301      	movs	r3, #1
    4baa:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    4bac:	46ab      	mov	fp, r5
    4bae:	4645      	mov	r5, r8
    4bb0:	46a0      	mov	r8, r4
    4bb2:	9c08      	ldr	r4, [sp, #32]
    4bb4:	e003      	b.n	4bbe <tcc_init+0x2fa>
    4bb6:	3401      	adds	r4, #1
    4bb8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    4bba:	42ac      	cmp	r4, r5
    4bbc:	d02a      	beq.n	4c14 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    4bbe:	7823      	ldrb	r3, [r4, #0]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d0f8      	beq.n	4bb6 <tcc_init+0x2f2>
    4bc4:	ab0c      	add	r3, sp, #48	; 0x30
    4bc6:	464a      	mov	r2, r9
    4bc8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4bca:	2300      	movs	r3, #0
    4bcc:	aa0c      	add	r2, sp, #48	; 0x30
    4bce:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    4bd0:	0013      	movs	r3, r2
    4bd2:	2220      	movs	r2, #32
    4bd4:	18b2      	adds	r2, r6, r2
    4bd6:	7812      	ldrb	r2, [r2, #0]
    4bd8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4bda:	464a      	mov	r2, r9
    4bdc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    4bde:	7830      	ldrb	r0, [r6, #0]
    4be0:	0019      	movs	r1, r3
    4be2:	4b0b      	ldr	r3, [pc, #44]	; (4c10 <tcc_init+0x34c>)
    4be4:	4798      	blx	r3
    4be6:	e7e6      	b.n	4bb6 <tcc_init+0x2f2>
    4be8:	000046dd 	.word	0x000046dd
    4bec:	40000400 	.word	0x40000400
    4bf0:	0000a858 	.word	0x0000a858
    4bf4:	0000a86c 	.word	0x0000a86c
    4bf8:	0000a878 	.word	0x0000a878
    4bfc:	0000a864 	.word	0x0000a864
    4c00:	200006a0 	.word	0x200006a0
    4c04:	0000a868 	.word	0x0000a868
    4c08:	000045a9 	.word	0x000045a9
    4c0c:	0000451d 	.word	0x0000451d
    4c10:	000046a1 	.word	0x000046a1
    4c14:	4644      	mov	r4, r8
    4c16:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4c1a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c1e:	0212      	lsls	r2, r2, #8
    4c20:	4313      	orrs	r3, r2
    4c22:	9a02      	ldr	r2, [sp, #8]
    4c24:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    4c26:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    4c28:	2204      	movs	r2, #4
    4c2a:	68a3      	ldr	r3, [r4, #8]
    4c2c:	421a      	tst	r2, r3
    4c2e:	d1fc      	bne.n	4c2a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    4c30:	23ff      	movs	r3, #255	; 0xff
    4c32:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    4c34:	2204      	movs	r2, #4
    4c36:	68a3      	ldr	r3, [r4, #8]
    4c38:	421a      	tst	r2, r3
    4c3a:	d1fc      	bne.n	4c36 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    4c3c:	466b      	mov	r3, sp
    4c3e:	7e1b      	ldrb	r3, [r3, #24]
    4c40:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    4c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4c44:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    4c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c48:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    4c4a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    4c4c:	4a1d      	ldr	r2, [pc, #116]	; (4cc4 <tcc_init+0x400>)
    4c4e:	68a3      	ldr	r3, [r4, #8]
    4c50:	4213      	tst	r3, r2
    4c52:	d1fc      	bne.n	4c4e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    4c54:	4653      	mov	r3, sl
    4c56:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    4c58:	2210      	movs	r2, #16
    4c5a:	68a3      	ldr	r3, [r4, #8]
    4c5c:	421a      	tst	r2, r3
    4c5e:	d1fc      	bne.n	4c5a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    4c60:	682b      	ldr	r3, [r5, #0]
    4c62:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    4c64:	4a18      	ldr	r2, [pc, #96]	; (4cc8 <tcc_init+0x404>)
    4c66:	68a3      	ldr	r3, [r4, #8]
    4c68:	4213      	tst	r3, r2
    4c6a:	d1fc      	bne.n	4c66 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    4c6c:	686b      	ldr	r3, [r5, #4]
    4c6e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    4c70:	9805      	ldr	r0, [sp, #20]
    4c72:	2800      	cmp	r0, #0
    4c74:	dd22      	ble.n	4cbc <tcc_init+0x3f8>
    4c76:	351c      	adds	r5, #28
    4c78:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    4c7a:	4e14      	ldr	r6, [pc, #80]	; (4ccc <tcc_init+0x408>)
    4c7c:	0032      	movs	r2, r6
    4c7e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    4c80:	68a3      	ldr	r3, [r4, #8]
    4c82:	421a      	tst	r2, r3
    4c84:	d1fc      	bne.n	4c80 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    4c86:	cd04      	ldmia	r5!, {r2}
    4c88:	000b      	movs	r3, r1
    4c8a:	3310      	adds	r3, #16
    4c8c:	009b      	lsls	r3, r3, #2
    4c8e:	18e3      	adds	r3, r4, r3
    4c90:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    4c92:	3101      	adds	r1, #1
    4c94:	4288      	cmp	r0, r1
    4c96:	dcf1      	bgt.n	4c7c <tcc_init+0x3b8>
	return STATUS_OK;
    4c98:	2000      	movs	r0, #0
    4c9a:	e62d      	b.n	48f8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    4c9c:	2017      	movs	r0, #23
    4c9e:	e62b      	b.n	48f8 <tcc_init+0x34>
    4ca0:	2017      	movs	r0, #23
    4ca2:	e629      	b.n	48f8 <tcc_init+0x34>
    4ca4:	2017      	movs	r0, #23
    4ca6:	e627      	b.n	48f8 <tcc_init+0x34>
    4ca8:	2017      	movs	r0, #23
    4caa:	e625      	b.n	48f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4cac:	2017      	movs	r0, #23
    4cae:	e623      	b.n	48f8 <tcc_init+0x34>
			if (i >= ow_num) {
    4cb0:	2017      	movs	r0, #23
    4cb2:	e621      	b.n	48f8 <tcc_init+0x34>
			if (i >= ow_num) {
    4cb4:	2017      	movs	r0, #23
    4cb6:	e61f      	b.n	48f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4cb8:	2017      	movs	r0, #23
    4cba:	e61d      	b.n	48f8 <tcc_init+0x34>
	return STATUS_OK;
    4cbc:	2000      	movs	r0, #0
    4cbe:	e61b      	b.n	48f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4cc0:	2017      	movs	r0, #23
    4cc2:	e619      	b.n	48f8 <tcc_init+0x34>
    4cc4:	00020040 	.word	0x00020040
    4cc8:	00040080 	.word	0x00040080
    4ccc:	00080100 	.word	0x00080100

00004cd0 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    4cd0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    4cd2:	233c      	movs	r3, #60	; 0x3c
    4cd4:	5cc3      	ldrb	r3, [r0, r3]
    4cd6:	4c01      	ldr	r4, [pc, #4]	; (4cdc <tcc_set_compare_value+0xc>)
    4cd8:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    4cda:	bd10      	pop	{r4, pc}
    4cdc:	00004711 	.word	0x00004711

00004ce0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    4ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ce2:	46c6      	mov	lr, r8
    4ce4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    4ce6:	0080      	lsls	r0, r0, #2
    4ce8:	4b0e      	ldr	r3, [pc, #56]	; (4d24 <_tcc_interrupt_handler+0x44>)
    4cea:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4cec:	683b      	ldr	r3, [r7, #0]
    4cee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4cf4:	4013      	ands	r3, r2
    4cf6:	401e      	ands	r6, r3
    4cf8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4cfa:	4b0b      	ldr	r3, [pc, #44]	; (4d28 <_tcc_interrupt_handler+0x48>)
    4cfc:	4698      	mov	r8, r3
    4cfe:	e002      	b.n	4d06 <_tcc_interrupt_handler+0x26>
    4d00:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    4d02:	2c30      	cmp	r4, #48	; 0x30
    4d04:	d00a      	beq.n	4d1c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4d06:	4643      	mov	r3, r8
    4d08:	58e5      	ldr	r5, [r4, r3]
    4d0a:	4235      	tst	r5, r6
    4d0c:	d0f8      	beq.n	4d00 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    4d0e:	193b      	adds	r3, r7, r4
    4d10:	685b      	ldr	r3, [r3, #4]
    4d12:	0038      	movs	r0, r7
    4d14:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    4d16:	683b      	ldr	r3, [r7, #0]
    4d18:	62dd      	str	r5, [r3, #44]	; 0x2c
    4d1a:	e7f1      	b.n	4d00 <_tcc_interrupt_handler+0x20>
		}
	}
}
    4d1c:	bc04      	pop	{r2}
    4d1e:	4690      	mov	r8, r2
    4d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d22:	46c0      	nop			; (mov r8, r8)
    4d24:	200006a0 	.word	0x200006a0
    4d28:	0000a87c 	.word	0x0000a87c

00004d2c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    4d2c:	b510      	push	{r4, lr}
    4d2e:	2000      	movs	r0, #0
    4d30:	4b01      	ldr	r3, [pc, #4]	; (4d38 <TCC0_Handler+0xc>)
    4d32:	4798      	blx	r3
    4d34:	bd10      	pop	{r4, pc}
    4d36:	46c0      	nop			; (mov r8, r8)
    4d38:	00004ce1 	.word	0x00004ce1

00004d3c <TCC1_Handler>:
    4d3c:	b510      	push	{r4, lr}
    4d3e:	2001      	movs	r0, #1
    4d40:	4b01      	ldr	r3, [pc, #4]	; (4d48 <TCC1_Handler+0xc>)
    4d42:	4798      	blx	r3
    4d44:	bd10      	pop	{r4, pc}
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	00004ce1 	.word	0x00004ce1

00004d4c <TCC2_Handler>:
    4d4c:	b510      	push	{r4, lr}
    4d4e:	2002      	movs	r0, #2
    4d50:	4b01      	ldr	r3, [pc, #4]	; (4d58 <TCC2_Handler+0xc>)
    4d52:	4798      	blx	r3
    4d54:	bd10      	pop	{r4, pc}
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	00004ce1 	.word	0x00004ce1

00004d5c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4d5c:	1c93      	adds	r3, r2, #2
    4d5e:	009b      	lsls	r3, r3, #2
    4d60:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    4d62:	2a02      	cmp	r2, #2
    4d64:	d009      	beq.n	4d7a <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4d66:	2a03      	cmp	r2, #3
    4d68:	d00c      	beq.n	4d84 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4d6a:	2301      	movs	r3, #1
    4d6c:	4093      	lsls	r3, r2
    4d6e:	001a      	movs	r2, r3
    4d70:	7e03      	ldrb	r3, [r0, #24]
    4d72:	4313      	orrs	r3, r2
    4d74:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    4d76:	2000      	movs	r0, #0
    4d78:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    4d7a:	7e03      	ldrb	r3, [r0, #24]
    4d7c:	2210      	movs	r2, #16
    4d7e:	4313      	orrs	r3, r2
    4d80:	7603      	strb	r3, [r0, #24]
    4d82:	e7f8      	b.n	4d76 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    4d84:	7e03      	ldrb	r3, [r0, #24]
    4d86:	2220      	movs	r2, #32
    4d88:	4313      	orrs	r3, r2
    4d8a:	7603      	strb	r3, [r0, #24]
    4d8c:	e7f3      	b.n	4d76 <tc_register_callback+0x1a>
	...

00004d90 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4d90:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4d92:	0080      	lsls	r0, r0, #2
    4d94:	4b19      	ldr	r3, [pc, #100]	; (4dfc <_tc_interrupt_handler+0x6c>)
    4d96:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4d98:	6823      	ldr	r3, [r4, #0]
    4d9a:	7b9d      	ldrb	r5, [r3, #14]
    4d9c:	7e22      	ldrb	r2, [r4, #24]
    4d9e:	7e63      	ldrb	r3, [r4, #25]
    4da0:	4013      	ands	r3, r2
    4da2:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4da4:	07eb      	lsls	r3, r5, #31
    4da6:	d40c      	bmi.n	4dc2 <_tc_interrupt_handler+0x32>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4da8:	07ab      	lsls	r3, r5, #30
    4daa:	d411      	bmi.n	4dd0 <_tc_interrupt_handler+0x40>
		(module->callback[TC_CALLBACK_ERROR])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}
	
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4dac:	6823      	ldr	r3, [r4, #0]
    4dae:	7b9d      	ldrb	r5, [r3, #14]
    4db0:	7e22      	ldrb	r2, [r4, #24]
    4db2:	7e63      	ldrb	r3, [r4, #25]
    4db4:	4013      	ands	r3, r2
    4db6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4db8:	06eb      	lsls	r3, r5, #27
    4dba:	d410      	bmi.n	4dde <_tc_interrupt_handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4dbc:	06ab      	lsls	r3, r5, #26
    4dbe:	d415      	bmi.n	4dec <_tc_interrupt_handler+0x5c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4dc2:	0020      	movs	r0, r4
    4dc4:	68a3      	ldr	r3, [r4, #8]
    4dc6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4dc8:	2301      	movs	r3, #1
    4dca:	6822      	ldr	r2, [r4, #0]
    4dcc:	7393      	strb	r3, [r2, #14]
    4dce:	e7eb      	b.n	4da8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4dd0:	0020      	movs	r0, r4
    4dd2:	68e3      	ldr	r3, [r4, #12]
    4dd4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4dd6:	2302      	movs	r3, #2
    4dd8:	6822      	ldr	r2, [r4, #0]
    4dda:	7393      	strb	r3, [r2, #14]
    4ddc:	e7e6      	b.n	4dac <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4dde:	0020      	movs	r0, r4
    4de0:	6923      	ldr	r3, [r4, #16]
    4de2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4de4:	2310      	movs	r3, #16
    4de6:	6822      	ldr	r2, [r4, #0]
    4de8:	7393      	strb	r3, [r2, #14]
    4dea:	e7e7      	b.n	4dbc <_tc_interrupt_handler+0x2c>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4dec:	0020      	movs	r0, r4
    4dee:	6963      	ldr	r3, [r4, #20]
    4df0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4df2:	6823      	ldr	r3, [r4, #0]
    4df4:	2220      	movs	r2, #32
    4df6:	739a      	strb	r2, [r3, #14]
}
    4df8:	e7e2      	b.n	4dc0 <_tc_interrupt_handler+0x30>
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	200006ac 	.word	0x200006ac

00004e00 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4e00:	b510      	push	{r4, lr}
    4e02:	2000      	movs	r0, #0
    4e04:	4b01      	ldr	r3, [pc, #4]	; (4e0c <TC3_Handler+0xc>)
    4e06:	4798      	blx	r3
    4e08:	bd10      	pop	{r4, pc}
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	00004d91 	.word	0x00004d91

00004e10 <TC4_Handler>:
    4e10:	b510      	push	{r4, lr}
    4e12:	2001      	movs	r0, #1
    4e14:	4b01      	ldr	r3, [pc, #4]	; (4e1c <TC4_Handler+0xc>)
    4e16:	4798      	blx	r3
    4e18:	bd10      	pop	{r4, pc}
    4e1a:	46c0      	nop			; (mov r8, r8)
    4e1c:	00004d91 	.word	0x00004d91

00004e20 <TC5_Handler>:
    4e20:	b510      	push	{r4, lr}
    4e22:	2002      	movs	r0, #2
    4e24:	4b01      	ldr	r3, [pc, #4]	; (4e2c <TC5_Handler+0xc>)
    4e26:	4798      	blx	r3
    4e28:	bd10      	pop	{r4, pc}
    4e2a:	46c0      	nop			; (mov r8, r8)
    4e2c:	00004d91 	.word	0x00004d91

00004e30 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4e30:	b530      	push	{r4, r5, lr}
    4e32:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4e34:	aa01      	add	r2, sp, #4
    4e36:	4b0b      	ldr	r3, [pc, #44]	; (4e64 <_tc_get_inst_index+0x34>)
    4e38:	cb32      	ldmia	r3!, {r1, r4, r5}
    4e3a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    4e3c:	9b01      	ldr	r3, [sp, #4]
    4e3e:	4298      	cmp	r0, r3
    4e40:	d00d      	beq.n	4e5e <_tc_get_inst_index+0x2e>
    4e42:	9b02      	ldr	r3, [sp, #8]
    4e44:	4298      	cmp	r0, r3
    4e46:	d008      	beq.n	4e5a <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4e48:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    4e4a:	9a03      	ldr	r2, [sp, #12]
    4e4c:	4282      	cmp	r2, r0
    4e4e:	d002      	beq.n	4e56 <_tc_get_inst_index+0x26>
}
    4e50:	0018      	movs	r0, r3
    4e52:	b005      	add	sp, #20
    4e54:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4e56:	3302      	adds	r3, #2
    4e58:	e002      	b.n	4e60 <_tc_get_inst_index+0x30>
    4e5a:	2301      	movs	r3, #1
    4e5c:	e000      	b.n	4e60 <_tc_get_inst_index+0x30>
    4e5e:	2300      	movs	r3, #0
			return i;
    4e60:	b2db      	uxtb	r3, r3
    4e62:	e7f5      	b.n	4e50 <_tc_get_inst_index+0x20>
    4e64:	0000a8ac 	.word	0x0000a8ac

00004e68 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6a:	b087      	sub	sp, #28
    4e6c:	0004      	movs	r4, r0
    4e6e:	000d      	movs	r5, r1
    4e70:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4e72:	0008      	movs	r0, r1
    4e74:	4b85      	ldr	r3, [pc, #532]	; (508c <tc_init+0x224>)
    4e76:	4798      	blx	r3
    4e78:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    4e7a:	ab05      	add	r3, sp, #20
    4e7c:	221b      	movs	r2, #27
    4e7e:	701a      	strb	r2, [r3, #0]
    4e80:	3201      	adds	r2, #1
    4e82:	705a      	strb	r2, [r3, #1]
    4e84:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    4e86:	ab03      	add	r3, sp, #12
    4e88:	2280      	movs	r2, #128	; 0x80
    4e8a:	0112      	lsls	r2, r2, #4
    4e8c:	801a      	strh	r2, [r3, #0]
    4e8e:	2280      	movs	r2, #128	; 0x80
    4e90:	0152      	lsls	r2, r2, #5
    4e92:	805a      	strh	r2, [r3, #2]
    4e94:	2280      	movs	r2, #128	; 0x80
    4e96:	0192      	lsls	r2, r2, #6
    4e98:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    4e9a:	2300      	movs	r3, #0
    4e9c:	60a3      	str	r3, [r4, #8]
    4e9e:	60e3      	str	r3, [r4, #12]
    4ea0:	6123      	str	r3, [r4, #16]
    4ea2:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4ea4:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    4ea6:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    4ea8:	0082      	lsls	r2, r0, #2
    4eaa:	4b79      	ldr	r3, [pc, #484]	; (5090 <tc_init+0x228>)
    4eac:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4eae:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4eb0:	78b3      	ldrb	r3, [r6, #2]
    4eb2:	2b08      	cmp	r3, #8
    4eb4:	d006      	beq.n	4ec4 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    4eb6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4eb8:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    4eba:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4ebc:	07db      	lsls	r3, r3, #31
    4ebe:	d505      	bpl.n	4ecc <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    4ec0:	b007      	add	sp, #28
    4ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4ec4:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4ec6:	07fa      	lsls	r2, r7, #31
    4ec8:	d5fa      	bpl.n	4ec0 <tc_init+0x58>
    4eca:	e7f4      	b.n	4eb6 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4ecc:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    4ece:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4ed0:	06db      	lsls	r3, r3, #27
    4ed2:	d4f5      	bmi.n	4ec0 <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4ed4:	882b      	ldrh	r3, [r5, #0]
    4ed6:	079b      	lsls	r3, r3, #30
    4ed8:	d4f2      	bmi.n	4ec0 <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    4eda:	7c33      	ldrb	r3, [r6, #16]
    4edc:	2b00      	cmp	r3, #0
    4ede:	d179      	bne.n	4fd4 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    4ee0:	7f33      	ldrb	r3, [r6, #28]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d000      	beq.n	4ee8 <tc_init+0x80>
    4ee6:	e081      	b.n	4fec <tc_init+0x184>
    4ee8:	496a      	ldr	r1, [pc, #424]	; (5094 <tc_init+0x22c>)
    4eea:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    4eec:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4eee:	ab03      	add	r3, sp, #12
    4ef0:	5ad3      	ldrh	r3, [r2, r3]
    4ef2:	4303      	orrs	r3, r0
    4ef4:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    4ef6:	78b3      	ldrb	r3, [r6, #2]
    4ef8:	2b08      	cmp	r3, #8
    4efa:	d100      	bne.n	4efe <tc_init+0x96>
    4efc:	e086      	b.n	500c <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    4efe:	a901      	add	r1, sp, #4
    4f00:	7833      	ldrb	r3, [r6, #0]
    4f02:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    4f04:	ab05      	add	r3, sp, #20
    4f06:	5ddf      	ldrb	r7, [r3, r7]
    4f08:	0038      	movs	r0, r7
    4f0a:	4b63      	ldr	r3, [pc, #396]	; (5098 <tc_init+0x230>)
    4f0c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    4f0e:	0038      	movs	r0, r7
    4f10:	4b62      	ldr	r3, [pc, #392]	; (509c <tc_init+0x234>)
    4f12:	4798      	blx	r3
	ctrla_tmp =
    4f14:	8931      	ldrh	r1, [r6, #8]
    4f16:	88b3      	ldrh	r3, [r6, #4]
    4f18:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    4f1a:	78b1      	ldrb	r1, [r6, #2]
    4f1c:	79b2      	ldrb	r2, [r6, #6]
    4f1e:	4311      	orrs	r1, r2
	ctrla_tmp =
    4f20:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    4f22:	7873      	ldrb	r3, [r6, #1]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d002      	beq.n	4f2e <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    4f28:	2380      	movs	r3, #128	; 0x80
    4f2a:	011b      	lsls	r3, r3, #4
    4f2c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f2e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f30:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4f32:	b25b      	sxtb	r3, r3
    4f34:	2b00      	cmp	r3, #0
    4f36:	dbfb      	blt.n	4f30 <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    4f38:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    4f3a:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    4f3c:	1e4b      	subs	r3, r1, #1
    4f3e:	4199      	sbcs	r1, r3
    4f40:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    4f42:	7bb3      	ldrb	r3, [r6, #14]
    4f44:	2b00      	cmp	r3, #0
    4f46:	d001      	beq.n	4f4c <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    4f48:	2301      	movs	r3, #1
    4f4a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f4e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4f50:	b25b      	sxtb	r3, r3
    4f52:	2b00      	cmp	r3, #0
    4f54:	dbfb      	blt.n	4f4e <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    4f56:	23ff      	movs	r3, #255	; 0xff
    4f58:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    4f5a:	2900      	cmp	r1, #0
    4f5c:	d005      	beq.n	4f6a <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f60:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    4f62:	b25b      	sxtb	r3, r3
    4f64:	2b00      	cmp	r3, #0
    4f66:	dbfb      	blt.n	4f60 <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    4f68:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    4f6a:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    4f6c:	7af3      	ldrb	r3, [r6, #11]
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d001      	beq.n	4f76 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4f72:	2310      	movs	r3, #16
    4f74:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    4f76:	7b33      	ldrb	r3, [r6, #12]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d001      	beq.n	4f80 <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4f7c:	2320      	movs	r3, #32
    4f7e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f80:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f82:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4f84:	b25b      	sxtb	r3, r3
    4f86:	2b00      	cmp	r3, #0
    4f88:	dbfb      	blt.n	4f82 <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    4f8a:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f8c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f8e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4f90:	b25b      	sxtb	r3, r3
    4f92:	2b00      	cmp	r3, #0
    4f94:	dbfb      	blt.n	4f8e <tc_init+0x126>
	switch (module_inst->counter_size) {
    4f96:	7923      	ldrb	r3, [r4, #4]
    4f98:	2b04      	cmp	r3, #4
    4f9a:	d03f      	beq.n	501c <tc_init+0x1b4>
    4f9c:	2b08      	cmp	r3, #8
    4f9e:	d05e      	beq.n	505e <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    4fa0:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d000      	beq.n	4fa8 <tc_init+0x140>
    4fa6:	e78b      	b.n	4ec0 <tc_init+0x58>
    4fa8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4faa:	b25b      	sxtb	r3, r3
    4fac:	2b00      	cmp	r3, #0
    4fae:	dbfb      	blt.n	4fa8 <tc_init+0x140>
				= config->counter_16_bit.value;
    4fb0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4fb2:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4fb4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4fb6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4fb8:	b25b      	sxtb	r3, r3
    4fba:	2b00      	cmp	r3, #0
    4fbc:	dbfb      	blt.n	4fb6 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    4fbe:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    4fc0:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4fc2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4fc4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4fc6:	b25b      	sxtb	r3, r3
    4fc8:	2b00      	cmp	r3, #0
    4fca:	dbfb      	blt.n	4fc4 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    4fcc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    4fce:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    4fd0:	2000      	movs	r0, #0
    4fd2:	e775      	b.n	4ec0 <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4fd4:	a902      	add	r1, sp, #8
    4fd6:	2301      	movs	r3, #1
    4fd8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4fda:	2200      	movs	r2, #0
    4fdc:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    4fde:	7e32      	ldrb	r2, [r6, #24]
    4fe0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4fe2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    4fe4:	7d30      	ldrb	r0, [r6, #20]
    4fe6:	4b2e      	ldr	r3, [pc, #184]	; (50a0 <tc_init+0x238>)
    4fe8:	4798      	blx	r3
    4fea:	e779      	b.n	4ee0 <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4fec:	a902      	add	r1, sp, #8
    4fee:	2301      	movs	r3, #1
    4ff0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4ff2:	2200      	movs	r2, #0
    4ff4:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    4ff6:	3224      	adds	r2, #36	; 0x24
    4ff8:	18b2      	adds	r2, r6, r2
    4ffa:	7812      	ldrb	r2, [r2, #0]
    4ffc:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4ffe:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5000:	331f      	adds	r3, #31
    5002:	18f3      	adds	r3, r6, r3
    5004:	7818      	ldrb	r0, [r3, #0]
    5006:	4b26      	ldr	r3, [pc, #152]	; (50a0 <tc_init+0x238>)
    5008:	4798      	blx	r3
    500a:	e76d      	b.n	4ee8 <tc_init+0x80>
    500c:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    500e:	1c7a      	adds	r2, r7, #1
    5010:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5012:	ab03      	add	r3, sp, #12
    5014:	5ad3      	ldrh	r3, [r2, r3]
    5016:	4303      	orrs	r3, r0
    5018:	620b      	str	r3, [r1, #32]
    501a:	e770      	b.n	4efe <tc_init+0x96>
    501c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    501e:	b25b      	sxtb	r3, r3
    5020:	2b00      	cmp	r3, #0
    5022:	dbfb      	blt.n	501c <tc_init+0x1b4>
					config->counter_8_bit.value;
    5024:	2328      	movs	r3, #40	; 0x28
    5026:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    5028:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    502a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    502c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    502e:	b25b      	sxtb	r3, r3
    5030:	2b00      	cmp	r3, #0
    5032:	dbfb      	blt.n	502c <tc_init+0x1c4>
					config->counter_8_bit.period;
    5034:	2329      	movs	r3, #41	; 0x29
    5036:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    5038:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    503a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    503c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    503e:	b25b      	sxtb	r3, r3
    5040:	2b00      	cmp	r3, #0
    5042:	dbfb      	blt.n	503c <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    5044:	232a      	movs	r3, #42	; 0x2a
    5046:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    5048:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    504a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    504c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    504e:	b25b      	sxtb	r3, r3
    5050:	2b00      	cmp	r3, #0
    5052:	dbfb      	blt.n	504c <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    5054:	232b      	movs	r3, #43	; 0x2b
    5056:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    5058:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    505a:	2000      	movs	r0, #0
    505c:	e730      	b.n	4ec0 <tc_init+0x58>
    505e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    5060:	b25b      	sxtb	r3, r3
    5062:	2b00      	cmp	r3, #0
    5064:	dbfb      	blt.n	505e <tc_init+0x1f6>
				= config->counter_32_bit.value;
    5066:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5068:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    506a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    506c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    506e:	b25b      	sxtb	r3, r3
    5070:	2b00      	cmp	r3, #0
    5072:	dbfb      	blt.n	506c <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    5074:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5076:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5078:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    507a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    507c:	b25b      	sxtb	r3, r3
    507e:	2b00      	cmp	r3, #0
    5080:	dbfb      	blt.n	507a <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    5082:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5084:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    5086:	2000      	movs	r0, #0
    5088:	e71a      	b.n	4ec0 <tc_init+0x58>
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	00004e31 	.word	0x00004e31
    5090:	200006ac 	.word	0x200006ac
    5094:	40000400 	.word	0x40000400
    5098:	000045a9 	.word	0x000045a9
    509c:	0000451d 	.word	0x0000451d
    50a0:	000046a1 	.word	0x000046a1

000050a4 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    50a4:	6802      	ldr	r2, [r0, #0]
    50a6:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    50a8:	b25b      	sxtb	r3, r3
    50aa:	2b00      	cmp	r3, #0
    50ac:	dbfb      	blt.n	50a6 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    50ae:	7903      	ldrb	r3, [r0, #4]
    50b0:	2b04      	cmp	r3, #4
    50b2:	d005      	beq.n	50c0 <tc_set_count_value+0x1c>
    50b4:	2b08      	cmp	r3, #8
    50b6:	d00b      	beq.n	50d0 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    50b8:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    50ba:	2b00      	cmp	r3, #0
    50bc:	d004      	beq.n	50c8 <tc_set_count_value+0x24>
	}
}
    50be:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    50c0:	b2c9      	uxtb	r1, r1
    50c2:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    50c4:	2000      	movs	r0, #0
    50c6:	e7fa      	b.n	50be <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    50c8:	b289      	uxth	r1, r1
    50ca:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    50cc:	2000      	movs	r0, #0
    50ce:	e7f6      	b.n	50be <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    50d0:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    50d2:	2000      	movs	r0, #0
    50d4:	e7f3      	b.n	50be <tc_set_count_value+0x1a>

000050d6 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    50d6:	6802      	ldr	r2, [r0, #0]
    50d8:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    50da:	b25b      	sxtb	r3, r3
    50dc:	2b00      	cmp	r3, #0
    50de:	dbfb      	blt.n	50d8 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    50e0:	7903      	ldrb	r3, [r0, #4]
    50e2:	2b04      	cmp	r3, #4
    50e4:	d005      	beq.n	50f2 <tc_get_count_value+0x1c>
    50e6:	2b08      	cmp	r3, #8
    50e8:	d009      	beq.n	50fe <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    50ea:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    50ec:	2b00      	cmp	r3, #0
    50ee:	d003      	beq.n	50f8 <tc_get_count_value+0x22>
}
    50f0:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    50f2:	7c10      	ldrb	r0, [r2, #16]
    50f4:	b2c0      	uxtb	r0, r0
    50f6:	e7fb      	b.n	50f0 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    50f8:	8a10      	ldrh	r0, [r2, #16]
    50fa:	b280      	uxth	r0, r0
    50fc:	e7f8      	b.n	50f0 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    50fe:	6910      	ldr	r0, [r2, #16]
    5100:	e7f6      	b.n	50f0 <tc_get_count_value+0x1a>

00005102 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    5102:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5104:	6804      	ldr	r4, [r0, #0]
    5106:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    5108:	b25b      	sxtb	r3, r3
    510a:	2b00      	cmp	r3, #0
    510c:	dbfb      	blt.n	5106 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    510e:	7903      	ldrb	r3, [r0, #4]
    5110:	2b04      	cmp	r3, #4
    5112:	d005      	beq.n	5120 <tc_set_compare_value+0x1e>
    5114:	2b08      	cmp	r3, #8
    5116:	d014      	beq.n	5142 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    5118:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    511a:	2b00      	cmp	r3, #0
    511c:	d008      	beq.n	5130 <tc_set_compare_value+0x2e>
}
    511e:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    5120:	2017      	movs	r0, #23
			if (channel_index <
    5122:	2901      	cmp	r1, #1
    5124:	d8fb      	bhi.n	511e <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    5126:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    5128:	1861      	adds	r1, r4, r1
    512a:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    512c:	2000      	movs	r0, #0
    512e:	e7f6      	b.n	511e <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    5130:	2017      	movs	r0, #23
			if (channel_index <
    5132:	2901      	cmp	r1, #1
    5134:	d8f3      	bhi.n	511e <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    5136:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    5138:	310c      	adds	r1, #12
    513a:	0049      	lsls	r1, r1, #1
    513c:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    513e:	2000      	movs	r0, #0
    5140:	e7ed      	b.n	511e <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    5142:	2017      	movs	r0, #23
			if (channel_index <
    5144:	2901      	cmp	r1, #1
    5146:	d8ea      	bhi.n	511e <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    5148:	3106      	adds	r1, #6
    514a:	0089      	lsls	r1, r1, #2
    514c:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    514e:	2000      	movs	r0, #0
    5150:	e7e5      	b.n	511e <tc_set_compare_value+0x1c>

00005152 <tc_set_inital_value>:

enum status_code tc_set_inital_value(
const struct tc_module *const module_inst,
const enum tc_compare_capture_channel channel_index,
const uint32_t initial_value)
{
    5152:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */

	Tc *const tc_module = module_inst->hw;
    5154:	6804      	ldr	r4, [r0, #0]
    5156:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    5158:	b25b      	sxtb	r3, r3
    515a:	2b00      	cmp	r3, #0
    515c:	dbfb      	blt.n	5156 <tc_set_inital_value+0x4>
		/* Wait for sync */
	}
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    515e:	7903      	ldrb	r3, [r0, #4]
    5160:	2b04      	cmp	r3, #4
    5162:	d005      	beq.n	5170 <tc_set_inital_value+0x1e>
    5164:	2b08      	cmp	r3, #8
    5166:	d011      	beq.n	518c <tc_set_inital_value+0x3a>
			(uint32_t)initial_value;
			return STATUS_OK;
		}
	}

	return STATUS_ERR_INVALID_ARG;
    5168:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    516a:	2b00      	cmp	r3, #0
    516c:	d007      	beq.n	517e <tc_set_inital_value+0x2c>
}
    516e:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    5170:	2017      	movs	r0, #23
		if (channel_index <
    5172:	2901      	cmp	r1, #1
    5174:	d8fb      	bhi.n	516e <tc_set_inital_value+0x1c>
			(uint8_t)initial_value;
    5176:	b2d2      	uxtb	r2, r2
			tc_module->COUNT8.COUNT.reg  =
    5178:	7422      	strb	r2, [r4, #16]
			return STATUS_OK;
    517a:	2000      	movs	r0, #0
    517c:	e7f7      	b.n	516e <tc_set_inital_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    517e:	2017      	movs	r0, #23
		if (channel_index <
    5180:	2901      	cmp	r1, #1
    5182:	d8f4      	bhi.n	516e <tc_set_inital_value+0x1c>
			(uint16_t)initial_value;
    5184:	b292      	uxth	r2, r2
			tc_module->COUNT16.COUNT.reg =
    5186:	8222      	strh	r2, [r4, #16]
			return STATUS_OK;
    5188:	2000      	movs	r0, #0
    518a:	e7f0      	b.n	516e <tc_set_inital_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    518c:	2017      	movs	r0, #23
		if (channel_index <
    518e:	2901      	cmp	r1, #1
    5190:	d8ed      	bhi.n	516e <tc_set_inital_value+0x1c>
			tc_module->COUNT32.COUNT.reg =
    5192:	6122      	str	r2, [r4, #16]
			return STATUS_OK;
    5194:	2000      	movs	r0, #0
    5196:	e7ea      	b.n	516e <tc_set_inital_value+0x1c>

00005198 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    5198:	b510      	push	{r4, lr}
    519a:	b082      	sub	sp, #8
	enum sleepmgr_mode sleep_mode[] = {
    519c:	ab01      	add	r3, sp, #4
    519e:	2200      	movs	r2, #0
    51a0:	701a      	strb	r2, [r3, #0]
    51a2:	3203      	adds	r2, #3
    51a4:	705a      	strb	r2, [r3, #1]
    51a6:	3a01      	subs	r2, #1
    51a8:	709a      	strb	r2, [r3, #2]
    51aa:	3a01      	subs	r2, #1
    51ac:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    51ae:	4b22      	ldr	r3, [pc, #136]	; (5238 <udd_sleep_mode+0xa0>)
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	4283      	cmp	r3, r0
    51b4:	d03d      	beq.n	5232 <udd_sleep_mode+0x9a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    51b6:	2800      	cmp	r0, #0
    51b8:	d01a      	beq.n	51f0 <udd_sleep_mode+0x58>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    51ba:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    51bc:	5c1a      	ldrb	r2, [r3, r0]
    51be:	4b1f      	ldr	r3, [pc, #124]	; (523c <udd_sleep_mode+0xa4>)
    51c0:	5c9b      	ldrb	r3, [r3, r2]
    51c2:	2bff      	cmp	r3, #255	; 0xff
    51c4:	d100      	bne.n	51c8 <udd_sleep_mode+0x30>
    51c6:	e7fe      	b.n	51c6 <udd_sleep_mode+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    51c8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    51cc:	b672      	cpsid	i
    51ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    51d2:	2400      	movs	r4, #0
    51d4:	491a      	ldr	r1, [pc, #104]	; (5240 <udd_sleep_mode+0xa8>)
    51d6:	700c      	strb	r4, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    51d8:	4c18      	ldr	r4, [pc, #96]	; (523c <udd_sleep_mode+0xa4>)
    51da:	5ca1      	ldrb	r1, [r4, r2]
    51dc:	3101      	adds	r1, #1
    51de:	54a1      	strb	r1, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
    51e0:	2b00      	cmp	r3, #0
    51e2:	d105      	bne.n	51f0 <udd_sleep_mode+0x58>
		cpu_irq_enable();
    51e4:	2201      	movs	r2, #1
    51e6:	4b16      	ldr	r3, [pc, #88]	; (5240 <udd_sleep_mode+0xa8>)
    51e8:	701a      	strb	r2, [r3, #0]
    51ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    51ee:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    51f0:	4b11      	ldr	r3, [pc, #68]	; (5238 <udd_sleep_mode+0xa0>)
    51f2:	781b      	ldrb	r3, [r3, #0]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d01a      	beq.n	522e <udd_sleep_mode+0x96>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    51f8:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    51fa:	5cd2      	ldrb	r2, [r2, r3]
    51fc:	4b0f      	ldr	r3, [pc, #60]	; (523c <udd_sleep_mode+0xa4>)
    51fe:	5c9b      	ldrb	r3, [r3, r2]
    5200:	2b00      	cmp	r3, #0
    5202:	d100      	bne.n	5206 <udd_sleep_mode+0x6e>
    5204:	e7fe      	b.n	5204 <udd_sleep_mode+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5206:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    520a:	b672      	cpsid	i
    520c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5210:	2400      	movs	r4, #0
    5212:	490b      	ldr	r1, [pc, #44]	; (5240 <udd_sleep_mode+0xa8>)
    5214:	700c      	strb	r4, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    5216:	4c09      	ldr	r4, [pc, #36]	; (523c <udd_sleep_mode+0xa4>)
    5218:	5ca1      	ldrb	r1, [r4, r2]
    521a:	3901      	subs	r1, #1
    521c:	54a1      	strb	r1, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
    521e:	2b00      	cmp	r3, #0
    5220:	d105      	bne.n	522e <udd_sleep_mode+0x96>
		cpu_irq_enable();
    5222:	2201      	movs	r2, #1
    5224:	4b06      	ldr	r3, [pc, #24]	; (5240 <udd_sleep_mode+0xa8>)
    5226:	701a      	strb	r2, [r3, #0]
    5228:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    522c:	b662      	cpsie	i
	}
	udd_state = new_state;
    522e:	4b02      	ldr	r3, [pc, #8]	; (5238 <udd_sleep_mode+0xa0>)
    5230:	7018      	strb	r0, [r3, #0]
}
    5232:	b002      	add	sp, #8
    5234:	bd10      	pop	{r4, pc}
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	2000039c 	.word	0x2000039c
    523c:	20000640 	.word	0x20000640
    5240:	20000122 	.word	0x20000122

00005244 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    5244:	230f      	movs	r3, #15
    5246:	4003      	ands	r3, r0
    5248:	005b      	lsls	r3, r3, #1
    524a:	09c0      	lsrs	r0, r0, #7
    524c:	1818      	adds	r0, r3, r0
    524e:	3802      	subs	r0, #2
    5250:	0083      	lsls	r3, r0, #2
    5252:	1818      	adds	r0, r3, r0
    5254:	0080      	lsls	r0, r0, #2
    5256:	4b01      	ldr	r3, [pc, #4]	; (525c <udd_ep_get_job+0x18>)
    5258:	1818      	adds	r0, r3, r0
}
    525a:	4770      	bx	lr
    525c:	2000034c 	.word	0x2000034c

00005260 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    5260:	b5f0      	push	{r4, r5, r6, r7, lr}
    5262:	46d6      	mov	lr, sl
    5264:	464f      	mov	r7, r9
    5266:	4646      	mov	r6, r8
    5268:	b5c0      	push	{r6, r7, lr}
    526a:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    526c:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    526e:	b26b      	sxtb	r3, r5
    5270:	2b00      	cmp	r3, #0
    5272:	db26      	blt.n	52c2 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    5274:	0028      	movs	r0, r5
    5276:	4b5e      	ldr	r3, [pc, #376]	; (53f0 <udd_ep_transfer_process+0x190>)
    5278:	4798      	blx	r3
    527a:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    527c:	270f      	movs	r7, #15
    527e:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    5280:	8a03      	ldrh	r3, [r0, #16]
    5282:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    5284:	464b      	mov	r3, r9
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    528a:	7c83      	ldrb	r3, [r0, #18]
    528c:	075b      	lsls	r3, r3, #29
    528e:	d46a      	bmi.n	5366 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    5290:	68e3      	ldr	r3, [r4, #12]
    5292:	4453      	add	r3, sl
    5294:	001e      	movs	r6, r3
    5296:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    5298:	68a3      	ldr	r3, [r4, #8]
    529a:	429e      	cmp	r6, r3
    529c:	d800      	bhi.n	52a0 <udd_ep_transfer_process+0x40>
    529e:	e074      	b.n	538a <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    52a0:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    52a2:	7ca3      	ldrb	r3, [r4, #18]
    52a4:	2201      	movs	r2, #1
    52a6:	4393      	bics	r3, r2
    52a8:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    52aa:	6823      	ldr	r3, [r4, #0]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d003      	beq.n	52b8 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    52b0:	68e1      	ldr	r1, [r4, #12]
    52b2:	002a      	movs	r2, r5
    52b4:	2000      	movs	r0, #0
    52b6:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    52b8:	bc1c      	pop	{r2, r3, r4}
    52ba:	4690      	mov	r8, r2
    52bc:	4699      	mov	r9, r3
    52be:	46a2      	mov	sl, r4
    52c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    52c2:	0028      	movs	r0, r5
    52c4:	4b4a      	ldr	r3, [pc, #296]	; (53f0 <udd_ep_transfer_process+0x190>)
    52c6:	4798      	blx	r3
    52c8:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    52ca:	270f      	movs	r7, #15
    52cc:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    52ce:	8a03      	ldrh	r3, [r0, #16]
    52d0:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    52d2:	464b      	mov	r3, r9
    52d4:	885e      	ldrh	r6, [r3, #2]
    52d6:	68c3      	ldr	r3, [r0, #12]
    52d8:	469c      	mov	ip, r3
    52da:	4466      	add	r6, ip
    52dc:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    52de:	6881      	ldr	r1, [r0, #8]
    52e0:	428e      	cmp	r6, r1
    52e2:	d025      	beq.n	5330 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    52e4:	1b8d      	subs	r5, r1, r6
    52e6:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    52e8:	4b42      	ldr	r3, [pc, #264]	; (53f4 <udd_ep_transfer_process+0x194>)
    52ea:	429d      	cmp	r5, r3
    52ec:	d906      	bls.n	52fc <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    52ee:	001d      	movs	r5, r3
    52f0:	4641      	mov	r1, r8
    52f2:	0018      	movs	r0, r3
    52f4:	4b40      	ldr	r3, [pc, #256]	; (53f8 <udd_ep_transfer_process+0x198>)
    52f6:	4798      	blx	r3
    52f8:	1a6d      	subs	r5, r5, r1
    52fa:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    52fc:	7ca2      	ldrb	r2, [r4, #18]
    52fe:	2300      	movs	r3, #0
    5300:	0792      	lsls	r2, r2, #30
    5302:	d507      	bpl.n	5314 <udd_ep_transfer_process+0xb4>
    5304:	4641      	mov	r1, r8
    5306:	0028      	movs	r0, r5
    5308:	4b3c      	ldr	r3, [pc, #240]	; (53fc <udd_ep_transfer_process+0x19c>)
    530a:	4798      	blx	r3
    530c:	b289      	uxth	r1, r1
    530e:	424b      	negs	r3, r1
    5310:	414b      	adcs	r3, r1
    5312:	b2db      	uxtb	r3, r3
    5314:	005b      	lsls	r3, r3, #1
    5316:	7ca2      	ldrb	r2, [r4, #18]
    5318:	2102      	movs	r1, #2
    531a:	438a      	bics	r2, r1
    531c:	4313      	orrs	r3, r2
    531e:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    5320:	6862      	ldr	r2, [r4, #4]
    5322:	1992      	adds	r2, r2, r6
    5324:	002b      	movs	r3, r5
    5326:	0039      	movs	r1, r7
    5328:	4835      	ldr	r0, [pc, #212]	; (5400 <udd_ep_transfer_process+0x1a0>)
    532a:	4c36      	ldr	r4, [pc, #216]	; (5404 <udd_ep_transfer_process+0x1a4>)
    532c:	47a0      	blx	r4
    532e:	e7c3      	b.n	52b8 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    5330:	7c83      	ldrb	r3, [r0, #18]
    5332:	079b      	lsls	r3, r3, #30
    5334:	d40b      	bmi.n	534e <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    5336:	7c83      	ldrb	r3, [r0, #18]
    5338:	2201      	movs	r2, #1
    533a:	4393      	bics	r3, r2
    533c:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    533e:	6803      	ldr	r3, [r0, #0]
    5340:	2b00      	cmp	r3, #0
    5342:	d0b9      	beq.n	52b8 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    5344:	002a      	movs	r2, r5
    5346:	0031      	movs	r1, r6
    5348:	2000      	movs	r0, #0
    534a:	4798      	blx	r3
    534c:	e7b4      	b.n	52b8 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    534e:	7c83      	ldrb	r3, [r0, #18]
    5350:	2202      	movs	r2, #2
    5352:	4393      	bics	r3, r2
    5354:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    5356:	6842      	ldr	r2, [r0, #4]
    5358:	1992      	adds	r2, r2, r6
    535a:	2300      	movs	r3, #0
    535c:	0039      	movs	r1, r7
    535e:	4828      	ldr	r0, [pc, #160]	; (5400 <udd_ep_transfer_process+0x1a0>)
    5360:	4c28      	ldr	r4, [pc, #160]	; (5404 <udd_ep_transfer_process+0x1a4>)
    5362:	47a0      	blx	r4
    5364:	e7a8      	b.n	52b8 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    5366:	6843      	ldr	r3, [r0, #4]
    5368:	68c2      	ldr	r2, [r0, #12]
    536a:	4694      	mov	ip, r2
    536c:	4463      	add	r3, ip
    536e:	001e      	movs	r6, r3
    5370:	4641      	mov	r1, r8
    5372:	6880      	ldr	r0, [r0, #8]
    5374:	4b21      	ldr	r3, [pc, #132]	; (53fc <udd_ep_transfer_process+0x19c>)
    5376:	4798      	blx	r3
    5378:	000a      	movs	r2, r1
    537a:	1e7b      	subs	r3, r7, #1
    537c:	019b      	lsls	r3, r3, #6
    537e:	4922      	ldr	r1, [pc, #136]	; (5408 <udd_ep_transfer_process+0x1a8>)
    5380:	1859      	adds	r1, r3, r1
    5382:	0030      	movs	r0, r6
    5384:	4b21      	ldr	r3, [pc, #132]	; (540c <udd_ep_transfer_process+0x1ac>)
    5386:	4798      	blx	r3
    5388:	e782      	b.n	5290 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    538a:	464a      	mov	r2, r9
    538c:	8892      	ldrh	r2, [r2, #4]
    538e:	4552      	cmp	r2, sl
    5390:	d000      	beq.n	5394 <udd_ep_transfer_process+0x134>
    5392:	e786      	b.n	52a2 <udd_ep_transfer_process+0x42>
    5394:	429e      	cmp	r6, r3
    5396:	d100      	bne.n	539a <udd_ep_transfer_process+0x13a>
    5398:	e783      	b.n	52a2 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    539a:	1b9b      	subs	r3, r3, r6
    539c:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    539e:	4b15      	ldr	r3, [pc, #84]	; (53f4 <udd_ep_transfer_process+0x194>)
    53a0:	429d      	cmp	r5, r3
    53a2:	d916      	bls.n	53d2 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    53a4:	001d      	movs	r5, r3
    53a6:	4641      	mov	r1, r8
    53a8:	0018      	movs	r0, r3
    53aa:	4b13      	ldr	r3, [pc, #76]	; (53f8 <udd_ep_transfer_process+0x198>)
    53ac:	4798      	blx	r3
    53ae:	1a6b      	subs	r3, r5, r1
    53b0:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    53b2:	4598      	cmp	r8, r3
    53b4:	d914      	bls.n	53e0 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    53b6:	7ca3      	ldrb	r3, [r4, #18]
    53b8:	2204      	movs	r2, #4
    53ba:	4313      	orrs	r3, r2
    53bc:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    53be:	1e7a      	subs	r2, r7, #1
    53c0:	0192      	lsls	r2, r2, #6
    53c2:	4b11      	ldr	r3, [pc, #68]	; (5408 <udd_ep_transfer_process+0x1a8>)
    53c4:	18d2      	adds	r2, r2, r3
    53c6:	4643      	mov	r3, r8
    53c8:	0039      	movs	r1, r7
    53ca:	480d      	ldr	r0, [pc, #52]	; (5400 <udd_ep_transfer_process+0x1a0>)
    53cc:	4c10      	ldr	r4, [pc, #64]	; (5410 <udd_ep_transfer_process+0x1b0>)
    53ce:	47a0      	blx	r4
    53d0:	e772      	b.n	52b8 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    53d2:	4641      	mov	r1, r8
    53d4:	0028      	movs	r0, r5
    53d6:	4b09      	ldr	r3, [pc, #36]	; (53fc <udd_ep_transfer_process+0x19c>)
    53d8:	4798      	blx	r3
    53da:	1a6b      	subs	r3, r5, r1
    53dc:	b29b      	uxth	r3, r3
    53de:	e7e8      	b.n	53b2 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    53e0:	6862      	ldr	r2, [r4, #4]
    53e2:	1992      	adds	r2, r2, r6
    53e4:	0039      	movs	r1, r7
    53e6:	4806      	ldr	r0, [pc, #24]	; (5400 <udd_ep_transfer_process+0x1a0>)
    53e8:	4c09      	ldr	r4, [pc, #36]	; (5410 <udd_ep_transfer_process+0x1b0>)
    53ea:	47a0      	blx	r4
    53ec:	e764      	b.n	52b8 <udd_ep_transfer_process+0x58>
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	00005245 	.word	0x00005245
    53f4:	00001fff 	.word	0x00001fff
    53f8:	00008eb5 	.word	0x00008eb5
    53fc:	00008ce1 	.word	0x00008ce1
    5400:	20000738 	.word	0x20000738
    5404:	000063f1 	.word	0x000063f1
    5408:	200006b8 	.word	0x200006b8
    540c:	0000a4dd 	.word	0x0000a4dd
    5410:	00006445 	.word	0x00006445

00005414 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    5414:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5416:	2205      	movs	r2, #5
    5418:	4b05      	ldr	r3, [pc, #20]	; (5430 <udd_ctrl_stall_data+0x1c>)
    541a:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    541c:	4c05      	ldr	r4, [pc, #20]	; (5434 <udd_ctrl_stall_data+0x20>)
    541e:	2180      	movs	r1, #128	; 0x80
    5420:	0020      	movs	r0, r4
    5422:	4b05      	ldr	r3, [pc, #20]	; (5438 <udd_ctrl_stall_data+0x24>)
    5424:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    5426:	2100      	movs	r1, #0
    5428:	0020      	movs	r0, r4
    542a:	4b04      	ldr	r3, [pc, #16]	; (543c <udd_ctrl_stall_data+0x28>)
    542c:	4798      	blx	r3
}
    542e:	bd10      	pop	{r4, pc}
    5430:	2000034a 	.word	0x2000034a
    5434:	20000738 	.word	0x20000738
    5438:	00006345 	.word	0x00006345
    543c:	0000636b 	.word	0x0000636b

00005440 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    5440:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5442:	4c08      	ldr	r4, [pc, #32]	; (5464 <_usb_device_lpm_suspend+0x24>)
    5444:	2106      	movs	r1, #6
    5446:	0020      	movs	r0, r4
    5448:	4d07      	ldr	r5, [pc, #28]	; (5468 <_usb_device_lpm_suspend+0x28>)
    544a:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    544c:	2104      	movs	r1, #4
    544e:	0020      	movs	r0, r4
    5450:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5452:	2102      	movs	r1, #2
    5454:	0020      	movs	r0, r4
    5456:	4b05      	ldr	r3, [pc, #20]	; (546c <_usb_device_lpm_suspend+0x2c>)
    5458:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    545a:	2002      	movs	r0, #2
    545c:	4b04      	ldr	r3, [pc, #16]	; (5470 <_usb_device_lpm_suspend+0x30>)
    545e:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    5460:	bd70      	pop	{r4, r5, r6, pc}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	20000738 	.word	0x20000738
    5468:	00005e85 	.word	0x00005e85
    546c:	00005e65 	.word	0x00005e65
    5470:	00005199 	.word	0x00005199

00005474 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    5474:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5476:	4b13      	ldr	r3, [pc, #76]	; (54c4 <_usb_on_wakeup+0x50>)
    5478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    547a:	069b      	lsls	r3, r3, #26
    547c:	d41c      	bmi.n	54b8 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    547e:	4911      	ldr	r1, [pc, #68]	; (54c4 <_usb_on_wakeup+0x50>)
    5480:	22d0      	movs	r2, #208	; 0xd0
    5482:	68cb      	ldr	r3, [r1, #12]
    5484:	4013      	ands	r3, r2
    5486:	2bd0      	cmp	r3, #208	; 0xd0
    5488:	d1fb      	bne.n	5482 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    548a:	4c0f      	ldr	r4, [pc, #60]	; (54c8 <_usb_on_wakeup+0x54>)
    548c:	2102      	movs	r1, #2
    548e:	0020      	movs	r0, r4
    5490:	4b0e      	ldr	r3, [pc, #56]	; (54cc <_usb_on_wakeup+0x58>)
    5492:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5494:	2104      	movs	r1, #4
    5496:	0020      	movs	r0, r4
    5498:	4d0d      	ldr	r5, [pc, #52]	; (54d0 <_usb_on_wakeup+0x5c>)
    549a:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    549c:	4a0d      	ldr	r2, [pc, #52]	; (54d4 <_usb_on_wakeup+0x60>)
    549e:	2106      	movs	r1, #6
    54a0:	0020      	movs	r0, r4
    54a2:	4b0d      	ldr	r3, [pc, #52]	; (54d8 <_usb_on_wakeup+0x64>)
    54a4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    54a6:	2106      	movs	r1, #6
    54a8:	0020      	movs	r0, r4
    54aa:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    54ac:	2003      	movs	r0, #3
    54ae:	4b0b      	ldr	r3, [pc, #44]	; (54dc <_usb_on_wakeup+0x68>)
    54b0:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    54b2:	4b0b      	ldr	r3, [pc, #44]	; (54e0 <_usb_on_wakeup+0x6c>)
    54b4:	4798      	blx	r3
#endif
}
    54b6:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    54b8:	4902      	ldr	r1, [pc, #8]	; (54c4 <_usb_on_wakeup+0x50>)
    54ba:	2210      	movs	r2, #16
    54bc:	68cb      	ldr	r3, [r1, #12]
    54be:	421a      	tst	r2, r3
    54c0:	d0fc      	beq.n	54bc <_usb_on_wakeup+0x48>
    54c2:	e7e2      	b.n	548a <_usb_on_wakeup+0x16>
    54c4:	40000800 	.word	0x40000800
    54c8:	20000738 	.word	0x20000738
    54cc:	00005e85 	.word	0x00005e85
    54d0:	00005e65 	.word	0x00005e65
    54d4:	00005441 	.word	0x00005441
    54d8:	00005e41 	.word	0x00005e41
    54dc:	00005199 	.word	0x00005199
    54e0:	00007809 	.word	0x00007809

000054e4 <_usb_on_bus_reset>:
{
    54e4:	b570      	push	{r4, r5, r6, lr}
    54e6:	b082      	sub	sp, #8
    54e8:	0004      	movs	r4, r0
	udc_reset();
    54ea:	4b1e      	ldr	r3, [pc, #120]	; (5564 <_usb_on_bus_reset+0x80>)
    54ec:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    54ee:	2380      	movs	r3, #128	; 0x80
    54f0:	6822      	ldr	r2, [r4, #0]
    54f2:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    54f4:	ad01      	add	r5, sp, #4
    54f6:	0028      	movs	r0, r5
    54f8:	4b1b      	ldr	r3, [pc, #108]	; (5568 <_usb_on_bus_reset+0x84>)
    54fa:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    54fc:	2600      	movs	r6, #0
    54fe:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    5500:	0029      	movs	r1, r5
    5502:	0020      	movs	r0, r4
    5504:	4b19      	ldr	r3, [pc, #100]	; (556c <_usb_on_bus_reset+0x88>)
    5506:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    5508:	4919      	ldr	r1, [pc, #100]	; (5570 <_usb_on_bus_reset+0x8c>)
    550a:	0020      	movs	r0, r4
    550c:	4b19      	ldr	r3, [pc, #100]	; (5574 <_usb_on_bus_reset+0x90>)
    550e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    5510:	4b19      	ldr	r3, [pc, #100]	; (5578 <_usb_on_bus_reset+0x94>)
    5512:	2202      	movs	r2, #2
    5514:	2100      	movs	r1, #0
    5516:	0020      	movs	r0, r4
    5518:	4d18      	ldr	r5, [pc, #96]	; (557c <_usb_on_bus_reset+0x98>)
    551a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    551c:	4b18      	ldr	r3, [pc, #96]	; (5580 <_usb_on_bus_reset+0x9c>)
    551e:	2200      	movs	r2, #0
    5520:	2100      	movs	r1, #0
    5522:	0020      	movs	r0, r4
    5524:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    5526:	4b17      	ldr	r3, [pc, #92]	; (5584 <_usb_on_bus_reset+0xa0>)
    5528:	2201      	movs	r2, #1
    552a:	2100      	movs	r1, #0
    552c:	0020      	movs	r0, r4
    552e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    5530:	2202      	movs	r2, #2
    5532:	2100      	movs	r1, #0
    5534:	0020      	movs	r0, r4
    5536:	4d14      	ldr	r5, [pc, #80]	; (5588 <_usb_on_bus_reset+0xa4>)
    5538:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    553a:	2200      	movs	r2, #0
    553c:	2100      	movs	r1, #0
    553e:	0020      	movs	r0, r4
    5540:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5542:	2201      	movs	r2, #1
    5544:	2100      	movs	r1, #0
    5546:	0020      	movs	r0, r4
    5548:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    554a:	6821      	ldr	r1, [r4, #0]
    554c:	890b      	ldrh	r3, [r1, #8]
    554e:	4a0f      	ldr	r2, [pc, #60]	; (558c <_usb_on_bus_reset+0xa8>)
    5550:	401a      	ands	r2, r3
    5552:	2380      	movs	r3, #128	; 0x80
    5554:	00db      	lsls	r3, r3, #3
    5556:	4313      	orrs	r3, r2
    5558:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    555a:	4b0d      	ldr	r3, [pc, #52]	; (5590 <_usb_on_bus_reset+0xac>)
    555c:	701e      	strb	r6, [r3, #0]
}
    555e:	b002      	add	sp, #8
    5560:	bd70      	pop	{r4, r5, r6, pc}
    5562:	46c0      	nop			; (mov r8, r8)
    5564:	00002a85 	.word	0x00002a85
    5568:	00006091 	.word	0x00006091
    556c:	000060a1 	.word	0x000060a1
    5570:	200008b8 	.word	0x200008b8
    5574:	00006495 	.word	0x00006495
    5578:	000056cd 	.word	0x000056cd
    557c:	00005ea1 	.word	0x00005ea1
    5580:	000059e9 	.word	0x000059e9
    5584:	000055d1 	.word	0x000055d1
    5588:	00005ef1 	.word	0x00005ef1
    558c:	fffff3ff 	.word	0xfffff3ff
    5590:	2000034a 	.word	0x2000034a

00005594 <udd_ctrl_send_zlp_in>:
{
    5594:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    5596:	2203      	movs	r2, #3
    5598:	4b07      	ldr	r3, [pc, #28]	; (55b8 <udd_ctrl_send_zlp_in+0x24>)
    559a:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    559c:	4c07      	ldr	r4, [pc, #28]	; (55bc <udd_ctrl_send_zlp_in+0x28>)
    559e:	4908      	ldr	r1, [pc, #32]	; (55c0 <udd_ctrl_send_zlp_in+0x2c>)
    55a0:	0020      	movs	r0, r4
    55a2:	4b08      	ldr	r3, [pc, #32]	; (55c4 <udd_ctrl_send_zlp_in+0x30>)
    55a4:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    55a6:	4b08      	ldr	r3, [pc, #32]	; (55c8 <udd_ctrl_send_zlp_in+0x34>)
    55a8:	689a      	ldr	r2, [r3, #8]
    55aa:	2300      	movs	r3, #0
    55ac:	2100      	movs	r1, #0
    55ae:	0020      	movs	r0, r4
    55b0:	4c06      	ldr	r4, [pc, #24]	; (55cc <udd_ctrl_send_zlp_in+0x38>)
    55b2:	47a0      	blx	r4
}
    55b4:	bd10      	pop	{r4, pc}
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	2000034a 	.word	0x2000034a
    55bc:	20000738 	.word	0x20000738
    55c0:	200008b8 	.word	0x200008b8
    55c4:	00006495 	.word	0x00006495
    55c8:	200008a0 	.word	0x200008a0
    55cc:	000063f1 	.word	0x000063f1

000055d0 <_usb_ep0_on_tansfer_fail>:
{
    55d0:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    55d2:	7989      	ldrb	r1, [r1, #6]
    55d4:	b24b      	sxtb	r3, r1
    55d6:	2b00      	cmp	r3, #0
    55d8:	db06      	blt.n	55e8 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    55da:	4b0e      	ldr	r3, [pc, #56]	; (5614 <_usb_ep0_on_tansfer_fail+0x44>)
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	2b02      	cmp	r3, #2
    55e0:	d00f      	beq.n	5602 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    55e2:	2b03      	cmp	r3, #3
    55e4:	d011      	beq.n	560a <_usb_ep0_on_tansfer_fail+0x3a>
}
    55e6:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    55e8:	4b0a      	ldr	r3, [pc, #40]	; (5614 <_usb_ep0_on_tansfer_fail+0x44>)
    55ea:	781b      	ldrb	r3, [r3, #0]
    55ec:	2b01      	cmp	r3, #1
    55ee:	d005      	beq.n	55fc <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    55f0:	2b04      	cmp	r3, #4
    55f2:	d1f8      	bne.n	55e6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    55f4:	4808      	ldr	r0, [pc, #32]	; (5618 <_usb_ep0_on_tansfer_fail+0x48>)
    55f6:	4b09      	ldr	r3, [pc, #36]	; (561c <_usb_ep0_on_tansfer_fail+0x4c>)
    55f8:	4798      	blx	r3
    55fa:	e7f4      	b.n	55e6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    55fc:	4b08      	ldr	r3, [pc, #32]	; (5620 <_usb_ep0_on_tansfer_fail+0x50>)
    55fe:	4798      	blx	r3
    5600:	e7f1      	b.n	55e6 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5602:	2204      	movs	r2, #4
    5604:	4b03      	ldr	r3, [pc, #12]	; (5614 <_usb_ep0_on_tansfer_fail+0x44>)
    5606:	701a      	strb	r2, [r3, #0]
    5608:	e7ed      	b.n	55e6 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    560a:	4803      	ldr	r0, [pc, #12]	; (5618 <_usb_ep0_on_tansfer_fail+0x48>)
    560c:	4b03      	ldr	r3, [pc, #12]	; (561c <_usb_ep0_on_tansfer_fail+0x4c>)
    560e:	4798      	blx	r3
}
    5610:	e7e9      	b.n	55e6 <_usb_ep0_on_tansfer_fail+0x16>
    5612:	46c0      	nop			; (mov r8, r8)
    5614:	2000034a 	.word	0x2000034a
    5618:	20000738 	.word	0x20000738
    561c:	00006345 	.word	0x00006345
    5620:	00005595 	.word	0x00005595

00005624 <udd_ctrl_in_sent>:
{
    5624:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5626:	4b20      	ldr	r3, [pc, #128]	; (56a8 <udd_ctrl_in_sent+0x84>)
    5628:	881b      	ldrh	r3, [r3, #0]
    562a:	4a20      	ldr	r2, [pc, #128]	; (56ac <udd_ctrl_in_sent+0x88>)
    562c:	8994      	ldrh	r4, [r2, #12]
    562e:	1ae4      	subs	r4, r4, r3
    5630:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    5632:	2c00      	cmp	r4, #0
    5634:	d118      	bne.n	5668 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5636:	4a1e      	ldr	r2, [pc, #120]	; (56b0 <udd_ctrl_in_sent+0x8c>)
    5638:	8811      	ldrh	r1, [r2, #0]
    563a:	185b      	adds	r3, r3, r1
    563c:	b29b      	uxth	r3, r3
    563e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    5640:	4a1a      	ldr	r2, [pc, #104]	; (56ac <udd_ctrl_in_sent+0x88>)
    5642:	88d2      	ldrh	r2, [r2, #6]
    5644:	429a      	cmp	r2, r3
    5646:	d023      	beq.n	5690 <udd_ctrl_in_sent+0x6c>
    5648:	4b1a      	ldr	r3, [pc, #104]	; (56b4 <udd_ctrl_in_sent+0x90>)
    564a:	781b      	ldrb	r3, [r3, #0]
    564c:	2b00      	cmp	r3, #0
    564e:	d11f      	bne.n	5690 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    5650:	4b16      	ldr	r3, [pc, #88]	; (56ac <udd_ctrl_in_sent+0x88>)
    5652:	695b      	ldr	r3, [r3, #20]
    5654:	2b00      	cmp	r3, #0
    5656:	d023      	beq.n	56a0 <udd_ctrl_in_sent+0x7c>
    5658:	4798      	blx	r3
    565a:	2800      	cmp	r0, #0
    565c:	d020      	beq.n	56a0 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    565e:	2200      	movs	r2, #0
    5660:	4b11      	ldr	r3, [pc, #68]	; (56a8 <udd_ctrl_in_sent+0x84>)
    5662:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    5664:	4b11      	ldr	r3, [pc, #68]	; (56ac <udd_ctrl_in_sent+0x88>)
    5666:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    5668:	2c07      	cmp	r4, #7
    566a:	d919      	bls.n	56a0 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    566c:	2200      	movs	r2, #0
    566e:	4b11      	ldr	r3, [pc, #68]	; (56b4 <udd_ctrl_in_sent+0x90>)
    5670:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    5672:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    5674:	4d0c      	ldr	r5, [pc, #48]	; (56a8 <udd_ctrl_in_sent+0x84>)
    5676:	882b      	ldrh	r3, [r5, #0]
    5678:	4a0c      	ldr	r2, [pc, #48]	; (56ac <udd_ctrl_in_sent+0x88>)
    567a:	6892      	ldr	r2, [r2, #8]
    567c:	18d2      	adds	r2, r2, r3
    567e:	0023      	movs	r3, r4
    5680:	2100      	movs	r1, #0
    5682:	480d      	ldr	r0, [pc, #52]	; (56b8 <udd_ctrl_in_sent+0x94>)
    5684:	4e0d      	ldr	r6, [pc, #52]	; (56bc <udd_ctrl_in_sent+0x98>)
    5686:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    5688:	882b      	ldrh	r3, [r5, #0]
    568a:	18e4      	adds	r4, r4, r3
    568c:	802c      	strh	r4, [r5, #0]
}
    568e:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5690:	2204      	movs	r2, #4
    5692:	4b0b      	ldr	r3, [pc, #44]	; (56c0 <udd_ctrl_in_sent+0x9c>)
    5694:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5696:	490b      	ldr	r1, [pc, #44]	; (56c4 <udd_ctrl_in_sent+0xa0>)
    5698:	4807      	ldr	r0, [pc, #28]	; (56b8 <udd_ctrl_in_sent+0x94>)
    569a:	4b0b      	ldr	r3, [pc, #44]	; (56c8 <udd_ctrl_in_sent+0xa4>)
    569c:	4798      	blx	r3
			return;
    569e:	e7f6      	b.n	568e <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    56a0:	2201      	movs	r2, #1
    56a2:	4b04      	ldr	r3, [pc, #16]	; (56b4 <udd_ctrl_in_sent+0x90>)
    56a4:	701a      	strb	r2, [r3, #0]
    56a6:	e7e5      	b.n	5674 <udd_ctrl_in_sent+0x50>
    56a8:	20000346 	.word	0x20000346
    56ac:	200008a0 	.word	0x200008a0
    56b0:	20000348 	.word	0x20000348
    56b4:	20000344 	.word	0x20000344
    56b8:	20000738 	.word	0x20000738
    56bc:	000063f1 	.word	0x000063f1
    56c0:	2000034a 	.word	0x2000034a
    56c4:	200008b8 	.word	0x200008b8
    56c8:	00006495 	.word	0x00006495

000056cc <_usb_ep0_on_setup>:
{
    56cc:	b510      	push	{r4, lr}
    56ce:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    56d0:	4b2c      	ldr	r3, [pc, #176]	; (5784 <_usb_ep0_on_setup+0xb8>)
    56d2:	781b      	ldrb	r3, [r3, #0]
    56d4:	2b00      	cmp	r3, #0
    56d6:	d007      	beq.n	56e8 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    56d8:	4b2b      	ldr	r3, [pc, #172]	; (5788 <_usb_ep0_on_setup+0xbc>)
    56da:	691b      	ldr	r3, [r3, #16]
    56dc:	2b00      	cmp	r3, #0
    56de:	d000      	beq.n	56e2 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    56e0:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    56e2:	2200      	movs	r2, #0
    56e4:	4b27      	ldr	r3, [pc, #156]	; (5784 <_usb_ep0_on_setup+0xb8>)
    56e6:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    56e8:	8823      	ldrh	r3, [r4, #0]
    56ea:	2b08      	cmp	r3, #8
    56ec:	d002      	beq.n	56f4 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    56ee:	4b27      	ldr	r3, [pc, #156]	; (578c <_usb_ep0_on_setup+0xc0>)
    56f0:	4798      	blx	r3
}
    56f2:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    56f4:	4a24      	ldr	r2, [pc, #144]	; (5788 <_usb_ep0_on_setup+0xbc>)
    56f6:	4b26      	ldr	r3, [pc, #152]	; (5790 <_usb_ep0_on_setup+0xc4>)
    56f8:	7819      	ldrb	r1, [r3, #0]
    56fa:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    56fc:	7859      	ldrb	r1, [r3, #1]
    56fe:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    5700:	78d8      	ldrb	r0, [r3, #3]
    5702:	0200      	lsls	r0, r0, #8
    5704:	7899      	ldrb	r1, [r3, #2]
    5706:	1809      	adds	r1, r1, r0
    5708:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    570a:	7958      	ldrb	r0, [r3, #5]
    570c:	0200      	lsls	r0, r0, #8
    570e:	7919      	ldrb	r1, [r3, #4]
    5710:	1809      	adds	r1, r1, r0
    5712:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    5714:	79d9      	ldrb	r1, [r3, #7]
    5716:	0209      	lsls	r1, r1, #8
    5718:	799b      	ldrb	r3, [r3, #6]
    571a:	185b      	adds	r3, r3, r1
    571c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    571e:	4b1d      	ldr	r3, [pc, #116]	; (5794 <_usb_ep0_on_setup+0xc8>)
    5720:	4798      	blx	r3
    5722:	2800      	cmp	r0, #0
    5724:	d016      	beq.n	5754 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    5726:	4b18      	ldr	r3, [pc, #96]	; (5788 <_usb_ep0_on_setup+0xbc>)
    5728:	781b      	ldrb	r3, [r3, #0]
    572a:	2b7f      	cmp	r3, #127	; 0x7f
    572c:	d815      	bhi.n	575a <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    572e:	4b16      	ldr	r3, [pc, #88]	; (5788 <_usb_ep0_on_setup+0xbc>)
    5730:	88db      	ldrh	r3, [r3, #6]
    5732:	2b00      	cmp	r3, #0
    5734:	d022      	beq.n	577c <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    5736:	2300      	movs	r3, #0
    5738:	4a17      	ldr	r2, [pc, #92]	; (5798 <_usb_ep0_on_setup+0xcc>)
    573a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    573c:	4a17      	ldr	r2, [pc, #92]	; (579c <_usb_ep0_on_setup+0xd0>)
    573e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    5740:	2201      	movs	r2, #1
    5742:	4b10      	ldr	r3, [pc, #64]	; (5784 <_usb_ep0_on_setup+0xb8>)
    5744:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    5746:	2308      	movs	r3, #8
    5748:	4a11      	ldr	r2, [pc, #68]	; (5790 <_usb_ep0_on_setup+0xc4>)
    574a:	2100      	movs	r1, #0
    574c:	4814      	ldr	r0, [pc, #80]	; (57a0 <_usb_ep0_on_setup+0xd4>)
    574e:	4c15      	ldr	r4, [pc, #84]	; (57a4 <_usb_ep0_on_setup+0xd8>)
    5750:	47a0      	blx	r4
    5752:	e7ce      	b.n	56f2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    5754:	4b0d      	ldr	r3, [pc, #52]	; (578c <_usb_ep0_on_setup+0xc0>)
    5756:	4798      	blx	r3
			return;
    5758:	e7cb      	b.n	56f2 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    575a:	2300      	movs	r3, #0
    575c:	4a0e      	ldr	r2, [pc, #56]	; (5798 <_usb_ep0_on_setup+0xcc>)
    575e:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    5760:	4a0e      	ldr	r2, [pc, #56]	; (579c <_usb_ep0_on_setup+0xd0>)
    5762:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    5764:	2202      	movs	r2, #2
    5766:	4b07      	ldr	r3, [pc, #28]	; (5784 <_usb_ep0_on_setup+0xb8>)
    5768:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    576a:	2308      	movs	r3, #8
    576c:	4a08      	ldr	r2, [pc, #32]	; (5790 <_usb_ep0_on_setup+0xc4>)
    576e:	2100      	movs	r1, #0
    5770:	480b      	ldr	r0, [pc, #44]	; (57a0 <_usb_ep0_on_setup+0xd4>)
    5772:	4c0c      	ldr	r4, [pc, #48]	; (57a4 <_usb_ep0_on_setup+0xd8>)
    5774:	47a0      	blx	r4
			udd_ctrl_in_sent();
    5776:	4b0c      	ldr	r3, [pc, #48]	; (57a8 <_usb_ep0_on_setup+0xdc>)
    5778:	4798      	blx	r3
    577a:	e7ba      	b.n	56f2 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    577c:	4b0b      	ldr	r3, [pc, #44]	; (57ac <_usb_ep0_on_setup+0xe0>)
    577e:	4798      	blx	r3
				return;
    5780:	e7b7      	b.n	56f2 <_usb_ep0_on_setup+0x26>
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	2000034a 	.word	0x2000034a
    5788:	200008a0 	.word	0x200008a0
    578c:	00005415 	.word	0x00005415
    5790:	200008b8 	.word	0x200008b8
    5794:	00002b29 	.word	0x00002b29
    5798:	20000348 	.word	0x20000348
    579c:	20000346 	.word	0x20000346
    57a0:	20000738 	.word	0x20000738
    57a4:	00006445 	.word	0x00006445
    57a8:	00005625 	.word	0x00005625
    57ac:	00005595 	.word	0x00005595

000057b0 <_usb_on_sof_notify>:
{
    57b0:	b510      	push	{r4, lr}
	udc_sof_notify();
    57b2:	4b02      	ldr	r3, [pc, #8]	; (57bc <_usb_on_sof_notify+0xc>)
    57b4:	4798      	blx	r3
	UDC_SOF_EVENT();
    57b6:	4b02      	ldr	r3, [pc, #8]	; (57c0 <_usb_on_sof_notify+0x10>)
    57b8:	4798      	blx	r3
}
    57ba:	bd10      	pop	{r4, pc}
    57bc:	00002ae5 	.word	0x00002ae5
    57c0:	00007815 	.word	0x00007815

000057c4 <_usb_on_suspend>:
{
    57c4:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    57c6:	4c07      	ldr	r4, [pc, #28]	; (57e4 <_usb_on_suspend+0x20>)
    57c8:	2104      	movs	r1, #4
    57ca:	0020      	movs	r0, r4
    57cc:	4b06      	ldr	r3, [pc, #24]	; (57e8 <_usb_on_suspend+0x24>)
    57ce:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    57d0:	2102      	movs	r1, #2
    57d2:	0020      	movs	r0, r4
    57d4:	4b05      	ldr	r3, [pc, #20]	; (57ec <_usb_on_suspend+0x28>)
    57d6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    57d8:	2001      	movs	r0, #1
    57da:	4b05      	ldr	r3, [pc, #20]	; (57f0 <_usb_on_suspend+0x2c>)
    57dc:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    57de:	4b05      	ldr	r3, [pc, #20]	; (57f4 <_usb_on_suspend+0x30>)
    57e0:	4798      	blx	r3
}
    57e2:	bd10      	pop	{r4, pc}
    57e4:	20000738 	.word	0x20000738
    57e8:	00005e85 	.word	0x00005e85
    57ec:	00005e65 	.word	0x00005e65
    57f0:	00005199 	.word	0x00005199
    57f4:	000077fd 	.word	0x000077fd

000057f8 <udd_ep_abort>:
{
    57f8:	b510      	push	{r4, lr}
    57fa:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    57fc:	0001      	movs	r1, r0
    57fe:	480a      	ldr	r0, [pc, #40]	; (5828 <udd_ep_abort+0x30>)
    5800:	4b0a      	ldr	r3, [pc, #40]	; (582c <udd_ep_abort+0x34>)
    5802:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    5804:	0020      	movs	r0, r4
    5806:	4b0a      	ldr	r3, [pc, #40]	; (5830 <udd_ep_abort+0x38>)
    5808:	4798      	blx	r3
	if (!ptr_job->busy) {
    580a:	7c83      	ldrb	r3, [r0, #18]
    580c:	07db      	lsls	r3, r3, #31
    580e:	d50a      	bpl.n	5826 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    5810:	7c83      	ldrb	r3, [r0, #18]
    5812:	2201      	movs	r2, #1
    5814:	4393      	bics	r3, r2
    5816:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    5818:	6803      	ldr	r3, [r0, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	d003      	beq.n	5826 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    581e:	68c1      	ldr	r1, [r0, #12]
    5820:	0022      	movs	r2, r4
    5822:	2001      	movs	r0, #1
    5824:	4798      	blx	r3
}
    5826:	bd10      	pop	{r4, pc}
    5828:	20000738 	.word	0x20000738
    582c:	000062e5 	.word	0x000062e5
    5830:	00005245 	.word	0x00005245

00005834 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    5834:	4b02      	ldr	r3, [pc, #8]	; (5840 <udd_get_frame_number+0xc>)
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	8a18      	ldrh	r0, [r3, #16]
    583a:	0480      	lsls	r0, r0, #18
    583c:	0d40      	lsrs	r0, r0, #21
}
    583e:	4770      	bx	lr
    5840:	20000738 	.word	0x20000738

00005844 <udd_ep_free>:
{
    5844:	b570      	push	{r4, r5, r6, lr}
    5846:	b082      	sub	sp, #8
    5848:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    584a:	ad01      	add	r5, sp, #4
    584c:	0028      	movs	r0, r5
    584e:	4b0d      	ldr	r3, [pc, #52]	; (5884 <udd_ep_free+0x40>)
    5850:	4798      	blx	r3
	udd_ep_abort(ep);
    5852:	0020      	movs	r0, r4
    5854:	4b0c      	ldr	r3, [pc, #48]	; (5888 <udd_ep_free+0x44>)
    5856:	4798      	blx	r3
	config_ep.ep_address = ep;
    5858:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    585a:	2300      	movs	r3, #0
    585c:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    585e:	4e0b      	ldr	r6, [pc, #44]	; (588c <udd_ep_free+0x48>)
    5860:	0029      	movs	r1, r5
    5862:	0030      	movs	r0, r6
    5864:	4b0a      	ldr	r3, [pc, #40]	; (5890 <udd_ep_free+0x4c>)
    5866:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5868:	210f      	movs	r1, #15
    586a:	4021      	ands	r1, r4
    586c:	2200      	movs	r2, #0
    586e:	0030      	movs	r0, r6
    5870:	4b08      	ldr	r3, [pc, #32]	; (5894 <udd_ep_free+0x50>)
    5872:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5874:	2200      	movs	r2, #0
    5876:	0021      	movs	r1, r4
    5878:	0030      	movs	r0, r6
    587a:	4b07      	ldr	r3, [pc, #28]	; (5898 <udd_ep_free+0x54>)
    587c:	4798      	blx	r3
}
    587e:	b002      	add	sp, #8
    5880:	bd70      	pop	{r4, r5, r6, pc}
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	00006091 	.word	0x00006091
    5888:	000057f9 	.word	0x000057f9
    588c:	20000738 	.word	0x20000738
    5890:	000060a1 	.word	0x000060a1
    5894:	00005ec9 	.word	0x00005ec9
    5898:	00005fc1 	.word	0x00005fc1

0000589c <udd_ep_alloc>:
{
    589c:	b5f0      	push	{r4, r5, r6, r7, lr}
    589e:	b083      	sub	sp, #12
    58a0:	0005      	movs	r5, r0
    58a2:	000f      	movs	r7, r1
    58a4:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    58a6:	ae01      	add	r6, sp, #4
    58a8:	0030      	movs	r0, r6
    58aa:	4b36      	ldr	r3, [pc, #216]	; (5984 <udd_ep_alloc+0xe8>)
    58ac:	4798      	blx	r3
	config_ep.ep_address = ep;
    58ae:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    58b0:	2c08      	cmp	r4, #8
    58b2:	d813      	bhi.n	58dc <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    58b4:	2200      	movs	r2, #0
    58b6:	ab01      	add	r3, sp, #4
    58b8:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    58ba:	0028      	movs	r0, r5
    58bc:	4b32      	ldr	r3, [pc, #200]	; (5988 <udd_ep_alloc+0xec>)
    58be:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    58c0:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    58c2:	2103      	movs	r1, #3
    58c4:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    58c6:	2901      	cmp	r1, #1
    58c8:	d038      	beq.n	593c <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    58ca:	2902      	cmp	r1, #2
    58cc:	d043      	beq.n	5956 <udd_ep_alloc+0xba>
		return false;
    58ce:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    58d0:	2903      	cmp	r1, #3
    58d2:	d13d      	bne.n	5950 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    58d4:	2204      	movs	r2, #4
    58d6:	ab01      	add	r3, sp, #4
    58d8:	70da      	strb	r2, [r3, #3]
    58da:	e032      	b.n	5942 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    58dc:	2c10      	cmp	r4, #16
    58de:	d803      	bhi.n	58e8 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    58e0:	2201      	movs	r2, #1
    58e2:	ab01      	add	r3, sp, #4
    58e4:	705a      	strb	r2, [r3, #1]
    58e6:	e7e8      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    58e8:	2c20      	cmp	r4, #32
    58ea:	d803      	bhi.n	58f4 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    58ec:	2202      	movs	r2, #2
    58ee:	ab01      	add	r3, sp, #4
    58f0:	705a      	strb	r2, [r3, #1]
    58f2:	e7e2      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    58f4:	2c40      	cmp	r4, #64	; 0x40
    58f6:	d803      	bhi.n	5900 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    58f8:	2203      	movs	r2, #3
    58fa:	ab01      	add	r3, sp, #4
    58fc:	705a      	strb	r2, [r3, #1]
    58fe:	e7dc      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    5900:	2c80      	cmp	r4, #128	; 0x80
    5902:	d803      	bhi.n	590c <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5904:	2204      	movs	r2, #4
    5906:	ab01      	add	r3, sp, #4
    5908:	705a      	strb	r2, [r3, #1]
    590a:	e7d6      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    590c:	2380      	movs	r3, #128	; 0x80
    590e:	005b      	lsls	r3, r3, #1
    5910:	429c      	cmp	r4, r3
    5912:	d803      	bhi.n	591c <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    5914:	2205      	movs	r2, #5
    5916:	ab01      	add	r3, sp, #4
    5918:	705a      	strb	r2, [r3, #1]
    591a:	e7ce      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    591c:	2380      	movs	r3, #128	; 0x80
    591e:	009b      	lsls	r3, r3, #2
    5920:	429c      	cmp	r4, r3
    5922:	d803      	bhi.n	592c <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    5924:	2206      	movs	r2, #6
    5926:	ab01      	add	r3, sp, #4
    5928:	705a      	strb	r2, [r3, #1]
    592a:	e7c6      	b.n	58ba <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    592c:	4a17      	ldr	r2, [pc, #92]	; (598c <udd_ep_alloc+0xf0>)
		return false;
    592e:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    5930:	4294      	cmp	r4, r2
    5932:	d80d      	bhi.n	5950 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    5934:	2207      	movs	r2, #7
    5936:	ab01      	add	r3, sp, #4
    5938:	705a      	strb	r2, [r3, #1]
    593a:	e7be      	b.n	58ba <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    593c:	2202      	movs	r2, #2
    593e:	ab01      	add	r3, sp, #4
    5940:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    5942:	a901      	add	r1, sp, #4
    5944:	4812      	ldr	r0, [pc, #72]	; (5990 <udd_ep_alloc+0xf4>)
    5946:	4b13      	ldr	r3, [pc, #76]	; (5994 <udd_ep_alloc+0xf8>)
    5948:	4798      	blx	r3
		return false;
    594a:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    594c:	2800      	cmp	r0, #0
    594e:	d006      	beq.n	595e <udd_ep_alloc+0xc2>
}
    5950:	0018      	movs	r0, r3
    5952:	b003      	add	sp, #12
    5954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    5956:	2203      	movs	r2, #3
    5958:	ab01      	add	r3, sp, #4
    595a:	70da      	strb	r2, [r3, #3]
    595c:	e7f1      	b.n	5942 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    595e:	210f      	movs	r1, #15
    5960:	4029      	ands	r1, r5
    5962:	4c0b      	ldr	r4, [pc, #44]	; (5990 <udd_ep_alloc+0xf4>)
    5964:	4b0c      	ldr	r3, [pc, #48]	; (5998 <udd_ep_alloc+0xfc>)
    5966:	2200      	movs	r2, #0
    5968:	0020      	movs	r0, r4
    596a:	4e0c      	ldr	r6, [pc, #48]	; (599c <udd_ep_alloc+0x100>)
    596c:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    596e:	2200      	movs	r2, #0
    5970:	0029      	movs	r1, r5
    5972:	0020      	movs	r0, r4
    5974:	4e0a      	ldr	r6, [pc, #40]	; (59a0 <udd_ep_alloc+0x104>)
    5976:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5978:	2201      	movs	r2, #1
    597a:	0029      	movs	r1, r5
    597c:	0020      	movs	r0, r4
    597e:	47b0      	blx	r6
	return true;
    5980:	2301      	movs	r3, #1
    5982:	e7e5      	b.n	5950 <udd_ep_alloc+0xb4>
    5984:	00006091 	.word	0x00006091
    5988:	00005245 	.word	0x00005245
    598c:	000003ff 	.word	0x000003ff
    5990:	20000738 	.word	0x20000738
    5994:	000060a1 	.word	0x000060a1
    5998:	00005261 	.word	0x00005261
    599c:	00005ea1 	.word	0x00005ea1
    59a0:	00005ef1 	.word	0x00005ef1

000059a4 <udd_ep_is_halted>:
{
    59a4:	b510      	push	{r4, lr}
    59a6:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    59a8:	4801      	ldr	r0, [pc, #4]	; (59b0 <udd_ep_is_halted+0xc>)
    59aa:	4b02      	ldr	r3, [pc, #8]	; (59b4 <udd_ep_is_halted+0x10>)
    59ac:	4798      	blx	r3
}
    59ae:	bd10      	pop	{r4, pc}
    59b0:	20000738 	.word	0x20000738
    59b4:	0000631b 	.word	0x0000631b

000059b8 <udd_ep_set_halt>:
{
    59b8:	b510      	push	{r4, lr}
    59ba:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    59bc:	230f      	movs	r3, #15
    59be:	4003      	ands	r3, r0
		return false;
    59c0:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    59c2:	2b02      	cmp	r3, #2
    59c4:	d900      	bls.n	59c8 <udd_ep_set_halt+0x10>
}
    59c6:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    59c8:	0021      	movs	r1, r4
    59ca:	4804      	ldr	r0, [pc, #16]	; (59dc <udd_ep_set_halt+0x24>)
    59cc:	4b04      	ldr	r3, [pc, #16]	; (59e0 <udd_ep_set_halt+0x28>)
    59ce:	4798      	blx	r3
	udd_ep_abort(ep);
    59d0:	0020      	movs	r0, r4
    59d2:	4b04      	ldr	r3, [pc, #16]	; (59e4 <udd_ep_set_halt+0x2c>)
    59d4:	4798      	blx	r3
	return true;
    59d6:	2001      	movs	r0, #1
    59d8:	e7f5      	b.n	59c6 <udd_ep_set_halt+0xe>
    59da:	46c0      	nop			; (mov r8, r8)
    59dc:	20000738 	.word	0x20000738
    59e0:	00006345 	.word	0x00006345
    59e4:	000057f9 	.word	0x000057f9

000059e8 <_usb_ep0_on_tansfer_ok>:
{
    59e8:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    59ea:	4b34      	ldr	r3, [pc, #208]	; (5abc <_usb_ep0_on_tansfer_ok+0xd4>)
    59ec:	781b      	ldrb	r3, [r3, #0]
    59ee:	2b01      	cmp	r3, #1
    59f0:	d00a      	beq.n	5a08 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    59f2:	2b02      	cmp	r3, #2
    59f4:	d05f      	beq.n	5ab6 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    59f6:	4b32      	ldr	r3, [pc, #200]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    59f8:	691b      	ldr	r3, [r3, #16]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d000      	beq.n	5a00 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    59fe:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    5a00:	2200      	movs	r2, #0
    5a02:	4b2e      	ldr	r3, [pc, #184]	; (5abc <_usb_ep0_on_tansfer_ok+0xd4>)
    5a04:	701a      	strb	r2, [r3, #0]
}
    5a06:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    5a08:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5a0a:	4b2d      	ldr	r3, [pc, #180]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a0c:	899b      	ldrh	r3, [r3, #12]
    5a0e:	4a2d      	ldr	r2, [pc, #180]	; (5ac4 <_usb_ep0_on_tansfer_ok+0xdc>)
    5a10:	8814      	ldrh	r4, [r2, #0]
    5a12:	1962      	adds	r2, r4, r5
    5a14:	4293      	cmp	r3, r2
    5a16:	da01      	bge.n	5a1c <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5a18:	1b1d      	subs	r5, r3, r4
    5a1a:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    5a1c:	4b28      	ldr	r3, [pc, #160]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a1e:	6898      	ldr	r0, [r3, #8]
    5a20:	1900      	adds	r0, r0, r4
    5a22:	002a      	movs	r2, r5
    5a24:	4928      	ldr	r1, [pc, #160]	; (5ac8 <_usb_ep0_on_tansfer_ok+0xe0>)
    5a26:	4b29      	ldr	r3, [pc, #164]	; (5acc <_usb_ep0_on_tansfer_ok+0xe4>)
    5a28:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    5a2a:	1964      	adds	r4, r4, r5
    5a2c:	b2a4      	uxth	r4, r4
    5a2e:	4b25      	ldr	r3, [pc, #148]	; (5ac4 <_usb_ep0_on_tansfer_ok+0xdc>)
    5a30:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5a32:	2d08      	cmp	r5, #8
    5a34:	d00a      	beq.n	5a4c <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5a36:	4b22      	ldr	r3, [pc, #136]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a38:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5a3a:	695b      	ldr	r3, [r3, #20]
    5a3c:	2b00      	cmp	r3, #0
    5a3e:	d002      	beq.n	5a46 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    5a40:	4798      	blx	r3
    5a42:	2800      	cmp	r0, #0
    5a44:	d014      	beq.n	5a70 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    5a46:	4b22      	ldr	r3, [pc, #136]	; (5ad0 <_usb_ep0_on_tansfer_ok+0xe8>)
    5a48:	4798      	blx	r3
    5a4a:	e7dc      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    5a4c:	4b1c      	ldr	r3, [pc, #112]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a4e:	88da      	ldrh	r2, [r3, #6]
    5a50:	4b20      	ldr	r3, [pc, #128]	; (5ad4 <_usb_ep0_on_tansfer_ok+0xec>)
    5a52:	881b      	ldrh	r3, [r3, #0]
    5a54:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    5a56:	429a      	cmp	r2, r3
    5a58:	dded      	ble.n	5a36 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    5a5a:	4b19      	ldr	r3, [pc, #100]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a5c:	899b      	ldrh	r3, [r3, #12]
    5a5e:	42a3      	cmp	r3, r4
    5a60:	d00c      	beq.n	5a7c <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    5a62:	2308      	movs	r3, #8
    5a64:	4a18      	ldr	r2, [pc, #96]	; (5ac8 <_usb_ep0_on_tansfer_ok+0xe0>)
    5a66:	2100      	movs	r1, #0
    5a68:	481b      	ldr	r0, [pc, #108]	; (5ad8 <_usb_ep0_on_tansfer_ok+0xf0>)
    5a6a:	4c1c      	ldr	r4, [pc, #112]	; (5adc <_usb_ep0_on_tansfer_ok+0xf4>)
    5a6c:	47a0      	blx	r4
    5a6e:	e7ca      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5a70:	2205      	movs	r2, #5
    5a72:	4b12      	ldr	r3, [pc, #72]	; (5abc <_usb_ep0_on_tansfer_ok+0xd4>)
    5a74:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    5a76:	4b1a      	ldr	r3, [pc, #104]	; (5ae0 <_usb_ep0_on_tansfer_ok+0xf8>)
    5a78:	4798      	blx	r3
    5a7a:	e7c4      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    5a7c:	4b10      	ldr	r3, [pc, #64]	; (5ac0 <_usb_ep0_on_tansfer_ok+0xd8>)
    5a7e:	695b      	ldr	r3, [r3, #20]
    5a80:	2b00      	cmp	r3, #0
    5a82:	d00b      	beq.n	5a9c <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    5a84:	4798      	blx	r3
    5a86:	2800      	cmp	r0, #0
    5a88:	d00f      	beq.n	5aaa <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5a8a:	4912      	ldr	r1, [pc, #72]	; (5ad4 <_usb_ep0_on_tansfer_ok+0xec>)
    5a8c:	4a0d      	ldr	r2, [pc, #52]	; (5ac4 <_usb_ep0_on_tansfer_ok+0xdc>)
    5a8e:	880b      	ldrh	r3, [r1, #0]
    5a90:	8810      	ldrh	r0, [r2, #0]
    5a92:	181b      	adds	r3, r3, r0
    5a94:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    5a96:	2300      	movs	r3, #0
    5a98:	8013      	strh	r3, [r2, #0]
    5a9a:	e7e2      	b.n	5a62 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5a9c:	2205      	movs	r2, #5
    5a9e:	4b07      	ldr	r3, [pc, #28]	; (5abc <_usb_ep0_on_tansfer_ok+0xd4>)
    5aa0:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    5aa2:	2000      	movs	r0, #0
    5aa4:	4b0e      	ldr	r3, [pc, #56]	; (5ae0 <_usb_ep0_on_tansfer_ok+0xf8>)
    5aa6:	4798      	blx	r3
    5aa8:	e7ad      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5aaa:	2205      	movs	r2, #5
    5aac:	4b03      	ldr	r3, [pc, #12]	; (5abc <_usb_ep0_on_tansfer_ok+0xd4>)
    5aae:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    5ab0:	4b0b      	ldr	r3, [pc, #44]	; (5ae0 <_usb_ep0_on_tansfer_ok+0xf8>)
    5ab2:	4798      	blx	r3
    5ab4:	e7a7      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    5ab6:	4b0b      	ldr	r3, [pc, #44]	; (5ae4 <_usb_ep0_on_tansfer_ok+0xfc>)
    5ab8:	4798      	blx	r3
    5aba:	e7a4      	b.n	5a06 <_usb_ep0_on_tansfer_ok+0x1e>
    5abc:	2000034a 	.word	0x2000034a
    5ac0:	200008a0 	.word	0x200008a0
    5ac4:	20000346 	.word	0x20000346
    5ac8:	200008b8 	.word	0x200008b8
    5acc:	0000a4dd 	.word	0x0000a4dd
    5ad0:	00005595 	.word	0x00005595
    5ad4:	20000348 	.word	0x20000348
    5ad8:	20000738 	.word	0x20000738
    5adc:	00006445 	.word	0x00006445
    5ae0:	000059b9 	.word	0x000059b9
    5ae4:	00005625 	.word	0x00005625

00005ae8 <udd_ep_clear_halt>:
{
    5ae8:	b570      	push	{r4, r5, r6, lr}
    5aea:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5aec:	230f      	movs	r3, #15
    5aee:	4003      	ands	r3, r0
		return false;
    5af0:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5af2:	2b02      	cmp	r3, #2
    5af4:	d900      	bls.n	5af8 <udd_ep_clear_halt+0x10>
}
    5af6:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    5af8:	0020      	movs	r0, r4
    5afa:	4b09      	ldr	r3, [pc, #36]	; (5b20 <udd_ep_clear_halt+0x38>)
    5afc:	4798      	blx	r3
    5afe:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    5b00:	0021      	movs	r1, r4
    5b02:	4808      	ldr	r0, [pc, #32]	; (5b24 <udd_ep_clear_halt+0x3c>)
    5b04:	4b08      	ldr	r3, [pc, #32]	; (5b28 <udd_ep_clear_halt+0x40>)
    5b06:	4798      	blx	r3
	if (ptr_job->busy == true) {
    5b08:	7cab      	ldrb	r3, [r5, #18]
	return true;
    5b0a:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    5b0c:	07db      	lsls	r3, r3, #31
    5b0e:	d5f2      	bpl.n	5af6 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    5b10:	7cab      	ldrb	r3, [r5, #18]
    5b12:	2201      	movs	r2, #1
    5b14:	4393      	bics	r3, r2
    5b16:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    5b18:	682b      	ldr	r3, [r5, #0]
    5b1a:	4798      	blx	r3
	return true;
    5b1c:	2001      	movs	r0, #1
    5b1e:	e7ea      	b.n	5af6 <udd_ep_clear_halt+0xe>
    5b20:	00005245 	.word	0x00005245
    5b24:	20000738 	.word	0x20000738
    5b28:	0000636b 	.word	0x0000636b

00005b2c <udd_ep_run>:
{
    5b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b2e:	b085      	sub	sp, #20
    5b30:	0005      	movs	r5, r0
    5b32:	9103      	str	r1, [sp, #12]
    5b34:	9202      	str	r2, [sp, #8]
    5b36:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    5b38:	260f      	movs	r6, #15
    5b3a:	4006      	ands	r6, r0
		return false;
    5b3c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    5b3e:	2e02      	cmp	r6, #2
    5b40:	d902      	bls.n	5b48 <udd_ep_run+0x1c>
}
    5b42:	0020      	movs	r0, r4
    5b44:	b005      	add	sp, #20
    5b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    5b48:	4b62      	ldr	r3, [pc, #392]	; (5cd4 <udd_ep_run+0x1a8>)
    5b4a:	4798      	blx	r3
    5b4c:	1e04      	subs	r4, r0, #0
    5b4e:	d000      	beq.n	5b52 <udd_ep_run+0x26>
    5b50:	e0b9      	b.n	5cc6 <udd_ep_run+0x19a>
	ptr_job = udd_ep_get_job(ep);
    5b52:	0028      	movs	r0, r5
    5b54:	4b60      	ldr	r3, [pc, #384]	; (5cd8 <udd_ep_run+0x1ac>)
    5b56:	4798      	blx	r3
    5b58:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5b5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    5b5e:	b672      	cpsid	i
    5b60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5b64:	2200      	movs	r2, #0
    5b66:	4b5d      	ldr	r3, [pc, #372]	; (5cdc <udd_ep_run+0x1b0>)
    5b68:	701a      	strb	r2, [r3, #0]
	if (ptr_job->busy == true) {
    5b6a:	7c83      	ldrb	r3, [r0, #18]
    5b6c:	07db      	lsls	r3, r3, #31
    5b6e:	d508      	bpl.n	5b82 <udd_ep_run+0x56>
	if (cpu_irq_is_enabled_flags(flags))
    5b70:	2900      	cmp	r1, #0
    5b72:	d1e6      	bne.n	5b42 <udd_ep_run+0x16>
		cpu_irq_enable();
    5b74:	3201      	adds	r2, #1
    5b76:	4b59      	ldr	r3, [pc, #356]	; (5cdc <udd_ep_run+0x1b0>)
    5b78:	701a      	strb	r2, [r3, #0]
    5b7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5b7e:	b662      	cpsie	i
    5b80:	e7df      	b.n	5b42 <udd_ep_run+0x16>
	ptr_job->busy = true;
    5b82:	7c83      	ldrb	r3, [r0, #18]
    5b84:	2201      	movs	r2, #1
    5b86:	4313      	orrs	r3, r2
    5b88:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    5b8a:	2900      	cmp	r1, #0
    5b8c:	d105      	bne.n	5b9a <udd_ep_run+0x6e>
		cpu_irq_enable();
    5b8e:	2201      	movs	r2, #1
    5b90:	4b52      	ldr	r3, [pc, #328]	; (5cdc <udd_ep_run+0x1b0>)
    5b92:	701a      	strb	r2, [r3, #0]
    5b94:	f3bf 8f5f 	dmb	sy
    5b98:	b662      	cpsie	i
	ptr_job->buf = buf;
    5b9a:	9b02      	ldr	r3, [sp, #8]
    5b9c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    5b9e:	9b01      	ldr	r3, [sp, #4]
    5ba0:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    5ba2:	2300      	movs	r3, #0
    5ba4:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    5ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ba8:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5baa:	2301      	movs	r3, #1
    5bac:	9a03      	ldr	r2, [sp, #12]
    5bae:	4013      	ands	r3, r2
    5bb0:	005a      	lsls	r2, r3, #1
    5bb2:	7cbb      	ldrb	r3, [r7, #18]
    5bb4:	2102      	movs	r1, #2
    5bb6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    5bb8:	4313      	orrs	r3, r2
    5bba:	2204      	movs	r2, #4
    5bbc:	4393      	bics	r3, r2
    5bbe:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    5bc0:	b26b      	sxtb	r3, r5
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	db20      	blt.n	5c08 <udd_ep_run+0xdc>
		if (0 != ptr_job->buf_size) {
    5bc6:	9b01      	ldr	r3, [sp, #4]
    5bc8:	2b00      	cmp	r3, #0
    5bca:	d06f      	beq.n	5cac <udd_ep_run+0x180>
			next_trans = ptr_job->buf_size;
    5bcc:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5bce:	4b44      	ldr	r3, [pc, #272]	; (5ce0 <udd_ep_run+0x1b4>)
    5bd0:	429c      	cmp	r4, r3
    5bd2:	d95a      	bls.n	5c8a <udd_ep_run+0x15e>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5bd4:	8a39      	ldrh	r1, [r7, #16]
    5bd6:	001c      	movs	r4, r3
    5bd8:	0018      	movs	r0, r3
    5bda:	4b42      	ldr	r3, [pc, #264]	; (5ce4 <udd_ep_run+0x1b8>)
    5bdc:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5bde:	1a63      	subs	r3, r4, r1
    5be0:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    5be2:	8a3b      	ldrh	r3, [r7, #16]
    5be4:	429a      	cmp	r2, r3
    5be6:	d257      	bcs.n	5c98 <udd_ep_run+0x16c>
				ptr_job->b_use_out_cache_buffer = true;
    5be8:	7cba      	ldrb	r2, [r7, #18]
    5bea:	2104      	movs	r1, #4
    5bec:	430a      	orrs	r2, r1
    5bee:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    5bf0:	1e72      	subs	r2, r6, #1
    5bf2:	0192      	lsls	r2, r2, #6
    5bf4:	493c      	ldr	r1, [pc, #240]	; (5ce8 <udd_ep_run+0x1bc>)
    5bf6:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5bf8:	0031      	movs	r1, r6
    5bfa:	483c      	ldr	r0, [pc, #240]	; (5cec <udd_ep_run+0x1c0>)
    5bfc:	4c3c      	ldr	r4, [pc, #240]	; (5cf0 <udd_ep_run+0x1c4>)
    5bfe:	47a0      	blx	r4
				return (STATUS_OK ==
    5c00:	4244      	negs	r4, r0
    5c02:	4144      	adcs	r4, r0
    5c04:	b2e4      	uxtb	r4, r4
    5c06:	e79c      	b.n	5b42 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    5c08:	9b01      	ldr	r3, [sp, #4]
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d027      	beq.n	5c5e <udd_ep_run+0x132>
			next_trans = ptr_job->buf_size;
    5c0e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5c10:	4b33      	ldr	r3, [pc, #204]	; (5ce0 <udd_ep_run+0x1b4>)
    5c12:	429d      	cmp	r5, r3
    5c14:	d906      	bls.n	5c24 <udd_ep_run+0xf8>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5c16:	8a39      	ldrh	r1, [r7, #16]
    5c18:	001d      	movs	r5, r3
    5c1a:	0018      	movs	r0, r3
    5c1c:	4b31      	ldr	r3, [pc, #196]	; (5ce4 <udd_ep_run+0x1b8>)
    5c1e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5c20:	1a6b      	subs	r3, r5, r1
    5c22:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5c24:	7cbb      	ldrb	r3, [r7, #18]
    5c26:	079b      	lsls	r3, r3, #30
    5c28:	d507      	bpl.n	5c3a <udd_ep_run+0x10e>
					(0 == (next_trans % ptr_job->ep_size));
    5c2a:	8a39      	ldrh	r1, [r7, #16]
    5c2c:	0028      	movs	r0, r5
    5c2e:	4b31      	ldr	r3, [pc, #196]	; (5cf4 <udd_ep_run+0x1c8>)
    5c30:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5c32:	b289      	uxth	r1, r1
    5c34:	424c      	negs	r4, r1
    5c36:	414c      	adcs	r4, r1
    5c38:	b2e4      	uxtb	r4, r4
    5c3a:	2001      	movs	r0, #1
    5c3c:	4020      	ands	r0, r4
    5c3e:	0040      	lsls	r0, r0, #1
    5c40:	7cbc      	ldrb	r4, [r7, #18]
    5c42:	2302      	movs	r3, #2
    5c44:	439c      	bics	r4, r3
    5c46:	4304      	orrs	r4, r0
    5c48:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    5c4a:	002b      	movs	r3, r5
    5c4c:	9a02      	ldr	r2, [sp, #8]
    5c4e:	0031      	movs	r1, r6
    5c50:	4826      	ldr	r0, [pc, #152]	; (5cec <udd_ep_run+0x1c0>)
    5c52:	4c29      	ldr	r4, [pc, #164]	; (5cf8 <udd_ep_run+0x1cc>)
    5c54:	47a0      	blx	r4
		return (STATUS_OK ==
    5c56:	4244      	negs	r4, r0
    5c58:	4144      	adcs	r4, r0
    5c5a:	b2e4      	uxtb	r4, r4
    5c5c:	e771      	b.n	5b42 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    5c5e:	7cbb      	ldrb	r3, [r7, #18]
    5c60:	079b      	lsls	r3, r3, #30
    5c62:	d505      	bpl.n	5c70 <udd_ep_run+0x144>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    5c64:	7cbb      	ldrb	r3, [r7, #18]
    5c66:	2202      	movs	r2, #2
    5c68:	4393      	bics	r3, r2
    5c6a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    5c6c:	2500      	movs	r5, #0
    5c6e:	e7ec      	b.n	5c4a <udd_ep_run+0x11e>
			ptr_job->busy = false;
    5c70:	7cbb      	ldrb	r3, [r7, #18]
    5c72:	2201      	movs	r2, #1
    5c74:	4393      	bics	r3, r2
    5c76:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d025      	beq.n	5cca <udd_ep_run+0x19e>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5c7e:	002a      	movs	r2, r5
    5c80:	2100      	movs	r1, #0
    5c82:	2000      	movs	r0, #0
    5c84:	4798      	blx	r3
			return true;
    5c86:	2401      	movs	r4, #1
    5c88:	e75b      	b.n	5b42 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    5c8a:	8a39      	ldrh	r1, [r7, #16]
    5c8c:	0020      	movs	r0, r4
    5c8e:	4b19      	ldr	r3, [pc, #100]	; (5cf4 <udd_ep_run+0x1c8>)
    5c90:	4798      	blx	r3
    5c92:	1a63      	subs	r3, r4, r1
    5c94:	b29a      	uxth	r2, r3
    5c96:	e7a4      	b.n	5be2 <udd_ep_run+0xb6>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5c98:	0013      	movs	r3, r2
    5c9a:	9a02      	ldr	r2, [sp, #8]
    5c9c:	0031      	movs	r1, r6
    5c9e:	4813      	ldr	r0, [pc, #76]	; (5cec <udd_ep_run+0x1c0>)
    5ca0:	4c13      	ldr	r4, [pc, #76]	; (5cf0 <udd_ep_run+0x1c4>)
    5ca2:	47a0      	blx	r4
				return (STATUS_OK ==
    5ca4:	4244      	negs	r4, r0
    5ca6:	4144      	adcs	r4, r0
    5ca8:	b2e4      	uxtb	r4, r4
    5caa:	e74a      	b.n	5b42 <udd_ep_run+0x16>
			ptr_job->busy = false;
    5cac:	7cbb      	ldrb	r3, [r7, #18]
    5cae:	2201      	movs	r2, #1
    5cb0:	4393      	bics	r3, r2
    5cb2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d009      	beq.n	5cce <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5cba:	002a      	movs	r2, r5
    5cbc:	2100      	movs	r1, #0
    5cbe:	2000      	movs	r0, #0
    5cc0:	4798      	blx	r3
			return true;
    5cc2:	2401      	movs	r4, #1
    5cc4:	e73d      	b.n	5b42 <udd_ep_run+0x16>
		return false;
    5cc6:	2400      	movs	r4, #0
    5cc8:	e73b      	b.n	5b42 <udd_ep_run+0x16>
			return true;
    5cca:	2401      	movs	r4, #1
    5ccc:	e739      	b.n	5b42 <udd_ep_run+0x16>
			return true;
    5cce:	2401      	movs	r4, #1
    5cd0:	e737      	b.n	5b42 <udd_ep_run+0x16>
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	000059a5 	.word	0x000059a5
    5cd8:	00005245 	.word	0x00005245
    5cdc:	20000122 	.word	0x20000122
    5ce0:	00001fff 	.word	0x00001fff
    5ce4:	00008eb5 	.word	0x00008eb5
    5ce8:	200006b8 	.word	0x200006b8
    5cec:	20000738 	.word	0x20000738
    5cf0:	00006445 	.word	0x00006445
    5cf4:	00008ce1 	.word	0x00008ce1
    5cf8:	000063f1 	.word	0x000063f1

00005cfc <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5cfc:	4b02      	ldr	r3, [pc, #8]	; (5d08 <udd_set_address+0xc>)
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	2280      	movs	r2, #128	; 0x80
    5d02:	4310      	orrs	r0, r2
    5d04:	7298      	strb	r0, [r3, #10]
}
    5d06:	4770      	bx	lr
    5d08:	20000738 	.word	0x20000738

00005d0c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    5d0c:	4b02      	ldr	r3, [pc, #8]	; (5d18 <udd_getaddress+0xc>)
    5d0e:	681b      	ldr	r3, [r3, #0]
    5d10:	7a98      	ldrb	r0, [r3, #10]
    5d12:	0640      	lsls	r0, r0, #25
    5d14:	0e40      	lsrs	r0, r0, #25
}
    5d16:	4770      	bx	lr
    5d18:	20000738 	.word	0x20000738

00005d1c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    5d1c:	4b01      	ldr	r3, [pc, #4]	; (5d24 <udd_set_setup_payload+0x8>)
    5d1e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    5d20:	8199      	strh	r1, [r3, #12]
}
    5d22:	4770      	bx	lr
    5d24:	200008a0 	.word	0x200008a0

00005d28 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    5d28:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    5d2a:	2003      	movs	r0, #3
    5d2c:	4b16      	ldr	r3, [pc, #88]	; (5d88 <udd_attach+0x60>)
    5d2e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5d30:	4c16      	ldr	r4, [pc, #88]	; (5d8c <udd_attach+0x64>)
    5d32:	6822      	ldr	r2, [r4, #0]
    5d34:	8913      	ldrh	r3, [r2, #8]
    5d36:	2101      	movs	r1, #1
    5d38:	438b      	bics	r3, r1
    5d3a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    5d3c:	4a14      	ldr	r2, [pc, #80]	; (5d90 <udd_attach+0x68>)
    5d3e:	3103      	adds	r1, #3
    5d40:	0020      	movs	r0, r4
    5d42:	4e14      	ldr	r6, [pc, #80]	; (5d94 <udd_attach+0x6c>)
    5d44:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    5d46:	4a14      	ldr	r2, [pc, #80]	; (5d98 <udd_attach+0x70>)
    5d48:	2100      	movs	r1, #0
    5d4a:	0020      	movs	r0, r4
    5d4c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    5d4e:	4a13      	ldr	r2, [pc, #76]	; (5d9c <udd_attach+0x74>)
    5d50:	2101      	movs	r1, #1
    5d52:	0020      	movs	r0, r4
    5d54:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    5d56:	4a12      	ldr	r2, [pc, #72]	; (5da0 <udd_attach+0x78>)
    5d58:	2102      	movs	r1, #2
    5d5a:	0020      	movs	r0, r4
    5d5c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5d5e:	2104      	movs	r1, #4
    5d60:	0020      	movs	r0, r4
    5d62:	4d10      	ldr	r5, [pc, #64]	; (5da4 <udd_attach+0x7c>)
    5d64:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    5d66:	2100      	movs	r1, #0
    5d68:	0020      	movs	r0, r4
    5d6a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    5d6c:	2101      	movs	r1, #1
    5d6e:	0020      	movs	r0, r4
    5d70:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5d72:	2102      	movs	r1, #2
    5d74:	0020      	movs	r0, r4
    5d76:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5d78:	4a0b      	ldr	r2, [pc, #44]	; (5da8 <udd_attach+0x80>)
    5d7a:	2106      	movs	r1, #6
    5d7c:	0020      	movs	r0, r4
    5d7e:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5d80:	2106      	movs	r1, #6
    5d82:	0020      	movs	r0, r4
    5d84:	47a8      	blx	r5
#endif
}
    5d86:	bd70      	pop	{r4, r5, r6, pc}
    5d88:	00005199 	.word	0x00005199
    5d8c:	20000738 	.word	0x20000738
    5d90:	000057c5 	.word	0x000057c5
    5d94:	00005e41 	.word	0x00005e41
    5d98:	000057b1 	.word	0x000057b1
    5d9c:	000054e5 	.word	0x000054e5
    5da0:	00005475 	.word	0x00005475
    5da4:	00005e65 	.word	0x00005e65
    5da8:	00005441 	.word	0x00005441

00005dac <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    5dac:	b570      	push	{r4, r5, r6, lr}
    5dae:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5db0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    5db4:	b672      	cpsid	i
    5db6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5dba:	2600      	movs	r6, #0
    5dbc:	4b17      	ldr	r3, [pc, #92]	; (5e1c <udd_enable+0x70>)
    5dbe:	701e      	strb	r6, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    5dc0:	ad01      	add	r5, sp, #4
    5dc2:	0028      	movs	r0, r5
    5dc4:	4b16      	ldr	r3, [pc, #88]	; (5e20 <udd_enable+0x74>)
    5dc6:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5dc8:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    5dca:	4e16      	ldr	r6, [pc, #88]	; (5e24 <udd_enable+0x78>)
    5dcc:	002a      	movs	r2, r5
    5dce:	4916      	ldr	r1, [pc, #88]	; (5e28 <udd_enable+0x7c>)
    5dd0:	0030      	movs	r0, r6
    5dd2:	4b16      	ldr	r3, [pc, #88]	; (5e2c <udd_enable+0x80>)
    5dd4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    5dd6:	0030      	movs	r0, r6
    5dd8:	4b15      	ldr	r3, [pc, #84]	; (5e30 <udd_enable+0x84>)
    5dda:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5ddc:	4b15      	ldr	r3, [pc, #84]	; (5e34 <udd_enable+0x88>)
    5dde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5de0:	069b      	lsls	r3, r3, #26
    5de2:	d414      	bmi.n	5e0e <udd_enable+0x62>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5de4:	4913      	ldr	r1, [pc, #76]	; (5e34 <udd_enable+0x88>)
    5de6:	22d0      	movs	r2, #208	; 0xd0
    5de8:	68cb      	ldr	r3, [r1, #12]
    5dea:	4013      	ands	r3, r2
    5dec:	2bd0      	cmp	r3, #208	; 0xd0
    5dee:	d1fb      	bne.n	5de8 <udd_enable+0x3c>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    5df0:	2001      	movs	r0, #1
    5df2:	4b11      	ldr	r3, [pc, #68]	; (5e38 <udd_enable+0x8c>)
    5df4:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    5df6:	4b11      	ldr	r3, [pc, #68]	; (5e3c <udd_enable+0x90>)
    5df8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5dfa:	2c00      	cmp	r4, #0
    5dfc:	d105      	bne.n	5e0a <udd_enable+0x5e>
		cpu_irq_enable();
    5dfe:	2201      	movs	r2, #1
    5e00:	4b06      	ldr	r3, [pc, #24]	; (5e1c <udd_enable+0x70>)
    5e02:	701a      	strb	r2, [r3, #0]
    5e04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5e08:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    5e0a:	b002      	add	sp, #8
    5e0c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5e0e:	4909      	ldr	r1, [pc, #36]	; (5e34 <udd_enable+0x88>)
    5e10:	2210      	movs	r2, #16
    5e12:	68cb      	ldr	r3, [r1, #12]
    5e14:	421a      	tst	r2, r3
    5e16:	d0fc      	beq.n	5e12 <udd_enable+0x66>
    5e18:	e7ea      	b.n	5df0 <udd_enable+0x44>
    5e1a:	46c0      	nop			; (mov r8, r8)
    5e1c:	20000122 	.word	0x20000122
    5e20:	00006a99 	.word	0x00006a99
    5e24:	20000738 	.word	0x20000738
    5e28:	41005000 	.word	0x41005000
    5e2c:	00006aa9 	.word	0x00006aa9
    5e30:	000064c5 	.word	0x000064c5
    5e34:	40000800 	.word	0x40000800
    5e38:	00005199 	.word	0x00005199
    5e3c:	00005d29 	.word	0x00005d29

00005e40 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    5e40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    5e42:	000b      	movs	r3, r1
    5e44:	332e      	adds	r3, #46	; 0x2e
    5e46:	009b      	lsls	r3, r3, #2
    5e48:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    5e4a:	22aa      	movs	r2, #170	; 0xaa
    5e4c:	0052      	lsls	r2, r2, #1
    5e4e:	0049      	lsls	r1, r1, #1
    5e50:	5a83      	ldrh	r3, [r0, r2]
    5e52:	4c03      	ldr	r4, [pc, #12]	; (5e60 <usb_device_register_callback+0x20>)
    5e54:	5b09      	ldrh	r1, [r1, r4]
    5e56:	430b      	orrs	r3, r1
    5e58:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    5e5a:	2000      	movs	r0, #0
    5e5c:	bd10      	pop	{r4, pc}
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	0000a8cc 	.word	0x0000a8cc

00005e64 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5e64:	0049      	lsls	r1, r1, #1
    5e66:	4b06      	ldr	r3, [pc, #24]	; (5e80 <usb_device_enable_callback+0x1c>)
    5e68:	5acb      	ldrh	r3, [r1, r3]
    5e6a:	6802      	ldr	r2, [r0, #0]
    5e6c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    5e6e:	21ab      	movs	r1, #171	; 0xab
    5e70:	0049      	lsls	r1, r1, #1
    5e72:	5a42      	ldrh	r2, [r0, r1]
    5e74:	431a      	orrs	r2, r3
    5e76:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    5e78:	6802      	ldr	r2, [r0, #0]
    5e7a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    5e7c:	2000      	movs	r0, #0
    5e7e:	4770      	bx	lr
    5e80:	0000a8cc 	.word	0x0000a8cc

00005e84 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    5e84:	0049      	lsls	r1, r1, #1
    5e86:	4b05      	ldr	r3, [pc, #20]	; (5e9c <usb_device_disable_callback+0x18>)
    5e88:	5aca      	ldrh	r2, [r1, r3]
    5e8a:	21ab      	movs	r1, #171	; 0xab
    5e8c:	0049      	lsls	r1, r1, #1
    5e8e:	5a43      	ldrh	r3, [r0, r1]
    5e90:	4393      	bics	r3, r2
    5e92:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    5e94:	6803      	ldr	r3, [r0, #0]
    5e96:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    5e98:	2000      	movs	r0, #0
    5e9a:	4770      	bx	lr
    5e9c:	0000a8cc 	.word	0x0000a8cc

00005ea0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    5ea0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    5ea2:	008c      	lsls	r4, r1, #2
    5ea4:	18a4      	adds	r4, r4, r2
    5ea6:	3434      	adds	r4, #52	; 0x34
    5ea8:	00a4      	lsls	r4, r4, #2
    5eaa:	1904      	adds	r4, r0, r4
    5eac:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5eae:	1840      	adds	r0, r0, r1
    5eb0:	3059      	adds	r0, #89	; 0x59
    5eb2:	30ff      	adds	r0, #255	; 0xff
    5eb4:	7803      	ldrb	r3, [r0, #0]
    5eb6:	4903      	ldr	r1, [pc, #12]	; (5ec4 <usb_device_endpoint_register_callback+0x24>)
    5eb8:	5c8a      	ldrb	r2, [r1, r2]
    5eba:	4313      	orrs	r3, r2
    5ebc:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    5ebe:	2000      	movs	r0, #0
    5ec0:	bd10      	pop	{r4, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	0000a8dc 	.word	0x0000a8dc

00005ec8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    5ec8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    5eca:	008b      	lsls	r3, r1, #2
    5ecc:	189b      	adds	r3, r3, r2
    5ece:	3334      	adds	r3, #52	; 0x34
    5ed0:	009b      	lsls	r3, r3, #2
    5ed2:	18c3      	adds	r3, r0, r3
    5ed4:	2400      	movs	r4, #0
    5ed6:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5ed8:	1840      	adds	r0, r0, r1
    5eda:	3059      	adds	r0, #89	; 0x59
    5edc:	30ff      	adds	r0, #255	; 0xff
    5ede:	4b03      	ldr	r3, [pc, #12]	; (5eec <usb_device_endpoint_unregister_callback+0x24>)
    5ee0:	5c9a      	ldrb	r2, [r3, r2]
    5ee2:	7803      	ldrb	r3, [r0, #0]
    5ee4:	4393      	bics	r3, r2
    5ee6:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    5ee8:	2000      	movs	r0, #0
    5eea:	bd10      	pop	{r4, pc}
    5eec:	0000a8dc 	.word	0x0000a8dc

00005ef0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5ef0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5ef2:	230f      	movs	r3, #15
    5ef4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5ef6:	18c4      	adds	r4, r0, r3
    5ef8:	3461      	adds	r4, #97	; 0x61
    5efa:	34ff      	adds	r4, #255	; 0xff
    5efc:	7825      	ldrb	r5, [r4, #0]
    5efe:	4e2f      	ldr	r6, [pc, #188]	; (5fbc <usb_device_endpoint_enable_callback+0xcc>)
    5f00:	5cb6      	ldrb	r6, [r6, r2]
    5f02:	4335      	orrs	r5, r6
    5f04:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5f06:	2a00      	cmp	r2, #0
    5f08:	d129      	bne.n	5f5e <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    5f0a:	2b00      	cmp	r3, #0
    5f0c:	d112      	bne.n	5f34 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    5f0e:	2503      	movs	r5, #3
    5f10:	240a      	movs	r4, #10
    5f12:	34ff      	adds	r4, #255	; 0xff
    5f14:	6806      	ldr	r6, [r0, #0]
    5f16:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5f18:	2a03      	cmp	r2, #3
    5f1a:	d109      	bne.n	5f30 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    5f1c:	b249      	sxtb	r1, r1
    5f1e:	2900      	cmp	r1, #0
    5f20:	db44      	blt.n	5fac <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    5f22:	6802      	ldr	r2, [r0, #0]
    5f24:	015b      	lsls	r3, r3, #5
    5f26:	18d3      	adds	r3, r2, r3
    5f28:	330a      	adds	r3, #10
    5f2a:	33ff      	adds	r3, #255	; 0xff
    5f2c:	2220      	movs	r2, #32
    5f2e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    5f30:	2000      	movs	r0, #0
    5f32:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    5f34:	b24c      	sxtb	r4, r1
    5f36:	2c00      	cmp	r4, #0
    5f38:	db08      	blt.n	5f4c <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    5f3a:	015c      	lsls	r4, r3, #5
    5f3c:	6805      	ldr	r5, [r0, #0]
    5f3e:	46ac      	mov	ip, r5
    5f40:	4464      	add	r4, ip
    5f42:	340a      	adds	r4, #10
    5f44:	34ff      	adds	r4, #255	; 0xff
    5f46:	2501      	movs	r5, #1
    5f48:	7025      	strb	r5, [r4, #0]
    5f4a:	e7e5      	b.n	5f18 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    5f4c:	015c      	lsls	r4, r3, #5
    5f4e:	6805      	ldr	r5, [r0, #0]
    5f50:	46ac      	mov	ip, r5
    5f52:	4464      	add	r4, ip
    5f54:	340a      	adds	r4, #10
    5f56:	34ff      	adds	r4, #255	; 0xff
    5f58:	2502      	movs	r5, #2
    5f5a:	7025      	strb	r5, [r4, #0]
    5f5c:	e7dc      	b.n	5f18 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    5f5e:	2a01      	cmp	r2, #1
    5f60:	d11a      	bne.n	5f98 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    5f62:	2b00      	cmp	r3, #0
    5f64:	d105      	bne.n	5f72 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    5f66:	6802      	ldr	r2, [r0, #0]
    5f68:	210c      	movs	r1, #12
    5f6a:	230a      	movs	r3, #10
    5f6c:	33ff      	adds	r3, #255	; 0xff
    5f6e:	54d1      	strb	r1, [r2, r3]
    5f70:	e7de      	b.n	5f30 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    5f72:	b249      	sxtb	r1, r1
    5f74:	2900      	cmp	r1, #0
    5f76:	db07      	blt.n	5f88 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    5f78:	6802      	ldr	r2, [r0, #0]
    5f7a:	015b      	lsls	r3, r3, #5
    5f7c:	18d3      	adds	r3, r2, r3
    5f7e:	330a      	adds	r3, #10
    5f80:	33ff      	adds	r3, #255	; 0xff
    5f82:	2204      	movs	r2, #4
    5f84:	701a      	strb	r2, [r3, #0]
    5f86:	e7d3      	b.n	5f30 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    5f88:	6802      	ldr	r2, [r0, #0]
    5f8a:	015b      	lsls	r3, r3, #5
    5f8c:	18d3      	adds	r3, r2, r3
    5f8e:	330a      	adds	r3, #10
    5f90:	33ff      	adds	r3, #255	; 0xff
    5f92:	2208      	movs	r2, #8
    5f94:	701a      	strb	r2, [r3, #0]
    5f96:	e7cb      	b.n	5f30 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    5f98:	2a02      	cmp	r2, #2
    5f9a:	d1bd      	bne.n	5f18 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    5f9c:	6802      	ldr	r2, [r0, #0]
    5f9e:	015b      	lsls	r3, r3, #5
    5fa0:	18d3      	adds	r3, r2, r3
    5fa2:	330a      	adds	r3, #10
    5fa4:	33ff      	adds	r3, #255	; 0xff
    5fa6:	2210      	movs	r2, #16
    5fa8:	701a      	strb	r2, [r3, #0]
    5faa:	e7c1      	b.n	5f30 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    5fac:	6802      	ldr	r2, [r0, #0]
    5fae:	015b      	lsls	r3, r3, #5
    5fb0:	18d3      	adds	r3, r2, r3
    5fb2:	330a      	adds	r3, #10
    5fb4:	33ff      	adds	r3, #255	; 0xff
    5fb6:	2240      	movs	r2, #64	; 0x40
    5fb8:	701a      	strb	r2, [r3, #0]
    5fba:	e7b9      	b.n	5f30 <usb_device_endpoint_enable_callback+0x40>
    5fbc:	0000a8dc 	.word	0x0000a8dc

00005fc0 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5fc0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5fc2:	230f      	movs	r3, #15
    5fc4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5fc6:	18c4      	adds	r4, r0, r3
    5fc8:	3461      	adds	r4, #97	; 0x61
    5fca:	34ff      	adds	r4, #255	; 0xff
    5fcc:	4d2f      	ldr	r5, [pc, #188]	; (608c <usb_device_endpoint_disable_callback+0xcc>)
    5fce:	5cae      	ldrb	r6, [r5, r2]
    5fd0:	7825      	ldrb	r5, [r4, #0]
    5fd2:	43b5      	bics	r5, r6
    5fd4:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5fd6:	2a00      	cmp	r2, #0
    5fd8:	d129      	bne.n	602e <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d112      	bne.n	6004 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    5fde:	2503      	movs	r5, #3
    5fe0:	2484      	movs	r4, #132	; 0x84
    5fe2:	0064      	lsls	r4, r4, #1
    5fe4:	6806      	ldr	r6, [r0, #0]
    5fe6:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5fe8:	2a03      	cmp	r2, #3
    5fea:	d109      	bne.n	6000 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    5fec:	b249      	sxtb	r1, r1
    5fee:	2900      	cmp	r1, #0
    5ff0:	db44      	blt.n	607c <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    5ff2:	6802      	ldr	r2, [r0, #0]
    5ff4:	015b      	lsls	r3, r3, #5
    5ff6:	18d3      	adds	r3, r2, r3
    5ff8:	3309      	adds	r3, #9
    5ffa:	33ff      	adds	r3, #255	; 0xff
    5ffc:	2220      	movs	r2, #32
    5ffe:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    6000:	2000      	movs	r0, #0
    6002:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6004:	b24c      	sxtb	r4, r1
    6006:	2c00      	cmp	r4, #0
    6008:	db08      	blt.n	601c <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    600a:	015c      	lsls	r4, r3, #5
    600c:	6805      	ldr	r5, [r0, #0]
    600e:	46ac      	mov	ip, r5
    6010:	4464      	add	r4, ip
    6012:	3409      	adds	r4, #9
    6014:	34ff      	adds	r4, #255	; 0xff
    6016:	2501      	movs	r5, #1
    6018:	7025      	strb	r5, [r4, #0]
    601a:	e7e5      	b.n	5fe8 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    601c:	015c      	lsls	r4, r3, #5
    601e:	6805      	ldr	r5, [r0, #0]
    6020:	46ac      	mov	ip, r5
    6022:	4464      	add	r4, ip
    6024:	3409      	adds	r4, #9
    6026:	34ff      	adds	r4, #255	; 0xff
    6028:	2502      	movs	r5, #2
    602a:	7025      	strb	r5, [r4, #0]
    602c:	e7dc      	b.n	5fe8 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    602e:	2a01      	cmp	r2, #1
    6030:	d11a      	bne.n	6068 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    6032:	2b00      	cmp	r3, #0
    6034:	d105      	bne.n	6042 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    6036:	6802      	ldr	r2, [r0, #0]
    6038:	210c      	movs	r1, #12
    603a:	3309      	adds	r3, #9
    603c:	33ff      	adds	r3, #255	; 0xff
    603e:	54d1      	strb	r1, [r2, r3]
    6040:	e7de      	b.n	6000 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    6042:	b249      	sxtb	r1, r1
    6044:	2900      	cmp	r1, #0
    6046:	db07      	blt.n	6058 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    6048:	6802      	ldr	r2, [r0, #0]
    604a:	015b      	lsls	r3, r3, #5
    604c:	18d3      	adds	r3, r2, r3
    604e:	3309      	adds	r3, #9
    6050:	33ff      	adds	r3, #255	; 0xff
    6052:	2204      	movs	r2, #4
    6054:	701a      	strb	r2, [r3, #0]
    6056:	e7d3      	b.n	6000 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    6058:	6802      	ldr	r2, [r0, #0]
    605a:	015b      	lsls	r3, r3, #5
    605c:	18d3      	adds	r3, r2, r3
    605e:	3309      	adds	r3, #9
    6060:	33ff      	adds	r3, #255	; 0xff
    6062:	2208      	movs	r2, #8
    6064:	701a      	strb	r2, [r3, #0]
    6066:	e7cb      	b.n	6000 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6068:	2a02      	cmp	r2, #2
    606a:	d1bd      	bne.n	5fe8 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    606c:	6802      	ldr	r2, [r0, #0]
    606e:	015b      	lsls	r3, r3, #5
    6070:	18d3      	adds	r3, r2, r3
    6072:	3309      	adds	r3, #9
    6074:	33ff      	adds	r3, #255	; 0xff
    6076:	2210      	movs	r2, #16
    6078:	701a      	strb	r2, [r3, #0]
    607a:	e7c1      	b.n	6000 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    607c:	6802      	ldr	r2, [r0, #0]
    607e:	015b      	lsls	r3, r3, #5
    6080:	18d3      	adds	r3, r2, r3
    6082:	3309      	adds	r3, #9
    6084:	33ff      	adds	r3, #255	; 0xff
    6086:	2240      	movs	r2, #64	; 0x40
    6088:	701a      	strb	r2, [r3, #0]
    608a:	e7b9      	b.n	6000 <usb_device_endpoint_disable_callback+0x40>
    608c:	0000a8dc 	.word	0x0000a8dc

00006090 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    6090:	2300      	movs	r3, #0
    6092:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    6094:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    6096:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    6098:	3301      	adds	r3, #1
    609a:	70c3      	strb	r3, [r0, #3]
}
    609c:	4770      	bx	lr
	...

000060a0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    60a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    60a2:	780c      	ldrb	r4, [r1, #0]
    60a4:	230f      	movs	r3, #15
    60a6:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    60a8:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    60aa:	78ca      	ldrb	r2, [r1, #3]
    60ac:	2a04      	cmp	r2, #4
    60ae:	d870      	bhi.n	6192 <usb_device_endpoint_set_config+0xf2>
    60b0:	0092      	lsls	r2, r2, #2
    60b2:	4d89      	ldr	r5, [pc, #548]	; (62d8 <usb_device_endpoint_set_config+0x238>)
    60b4:	58aa      	ldr	r2, [r5, r2]
    60b6:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    60b8:	6802      	ldr	r2, [r0, #0]
    60ba:	3308      	adds	r3, #8
    60bc:	015b      	lsls	r3, r3, #5
    60be:	2100      	movs	r1, #0
    60c0:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    60c2:	2200      	movs	r2, #0
    60c4:	e082      	b.n	61cc <usb_device_endpoint_set_config+0x12c>
    60c6:	015c      	lsls	r4, r3, #5
    60c8:	6802      	ldr	r2, [r0, #0]
    60ca:	4694      	mov	ip, r2
    60cc:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    60ce:	2280      	movs	r2, #128	; 0x80
    60d0:	0052      	lsls	r2, r2, #1
    60d2:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    60d4:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    60d6:	076d      	lsls	r5, r5, #29
    60d8:	d178      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    60da:	32e4      	adds	r2, #228	; 0xe4
    60dc:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    60de:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    60e0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    60e2:	422e      	tst	r6, r5
    60e4:	d172      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    60e6:	3d5f      	subs	r5, #95	; 0x5f
    60e8:	32e4      	adds	r2, #228	; 0xe4
    60ea:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    60ec:	001a      	movs	r2, r3
    60ee:	3208      	adds	r2, #8
    60f0:	0152      	lsls	r2, r2, #5
    60f2:	6804      	ldr	r4, [r0, #0]
    60f4:	18a4      	adds	r4, r4, r2
    60f6:	352f      	adds	r5, #47	; 0x2f
    60f8:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    60fa:	6800      	ldr	r0, [r0, #0]
    60fc:	1882      	adds	r2, r0, r2
    60fe:	2080      	movs	r0, #128	; 0x80
    6100:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    6102:	788a      	ldrb	r2, [r1, #2]
    6104:	2a00      	cmp	r2, #0
    6106:	d01f      	beq.n	6148 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6108:	0158      	lsls	r0, r3, #5
    610a:	4a74      	ldr	r2, [pc, #464]	; (62dc <usb_device_endpoint_set_config+0x23c>)
    610c:	1812      	adds	r2, r2, r0
    610e:	6854      	ldr	r4, [r2, #4]
    6110:	2080      	movs	r0, #128	; 0x80
    6112:	0600      	lsls	r0, r0, #24
    6114:	4304      	orrs	r4, r0
    6116:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6118:	6954      	ldr	r4, [r2, #20]
    611a:	4320      	orrs	r0, r4
    611c:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    611e:	2507      	movs	r5, #7
    6120:	784c      	ldrb	r4, [r1, #1]
    6122:	015a      	lsls	r2, r3, #5
    6124:	4b6d      	ldr	r3, [pc, #436]	; (62dc <usb_device_endpoint_set_config+0x23c>)
    6126:	189b      	adds	r3, r3, r2
    6128:	6858      	ldr	r0, [r3, #4]
    612a:	402c      	ands	r4, r5
    612c:	0724      	lsls	r4, r4, #28
    612e:	4e6c      	ldr	r6, [pc, #432]	; (62e0 <usb_device_endpoint_set_config+0x240>)
    6130:	4030      	ands	r0, r6
    6132:	4320      	orrs	r0, r4
    6134:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6136:	7849      	ldrb	r1, [r1, #1]
    6138:	695a      	ldr	r2, [r3, #20]
    613a:	4029      	ands	r1, r5
    613c:	0709      	lsls	r1, r1, #28
    613e:	4032      	ands	r2, r6
    6140:	430a      	orrs	r2, r1
    6142:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6144:	2200      	movs	r2, #0
    6146:	e041      	b.n	61cc <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6148:	0158      	lsls	r0, r3, #5
    614a:	4a64      	ldr	r2, [pc, #400]	; (62dc <usb_device_endpoint_set_config+0x23c>)
    614c:	1812      	adds	r2, r2, r0
    614e:	6850      	ldr	r0, [r2, #4]
    6150:	0040      	lsls	r0, r0, #1
    6152:	0840      	lsrs	r0, r0, #1
    6154:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6156:	6950      	ldr	r0, [r2, #20]
    6158:	0040      	lsls	r0, r0, #1
    615a:	0840      	lsrs	r0, r0, #1
    615c:	6150      	str	r0, [r2, #20]
    615e:	e7de      	b.n	611e <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6160:	2c00      	cmp	r4, #0
    6162:	db35      	blt.n	61d0 <usb_device_endpoint_set_config+0x130>
    6164:	015d      	lsls	r5, r3, #5
    6166:	6802      	ldr	r2, [r0, #0]
    6168:	4694      	mov	ip, r2
    616a:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    616c:	2280      	movs	r2, #128	; 0x80
    616e:	0052      	lsls	r2, r2, #1
    6170:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    6172:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6174:	0776      	lsls	r6, r6, #29
    6176:	d129      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6178:	2680      	movs	r6, #128	; 0x80
    617a:	0076      	lsls	r6, r6, #1
    617c:	5daa      	ldrb	r2, [r5, r6]
    617e:	2702      	movs	r7, #2
    6180:	433a      	orrs	r2, r7
    6182:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6184:	6802      	ldr	r2, [r0, #0]
    6186:	0018      	movs	r0, r3
    6188:	3008      	adds	r0, #8
    618a:	0140      	lsls	r0, r0, #5
    618c:	1812      	adds	r2, r2, r0
    618e:	2040      	movs	r0, #64	; 0x40
    6190:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6192:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6194:	784f      	ldrb	r7, [r1, #1]
    6196:	005d      	lsls	r5, r3, #1
    6198:	18ad      	adds	r5, r5, r2
    619a:	012d      	lsls	r5, r5, #4
    619c:	4e4f      	ldr	r6, [pc, #316]	; (62dc <usb_device_endpoint_set_config+0x23c>)
    619e:	1975      	adds	r5, r6, r5
    61a0:	6868      	ldr	r0, [r5, #4]
    61a2:	2407      	movs	r4, #7
    61a4:	403c      	ands	r4, r7
    61a6:	0724      	lsls	r4, r4, #28
    61a8:	4e4d      	ldr	r6, [pc, #308]	; (62e0 <usb_device_endpoint_set_config+0x240>)
    61aa:	4030      	ands	r0, r6
    61ac:	4320      	orrs	r0, r4
    61ae:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    61b0:	7889      	ldrb	r1, [r1, #2]
    61b2:	2900      	cmp	r1, #0
    61b4:	d000      	beq.n	61b8 <usb_device_endpoint_set_config+0x118>
    61b6:	e088      	b.n	62ca <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    61b8:	005b      	lsls	r3, r3, #1
    61ba:	189b      	adds	r3, r3, r2
    61bc:	011b      	lsls	r3, r3, #4
    61be:	4a47      	ldr	r2, [pc, #284]	; (62dc <usb_device_endpoint_set_config+0x23c>)
    61c0:	18d3      	adds	r3, r2, r3
    61c2:	685a      	ldr	r2, [r3, #4]
    61c4:	0052      	lsls	r2, r2, #1
    61c6:	0852      	lsrs	r2, r2, #1
    61c8:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    61ca:	2200      	movs	r2, #0
}
    61cc:	0010      	movs	r0, r2
    61ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61d0:	015d      	lsls	r5, r3, #5
    61d2:	6802      	ldr	r2, [r0, #0]
    61d4:	4694      	mov	ip, r2
    61d6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    61d8:	2280      	movs	r2, #128	; 0x80
    61da:	0052      	lsls	r2, r2, #1
    61dc:	5caf      	ldrb	r7, [r5, r2]
    61de:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    61e0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    61e2:	4237      	tst	r7, r6
    61e4:	d1f2      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    61e6:	3690      	adds	r6, #144	; 0x90
    61e8:	5daa      	ldrb	r2, [r5, r6]
    61ea:	2720      	movs	r7, #32
    61ec:	433a      	orrs	r2, r7
    61ee:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    61f0:	6802      	ldr	r2, [r0, #0]
    61f2:	0018      	movs	r0, r3
    61f4:	3008      	adds	r0, #8
    61f6:	0140      	lsls	r0, r0, #5
    61f8:	1812      	adds	r2, r2, r0
    61fa:	2080      	movs	r0, #128	; 0x80
    61fc:	7110      	strb	r0, [r2, #4]
    61fe:	e7c8      	b.n	6192 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6200:	2c00      	cmp	r4, #0
    6202:	db17      	blt.n	6234 <usb_device_endpoint_set_config+0x194>
    6204:	015d      	lsls	r5, r3, #5
    6206:	6802      	ldr	r2, [r0, #0]
    6208:	4694      	mov	ip, r2
    620a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    620c:	2280      	movs	r2, #128	; 0x80
    620e:	0052      	lsls	r2, r2, #1
    6210:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6212:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6214:	0776      	lsls	r6, r6, #29
    6216:	d1d9      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6218:	2680      	movs	r6, #128	; 0x80
    621a:	0076      	lsls	r6, r6, #1
    621c:	5daa      	ldrb	r2, [r5, r6]
    621e:	2703      	movs	r7, #3
    6220:	433a      	orrs	r2, r7
    6222:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6224:	6802      	ldr	r2, [r0, #0]
    6226:	0018      	movs	r0, r3
    6228:	3008      	adds	r0, #8
    622a:	0140      	lsls	r0, r0, #5
    622c:	1812      	adds	r2, r2, r0
    622e:	2040      	movs	r0, #64	; 0x40
    6230:	7150      	strb	r0, [r2, #5]
    6232:	e7ae      	b.n	6192 <usb_device_endpoint_set_config+0xf2>
    6234:	015d      	lsls	r5, r3, #5
    6236:	6802      	ldr	r2, [r0, #0]
    6238:	4694      	mov	ip, r2
    623a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    623c:	2280      	movs	r2, #128	; 0x80
    623e:	0052      	lsls	r2, r2, #1
    6240:	5caf      	ldrb	r7, [r5, r2]
    6242:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6244:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6246:	4237      	tst	r7, r6
    6248:	d1c0      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    624a:	3690      	adds	r6, #144	; 0x90
    624c:	5daa      	ldrb	r2, [r5, r6]
    624e:	2730      	movs	r7, #48	; 0x30
    6250:	433a      	orrs	r2, r7
    6252:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6254:	6802      	ldr	r2, [r0, #0]
    6256:	0018      	movs	r0, r3
    6258:	3008      	adds	r0, #8
    625a:	0140      	lsls	r0, r0, #5
    625c:	1812      	adds	r2, r2, r0
    625e:	2080      	movs	r0, #128	; 0x80
    6260:	7110      	strb	r0, [r2, #4]
    6262:	e796      	b.n	6192 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6264:	2c00      	cmp	r4, #0
    6266:	db17      	blt.n	6298 <usb_device_endpoint_set_config+0x1f8>
    6268:	015d      	lsls	r5, r3, #5
    626a:	6802      	ldr	r2, [r0, #0]
    626c:	4694      	mov	ip, r2
    626e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6270:	2280      	movs	r2, #128	; 0x80
    6272:	0052      	lsls	r2, r2, #1
    6274:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6276:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6278:	0776      	lsls	r6, r6, #29
    627a:	d1a7      	bne.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    627c:	2680      	movs	r6, #128	; 0x80
    627e:	0076      	lsls	r6, r6, #1
    6280:	5daa      	ldrb	r2, [r5, r6]
    6282:	2704      	movs	r7, #4
    6284:	433a      	orrs	r2, r7
    6286:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6288:	6802      	ldr	r2, [r0, #0]
    628a:	0018      	movs	r0, r3
    628c:	3008      	adds	r0, #8
    628e:	0140      	lsls	r0, r0, #5
    6290:	1812      	adds	r2, r2, r0
    6292:	2040      	movs	r0, #64	; 0x40
    6294:	7150      	strb	r0, [r2, #5]
    6296:	e77c      	b.n	6192 <usb_device_endpoint_set_config+0xf2>
    6298:	015d      	lsls	r5, r3, #5
    629a:	6802      	ldr	r2, [r0, #0]
    629c:	4694      	mov	ip, r2
    629e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    62a0:	2280      	movs	r2, #128	; 0x80
    62a2:	0052      	lsls	r2, r2, #1
    62a4:	5caf      	ldrb	r7, [r5, r2]
    62a6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    62a8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    62aa:	4237      	tst	r7, r6
    62ac:	d000      	beq.n	62b0 <usb_device_endpoint_set_config+0x210>
    62ae:	e78d      	b.n	61cc <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    62b0:	3690      	adds	r6, #144	; 0x90
    62b2:	5daa      	ldrb	r2, [r5, r6]
    62b4:	2740      	movs	r7, #64	; 0x40
    62b6:	433a      	orrs	r2, r7
    62b8:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    62ba:	6802      	ldr	r2, [r0, #0]
    62bc:	0018      	movs	r0, r3
    62be:	3008      	adds	r0, #8
    62c0:	0140      	lsls	r0, r0, #5
    62c2:	1812      	adds	r2, r2, r0
    62c4:	2080      	movs	r0, #128	; 0x80
    62c6:	7110      	strb	r0, [r2, #4]
    62c8:	e763      	b.n	6192 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    62ca:	6869      	ldr	r1, [r5, #4]
    62cc:	2380      	movs	r3, #128	; 0x80
    62ce:	061b      	lsls	r3, r3, #24
    62d0:	430b      	orrs	r3, r1
    62d2:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    62d4:	2200      	movs	r2, #0
    62d6:	e779      	b.n	61cc <usb_device_endpoint_set_config+0x12c>
    62d8:	0000a8b8 	.word	0x0000a8b8
    62dc:	200008c0 	.word	0x200008c0
    62e0:	8fffffff 	.word	0x8fffffff

000062e4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    62e4:	230f      	movs	r3, #15
    62e6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    62e8:	b249      	sxtb	r1, r1
    62ea:	2900      	cmp	r1, #0
    62ec:	db0a      	blt.n	6304 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    62ee:	3308      	adds	r3, #8
    62f0:	015b      	lsls	r3, r3, #5
    62f2:	6802      	ldr	r2, [r0, #0]
    62f4:	18d2      	adds	r2, r2, r3
    62f6:	2140      	movs	r1, #64	; 0x40
    62f8:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    62fa:	6802      	ldr	r2, [r0, #0]
    62fc:	18d3      	adds	r3, r2, r3
    62fe:	2201      	movs	r2, #1
    6300:	71da      	strb	r2, [r3, #7]
	}
}
    6302:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6304:	3308      	adds	r3, #8
    6306:	015b      	lsls	r3, r3, #5
    6308:	6802      	ldr	r2, [r0, #0]
    630a:	18d2      	adds	r2, r2, r3
    630c:	2180      	movs	r1, #128	; 0x80
    630e:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6310:	6802      	ldr	r2, [r0, #0]
    6312:	18d3      	adds	r3, r2, r3
    6314:	2202      	movs	r2, #2
    6316:	71da      	strb	r2, [r3, #7]
    6318:	e7f3      	b.n	6302 <usb_device_endpoint_abort_job+0x1e>

0000631a <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    631a:	230f      	movs	r3, #15
    631c:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    631e:	b249      	sxtb	r1, r1
    6320:	2900      	cmp	r1, #0
    6322:	db07      	blt.n	6334 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6324:	6802      	ldr	r2, [r0, #0]
    6326:	3308      	adds	r3, #8
    6328:	015b      	lsls	r3, r3, #5
    632a:	18d3      	adds	r3, r2, r3
    632c:	7998      	ldrb	r0, [r3, #6]
    632e:	06c0      	lsls	r0, r0, #27
    6330:	0fc0      	lsrs	r0, r0, #31
	}
}
    6332:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    6334:	6802      	ldr	r2, [r0, #0]
    6336:	3308      	adds	r3, #8
    6338:	015b      	lsls	r3, r3, #5
    633a:	18d3      	adds	r3, r2, r3
    633c:	7998      	ldrb	r0, [r3, #6]
    633e:	0680      	lsls	r0, r0, #26
    6340:	0fc0      	lsrs	r0, r0, #31
    6342:	e7f6      	b.n	6332 <usb_device_endpoint_is_halted+0x18>

00006344 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6344:	230f      	movs	r3, #15
    6346:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6348:	b249      	sxtb	r1, r1
    634a:	2900      	cmp	r1, #0
    634c:	db06      	blt.n	635c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    634e:	6802      	ldr	r2, [r0, #0]
    6350:	3308      	adds	r3, #8
    6352:	015b      	lsls	r3, r3, #5
    6354:	18d3      	adds	r3, r2, r3
    6356:	2210      	movs	r2, #16
    6358:	715a      	strb	r2, [r3, #5]
	}
}
    635a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    635c:	6802      	ldr	r2, [r0, #0]
    635e:	3308      	adds	r3, #8
    6360:	015b      	lsls	r3, r3, #5
    6362:	18d3      	adds	r3, r2, r3
    6364:	2220      	movs	r2, #32
    6366:	715a      	strb	r2, [r3, #5]
    6368:	e7f7      	b.n	635a <usb_device_endpoint_set_halt+0x16>

0000636a <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    636a:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    636c:	230f      	movs	r3, #15
    636e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6370:	b249      	sxtb	r1, r1
    6372:	2900      	cmp	r1, #0
    6374:	db1d      	blt.n	63b2 <usb_device_endpoint_clear_halt+0x48>
    6376:	0159      	lsls	r1, r3, #5
    6378:	6802      	ldr	r2, [r0, #0]
    637a:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    637c:	2483      	movs	r4, #131	; 0x83
    637e:	0064      	lsls	r4, r4, #1
    6380:	5d14      	ldrb	r4, [r2, r4]
    6382:	06e4      	lsls	r4, r4, #27
    6384:	d514      	bpl.n	63b0 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6386:	2510      	movs	r5, #16
    6388:	2482      	movs	r4, #130	; 0x82
    638a:	0064      	lsls	r4, r4, #1
    638c:	5515      	strb	r5, [r2, r4]
    638e:	6802      	ldr	r2, [r0, #0]
    6390:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6392:	2108      	movs	r1, #8
    6394:	31ff      	adds	r1, #255	; 0xff
    6396:	5c51      	ldrb	r1, [r2, r1]
    6398:	0689      	lsls	r1, r1, #26
    639a:	d509      	bpl.n	63b0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    639c:	3ce4      	subs	r4, #228	; 0xe4
    639e:	2108      	movs	r1, #8
    63a0:	31ff      	adds	r1, #255	; 0xff
    63a2:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    63a4:	6802      	ldr	r2, [r0, #0]
    63a6:	3308      	adds	r3, #8
    63a8:	015b      	lsls	r3, r3, #5
    63aa:	18d3      	adds	r3, r2, r3
    63ac:	2201      	movs	r2, #1
    63ae:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    63b0:	bd30      	pop	{r4, r5, pc}
    63b2:	0159      	lsls	r1, r3, #5
    63b4:	6802      	ldr	r2, [r0, #0]
    63b6:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    63b8:	2483      	movs	r4, #131	; 0x83
    63ba:	0064      	lsls	r4, r4, #1
    63bc:	5d14      	ldrb	r4, [r2, r4]
    63be:	06a4      	lsls	r4, r4, #26
    63c0:	d5f6      	bpl.n	63b0 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    63c2:	2520      	movs	r5, #32
    63c4:	2482      	movs	r4, #130	; 0x82
    63c6:	0064      	lsls	r4, r4, #1
    63c8:	5515      	strb	r5, [r2, r4]
    63ca:	6802      	ldr	r2, [r0, #0]
    63cc:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    63ce:	2108      	movs	r1, #8
    63d0:	31ff      	adds	r1, #255	; 0xff
    63d2:	5c51      	ldrb	r1, [r2, r1]
    63d4:	0649      	lsls	r1, r1, #25
    63d6:	d5eb      	bpl.n	63b0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    63d8:	3cc4      	subs	r4, #196	; 0xc4
    63da:	2108      	movs	r1, #8
    63dc:	31ff      	adds	r1, #255	; 0xff
    63de:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    63e0:	6802      	ldr	r2, [r0, #0]
    63e2:	3308      	adds	r3, #8
    63e4:	015b      	lsls	r3, r3, #5
    63e6:	18d3      	adds	r3, r2, r3
    63e8:	2202      	movs	r2, #2
    63ea:	711a      	strb	r2, [r3, #4]
    63ec:	e7e0      	b.n	63b0 <usb_device_endpoint_clear_halt+0x46>
	...

000063f0 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    63f0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    63f2:	000c      	movs	r4, r1
    63f4:	3408      	adds	r4, #8
    63f6:	0164      	lsls	r4, r4, #5
    63f8:	6805      	ldr	r5, [r0, #0]
    63fa:	5d64      	ldrb	r4, [r4, r5]
    63fc:	0664      	lsls	r4, r4, #25
    63fe:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6400:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6402:	2c00      	cmp	r4, #0
    6404:	d101      	bne.n	640a <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6406:	0028      	movs	r0, r5
    6408:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    640a:	014c      	lsls	r4, r1, #5
    640c:	4d0b      	ldr	r5, [pc, #44]	; (643c <usb_device_endpoint_write_buffer_job+0x4c>)
    640e:	192d      	adds	r5, r5, r4
    6410:	002c      	movs	r4, r5
    6412:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6414:	696a      	ldr	r2, [r5, #20]
    6416:	4d0a      	ldr	r5, [pc, #40]	; (6440 <usb_device_endpoint_write_buffer_job+0x50>)
    6418:	402a      	ands	r2, r5
    641a:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    641c:	6962      	ldr	r2, [r4, #20]
    641e:	049b      	lsls	r3, r3, #18
    6420:	0c9b      	lsrs	r3, r3, #18
    6422:	0b92      	lsrs	r2, r2, #14
    6424:	0392      	lsls	r2, r2, #14
    6426:	4313      	orrs	r3, r2
    6428:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    642a:	6803      	ldr	r3, [r0, #0]
    642c:	3108      	adds	r1, #8
    642e:	0149      	lsls	r1, r1, #5
    6430:	1859      	adds	r1, r3, r1
    6432:	2380      	movs	r3, #128	; 0x80
    6434:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6436:	2500      	movs	r5, #0
    6438:	e7e5      	b.n	6406 <usb_device_endpoint_write_buffer_job+0x16>
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	200008c0 	.word	0x200008c0
    6440:	f0003fff 	.word	0xf0003fff

00006444 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6444:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6446:	000c      	movs	r4, r1
    6448:	3408      	adds	r4, #8
    644a:	0164      	lsls	r4, r4, #5
    644c:	6805      	ldr	r5, [r0, #0]
    644e:	5d64      	ldrb	r4, [r4, r5]
    6450:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6452:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6454:	2c00      	cmp	r4, #0
    6456:	d101      	bne.n	645c <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6458:	0028      	movs	r0, r5
    645a:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    645c:	4c0b      	ldr	r4, [pc, #44]	; (648c <usb_device_endpoint_read_buffer_job+0x48>)
    645e:	014d      	lsls	r5, r1, #5
    6460:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    6462:	1962      	adds	r2, r4, r5
    6464:	6854      	ldr	r4, [r2, #4]
    6466:	049b      	lsls	r3, r3, #18
    6468:	091b      	lsrs	r3, r3, #4
    646a:	4d09      	ldr	r5, [pc, #36]	; (6490 <usb_device_endpoint_read_buffer_job+0x4c>)
    646c:	402c      	ands	r4, r5
    646e:	4323      	orrs	r3, r4
    6470:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6472:	6853      	ldr	r3, [r2, #4]
    6474:	0b9b      	lsrs	r3, r3, #14
    6476:	039b      	lsls	r3, r3, #14
    6478:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    647a:	6803      	ldr	r3, [r0, #0]
    647c:	3108      	adds	r1, #8
    647e:	0149      	lsls	r1, r1, #5
    6480:	1859      	adds	r1, r3, r1
    6482:	2340      	movs	r3, #64	; 0x40
    6484:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6486:	2500      	movs	r5, #0
    6488:	e7e6      	b.n	6458 <usb_device_endpoint_read_buffer_job+0x14>
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	200008c0 	.word	0x200008c0
    6490:	f0003fff 	.word	0xf0003fff

00006494 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6494:	4b09      	ldr	r3, [pc, #36]	; (64bc <usb_device_endpoint_setup_buffer_job+0x28>)
    6496:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6498:	685a      	ldr	r2, [r3, #4]
    649a:	4909      	ldr	r1, [pc, #36]	; (64c0 <usb_device_endpoint_setup_buffer_job+0x2c>)
    649c:	4011      	ands	r1, r2
    649e:	2280      	movs	r2, #128	; 0x80
    64a0:	0292      	lsls	r2, r2, #10
    64a2:	430a      	orrs	r2, r1
    64a4:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    64a6:	685a      	ldr	r2, [r3, #4]
    64a8:	0b92      	lsrs	r2, r2, #14
    64aa:	0392      	lsls	r2, r2, #14
    64ac:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    64ae:	6802      	ldr	r2, [r0, #0]
    64b0:	2140      	movs	r1, #64	; 0x40
    64b2:	2382      	movs	r3, #130	; 0x82
    64b4:	005b      	lsls	r3, r3, #1
    64b6:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    64b8:	2000      	movs	r0, #0
    64ba:	4770      	bx	lr
    64bc:	200008c0 	.word	0x200008c0
    64c0:	f0003fff 	.word	0xf0003fff

000064c4 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    64c4:	6802      	ldr	r2, [r0, #0]
    64c6:	7813      	ldrb	r3, [r2, #0]
    64c8:	2102      	movs	r1, #2
    64ca:	430b      	orrs	r3, r1
    64cc:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    64ce:	6802      	ldr	r2, [r0, #0]
    64d0:	7893      	ldrb	r3, [r2, #2]
    64d2:	2b02      	cmp	r3, #2
    64d4:	d0fc      	beq.n	64d0 <usb_enable+0xc>
}
    64d6:	4770      	bx	lr

000064d8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    64d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64da:	46de      	mov	lr, fp
    64dc:	4657      	mov	r7, sl
    64de:	464e      	mov	r6, r9
    64e0:	4645      	mov	r5, r8
    64e2:	b5e0      	push	{r5, r6, r7, lr}
    64e4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    64e6:	4bc0      	ldr	r3, [pc, #768]	; (67e8 <USB_Handler+0x310>)
    64e8:	681f      	ldr	r7, [r3, #0]
    64ea:	683d      	ldr	r5, [r7, #0]
    64ec:	782b      	ldrb	r3, [r5, #0]
    64ee:	09db      	lsrs	r3, r3, #7
    64f0:	d114      	bne.n	651c <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    64f2:	8c2e      	ldrh	r6, [r5, #32]
    64f4:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    64f6:	2e00      	cmp	r6, #0
    64f8:	d000      	beq.n	64fc <USB_Handler+0x24>
    64fa:	e1a5      	b.n	6848 <USB_Handler+0x370>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    64fc:	8bae      	ldrh	r6, [r5, #28]
    64fe:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6500:	23ab      	movs	r3, #171	; 0xab
    6502:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6504:	5afb      	ldrh	r3, [r7, r3]
    6506:	22aa      	movs	r2, #170	; 0xaa
    6508:	0052      	lsls	r2, r2, #1
    650a:	5abd      	ldrh	r5, [r7, r2]
    650c:	401d      	ands	r5, r3
    650e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6510:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    6512:	4fb6      	ldr	r7, [pc, #728]	; (67ec <USB_Handler+0x314>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6514:	4bb4      	ldr	r3, [pc, #720]	; (67e8 <USB_Handler+0x310>)
    6516:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6518:	4698      	mov	r8, r3
    651a:	e180      	b.n	681e <USB_Handler+0x346>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    651c:	8c28      	ldrh	r0, [r5, #32]
    651e:	b280      	uxth	r0, r0
    6520:	4bb3      	ldr	r3, [pc, #716]	; (67f0 <USB_Handler+0x318>)
    6522:	4798      	blx	r3
    6524:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6526:	281f      	cmp	r0, #31
    6528:	d900      	bls.n	652c <USB_Handler+0x54>
    652a:	e0d6      	b.n	66da <USB_Handler+0x202>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    652c:	0003      	movs	r3, r0
    652e:	3308      	adds	r3, #8
    6530:	015b      	lsls	r3, r3, #5
    6532:	18ed      	adds	r5, r5, r3
    6534:	79ed      	ldrb	r5, [r5, #7]
    6536:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6538:	07ab      	lsls	r3, r5, #30
    653a:	d041      	beq.n	65c0 <USB_Handler+0xe8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    653c:	4aad      	ldr	r2, [pc, #692]	; (67f4 <USB_Handler+0x31c>)
    653e:	2301      	movs	r3, #1
    6540:	4083      	lsls	r3, r0
    6542:	6811      	ldr	r1, [r2, #0]
    6544:	4399      	bics	r1, r3
    6546:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6548:	0003      	movs	r3, r0
    654a:	3308      	adds	r3, #8
    654c:	015b      	lsls	r3, r3, #5
    654e:	683a      	ldr	r2, [r7, #0]
    6550:	4694      	mov	ip, r2
    6552:	4463      	add	r3, ip
    6554:	2203      	movs	r2, #3
    6556:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6558:	183b      	adds	r3, r7, r0
    655a:	33ae      	adds	r3, #174	; 0xae
    655c:	781b      	ldrb	r3, [r3, #0]
    655e:	07db      	lsls	r3, r3, #31
    6560:	d52e      	bpl.n	65c0 <USB_Handler+0xe8>
				pipe_callback_para.pipe_num = pipe_int;
    6562:	4ba5      	ldr	r3, [pc, #660]	; (67f8 <USB_Handler+0x320>)
    6564:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6566:	683a      	ldr	r2, [r7, #0]
    6568:	0003      	movs	r3, r0
    656a:	3308      	adds	r3, #8
    656c:	015b      	lsls	r3, r3, #5
    656e:	5c9b      	ldrb	r3, [r3, r2]
    6570:	079b      	lsls	r3, r3, #30
    6572:	0f9b      	lsrs	r3, r3, #30
    6574:	2b01      	cmp	r3, #1
    6576:	d100      	bne.n	657a <USB_Handler+0xa2>
    6578:	e081      	b.n	667e <USB_Handler+0x1a6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    657a:	0142      	lsls	r2, r0, #5
    657c:	4b9f      	ldr	r3, [pc, #636]	; (67fc <USB_Handler+0x324>)
    657e:	189b      	adds	r3, r3, r2
    6580:	685a      	ldr	r2, [r3, #4]
    6582:	0112      	lsls	r2, r2, #4
    6584:	0c92      	lsrs	r2, r2, #18
    6586:	b290      	uxth	r0, r2
    6588:	499b      	ldr	r1, [pc, #620]	; (67f8 <USB_Handler+0x320>)
    658a:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    658c:	685a      	ldr	r2, [r3, #4]
    658e:	0492      	lsls	r2, r2, #18
    6590:	0c92      	lsrs	r2, r2, #18
    6592:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6594:	685a      	ldr	r2, [r3, #4]
    6596:	499a      	ldr	r1, [pc, #616]	; (6800 <USB_Handler+0x328>)
    6598:	400a      	ands	r2, r1
    659a:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    659c:	2800      	cmp	r0, #0
    659e:	d107      	bne.n	65b0 <USB_Handler+0xd8>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    65a0:	0162      	lsls	r2, r4, #5
    65a2:	4b96      	ldr	r3, [pc, #600]	; (67fc <USB_Handler+0x324>)
    65a4:	189b      	adds	r3, r3, r2
    65a6:	685b      	ldr	r3, [r3, #4]
    65a8:	049b      	lsls	r3, r3, #18
    65aa:	0c9b      	lsrs	r3, r3, #18
    65ac:	4a92      	ldr	r2, [pc, #584]	; (67f8 <USB_Handler+0x320>)
    65ae:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    65b0:	4b8d      	ldr	r3, [pc, #564]	; (67e8 <USB_Handler+0x310>)
    65b2:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    65b4:	1ca3      	adds	r3, r4, #2
    65b6:	011b      	lsls	r3, r3, #4
    65b8:	18c3      	adds	r3, r0, r3
    65ba:	685b      	ldr	r3, [r3, #4]
    65bc:	498e      	ldr	r1, [pc, #568]	; (67f8 <USB_Handler+0x320>)
    65be:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    65c0:	076b      	lsls	r3, r5, #29
    65c2:	d50e      	bpl.n	65e2 <USB_Handler+0x10a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    65c4:	4a8b      	ldr	r2, [pc, #556]	; (67f4 <USB_Handler+0x31c>)
    65c6:	2301      	movs	r3, #1
    65c8:	40a3      	lsls	r3, r4
    65ca:	6811      	ldr	r1, [r2, #0]
    65cc:	4399      	bics	r1, r3
    65ce:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    65d0:	4b85      	ldr	r3, [pc, #532]	; (67e8 <USB_Handler+0x310>)
    65d2:	681b      	ldr	r3, [r3, #0]
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	0022      	movs	r2, r4
    65d8:	3208      	adds	r2, #8
    65da:	0152      	lsls	r2, r2, #5
    65dc:	189b      	adds	r3, r3, r2
    65de:	2204      	movs	r2, #4
    65e0:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    65e2:	072b      	lsls	r3, r5, #28
    65e4:	d514      	bpl.n	6610 <USB_Handler+0x138>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    65e6:	4a83      	ldr	r2, [pc, #524]	; (67f4 <USB_Handler+0x31c>)
    65e8:	2301      	movs	r3, #1
    65ea:	40a3      	lsls	r3, r4
    65ec:	6811      	ldr	r1, [r2, #0]
    65ee:	4399      	bics	r1, r3
    65f0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    65f2:	4b7d      	ldr	r3, [pc, #500]	; (67e8 <USB_Handler+0x310>)
    65f4:	6818      	ldr	r0, [r3, #0]
    65f6:	0023      	movs	r3, r4
    65f8:	3308      	adds	r3, #8
    65fa:	015b      	lsls	r3, r3, #5
    65fc:	6802      	ldr	r2, [r0, #0]
    65fe:	4694      	mov	ip, r2
    6600:	4463      	add	r3, ip
    6602:	2208      	movs	r2, #8
    6604:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6606:	1903      	adds	r3, r0, r4
    6608:	33ae      	adds	r3, #174	; 0xae
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	079b      	lsls	r3, r3, #30
    660e:	d447      	bmi.n	66a0 <USB_Handler+0x1c8>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6610:	06eb      	lsls	r3, r5, #27
    6612:	d514      	bpl.n	663e <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6614:	4a77      	ldr	r2, [pc, #476]	; (67f4 <USB_Handler+0x31c>)
    6616:	2301      	movs	r3, #1
    6618:	40a3      	lsls	r3, r4
    661a:	6811      	ldr	r1, [r2, #0]
    661c:	4399      	bics	r1, r3
    661e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6620:	4b71      	ldr	r3, [pc, #452]	; (67e8 <USB_Handler+0x310>)
    6622:	6818      	ldr	r0, [r3, #0]
    6624:	0023      	movs	r3, r4
    6626:	3308      	adds	r3, #8
    6628:	015b      	lsls	r3, r3, #5
    662a:	6802      	ldr	r2, [r0, #0]
    662c:	4694      	mov	ip, r2
    662e:	4463      	add	r3, ip
    6630:	2210      	movs	r2, #16
    6632:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6634:	1903      	adds	r3, r0, r4
    6636:	33ae      	adds	r3, #174	; 0xae
    6638:	781b      	ldrb	r3, [r3, #0]
    663a:	075b      	lsls	r3, r3, #29
    663c:	d43e      	bmi.n	66bc <USB_Handler+0x1e4>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    663e:	06ab      	lsls	r3, r5, #26
    6640:	d400      	bmi.n	6644 <USB_Handler+0x16c>
    6642:	e0b0      	b.n	67a6 <USB_Handler+0x2ce>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6644:	4a6b      	ldr	r2, [pc, #428]	; (67f4 <USB_Handler+0x31c>)
    6646:	2301      	movs	r3, #1
    6648:	40a3      	lsls	r3, r4
    664a:	6811      	ldr	r1, [r2, #0]
    664c:	4399      	bics	r1, r3
    664e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6650:	4b65      	ldr	r3, [pc, #404]	; (67e8 <USB_Handler+0x310>)
    6652:	6818      	ldr	r0, [r3, #0]
    6654:	0023      	movs	r3, r4
    6656:	3308      	adds	r3, #8
    6658:	015b      	lsls	r3, r3, #5
    665a:	6802      	ldr	r2, [r0, #0]
    665c:	4694      	mov	ip, r2
    665e:	4463      	add	r3, ip
    6660:	2220      	movs	r2, #32
    6662:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6664:	1903      	adds	r3, r0, r4
    6666:	33ae      	adds	r3, #174	; 0xae
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	071b      	lsls	r3, r3, #28
    666c:	d400      	bmi.n	6670 <USB_Handler+0x198>
    666e:	e09a      	b.n	67a6 <USB_Handler+0x2ce>
				pipe_callback_para.pipe_num = pipe_int;
    6670:	4961      	ldr	r1, [pc, #388]	; (67f8 <USB_Handler+0x320>)
    6672:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6674:	0124      	lsls	r4, r4, #4
    6676:	1904      	adds	r4, r0, r4
    6678:	6b23      	ldr	r3, [r4, #48]	; 0x30
    667a:	4798      	blx	r3
    667c:	e093      	b.n	67a6 <USB_Handler+0x2ce>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    667e:	0142      	lsls	r2, r0, #5
    6680:	4b5e      	ldr	r3, [pc, #376]	; (67fc <USB_Handler+0x324>)
    6682:	189b      	adds	r3, r3, r2
    6684:	685a      	ldr	r2, [r3, #4]
    6686:	0492      	lsls	r2, r2, #18
    6688:	0c92      	lsrs	r2, r2, #18
    668a:	495b      	ldr	r1, [pc, #364]	; (67f8 <USB_Handler+0x320>)
    668c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    668e:	685a      	ldr	r2, [r3, #4]
    6690:	0112      	lsls	r2, r2, #4
    6692:	0c92      	lsrs	r2, r2, #18
    6694:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6696:	685a      	ldr	r2, [r3, #4]
    6698:	0b92      	lsrs	r2, r2, #14
    669a:	0392      	lsls	r2, r2, #14
    669c:	605a      	str	r2, [r3, #4]
    669e:	e787      	b.n	65b0 <USB_Handler+0xd8>
				pipe_callback_para.pipe_num = pipe_int;
    66a0:	4955      	ldr	r1, [pc, #340]	; (67f8 <USB_Handler+0x320>)
    66a2:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    66a4:	0162      	lsls	r2, r4, #5
    66a6:	4b55      	ldr	r3, [pc, #340]	; (67fc <USB_Handler+0x324>)
    66a8:	189b      	adds	r3, r3, r2
    66aa:	89db      	ldrh	r3, [r3, #14]
    66ac:	221f      	movs	r2, #31
    66ae:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    66b0:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    66b2:	0123      	lsls	r3, r4, #4
    66b4:	18c3      	adds	r3, r0, r3
    66b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66b8:	4798      	blx	r3
    66ba:	e7a9      	b.n	6610 <USB_Handler+0x138>
				pipe_callback_para.pipe_num = pipe_int;
    66bc:	494e      	ldr	r1, [pc, #312]	; (67f8 <USB_Handler+0x320>)
    66be:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    66c0:	0162      	lsls	r2, r4, #5
    66c2:	4b4e      	ldr	r3, [pc, #312]	; (67fc <USB_Handler+0x324>)
    66c4:	189b      	adds	r3, r3, r2
    66c6:	685b      	ldr	r3, [r3, #4]
    66c8:	011b      	lsls	r3, r3, #4
    66ca:	0c9b      	lsrs	r3, r3, #18
    66cc:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    66ce:	0123      	lsls	r3, r4, #4
    66d0:	18c3      	adds	r3, r0, r3
    66d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    66d4:	2100      	movs	r1, #0
    66d6:	4798      	blx	r3
    66d8:	e7b1      	b.n	663e <USB_Handler+0x166>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    66da:	8bac      	ldrh	r4, [r5, #28]
    66dc:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    66de:	0763      	lsls	r3, r4, #29
    66e0:	d505      	bpl.n	66ee <USB_Handler+0x216>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    66e2:	2304      	movs	r3, #4
    66e4:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    66e6:	33a1      	adds	r3, #161	; 0xa1
    66e8:	5cfb      	ldrb	r3, [r7, r3]
    66ea:	07db      	lsls	r3, r3, #31
    66ec:	d462      	bmi.n	67b4 <USB_Handler+0x2dc>
		if (flags & USB_HOST_INTFLAG_RST) {
    66ee:	0723      	lsls	r3, r4, #28
    66f0:	d50b      	bpl.n	670a <USB_Handler+0x232>
			host_pipe_job_busy_status = 0;
    66f2:	2200      	movs	r2, #0
    66f4:	4b3f      	ldr	r3, [pc, #252]	; (67f4 <USB_Handler+0x31c>)
    66f6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    66f8:	4b3b      	ldr	r3, [pc, #236]	; (67e8 <USB_Handler+0x310>)
    66fa:	6818      	ldr	r0, [r3, #0]
    66fc:	2308      	movs	r3, #8
    66fe:	6802      	ldr	r2, [r0, #0]
    6700:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6702:	339d      	adds	r3, #157	; 0x9d
    6704:	5cc3      	ldrb	r3, [r0, r3]
    6706:	079b      	lsls	r3, r3, #30
    6708:	d458      	bmi.n	67bc <USB_Handler+0x2e4>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    670a:	0663      	lsls	r3, r4, #25
    670c:	d508      	bpl.n	6720 <USB_Handler+0x248>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    670e:	4b36      	ldr	r3, [pc, #216]	; (67e8 <USB_Handler+0x310>)
    6710:	6818      	ldr	r0, [r3, #0]
    6712:	2340      	movs	r3, #64	; 0x40
    6714:	6802      	ldr	r2, [r0, #0]
    6716:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6718:	3365      	adds	r3, #101	; 0x65
    671a:	5cc3      	ldrb	r3, [r0, r3]
    671c:	06db      	lsls	r3, r3, #27
    671e:	d450      	bmi.n	67c2 <USB_Handler+0x2ea>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6720:	06a3      	lsls	r3, r4, #26
    6722:	d508      	bpl.n	6736 <USB_Handler+0x25e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6724:	4b30      	ldr	r3, [pc, #192]	; (67e8 <USB_Handler+0x310>)
    6726:	6818      	ldr	r0, [r3, #0]
    6728:	2320      	movs	r3, #32
    672a:	6802      	ldr	r2, [r0, #0]
    672c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    672e:	3385      	adds	r3, #133	; 0x85
    6730:	5cc3      	ldrb	r3, [r0, r3]
    6732:	071b      	lsls	r3, r3, #28
    6734:	d448      	bmi.n	67c8 <USB_Handler+0x2f0>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6736:	06e3      	lsls	r3, r4, #27
    6738:	d508      	bpl.n	674c <USB_Handler+0x274>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    673a:	4b2b      	ldr	r3, [pc, #172]	; (67e8 <USB_Handler+0x310>)
    673c:	6818      	ldr	r0, [r3, #0]
    673e:	2310      	movs	r3, #16
    6740:	6802      	ldr	r2, [r0, #0]
    6742:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6744:	3395      	adds	r3, #149	; 0x95
    6746:	5cc3      	ldrb	r3, [r0, r3]
    6748:	075b      	lsls	r3, r3, #29
    674a:	d440      	bmi.n	67ce <USB_Handler+0x2f6>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    674c:	0623      	lsls	r3, r4, #24
    674e:	d50b      	bpl.n	6768 <USB_Handler+0x290>
			host_pipe_job_busy_status = 0;
    6750:	2200      	movs	r2, #0
    6752:	4b28      	ldr	r3, [pc, #160]	; (67f4 <USB_Handler+0x31c>)
    6754:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6756:	4b24      	ldr	r3, [pc, #144]	; (67e8 <USB_Handler+0x310>)
    6758:	6818      	ldr	r0, [r3, #0]
    675a:	2380      	movs	r3, #128	; 0x80
    675c:	6802      	ldr	r2, [r0, #0]
    675e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6760:	3325      	adds	r3, #37	; 0x25
    6762:	5cc3      	ldrb	r3, [r0, r3]
    6764:	069b      	lsls	r3, r3, #26
    6766:	d435      	bmi.n	67d4 <USB_Handler+0x2fc>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6768:	05e3      	lsls	r3, r4, #23
    676a:	d50c      	bpl.n	6786 <USB_Handler+0x2ae>
			host_pipe_job_busy_status = 0;
    676c:	2200      	movs	r2, #0
    676e:	4b21      	ldr	r3, [pc, #132]	; (67f4 <USB_Handler+0x31c>)
    6770:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6772:	4b1d      	ldr	r3, [pc, #116]	; (67e8 <USB_Handler+0x310>)
    6774:	6818      	ldr	r0, [r3, #0]
    6776:	2380      	movs	r3, #128	; 0x80
    6778:	005b      	lsls	r3, r3, #1
    677a:	6802      	ldr	r2, [r0, #0]
    677c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    677e:	3b5b      	subs	r3, #91	; 0x5b
    6780:	5cc3      	ldrb	r3, [r0, r3]
    6782:	065b      	lsls	r3, r3, #25
    6784:	d429      	bmi.n	67da <USB_Handler+0x302>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6786:	05a3      	lsls	r3, r4, #22
    6788:	d50d      	bpl.n	67a6 <USB_Handler+0x2ce>
			host_pipe_job_busy_status = 0;
    678a:	2200      	movs	r2, #0
    678c:	4b19      	ldr	r3, [pc, #100]	; (67f4 <USB_Handler+0x31c>)
    678e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6790:	4b15      	ldr	r3, [pc, #84]	; (67e8 <USB_Handler+0x310>)
    6792:	6818      	ldr	r0, [r3, #0]
    6794:	2380      	movs	r3, #128	; 0x80
    6796:	009b      	lsls	r3, r3, #2
    6798:	6802      	ldr	r2, [r0, #0]
    679a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    679c:	3b5c      	subs	r3, #92	; 0x5c
    679e:	3bff      	subs	r3, #255	; 0xff
    67a0:	5cc3      	ldrb	r3, [r0, r3]
    67a2:	2b7f      	cmp	r3, #127	; 0x7f
    67a4:	d81c      	bhi.n	67e0 <USB_Handler+0x308>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    67a6:	b003      	add	sp, #12
    67a8:	bc3c      	pop	{r2, r3, r4, r5}
    67aa:	4690      	mov	r8, r2
    67ac:	4699      	mov	r9, r3
    67ae:	46a2      	mov	sl, r4
    67b0:	46ab      	mov	fp, r5
    67b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	0038      	movs	r0, r7
    67b8:	4798      	blx	r3
    67ba:	e798      	b.n	66ee <USB_Handler+0x216>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    67bc:	6883      	ldr	r3, [r0, #8]
    67be:	4798      	blx	r3
    67c0:	e7a3      	b.n	670a <USB_Handler+0x232>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    67c2:	6943      	ldr	r3, [r0, #20]
    67c4:	4798      	blx	r3
    67c6:	e7ab      	b.n	6720 <USB_Handler+0x248>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    67c8:	6903      	ldr	r3, [r0, #16]
    67ca:	4798      	blx	r3
    67cc:	e7b3      	b.n	6736 <USB_Handler+0x25e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    67ce:	68c3      	ldr	r3, [r0, #12]
    67d0:	4798      	blx	r3
    67d2:	e7bb      	b.n	674c <USB_Handler+0x274>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    67d4:	6983      	ldr	r3, [r0, #24]
    67d6:	4798      	blx	r3
    67d8:	e7c6      	b.n	6768 <USB_Handler+0x290>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    67da:	69c3      	ldr	r3, [r0, #28]
    67dc:	4798      	blx	r3
    67de:	e7d2      	b.n	6786 <USB_Handler+0x2ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    67e0:	6a03      	ldr	r3, [r0, #32]
    67e2:	4798      	blx	r3
    67e4:	e7df      	b.n	67a6 <USB_Handler+0x2ce>
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	200003a0 	.word	0x200003a0
    67ec:	0000a8cc 	.word	0x0000a8cc
    67f0:	00008f79 	.word	0x00008f79
    67f4:	200003b0 	.word	0x200003b0
    67f8:	200003b4 	.word	0x200003b4
    67fc:	200008c0 	.word	0x200008c0
    6800:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6804:	0023      	movs	r3, r4
    6806:	332e      	adds	r3, #46	; 0x2e
    6808:	009b      	lsls	r3, r3, #2
    680a:	4642      	mov	r2, r8
    680c:	6812      	ldr	r2, [r2, #0]
    680e:	589b      	ldr	r3, [r3, r2]
    6810:	499e      	ldr	r1, [pc, #632]	; (6a8c <USB_Handler+0x5b4>)
    6812:	4642      	mov	r2, r8
    6814:	6810      	ldr	r0, [r2, #0]
    6816:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6818:	3401      	adds	r4, #1
    681a:	2c07      	cmp	r4, #7
    681c:	d0c3      	beq.n	67a6 <USB_Handler+0x2ce>
			if (flags & _usb_device_irq_bits[i]) {
    681e:	0063      	lsls	r3, r4, #1
    6820:	5bdb      	ldrh	r3, [r3, r7]
    6822:	4233      	tst	r3, r6
    6824:	d003      	beq.n	682e <USB_Handler+0x356>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6826:	464a      	mov	r2, r9
    6828:	6812      	ldr	r2, [r2, #0]
    682a:	6812      	ldr	r2, [r2, #0]
    682c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    682e:	422b      	tst	r3, r5
    6830:	d0f2      	beq.n	6818 <USB_Handler+0x340>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    6832:	2c06      	cmp	r4, #6
    6834:	d1e6      	bne.n	6804 <USB_Handler+0x32c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6836:	4b96      	ldr	r3, [pc, #600]	; (6a90 <USB_Handler+0x5b8>)
    6838:	891b      	ldrh	r3, [r3, #8]
    683a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    683c:	2280      	movs	r2, #128	; 0x80
    683e:	0052      	lsls	r2, r2, #1
    6840:	4013      	ands	r3, r2
    6842:	4a92      	ldr	r2, [pc, #584]	; (6a8c <USB_Handler+0x5b4>)
    6844:	6013      	str	r3, [r2, #0]
    6846:	e7dd      	b.n	6804 <USB_Handler+0x32c>
    6848:	003c      	movs	r4, r7
    684a:	3459      	adds	r4, #89	; 0x59
    684c:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    684e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    6850:	2201      	movs	r2, #1
    6852:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6854:	325f      	adds	r2, #95	; 0x5f
    6856:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6858:	3a50      	subs	r2, #80	; 0x50
    685a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    685c:	3a0d      	subs	r2, #13
    685e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6860:	46b8      	mov	r8, r7
    6862:	002f      	movs	r7, r5
    6864:	e0b9      	b.n	69da <USB_Handler+0x502>
    6866:	002a      	movs	r2, r5
    6868:	003d      	movs	r5, r7
    686a:	4647      	mov	r7, r8
    686c:	4690      	mov	r8, r2
    686e:	015b      	lsls	r3, r3, #5
    6870:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6872:	2308      	movs	r3, #8
    6874:	33ff      	adds	r3, #255	; 0xff
    6876:	5ceb      	ldrb	r3, [r5, r3]
    6878:	065b      	lsls	r3, r3, #25
    687a:	d516      	bpl.n	68aa <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    687c:	2240      	movs	r2, #64	; 0x40
    687e:	2308      	movs	r3, #8
    6880:	33ff      	adds	r3, #255	; 0xff
    6882:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6884:	3b88      	subs	r3, #136	; 0x88
    6886:	3bff      	subs	r3, #255	; 0xff
    6888:	4642      	mov	r2, r8
    688a:	4313      	orrs	r3, r2
    688c:	4a81      	ldr	r2, [pc, #516]	; (6a94 <USB_Handler+0x5bc>)
    688e:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6890:	2360      	movs	r3, #96	; 0x60
    6892:	420b      	tst	r3, r1
    6894:	d100      	bne.n	6898 <USB_Handler+0x3c0>
    6896:	e786      	b.n	67a6 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6898:	9b01      	ldr	r3, [sp, #4]
    689a:	011b      	lsls	r3, r3, #4
    689c:	18fb      	adds	r3, r7, r3
    689e:	33e0      	adds	r3, #224	; 0xe0
    68a0:	681b      	ldr	r3, [r3, #0]
    68a2:	497c      	ldr	r1, [pc, #496]	; (6a94 <USB_Handler+0x5bc>)
    68a4:	0038      	movs	r0, r7
    68a6:	4798      	blx	r3
    68a8:	e77d      	b.n	67a6 <USB_Handler+0x2ce>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    68aa:	2308      	movs	r3, #8
    68ac:	33ff      	adds	r3, #255	; 0xff
    68ae:	5ceb      	ldrb	r3, [r5, r3]
    68b0:	069b      	lsls	r3, r3, #26
    68b2:	d5ed      	bpl.n	6890 <USB_Handler+0x3b8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    68b4:	2220      	movs	r2, #32
    68b6:	2308      	movs	r3, #8
    68b8:	33ff      	adds	r3, #255	; 0xff
    68ba:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    68bc:	4b75      	ldr	r3, [pc, #468]	; (6a94 <USB_Handler+0x5bc>)
    68be:	4642      	mov	r2, r8
    68c0:	719a      	strb	r2, [r3, #6]
    68c2:	e7e5      	b.n	6890 <USB_Handler+0x3b8>
    68c4:	003d      	movs	r5, r7
    68c6:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    68c8:	9a01      	ldr	r2, [sp, #4]
    68ca:	0013      	movs	r3, r2
    68cc:	3308      	adds	r3, #8
    68ce:	015b      	lsls	r3, r3, #5
    68d0:	18ed      	adds	r5, r5, r3
    68d2:	2310      	movs	r3, #16
    68d4:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    68d6:	18bb      	adds	r3, r7, r2
    68d8:	3361      	adds	r3, #97	; 0x61
    68da:	33ff      	adds	r3, #255	; 0xff
    68dc:	781b      	ldrb	r3, [r3, #0]
    68de:	06db      	lsls	r3, r3, #27
    68e0:	d400      	bmi.n	68e4 <USB_Handler+0x40c>
    68e2:	e760      	b.n	67a6 <USB_Handler+0x2ce>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    68e4:	0010      	movs	r0, r2
    68e6:	0152      	lsls	r2, r2, #5
    68e8:	4b69      	ldr	r3, [pc, #420]	; (6a90 <USB_Handler+0x5b8>)
    68ea:	189b      	adds	r3, r3, r2
    68ec:	685b      	ldr	r3, [r3, #4]
    68ee:	049b      	lsls	r3, r3, #18
    68f0:	0c9b      	lsrs	r3, r3, #18
    68f2:	4968      	ldr	r1, [pc, #416]	; (6a94 <USB_Handler+0x5bc>)
    68f4:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    68f6:	0103      	lsls	r3, r0, #4
    68f8:	18fb      	adds	r3, r7, r3
    68fa:	33dc      	adds	r3, #220	; 0xdc
    68fc:	681b      	ldr	r3, [r3, #0]
    68fe:	4640      	mov	r0, r8
    6900:	4798      	blx	r3
    6902:	e750      	b.n	67a6 <USB_Handler+0x2ce>
    6904:	002a      	movs	r2, r5
    6906:	003d      	movs	r5, r7
    6908:	4647      	mov	r7, r8
    690a:	4690      	mov	r8, r2
    690c:	015b      	lsls	r3, r3, #5
    690e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6910:	2308      	movs	r3, #8
    6912:	33ff      	adds	r3, #255	; 0xff
    6914:	5ceb      	ldrb	r3, [r5, r3]
    6916:	079b      	lsls	r3, r3, #30
    6918:	d51e      	bpl.n	6958 <USB_Handler+0x480>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    691a:	2202      	movs	r2, #2
    691c:	2308      	movs	r3, #8
    691e:	33ff      	adds	r3, #255	; 0xff
    6920:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6922:	485c      	ldr	r0, [pc, #368]	; (6a94 <USB_Handler+0x5bc>)
    6924:	3b88      	subs	r3, #136	; 0x88
    6926:	3bff      	subs	r3, #255	; 0xff
    6928:	4642      	mov	r2, r8
    692a:	4313      	orrs	r3, r2
    692c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	015a      	lsls	r2, r3, #5
    6932:	4b57      	ldr	r3, [pc, #348]	; (6a90 <USB_Handler+0x5b8>)
    6934:	189b      	adds	r3, r3, r2
    6936:	3310      	adds	r3, #16
    6938:	685b      	ldr	r3, [r3, #4]
    693a:	049b      	lsls	r3, r3, #18
    693c:	0c9b      	lsrs	r3, r3, #18
    693e:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6940:	078b      	lsls	r3, r1, #30
    6942:	d100      	bne.n	6946 <USB_Handler+0x46e>
    6944:	e72f      	b.n	67a6 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6946:	9b01      	ldr	r3, [sp, #4]
    6948:	330d      	adds	r3, #13
    694a:	011b      	lsls	r3, r3, #4
    694c:	18fb      	adds	r3, r7, r3
    694e:	685b      	ldr	r3, [r3, #4]
    6950:	4950      	ldr	r1, [pc, #320]	; (6a94 <USB_Handler+0x5bc>)
    6952:	0038      	movs	r0, r7
    6954:	4798      	blx	r3
    6956:	e726      	b.n	67a6 <USB_Handler+0x2ce>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6958:	2308      	movs	r3, #8
    695a:	33ff      	adds	r3, #255	; 0xff
    695c:	5ceb      	ldrb	r3, [r5, r3]
    695e:	07db      	lsls	r3, r3, #31
    6960:	d5ee      	bpl.n	6940 <USB_Handler+0x468>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6962:	2201      	movs	r2, #1
    6964:	2308      	movs	r3, #8
    6966:	33ff      	adds	r3, #255	; 0xff
    6968:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    696a:	484a      	ldr	r0, [pc, #296]	; (6a94 <USB_Handler+0x5bc>)
    696c:	4643      	mov	r3, r8
    696e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6970:	9b01      	ldr	r3, [sp, #4]
    6972:	015b      	lsls	r3, r3, #5
    6974:	4a46      	ldr	r2, [pc, #280]	; (6a90 <USB_Handler+0x5b8>)
    6976:	18d2      	adds	r2, r2, r3
    6978:	6853      	ldr	r3, [r2, #4]
    697a:	049b      	lsls	r3, r3, #18
    697c:	0c9b      	lsrs	r3, r3, #18
    697e:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6980:	6853      	ldr	r3, [r2, #4]
    6982:	011b      	lsls	r3, r3, #4
    6984:	0c9b      	lsrs	r3, r3, #18
    6986:	8083      	strh	r3, [r0, #4]
    6988:	e7da      	b.n	6940 <USB_Handler+0x468>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    698a:	2208      	movs	r2, #8
    698c:	32ff      	adds	r2, #255	; 0xff
    698e:	5c9a      	ldrb	r2, [r3, r2]
    6990:	0752      	lsls	r2, r2, #29
    6992:	d56e      	bpl.n	6a72 <USB_Handler+0x59a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6994:	2004      	movs	r0, #4
    6996:	2208      	movs	r2, #8
    6998:	32ff      	adds	r2, #255	; 0xff
    699a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    699c:	9801      	ldr	r0, [sp, #4]
    699e:	0142      	lsls	r2, r0, #5
    69a0:	4b3b      	ldr	r3, [pc, #236]	; (6a90 <USB_Handler+0x5b8>)
    69a2:	189b      	adds	r3, r3, r2
    69a4:	7a9b      	ldrb	r3, [r3, #10]
    69a6:	079b      	lsls	r3, r3, #30
    69a8:	d505      	bpl.n	69b6 <USB_Handler+0x4de>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    69aa:	4b39      	ldr	r3, [pc, #228]	; (6a90 <USB_Handler+0x5b8>)
    69ac:	189b      	adds	r3, r3, r2
    69ae:	7a9a      	ldrb	r2, [r3, #10]
    69b0:	2002      	movs	r0, #2
    69b2:	4382      	bics	r2, r0
    69b4:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    69b6:	4b37      	ldr	r3, [pc, #220]	; (6a94 <USB_Handler+0x5bc>)
    69b8:	4642      	mov	r2, r8
    69ba:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    69bc:	9b01      	ldr	r3, [sp, #4]
    69be:	3308      	adds	r3, #8
    69c0:	015b      	lsls	r3, r3, #5
    69c2:	683a      	ldr	r2, [r7, #0]
    69c4:	4694      	mov	ip, r2
    69c6:	4463      	add	r3, ip
    69c8:	79db      	ldrb	r3, [r3, #7]
    69ca:	07db      	lsls	r3, r3, #31
    69cc:	d551      	bpl.n	6a72 <USB_Handler+0x59a>
    69ce:	e6ea      	b.n	67a6 <USB_Handler+0x2ce>
    69d0:	3301      	adds	r3, #1
    69d2:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    69d4:	2b08      	cmp	r3, #8
    69d6:	d100      	bne.n	69da <USB_Handler+0x502>
    69d8:	e6e5      	b.n	67a6 <USB_Handler+0x2ce>
    69da:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    69dc:	9301      	str	r3, [sp, #4]
    69de:	0032      	movs	r2, r6
    69e0:	411a      	asrs	r2, r3
    69e2:	4661      	mov	r1, ip
    69e4:	4211      	tst	r1, r2
    69e6:	d0f3      	beq.n	69d0 <USB_Handler+0x4f8>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    69e8:	001a      	movs	r2, r3
    69ea:	3208      	adds	r2, #8
    69ec:	0152      	lsls	r2, r2, #5
    69ee:	18ba      	adds	r2, r7, r2
    69f0:	79d2      	ldrb	r2, [r2, #7]
    69f2:	b2d2      	uxtb	r2, r2
    69f4:	7a21      	ldrb	r1, [r4, #8]
    69f6:	4011      	ands	r1, r2
    69f8:	7820      	ldrb	r0, [r4, #0]
    69fa:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    69fc:	4648      	mov	r0, r9
    69fe:	4210      	tst	r0, r2
    6a00:	d000      	beq.n	6a04 <USB_Handler+0x52c>
    6a02:	e730      	b.n	6866 <USB_Handler+0x38e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6a04:	4650      	mov	r0, sl
    6a06:	4210      	tst	r0, r2
    6a08:	d000      	beq.n	6a0c <USB_Handler+0x534>
    6a0a:	e75b      	b.n	68c4 <USB_Handler+0x3ec>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6a0c:	4658      	mov	r0, fp
    6a0e:	4210      	tst	r0, r2
    6a10:	d000      	beq.n	6a14 <USB_Handler+0x53c>
    6a12:	e777      	b.n	6904 <USB_Handler+0x42c>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6a14:	200c      	movs	r0, #12
    6a16:	4210      	tst	r0, r2
    6a18:	d0da      	beq.n	69d0 <USB_Handler+0x4f8>
    6a1a:	002a      	movs	r2, r5
    6a1c:	003d      	movs	r5, r7
    6a1e:	4647      	mov	r7, r8
    6a20:	4690      	mov	r8, r2
    6a22:	015b      	lsls	r3, r3, #5
    6a24:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6a26:	2208      	movs	r2, #8
    6a28:	32ff      	adds	r2, #255	; 0xff
    6a2a:	5c9a      	ldrb	r2, [r3, r2]
    6a2c:	0712      	lsls	r2, r2, #28
    6a2e:	d5ac      	bpl.n	698a <USB_Handler+0x4b2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    6a30:	3804      	subs	r0, #4
    6a32:	2208      	movs	r2, #8
    6a34:	32ff      	adds	r2, #255	; 0xff
    6a36:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6a38:	9801      	ldr	r0, [sp, #4]
    6a3a:	0142      	lsls	r2, r0, #5
    6a3c:	4b14      	ldr	r3, [pc, #80]	; (6a90 <USB_Handler+0x5b8>)
    6a3e:	189b      	adds	r3, r3, r2
    6a40:	7e9b      	ldrb	r3, [r3, #26]
    6a42:	079b      	lsls	r3, r3, #30
    6a44:	d505      	bpl.n	6a52 <USB_Handler+0x57a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6a46:	4b12      	ldr	r3, [pc, #72]	; (6a90 <USB_Handler+0x5b8>)
    6a48:	189b      	adds	r3, r3, r2
    6a4a:	7e9a      	ldrb	r2, [r3, #26]
    6a4c:	2002      	movs	r0, #2
    6a4e:	4382      	bics	r2, r0
    6a50:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6a52:	2380      	movs	r3, #128	; 0x80
    6a54:	425b      	negs	r3, r3
    6a56:	4642      	mov	r2, r8
    6a58:	4313      	orrs	r3, r2
    6a5a:	4a0e      	ldr	r2, [pc, #56]	; (6a94 <USB_Handler+0x5bc>)
    6a5c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6a5e:	9b01      	ldr	r3, [sp, #4]
    6a60:	3308      	adds	r3, #8
    6a62:	015b      	lsls	r3, r3, #5
    6a64:	683a      	ldr	r2, [r7, #0]
    6a66:	4694      	mov	ip, r2
    6a68:	4463      	add	r3, ip
    6a6a:	79db      	ldrb	r3, [r3, #7]
    6a6c:	079b      	lsls	r3, r3, #30
    6a6e:	d500      	bpl.n	6a72 <USB_Handler+0x59a>
    6a70:	e699      	b.n	67a6 <USB_Handler+0x2ce>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6a72:	230c      	movs	r3, #12
    6a74:	420b      	tst	r3, r1
    6a76:	d100      	bne.n	6a7a <USB_Handler+0x5a2>
    6a78:	e695      	b.n	67a6 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6a7a:	9b01      	ldr	r3, [sp, #4]
    6a7c:	011b      	lsls	r3, r3, #4
    6a7e:	18fb      	adds	r3, r7, r3
    6a80:	33d8      	adds	r3, #216	; 0xd8
    6a82:	681b      	ldr	r3, [r3, #0]
    6a84:	4903      	ldr	r1, [pc, #12]	; (6a94 <USB_Handler+0x5bc>)
    6a86:	0038      	movs	r0, r7
    6a88:	4798      	blx	r3
    6a8a:	e68c      	b.n	67a6 <USB_Handler+0x2ce>
    6a8c:	200003a4 	.word	0x200003a4
    6a90:	200008c0 	.word	0x200008c0
    6a94:	200003a8 	.word	0x200003a8

00006a98 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6a98:	2200      	movs	r2, #0
    6a9a:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6a9c:	2301      	movs	r3, #1
    6a9e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6aa0:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    6aa2:	70c3      	strb	r3, [r0, #3]
}
    6aa4:	4770      	bx	lr
	...

00006aa8 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aaa:	46ce      	mov	lr, r9
    6aac:	4647      	mov	r7, r8
    6aae:	b580      	push	{r7, lr}
    6ab0:	b083      	sub	sp, #12
    6ab2:	0004      	movs	r4, r0
    6ab4:	000d      	movs	r5, r1
    6ab6:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6ab8:	2300      	movs	r3, #0
    6aba:	4a6e      	ldr	r2, [pc, #440]	; (6c74 <usb_init+0x1cc>)
    6abc:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    6abe:	4a6e      	ldr	r2, [pc, #440]	; (6c78 <usb_init+0x1d0>)
    6ac0:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6ac2:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    6ac4:	496d      	ldr	r1, [pc, #436]	; (6c7c <usb_init+0x1d4>)
    6ac6:	69ca      	ldr	r2, [r1, #28]
    6ac8:	2020      	movs	r0, #32
    6aca:	4302      	orrs	r2, r0
    6acc:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6ace:	af01      	add	r7, sp, #4
    6ad0:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ad2:	2201      	movs	r2, #1
    6ad4:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    6ad6:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6ad8:	3306      	adds	r3, #6
    6ada:	4699      	mov	r9, r3
    6adc:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6ade:	0039      	movs	r1, r7
    6ae0:	3808      	subs	r0, #8
    6ae2:	4b67      	ldr	r3, [pc, #412]	; (6c80 <usb_init+0x1d8>)
    6ae4:	4698      	mov	r8, r3
    6ae6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6ae8:	464b      	mov	r3, r9
    6aea:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6aec:	0039      	movs	r1, r7
    6aee:	2019      	movs	r0, #25
    6af0:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    6af2:	78b3      	ldrb	r3, [r6, #2]
    6af4:	466a      	mov	r2, sp
    6af6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6af8:	4669      	mov	r1, sp
    6afa:	2006      	movs	r0, #6
    6afc:	4b61      	ldr	r3, [pc, #388]	; (6c84 <usb_init+0x1dc>)
    6afe:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    6b00:	2006      	movs	r0, #6
    6b02:	4b61      	ldr	r3, [pc, #388]	; (6c88 <usb_init+0x1e0>)
    6b04:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6b06:	782b      	ldrb	r3, [r5, #0]
    6b08:	2201      	movs	r2, #1
    6b0a:	4313      	orrs	r3, r2
    6b0c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    6b0e:	78ab      	ldrb	r3, [r5, #2]
    6b10:	07db      	lsls	r3, r3, #31
    6b12:	d4fc      	bmi.n	6b0e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6b14:	4a5d      	ldr	r2, [pc, #372]	; (6c8c <usb_init+0x1e4>)
    6b16:	78d3      	ldrb	r3, [r2, #3]
    6b18:	2103      	movs	r1, #3
    6b1a:	438b      	bics	r3, r1
    6b1c:	2102      	movs	r1, #2
    6b1e:	430b      	orrs	r3, r1
    6b20:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6b22:	78d3      	ldrb	r3, [r2, #3]
    6b24:	210c      	movs	r1, #12
    6b26:	438b      	bics	r3, r1
    6b28:	2108      	movs	r1, #8
    6b2a:	430b      	orrs	r3, r1
    6b2c:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6b2e:	4b58      	ldr	r3, [pc, #352]	; (6c90 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6b30:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6b32:	039b      	lsls	r3, r3, #14
    6b34:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6b36:	2b1f      	cmp	r3, #31
    6b38:	d100      	bne.n	6b3c <usb_init+0x94>
    6b3a:	e08f      	b.n	6c5c <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6b3c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6b3e:	019b      	lsls	r3, r3, #6
    6b40:	4954      	ldr	r1, [pc, #336]	; (6c94 <usb_init+0x1ec>)
    6b42:	400a      	ands	r2, r1
    6b44:	4313      	orrs	r3, r2
    6b46:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6b48:	4b51      	ldr	r3, [pc, #324]	; (6c90 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6b4a:	681b      	ldr	r3, [r3, #0]
    6b4c:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6b4e:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6b50:	2b1f      	cmp	r3, #31
    6b52:	d100      	bne.n	6b56 <usb_init+0xae>
    6b54:	e084      	b.n	6c60 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6b56:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6b58:	211f      	movs	r1, #31
    6b5a:	438a      	bics	r2, r1
    6b5c:	4313      	orrs	r3, r2
    6b5e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6b60:	4b4b      	ldr	r3, [pc, #300]	; (6c90 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    6b62:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6b64:	019b      	lsls	r3, r3, #6
    6b66:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6b68:	2b07      	cmp	r3, #7
    6b6a:	d100      	bne.n	6b6e <usb_init+0xc6>
    6b6c:	e07a      	b.n	6c64 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6b6e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6b70:	031b      	lsls	r3, r3, #12
    6b72:	4949      	ldr	r1, [pc, #292]	; (6c98 <usb_init+0x1f0>)
    6b74:	400a      	ands	r2, r1
    6b76:	4313      	orrs	r3, r2
    6b78:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6b7a:	7832      	ldrb	r2, [r6, #0]
    6b7c:	7829      	ldrb	r1, [r5, #0]
    6b7e:	01d2      	lsls	r2, r2, #7
    6b80:	237f      	movs	r3, #127	; 0x7f
    6b82:	400b      	ands	r3, r1
    6b84:	4313      	orrs	r3, r2
    6b86:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6b88:	7871      	ldrb	r1, [r6, #1]
    6b8a:	782b      	ldrb	r3, [r5, #0]
    6b8c:	2201      	movs	r2, #1
    6b8e:	400a      	ands	r2, r1
    6b90:	0092      	lsls	r2, r2, #2
    6b92:	2104      	movs	r1, #4
    6b94:	438b      	bics	r3, r1
    6b96:	4313      	orrs	r3, r2
    6b98:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    6b9a:	4b40      	ldr	r3, [pc, #256]	; (6c9c <usb_init+0x1f4>)
    6b9c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    6b9e:	78f3      	ldrb	r3, [r6, #3]
    6ba0:	2b01      	cmp	r3, #1
    6ba2:	d061      	beq.n	6c68 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d106      	bne.n	6bb6 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6ba8:	6822      	ldr	r2, [r4, #0]
    6baa:	8913      	ldrh	r3, [r2, #8]
    6bac:	210c      	movs	r1, #12
    6bae:	438b      	bics	r3, r1
    6bb0:	2104      	movs	r1, #4
    6bb2:	430b      	orrs	r3, r1
    6bb4:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    6bb6:	2280      	movs	r2, #128	; 0x80
    6bb8:	0052      	lsls	r2, r2, #1
    6bba:	2100      	movs	r1, #0
    6bbc:	4837      	ldr	r0, [pc, #220]	; (6c9c <usb_init+0x1f4>)
    6bbe:	4b38      	ldr	r3, [pc, #224]	; (6ca0 <usb_init+0x1f8>)
    6bc0:	4798      	blx	r3
    6bc2:	1d23      	adds	r3, r4, #4
    6bc4:	0021      	movs	r1, r4
    6bc6:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    6bc8:	2200      	movs	r2, #0
    6bca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    6bcc:	428b      	cmp	r3, r1
    6bce:	d1fc      	bne.n	6bca <usb_init+0x122>
    6bd0:	0021      	movs	r1, r4
    6bd2:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    6bd4:	2200      	movs	r2, #0
    6bd6:	601a      	str	r2, [r3, #0]
    6bd8:	605a      	str	r2, [r3, #4]
    6bda:	609a      	str	r2, [r3, #8]
    6bdc:	60da      	str	r2, [r3, #12]
    6bde:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6be0:	428b      	cmp	r3, r1
    6be2:	d1f8      	bne.n	6bd6 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    6be4:	2300      	movs	r3, #0
    6be6:	22a4      	movs	r2, #164	; 0xa4
    6be8:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    6bea:	3201      	adds	r2, #1
    6bec:	54a3      	strb	r3, [r4, r2]
    6bee:	0023      	movs	r3, r4
    6bf0:	33a6      	adds	r3, #166	; 0xa6
    6bf2:	0021      	movs	r1, r4
    6bf4:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    6bf6:	2200      	movs	r2, #0
    6bf8:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    6bfa:	721a      	strb	r2, [r3, #8]
    6bfc:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6bfe:	4299      	cmp	r1, r3
    6c00:	d1fa      	bne.n	6bf8 <usb_init+0x150>
    6c02:	0023      	movs	r3, r4
    6c04:	33b8      	adds	r3, #184	; 0xb8
    6c06:	0021      	movs	r1, r4
    6c08:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    6c0a:	2200      	movs	r2, #0
    6c0c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    6c0e:	428b      	cmp	r3, r1
    6c10:	d1fc      	bne.n	6c0c <usb_init+0x164>
    6c12:	0021      	movs	r1, r4
    6c14:	3155      	adds	r1, #85	; 0x55
    6c16:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    6c18:	2200      	movs	r2, #0
    6c1a:	601a      	str	r2, [r3, #0]
    6c1c:	605a      	str	r2, [r3, #4]
    6c1e:	609a      	str	r2, [r3, #8]
    6c20:	60da      	str	r2, [r3, #12]
    6c22:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    6c24:	428b      	cmp	r3, r1
    6c26:	d1f8      	bne.n	6c1a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    6c28:	2300      	movs	r3, #0
    6c2a:	22aa      	movs	r2, #170	; 0xaa
    6c2c:	0052      	lsls	r2, r2, #1
    6c2e:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    6c30:	3202      	adds	r2, #2
    6c32:	52a3      	strh	r3, [r4, r2]
    6c34:	0023      	movs	r3, r4
    6c36:	3359      	adds	r3, #89	; 0x59
    6c38:	33ff      	adds	r3, #255	; 0xff
    6c3a:	3461      	adds	r4, #97	; 0x61
    6c3c:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    6c3e:	2200      	movs	r2, #0
    6c40:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    6c42:	721a      	strb	r2, [r3, #8]
    6c44:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    6c46:	42a3      	cmp	r3, r4
    6c48:	d1fa      	bne.n	6c40 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6c4a:	2280      	movs	r2, #128	; 0x80
    6c4c:	4b15      	ldr	r3, [pc, #84]	; (6ca4 <usb_init+0x1fc>)
    6c4e:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    6c50:	2000      	movs	r0, #0
    6c52:	b003      	add	sp, #12
    6c54:	bc0c      	pop	{r2, r3}
    6c56:	4690      	mov	r8, r2
    6c58:	4699      	mov	r9, r3
    6c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    6c5c:	3b1a      	subs	r3, #26
    6c5e:	e76d      	b.n	6b3c <usb_init+0x94>
		pad_transp = 29;
    6c60:	3b02      	subs	r3, #2
    6c62:	e778      	b.n	6b56 <usb_init+0xae>
		pad_trim = 3;
    6c64:	3b04      	subs	r3, #4
    6c66:	e782      	b.n	6b6e <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    6c68:	6822      	ldr	r2, [r4, #0]
    6c6a:	8913      	ldrh	r3, [r2, #8]
    6c6c:	3108      	adds	r1, #8
    6c6e:	438b      	bics	r3, r1
    6c70:	8113      	strh	r3, [r2, #8]
    6c72:	e7a0      	b.n	6bb6 <usb_init+0x10e>
    6c74:	200003b0 	.word	0x200003b0
    6c78:	200003a0 	.word	0x200003a0
    6c7c:	40000400 	.word	0x40000400
    6c80:	000046a1 	.word	0x000046a1
    6c84:	000045a9 	.word	0x000045a9
    6c88:	0000451d 	.word	0x0000451d
    6c8c:	41005000 	.word	0x41005000
    6c90:	00806024 	.word	0x00806024
    6c94:	fffff83f 	.word	0xfffff83f
    6c98:	ffff8fff 	.word	0xffff8fff
    6c9c:	200008c0 	.word	0x200008c0
    6ca0:	0000a4ef 	.word	0x0000a4ef
    6ca4:	e000e100 	.word	0xe000e100

00006ca8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6ca8:	e7fe      	b.n	6ca8 <Dummy_Handler>
	...

00006cac <Reset_Handler>:
{
    6cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6cae:	4a2a      	ldr	r2, [pc, #168]	; (6d58 <Reset_Handler+0xac>)
    6cb0:	4b2a      	ldr	r3, [pc, #168]	; (6d5c <Reset_Handler+0xb0>)
    6cb2:	429a      	cmp	r2, r3
    6cb4:	d011      	beq.n	6cda <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6cb6:	001a      	movs	r2, r3
    6cb8:	4b29      	ldr	r3, [pc, #164]	; (6d60 <Reset_Handler+0xb4>)
    6cba:	429a      	cmp	r2, r3
    6cbc:	d20d      	bcs.n	6cda <Reset_Handler+0x2e>
    6cbe:	4a29      	ldr	r2, [pc, #164]	; (6d64 <Reset_Handler+0xb8>)
    6cc0:	3303      	adds	r3, #3
    6cc2:	1a9b      	subs	r3, r3, r2
    6cc4:	089b      	lsrs	r3, r3, #2
    6cc6:	3301      	adds	r3, #1
    6cc8:	009b      	lsls	r3, r3, #2
    6cca:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6ccc:	4823      	ldr	r0, [pc, #140]	; (6d5c <Reset_Handler+0xb0>)
    6cce:	4922      	ldr	r1, [pc, #136]	; (6d58 <Reset_Handler+0xac>)
    6cd0:	588c      	ldr	r4, [r1, r2]
    6cd2:	5084      	str	r4, [r0, r2]
    6cd4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6cd6:	429a      	cmp	r2, r3
    6cd8:	d1fa      	bne.n	6cd0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6cda:	4a23      	ldr	r2, [pc, #140]	; (6d68 <Reset_Handler+0xbc>)
    6cdc:	4b23      	ldr	r3, [pc, #140]	; (6d6c <Reset_Handler+0xc0>)
    6cde:	429a      	cmp	r2, r3
    6ce0:	d20a      	bcs.n	6cf8 <Reset_Handler+0x4c>
    6ce2:	43d3      	mvns	r3, r2
    6ce4:	4921      	ldr	r1, [pc, #132]	; (6d6c <Reset_Handler+0xc0>)
    6ce6:	185b      	adds	r3, r3, r1
    6ce8:	2103      	movs	r1, #3
    6cea:	438b      	bics	r3, r1
    6cec:	3304      	adds	r3, #4
    6cee:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6cf0:	2100      	movs	r1, #0
    6cf2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6cf4:	4293      	cmp	r3, r2
    6cf6:	d1fc      	bne.n	6cf2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6cf8:	4a1d      	ldr	r2, [pc, #116]	; (6d70 <Reset_Handler+0xc4>)
    6cfa:	21ff      	movs	r1, #255	; 0xff
    6cfc:	4b1d      	ldr	r3, [pc, #116]	; (6d74 <Reset_Handler+0xc8>)
    6cfe:	438b      	bics	r3, r1
    6d00:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6d02:	39fd      	subs	r1, #253	; 0xfd
    6d04:	2390      	movs	r3, #144	; 0x90
    6d06:	005b      	lsls	r3, r3, #1
    6d08:	4a1b      	ldr	r2, [pc, #108]	; (6d78 <Reset_Handler+0xcc>)
    6d0a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6d0c:	4a1b      	ldr	r2, [pc, #108]	; (6d7c <Reset_Handler+0xd0>)
    6d0e:	78d3      	ldrb	r3, [r2, #3]
    6d10:	2503      	movs	r5, #3
    6d12:	43ab      	bics	r3, r5
    6d14:	2402      	movs	r4, #2
    6d16:	4323      	orrs	r3, r4
    6d18:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6d1a:	78d3      	ldrb	r3, [r2, #3]
    6d1c:	270c      	movs	r7, #12
    6d1e:	43bb      	bics	r3, r7
    6d20:	2608      	movs	r6, #8
    6d22:	4333      	orrs	r3, r6
    6d24:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6d26:	4b16      	ldr	r3, [pc, #88]	; (6d80 <Reset_Handler+0xd4>)
    6d28:	7b98      	ldrb	r0, [r3, #14]
    6d2a:	2230      	movs	r2, #48	; 0x30
    6d2c:	4390      	bics	r0, r2
    6d2e:	2220      	movs	r2, #32
    6d30:	4310      	orrs	r0, r2
    6d32:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6d34:	7b99      	ldrb	r1, [r3, #14]
    6d36:	43b9      	bics	r1, r7
    6d38:	4331      	orrs	r1, r6
    6d3a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6d3c:	7b9a      	ldrb	r2, [r3, #14]
    6d3e:	43aa      	bics	r2, r5
    6d40:	4322      	orrs	r2, r4
    6d42:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6d44:	4a0f      	ldr	r2, [pc, #60]	; (6d84 <Reset_Handler+0xd8>)
    6d46:	6853      	ldr	r3, [r2, #4]
    6d48:	2180      	movs	r1, #128	; 0x80
    6d4a:	430b      	orrs	r3, r1
    6d4c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6d4e:	4b0e      	ldr	r3, [pc, #56]	; (6d88 <Reset_Handler+0xdc>)
    6d50:	4798      	blx	r3
        main();
    6d52:	4b0e      	ldr	r3, [pc, #56]	; (6d8c <Reset_Handler+0xe0>)
    6d54:	4798      	blx	r3
    6d56:	e7fe      	b.n	6d56 <Reset_Handler+0xaa>
    6d58:	0000ac70 	.word	0x0000ac70
    6d5c:	20000000 	.word	0x20000000
    6d60:	20000188 	.word	0x20000188
    6d64:	20000004 	.word	0x20000004
    6d68:	20000190 	.word	0x20000190
    6d6c:	20000af4 	.word	0x20000af4
    6d70:	e000ed00 	.word	0xe000ed00
    6d74:	00000000 	.word	0x00000000
    6d78:	41007000 	.word	0x41007000
    6d7c:	41005000 	.word	0x41005000
    6d80:	41004800 	.word	0x41004800
    6d84:	41004000 	.word	0x41004000
    6d88:	0000a481 	.word	0x0000a481
    6d8c:	000076f5 	.word	0x000076f5

00006d90 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6d90:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6d92:	4a06      	ldr	r2, [pc, #24]	; (6dac <_sbrk+0x1c>)
    6d94:	6812      	ldr	r2, [r2, #0]
    6d96:	2a00      	cmp	r2, #0
    6d98:	d004      	beq.n	6da4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6d9a:	4a04      	ldr	r2, [pc, #16]	; (6dac <_sbrk+0x1c>)
    6d9c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6d9e:	18c3      	adds	r3, r0, r3
    6da0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6da2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6da4:	4902      	ldr	r1, [pc, #8]	; (6db0 <_sbrk+0x20>)
    6da6:	4a01      	ldr	r2, [pc, #4]	; (6dac <_sbrk+0x1c>)
    6da8:	6011      	str	r1, [r2, #0]
    6daa:	e7f6      	b.n	6d9a <_sbrk+0xa>
    6dac:	200003bc 	.word	0x200003bc
    6db0:	20002af8 	.word	0x20002af8

00006db4 <configure_adc>:

float VADCR;	   /* Room Temperature ADC voltage - VADCR */
float VADCH;	   /* Hot Temperature ADC voltage - VADCH */

void configure_adc()
{
    6db4:	b510      	push	{r4, lr}
    6db6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    6db8:	4668      	mov	r0, sp
    6dba:	4b14      	ldr	r3, [pc, #80]	; (6e0c <configure_adc+0x58>)
    6dbc:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference			= ADC_REFERENCE_INTVCC0;
    6dbe:	2301      	movs	r3, #1
    6dc0:	466a      	mov	r2, sp
    6dc2:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV8;
    6dc4:	2280      	movs	r2, #128	; 0x80
    6dc6:	0052      	lsls	r2, r2, #1
    6dc8:	4669      	mov	r1, sp
    6dca:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= LEFT_LIGHT;
    6dcc:	3af5      	subs	r2, #245	; 0xf5
    6dce:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    6dd0:	22c0      	movs	r2, #192	; 0xc0
    6dd2:	0152      	lsls	r2, r2, #5
    6dd4:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    6dd6:	2230      	movs	r2, #48	; 0x30
    6dd8:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    6dda:	466a      	mov	r2, sp
    6ddc:	748b      	strb	r3, [r1, #18]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    6dde:	4c0c      	ldr	r4, [pc, #48]	; (6e10 <configure_adc+0x5c>)
    6de0:	490c      	ldr	r1, [pc, #48]	; (6e14 <configure_adc+0x60>)
    6de2:	0020      	movs	r0, r4
    6de4:	4b0c      	ldr	r3, [pc, #48]	; (6e18 <configure_adc+0x64>)
    6de6:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6de8:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6dea:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6dec:	b25b      	sxtb	r3, r3
    6dee:	2b00      	cmp	r3, #0
    6df0:	dbfb      	blt.n	6dea <configure_adc+0x36>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6df2:	7813      	ldrb	r3, [r2, #0]
    6df4:	2102      	movs	r1, #2
    6df6:	430b      	orrs	r3, r1
    6df8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6dfa:	4b05      	ldr	r3, [pc, #20]	; (6e10 <configure_adc+0x5c>)
    6dfc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6dfe:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6e00:	b25b      	sxtb	r3, r3
    6e02:	2b00      	cmp	r3, #0
    6e04:	dbfb      	blt.n	6dfe <configure_adc+0x4a>
	adc_enable(&adc_instance);
}
    6e06:	b00c      	add	sp, #48	; 0x30
    6e08:	bd10      	pop	{r4, pc}
    6e0a:	46c0      	nop			; (mov r8, r8)
    6e0c:	00003009 	.word	0x00003009
    6e10:	200009e4 	.word	0x200009e4
    6e14:	42004000 	.word	0x42004000
    6e18:	00003051 	.word	0x00003051

00006e1c <adc_start_read_result>:


uint8_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    6e1c:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6e1e:	4b2a      	ldr	r3, [pc, #168]	; (6ec8 <adc_start_read_result+0xac>)
    6e20:	6819      	ldr	r1, [r3, #0]
    6e22:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    6e24:	b25b      	sxtb	r3, r3
    6e26:	2b00      	cmp	r3, #0
    6e28:	dbfb      	blt.n	6e22 <adc_start_read_result+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    6e2a:	690b      	ldr	r3, [r1, #16]
    6e2c:	221f      	movs	r2, #31
    6e2e:	4393      	bics	r3, r2
    6e30:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    6e32:	6108      	str	r0, [r1, #16]
    6e34:	7e4b      	ldrb	r3, [r1, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    6e36:	b25b      	sxtb	r3, r3
    6e38:	2b00      	cmp	r3, #0
    6e3a:	dbfb      	blt.n	6e34 <adc_start_read_result+0x18>
    6e3c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6e3e:	b25b      	sxtb	r3, r3
    6e40:	2b00      	cmp	r3, #0
    6e42:	dbfb      	blt.n	6e3c <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6e44:	7b0b      	ldrb	r3, [r1, #12]
    6e46:	2202      	movs	r2, #2
    6e48:	4313      	orrs	r3, r2
    6e4a:	730b      	strb	r3, [r1, #12]
    6e4c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6e4e:	b25b      	sxtb	r3, r3
    6e50:	2b00      	cmp	r3, #0
    6e52:	dbfb      	blt.n	6e4c <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6e54:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    6e56:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    6e58:	2402      	movs	r4, #2
    6e5a:	e001      	b.n	6e60 <adc_start_read_result+0x44>
	uint16_t adc_result = 0;
	//configure_adc(analogPin);
	adc_set_positive_input(&adc_instance, analogPin);
	
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    6e5c:	4210      	tst	r0, r2
    6e5e:	d10a      	bne.n	6e76 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6e60:	7e0b      	ldrb	r3, [r1, #24]
    6e62:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6e64:	0002      	movs	r2, r0
    6e66:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6e68:	421d      	tst	r5, r3
    6e6a:	d000      	beq.n	6e6e <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    6e6c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6e6e:	421c      	tst	r4, r3
    6e70:	d0f4      	beq.n	6e5c <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    6e72:	432a      	orrs	r2, r5
    6e74:	e7f2      	b.n	6e5c <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6e76:	7e0a      	ldrb	r2, [r1, #24]
    6e78:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6e7a:	2301      	movs	r3, #1
    6e7c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6e7e:	0750      	lsls	r0, r2, #29
    6e80:	d501      	bpl.n	6e86 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    6e82:	2002      	movs	r0, #2
    6e84:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6e86:	0792      	lsls	r2, r2, #30
    6e88:	d501      	bpl.n	6e8e <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    6e8a:	2204      	movs	r2, #4
    6e8c:	4313      	orrs	r3, r2
	uint16_t adc_result = 0;
    6e8e:	2000      	movs	r0, #0
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6e90:	07db      	lsls	r3, r3, #31
    6e92:	d401      	bmi.n	6e98 <adc_start_read_result+0x7c>
	
	adc_read(&adc_instance, &adc_result);
	
	return adc_result;
    6e94:	b2c0      	uxtb	r0, r0
}
    6e96:	bd30      	pop	{r4, r5, pc}
    6e98:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6e9a:	b25b      	sxtb	r3, r3
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	dbfb      	blt.n	6e98 <adc_start_read_result+0x7c>
	*result = adc_module->RESULT.reg;
    6ea0:	8b48      	ldrh	r0, [r1, #26]
    6ea2:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    6ea4:	2301      	movs	r3, #1
    6ea6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6ea8:	7e0a      	ldrb	r2, [r1, #24]
    6eaa:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6eac:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6eae:	0754      	lsls	r4, r2, #29
    6eb0:	d501      	bpl.n	6eb6 <adc_start_read_result+0x9a>
		status_flags |= ADC_STATUS_WINDOW;
    6eb2:	2402      	movs	r4, #2
    6eb4:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6eb6:	0792      	lsls	r2, r2, #30
    6eb8:	d501      	bpl.n	6ebe <adc_start_read_result+0xa2>
		status_flags |= ADC_STATUS_OVERRUN;
    6eba:	2204      	movs	r2, #4
    6ebc:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6ebe:	075b      	lsls	r3, r3, #29
    6ec0:	d5e8      	bpl.n	6e94 <adc_start_read_result+0x78>
	adc_module->INTFLAG.reg = int_flags;
    6ec2:	2302      	movs	r3, #2
    6ec4:	760b      	strb	r3, [r1, #24]
    6ec6:	e7e5      	b.n	6e94 <adc_start_read_result+0x78>
    6ec8:	200009e4 	.word	0x200009e4

00006ecc <config_test_pins>:

#define  ALL_SET_LEN 14
/*! \brief Main function. Execution starts here.*/

void config_test_pins()
{
    6ecc:	b500      	push	{lr}
    6ece:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6ed0:	a901      	add	r1, sp, #4
    6ed2:	2301      	movs	r3, #1
    6ed4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    6ed6:	2200      	movs	r2, #0
    6ed8:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    6eda:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA08, &config_port_pin);
    6edc:	2008      	movs	r0, #8
    6ede:	4b02      	ldr	r3, [pc, #8]	; (6ee8 <config_test_pins+0x1c>)
    6ee0:	4798      	blx	r3
}
    6ee2:	b003      	add	sp, #12
    6ee4:	bd00      	pop	{pc}
    6ee6:	46c0      	nop			; (mov r8, r8)
    6ee8:	00003731 	.word	0x00003731

00006eec <serial_receive_bytes>:

void serial_receive_bytes(uint8_t count_receive ,uint8_t* receive_data)
{
    6eec:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    6eee:	4d10      	ldr	r5, [pc, #64]	; (6f30 <serial_receive_bytes+0x44>)
    6ef0:	4c10      	ldr	r4, [pc, #64]	; (6f34 <serial_receive_bytes+0x48>)
	{
		if(serial_timeout)
    6ef2:	4e11      	ldr	r6, [pc, #68]	; (6f38 <serial_receive_bytes+0x4c>)
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    6ef4:	782b      	ldrb	r3, [r5, #0]
    6ef6:	7822      	ldrb	r2, [r4, #0]
    6ef8:	1a9b      	subs	r3, r3, r2
    6efa:	4283      	cmp	r3, r0
    6efc:	da06      	bge.n	6f0c <serial_receive_bytes+0x20>
		if(serial_timeout)
    6efe:	7833      	ldrb	r3, [r6, #0]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d0f7      	beq.n	6ef4 <serial_receive_bytes+0x8>
		{
			serial_timeout = false;
    6f04:	2200      	movs	r2, #0
    6f06:	4b0c      	ldr	r3, [pc, #48]	; (6f38 <serial_receive_bytes+0x4c>)
    6f08:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=count_receive;i++)
	{
		receive_data[i] = ring_buffer[tail_ring_buffer];
		tail_ring_buffer++;
	}
}
    6f0a:	bd70      	pop	{r4, r5, r6, pc}
	for(i=1;i<=count_receive;i++)
    6f0c:	2800      	cmp	r0, #0
    6f0e:	d0fc      	beq.n	6f0a <serial_receive_bytes+0x1e>
    6f10:	2301      	movs	r3, #1
		receive_data[i] = ring_buffer[tail_ring_buffer];
    6f12:	4c08      	ldr	r4, [pc, #32]	; (6f34 <serial_receive_bytes+0x48>)
    6f14:	4d09      	ldr	r5, [pc, #36]	; (6f3c <serial_receive_bytes+0x50>)
    6f16:	7822      	ldrb	r2, [r4, #0]
    6f18:	b2d2      	uxtb	r2, r2
    6f1a:	5caa      	ldrb	r2, [r5, r2]
    6f1c:	54ca      	strb	r2, [r1, r3]
		tail_ring_buffer++;
    6f1e:	7822      	ldrb	r2, [r4, #0]
    6f20:	3201      	adds	r2, #1
    6f22:	b2d2      	uxtb	r2, r2
    6f24:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=count_receive;i++)
    6f26:	3301      	adds	r3, #1
    6f28:	b2db      	uxtb	r3, r3
    6f2a:	4298      	cmp	r0, r3
    6f2c:	d2f3      	bcs.n	6f16 <serial_receive_bytes+0x2a>
    6f2e:	e7ec      	b.n	6f0a <serial_receive_bytes+0x1e>
    6f30:	200003d2 	.word	0x200003d2
    6f34:	200003ec 	.word	0x200003ec
    6f38:	200003ea 	.word	0x200003ea
    6f3c:	200009f0 	.word	0x200009f0

00006f40 <check>:




void check()
{
    6f40:	b570      	push	{r4, r5, r6, lr}
    6f42:	b08c      	sub	sp, #48	; 0x30
	volatile uint8_t received_value[MAX_REC_BYTE];
	volatile static uint8_t prev_rec_value[MAX_REC_BYTE];
	volatile uint8_t transmit_value[MAX_TRANSMIT_VALUE];
	volatile static uint8_t echo_prev[2];
	volatile static uint8_t echo_current[2];
	volatile int temp=0;
    6f44:	2300      	movs	r3, #0
    6f46:	9301      	str	r3, [sp, #4]
	static volatile bool broadcast= false;

	volatile static char* echo_distance;
	//usart_read_job(&usart_instance ,)
	uint8_t i =0;
	if(head_ring_buffer != tail_ring_buffer)
    6f48:	4bcc      	ldr	r3, [pc, #816]	; (727c <check+0x33c>)
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	4acc      	ldr	r2, [pc, #816]	; (7280 <check+0x340>)
    6f4e:	7812      	ldrb	r2, [r2, #0]
    6f50:	b2db      	uxtb	r3, r3
    6f52:	4293      	cmp	r3, r2
    6f54:	d100      	bne.n	6f58 <check+0x18>
    6f56:	e124      	b.n	71a2 <check+0x262>
	{
		received_value[0] = ring_buffer[tail_ring_buffer];
    6f58:	4ac9      	ldr	r2, [pc, #804]	; (7280 <check+0x340>)
    6f5a:	7813      	ldrb	r3, [r2, #0]
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	49c9      	ldr	r1, [pc, #804]	; (7284 <check+0x344>)
    6f60:	5ccb      	ldrb	r3, [r1, r3]
    6f62:	b2db      	uxtb	r3, r3
    6f64:	a907      	add	r1, sp, #28
    6f66:	700b      	strb	r3, [r1, #0]
		tail_ring_buffer++;
    6f68:	7813      	ldrb	r3, [r2, #0]
    6f6a:	3301      	adds	r3, #1
    6f6c:	b2db      	uxtb	r3, r3
    6f6e:	7013      	strb	r3, [r2, #0]
		switch(received_value[0])
    6f70:	780b      	ldrb	r3, [r1, #0]
    6f72:	3b41      	subs	r3, #65	; 0x41
    6f74:	b2da      	uxtb	r2, r3
    6f76:	2a37      	cmp	r2, #55	; 0x37
    6f78:	d900      	bls.n	6f7c <check+0x3c>
    6f7a:	e36a      	b.n	7652 <check+0x712>
    6f7c:	0093      	lsls	r3, r2, #2
    6f7e:	4ac2      	ldr	r2, [pc, #776]	; (7288 <check+0x348>)
    6f80:	58d3      	ldr	r3, [r2, r3]
    6f82:	469f      	mov	pc, r3
		{
			//Set all the actuator values
			case 'u':
				serial_timeout_count = 0;
    6f84:	2300      	movs	r3, #0
    6f86:	4ac1      	ldr	r2, [pc, #772]	; (728c <check+0x34c>)
    6f88:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    6f8a:	4cc1      	ldr	r4, [pc, #772]	; (7290 <check+0x350>)
    6f8c:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ALL_SET_LEN,received_value);
    6f8e:	a907      	add	r1, sp, #28
    6f90:	200e      	movs	r0, #14
    6f92:	4bc0      	ldr	r3, [pc, #768]	; (7294 <check+0x354>)
    6f94:	4798      	blx	r3
				if(serial_timeout == false)
    6f96:	7823      	ldrb	r3, [r4, #0]
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d000      	beq.n	6f9e <check+0x5e>
    6f9c:	e0ed      	b.n	717a <check+0x23a>
				{
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
    6f9e:	ab07      	add	r3, sp, #28
    6fa0:	785b      	ldrb	r3, [r3, #1]
    6fa2:	4abd      	ldr	r2, [pc, #756]	; (7298 <check+0x358>)
    6fa4:	7852      	ldrb	r2, [r2, #1]
    6fa6:	b2db      	uxtb	r3, r3
    6fa8:	4293      	cmp	r3, r2
    6faa:	d04e      	beq.n	704a <check+0x10a>
					{
						set_led_left_new(received_value[1], received_value[2], received_value[3]);
    6fac:	ac07      	add	r4, sp, #28
    6fae:	7860      	ldrb	r0, [r4, #1]
    6fb0:	b2c0      	uxtb	r0, r0
    6fb2:	78a1      	ldrb	r1, [r4, #2]
    6fb4:	b2c9      	uxtb	r1, r1
    6fb6:	78e2      	ldrb	r2, [r4, #3]
    6fb8:	b2d2      	uxtb	r2, r2
    6fba:	4bb8      	ldr	r3, [pc, #736]	; (729c <check+0x35c>)
    6fbc:	4798      	blx	r3
						set_led_right_new(received_value[4], received_value[5], received_value[6]);
    6fbe:	7920      	ldrb	r0, [r4, #4]
    6fc0:	b2c0      	uxtb	r0, r0
    6fc2:	7961      	ldrb	r1, [r4, #5]
    6fc4:	b2c9      	uxtb	r1, r1
    6fc6:	79a2      	ldrb	r2, [r4, #6]
    6fc8:	b2d2      	uxtb	r2, r2
    6fca:	4bb5      	ldr	r3, [pc, #724]	; (72a0 <check+0x360>)
    6fcc:	4798      	blx	r3
					}
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
    6fce:	ab07      	add	r3, sp, #28
    6fd0:	79db      	ldrb	r3, [r3, #7]
    6fd2:	4ab1      	ldr	r2, [pc, #708]	; (7298 <check+0x358>)
    6fd4:	79d2      	ldrb	r2, [r2, #7]
    6fd6:	b2db      	uxtb	r3, r3
    6fd8:	4293      	cmp	r3, r2
    6fda:	d05a      	beq.n	7092 <check+0x152>
					{
						if(received_value[8] == 0 && received_value[9] == 0)
    6fdc:	ab07      	add	r3, sp, #28
    6fde:	7a1b      	ldrb	r3, [r3, #8]
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d103      	bne.n	6fec <check+0xac>
    6fe4:	ab07      	add	r3, sp, #28
    6fe6:	7a5b      	ldrb	r3, [r3, #9]
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d068      	beq.n	70be <check+0x17e>
						{
							turn_off_motors();
						}
						set_motor_left(received_value[7], received_value[8]); // directions and speed are inputs
    6fec:	ac07      	add	r4, sp, #28
    6fee:	79e0      	ldrb	r0, [r4, #7]
    6ff0:	b2c0      	uxtb	r0, r0
    6ff2:	7a21      	ldrb	r1, [r4, #8]
    6ff4:	b2c9      	uxtb	r1, r1
    6ff6:	4bab      	ldr	r3, [pc, #684]	; (72a4 <check+0x364>)
    6ff8:	4798      	blx	r3
						set_motor_right(received_value[9], received_value[10]);
    6ffa:	7a60      	ldrb	r0, [r4, #9]
    6ffc:	b2c0      	uxtb	r0, r0
    6ffe:	7aa1      	ldrb	r1, [r4, #10]
    7000:	b2c9      	uxtb	r1, r1
    7002:	4ba9      	ldr	r3, [pc, #676]	; (72a8 <check+0x368>)
    7004:	4798      	blx	r3
					}
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[14]^prev_rec_value[14]) )
    7006:	ab07      	add	r3, sp, #28
    7008:	7adb      	ldrb	r3, [r3, #11]
    700a:	4aa3      	ldr	r2, [pc, #652]	; (7298 <check+0x358>)
    700c:	7ad2      	ldrb	r2, [r2, #11]
    700e:	b2db      	uxtb	r3, r3
    7010:	4293      	cmp	r3, r2
    7012:	d057      	beq.n	70c4 <check+0x184>
					{
						buzz_type =  received_value[11];
    7014:	aa07      	add	r2, sp, #28
    7016:	7ad3      	ldrb	r3, [r2, #11]
    7018:	b2db      	uxtb	r3, r3
    701a:	49a4      	ldr	r1, [pc, #656]	; (72ac <check+0x36c>)
    701c:	700b      	strb	r3, [r1, #0]
						buzz_frequency =  (received_value[12]<<8) + received_value[13];
    701e:	7b11      	ldrb	r1, [r2, #12]
    7020:	7b53      	ldrb	r3, [r2, #13]
    7022:	0209      	lsls	r1, r1, #8
    7024:	185b      	adds	r3, r3, r1
    7026:	b29b      	uxth	r3, r3
    7028:	49a1      	ldr	r1, [pc, #644]	; (72b0 <check+0x370>)
    702a:	800b      	strh	r3, [r1, #0]
						buzz_volume    =  received_value[14];
    702c:	7b93      	ldrb	r3, [r2, #14]
    702e:	4aa1      	ldr	r2, [pc, #644]	; (72b4 <check+0x374>)
    7030:	8013      	strh	r3, [r2, #0]
						speaker_update();
    7032:	4ba1      	ldr	r3, [pc, #644]	; (72b8 <check+0x378>)
    7034:	4798      	blx	r3
{
    7036:	2301      	movs	r3, #1
					}
					for(i=1;i<=ALL_SET_LEN;i++)
					{
						prev_rec_value[i] = received_value[i];
    7038:	a807      	add	r0, sp, #28
    703a:	4997      	ldr	r1, [pc, #604]	; (7298 <check+0x358>)
    703c:	5cc2      	ldrb	r2, [r0, r3]
    703e:	b2d2      	uxtb	r2, r2
    7040:	54ca      	strb	r2, [r1, r3]
    7042:	3301      	adds	r3, #1
					for(i=1;i<=ALL_SET_LEN;i++)
    7044:	2b0f      	cmp	r3, #15
    7046:	d1f9      	bne.n	703c <check+0xfc>
    7048:	e097      	b.n	717a <check+0x23a>
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
    704a:	ab07      	add	r3, sp, #28
    704c:	789b      	ldrb	r3, [r3, #2]
    704e:	4a92      	ldr	r2, [pc, #584]	; (7298 <check+0x358>)
    7050:	7892      	ldrb	r2, [r2, #2]
    7052:	b2db      	uxtb	r3, r3
    7054:	4293      	cmp	r3, r2
    7056:	d1a9      	bne.n	6fac <check+0x6c>
    7058:	ab07      	add	r3, sp, #28
    705a:	78db      	ldrb	r3, [r3, #3]
    705c:	4a8e      	ldr	r2, [pc, #568]	; (7298 <check+0x358>)
    705e:	78d2      	ldrb	r2, [r2, #3]
    7060:	b2db      	uxtb	r3, r3
    7062:	4293      	cmp	r3, r2
    7064:	d1a2      	bne.n	6fac <check+0x6c>
    7066:	ab07      	add	r3, sp, #28
    7068:	791b      	ldrb	r3, [r3, #4]
    706a:	4a8b      	ldr	r2, [pc, #556]	; (7298 <check+0x358>)
    706c:	7912      	ldrb	r2, [r2, #4]
    706e:	b2db      	uxtb	r3, r3
    7070:	4293      	cmp	r3, r2
    7072:	d19b      	bne.n	6fac <check+0x6c>
    7074:	ab07      	add	r3, sp, #28
    7076:	795b      	ldrb	r3, [r3, #5]
    7078:	4a87      	ldr	r2, [pc, #540]	; (7298 <check+0x358>)
    707a:	7952      	ldrb	r2, [r2, #5]
    707c:	b2db      	uxtb	r3, r3
    707e:	4293      	cmp	r3, r2
    7080:	d194      	bne.n	6fac <check+0x6c>
    7082:	ab07      	add	r3, sp, #28
    7084:	799b      	ldrb	r3, [r3, #6]
    7086:	4a84      	ldr	r2, [pc, #528]	; (7298 <check+0x358>)
    7088:	7992      	ldrb	r2, [r2, #6]
    708a:	b2db      	uxtb	r3, r3
    708c:	4293      	cmp	r3, r2
    708e:	d18d      	bne.n	6fac <check+0x6c>
    7090:	e79d      	b.n	6fce <check+0x8e>
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
    7092:	ab07      	add	r3, sp, #28
    7094:	7a1b      	ldrb	r3, [r3, #8]
    7096:	4a80      	ldr	r2, [pc, #512]	; (7298 <check+0x358>)
    7098:	7a12      	ldrb	r2, [r2, #8]
    709a:	b2db      	uxtb	r3, r3
    709c:	4293      	cmp	r3, r2
    709e:	d19d      	bne.n	6fdc <check+0x9c>
    70a0:	ab07      	add	r3, sp, #28
    70a2:	7a5b      	ldrb	r3, [r3, #9]
    70a4:	4a7c      	ldr	r2, [pc, #496]	; (7298 <check+0x358>)
    70a6:	7a52      	ldrb	r2, [r2, #9]
    70a8:	b2db      	uxtb	r3, r3
    70aa:	4293      	cmp	r3, r2
    70ac:	d196      	bne.n	6fdc <check+0x9c>
    70ae:	ab07      	add	r3, sp, #28
    70b0:	7a9b      	ldrb	r3, [r3, #10]
    70b2:	4a79      	ldr	r2, [pc, #484]	; (7298 <check+0x358>)
    70b4:	7a92      	ldrb	r2, [r2, #10]
    70b6:	b2db      	uxtb	r3, r3
    70b8:	4293      	cmp	r3, r2
    70ba:	d18f      	bne.n	6fdc <check+0x9c>
    70bc:	e7a3      	b.n	7006 <check+0xc6>
							turn_off_motors();
    70be:	4b7f      	ldr	r3, [pc, #508]	; (72bc <check+0x37c>)
    70c0:	4798      	blx	r3
    70c2:	e793      	b.n	6fec <check+0xac>
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[14]^prev_rec_value[14]) )
    70c4:	ab07      	add	r3, sp, #28
    70c6:	7b1b      	ldrb	r3, [r3, #12]
    70c8:	4a73      	ldr	r2, [pc, #460]	; (7298 <check+0x358>)
    70ca:	7b12      	ldrb	r2, [r2, #12]
    70cc:	b2db      	uxtb	r3, r3
    70ce:	4293      	cmp	r3, r2
    70d0:	d1a0      	bne.n	7014 <check+0xd4>
    70d2:	ab07      	add	r3, sp, #28
    70d4:	7b5b      	ldrb	r3, [r3, #13]
    70d6:	4a70      	ldr	r2, [pc, #448]	; (7298 <check+0x358>)
    70d8:	7b52      	ldrb	r2, [r2, #13]
    70da:	b2db      	uxtb	r3, r3
    70dc:	4293      	cmp	r3, r2
    70de:	d199      	bne.n	7014 <check+0xd4>
    70e0:	ab07      	add	r3, sp, #28
    70e2:	7b9b      	ldrb	r3, [r3, #14]
    70e4:	4a6c      	ldr	r2, [pc, #432]	; (7298 <check+0x358>)
    70e6:	7b92      	ldrb	r2, [r2, #14]
    70e8:	b2db      	uxtb	r3, r3
    70ea:	4293      	cmp	r3, r2
    70ec:	d192      	bne.n	7014 <check+0xd4>
    70ee:	e7a2      	b.n	7036 <check+0xf6>
				break;
			
			//Get all the sensors values
			case 'v':
				//Transmit LDR values
				transmit_value[0] = SENSORS_TRANSMIT_LENGTH-1; // legacy reasons
    70f0:	ac02      	add	r4, sp, #8
    70f2:	230a      	movs	r3, #10
    70f4:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    70f6:	200b      	movs	r0, #11
    70f8:	4d71      	ldr	r5, [pc, #452]	; (72c0 <check+0x380>)
    70fa:	47a8      	blx	r5
    70fc:	7060      	strb	r0, [r4, #1]
				transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    70fe:	2003      	movs	r0, #3
    7100:	47a8      	blx	r5
    7102:	70a0      	strb	r0, [r4, #2]
				
				//accelerometer
				get_accel_data();
    7104:	4b6f      	ldr	r3, [pc, #444]	; (72c4 <check+0x384>)
    7106:	4798      	blx	r3
				// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7108:	4a6f      	ldr	r2, [pc, #444]	; (72c8 <check+0x388>)
    710a:	7813      	ldrb	r3, [r2, #0]
    710c:	7851      	ldrb	r1, [r2, #1]
    710e:	430b      	orrs	r3, r1
    7110:	7891      	ldrb	r1, [r2, #2]
    7112:	430b      	orrs	r3, r1
    7114:	78d2      	ldrb	r2, [r2, #3]
    7116:	4313      	orrs	r3, r2
    7118:	065b      	lsls	r3, r3, #25
    711a:	d50c      	bpl.n	7136 <check+0x1f6>
					get_accel_data();
    711c:	4e69      	ldr	r6, [pc, #420]	; (72c4 <check+0x384>)
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    711e:	4c6a      	ldr	r4, [pc, #424]	; (72c8 <check+0x388>)
    7120:	2540      	movs	r5, #64	; 0x40
					get_accel_data();
    7122:	47b0      	blx	r6
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7124:	7823      	ldrb	r3, [r4, #0]
    7126:	7862      	ldrb	r2, [r4, #1]
    7128:	4313      	orrs	r3, r2
    712a:	78a2      	ldrb	r2, [r4, #2]
    712c:	4313      	orrs	r3, r2
    712e:	78e2      	ldrb	r2, [r4, #3]
    7130:	4313      	orrs	r3, r2
    7132:	421d      	tst	r5, r3
    7134:	d1f5      	bne.n	7122 <check+0x1e2>
				}
				 
				for(i = 3; i < ACCL_TRANSMIT_LENGTH; i++) {
					transmit_value[i] = bufferReceive[i-1];
    7136:	4b64      	ldr	r3, [pc, #400]	; (72c8 <check+0x388>)
    7138:	789a      	ldrb	r2, [r3, #2]
    713a:	ac02      	add	r4, sp, #8
    713c:	70e2      	strb	r2, [r4, #3]
    713e:	78db      	ldrb	r3, [r3, #3]
    7140:	7123      	strb	r3, [r4, #4]
					
				}
				
				//Line Follower
				transmit_value[7] = adc_start_read_result(LINE_FOLLOWER);
    7142:	2002      	movs	r0, #2
    7144:	4d5e      	ldr	r5, [pc, #376]	; (72c0 <check+0x380>)
    7146:	47a8      	blx	r5
    7148:	71e0      	strb	r0, [r4, #7]
				
				//Ultrasound
				echo_distance = get_ultrasound_distance();
    714a:	4b60      	ldr	r3, [pc, #384]	; (72cc <check+0x38c>)
    714c:	4798      	blx	r3
				transmit_value[9] = *echo_distance++;
    714e:	7803      	ldrb	r3, [r0, #0]
    7150:	b2db      	uxtb	r3, r3
    7152:	7263      	strb	r3, [r4, #9]
				transmit_value[8] = *echo_distance;		
    7154:	7843      	ldrb	r3, [r0, #1]
    7156:	b2db      	uxtb	r3, r3
    7158:	7223      	strb	r3, [r4, #8]
				
				//
				//
				temp_batt_level = adc_start_read_result(BATT_MTR);
    715a:	200a      	movs	r0, #10
    715c:	47a8      	blx	r5
	return (port_base->OUT.reg & pin_mask);
    715e:	4b5c      	ldr	r3, [pc, #368]	; (72d0 <check+0x390>)
    7160:	691b      	ldr	r3, [r3, #16]
    7162:	031b      	lsls	r3, r3, #12
				temp_batt_level = temp_batt_level >> 1;
				temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    7164:	0fdb      	lsrs	r3, r3, #31
				temp_batt_level = temp_batt_level >> 1;
    7166:	0840      	lsrs	r0, r0, #1
				temp_batt_status = temp_batt_status << 7;
    7168:	01db      	lsls	r3, r3, #7
				transmit_value[10] = temp_batt_status | temp_batt_level;
    716a:	4318      	orrs	r0, r3
    716c:	b2c0      	uxtb	r0, r0
    716e:	72a0      	strb	r0, [r4, #10]
				
						
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
    7170:	220b      	movs	r2, #11
    7172:	0021      	movs	r1, r4
    7174:	4857      	ldr	r0, [pc, #348]	; (72d4 <check+0x394>)
    7176:	4b58      	ldr	r3, [pc, #352]	; (72d8 <check+0x398>)
    7178:	4798      	blx	r3
				head_ring_buffer = 0;
				tail_ring_buffer = 0;
				break;
		}
		
		if((head_ring_buffer == tail_ring_buffer) || (head_ring_buffer > MAX_LIMIT_RING_BUFFER) || (tail_ring_buffer > MAX_LIMIT_RING_BUFFER) || (serial_timeout == true))
    717a:	4b40      	ldr	r3, [pc, #256]	; (727c <check+0x33c>)
    717c:	781b      	ldrb	r3, [r3, #0]
    717e:	4a40      	ldr	r2, [pc, #256]	; (7280 <check+0x340>)
    7180:	7812      	ldrb	r2, [r2, #0]
    7182:	b2db      	uxtb	r3, r3
    7184:	4293      	cmp	r3, r2
    7186:	d007      	beq.n	7198 <check+0x258>
    7188:	4b3c      	ldr	r3, [pc, #240]	; (727c <check+0x33c>)
    718a:	781b      	ldrb	r3, [r3, #0]
    718c:	4b3c      	ldr	r3, [pc, #240]	; (7280 <check+0x340>)
    718e:	781b      	ldrb	r3, [r3, #0]
    7190:	4b3f      	ldr	r3, [pc, #252]	; (7290 <check+0x350>)
    7192:	781b      	ldrb	r3, [r3, #0]
    7194:	2b00      	cmp	r3, #0
    7196:	d004      	beq.n	71a2 <check+0x262>
		{
			head_ring_buffer = 0;
    7198:	2300      	movs	r3, #0
    719a:	4a38      	ldr	r2, [pc, #224]	; (727c <check+0x33c>)
    719c:	7013      	strb	r3, [r2, #0]
			tail_ring_buffer = 0;
    719e:	4a38      	ldr	r2, [pc, #224]	; (7280 <check+0x340>)
    71a0:	7013      	strb	r3, [r2, #0]
		}
	 }		//received_data_updated = false;	
	
	 if(broadcast == true)
    71a2:	4b4e      	ldr	r3, [pc, #312]	; (72dc <check+0x39c>)
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	2b00      	cmp	r3, #0
    71a8:	d066      	beq.n	7278 <check+0x338>
	 {
		if(count_broadcast > MAX_COUNT_BROADCAST)
    71aa:	4b4d      	ldr	r3, [pc, #308]	; (72e0 <check+0x3a0>)
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	b2db      	uxtb	r3, r3
    71b0:	2b01      	cmp	r3, #1
    71b2:	d961      	bls.n	7278 <check+0x338>
		{
			count_broadcast = 0;
    71b4:	2200      	movs	r2, #0
    71b6:	4b4a      	ldr	r3, [pc, #296]	; (72e0 <check+0x3a0>)
    71b8:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    71ba:	3201      	adds	r2, #1
    71bc:	32ff      	adds	r2, #255	; 0xff
    71be:	4b44      	ldr	r3, [pc, #272]	; (72d0 <check+0x390>)
    71c0:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA08, true);
			//Transmit LDR values
			transmit_value[0] = SENSORS_TRANSMIT_LENGTH-1; // legacy reasons
    71c2:	ac02      	add	r4, sp, #8
    71c4:	230a      	movs	r3, #10
    71c6:	7023      	strb	r3, [r4, #0]
			transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    71c8:	200b      	movs	r0, #11
    71ca:	4d3d      	ldr	r5, [pc, #244]	; (72c0 <check+0x380>)
    71cc:	47a8      	blx	r5
    71ce:	7060      	strb	r0, [r4, #1]
			transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    71d0:	2003      	movs	r0, #3
    71d2:	47a8      	blx	r5
    71d4:	70a0      	strb	r0, [r4, #2]
			
			//accelerometer
			get_accel_data();
    71d6:	4b3b      	ldr	r3, [pc, #236]	; (72c4 <check+0x384>)
    71d8:	4798      	blx	r3
			// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    71da:	4a3b      	ldr	r2, [pc, #236]	; (72c8 <check+0x388>)
    71dc:	7813      	ldrb	r3, [r2, #0]
    71de:	7851      	ldrb	r1, [r2, #1]
    71e0:	430b      	orrs	r3, r1
    71e2:	7891      	ldrb	r1, [r2, #2]
    71e4:	430b      	orrs	r3, r1
    71e6:	78d2      	ldrb	r2, [r2, #3]
    71e8:	4313      	orrs	r3, r2
    71ea:	065b      	lsls	r3, r3, #25
    71ec:	d50c      	bpl.n	7208 <check+0x2c8>
			{
				get_accel_data();
    71ee:	4e35      	ldr	r6, [pc, #212]	; (72c4 <check+0x384>)
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    71f0:	4c35      	ldr	r4, [pc, #212]	; (72c8 <check+0x388>)
    71f2:	2540      	movs	r5, #64	; 0x40
				get_accel_data();
    71f4:	47b0      	blx	r6
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    71f6:	7823      	ldrb	r3, [r4, #0]
    71f8:	7862      	ldrb	r2, [r4, #1]
    71fa:	4313      	orrs	r3, r2
    71fc:	78a2      	ldrb	r2, [r4, #2]
    71fe:	4313      	orrs	r3, r2
    7200:	78e2      	ldrb	r2, [r4, #3]
    7202:	4313      	orrs	r3, r2
    7204:	421d      	tst	r5, r3
    7206:	d1f5      	bne.n	71f4 <check+0x2b4>
			}
			
			for(i = 3; i < ACCL_TRANSMIT_LENGTH; i++)
			{
				transmit_value[i] = bufferReceive[i-1];	
    7208:	4b2f      	ldr	r3, [pc, #188]	; (72c8 <check+0x388>)
    720a:	789a      	ldrb	r2, [r3, #2]
    720c:	ac02      	add	r4, sp, #8
    720e:	70e2      	strb	r2, [r4, #3]
    7210:	78db      	ldrb	r3, [r3, #3]
    7212:	7123      	strb	r3, [r4, #4]
			}
			
			//Line Follower
			transmit_value[7] = adc_start_read_result(LINE_FOLLOWER);
    7214:	2002      	movs	r0, #2
    7216:	4b2a      	ldr	r3, [pc, #168]	; (72c0 <check+0x380>)
    7218:	4798      	blx	r3
    721a:	71e0      	strb	r0, [r4, #7]
			
			//Ultrasound
			echo_distance = get_ultrasound_distance();
    721c:	4b2b      	ldr	r3, [pc, #172]	; (72cc <check+0x38c>)
    721e:	4798      	blx	r3
			echo_current[0]	= *echo_distance++;
    7220:	7803      	ldrb	r3, [r0, #0]
    7222:	b2db      	uxtb	r3, r3
    7224:	4a2f      	ldr	r2, [pc, #188]	; (72e4 <check+0x3a4>)
    7226:	7013      	strb	r3, [r2, #0]
			echo_current[1]	= *echo_distance;
    7228:	7843      	ldrb	r3, [r0, #1]
    722a:	b2db      	uxtb	r3, r3
    722c:	7053      	strb	r3, [r2, #1]
			if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    722e:	4b2e      	ldr	r3, [pc, #184]	; (72e8 <check+0x3a8>)
    7230:	781b      	ldrb	r3, [r3, #0]
    7232:	2b00      	cmp	r3, #0
    7234:	d104      	bne.n	7240 <check+0x300>
    7236:	7853      	ldrb	r3, [r2, #1]
    7238:	b2db      	uxtb	r3, r3
    723a:	2b75      	cmp	r3, #117	; 0x75
    723c:	d800      	bhi.n	7240 <check+0x300>
    723e:	e20e      	b.n	765e <check+0x71e>
			{
				transmit_value[9] = echo_prev[0];
    7240:	492a      	ldr	r1, [pc, #168]	; (72ec <check+0x3ac>)
    7242:	780b      	ldrb	r3, [r1, #0]
    7244:	b2db      	uxtb	r3, r3
    7246:	aa02      	add	r2, sp, #8
    7248:	7253      	strb	r3, [r2, #9]
				transmit_value[8] = echo_prev[1];
    724a:	784b      	ldrb	r3, [r1, #1]
    724c:	b2db      	uxtb	r3, r3
    724e:	7213      	strb	r3, [r2, #8]
				transmit_value[8] = echo_current[1];
				echo_prev[0]	  = echo_current[0];
				echo_prev[1]	  = echo_current[1];
					
			}
			temp_batt_level = adc_start_read_result(BATT_MTR);
    7250:	200a      	movs	r0, #10
    7252:	4b1b      	ldr	r3, [pc, #108]	; (72c0 <check+0x380>)
    7254:	4798      	blx	r3
	return (port_base->OUT.reg & pin_mask);
    7256:	4c1e      	ldr	r4, [pc, #120]	; (72d0 <check+0x390>)
    7258:	6922      	ldr	r2, [r4, #16]
    725a:	0312      	lsls	r2, r2, #12
			temp_batt_level = temp_batt_level >> 1; 
			temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    725c:	0fd2      	lsrs	r2, r2, #31
			temp_batt_level = temp_batt_level >> 1; 
    725e:	0843      	lsrs	r3, r0, #1
			temp_batt_status = temp_batt_status << 7;
    7260:	01d2      	lsls	r2, r2, #7
			transmit_value[10] = temp_batt_status | temp_batt_level;
    7262:	4313      	orrs	r3, r2
    7264:	b2db      	uxtb	r3, r3
    7266:	a902      	add	r1, sp, #8
    7268:	728b      	strb	r3, [r1, #10]
			//Pin High
			
			usart_write_buffer_wait(&usart_ble_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
    726a:	220b      	movs	r2, #11
    726c:	4819      	ldr	r0, [pc, #100]	; (72d4 <check+0x394>)
    726e:	4b1a      	ldr	r3, [pc, #104]	; (72d8 <check+0x398>)
    7270:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    7272:	2380      	movs	r3, #128	; 0x80
    7274:	005b      	lsls	r3, r3, #1
    7276:	6163      	str	r3, [r4, #20]
			port_pin_set_output_level(PIN_PA08, false);
			//Pin Low
		}
	 }	 
}
    7278:	b00c      	add	sp, #48	; 0x30
    727a:	bd70      	pop	{r4, r5, r6, pc}
    727c:	200003d2 	.word	0x200003d2
    7280:	200003ec 	.word	0x200003ec
    7284:	200009f0 	.word	0x200009f0
    7288:	0000a8e0 	.word	0x0000a8e0
    728c:	200003eb 	.word	0x200003eb
    7290:	200003ea 	.word	0x200003ea
    7294:	00006eed 	.word	0x00006eed
    7298:	200003d4 	.word	0x200003d4
    729c:	00001145 	.word	0x00001145
    72a0:	00001159 	.word	0x00001159
    72a4:	00001ac1 	.word	0x00001ac1
    72a8:	00001b65 	.word	0x00001b65
    72ac:	200003c4 	.word	0x200003c4
    72b0:	200003c2 	.word	0x200003c2
    72b4:	200003c6 	.word	0x200003c6
    72b8:	000021c5 	.word	0x000021c5
    72bc:	00001c09 	.word	0x00001c09
    72c0:	00006e1d 	.word	0x00006e1d
    72c4:	00001971 	.word	0x00001971
    72c8:	200005b8 	.word	0x200005b8
    72cc:	00001741 	.word	0x00001741
    72d0:	41004400 	.word	0x41004400
    72d4:	20000584 	.word	0x20000584
    72d8:	000007e9 	.word	0x000007e9
    72dc:	200003c0 	.word	0x200003c0
    72e0:	200003c8 	.word	0x200003c8
    72e4:	200003cc 	.word	0x200003cc
    72e8:	200003e9 	.word	0x200003e9
    72ec:	200003d0 	.word	0x200003d0
				serial_timeout_count = 0;
    72f0:	2400      	movs	r4, #0
    72f2:	4be3      	ldr	r3, [pc, #908]	; (7680 <check+0x740>)
    72f4:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
    72f6:	4be3      	ldr	r3, [pc, #908]	; (7684 <check+0x744>)
    72f8:	701c      	strb	r4, [r3, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
    72fa:	ad07      	add	r5, sp, #28
    72fc:	0029      	movs	r1, r5
    72fe:	2001      	movs	r0, #1
    7300:	4be1      	ldr	r3, [pc, #900]	; (7688 <check+0x748>)
    7302:	4798      	blx	r3
				count_broadcast = 0;
    7304:	4be1      	ldr	r3, [pc, #900]	; (768c <check+0x74c>)
    7306:	701c      	strb	r4, [r3, #0]
				switch(received_value[1])
    7308:	786b      	ldrb	r3, [r5, #1]
    730a:	b2db      	uxtb	r3, r3
    730c:	2b67      	cmp	r3, #103	; 0x67
    730e:	d007      	beq.n	7320 <check+0x3e0>
    7310:	2b73      	cmp	r3, #115	; 0x73
    7312:	d009      	beq.n	7328 <check+0x3e8>
						head_ring_buffer = 0;
    7314:	2300      	movs	r3, #0
    7316:	4ade      	ldr	r2, [pc, #888]	; (7690 <check+0x750>)
    7318:	7013      	strb	r3, [r2, #0]
						tail_ring_buffer = 0;
    731a:	4ade      	ldr	r2, [pc, #888]	; (7694 <check+0x754>)
    731c:	7013      	strb	r3, [r2, #0]
						break;
    731e:	e72c      	b.n	717a <check+0x23a>
						broadcast = true;
    7320:	2201      	movs	r2, #1
    7322:	4bdd      	ldr	r3, [pc, #884]	; (7698 <check+0x758>)
    7324:	701a      	strb	r2, [r3, #0]
						break;	
    7326:	e728      	b.n	717a <check+0x23a>
						broadcast = false;
    7328:	2200      	movs	r2, #0
    732a:	4bdb      	ldr	r3, [pc, #876]	; (7698 <check+0x758>)
    732c:	701a      	strb	r2, [r3, #0]
						break;
    732e:	e724      	b.n	717a <check+0x23a>
				serial_timeout_count = 0;
    7330:	2300      	movs	r3, #0
    7332:	4ad3      	ldr	r2, [pc, #844]	; (7680 <check+0x740>)
    7334:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    7336:	4cd3      	ldr	r4, [pc, #844]	; (7684 <check+0x744>)
    7338:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(LEDS_SET_LEN_TEST,received_value);
    733a:	a907      	add	r1, sp, #28
    733c:	2004      	movs	r0, #4
    733e:	4bd2      	ldr	r3, [pc, #840]	; (7688 <check+0x748>)
    7340:	4798      	blx	r3
				if(serial_timeout == false)
    7342:	7823      	ldrb	r3, [r4, #0]
    7344:	2b00      	cmp	r3, #0
    7346:	d000      	beq.n	734a <check+0x40a>
    7348:	e717      	b.n	717a <check+0x23a>
					set_led_left_new(received_value[2], received_value[3], received_value[4]);
    734a:	ac07      	add	r4, sp, #28
    734c:	78a0      	ldrb	r0, [r4, #2]
    734e:	b2c0      	uxtb	r0, r0
    7350:	78e1      	ldrb	r1, [r4, #3]
    7352:	b2c9      	uxtb	r1, r1
    7354:	7922      	ldrb	r2, [r4, #4]
    7356:	b2d2      	uxtb	r2, r2
    7358:	4bd0      	ldr	r3, [pc, #832]	; (769c <check+0x75c>)
    735a:	4798      	blx	r3
					set_led_right_new(received_value[2], received_value[3], received_value[4]);
    735c:	78a0      	ldrb	r0, [r4, #2]
    735e:	b2c0      	uxtb	r0, r0
    7360:	78e1      	ldrb	r1, [r4, #3]
    7362:	b2c9      	uxtb	r1, r1
    7364:	7922      	ldrb	r2, [r4, #4]
    7366:	b2d2      	uxtb	r2, r2
    7368:	4bcd      	ldr	r3, [pc, #820]	; (76a0 <check+0x760>)
    736a:	4798      	blx	r3
    736c:	e705      	b.n	717a <check+0x23a>
				serial_timeout_count = 0;
    736e:	2300      	movs	r3, #0
    7370:	4ac3      	ldr	r2, [pc, #780]	; (7680 <check+0x740>)
    7372:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    7374:	4cc3      	ldr	r4, [pc, #780]	; (7684 <check+0x744>)
    7376:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(MOTORS_SET_LEN,received_value);
    7378:	a907      	add	r1, sp, #28
    737a:	2004      	movs	r0, #4
    737c:	4bc2      	ldr	r3, [pc, #776]	; (7688 <check+0x748>)
    737e:	4798      	blx	r3
				if(serial_timeout == false)
    7380:	7823      	ldrb	r3, [r4, #0]
    7382:	2b00      	cmp	r3, #0
    7384:	d000      	beq.n	7388 <check+0x448>
    7386:	e6f8      	b.n	717a <check+0x23a>
					if(received_value[2] == 0 && received_value[4] == 0)
    7388:	ab07      	add	r3, sp, #28
    738a:	789b      	ldrb	r3, [r3, #2]
    738c:	2b00      	cmp	r3, #0
    738e:	d103      	bne.n	7398 <check+0x458>
    7390:	ab07      	add	r3, sp, #28
    7392:	791b      	ldrb	r3, [r3, #4]
    7394:	2b00      	cmp	r3, #0
    7396:	d00d      	beq.n	73b4 <check+0x474>
					set_motor_left(received_value[1], received_value[2]); // directions and speed are inputs
    7398:	ac07      	add	r4, sp, #28
    739a:	7860      	ldrb	r0, [r4, #1]
    739c:	b2c0      	uxtb	r0, r0
    739e:	78a1      	ldrb	r1, [r4, #2]
    73a0:	b2c9      	uxtb	r1, r1
    73a2:	4bc0      	ldr	r3, [pc, #768]	; (76a4 <check+0x764>)
    73a4:	4798      	blx	r3
					set_motor_right(received_value[3], received_value[4]);
    73a6:	78e0      	ldrb	r0, [r4, #3]
    73a8:	b2c0      	uxtb	r0, r0
    73aa:	7921      	ldrb	r1, [r4, #4]
    73ac:	b2c9      	uxtb	r1, r1
    73ae:	4bbe      	ldr	r3, [pc, #760]	; (76a8 <check+0x768>)
    73b0:	4798      	blx	r3
    73b2:	e6e2      	b.n	717a <check+0x23a>
						turn_off_motors();
    73b4:	4bbd      	ldr	r3, [pc, #756]	; (76ac <check+0x76c>)
    73b6:	4798      	blx	r3
    73b8:	e7ee      	b.n	7398 <check+0x458>
				get_accel_data();
    73ba:	4bbd      	ldr	r3, [pc, #756]	; (76b0 <check+0x770>)
    73bc:	4798      	blx	r3
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    73be:	4abd      	ldr	r2, [pc, #756]	; (76b4 <check+0x774>)
    73c0:	7813      	ldrb	r3, [r2, #0]
    73c2:	7851      	ldrb	r1, [r2, #1]
    73c4:	430b      	orrs	r3, r1
    73c6:	7891      	ldrb	r1, [r2, #2]
    73c8:	430b      	orrs	r3, r1
    73ca:	78d2      	ldrb	r2, [r2, #3]
    73cc:	4313      	orrs	r3, r2
    73ce:	065b      	lsls	r3, r3, #25
    73d0:	d50c      	bpl.n	73ec <check+0x4ac>
					get_accel_data();
    73d2:	4eb7      	ldr	r6, [pc, #732]	; (76b0 <check+0x770>)
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    73d4:	4cb7      	ldr	r4, [pc, #732]	; (76b4 <check+0x774>)
    73d6:	2540      	movs	r5, #64	; 0x40
					get_accel_data();
    73d8:	47b0      	blx	r6
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    73da:	7823      	ldrb	r3, [r4, #0]
    73dc:	7862      	ldrb	r2, [r4, #1]
    73de:	4313      	orrs	r3, r2
    73e0:	78a2      	ldrb	r2, [r4, #2]
    73e2:	4313      	orrs	r3, r2
    73e4:	78e2      	ldrb	r2, [r4, #3]
    73e6:	4313      	orrs	r3, r2
    73e8:	421d      	tst	r5, r3
    73ea:	d1f5      	bne.n	73d8 <check+0x498>
				transmit_value[0] = ACCL_TRANSMIT_LENGTH-1; // legacy reasons 
    73ec:	a902      	add	r1, sp, #8
    73ee:	2304      	movs	r3, #4
    73f0:	700b      	strb	r3, [r1, #0]
					transmit_value[i] = bufferReceive[i-1];
    73f2:	4bb0      	ldr	r3, [pc, #704]	; (76b4 <check+0x774>)
    73f4:	781a      	ldrb	r2, [r3, #0]
    73f6:	704a      	strb	r2, [r1, #1]
    73f8:	785a      	ldrb	r2, [r3, #1]
    73fa:	708a      	strb	r2, [r1, #2]
    73fc:	789a      	ldrb	r2, [r3, #2]
    73fe:	70ca      	strb	r2, [r1, #3]
    7400:	78db      	ldrb	r3, [r3, #3]
    7402:	710b      	strb	r3, [r1, #4]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, ACCL_TRANSMIT_LENGTH);
    7404:	2205      	movs	r2, #5
    7406:	48ac      	ldr	r0, [pc, #688]	; (76b8 <check+0x778>)
    7408:	4bac      	ldr	r3, [pc, #688]	; (76bc <check+0x77c>)
    740a:	4798      	blx	r3
				break;
    740c:	e6b5      	b.n	717a <check+0x23a>
				transmit_value[0] = L_TRANSMIT_LENGTH-1;
    740e:	ac02      	add	r4, sp, #8
    7410:	2302      	movs	r3, #2
    7412:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    7414:	200b      	movs	r0, #11
    7416:	4daa      	ldr	r5, [pc, #680]	; (76c0 <check+0x780>)
    7418:	47a8      	blx	r5
    741a:	7060      	strb	r0, [r4, #1]
				transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    741c:	2003      	movs	r0, #3
    741e:	47a8      	blx	r5
    7420:	70a0      	strb	r0, [r4, #2]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, L_TRANSMIT_LENGTH);
    7422:	2203      	movs	r2, #3
    7424:	0021      	movs	r1, r4
    7426:	48a4      	ldr	r0, [pc, #656]	; (76b8 <check+0x778>)
    7428:	4ba4      	ldr	r3, [pc, #656]	; (76bc <check+0x77c>)
    742a:	4798      	blx	r3
				break;
    742c:	e6a5      	b.n	717a <check+0x23a>
				serial_timeout_count = 0;
    742e:	2300      	movs	r3, #0
    7430:	4a93      	ldr	r2, [pc, #588]	; (7680 <check+0x740>)
    7432:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    7434:	4c93      	ldr	r4, [pc, #588]	; (7684 <check+0x744>)
    7436:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ULTRASOUND_SET_LEN,received_value);
    7438:	a907      	add	r1, sp, #28
    743a:	2004      	movs	r0, #4
    743c:	4b92      	ldr	r3, [pc, #584]	; (7688 <check+0x748>)
    743e:	4798      	blx	r3
				if(serial_timeout == false)
    7440:	7823      	ldrb	r3, [r4, #0]
    7442:	2b00      	cmp	r3, #0
    7444:	d000      	beq.n	7448 <check+0x508>
    7446:	e698      	b.n	717a <check+0x23a>
					buzz_type =  received_value[1];
    7448:	aa07      	add	r2, sp, #28
    744a:	7853      	ldrb	r3, [r2, #1]
    744c:	b2db      	uxtb	r3, r3
    744e:	499d      	ldr	r1, [pc, #628]	; (76c4 <check+0x784>)
    7450:	700b      	strb	r3, [r1, #0]
					buzz_frequency =  (received_value[2]<<8) + received_value[3];
    7452:	7891      	ldrb	r1, [r2, #2]
    7454:	78d3      	ldrb	r3, [r2, #3]
    7456:	0209      	lsls	r1, r1, #8
    7458:	185b      	adds	r3, r3, r1
    745a:	b29b      	uxth	r3, r3
    745c:	499a      	ldr	r1, [pc, #616]	; (76c8 <check+0x788>)
    745e:	800b      	strh	r3, [r1, #0]
					buzz_volume    =  received_value[4];
    7460:	7913      	ldrb	r3, [r2, #4]
    7462:	4a9a      	ldr	r2, [pc, #616]	; (76cc <check+0x78c>)
    7464:	8013      	strh	r3, [r2, #0]
					speaker_update();
    7466:	4b9a      	ldr	r3, [pc, #616]	; (76d0 <check+0x790>)
    7468:	4798      	blx	r3
    746a:	e686      	b.n	717a <check+0x23a>
				transmit_value[0] = LF_TRANSMIT_LENGTH-1;
    746c:	ac02      	add	r4, sp, #8
    746e:	2301      	movs	r3, #1
    7470:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LINE_FOLLOWER);
    7472:	2002      	movs	r0, #2
    7474:	4b92      	ldr	r3, [pc, #584]	; (76c0 <check+0x780>)
    7476:	4798      	blx	r3
    7478:	7060      	strb	r0, [r4, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, LF_TRANSMIT_LENGTH);
    747a:	2202      	movs	r2, #2
    747c:	0021      	movs	r1, r4
    747e:	488e      	ldr	r0, [pc, #568]	; (76b8 <check+0x778>)
    7480:	4b8e      	ldr	r3, [pc, #568]	; (76bc <check+0x77c>)
    7482:	4798      	blx	r3
				break;
    7484:	e679      	b.n	717a <check+0x23a>
				echo_distance = get_ultrasound_distance();
    7486:	4b93      	ldr	r3, [pc, #588]	; (76d4 <check+0x794>)
    7488:	4798      	blx	r3
				echo_current[0]	= *echo_distance++;
    748a:	7803      	ldrb	r3, [r0, #0]
    748c:	b2db      	uxtb	r3, r3
    748e:	4a92      	ldr	r2, [pc, #584]	; (76d8 <check+0x798>)
    7490:	7013      	strb	r3, [r2, #0]
				echo_current[1]	= *echo_distance;
    7492:	7843      	ldrb	r3, [r0, #1]
    7494:	b2db      	uxtb	r3, r3
    7496:	7053      	strb	r3, [r2, #1]
				if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    7498:	4b90      	ldr	r3, [pc, #576]	; (76dc <check+0x79c>)
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	2b00      	cmp	r3, #0
    749e:	d103      	bne.n	74a8 <check+0x568>
    74a0:	7853      	ldrb	r3, [r2, #1]
    74a2:	b2db      	uxtb	r3, r3
    74a4:	2b75      	cmp	r3, #117	; 0x75
    74a6:	d90f      	bls.n	74c8 <check+0x588>
					transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    74a8:	ab02      	add	r3, sp, #8
    74aa:	2202      	movs	r2, #2
    74ac:	701a      	strb	r2, [r3, #0]
					transmit_value[2] = echo_prev[0];
    74ae:	498c      	ldr	r1, [pc, #560]	; (76e0 <check+0x7a0>)
    74b0:	780a      	ldrb	r2, [r1, #0]
    74b2:	b2d2      	uxtb	r2, r2
    74b4:	709a      	strb	r2, [r3, #2]
					transmit_value[1] = echo_prev[1];
    74b6:	784a      	ldrb	r2, [r1, #1]
    74b8:	b2d2      	uxtb	r2, r2
    74ba:	705a      	strb	r2, [r3, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, ULTRA_TRANSMIT_LENGTH);
    74bc:	2203      	movs	r2, #3
    74be:	a902      	add	r1, sp, #8
    74c0:	487d      	ldr	r0, [pc, #500]	; (76b8 <check+0x778>)
    74c2:	4b7e      	ldr	r3, [pc, #504]	; (76bc <check+0x77c>)
    74c4:	4798      	blx	r3
				break;
    74c6:	e658      	b.n	717a <check+0x23a>
					transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    74c8:	aa02      	add	r2, sp, #8
    74ca:	2302      	movs	r3, #2
    74cc:	7013      	strb	r3, [r2, #0]
					transmit_value[2] = echo_current[0];
    74ce:	4b82      	ldr	r3, [pc, #520]	; (76d8 <check+0x798>)
    74d0:	7819      	ldrb	r1, [r3, #0]
    74d2:	b2c9      	uxtb	r1, r1
    74d4:	7091      	strb	r1, [r2, #2]
					transmit_value[1] = echo_current[1];
    74d6:	7859      	ldrb	r1, [r3, #1]
    74d8:	b2c9      	uxtb	r1, r1
    74da:	7051      	strb	r1, [r2, #1]
					echo_prev[0]	  = echo_current[0];
    74dc:	781a      	ldrb	r2, [r3, #0]
    74de:	b2d2      	uxtb	r2, r2
    74e0:	497f      	ldr	r1, [pc, #508]	; (76e0 <check+0x7a0>)
    74e2:	700a      	strb	r2, [r1, #0]
					echo_prev[1]	  = echo_current[1];
    74e4:	785b      	ldrb	r3, [r3, #1]
    74e6:	b2db      	uxtb	r3, r3
    74e8:	704b      	strb	r3, [r1, #1]
    74ea:	e7e7      	b.n	74bc <check+0x57c>
				serial_timeout_count = 0;
    74ec:	2300      	movs	r3, #0
    74ee:	4a64      	ldr	r2, [pc, #400]	; (7680 <check+0x740>)
    74f0:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    74f2:	4c64      	ldr	r4, [pc, #400]	; (7684 <check+0x744>)
    74f4:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
    74f6:	a907      	add	r1, sp, #28
    74f8:	2001      	movs	r0, #1
    74fa:	4b63      	ldr	r3, [pc, #396]	; (7688 <check+0x748>)
    74fc:	4798      	blx	r3
				if(serial_timeout == false)
    74fe:	7823      	ldrb	r3, [r4, #0]
    7500:	2b00      	cmp	r3, #0
    7502:	d000      	beq.n	7506 <check+0x5c6>
    7504:	e639      	b.n	717a <check+0x23a>
					switch(received_value[1])
    7506:	ab07      	add	r3, sp, #28
    7508:	785b      	ldrb	r3, [r3, #1]
    750a:	3b31      	subs	r3, #49	; 0x31
    750c:	b2da      	uxtb	r2, r3
    750e:	2a05      	cmp	r2, #5
    7510:	d87d      	bhi.n	760e <check+0x6ce>
    7512:	0093      	lsls	r3, r2, #2
    7514:	4a73      	ldr	r2, [pc, #460]	; (76e4 <check+0x7a4>)
    7516:	58d3      	ldr	r3, [r2, r3]
    7518:	469f      	mov	pc, r3
							transmit_value[0] = L_TRANSMIT_LENGTH-1;
    751a:	ac02      	add	r4, sp, #8
    751c:	2302      	movs	r3, #2
    751e:	7023      	strb	r3, [r4, #0]
							transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    7520:	200b      	movs	r0, #11
    7522:	4d67      	ldr	r5, [pc, #412]	; (76c0 <check+0x780>)
    7524:	47a8      	blx	r5
    7526:	7060      	strb	r0, [r4, #1]
							transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    7528:	2003      	movs	r0, #3
    752a:	47a8      	blx	r5
    752c:	70a0      	strb	r0, [r4, #2]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, L_TRANSMIT_LENGTH);
    752e:	2203      	movs	r2, #3
    7530:	0021      	movs	r1, r4
    7532:	4861      	ldr	r0, [pc, #388]	; (76b8 <check+0x778>)
    7534:	4b61      	ldr	r3, [pc, #388]	; (76bc <check+0x77c>)
    7536:	4798      	blx	r3
							break;
    7538:	e61f      	b.n	717a <check+0x23a>
							get_accel_data();
    753a:	4b5d      	ldr	r3, [pc, #372]	; (76b0 <check+0x770>)
    753c:	4798      	blx	r3
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    753e:	4a5d      	ldr	r2, [pc, #372]	; (76b4 <check+0x774>)
    7540:	7813      	ldrb	r3, [r2, #0]
    7542:	7851      	ldrb	r1, [r2, #1]
    7544:	430b      	orrs	r3, r1
    7546:	7891      	ldrb	r1, [r2, #2]
    7548:	430b      	orrs	r3, r1
    754a:	78d2      	ldrb	r2, [r2, #3]
    754c:	4313      	orrs	r3, r2
    754e:	065b      	lsls	r3, r3, #25
    7550:	d50c      	bpl.n	756c <check+0x62c>
								get_accel_data();
    7552:	4e57      	ldr	r6, [pc, #348]	; (76b0 <check+0x770>)
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7554:	4c57      	ldr	r4, [pc, #348]	; (76b4 <check+0x774>)
    7556:	2540      	movs	r5, #64	; 0x40
								get_accel_data();
    7558:	47b0      	blx	r6
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    755a:	7823      	ldrb	r3, [r4, #0]
    755c:	7862      	ldrb	r2, [r4, #1]
    755e:	4313      	orrs	r3, r2
    7560:	78a2      	ldrb	r2, [r4, #2]
    7562:	4313      	orrs	r3, r2
    7564:	78e2      	ldrb	r2, [r4, #3]
    7566:	4313      	orrs	r3, r2
    7568:	421d      	tst	r5, r3
    756a:	d1f5      	bne.n	7558 <check+0x618>
							transmit_value[0] = ACCL_TRANSMIT_LENGTH-1; // legacy reasons
    756c:	a902      	add	r1, sp, #8
    756e:	2304      	movs	r3, #4
    7570:	700b      	strb	r3, [r1, #0]
								transmit_value[i] = bufferReceive[i-1];
    7572:	4b50      	ldr	r3, [pc, #320]	; (76b4 <check+0x774>)
    7574:	781a      	ldrb	r2, [r3, #0]
    7576:	704a      	strb	r2, [r1, #1]
    7578:	785a      	ldrb	r2, [r3, #1]
    757a:	708a      	strb	r2, [r1, #2]
    757c:	789a      	ldrb	r2, [r3, #2]
    757e:	70ca      	strb	r2, [r1, #3]
    7580:	78db      	ldrb	r3, [r3, #3]
    7582:	710b      	strb	r3, [r1, #4]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, ACCL_TRANSMIT_LENGTH);
    7584:	2205      	movs	r2, #5
    7586:	484c      	ldr	r0, [pc, #304]	; (76b8 <check+0x778>)
    7588:	4b4c      	ldr	r3, [pc, #304]	; (76bc <check+0x77c>)
    758a:	4798      	blx	r3
							break;
    758c:	e5f5      	b.n	717a <check+0x23a>
							transmit_value[0] = LF_TRANSMIT_LENGTH-1;
    758e:	ac02      	add	r4, sp, #8
    7590:	2301      	movs	r3, #1
    7592:	7023      	strb	r3, [r4, #0]
							transmit_value[1] = adc_start_read_result(LINE_FOLLOWER);
    7594:	2002      	movs	r0, #2
    7596:	4b4a      	ldr	r3, [pc, #296]	; (76c0 <check+0x780>)
    7598:	4798      	blx	r3
    759a:	7060      	strb	r0, [r4, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, LF_TRANSMIT_LENGTH);
    759c:	2202      	movs	r2, #2
    759e:	0021      	movs	r1, r4
    75a0:	4845      	ldr	r0, [pc, #276]	; (76b8 <check+0x778>)
    75a2:	4b46      	ldr	r3, [pc, #280]	; (76bc <check+0x77c>)
    75a4:	4798      	blx	r3
							break;
    75a6:	e5e8      	b.n	717a <check+0x23a>
							echo_distance = get_ultrasound_distance();
    75a8:	4b4a      	ldr	r3, [pc, #296]	; (76d4 <check+0x794>)
    75aa:	4798      	blx	r3
							transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    75ac:	a902      	add	r1, sp, #8
    75ae:	2302      	movs	r3, #2
    75b0:	700b      	strb	r3, [r1, #0]
							transmit_value[2] = *echo_distance++;
    75b2:	7803      	ldrb	r3, [r0, #0]
    75b4:	b2db      	uxtb	r3, r3
    75b6:	708b      	strb	r3, [r1, #2]
							transmit_value[1] = *echo_distance;
    75b8:	7843      	ldrb	r3, [r0, #1]
    75ba:	b2db      	uxtb	r3, r3
    75bc:	704b      	strb	r3, [r1, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, ULTRA_TRANSMIT_LENGTH);
    75be:	2203      	movs	r2, #3
    75c0:	483d      	ldr	r0, [pc, #244]	; (76b8 <check+0x778>)
    75c2:	4b3e      	ldr	r3, [pc, #248]	; (76bc <check+0x77c>)
    75c4:	4798      	blx	r3
							break;
    75c6:	e5d8      	b.n	717a <check+0x23a>
							transmit_value[0] = BATTERY_TRANSMIT_LENGTH-1;
    75c8:	ac02      	add	r4, sp, #8
    75ca:	2301      	movs	r3, #1
    75cc:	7023      	strb	r3, [r4, #0]
							temp_batt_level = adc_start_read_result(BATT_MTR);
    75ce:	200a      	movs	r0, #10
    75d0:	4b3b      	ldr	r3, [pc, #236]	; (76c0 <check+0x780>)
    75d2:	4798      	blx	r3
	return (port_base->OUT.reg & pin_mask);
    75d4:	4a44      	ldr	r2, [pc, #272]	; (76e8 <check+0x7a8>)
    75d6:	6912      	ldr	r2, [r2, #16]
    75d8:	0312      	lsls	r2, r2, #12
							temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    75da:	0fd2      	lsrs	r2, r2, #31
							temp_batt_level = temp_batt_level >> 1;
    75dc:	0843      	lsrs	r3, r0, #1
							temp_batt_status = temp_batt_status << 7;
    75de:	01d2      	lsls	r2, r2, #7
							transmit_value[1] = temp_batt_status | temp_batt_level;
    75e0:	4313      	orrs	r3, r2
    75e2:	b2db      	uxtb	r3, r3
    75e4:	7063      	strb	r3, [r4, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, BATTERY_TRANSMIT_LENGTH);
    75e6:	2202      	movs	r2, #2
    75e8:	0021      	movs	r1, r4
    75ea:	4833      	ldr	r0, [pc, #204]	; (76b8 <check+0x778>)
    75ec:	4b33      	ldr	r3, [pc, #204]	; (76bc <check+0x77c>)
    75ee:	4798      	blx	r3
							break;
    75f0:	e5c3      	b.n	717a <check+0x23a>
							transmit_value[0] = VERSION_TRANSMIT_LENGTH-1;
    75f2:	a902      	add	r1, sp, #8
    75f4:	2304      	movs	r3, #4
    75f6:	700b      	strb	r3, [r1, #0]
							transmit_value[1] = FW_VERSION_MSB;
    75f8:	2200      	movs	r2, #0
    75fa:	704a      	strb	r2, [r1, #1]
							transmit_value[2] = FW_VERSION_LSB;
    75fc:	3b03      	subs	r3, #3
    75fe:	708b      	strb	r3, [r1, #2]
							transmit_value[3] = HW_VERSION_MSB;
    7600:	70ca      	strb	r2, [r1, #3]
							transmit_value[4] = HW_VERSION_LSB;
    7602:	710b      	strb	r3, [r1, #4]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, VERSION_TRANSMIT_LENGTH);
    7604:	3205      	adds	r2, #5
    7606:	482c      	ldr	r0, [pc, #176]	; (76b8 <check+0x778>)
    7608:	4b2c      	ldr	r3, [pc, #176]	; (76bc <check+0x77c>)
    760a:	4798      	blx	r3
							break;
    760c:	e5b5      	b.n	717a <check+0x23a>
							head_ring_buffer = 0;
    760e:	2300      	movs	r3, #0
    7610:	4a1f      	ldr	r2, [pc, #124]	; (7690 <check+0x750>)
    7612:	7013      	strb	r3, [r2, #0]
							tail_ring_buffer = 0;
    7614:	4a1f      	ldr	r2, [pc, #124]	; (7694 <check+0x754>)
    7616:	7013      	strb	r3, [r2, #0]
							break;
    7618:	e5af      	b.n	717a <check+0x23a>
				transmit_value[0] = BATTERY_TRANSMIT_LENGTH-1;
    761a:	ac02      	add	r4, sp, #8
    761c:	2301      	movs	r3, #1
    761e:	7023      	strb	r3, [r4, #0]
				temp_batt_level = adc_start_read_result(BATT_MTR);
    7620:	200a      	movs	r0, #10
    7622:	4b27      	ldr	r3, [pc, #156]	; (76c0 <check+0x780>)
    7624:	4798      	blx	r3
    7626:	4b30      	ldr	r3, [pc, #192]	; (76e8 <check+0x7a8>)
    7628:	691b      	ldr	r3, [r3, #16]
    762a:	031b      	lsls	r3, r3, #12
				temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    762c:	0fdb      	lsrs	r3, r3, #31
				temp_batt_level = temp_batt_level >> 1;
    762e:	0840      	lsrs	r0, r0, #1
				temp_batt_status = temp_batt_status << 7;
    7630:	01db      	lsls	r3, r3, #7
				transmit_value[1] = temp_batt_status | temp_batt_level;
    7632:	4318      	orrs	r0, r3
    7634:	b2c0      	uxtb	r0, r0
    7636:	7060      	strb	r0, [r4, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, BATTERY_TRANSMIT_LENGTH);
    7638:	2202      	movs	r2, #2
    763a:	0021      	movs	r1, r4
    763c:	481e      	ldr	r0, [pc, #120]	; (76b8 <check+0x778>)
    763e:	4b1f      	ldr	r3, [pc, #124]	; (76bc <check+0x77c>)
    7640:	4798      	blx	r3
				break;
    7642:	e59a      	b.n	717a <check+0x23a>
				turn_off_motors();
    7644:	4b19      	ldr	r3, [pc, #100]	; (76ac <check+0x76c>)
    7646:	4798      	blx	r3
				turn_off_speaker();
    7648:	4b28      	ldr	r3, [pc, #160]	; (76ec <check+0x7ac>)
    764a:	4798      	blx	r3
				switch_off_LEDS();
    764c:	4b28      	ldr	r3, [pc, #160]	; (76f0 <check+0x7b0>)
    764e:	4798      	blx	r3
				break;
    7650:	e593      	b.n	717a <check+0x23a>
				head_ring_buffer = 0;
    7652:	2300      	movs	r3, #0
    7654:	4a0e      	ldr	r2, [pc, #56]	; (7690 <check+0x750>)
    7656:	7013      	strb	r3, [r2, #0]
				tail_ring_buffer = 0;
    7658:	4a0e      	ldr	r2, [pc, #56]	; (7694 <check+0x754>)
    765a:	7013      	strb	r3, [r2, #0]
				break;
    765c:	e58d      	b.n	717a <check+0x23a>
				transmit_value[9] = echo_current[0];
    765e:	4b1e      	ldr	r3, [pc, #120]	; (76d8 <check+0x798>)
    7660:	781a      	ldrb	r2, [r3, #0]
    7662:	b2d2      	uxtb	r2, r2
    7664:	a902      	add	r1, sp, #8
    7666:	724a      	strb	r2, [r1, #9]
				transmit_value[8] = echo_current[1];
    7668:	785a      	ldrb	r2, [r3, #1]
    766a:	b2d2      	uxtb	r2, r2
    766c:	720a      	strb	r2, [r1, #8]
				echo_prev[0]	  = echo_current[0];
    766e:	781a      	ldrb	r2, [r3, #0]
    7670:	b2d2      	uxtb	r2, r2
    7672:	491b      	ldr	r1, [pc, #108]	; (76e0 <check+0x7a0>)
    7674:	700a      	strb	r2, [r1, #0]
				echo_prev[1]	  = echo_current[1];
    7676:	785b      	ldrb	r3, [r3, #1]
    7678:	b2db      	uxtb	r3, r3
    767a:	704b      	strb	r3, [r1, #1]
    767c:	e5e8      	b.n	7250 <check+0x310>
    767e:	46c0      	nop			; (mov r8, r8)
    7680:	200003eb 	.word	0x200003eb
    7684:	200003ea 	.word	0x200003ea
    7688:	00006eed 	.word	0x00006eed
    768c:	200003c8 	.word	0x200003c8
    7690:	200003d2 	.word	0x200003d2
    7694:	200003ec 	.word	0x200003ec
    7698:	200003c0 	.word	0x200003c0
    769c:	00001145 	.word	0x00001145
    76a0:	00001159 	.word	0x00001159
    76a4:	00001ac1 	.word	0x00001ac1
    76a8:	00001b65 	.word	0x00001b65
    76ac:	00001c09 	.word	0x00001c09
    76b0:	00001971 	.word	0x00001971
    76b4:	200005b8 	.word	0x200005b8
    76b8:	20000584 	.word	0x20000584
    76bc:	000007e9 	.word	0x000007e9
    76c0:	00006e1d 	.word	0x00006e1d
    76c4:	200003c4 	.word	0x200003c4
    76c8:	200003c2 	.word	0x200003c2
    76cc:	200003c6 	.word	0x200003c6
    76d0:	000021c5 	.word	0x000021c5
    76d4:	00001741 	.word	0x00001741
    76d8:	200003cc 	.word	0x200003cc
    76dc:	200003e9 	.word	0x200003e9
    76e0:	200003d0 	.word	0x200003d0
    76e4:	0000a9c0 	.word	0x0000a9c0
    76e8:	41004400 	.word	0x41004400
    76ec:	00002269 	.word	0x00002269
    76f0:	000013e5 	.word	0x000013e5

000076f4 <main>:
int main(void)
{
    76f4:	b570      	push	{r4, r5, r6, lr}
	static uint16_t i =0;
	uint8_t received_value[MAX_REC_BYTE];
	
	configure_power_enable_pins();
    76f6:	4b24      	ldr	r3, [pc, #144]	; (7788 <main+0x94>)
    76f8:	4798      	blx	r3
	enable_power_ic();
    76fa:	4b24      	ldr	r3, [pc, #144]	; (778c <main+0x98>)
    76fc:	4798      	blx	r3
	
	board_init(); //Predefined
    76fe:	4b24      	ldr	r3, [pc, #144]	; (7790 <main+0x9c>)
    7700:	4798      	blx	r3
	system_init(); //Predefined
    7702:	4b24      	ldr	r3, [pc, #144]	; (7794 <main+0xa0>)
    7704:	4798      	blx	r3
	
	irq_initialize_vectors();
	cpu_irq_enable();
    7706:	4e24      	ldr	r6, [pc, #144]	; (7798 <main+0xa4>)
    7708:	2501      	movs	r5, #1
    770a:	7035      	strb	r5, [r6, #0]
    770c:	f3bf 8f5f 	dmb	sy
    7710:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    7712:	4b22      	ldr	r3, [pc, #136]	; (779c <main+0xa8>)
    7714:	2400      	movs	r4, #0
    7716:	701c      	strb	r4, [r3, #0]
    7718:	705c      	strb	r4, [r3, #1]
    771a:	709c      	strb	r4, [r3, #2]
    771c:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    771e:	711d      	strb	r5, [r3, #4]
	//Initialize the sleep manager
	sleepmgr_init();

	delay_init();
    7720:	4b1f      	ldr	r3, [pc, #124]	; (77a0 <main+0xac>)
    7722:	4798      	blx	r3
	config_test_pins();
    7724:	4b1f      	ldr	r3, [pc, #124]	; (77a4 <main+0xb0>)
    7726:	4798      	blx	r3

	ui_init();
    7728:	4b1f      	ldr	r3, [pc, #124]	; (77a8 <main+0xb4>)
    772a:	4798      	blx	r3
	ui_powerdown();
    772c:	4b1f      	ldr	r3, [pc, #124]	; (77ac <main+0xb8>)
    772e:	4798      	blx	r3
	
	configure_rgb_led();
    7730:	4b1f      	ldr	r3, [pc, #124]	; (77b0 <main+0xbc>)
    7732:	4798      	blx	r3
	configure_tc_callbacks();
    7734:	4b1f      	ldr	r3, [pc, #124]	; (77b4 <main+0xc0>)
    7736:	4798      	blx	r3
	
	configure_adc();
    7738:	4b1f      	ldr	r3, [pc, #124]	; (77b8 <main+0xc4>)
    773a:	4798      	blx	r3
	config_motors();
    773c:	4b1f      	ldr	r3, [pc, #124]	; (77bc <main+0xc8>)
    773e:	4798      	blx	r3
	
	configure_batt_status();
    7740:	4b1f      	ldr	r3, [pc, #124]	; (77c0 <main+0xcc>)
    7742:	4798      	blx	r3
	check_batterylevel_initial();
    7744:	4b1f      	ldr	r3, [pc, #124]	; (77c4 <main+0xd0>)
    7746:	4798      	blx	r3
//configure_dac();
//configure_dac_channel();
//config_ir();
//configure_tcc_callbacks();

	configure_buzzer();	
    7748:	4b1f      	ldr	r3, [pc, #124]	; (77c8 <main+0xd4>)
    774a:	4798      	blx	r3
	config_accel(); // Need to do this before USB to get I2C working while allowing USB to use the other two pins of SERCOM3
    774c:	4b1f      	ldr	r3, [pc, #124]	; (77cc <main+0xd8>)
    774e:	4798      	blx	r3

	configure_ultrasound();
    7750:	4b1f      	ldr	r3, [pc, #124]	; (77d0 <main+0xdc>)
    7752:	4798      	blx	r3
	setup_ultrasound();
    7754:	4b1f      	ldr	r3, [pc, #124]	; (77d4 <main+0xe0>)
    7756:	4798      	blx	r3
//configure_tc3();
	
	configure_encoders();
    7758:	4b1f      	ldr	r3, [pc, #124]	; (77d8 <main+0xe4>)
    775a:	4798      	blx	r3
	//while(1)
	//{
		//read_encoders();
	//}
	calc_baud = (uint8_t)(system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + 1)/10000000);
    775c:	2015      	movs	r0, #21
    775e:	4b1f      	ldr	r3, [pc, #124]	; (77dc <main+0xe8>)
    7760:	4798      	blx	r3
    7762:	491f      	ldr	r1, [pc, #124]	; (77e0 <main+0xec>)
    7764:	4b1f      	ldr	r3, [pc, #124]	; (77e4 <main+0xf0>)
    7766:	4798      	blx	r3
    7768:	4b1f      	ldr	r3, [pc, #124]	; (77e8 <main+0xf4>)
    776a:	7018      	strb	r0, [r3, #0]
	// Start USB stack to authorize VBus monitoring
	serial_ble_configure();
    776c:	4b1f      	ldr	r3, [pc, #124]	; (77ec <main+0xf8>)
    776e:	4798      	blx	r3
	
	udc_start();
    7770:	4b1f      	ldr	r3, [pc, #124]	; (77f0 <main+0xfc>)
    7772:	4798      	blx	r3
	cpu_irq_enable();
    7774:	7035      	strb	r5, [r6, #0]
    7776:	f3bf 8f5f 	dmb	sy
    777a:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	count_broadcast = 0;
    777c:	4b1d      	ldr	r3, [pc, #116]	; (77f4 <main+0x100>)
    777e:	701c      	strb	r4, [r3, #0]
	
	while (true) 
	{
		check();
    7780:	4c1d      	ldr	r4, [pc, #116]	; (77f8 <main+0x104>)
    7782:	47a0      	blx	r4
    7784:	e7fd      	b.n	7782 <main+0x8e>
    7786:	46c0      	nop			; (mov r8, r8)
    7788:	00001419 	.word	0x00001419
    778c:	00001405 	.word	0x00001405
    7790:	00000b91 	.word	0x00000b91
    7794:	000046d1 	.word	0x000046d1
    7798:	20000122 	.word	0x20000122
    779c:	20000640 	.word	0x20000640
    77a0:	000019ad 	.word	0x000019ad
    77a4:	00006ecd 	.word	0x00006ecd
    77a8:	00002309 	.word	0x00002309
    77ac:	0000230b 	.word	0x0000230b
    77b0:	000012cd 	.word	0x000012cd
    77b4:	00001361 	.word	0x00001361
    77b8:	00006db5 	.word	0x00006db5
    77bc:	00001a45 	.word	0x00001a45
    77c0:	00000b85 	.word	0x00000b85
    77c4:	00000ab5 	.word	0x00000ab5
    77c8:	000022ed 	.word	0x000022ed
    77cc:	00001835 	.word	0x00001835
    77d0:	000017e1 	.word	0x000017e1
    77d4:	00001709 	.word	0x00001709
    77d8:	00000ee9 	.word	0x00000ee9
    77dc:	000045c5 	.word	0x000045c5
    77e0:	00989680 	.word	0x00989680
    77e4:	00008bd5 	.word	0x00008bd5
    77e8:	200005e5 	.word	0x200005e5
    77ec:	00001575 	.word	0x00001575
    77f0:	00002a79 	.word	0x00002a79
    77f4:	200003c8 	.word	0x200003c8
    77f8:	00006f41 	.word	0x00006f41

000077fc <main_suspend_action>:
	
	}
}

void main_suspend_action(void)
{
    77fc:	b510      	push	{r4, lr}
	ui_powerdown();
    77fe:	4b01      	ldr	r3, [pc, #4]	; (7804 <main_suspend_action+0x8>)
    7800:	4798      	blx	r3
}
    7802:	bd10      	pop	{r4, pc}
    7804:	0000230b 	.word	0x0000230b

00007808 <main_resume_action>:

void main_resume_action(void)
{
    7808:	b510      	push	{r4, lr}
	ui_wakeup();
    780a:	4b01      	ldr	r3, [pc, #4]	; (7810 <main_resume_action+0x8>)
    780c:	4798      	blx	r3
}
    780e:	bd10      	pop	{r4, pc}
    7810:	00002311 	.word	0x00002311

00007814 <main_sof_action>:

void main_sof_action(void)
{
    7814:	b510      	push	{r4, lr}
	if (!main_b_generic_enable)
    7816:	4b05      	ldr	r3, [pc, #20]	; (782c <main_sof_action+0x18>)
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	2b00      	cmp	r3, #0
    781c:	d100      	bne.n	7820 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    781e:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    7820:	4b03      	ldr	r3, [pc, #12]	; (7830 <main_sof_action+0x1c>)
    7822:	4798      	blx	r3
    7824:	4b03      	ldr	r3, [pc, #12]	; (7834 <main_sof_action+0x20>)
    7826:	4798      	blx	r3
    7828:	e7f9      	b.n	781e <main_sof_action+0xa>
    782a:	46c0      	nop			; (mov r8, r8)
    782c:	200003d3 	.word	0x200003d3
    7830:	00005835 	.word	0x00005835
    7834:	00002313 	.word	0x00002313

00007838 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    7838:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    783a:	4b01      	ldr	r3, [pc, #4]	; (7840 <main_remotewakeup_enable+0x8>)
    783c:	4798      	blx	r3
}
    783e:	bd10      	pop	{r4, pc}
    7840:	0000230d 	.word	0x0000230d

00007844 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    7844:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    7846:	4b01      	ldr	r3, [pc, #4]	; (784c <main_remotewakeup_disable+0x8>)
    7848:	4798      	blx	r3
}
    784a:	bd10      	pop	{r4, pc}
    784c:	0000230f 	.word	0x0000230f

00007850 <main_generic_enable>:

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    7850:	2201      	movs	r2, #1
    7852:	4b02      	ldr	r3, [pc, #8]	; (785c <main_generic_enable+0xc>)
    7854:	701a      	strb	r2, [r3, #0]
	return true;
}
    7856:	2001      	movs	r0, #1
    7858:	4770      	bx	lr
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	200003d3 	.word	0x200003d3

00007860 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    7860:	2200      	movs	r2, #0
    7862:	4b01      	ldr	r3, [pc, #4]	; (7868 <main_generic_disable+0x8>)
    7864:	701a      	strb	r2, [r3, #0]
}
    7866:	4770      	bx	lr
    7868:	200003d3 	.word	0x200003d3

0000786c <main_hid_set_feature>:
			&& report[2] == 0xAA && report[3] == 0x55) {
		// Disconnect USB Device
		udc_stop();
		ui_powerdown();
	}*/
}
    786c:	4770      	bx	lr
	...

00007870 <sin>:
    7870:	b530      	push	{r4, r5, lr}
    7872:	4a21      	ldr	r2, [pc, #132]	; (78f8 <sin+0x88>)
    7874:	004b      	lsls	r3, r1, #1
    7876:	b087      	sub	sp, #28
    7878:	085b      	lsrs	r3, r3, #1
    787a:	4293      	cmp	r3, r2
    787c:	dd1e      	ble.n	78bc <sin+0x4c>
    787e:	4a1f      	ldr	r2, [pc, #124]	; (78fc <sin+0x8c>)
    7880:	4293      	cmp	r3, r2
    7882:	dd05      	ble.n	7890 <sin+0x20>
    7884:	0002      	movs	r2, r0
    7886:	000b      	movs	r3, r1
    7888:	f002 fa6e 	bl	9d68 <__aeabi_dsub>
    788c:	b007      	add	sp, #28
    788e:	bd30      	pop	{r4, r5, pc}
    7890:	aa02      	add	r2, sp, #8
    7892:	f000 f835 	bl	7900 <__ieee754_rem_pio2>
    7896:	2303      	movs	r3, #3
    7898:	4018      	ands	r0, r3
    789a:	9a04      	ldr	r2, [sp, #16]
    789c:	9b05      	ldr	r3, [sp, #20]
    789e:	2801      	cmp	r0, #1
    78a0:	d01e      	beq.n	78e0 <sin+0x70>
    78a2:	2802      	cmp	r0, #2
    78a4:	d011      	beq.n	78ca <sin+0x5a>
    78a6:	2800      	cmp	r0, #0
    78a8:	d01f      	beq.n	78ea <sin+0x7a>
    78aa:	9802      	ldr	r0, [sp, #8]
    78ac:	9903      	ldr	r1, [sp, #12]
    78ae:	f000 fa3f 	bl	7d30 <__kernel_cos>
    78b2:	2380      	movs	r3, #128	; 0x80
    78b4:	061b      	lsls	r3, r3, #24
    78b6:	469c      	mov	ip, r3
    78b8:	4461      	add	r1, ip
    78ba:	e7e7      	b.n	788c <sin+0x1c>
    78bc:	2300      	movs	r3, #0
    78be:	2200      	movs	r2, #0
    78c0:	9300      	str	r3, [sp, #0]
    78c2:	2300      	movs	r3, #0
    78c4:	f000 ffca 	bl	885c <__kernel_sin>
    78c8:	e7e0      	b.n	788c <sin+0x1c>
    78ca:	2401      	movs	r4, #1
    78cc:	9802      	ldr	r0, [sp, #8]
    78ce:	9903      	ldr	r1, [sp, #12]
    78d0:	9400      	str	r4, [sp, #0]
    78d2:	f000 ffc3 	bl	885c <__kernel_sin>
    78d6:	2380      	movs	r3, #128	; 0x80
    78d8:	061b      	lsls	r3, r3, #24
    78da:	469c      	mov	ip, r3
    78dc:	4461      	add	r1, ip
    78de:	e7d5      	b.n	788c <sin+0x1c>
    78e0:	9802      	ldr	r0, [sp, #8]
    78e2:	9903      	ldr	r1, [sp, #12]
    78e4:	f000 fa24 	bl	7d30 <__kernel_cos>
    78e8:	e7d0      	b.n	788c <sin+0x1c>
    78ea:	2401      	movs	r4, #1
    78ec:	9802      	ldr	r0, [sp, #8]
    78ee:	9903      	ldr	r1, [sp, #12]
    78f0:	9400      	str	r4, [sp, #0]
    78f2:	f000 ffb3 	bl	885c <__kernel_sin>
    78f6:	e7c9      	b.n	788c <sin+0x1c>
    78f8:	3fe921fb 	.word	0x3fe921fb
    78fc:	7fefffff 	.word	0x7fefffff

00007900 <__ieee754_rem_pio2>:
    7900:	b5f0      	push	{r4, r5, r6, r7, lr}
    7902:	464e      	mov	r6, r9
    7904:	4645      	mov	r5, r8
    7906:	46de      	mov	lr, fp
    7908:	4657      	mov	r7, sl
    790a:	b5e0      	push	{r5, r6, r7, lr}
    790c:	4bd4      	ldr	r3, [pc, #848]	; (7c60 <__ieee754_rem_pio2+0x360>)
    790e:	004c      	lsls	r4, r1, #1
    7910:	b08f      	sub	sp, #60	; 0x3c
    7912:	4690      	mov	r8, r2
    7914:	4689      	mov	r9, r1
    7916:	0864      	lsrs	r4, r4, #1
    7918:	429c      	cmp	r4, r3
    791a:	dc00      	bgt.n	791e <__ieee754_rem_pio2+0x1e>
    791c:	e087      	b.n	7a2e <__ieee754_rem_pio2+0x12e>
    791e:	4bd1      	ldr	r3, [pc, #836]	; (7c64 <__ieee754_rem_pio2+0x364>)
    7920:	429c      	cmp	r4, r3
    7922:	dc22      	bgt.n	796a <__ieee754_rem_pio2+0x6a>
    7924:	4ad0      	ldr	r2, [pc, #832]	; (7c68 <__ieee754_rem_pio2+0x368>)
    7926:	2900      	cmp	r1, #0
    7928:	dc00      	bgt.n	792c <__ieee754_rem_pio2+0x2c>
    792a:	e1bf      	b.n	7cac <__ieee754_rem_pio2+0x3ac>
    792c:	4bcf      	ldr	r3, [pc, #828]	; (7c6c <__ieee754_rem_pio2+0x36c>)
    792e:	f002 fa1b 	bl	9d68 <__aeabi_dsub>
    7932:	4bce      	ldr	r3, [pc, #824]	; (7c6c <__ieee754_rem_pio2+0x36c>)
    7934:	0006      	movs	r6, r0
    7936:	000f      	movs	r7, r1
    7938:	429c      	cmp	r4, r3
    793a:	d100      	bne.n	793e <__ieee754_rem_pio2+0x3e>
    793c:	e094      	b.n	7a68 <__ieee754_rem_pio2+0x168>
    793e:	4acc      	ldr	r2, [pc, #816]	; (7c70 <__ieee754_rem_pio2+0x370>)
    7940:	4bcc      	ldr	r3, [pc, #816]	; (7c74 <__ieee754_rem_pio2+0x374>)
    7942:	f002 fa11 	bl	9d68 <__aeabi_dsub>
    7946:	0002      	movs	r2, r0
    7948:	000b      	movs	r3, r1
    794a:	4641      	mov	r1, r8
    794c:	0030      	movs	r0, r6
    794e:	600a      	str	r2, [r1, #0]
    7950:	604b      	str	r3, [r1, #4]
    7952:	0039      	movs	r1, r7
    7954:	f002 fa08 	bl	9d68 <__aeabi_dsub>
    7958:	4bc6      	ldr	r3, [pc, #792]	; (7c74 <__ieee754_rem_pio2+0x374>)
    795a:	4ac5      	ldr	r2, [pc, #788]	; (7c70 <__ieee754_rem_pio2+0x370>)
    795c:	f002 fa04 	bl	9d68 <__aeabi_dsub>
    7960:	4643      	mov	r3, r8
    7962:	2501      	movs	r5, #1
    7964:	6098      	str	r0, [r3, #8]
    7966:	60d9      	str	r1, [r3, #12]
    7968:	e06b      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    796a:	4bc3      	ldr	r3, [pc, #780]	; (7c78 <__ieee754_rem_pio2+0x378>)
    796c:	429c      	cmp	r4, r3
    796e:	dc00      	bgt.n	7972 <__ieee754_rem_pio2+0x72>
    7970:	e097      	b.n	7aa2 <__ieee754_rem_pio2+0x1a2>
    7972:	4bc2      	ldr	r3, [pc, #776]	; (7c7c <__ieee754_rem_pio2+0x37c>)
    7974:	429c      	cmp	r4, r3
    7976:	dc6c      	bgt.n	7a52 <__ieee754_rem_pio2+0x152>
    7978:	4ac1      	ldr	r2, [pc, #772]	; (7c80 <__ieee754_rem_pio2+0x380>)
    797a:	1523      	asrs	r3, r4, #20
    797c:	4692      	mov	sl, r2
    797e:	449a      	add	sl, r3
    7980:	4651      	mov	r1, sl
    7982:	0509      	lsls	r1, r1, #20
    7984:	1a63      	subs	r3, r4, r1
    7986:	0019      	movs	r1, r3
    7988:	001d      	movs	r5, r3
    798a:	0004      	movs	r4, r0
    798c:	f002 fd02 	bl	a394 <__aeabi_d2iz>
    7990:	f002 fd34 	bl	a3fc <__aeabi_i2d>
    7994:	0002      	movs	r2, r0
    7996:	000b      	movs	r3, r1
    7998:	0020      	movs	r0, r4
    799a:	0029      	movs	r1, r5
    799c:	9208      	str	r2, [sp, #32]
    799e:	9309      	str	r3, [sp, #36]	; 0x24
    79a0:	f002 f9e2 	bl	9d68 <__aeabi_dsub>
    79a4:	2200      	movs	r2, #0
    79a6:	4bb7      	ldr	r3, [pc, #732]	; (7c84 <__ieee754_rem_pio2+0x384>)
    79a8:	f001 ff5e 	bl	9868 <__aeabi_dmul>
    79ac:	000f      	movs	r7, r1
    79ae:	0006      	movs	r6, r0
    79b0:	f002 fcf0 	bl	a394 <__aeabi_d2iz>
    79b4:	f002 fd22 	bl	a3fc <__aeabi_i2d>
    79b8:	0004      	movs	r4, r0
    79ba:	000d      	movs	r5, r1
    79bc:	0002      	movs	r2, r0
    79be:	000b      	movs	r3, r1
    79c0:	0030      	movs	r0, r6
    79c2:	0039      	movs	r1, r7
    79c4:	940a      	str	r4, [sp, #40]	; 0x28
    79c6:	950b      	str	r5, [sp, #44]	; 0x2c
    79c8:	f002 f9ce 	bl	9d68 <__aeabi_dsub>
    79cc:	2200      	movs	r2, #0
    79ce:	4bad      	ldr	r3, [pc, #692]	; (7c84 <__ieee754_rem_pio2+0x384>)
    79d0:	f001 ff4a 	bl	9868 <__aeabi_dmul>
    79d4:	2200      	movs	r2, #0
    79d6:	2300      	movs	r3, #0
    79d8:	900c      	str	r0, [sp, #48]	; 0x30
    79da:	910d      	str	r1, [sp, #52]	; 0x34
    79dc:	f001 fa80 	bl	8ee0 <__aeabi_dcmpeq>
    79e0:	2800      	cmp	r0, #0
    79e2:	d100      	bne.n	79e6 <__ieee754_rem_pio2+0xe6>
    79e4:	e181      	b.n	7cea <__ieee754_rem_pio2+0x3ea>
    79e6:	2300      	movs	r3, #0
    79e8:	2200      	movs	r2, #0
    79ea:	0020      	movs	r0, r4
    79ec:	0029      	movs	r1, r5
    79ee:	f001 fa77 	bl	8ee0 <__aeabi_dcmpeq>
    79f2:	4243      	negs	r3, r0
    79f4:	4143      	adcs	r3, r0
    79f6:	3301      	adds	r3, #1
    79f8:	4aa3      	ldr	r2, [pc, #652]	; (7c88 <__ieee754_rem_pio2+0x388>)
    79fa:	4641      	mov	r1, r8
    79fc:	9201      	str	r2, [sp, #4]
    79fe:	2202      	movs	r2, #2
    7a00:	a808      	add	r0, sp, #32
    7a02:	9200      	str	r2, [sp, #0]
    7a04:	4652      	mov	r2, sl
    7a06:	f000 faad 	bl	7f64 <__kernel_rem_pio2>
    7a0a:	464b      	mov	r3, r9
    7a0c:	0005      	movs	r5, r0
    7a0e:	2b00      	cmp	r3, #0
    7a10:	da17      	bge.n	7a42 <__ieee754_rem_pio2+0x142>
    7a12:	2280      	movs	r2, #128	; 0x80
    7a14:	4643      	mov	r3, r8
    7a16:	0612      	lsls	r2, r2, #24
    7a18:	4694      	mov	ip, r2
    7a1a:	4642      	mov	r2, r8
    7a1c:	685b      	ldr	r3, [r3, #4]
    7a1e:	4245      	negs	r5, r0
    7a20:	4463      	add	r3, ip
    7a22:	6053      	str	r3, [r2, #4]
    7a24:	68d3      	ldr	r3, [r2, #12]
    7a26:	4642      	mov	r2, r8
    7a28:	4463      	add	r3, ip
    7a2a:	60d3      	str	r3, [r2, #12]
    7a2c:	e009      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7a2e:	000b      	movs	r3, r1
    7a30:	0002      	movs	r2, r0
    7a32:	4641      	mov	r1, r8
    7a34:	600a      	str	r2, [r1, #0]
    7a36:	604b      	str	r3, [r1, #4]
    7a38:	2200      	movs	r2, #0
    7a3a:	2300      	movs	r3, #0
    7a3c:	2500      	movs	r5, #0
    7a3e:	608a      	str	r2, [r1, #8]
    7a40:	60cb      	str	r3, [r1, #12]
    7a42:	0028      	movs	r0, r5
    7a44:	b00f      	add	sp, #60	; 0x3c
    7a46:	bc3c      	pop	{r2, r3, r4, r5}
    7a48:	4690      	mov	r8, r2
    7a4a:	4699      	mov	r9, r3
    7a4c:	46a2      	mov	sl, r4
    7a4e:	46ab      	mov	fp, r5
    7a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a52:	000b      	movs	r3, r1
    7a54:	0002      	movs	r2, r0
    7a56:	f002 f987 	bl	9d68 <__aeabi_dsub>
    7a5a:	4643      	mov	r3, r8
    7a5c:	2500      	movs	r5, #0
    7a5e:	6098      	str	r0, [r3, #8]
    7a60:	60d9      	str	r1, [r3, #12]
    7a62:	6018      	str	r0, [r3, #0]
    7a64:	6059      	str	r1, [r3, #4]
    7a66:	e7ec      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7a68:	22d3      	movs	r2, #211	; 0xd3
    7a6a:	4b82      	ldr	r3, [pc, #520]	; (7c74 <__ieee754_rem_pio2+0x374>)
    7a6c:	0552      	lsls	r2, r2, #21
    7a6e:	f002 f97b 	bl	9d68 <__aeabi_dsub>
    7a72:	4a86      	ldr	r2, [pc, #536]	; (7c8c <__ieee754_rem_pio2+0x38c>)
    7a74:	4b86      	ldr	r3, [pc, #536]	; (7c90 <__ieee754_rem_pio2+0x390>)
    7a76:	000d      	movs	r5, r1
    7a78:	0004      	movs	r4, r0
    7a7a:	f002 f975 	bl	9d68 <__aeabi_dsub>
    7a7e:	0002      	movs	r2, r0
    7a80:	000b      	movs	r3, r1
    7a82:	4641      	mov	r1, r8
    7a84:	0020      	movs	r0, r4
    7a86:	600a      	str	r2, [r1, #0]
    7a88:	604b      	str	r3, [r1, #4]
    7a8a:	0029      	movs	r1, r5
    7a8c:	f002 f96c 	bl	9d68 <__aeabi_dsub>
    7a90:	4b7f      	ldr	r3, [pc, #508]	; (7c90 <__ieee754_rem_pio2+0x390>)
    7a92:	4a7e      	ldr	r2, [pc, #504]	; (7c8c <__ieee754_rem_pio2+0x38c>)
    7a94:	f002 f968 	bl	9d68 <__aeabi_dsub>
    7a98:	4643      	mov	r3, r8
    7a9a:	2501      	movs	r5, #1
    7a9c:	6098      	str	r0, [r3, #8]
    7a9e:	60d9      	str	r1, [r3, #12]
    7aa0:	e7cf      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7aa2:	f000 ff8b 	bl	89bc <fabs>
    7aa6:	4a7b      	ldr	r2, [pc, #492]	; (7c94 <__ieee754_rem_pio2+0x394>)
    7aa8:	4b7b      	ldr	r3, [pc, #492]	; (7c98 <__ieee754_rem_pio2+0x398>)
    7aaa:	0006      	movs	r6, r0
    7aac:	000f      	movs	r7, r1
    7aae:	f001 fedb 	bl	9868 <__aeabi_dmul>
    7ab2:	2200      	movs	r2, #0
    7ab4:	4b79      	ldr	r3, [pc, #484]	; (7c9c <__ieee754_rem_pio2+0x39c>)
    7ab6:	f001 fac7 	bl	9048 <__aeabi_dadd>
    7aba:	f002 fc6b 	bl	a394 <__aeabi_d2iz>
    7abe:	0005      	movs	r5, r0
    7ac0:	f002 fc9c 	bl	a3fc <__aeabi_i2d>
    7ac4:	4a68      	ldr	r2, [pc, #416]	; (7c68 <__ieee754_rem_pio2+0x368>)
    7ac6:	4b69      	ldr	r3, [pc, #420]	; (7c6c <__ieee754_rem_pio2+0x36c>)
    7ac8:	9004      	str	r0, [sp, #16]
    7aca:	9105      	str	r1, [sp, #20]
    7acc:	f001 fecc 	bl	9868 <__aeabi_dmul>
    7ad0:	0002      	movs	r2, r0
    7ad2:	000b      	movs	r3, r1
    7ad4:	0030      	movs	r0, r6
    7ad6:	0039      	movs	r1, r7
    7ad8:	f002 f946 	bl	9d68 <__aeabi_dsub>
    7adc:	4a64      	ldr	r2, [pc, #400]	; (7c70 <__ieee754_rem_pio2+0x370>)
    7ade:	0006      	movs	r6, r0
    7ae0:	000f      	movs	r7, r1
    7ae2:	9804      	ldr	r0, [sp, #16]
    7ae4:	9905      	ldr	r1, [sp, #20]
    7ae6:	4b63      	ldr	r3, [pc, #396]	; (7c74 <__ieee754_rem_pio2+0x374>)
    7ae8:	f001 febe 	bl	9868 <__aeabi_dmul>
    7aec:	9002      	str	r0, [sp, #8]
    7aee:	9103      	str	r1, [sp, #12]
    7af0:	2d1f      	cmp	r5, #31
    7af2:	dc33      	bgt.n	7b5c <__ieee754_rem_pio2+0x25c>
    7af4:	1e6b      	subs	r3, r5, #1
    7af6:	4a6a      	ldr	r2, [pc, #424]	; (7ca0 <__ieee754_rem_pio2+0x3a0>)
    7af8:	009b      	lsls	r3, r3, #2
    7afa:	589b      	ldr	r3, [r3, r2]
    7afc:	429c      	cmp	r4, r3
    7afe:	d02d      	beq.n	7b5c <__ieee754_rem_pio2+0x25c>
    7b00:	0002      	movs	r2, r0
    7b02:	000b      	movs	r3, r1
    7b04:	0030      	movs	r0, r6
    7b06:	0039      	movs	r1, r7
    7b08:	f002 f92e 	bl	9d68 <__aeabi_dsub>
    7b0c:	000b      	movs	r3, r1
    7b0e:	468a      	mov	sl, r1
    7b10:	0002      	movs	r2, r0
    7b12:	4641      	mov	r1, r8
    7b14:	4683      	mov	fp, r0
    7b16:	600a      	str	r2, [r1, #0]
    7b18:	604b      	str	r3, [r1, #4]
    7b1a:	465a      	mov	r2, fp
    7b1c:	4653      	mov	r3, sl
    7b1e:	0030      	movs	r0, r6
    7b20:	0039      	movs	r1, r7
    7b22:	f002 f921 	bl	9d68 <__aeabi_dsub>
    7b26:	9a02      	ldr	r2, [sp, #8]
    7b28:	9b03      	ldr	r3, [sp, #12]
    7b2a:	f002 f91d 	bl	9d68 <__aeabi_dsub>
    7b2e:	4644      	mov	r4, r8
    7b30:	000b      	movs	r3, r1
    7b32:	0002      	movs	r2, r0
    7b34:	60a2      	str	r2, [r4, #8]
    7b36:	60e3      	str	r3, [r4, #12]
    7b38:	464b      	mov	r3, r9
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	db00      	blt.n	7b40 <__ieee754_rem_pio2+0x240>
    7b3e:	e780      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7b40:	465b      	mov	r3, fp
    7b42:	6023      	str	r3, [r4, #0]
    7b44:	2380      	movs	r3, #128	; 0x80
    7b46:	061b      	lsls	r3, r3, #24
    7b48:	4453      	add	r3, sl
    7b4a:	6063      	str	r3, [r4, #4]
    7b4c:	2380      	movs	r3, #128	; 0x80
    7b4e:	061b      	lsls	r3, r3, #24
    7b50:	469c      	mov	ip, r3
    7b52:	4461      	add	r1, ip
    7b54:	60a0      	str	r0, [r4, #8]
    7b56:	60e1      	str	r1, [r4, #12]
    7b58:	426d      	negs	r5, r5
    7b5a:	e772      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7b5c:	9a02      	ldr	r2, [sp, #8]
    7b5e:	9b03      	ldr	r3, [sp, #12]
    7b60:	0030      	movs	r0, r6
    7b62:	0039      	movs	r1, r7
    7b64:	f002 f900 	bl	9d68 <__aeabi_dsub>
    7b68:	000b      	movs	r3, r1
    7b6a:	468a      	mov	sl, r1
    7b6c:	0002      	movs	r2, r0
    7b6e:	4641      	mov	r1, r8
    7b70:	600a      	str	r2, [r1, #0]
    7b72:	604b      	str	r3, [r1, #4]
    7b74:	4653      	mov	r3, sl
    7b76:	005b      	lsls	r3, r3, #1
    7b78:	1524      	asrs	r4, r4, #20
    7b7a:	0d5b      	lsrs	r3, r3, #21
    7b7c:	4683      	mov	fp, r0
    7b7e:	1ae3      	subs	r3, r4, r3
    7b80:	2b10      	cmp	r3, #16
    7b82:	ddca      	ble.n	7b1a <__ieee754_rem_pio2+0x21a>
    7b84:	9804      	ldr	r0, [sp, #16]
    7b86:	9905      	ldr	r1, [sp, #20]
    7b88:	22d3      	movs	r2, #211	; 0xd3
    7b8a:	4b3a      	ldr	r3, [pc, #232]	; (7c74 <__ieee754_rem_pio2+0x374>)
    7b8c:	0552      	lsls	r2, r2, #21
    7b8e:	f001 fe6b 	bl	9868 <__aeabi_dmul>
    7b92:	9002      	str	r0, [sp, #8]
    7b94:	9103      	str	r1, [sp, #12]
    7b96:	0002      	movs	r2, r0
    7b98:	000b      	movs	r3, r1
    7b9a:	0030      	movs	r0, r6
    7b9c:	0039      	movs	r1, r7
    7b9e:	f002 f8e3 	bl	9d68 <__aeabi_dsub>
    7ba2:	9006      	str	r0, [sp, #24]
    7ba4:	9107      	str	r1, [sp, #28]
    7ba6:	0002      	movs	r2, r0
    7ba8:	000b      	movs	r3, r1
    7baa:	0030      	movs	r0, r6
    7bac:	0039      	movs	r1, r7
    7bae:	f002 f8db 	bl	9d68 <__aeabi_dsub>
    7bb2:	9a02      	ldr	r2, [sp, #8]
    7bb4:	9b03      	ldr	r3, [sp, #12]
    7bb6:	f002 f8d7 	bl	9d68 <__aeabi_dsub>
    7bba:	0006      	movs	r6, r0
    7bbc:	000f      	movs	r7, r1
    7bbe:	9804      	ldr	r0, [sp, #16]
    7bc0:	9905      	ldr	r1, [sp, #20]
    7bc2:	4a32      	ldr	r2, [pc, #200]	; (7c8c <__ieee754_rem_pio2+0x38c>)
    7bc4:	4b32      	ldr	r3, [pc, #200]	; (7c90 <__ieee754_rem_pio2+0x390>)
    7bc6:	f001 fe4f 	bl	9868 <__aeabi_dmul>
    7bca:	0032      	movs	r2, r6
    7bcc:	003b      	movs	r3, r7
    7bce:	f002 f8cb 	bl	9d68 <__aeabi_dsub>
    7bd2:	9e06      	ldr	r6, [sp, #24]
    7bd4:	9f07      	ldr	r7, [sp, #28]
    7bd6:	0002      	movs	r2, r0
    7bd8:	000b      	movs	r3, r1
    7bda:	0030      	movs	r0, r6
    7bdc:	0039      	movs	r1, r7
    7bde:	9202      	str	r2, [sp, #8]
    7be0:	9303      	str	r3, [sp, #12]
    7be2:	f002 f8c1 	bl	9d68 <__aeabi_dsub>
    7be6:	000b      	movs	r3, r1
    7be8:	468a      	mov	sl, r1
    7bea:	0002      	movs	r2, r0
    7bec:	4641      	mov	r1, r8
    7bee:	600a      	str	r2, [r1, #0]
    7bf0:	604b      	str	r3, [r1, #4]
    7bf2:	4653      	mov	r3, sl
    7bf4:	005b      	lsls	r3, r3, #1
    7bf6:	0d5b      	lsrs	r3, r3, #21
    7bf8:	4683      	mov	fp, r0
    7bfa:	1ae4      	subs	r4, r4, r3
    7bfc:	9606      	str	r6, [sp, #24]
    7bfe:	9707      	str	r7, [sp, #28]
    7c00:	2c31      	cmp	r4, #49	; 0x31
    7c02:	dd8a      	ble.n	7b1a <__ieee754_rem_pio2+0x21a>
    7c04:	9804      	ldr	r0, [sp, #16]
    7c06:	9905      	ldr	r1, [sp, #20]
    7c08:	22b8      	movs	r2, #184	; 0xb8
    7c0a:	4b21      	ldr	r3, [pc, #132]	; (7c90 <__ieee754_rem_pio2+0x390>)
    7c0c:	0592      	lsls	r2, r2, #22
    7c0e:	f001 fe2b 	bl	9868 <__aeabi_dmul>
    7c12:	0003      	movs	r3, r0
    7c14:	000c      	movs	r4, r1
    7c16:	0002      	movs	r2, r0
    7c18:	9302      	str	r3, [sp, #8]
    7c1a:	9403      	str	r4, [sp, #12]
    7c1c:	0030      	movs	r0, r6
    7c1e:	000b      	movs	r3, r1
    7c20:	0039      	movs	r1, r7
    7c22:	f002 f8a1 	bl	9d68 <__aeabi_dsub>
    7c26:	0002      	movs	r2, r0
    7c28:	000b      	movs	r3, r1
    7c2a:	0006      	movs	r6, r0
    7c2c:	000f      	movs	r7, r1
    7c2e:	9806      	ldr	r0, [sp, #24]
    7c30:	9907      	ldr	r1, [sp, #28]
    7c32:	f002 f899 	bl	9d68 <__aeabi_dsub>
    7c36:	9a02      	ldr	r2, [sp, #8]
    7c38:	9b03      	ldr	r3, [sp, #12]
    7c3a:	f002 f895 	bl	9d68 <__aeabi_dsub>
    7c3e:	4a19      	ldr	r2, [pc, #100]	; (7ca4 <__ieee754_rem_pio2+0x3a4>)
    7c40:	9002      	str	r0, [sp, #8]
    7c42:	9103      	str	r1, [sp, #12]
    7c44:	9804      	ldr	r0, [sp, #16]
    7c46:	9905      	ldr	r1, [sp, #20]
    7c48:	4b17      	ldr	r3, [pc, #92]	; (7ca8 <__ieee754_rem_pio2+0x3a8>)
    7c4a:	f001 fe0d 	bl	9868 <__aeabi_dmul>
    7c4e:	9a02      	ldr	r2, [sp, #8]
    7c50:	9b03      	ldr	r3, [sp, #12]
    7c52:	f002 f889 	bl	9d68 <__aeabi_dsub>
    7c56:	0002      	movs	r2, r0
    7c58:	000b      	movs	r3, r1
    7c5a:	9202      	str	r2, [sp, #8]
    7c5c:	9303      	str	r3, [sp, #12]
    7c5e:	e751      	b.n	7b04 <__ieee754_rem_pio2+0x204>
    7c60:	3fe921fb 	.word	0x3fe921fb
    7c64:	4002d97b 	.word	0x4002d97b
    7c68:	54400000 	.word	0x54400000
    7c6c:	3ff921fb 	.word	0x3ff921fb
    7c70:	1a626331 	.word	0x1a626331
    7c74:	3dd0b461 	.word	0x3dd0b461
    7c78:	413921fb 	.word	0x413921fb
    7c7c:	7fefffff 	.word	0x7fefffff
    7c80:	fffffbea 	.word	0xfffffbea
    7c84:	41700000 	.word	0x41700000
    7c88:	0000aa58 	.word	0x0000aa58
    7c8c:	2e037073 	.word	0x2e037073
    7c90:	3ba3198a 	.word	0x3ba3198a
    7c94:	6dc9c883 	.word	0x6dc9c883
    7c98:	3fe45f30 	.word	0x3fe45f30
    7c9c:	3fe00000 	.word	0x3fe00000
    7ca0:	0000a9d8 	.word	0x0000a9d8
    7ca4:	252049c1 	.word	0x252049c1
    7ca8:	397b839a 	.word	0x397b839a
    7cac:	4b1b      	ldr	r3, [pc, #108]	; (7d1c <__ieee754_rem_pio2+0x41c>)
    7cae:	f001 f9cb 	bl	9048 <__aeabi_dadd>
    7cb2:	4b1a      	ldr	r3, [pc, #104]	; (7d1c <__ieee754_rem_pio2+0x41c>)
    7cb4:	0006      	movs	r6, r0
    7cb6:	000f      	movs	r7, r1
    7cb8:	429c      	cmp	r4, r3
    7cba:	d018      	beq.n	7cee <__ieee754_rem_pio2+0x3ee>
    7cbc:	4a18      	ldr	r2, [pc, #96]	; (7d20 <__ieee754_rem_pio2+0x420>)
    7cbe:	4b19      	ldr	r3, [pc, #100]	; (7d24 <__ieee754_rem_pio2+0x424>)
    7cc0:	f001 f9c2 	bl	9048 <__aeabi_dadd>
    7cc4:	0002      	movs	r2, r0
    7cc6:	000b      	movs	r3, r1
    7cc8:	4641      	mov	r1, r8
    7cca:	0030      	movs	r0, r6
    7ccc:	600a      	str	r2, [r1, #0]
    7cce:	604b      	str	r3, [r1, #4]
    7cd0:	0039      	movs	r1, r7
    7cd2:	f002 f849 	bl	9d68 <__aeabi_dsub>
    7cd6:	4a12      	ldr	r2, [pc, #72]	; (7d20 <__ieee754_rem_pio2+0x420>)
    7cd8:	4b12      	ldr	r3, [pc, #72]	; (7d24 <__ieee754_rem_pio2+0x424>)
    7cda:	f001 f9b5 	bl	9048 <__aeabi_dadd>
    7cde:	2501      	movs	r5, #1
    7ce0:	4643      	mov	r3, r8
    7ce2:	426d      	negs	r5, r5
    7ce4:	6098      	str	r0, [r3, #8]
    7ce6:	60d9      	str	r1, [r3, #12]
    7ce8:	e6ab      	b.n	7a42 <__ieee754_rem_pio2+0x142>
    7cea:	2303      	movs	r3, #3
    7cec:	e684      	b.n	79f8 <__ieee754_rem_pio2+0xf8>
    7cee:	22d3      	movs	r2, #211	; 0xd3
    7cf0:	4b0c      	ldr	r3, [pc, #48]	; (7d24 <__ieee754_rem_pio2+0x424>)
    7cf2:	0552      	lsls	r2, r2, #21
    7cf4:	f001 f9a8 	bl	9048 <__aeabi_dadd>
    7cf8:	4a0b      	ldr	r2, [pc, #44]	; (7d28 <__ieee754_rem_pio2+0x428>)
    7cfa:	4b0c      	ldr	r3, [pc, #48]	; (7d2c <__ieee754_rem_pio2+0x42c>)
    7cfc:	0004      	movs	r4, r0
    7cfe:	000d      	movs	r5, r1
    7d00:	f001 f9a2 	bl	9048 <__aeabi_dadd>
    7d04:	0002      	movs	r2, r0
    7d06:	000b      	movs	r3, r1
    7d08:	4641      	mov	r1, r8
    7d0a:	0020      	movs	r0, r4
    7d0c:	600a      	str	r2, [r1, #0]
    7d0e:	604b      	str	r3, [r1, #4]
    7d10:	0029      	movs	r1, r5
    7d12:	f002 f829 	bl	9d68 <__aeabi_dsub>
    7d16:	4a04      	ldr	r2, [pc, #16]	; (7d28 <__ieee754_rem_pio2+0x428>)
    7d18:	4b04      	ldr	r3, [pc, #16]	; (7d2c <__ieee754_rem_pio2+0x42c>)
    7d1a:	e7de      	b.n	7cda <__ieee754_rem_pio2+0x3da>
    7d1c:	3ff921fb 	.word	0x3ff921fb
    7d20:	1a626331 	.word	0x1a626331
    7d24:	3dd0b461 	.word	0x3dd0b461
    7d28:	2e037073 	.word	0x2e037073
    7d2c:	3ba3198a 	.word	0x3ba3198a

00007d30 <__kernel_cos>:
    7d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d32:	4647      	mov	r7, r8
    7d34:	46ce      	mov	lr, r9
    7d36:	b580      	push	{r7, lr}
    7d38:	b087      	sub	sp, #28
    7d3a:	9200      	str	r2, [sp, #0]
    7d3c:	9301      	str	r3, [sp, #4]
    7d3e:	4b75      	ldr	r3, [pc, #468]	; (7f14 <__kernel_cos+0x1e4>)
    7d40:	004f      	lsls	r7, r1, #1
    7d42:	4681      	mov	r9, r0
    7d44:	4688      	mov	r8, r1
    7d46:	087f      	lsrs	r7, r7, #1
    7d48:	429f      	cmp	r7, r3
    7d4a:	dc63      	bgt.n	7e14 <__kernel_cos+0xe4>
    7d4c:	f002 fb22 	bl	a394 <__aeabi_d2iz>
    7d50:	2800      	cmp	r0, #0
    7d52:	d100      	bne.n	7d56 <__kernel_cos+0x26>
    7d54:	e0da      	b.n	7f0c <__kernel_cos+0x1dc>
    7d56:	464a      	mov	r2, r9
    7d58:	4643      	mov	r3, r8
    7d5a:	4648      	mov	r0, r9
    7d5c:	4641      	mov	r1, r8
    7d5e:	f001 fd83 	bl	9868 <__aeabi_dmul>
    7d62:	0004      	movs	r4, r0
    7d64:	000d      	movs	r5, r1
    7d66:	4a6c      	ldr	r2, [pc, #432]	; (7f18 <__kernel_cos+0x1e8>)
    7d68:	4b6c      	ldr	r3, [pc, #432]	; (7f1c <__kernel_cos+0x1ec>)
    7d6a:	f001 fd7d 	bl	9868 <__aeabi_dmul>
    7d6e:	4a6c      	ldr	r2, [pc, #432]	; (7f20 <__kernel_cos+0x1f0>)
    7d70:	4b6c      	ldr	r3, [pc, #432]	; (7f24 <__kernel_cos+0x1f4>)
    7d72:	f001 f969 	bl	9048 <__aeabi_dadd>
    7d76:	0022      	movs	r2, r4
    7d78:	002b      	movs	r3, r5
    7d7a:	f001 fd75 	bl	9868 <__aeabi_dmul>
    7d7e:	4a6a      	ldr	r2, [pc, #424]	; (7f28 <__kernel_cos+0x1f8>)
    7d80:	4b6a      	ldr	r3, [pc, #424]	; (7f2c <__kernel_cos+0x1fc>)
    7d82:	f001 fff1 	bl	9d68 <__aeabi_dsub>
    7d86:	0022      	movs	r2, r4
    7d88:	002b      	movs	r3, r5
    7d8a:	f001 fd6d 	bl	9868 <__aeabi_dmul>
    7d8e:	4a68      	ldr	r2, [pc, #416]	; (7f30 <__kernel_cos+0x200>)
    7d90:	4b68      	ldr	r3, [pc, #416]	; (7f34 <__kernel_cos+0x204>)
    7d92:	f001 f959 	bl	9048 <__aeabi_dadd>
    7d96:	0022      	movs	r2, r4
    7d98:	002b      	movs	r3, r5
    7d9a:	f001 fd65 	bl	9868 <__aeabi_dmul>
    7d9e:	4a66      	ldr	r2, [pc, #408]	; (7f38 <__kernel_cos+0x208>)
    7da0:	4b66      	ldr	r3, [pc, #408]	; (7f3c <__kernel_cos+0x20c>)
    7da2:	f001 ffe1 	bl	9d68 <__aeabi_dsub>
    7da6:	0022      	movs	r2, r4
    7da8:	002b      	movs	r3, r5
    7daa:	f001 fd5d 	bl	9868 <__aeabi_dmul>
    7dae:	4a64      	ldr	r2, [pc, #400]	; (7f40 <__kernel_cos+0x210>)
    7db0:	4b64      	ldr	r3, [pc, #400]	; (7f44 <__kernel_cos+0x214>)
    7db2:	f001 f949 	bl	9048 <__aeabi_dadd>
    7db6:	0022      	movs	r2, r4
    7db8:	002b      	movs	r3, r5
    7dba:	f001 fd55 	bl	9868 <__aeabi_dmul>
    7dbe:	9002      	str	r0, [sp, #8]
    7dc0:	9103      	str	r1, [sp, #12]
    7dc2:	2200      	movs	r2, #0
    7dc4:	4b60      	ldr	r3, [pc, #384]	; (7f48 <__kernel_cos+0x218>)
    7dc6:	0020      	movs	r0, r4
    7dc8:	0029      	movs	r1, r5
    7dca:	f001 fd4d 	bl	9868 <__aeabi_dmul>
    7dce:	9a02      	ldr	r2, [sp, #8]
    7dd0:	9b03      	ldr	r3, [sp, #12]
    7dd2:	0006      	movs	r6, r0
    7dd4:	000f      	movs	r7, r1
    7dd6:	0020      	movs	r0, r4
    7dd8:	0029      	movs	r1, r5
    7dda:	f001 fd45 	bl	9868 <__aeabi_dmul>
    7dde:	9a00      	ldr	r2, [sp, #0]
    7de0:	9b01      	ldr	r3, [sp, #4]
    7de2:	0004      	movs	r4, r0
    7de4:	000d      	movs	r5, r1
    7de6:	4648      	mov	r0, r9
    7de8:	4641      	mov	r1, r8
    7dea:	f001 fd3d 	bl	9868 <__aeabi_dmul>
    7dee:	0002      	movs	r2, r0
    7df0:	000b      	movs	r3, r1
    7df2:	0020      	movs	r0, r4
    7df4:	0029      	movs	r1, r5
    7df6:	f001 ffb7 	bl	9d68 <__aeabi_dsub>
    7dfa:	0002      	movs	r2, r0
    7dfc:	000b      	movs	r3, r1
    7dfe:	0030      	movs	r0, r6
    7e00:	0039      	movs	r1, r7
    7e02:	f001 ffb1 	bl	9d68 <__aeabi_dsub>
    7e06:	0002      	movs	r2, r0
    7e08:	000b      	movs	r3, r1
    7e0a:	2000      	movs	r0, #0
    7e0c:	494f      	ldr	r1, [pc, #316]	; (7f4c <__kernel_cos+0x21c>)
    7e0e:	f001 ffab 	bl	9d68 <__aeabi_dsub>
    7e12:	e070      	b.n	7ef6 <__kernel_cos+0x1c6>
    7e14:	0002      	movs	r2, r0
    7e16:	000b      	movs	r3, r1
    7e18:	f001 fd26 	bl	9868 <__aeabi_dmul>
    7e1c:	0004      	movs	r4, r0
    7e1e:	000d      	movs	r5, r1
    7e20:	4a3d      	ldr	r2, [pc, #244]	; (7f18 <__kernel_cos+0x1e8>)
    7e22:	4b3e      	ldr	r3, [pc, #248]	; (7f1c <__kernel_cos+0x1ec>)
    7e24:	f001 fd20 	bl	9868 <__aeabi_dmul>
    7e28:	4a3d      	ldr	r2, [pc, #244]	; (7f20 <__kernel_cos+0x1f0>)
    7e2a:	4b3e      	ldr	r3, [pc, #248]	; (7f24 <__kernel_cos+0x1f4>)
    7e2c:	f001 f90c 	bl	9048 <__aeabi_dadd>
    7e30:	0022      	movs	r2, r4
    7e32:	002b      	movs	r3, r5
    7e34:	f001 fd18 	bl	9868 <__aeabi_dmul>
    7e38:	4a3b      	ldr	r2, [pc, #236]	; (7f28 <__kernel_cos+0x1f8>)
    7e3a:	4b3c      	ldr	r3, [pc, #240]	; (7f2c <__kernel_cos+0x1fc>)
    7e3c:	f001 ff94 	bl	9d68 <__aeabi_dsub>
    7e40:	0022      	movs	r2, r4
    7e42:	002b      	movs	r3, r5
    7e44:	f001 fd10 	bl	9868 <__aeabi_dmul>
    7e48:	4a39      	ldr	r2, [pc, #228]	; (7f30 <__kernel_cos+0x200>)
    7e4a:	4b3a      	ldr	r3, [pc, #232]	; (7f34 <__kernel_cos+0x204>)
    7e4c:	f001 f8fc 	bl	9048 <__aeabi_dadd>
    7e50:	0022      	movs	r2, r4
    7e52:	002b      	movs	r3, r5
    7e54:	f001 fd08 	bl	9868 <__aeabi_dmul>
    7e58:	4a37      	ldr	r2, [pc, #220]	; (7f38 <__kernel_cos+0x208>)
    7e5a:	4b38      	ldr	r3, [pc, #224]	; (7f3c <__kernel_cos+0x20c>)
    7e5c:	f001 ff84 	bl	9d68 <__aeabi_dsub>
    7e60:	0022      	movs	r2, r4
    7e62:	002b      	movs	r3, r5
    7e64:	f001 fd00 	bl	9868 <__aeabi_dmul>
    7e68:	4a35      	ldr	r2, [pc, #212]	; (7f40 <__kernel_cos+0x210>)
    7e6a:	4b36      	ldr	r3, [pc, #216]	; (7f44 <__kernel_cos+0x214>)
    7e6c:	f001 f8ec 	bl	9048 <__aeabi_dadd>
    7e70:	002b      	movs	r3, r5
    7e72:	0022      	movs	r2, r4
    7e74:	f001 fcf8 	bl	9868 <__aeabi_dmul>
    7e78:	4b35      	ldr	r3, [pc, #212]	; (7f50 <__kernel_cos+0x220>)
    7e7a:	9002      	str	r0, [sp, #8]
    7e7c:	9103      	str	r1, [sp, #12]
    7e7e:	429f      	cmp	r7, r3
    7e80:	dd9f      	ble.n	7dc2 <__kernel_cos+0x92>
    7e82:	4b34      	ldr	r3, [pc, #208]	; (7f54 <__kernel_cos+0x224>)
    7e84:	2200      	movs	r2, #0
    7e86:	429f      	cmp	r7, r3
    7e88:	dc3a      	bgt.n	7f00 <__kernel_cos+0x1d0>
    7e8a:	4933      	ldr	r1, [pc, #204]	; (7f58 <__kernel_cos+0x228>)
    7e8c:	2000      	movs	r0, #0
    7e8e:	187b      	adds	r3, r7, r1
    7e90:	492e      	ldr	r1, [pc, #184]	; (7f4c <__kernel_cos+0x21c>)
    7e92:	0016      	movs	r6, r2
    7e94:	001f      	movs	r7, r3
    7e96:	f001 ff67 	bl	9d68 <__aeabi_dsub>
    7e9a:	9004      	str	r0, [sp, #16]
    7e9c:	9105      	str	r1, [sp, #20]
    7e9e:	2200      	movs	r2, #0
    7ea0:	4b29      	ldr	r3, [pc, #164]	; (7f48 <__kernel_cos+0x218>)
    7ea2:	0020      	movs	r0, r4
    7ea4:	0029      	movs	r1, r5
    7ea6:	f001 fcdf 	bl	9868 <__aeabi_dmul>
    7eaa:	0032      	movs	r2, r6
    7eac:	003b      	movs	r3, r7
    7eae:	f001 ff5b 	bl	9d68 <__aeabi_dsub>
    7eb2:	9a02      	ldr	r2, [sp, #8]
    7eb4:	9b03      	ldr	r3, [sp, #12]
    7eb6:	0006      	movs	r6, r0
    7eb8:	000f      	movs	r7, r1
    7eba:	0020      	movs	r0, r4
    7ebc:	0029      	movs	r1, r5
    7ebe:	f001 fcd3 	bl	9868 <__aeabi_dmul>
    7ec2:	9a00      	ldr	r2, [sp, #0]
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	0004      	movs	r4, r0
    7ec8:	000d      	movs	r5, r1
    7eca:	4648      	mov	r0, r9
    7ecc:	4641      	mov	r1, r8
    7ece:	f001 fccb 	bl	9868 <__aeabi_dmul>
    7ed2:	0002      	movs	r2, r0
    7ed4:	000b      	movs	r3, r1
    7ed6:	0020      	movs	r0, r4
    7ed8:	0029      	movs	r1, r5
    7eda:	f001 ff45 	bl	9d68 <__aeabi_dsub>
    7ede:	0002      	movs	r2, r0
    7ee0:	000b      	movs	r3, r1
    7ee2:	0030      	movs	r0, r6
    7ee4:	0039      	movs	r1, r7
    7ee6:	f001 ff3f 	bl	9d68 <__aeabi_dsub>
    7eea:	0002      	movs	r2, r0
    7eec:	000b      	movs	r3, r1
    7eee:	9804      	ldr	r0, [sp, #16]
    7ef0:	9905      	ldr	r1, [sp, #20]
    7ef2:	f001 ff39 	bl	9d68 <__aeabi_dsub>
    7ef6:	b007      	add	sp, #28
    7ef8:	bc0c      	pop	{r2, r3}
    7efa:	4690      	mov	r8, r2
    7efc:	4699      	mov	r9, r3
    7efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f00:	4b16      	ldr	r3, [pc, #88]	; (7f5c <__kernel_cos+0x22c>)
    7f02:	2600      	movs	r6, #0
    7f04:	9204      	str	r2, [sp, #16]
    7f06:	9305      	str	r3, [sp, #20]
    7f08:	4f15      	ldr	r7, [pc, #84]	; (7f60 <__kernel_cos+0x230>)
    7f0a:	e7c8      	b.n	7e9e <__kernel_cos+0x16e>
    7f0c:	2000      	movs	r0, #0
    7f0e:	490f      	ldr	r1, [pc, #60]	; (7f4c <__kernel_cos+0x21c>)
    7f10:	e7f1      	b.n	7ef6 <__kernel_cos+0x1c6>
    7f12:	46c0      	nop			; (mov r8, r8)
    7f14:	3e3fffff 	.word	0x3e3fffff
    7f18:	be8838d4 	.word	0xbe8838d4
    7f1c:	bda8fae9 	.word	0xbda8fae9
    7f20:	bdb4b1c4 	.word	0xbdb4b1c4
    7f24:	3e21ee9e 	.word	0x3e21ee9e
    7f28:	809c52ad 	.word	0x809c52ad
    7f2c:	3e927e4f 	.word	0x3e927e4f
    7f30:	19cb1590 	.word	0x19cb1590
    7f34:	3efa01a0 	.word	0x3efa01a0
    7f38:	16c15177 	.word	0x16c15177
    7f3c:	3f56c16c 	.word	0x3f56c16c
    7f40:	5555554c 	.word	0x5555554c
    7f44:	3fa55555 	.word	0x3fa55555
    7f48:	3fe00000 	.word	0x3fe00000
    7f4c:	3ff00000 	.word	0x3ff00000
    7f50:	3fd33332 	.word	0x3fd33332
    7f54:	3fe90000 	.word	0x3fe90000
    7f58:	ffe00000 	.word	0xffe00000
    7f5c:	3fe70000 	.word	0x3fe70000
    7f60:	3fd20000 	.word	0x3fd20000

00007f64 <__kernel_rem_pio2>:
    7f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f66:	46de      	mov	lr, fp
    7f68:	464e      	mov	r6, r9
    7f6a:	4645      	mov	r5, r8
    7f6c:	4657      	mov	r7, sl
    7f6e:	b5e0      	push	{r5, r6, r7, lr}
    7f70:	4ca3      	ldr	r4, [pc, #652]	; (8200 <__kernel_rem_pio2+0x29c>)
    7f72:	44a5      	add	sp, r4
    7f74:	9107      	str	r1, [sp, #28]
    7f76:	0019      	movs	r1, r3
    7f78:	0014      	movs	r4, r2
    7f7a:	9aa4      	ldr	r2, [sp, #656]	; 0x290
    7f7c:	9309      	str	r3, [sp, #36]	; 0x24
    7f7e:	4ba1      	ldr	r3, [pc, #644]	; (8204 <__kernel_rem_pio2+0x2a0>)
    7f80:	0092      	lsls	r2, r2, #2
    7f82:	58d2      	ldr	r2, [r2, r3]
    7f84:	000b      	movs	r3, r1
    7f86:	9003      	str	r0, [sp, #12]
    7f88:	3b01      	subs	r3, #1
    7f8a:	1ee0      	subs	r0, r4, #3
    7f8c:	2118      	movs	r1, #24
    7f8e:	001d      	movs	r5, r3
    7f90:	0016      	movs	r6, r2
    7f92:	9206      	str	r2, [sp, #24]
    7f94:	9302      	str	r3, [sp, #8]
    7f96:	f000 fea7 	bl	8ce8 <__divsi3>
    7f9a:	43c3      	mvns	r3, r0
    7f9c:	0002      	movs	r2, r0
    7f9e:	17db      	asrs	r3, r3, #31
    7fa0:	401a      	ands	r2, r3
    7fa2:	0013      	movs	r3, r2
    7fa4:	0011      	movs	r1, r2
    7fa6:	3301      	adds	r3, #1
    7fa8:	920b      	str	r2, [sp, #44]	; 0x2c
    7faa:	009a      	lsls	r2, r3, #2
    7fac:	1a9b      	subs	r3, r3, r2
    7fae:	00db      	lsls	r3, r3, #3
    7fb0:	191b      	adds	r3, r3, r4
    7fb2:	9304      	str	r3, [sp, #16]
    7fb4:	1b4c      	subs	r4, r1, r5
    7fb6:	1976      	adds	r6, r6, r5
    7fb8:	d418      	bmi.n	7fec <__kernel_rem_pio2+0x88>
    7fba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
    7fbc:	00a5      	lsls	r5, r4, #2
    7fbe:	469c      	mov	ip, r3
    7fc0:	1936      	adds	r6, r6, r4
    7fc2:	af22      	add	r7, sp, #136	; 0x88
    7fc4:	4465      	add	r5, ip
    7fc6:	3601      	adds	r6, #1
    7fc8:	e007      	b.n	7fda <__kernel_rem_pio2+0x76>
    7fca:	6828      	ldr	r0, [r5, #0]
    7fcc:	f002 fa16 	bl	a3fc <__aeabi_i2d>
    7fd0:	3401      	adds	r4, #1
    7fd2:	c703      	stmia	r7!, {r0, r1}
    7fd4:	3504      	adds	r5, #4
    7fd6:	42b4      	cmp	r4, r6
    7fd8:	d008      	beq.n	7fec <__kernel_rem_pio2+0x88>
    7fda:	2c00      	cmp	r4, #0
    7fdc:	daf5      	bge.n	7fca <__kernel_rem_pio2+0x66>
    7fde:	2000      	movs	r0, #0
    7fe0:	2100      	movs	r1, #0
    7fe2:	3401      	adds	r4, #1
    7fe4:	c703      	stmia	r7!, {r0, r1}
    7fe6:	3504      	adds	r5, #4
    7fe8:	42b4      	cmp	r4, r6
    7fea:	d1f6      	bne.n	7fda <__kernel_rem_pio2+0x76>
    7fec:	9b06      	ldr	r3, [sp, #24]
    7fee:	2b00      	cmp	r3, #0
    7ff0:	da01      	bge.n	7ff6 <__kernel_rem_pio2+0x92>
    7ff2:	f000 fc01 	bl	87f8 <__kernel_rem_pio2+0x894>
    7ff6:	ab72      	add	r3, sp, #456	; 0x1c8
    7ff8:	0019      	movs	r1, r3
    7ffa:	468b      	mov	fp, r1
    7ffc:	aa22      	add	r2, sp, #136	; 0x88
    7ffe:	4691      	mov	r9, r2
    8000:	9a06      	ldr	r2, [sp, #24]
    8002:	9308      	str	r3, [sp, #32]
    8004:	3201      	adds	r2, #1
    8006:	00d2      	lsls	r2, r2, #3
    8008:	4493      	add	fp, r2
    800a:	9a03      	ldr	r2, [sp, #12]
    800c:	469a      	mov	sl, r3
    800e:	4690      	mov	r8, r2
    8010:	9b02      	ldr	r3, [sp, #8]
    8012:	00db      	lsls	r3, r3, #3
    8014:	4499      	add	r9, r3
    8016:	3308      	adds	r3, #8
    8018:	4498      	add	r8, r3
    801a:	9b02      	ldr	r3, [sp, #8]
    801c:	2b00      	cmp	r3, #0
    801e:	da00      	bge.n	8022 <__kernel_rem_pio2+0xbe>
    8020:	e28d      	b.n	853e <__kernel_rem_pio2+0x5da>
    8022:	464c      	mov	r4, r9
    8024:	2600      	movs	r6, #0
    8026:	2700      	movs	r7, #0
    8028:	9d03      	ldr	r5, [sp, #12]
    802a:	6822      	ldr	r2, [r4, #0]
    802c:	6863      	ldr	r3, [r4, #4]
    802e:	cd03      	ldmia	r5!, {r0, r1}
    8030:	f001 fc1a 	bl	9868 <__aeabi_dmul>
    8034:	0002      	movs	r2, r0
    8036:	000b      	movs	r3, r1
    8038:	0030      	movs	r0, r6
    803a:	0039      	movs	r1, r7
    803c:	f001 f804 	bl	9048 <__aeabi_dadd>
    8040:	3c08      	subs	r4, #8
    8042:	0006      	movs	r6, r0
    8044:	000f      	movs	r7, r1
    8046:	4545      	cmp	r5, r8
    8048:	d1ef      	bne.n	802a <__kernel_rem_pio2+0xc6>
    804a:	4653      	mov	r3, sl
    804c:	c3c0      	stmia	r3!, {r6, r7}
    804e:	469a      	mov	sl, r3
    8050:	2308      	movs	r3, #8
    8052:	469c      	mov	ip, r3
    8054:	44e1      	add	r9, ip
    8056:	45da      	cmp	sl, fp
    8058:	d1df      	bne.n	801a <__kernel_rem_pio2+0xb6>
    805a:	9a06      	ldr	r2, [sp, #24]
    805c:	496a      	ldr	r1, [pc, #424]	; (8208 <__kernel_rem_pio2+0x2a4>)
    805e:	0013      	movs	r3, r2
    8060:	468c      	mov	ip, r1
    8062:	4463      	add	r3, ip
    8064:	009b      	lsls	r3, r3, #2
    8066:	a80e      	add	r0, sp, #56	; 0x38
    8068:	0019      	movs	r1, r3
    806a:	4684      	mov	ip, r0
    806c:	4461      	add	r1, ip
    806e:	910d      	str	r1, [sp, #52]	; 0x34
    8070:	9903      	ldr	r1, [sp, #12]
    8072:	3b04      	subs	r3, #4
    8074:	468b      	mov	fp, r1
    8076:	4463      	add	r3, ip
    8078:	930c      	str	r3, [sp, #48]	; 0x30
    807a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    807c:	9200      	str	r2, [sp, #0]
    807e:	00db      	lsls	r3, r3, #3
    8080:	449b      	add	fp, r3
    8082:	9a00      	ldr	r2, [sp, #0]
    8084:	9808      	ldr	r0, [sp, #32]
    8086:	00d3      	lsls	r3, r2, #3
    8088:	0019      	movs	r1, r3
    808a:	930a      	str	r3, [sp, #40]	; 0x28
    808c:	468c      	mov	ip, r1
    808e:	0003      	movs	r3, r0
    8090:	4463      	add	r3, ip
    8092:	681e      	ldr	r6, [r3, #0]
    8094:	685f      	ldr	r7, [r3, #4]
    8096:	2a00      	cmp	r2, #0
    8098:	dd34      	ble.n	8104 <__kernel_rem_pio2+0x1a0>
    809a:	ab0e      	add	r3, sp, #56	; 0x38
    809c:	4699      	mov	r9, r3
    809e:	0013      	movs	r3, r2
    80a0:	4a5a      	ldr	r2, [pc, #360]	; (820c <__kernel_rem_pio2+0x2a8>)
    80a2:	4680      	mov	r8, r0
    80a4:	4694      	mov	ip, r2
    80a6:	4463      	add	r3, ip
    80a8:	00db      	lsls	r3, r3, #3
    80aa:	4498      	add	r8, r3
    80ac:	ab70      	add	r3, sp, #448	; 0x1c0
    80ae:	469a      	mov	sl, r3
    80b0:	2200      	movs	r2, #0
    80b2:	4b57      	ldr	r3, [pc, #348]	; (8210 <__kernel_rem_pio2+0x2ac>)
    80b4:	0030      	movs	r0, r6
    80b6:	0039      	movs	r1, r7
    80b8:	f001 fbd6 	bl	9868 <__aeabi_dmul>
    80bc:	f002 f96a 	bl	a394 <__aeabi_d2iz>
    80c0:	f002 f99c 	bl	a3fc <__aeabi_i2d>
    80c4:	2200      	movs	r2, #0
    80c6:	4b53      	ldr	r3, [pc, #332]	; (8214 <__kernel_rem_pio2+0x2b0>)
    80c8:	0004      	movs	r4, r0
    80ca:	000d      	movs	r5, r1
    80cc:	f001 fbcc 	bl	9868 <__aeabi_dmul>
    80d0:	0002      	movs	r2, r0
    80d2:	000b      	movs	r3, r1
    80d4:	0030      	movs	r0, r6
    80d6:	0039      	movs	r1, r7
    80d8:	f001 fe46 	bl	9d68 <__aeabi_dsub>
    80dc:	f002 f95a 	bl	a394 <__aeabi_d2iz>
    80e0:	464b      	mov	r3, r9
    80e2:	c301      	stmia	r3!, {r0}
    80e4:	4699      	mov	r9, r3
    80e6:	4643      	mov	r3, r8
    80e8:	0020      	movs	r0, r4
    80ea:	681a      	ldr	r2, [r3, #0]
    80ec:	685b      	ldr	r3, [r3, #4]
    80ee:	0029      	movs	r1, r5
    80f0:	f000 ffaa 	bl	9048 <__aeabi_dadd>
    80f4:	2308      	movs	r3, #8
    80f6:	425b      	negs	r3, r3
    80f8:	469c      	mov	ip, r3
    80fa:	44e0      	add	r8, ip
    80fc:	0006      	movs	r6, r0
    80fe:	000f      	movs	r7, r1
    8100:	45d0      	cmp	r8, sl
    8102:	d1d5      	bne.n	80b0 <__kernel_rem_pio2+0x14c>
    8104:	9b04      	ldr	r3, [sp, #16]
    8106:	0030      	movs	r0, r6
    8108:	001a      	movs	r2, r3
    810a:	0039      	movs	r1, r7
    810c:	4699      	mov	r9, r3
    810e:	f000 fcf1 	bl	8af4 <scalbn>
    8112:	23ff      	movs	r3, #255	; 0xff
    8114:	2200      	movs	r2, #0
    8116:	059b      	lsls	r3, r3, #22
    8118:	0004      	movs	r4, r0
    811a:	000d      	movs	r5, r1
    811c:	f001 fba4 	bl	9868 <__aeabi_dmul>
    8120:	f000 fc50 	bl	89c4 <floor>
    8124:	2200      	movs	r2, #0
    8126:	4b3c      	ldr	r3, [pc, #240]	; (8218 <__kernel_rem_pio2+0x2b4>)
    8128:	f001 fb9e 	bl	9868 <__aeabi_dmul>
    812c:	0002      	movs	r2, r0
    812e:	000b      	movs	r3, r1
    8130:	0020      	movs	r0, r4
    8132:	0029      	movs	r1, r5
    8134:	f001 fe18 	bl	9d68 <__aeabi_dsub>
    8138:	000d      	movs	r5, r1
    813a:	0004      	movs	r4, r0
    813c:	f002 f92a 	bl	a394 <__aeabi_d2iz>
    8140:	4680      	mov	r8, r0
    8142:	f002 f95b 	bl	a3fc <__aeabi_i2d>
    8146:	0002      	movs	r2, r0
    8148:	000b      	movs	r3, r1
    814a:	0020      	movs	r0, r4
    814c:	0029      	movs	r1, r5
    814e:	f001 fe0b 	bl	9d68 <__aeabi_dsub>
    8152:	000f      	movs	r7, r1
    8154:	4649      	mov	r1, r9
    8156:	0006      	movs	r6, r0
    8158:	2900      	cmp	r1, #0
    815a:	dc00      	bgt.n	815e <__kernel_rem_pio2+0x1fa>
    815c:	e110      	b.n	8380 <__kernel_rem_pio2+0x41c>
    815e:	9b00      	ldr	r3, [sp, #0]
    8160:	2018      	movs	r0, #24
    8162:	1e5a      	subs	r2, r3, #1
    8164:	0092      	lsls	r2, r2, #2
    8166:	ab0e      	add	r3, sp, #56	; 0x38
    8168:	589b      	ldr	r3, [r3, r2]
    816a:	1a40      	subs	r0, r0, r1
    816c:	001d      	movs	r5, r3
    816e:	4105      	asrs	r5, r0
    8170:	44a8      	add	r8, r5
    8172:	4085      	lsls	r5, r0
    8174:	1b5d      	subs	r5, r3, r5
    8176:	ab0e      	add	r3, sp, #56	; 0x38
    8178:	509d      	str	r5, [r3, r2]
    817a:	2217      	movs	r2, #23
    817c:	1a52      	subs	r2, r2, r1
    817e:	4115      	asrs	r5, r2
    8180:	2d00      	cmp	r5, #0
    8182:	dc00      	bgt.n	8186 <__kernel_rem_pio2+0x222>
    8184:	e07d      	b.n	8282 <__kernel_rem_pio2+0x31e>
    8186:	2301      	movs	r3, #1
    8188:	469c      	mov	ip, r3
    818a:	9b00      	ldr	r3, [sp, #0]
    818c:	44e0      	add	r8, ip
    818e:	2b00      	cmp	r3, #0
    8190:	dd48      	ble.n	8224 <__kernel_rem_pio2+0x2c0>
    8192:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    8194:	2c00      	cmp	r4, #0
    8196:	d100      	bne.n	819a <__kernel_rem_pio2+0x236>
    8198:	e34b      	b.n	8832 <__kernel_rem_pio2+0x8ce>
    819a:	2201      	movs	r2, #1
    819c:	2300      	movs	r3, #0
    819e:	2100      	movs	r1, #0
    81a0:	2080      	movs	r0, #128	; 0x80
    81a2:	0440      	lsls	r0, r0, #17
    81a4:	1b04      	subs	r4, r0, r4
    81a6:	a80e      	add	r0, sp, #56	; 0x38
    81a8:	5044      	str	r4, [r0, r1]
    81aa:	9900      	ldr	r1, [sp, #0]
    81ac:	4291      	cmp	r1, r2
    81ae:	dd18      	ble.n	81e2 <__kernel_rem_pio2+0x27e>
    81b0:	0092      	lsls	r2, r2, #2
    81b2:	a90e      	add	r1, sp, #56	; 0x38
    81b4:	5889      	ldr	r1, [r1, r2]
    81b6:	ac0e      	add	r4, sp, #56	; 0x38
    81b8:	9105      	str	r1, [sp, #20]
    81ba:	9805      	ldr	r0, [sp, #20]
    81bc:	4917      	ldr	r1, [pc, #92]	; (821c <__kernel_rem_pio2+0x2b8>)
    81be:	3302      	adds	r3, #2
    81c0:	1a08      	subs	r0, r1, r0
    81c2:	50a0      	str	r0, [r4, r2]
    81c4:	9a00      	ldr	r2, [sp, #0]
    81c6:	429a      	cmp	r2, r3
    81c8:	dd0b      	ble.n	81e2 <__kernel_rem_pio2+0x27e>
    81ca:	aa0e      	add	r2, sp, #56	; 0x38
    81cc:	4694      	mov	ip, r2
    81ce:	9a00      	ldr	r2, [sp, #0]
    81d0:	009b      	lsls	r3, r3, #2
    81d2:	0090      	lsls	r0, r2, #2
    81d4:	4463      	add	r3, ip
    81d6:	4460      	add	r0, ip
    81d8:	681a      	ldr	r2, [r3, #0]
    81da:	1a8a      	subs	r2, r1, r2
    81dc:	c304      	stmia	r3!, {r2}
    81de:	4283      	cmp	r3, r0
    81e0:	d1fa      	bne.n	81d8 <__kernel_rem_pio2+0x274>
    81e2:	9b04      	ldr	r3, [sp, #16]
    81e4:	2401      	movs	r4, #1
    81e6:	2b00      	cmp	r3, #0
    81e8:	dc21      	bgt.n	822e <__kernel_rem_pio2+0x2ca>
    81ea:	2d02      	cmp	r5, #2
    81ec:	d149      	bne.n	8282 <__kernel_rem_pio2+0x31e>
    81ee:	0032      	movs	r2, r6
    81f0:	003b      	movs	r3, r7
    81f2:	2000      	movs	r0, #0
    81f4:	490a      	ldr	r1, [pc, #40]	; (8220 <__kernel_rem_pio2+0x2bc>)
    81f6:	f001 fdb7 	bl	9d68 <__aeabi_dsub>
    81fa:	0006      	movs	r6, r0
    81fc:	000f      	movs	r7, r1
    81fe:	e032      	b.n	8266 <__kernel_rem_pio2+0x302>
    8200:	fffffd94 	.word	0xfffffd94
    8204:	0000aba0 	.word	0x0000aba0
    8208:	3fffffff 	.word	0x3fffffff
    820c:	1fffffff 	.word	0x1fffffff
    8210:	3e700000 	.word	0x3e700000
    8214:	41700000 	.word	0x41700000
    8218:	40200000 	.word	0x40200000
    821c:	00ffffff 	.word	0x00ffffff
    8220:	3ff00000 	.word	0x3ff00000
    8224:	9b04      	ldr	r3, [sp, #16]
    8226:	2400      	movs	r4, #0
    8228:	2b00      	cmp	r3, #0
    822a:	dc00      	bgt.n	822e <__kernel_rem_pio2+0x2ca>
    822c:	e292      	b.n	8754 <__kernel_rem_pio2+0x7f0>
    822e:	9b04      	ldr	r3, [sp, #16]
    8230:	2b01      	cmp	r3, #1
    8232:	d100      	bne.n	8236 <__kernel_rem_pio2+0x2d2>
    8234:	e27b      	b.n	872e <__kernel_rem_pio2+0x7ca>
    8236:	2b02      	cmp	r3, #2
    8238:	d109      	bne.n	824e <__kernel_rem_pio2+0x2ea>
    823a:	9b00      	ldr	r3, [sp, #0]
    823c:	a90e      	add	r1, sp, #56	; 0x38
    823e:	1e5a      	subs	r2, r3, #1
    8240:	0092      	lsls	r2, r2, #2
    8242:	ab0e      	add	r3, sp, #56	; 0x38
    8244:	589b      	ldr	r3, [r3, r2]
    8246:	9305      	str	r3, [sp, #20]
    8248:	029b      	lsls	r3, r3, #10
    824a:	0a9b      	lsrs	r3, r3, #10
    824c:	508b      	str	r3, [r1, r2]
    824e:	2d02      	cmp	r5, #2
    8250:	d117      	bne.n	8282 <__kernel_rem_pio2+0x31e>
    8252:	0032      	movs	r2, r6
    8254:	003b      	movs	r3, r7
    8256:	2000      	movs	r0, #0
    8258:	49bf      	ldr	r1, [pc, #764]	; (8558 <__kernel_rem_pio2+0x5f4>)
    825a:	f001 fd85 	bl	9d68 <__aeabi_dsub>
    825e:	0006      	movs	r6, r0
    8260:	000f      	movs	r7, r1
    8262:	2c00      	cmp	r4, #0
    8264:	d00d      	beq.n	8282 <__kernel_rem_pio2+0x31e>
    8266:	9a04      	ldr	r2, [sp, #16]
    8268:	2000      	movs	r0, #0
    826a:	49bb      	ldr	r1, [pc, #748]	; (8558 <__kernel_rem_pio2+0x5f4>)
    826c:	f000 fc42 	bl	8af4 <scalbn>
    8270:	0002      	movs	r2, r0
    8272:	000b      	movs	r3, r1
    8274:	0030      	movs	r0, r6
    8276:	0039      	movs	r1, r7
    8278:	f001 fd76 	bl	9d68 <__aeabi_dsub>
    827c:	2502      	movs	r5, #2
    827e:	0006      	movs	r6, r0
    8280:	000f      	movs	r7, r1
    8282:	2300      	movs	r3, #0
    8284:	2200      	movs	r2, #0
    8286:	0030      	movs	r0, r6
    8288:	0039      	movs	r1, r7
    828a:	f000 fe29 	bl	8ee0 <__aeabi_dcmpeq>
    828e:	9b00      	ldr	r3, [sp, #0]
    8290:	2800      	cmp	r0, #0
    8292:	d100      	bne.n	8296 <__kernel_rem_pio2+0x332>
    8294:	e262      	b.n	875c <__kernel_rem_pio2+0x7f8>
    8296:	9906      	ldr	r1, [sp, #24]
    8298:	1e5a      	subs	r2, r3, #1
    829a:	4291      	cmp	r1, r2
    829c:	dc10      	bgt.n	82c0 <__kernel_rem_pio2+0x35c>
    829e:	49af      	ldr	r1, [pc, #700]	; (855c <__kernel_rem_pio2+0x5f8>)
    82a0:	980d      	ldr	r0, [sp, #52]	; 0x34
    82a2:	468c      	mov	ip, r1
    82a4:	a90e      	add	r1, sp, #56	; 0x38
    82a6:	4463      	add	r3, ip
    82a8:	468c      	mov	ip, r1
    82aa:	2100      	movs	r1, #0
    82ac:	009b      	lsls	r3, r3, #2
    82ae:	4463      	add	r3, ip
    82b0:	681c      	ldr	r4, [r3, #0]
    82b2:	3b04      	subs	r3, #4
    82b4:	4321      	orrs	r1, r4
    82b6:	4283      	cmp	r3, r0
    82b8:	d1fa      	bne.n	82b0 <__kernel_rem_pio2+0x34c>
    82ba:	2900      	cmp	r1, #0
    82bc:	d000      	beq.n	82c0 <__kernel_rem_pio2+0x35c>
    82be:	e084      	b.n	83ca <__kernel_rem_pio2+0x466>
    82c0:	9b06      	ldr	r3, [sp, #24]
    82c2:	aa0e      	add	r2, sp, #56	; 0x38
    82c4:	3b01      	subs	r3, #1
    82c6:	009b      	lsls	r3, r3, #2
    82c8:	58d3      	ldr	r3, [r2, r3]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d000      	beq.n	82d0 <__kernel_rem_pio2+0x36c>
    82ce:	e27c      	b.n	87ca <__kernel_rem_pio2+0x866>
    82d0:	2201      	movs	r2, #1
    82d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    82d4:	3b04      	subs	r3, #4
    82d6:	6859      	ldr	r1, [r3, #4]
    82d8:	3201      	adds	r2, #1
    82da:	2900      	cmp	r1, #0
    82dc:	d0fa      	beq.n	82d4 <__kernel_rem_pio2+0x370>
    82de:	9900      	ldr	r1, [sp, #0]
    82e0:	000b      	movs	r3, r1
    82e2:	468c      	mov	ip, r1
    82e4:	3301      	adds	r3, #1
    82e6:	4462      	add	r2, ip
    82e8:	9205      	str	r2, [sp, #20]
    82ea:	4293      	cmp	r3, r2
    82ec:	dc42      	bgt.n	8374 <__kernel_rem_pio2+0x410>
    82ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    82f0:	4694      	mov	ip, r2
    82f2:	9aa5      	ldr	r2, [sp, #660]	; 0x294
    82f4:	4463      	add	r3, ip
    82f6:	4692      	mov	sl, r2
    82f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    82fa:	009b      	lsls	r3, r3, #2
    82fc:	4694      	mov	ip, r2
    82fe:	aa22      	add	r2, sp, #136	; 0x88
    8300:	4690      	mov	r8, r2
    8302:	449a      	add	sl, r3
    8304:	9b00      	ldr	r3, [sp, #0]
    8306:	9a08      	ldr	r2, [sp, #32]
    8308:	4463      	add	r3, ip
    830a:	00db      	lsls	r3, r3, #3
    830c:	4498      	add	r8, r3
    830e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8310:	4694      	mov	ip, r2
    8312:	4699      	mov	r9, r3
    8314:	9b05      	ldr	r3, [sp, #20]
    8316:	44e1      	add	r9, ip
    8318:	00db      	lsls	r3, r3, #3
    831a:	4463      	add	r3, ip
    831c:	9300      	str	r3, [sp, #0]
    831e:	4653      	mov	r3, sl
    8320:	6818      	ldr	r0, [r3, #0]
    8322:	f002 f86b 	bl	a3fc <__aeabi_i2d>
    8326:	4643      	mov	r3, r8
    8328:	6018      	str	r0, [r3, #0]
    832a:	6059      	str	r1, [r3, #4]
    832c:	9b02      	ldr	r3, [sp, #8]
    832e:	2b00      	cmp	r3, #0
    8330:	db23      	blt.n	837a <__kernel_rem_pio2+0x416>
    8332:	4644      	mov	r4, r8
    8334:	2600      	movs	r6, #0
    8336:	2700      	movs	r7, #0
    8338:	9d03      	ldr	r5, [sp, #12]
    833a:	6822      	ldr	r2, [r4, #0]
    833c:	6863      	ldr	r3, [r4, #4]
    833e:	cd03      	ldmia	r5!, {r0, r1}
    8340:	f001 fa92 	bl	9868 <__aeabi_dmul>
    8344:	0002      	movs	r2, r0
    8346:	000b      	movs	r3, r1
    8348:	0030      	movs	r0, r6
    834a:	0039      	movs	r1, r7
    834c:	f000 fe7c 	bl	9048 <__aeabi_dadd>
    8350:	3c08      	subs	r4, #8
    8352:	0006      	movs	r6, r0
    8354:	000f      	movs	r7, r1
    8356:	455d      	cmp	r5, fp
    8358:	d1ef      	bne.n	833a <__kernel_rem_pio2+0x3d6>
    835a:	464b      	mov	r3, r9
    835c:	609e      	str	r6, [r3, #8]
    835e:	60df      	str	r7, [r3, #12]
    8360:	2304      	movs	r3, #4
    8362:	469c      	mov	ip, r3
    8364:	3304      	adds	r3, #4
    8366:	44e2      	add	sl, ip
    8368:	469c      	mov	ip, r3
    836a:	9b00      	ldr	r3, [sp, #0]
    836c:	44e1      	add	r9, ip
    836e:	44e0      	add	r8, ip
    8370:	4599      	cmp	r9, r3
    8372:	d1d4      	bne.n	831e <__kernel_rem_pio2+0x3ba>
    8374:	9b05      	ldr	r3, [sp, #20]
    8376:	9300      	str	r3, [sp, #0]
    8378:	e683      	b.n	8082 <__kernel_rem_pio2+0x11e>
    837a:	2600      	movs	r6, #0
    837c:	2700      	movs	r7, #0
    837e:	e7ec      	b.n	835a <__kernel_rem_pio2+0x3f6>
    8380:	9b04      	ldr	r3, [sp, #16]
    8382:	2b00      	cmp	r3, #0
    8384:	d106      	bne.n	8394 <__kernel_rem_pio2+0x430>
    8386:	9b00      	ldr	r3, [sp, #0]
    8388:	aa0e      	add	r2, sp, #56	; 0x38
    838a:	3b01      	subs	r3, #1
    838c:	009b      	lsls	r3, r3, #2
    838e:	58d5      	ldr	r5, [r2, r3]
    8390:	15ed      	asrs	r5, r5, #23
    8392:	e6f5      	b.n	8180 <__kernel_rem_pio2+0x21c>
    8394:	2200      	movs	r2, #0
    8396:	4b72      	ldr	r3, [pc, #456]	; (8560 <__kernel_rem_pio2+0x5fc>)
    8398:	0030      	movs	r0, r6
    839a:	0039      	movs	r1, r7
    839c:	f000 fdc4 	bl	8f28 <__aeabi_dcmpge>
    83a0:	2500      	movs	r5, #0
    83a2:	2800      	cmp	r0, #0
    83a4:	d100      	bne.n	83a8 <__kernel_rem_pio2+0x444>
    83a6:	e76c      	b.n	8282 <__kernel_rem_pio2+0x31e>
    83a8:	2301      	movs	r3, #1
    83aa:	469c      	mov	ip, r3
    83ac:	9b00      	ldr	r3, [sp, #0]
    83ae:	44e0      	add	r8, ip
    83b0:	2502      	movs	r5, #2
    83b2:	2b00      	cmp	r3, #0
    83b4:	dd00      	ble.n	83b8 <__kernel_rem_pio2+0x454>
    83b6:	e6ec      	b.n	8192 <__kernel_rem_pio2+0x22e>
    83b8:	0032      	movs	r2, r6
    83ba:	003b      	movs	r3, r7
    83bc:	2000      	movs	r0, #0
    83be:	4966      	ldr	r1, [pc, #408]	; (8558 <__kernel_rem_pio2+0x5f4>)
    83c0:	f001 fcd2 	bl	9d68 <__aeabi_dsub>
    83c4:	0006      	movs	r6, r0
    83c6:	000f      	movs	r7, r1
    83c8:	e75b      	b.n	8282 <__kernel_rem_pio2+0x31e>
    83ca:	4643      	mov	r3, r8
    83cc:	9309      	str	r3, [sp, #36]	; 0x24
    83ce:	9b04      	ldr	r3, [sp, #16]
    83d0:	a80e      	add	r0, sp, #56	; 0x38
    83d2:	3b18      	subs	r3, #24
    83d4:	0019      	movs	r1, r3
    83d6:	9304      	str	r3, [sp, #16]
    83d8:	0093      	lsls	r3, r2, #2
    83da:	58c3      	ldr	r3, [r0, r3]
    83dc:	9503      	str	r5, [sp, #12]
    83de:	9202      	str	r2, [sp, #8]
    83e0:	2b00      	cmp	r3, #0
    83e2:	d10f      	bne.n	8404 <__kernel_rem_pio2+0x4a0>
    83e4:	485d      	ldr	r0, [pc, #372]	; (855c <__kernel_rem_pio2+0x5f8>)
    83e6:	0013      	movs	r3, r2
    83e8:	4684      	mov	ip, r0
    83ea:	a80e      	add	r0, sp, #56	; 0x38
    83ec:	4463      	add	r3, ip
    83ee:	4684      	mov	ip, r0
    83f0:	009b      	lsls	r3, r3, #2
    83f2:	4463      	add	r3, ip
    83f4:	3b04      	subs	r3, #4
    83f6:	6858      	ldr	r0, [r3, #4]
    83f8:	3a01      	subs	r2, #1
    83fa:	3918      	subs	r1, #24
    83fc:	2800      	cmp	r0, #0
    83fe:	d0f9      	beq.n	83f4 <__kernel_rem_pio2+0x490>
    8400:	9202      	str	r2, [sp, #8]
    8402:	9104      	str	r1, [sp, #16]
    8404:	9a04      	ldr	r2, [sp, #16]
    8406:	2000      	movs	r0, #0
    8408:	4953      	ldr	r1, [pc, #332]	; (8558 <__kernel_rem_pio2+0x5f4>)
    840a:	f000 fb73 	bl	8af4 <scalbn>
    840e:	9b02      	ldr	r3, [sp, #8]
    8410:	0004      	movs	r4, r0
    8412:	000d      	movs	r5, r1
    8414:	2b00      	cmp	r3, #0
    8416:	da00      	bge.n	841a <__kernel_rem_pio2+0x4b6>
    8418:	e1d9      	b.n	87ce <__kernel_rem_pio2+0x86a>
    841a:	aa0e      	add	r2, sp, #56	; 0x38
    841c:	4694      	mov	ip, r2
    841e:	009e      	lsls	r6, r3, #2
    8420:	00db      	lsls	r3, r3, #3
    8422:	4466      	add	r6, ip
    8424:	469c      	mov	ip, r3
    8426:	9a08      	ldr	r2, [sp, #32]
    8428:	46b0      	mov	r8, r6
    842a:	4462      	add	r2, ip
    842c:	0016      	movs	r6, r2
    842e:	9304      	str	r3, [sp, #16]
    8430:	9200      	str	r2, [sp, #0]
    8432:	af70      	add	r7, sp, #448	; 0x1c0
    8434:	4643      	mov	r3, r8
    8436:	6818      	ldr	r0, [r3, #0]
    8438:	f001 ffe0 	bl	a3fc <__aeabi_i2d>
    843c:	0022      	movs	r2, r4
    843e:	002b      	movs	r3, r5
    8440:	f001 fa12 	bl	9868 <__aeabi_dmul>
    8444:	4b47      	ldr	r3, [pc, #284]	; (8564 <__kernel_rem_pio2+0x600>)
    8446:	6030      	str	r0, [r6, #0]
    8448:	6071      	str	r1, [r6, #4]
    844a:	2200      	movs	r2, #0
    844c:	0020      	movs	r0, r4
    844e:	0029      	movs	r1, r5
    8450:	f001 fa0a 	bl	9868 <__aeabi_dmul>
    8454:	2304      	movs	r3, #4
    8456:	425b      	negs	r3, r3
    8458:	469c      	mov	ip, r3
    845a:	3e08      	subs	r6, #8
    845c:	0004      	movs	r4, r0
    845e:	000d      	movs	r5, r1
    8460:	44e0      	add	r8, ip
    8462:	42be      	cmp	r6, r7
    8464:	d1e6      	bne.n	8434 <__kernel_rem_pio2+0x4d0>
    8466:	2300      	movs	r3, #0
    8468:	469a      	mov	sl, r3
    846a:	ab4a      	add	r3, sp, #296	; 0x128
    846c:	4699      	mov	r9, r3
    846e:	9b06      	ldr	r3, [sp, #24]
    8470:	9605      	str	r6, [sp, #20]
    8472:	469b      	mov	fp, r3
    8474:	465b      	mov	r3, fp
    8476:	2600      	movs	r6, #0
    8478:	2700      	movs	r7, #0
    847a:	2b00      	cmp	r3, #0
    847c:	db21      	blt.n	84c2 <__kernel_rem_pio2+0x55e>
    847e:	2080      	movs	r0, #128	; 0x80
    8480:	4b39      	ldr	r3, [pc, #228]	; (8568 <__kernel_rem_pio2+0x604>)
    8482:	9d00      	ldr	r5, [sp, #0]
    8484:	4698      	mov	r8, r3
    8486:	05c0      	lsls	r0, r0, #23
    8488:	4938      	ldr	r1, [pc, #224]	; (856c <__kernel_rem_pio2+0x608>)
    848a:	2600      	movs	r6, #0
    848c:	2700      	movs	r7, #0
    848e:	2400      	movs	r4, #0
    8490:	e008      	b.n	84a4 <__kernel_rem_pio2+0x540>
    8492:	2308      	movs	r3, #8
    8494:	469c      	mov	ip, r3
    8496:	3508      	adds	r5, #8
    8498:	44e0      	add	r8, ip
    849a:	4554      	cmp	r4, sl
    849c:	dc11      	bgt.n	84c2 <__kernel_rem_pio2+0x55e>
    849e:	4643      	mov	r3, r8
    84a0:	6818      	ldr	r0, [r3, #0]
    84a2:	6859      	ldr	r1, [r3, #4]
    84a4:	682a      	ldr	r2, [r5, #0]
    84a6:	686b      	ldr	r3, [r5, #4]
    84a8:	f001 f9de 	bl	9868 <__aeabi_dmul>
    84ac:	0002      	movs	r2, r0
    84ae:	000b      	movs	r3, r1
    84b0:	0030      	movs	r0, r6
    84b2:	0039      	movs	r1, r7
    84b4:	f000 fdc8 	bl	9048 <__aeabi_dadd>
    84b8:	3401      	adds	r4, #1
    84ba:	0006      	movs	r6, r0
    84bc:	000f      	movs	r7, r1
    84be:	45a3      	cmp	fp, r4
    84c0:	dae7      	bge.n	8492 <__kernel_rem_pio2+0x52e>
    84c2:	4653      	mov	r3, sl
    84c4:	00db      	lsls	r3, r3, #3
    84c6:	444b      	add	r3, r9
    84c8:	601e      	str	r6, [r3, #0]
    84ca:	605f      	str	r7, [r3, #4]
    84cc:	2301      	movs	r3, #1
    84ce:	469c      	mov	ip, r3
    84d0:	9b00      	ldr	r3, [sp, #0]
    84d2:	9a05      	ldr	r2, [sp, #20]
    84d4:	3b08      	subs	r3, #8
    84d6:	44e2      	add	sl, ip
    84d8:	9300      	str	r3, [sp, #0]
    84da:	429a      	cmp	r2, r3
    84dc:	d1ca      	bne.n	8474 <__kernel_rem_pio2+0x510>
    84de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    84e0:	2b02      	cmp	r3, #2
    84e2:	dd00      	ble.n	84e6 <__kernel_rem_pio2+0x582>
    84e4:	e07a      	b.n	85dc <__kernel_rem_pio2+0x678>
    84e6:	2b00      	cmp	r3, #0
    84e8:	dc42      	bgt.n	8570 <__kernel_rem_pio2+0x60c>
    84ea:	d11c      	bne.n	8526 <__kernel_rem_pio2+0x5c2>
    84ec:	9b04      	ldr	r3, [sp, #16]
    84ee:	2700      	movs	r7, #0
    84f0:	444b      	add	r3, r9
    84f2:	001e      	movs	r6, r3
    84f4:	2400      	movs	r4, #0
    84f6:	ad48      	add	r5, sp, #288	; 0x120
    84f8:	6832      	ldr	r2, [r6, #0]
    84fa:	6873      	ldr	r3, [r6, #4]
    84fc:	0038      	movs	r0, r7
    84fe:	0021      	movs	r1, r4
    8500:	f000 fda2 	bl	9048 <__aeabi_dadd>
    8504:	3e08      	subs	r6, #8
    8506:	0007      	movs	r7, r0
    8508:	000c      	movs	r4, r1
    850a:	42b5      	cmp	r5, r6
    850c:	d1f4      	bne.n	84f8 <__kernel_rem_pio2+0x594>
    850e:	9b03      	ldr	r3, [sp, #12]
    8510:	2b00      	cmp	r3, #0
    8512:	d003      	beq.n	851c <__kernel_rem_pio2+0x5b8>
    8514:	2380      	movs	r3, #128	; 0x80
    8516:	061b      	lsls	r3, r3, #24
    8518:	469c      	mov	ip, r3
    851a:	4464      	add	r4, ip
    851c:	003a      	movs	r2, r7
    851e:	0023      	movs	r3, r4
    8520:	9907      	ldr	r1, [sp, #28]
    8522:	600a      	str	r2, [r1, #0]
    8524:	604b      	str	r3, [r1, #4]
    8526:	2007      	movs	r0, #7
    8528:	9b09      	ldr	r3, [sp, #36]	; 0x24
    852a:	4018      	ands	r0, r3
    852c:	239b      	movs	r3, #155	; 0x9b
    852e:	009b      	lsls	r3, r3, #2
    8530:	449d      	add	sp, r3
    8532:	bc3c      	pop	{r2, r3, r4, r5}
    8534:	4690      	mov	r8, r2
    8536:	4699      	mov	r9, r3
    8538:	46a2      	mov	sl, r4
    853a:	46ab      	mov	fp, r5
    853c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    853e:	4653      	mov	r3, sl
    8540:	2600      	movs	r6, #0
    8542:	2700      	movs	r7, #0
    8544:	c3c0      	stmia	r3!, {r6, r7}
    8546:	469a      	mov	sl, r3
    8548:	2308      	movs	r3, #8
    854a:	469c      	mov	ip, r3
    854c:	44e1      	add	r9, ip
    854e:	45da      	cmp	sl, fp
    8550:	d000      	beq.n	8554 <__kernel_rem_pio2+0x5f0>
    8552:	e562      	b.n	801a <__kernel_rem_pio2+0xb6>
    8554:	e581      	b.n	805a <__kernel_rem_pio2+0xf6>
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	3ff00000 	.word	0x3ff00000
    855c:	3fffffff 	.word	0x3fffffff
    8560:	3fe00000 	.word	0x3fe00000
    8564:	3e700000 	.word	0x3e700000
    8568:	0000ab60 	.word	0x0000ab60
    856c:	3ff921fb 	.word	0x3ff921fb
    8570:	9b04      	ldr	r3, [sp, #16]
    8572:	2000      	movs	r0, #0
    8574:	444b      	add	r3, r9
    8576:	001e      	movs	r6, r3
    8578:	2100      	movs	r1, #0
    857a:	af48      	add	r7, sp, #288	; 0x120
    857c:	6832      	ldr	r2, [r6, #0]
    857e:	6873      	ldr	r3, [r6, #4]
    8580:	3e08      	subs	r6, #8
    8582:	f000 fd61 	bl	9048 <__aeabi_dadd>
    8586:	42be      	cmp	r6, r7
    8588:	d1f8      	bne.n	857c <__kernel_rem_pio2+0x618>
    858a:	9b03      	ldr	r3, [sp, #12]
    858c:	2b00      	cmp	r3, #0
    858e:	d100      	bne.n	8592 <__kernel_rem_pio2+0x62e>
    8590:	e0b8      	b.n	8704 <__kernel_rem_pio2+0x7a0>
    8592:	2380      	movs	r3, #128	; 0x80
    8594:	9a07      	ldr	r2, [sp, #28]
    8596:	061b      	lsls	r3, r3, #24
    8598:	18cb      	adds	r3, r1, r3
    859a:	6010      	str	r0, [r2, #0]
    859c:	6053      	str	r3, [r2, #4]
    859e:	000b      	movs	r3, r1
    85a0:	0002      	movs	r2, r0
    85a2:	984a      	ldr	r0, [sp, #296]	; 0x128
    85a4:	994b      	ldr	r1, [sp, #300]	; 0x12c
    85a6:	f001 fbdf 	bl	9d68 <__aeabi_dsub>
    85aa:	9b02      	ldr	r3, [sp, #8]
    85ac:	2b00      	cmp	r3, #0
    85ae:	dd0b      	ble.n	85c8 <__kernel_rem_pio2+0x664>
    85b0:	2601      	movs	r6, #1
    85b2:	af4c      	add	r7, sp, #304	; 0x130
    85b4:	cf0c      	ldmia	r7!, {r2, r3}
    85b6:	f000 fd47 	bl	9048 <__aeabi_dadd>
    85ba:	9b02      	ldr	r3, [sp, #8]
    85bc:	3601      	adds	r6, #1
    85be:	42b3      	cmp	r3, r6
    85c0:	daf8      	bge.n	85b4 <__kernel_rem_pio2+0x650>
    85c2:	9b03      	ldr	r3, [sp, #12]
    85c4:	2b00      	cmp	r3, #0
    85c6:	d003      	beq.n	85d0 <__kernel_rem_pio2+0x66c>
    85c8:	2380      	movs	r3, #128	; 0x80
    85ca:	061b      	lsls	r3, r3, #24
    85cc:	469c      	mov	ip, r3
    85ce:	4461      	add	r1, ip
    85d0:	000b      	movs	r3, r1
    85d2:	0002      	movs	r2, r0
    85d4:	9907      	ldr	r1, [sp, #28]
    85d6:	608a      	str	r2, [r1, #8]
    85d8:	60cb      	str	r3, [r1, #12]
    85da:	e7a4      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    85dc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    85de:	2b03      	cmp	r3, #3
    85e0:	d1a1      	bne.n	8526 <__kernel_rem_pio2+0x5c2>
    85e2:	9b02      	ldr	r3, [sp, #8]
    85e4:	2b00      	cmp	r3, #0
    85e6:	dc00      	bgt.n	85ea <__kernel_rem_pio2+0x686>
    85e8:	e120      	b.n	882c <__kernel_rem_pio2+0x8c8>
    85ea:	4a99      	ldr	r2, [pc, #612]	; (8850 <__kernel_rem_pio2+0x8ec>)
    85ec:	9b04      	ldr	r3, [sp, #16]
    85ee:	4694      	mov	ip, r2
    85f0:	444b      	add	r3, r9
    85f2:	681e      	ldr	r6, [r3, #0]
    85f4:	685f      	ldr	r7, [r3, #4]
    85f6:	9b02      	ldr	r3, [sp, #8]
    85f8:	4463      	add	r3, ip
    85fa:	469b      	mov	fp, r3
    85fc:	00db      	lsls	r3, r3, #3
    85fe:	444b      	add	r3, r9
    8600:	4698      	mov	r8, r3
    8602:	ab48      	add	r3, sp, #288	; 0x120
    8604:	469a      	mov	sl, r3
    8606:	4643      	mov	r3, r8
    8608:	685c      	ldr	r4, [r3, #4]
    860a:	681b      	ldr	r3, [r3, #0]
    860c:	0018      	movs	r0, r3
    860e:	0021      	movs	r1, r4
    8610:	0032      	movs	r2, r6
    8612:	003b      	movs	r3, r7
    8614:	9000      	str	r0, [sp, #0]
    8616:	9101      	str	r1, [sp, #4]
    8618:	f000 fd16 	bl	9048 <__aeabi_dadd>
    861c:	0004      	movs	r4, r0
    861e:	000d      	movs	r5, r1
    8620:	0002      	movs	r2, r0
    8622:	000b      	movs	r3, r1
    8624:	9800      	ldr	r0, [sp, #0]
    8626:	9901      	ldr	r1, [sp, #4]
    8628:	f001 fb9e 	bl	9d68 <__aeabi_dsub>
    862c:	003b      	movs	r3, r7
    862e:	0032      	movs	r2, r6
    8630:	f000 fd0a 	bl	9048 <__aeabi_dadd>
    8634:	4643      	mov	r3, r8
    8636:	6098      	str	r0, [r3, #8]
    8638:	60d9      	str	r1, [r3, #12]
    863a:	601c      	str	r4, [r3, #0]
    863c:	605d      	str	r5, [r3, #4]
    863e:	2308      	movs	r3, #8
    8640:	425b      	negs	r3, r3
    8642:	469c      	mov	ip, r3
    8644:	44e0      	add	r8, ip
    8646:	0026      	movs	r6, r4
    8648:	002f      	movs	r7, r5
    864a:	45c2      	cmp	sl, r8
    864c:	d1db      	bne.n	8606 <__kernel_rem_pio2+0x6a2>
    864e:	9b02      	ldr	r3, [sp, #8]
    8650:	2b01      	cmp	r3, #1
    8652:	dc00      	bgt.n	8656 <__kernel_rem_pio2+0x6f2>
    8654:	e0ea      	b.n	882c <__kernel_rem_pio2+0x8c8>
    8656:	9b04      	ldr	r3, [sp, #16]
    8658:	46c8      	mov	r8, r9
    865a:	444b      	add	r3, r9
    865c:	681e      	ldr	r6, [r3, #0]
    865e:	685f      	ldr	r7, [r3, #4]
    8660:	465b      	mov	r3, fp
    8662:	00db      	lsls	r3, r3, #3
    8664:	469b      	mov	fp, r3
    8666:	44d8      	add	r8, fp
    8668:	4643      	mov	r3, r8
    866a:	685c      	ldr	r4, [r3, #4]
    866c:	681b      	ldr	r3, [r3, #0]
    866e:	0018      	movs	r0, r3
    8670:	0021      	movs	r1, r4
    8672:	0032      	movs	r2, r6
    8674:	003b      	movs	r3, r7
    8676:	9000      	str	r0, [sp, #0]
    8678:	9101      	str	r1, [sp, #4]
    867a:	f000 fce5 	bl	9048 <__aeabi_dadd>
    867e:	0004      	movs	r4, r0
    8680:	000d      	movs	r5, r1
    8682:	0002      	movs	r2, r0
    8684:	000b      	movs	r3, r1
    8686:	9800      	ldr	r0, [sp, #0]
    8688:	9901      	ldr	r1, [sp, #4]
    868a:	f001 fb6d 	bl	9d68 <__aeabi_dsub>
    868e:	003b      	movs	r3, r7
    8690:	0032      	movs	r2, r6
    8692:	f000 fcd9 	bl	9048 <__aeabi_dadd>
    8696:	4643      	mov	r3, r8
    8698:	6098      	str	r0, [r3, #8]
    869a:	60d9      	str	r1, [r3, #12]
    869c:	601c      	str	r4, [r3, #0]
    869e:	605d      	str	r5, [r3, #4]
    86a0:	2308      	movs	r3, #8
    86a2:	425b      	negs	r3, r3
    86a4:	469c      	mov	ip, r3
    86a6:	44e0      	add	r8, ip
    86a8:	0026      	movs	r6, r4
    86aa:	002f      	movs	r7, r5
    86ac:	45c1      	cmp	r9, r8
    86ae:	d1db      	bne.n	8668 <__kernel_rem_pio2+0x704>
    86b0:	465d      	mov	r5, fp
    86b2:	2700      	movs	r7, #0
    86b4:	2400      	movs	r4, #0
    86b6:	3508      	adds	r5, #8
    86b8:	444d      	add	r5, r9
    86ba:	ae4c      	add	r6, sp, #304	; 0x130
    86bc:	682a      	ldr	r2, [r5, #0]
    86be:	686b      	ldr	r3, [r5, #4]
    86c0:	0038      	movs	r0, r7
    86c2:	0021      	movs	r1, r4
    86c4:	f000 fcc0 	bl	9048 <__aeabi_dadd>
    86c8:	3d08      	subs	r5, #8
    86ca:	0007      	movs	r7, r0
    86cc:	000c      	movs	r4, r1
    86ce:	42ae      	cmp	r6, r5
    86d0:	d1f4      	bne.n	86bc <__kernel_rem_pio2+0x758>
    86d2:	9b03      	ldr	r3, [sp, #12]
    86d4:	2b00      	cmp	r3, #0
    86d6:	d100      	bne.n	86da <__kernel_rem_pio2+0x776>
    86d8:	e091      	b.n	87fe <__kernel_rem_pio2+0x89a>
    86da:	2180      	movs	r1, #128	; 0x80
    86dc:	9a07      	ldr	r2, [sp, #28]
    86de:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    86e0:	0609      	lsls	r1, r1, #24
    86e2:	6013      	str	r3, [r2, #0]
    86e4:	464b      	mov	r3, r9
    86e6:	468c      	mov	ip, r1
    86e8:	685b      	ldr	r3, [r3, #4]
    86ea:	4464      	add	r4, ip
    86ec:	4463      	add	r3, ip
    86ee:	6053      	str	r3, [r2, #4]
    86f0:	464b      	mov	r3, r9
    86f2:	689b      	ldr	r3, [r3, #8]
    86f4:	6117      	str	r7, [r2, #16]
    86f6:	6093      	str	r3, [r2, #8]
    86f8:	464b      	mov	r3, r9
    86fa:	68db      	ldr	r3, [r3, #12]
    86fc:	6154      	str	r4, [r2, #20]
    86fe:	4463      	add	r3, ip
    8700:	60d3      	str	r3, [r2, #12]
    8702:	e710      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    8704:	0002      	movs	r2, r0
    8706:	000b      	movs	r3, r1
    8708:	9c07      	ldr	r4, [sp, #28]
    870a:	6022      	str	r2, [r4, #0]
    870c:	6063      	str	r3, [r4, #4]
    870e:	000b      	movs	r3, r1
    8710:	0002      	movs	r2, r0
    8712:	984a      	ldr	r0, [sp, #296]	; 0x128
    8714:	994b      	ldr	r1, [sp, #300]	; 0x12c
    8716:	f001 fb27 	bl	9d68 <__aeabi_dsub>
    871a:	9b02      	ldr	r3, [sp, #8]
    871c:	2b00      	cmp	r3, #0
    871e:	dd00      	ble.n	8722 <__kernel_rem_pio2+0x7be>
    8720:	e746      	b.n	85b0 <__kernel_rem_pio2+0x64c>
    8722:	000b      	movs	r3, r1
    8724:	0002      	movs	r2, r0
    8726:	9907      	ldr	r1, [sp, #28]
    8728:	608a      	str	r2, [r1, #8]
    872a:	60cb      	str	r3, [r1, #12]
    872c:	e6fb      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    872e:	9b00      	ldr	r3, [sp, #0]
    8730:	a90e      	add	r1, sp, #56	; 0x38
    8732:	1e5a      	subs	r2, r3, #1
    8734:	0092      	lsls	r2, r2, #2
    8736:	ab0e      	add	r3, sp, #56	; 0x38
    8738:	589b      	ldr	r3, [r3, r2]
    873a:	9305      	str	r3, [sp, #20]
    873c:	025b      	lsls	r3, r3, #9
    873e:	0a5b      	lsrs	r3, r3, #9
    8740:	508b      	str	r3, [r1, r2]
    8742:	e584      	b.n	824e <__kernel_rem_pio2+0x2ea>
    8744:	9a00      	ldr	r2, [sp, #0]
    8746:	3301      	adds	r3, #1
    8748:	429a      	cmp	r2, r3
    874a:	d176      	bne.n	883a <__kernel_rem_pio2+0x8d6>
    874c:	9b04      	ldr	r3, [sp, #16]
    874e:	2b00      	cmp	r3, #0
    8750:	dd00      	ble.n	8754 <__kernel_rem_pio2+0x7f0>
    8752:	e56c      	b.n	822e <__kernel_rem_pio2+0x2ca>
    8754:	2d02      	cmp	r5, #2
    8756:	d000      	beq.n	875a <__kernel_rem_pio2+0x7f6>
    8758:	e593      	b.n	8282 <__kernel_rem_pio2+0x31e>
    875a:	e62d      	b.n	83b8 <__kernel_rem_pio2+0x454>
    875c:	4699      	mov	r9, r3
    875e:	4643      	mov	r3, r8
    8760:	9309      	str	r3, [sp, #36]	; 0x24
    8762:	9b04      	ldr	r3, [sp, #16]
    8764:	0030      	movs	r0, r6
    8766:	425a      	negs	r2, r3
    8768:	0039      	movs	r1, r7
    876a:	9503      	str	r5, [sp, #12]
    876c:	f000 f9c2 	bl	8af4 <scalbn>
    8770:	2200      	movs	r2, #0
    8772:	4b38      	ldr	r3, [pc, #224]	; (8854 <__kernel_rem_pio2+0x8f0>)
    8774:	0004      	movs	r4, r0
    8776:	000d      	movs	r5, r1
    8778:	f000 fbd6 	bl	8f28 <__aeabi_dcmpge>
    877c:	2800      	cmp	r0, #0
    877e:	d030      	beq.n	87e2 <__kernel_rem_pio2+0x87e>
    8780:	4b35      	ldr	r3, [pc, #212]	; (8858 <__kernel_rem_pio2+0x8f4>)
    8782:	2200      	movs	r2, #0
    8784:	0020      	movs	r0, r4
    8786:	0029      	movs	r1, r5
    8788:	f001 f86e 	bl	9868 <__aeabi_dmul>
    878c:	f001 fe02 	bl	a394 <__aeabi_d2iz>
    8790:	464a      	mov	r2, r9
    8792:	0006      	movs	r6, r0
    8794:	0097      	lsls	r7, r2, #2
    8796:	f001 fe31 	bl	a3fc <__aeabi_i2d>
    879a:	2200      	movs	r2, #0
    879c:	4b2d      	ldr	r3, [pc, #180]	; (8854 <__kernel_rem_pio2+0x8f0>)
    879e:	f001 f863 	bl	9868 <__aeabi_dmul>
    87a2:	0002      	movs	r2, r0
    87a4:	000b      	movs	r3, r1
    87a6:	0020      	movs	r0, r4
    87a8:	0029      	movs	r1, r5
    87aa:	f001 fadd 	bl	9d68 <__aeabi_dsub>
    87ae:	f001 fdf1 	bl	a394 <__aeabi_d2iz>
    87b2:	aa0e      	add	r2, sp, #56	; 0x38
    87b4:	51d0      	str	r0, [r2, r7]
    87b6:	464a      	mov	r2, r9
    87b8:	9b04      	ldr	r3, [sp, #16]
    87ba:	3201      	adds	r2, #1
    87bc:	3318      	adds	r3, #24
    87be:	9202      	str	r2, [sp, #8]
    87c0:	9304      	str	r3, [sp, #16]
    87c2:	0093      	lsls	r3, r2, #2
    87c4:	aa0e      	add	r2, sp, #56	; 0x38
    87c6:	50d6      	str	r6, [r2, r3]
    87c8:	e61c      	b.n	8404 <__kernel_rem_pio2+0x4a0>
    87ca:	2201      	movs	r2, #1
    87cc:	e587      	b.n	82de <__kernel_rem_pio2+0x37a>
    87ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    87d0:	2b02      	cmp	r3, #2
    87d2:	dc25      	bgt.n	8820 <__kernel_rem_pio2+0x8bc>
    87d4:	2b00      	cmp	r3, #0
    87d6:	dc38      	bgt.n	884a <__kernel_rem_pio2+0x8e6>
    87d8:	d000      	beq.n	87dc <__kernel_rem_pio2+0x878>
    87da:	e6a4      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    87dc:	2700      	movs	r7, #0
    87de:	2400      	movs	r4, #0
    87e0:	e695      	b.n	850e <__kernel_rem_pio2+0x5aa>
    87e2:	464b      	mov	r3, r9
    87e4:	0020      	movs	r0, r4
    87e6:	0029      	movs	r1, r5
    87e8:	009e      	lsls	r6, r3, #2
    87ea:	f001 fdd3 	bl	a394 <__aeabi_d2iz>
    87ee:	ab0e      	add	r3, sp, #56	; 0x38
    87f0:	5198      	str	r0, [r3, r6]
    87f2:	464b      	mov	r3, r9
    87f4:	9302      	str	r3, [sp, #8]
    87f6:	e605      	b.n	8404 <__kernel_rem_pio2+0x4a0>
    87f8:	ab72      	add	r3, sp, #456	; 0x1c8
    87fa:	9308      	str	r3, [sp, #32]
    87fc:	e42d      	b.n	805a <__kernel_rem_pio2+0xf6>
    87fe:	9907      	ldr	r1, [sp, #28]
    8800:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    8802:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    8804:	600a      	str	r2, [r1, #0]
    8806:	604b      	str	r3, [r1, #4]
    8808:	464b      	mov	r3, r9
    880a:	689a      	ldr	r2, [r3, #8]
    880c:	68db      	ldr	r3, [r3, #12]
    880e:	9200      	str	r2, [sp, #0]
    8810:	9301      	str	r3, [sp, #4]
    8812:	608a      	str	r2, [r1, #8]
    8814:	60cb      	str	r3, [r1, #12]
    8816:	003a      	movs	r2, r7
    8818:	0023      	movs	r3, r4
    881a:	610a      	str	r2, [r1, #16]
    881c:	614b      	str	r3, [r1, #20]
    881e:	e682      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    8820:	ab4a      	add	r3, sp, #296	; 0x128
    8822:	4699      	mov	r9, r3
    8824:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    8826:	2b03      	cmp	r3, #3
    8828:	d000      	beq.n	882c <__kernel_rem_pio2+0x8c8>
    882a:	e67c      	b.n	8526 <__kernel_rem_pio2+0x5c2>
    882c:	2700      	movs	r7, #0
    882e:	2400      	movs	r4, #0
    8830:	e74f      	b.n	86d2 <__kernel_rem_pio2+0x76e>
    8832:	9a00      	ldr	r2, [sp, #0]
    8834:	2301      	movs	r3, #1
    8836:	2a01      	cmp	r2, #1
    8838:	dd88      	ble.n	874c <__kernel_rem_pio2+0x7e8>
    883a:	0099      	lsls	r1, r3, #2
    883c:	aa0e      	add	r2, sp, #56	; 0x38
    883e:	5854      	ldr	r4, [r2, r1]
    8840:	2c00      	cmp	r4, #0
    8842:	d100      	bne.n	8846 <__kernel_rem_pio2+0x8e2>
    8844:	e77e      	b.n	8744 <__kernel_rem_pio2+0x7e0>
    8846:	1c5a      	adds	r2, r3, #1
    8848:	e4aa      	b.n	81a0 <__kernel_rem_pio2+0x23c>
    884a:	2000      	movs	r0, #0
    884c:	2100      	movs	r1, #0
    884e:	e69c      	b.n	858a <__kernel_rem_pio2+0x626>
    8850:	1fffffff 	.word	0x1fffffff
    8854:	41700000 	.word	0x41700000
    8858:	3e700000 	.word	0x3e700000

0000885c <__kernel_sin>:
    885c:	b5f0      	push	{r4, r5, r6, r7, lr}
    885e:	46ce      	mov	lr, r9
    8860:	4647      	mov	r7, r8
    8862:	b580      	push	{r7, lr}
    8864:	b087      	sub	sp, #28
    8866:	9200      	str	r2, [sp, #0]
    8868:	9301      	str	r3, [sp, #4]
    886a:	4a46      	ldr	r2, [pc, #280]	; (8984 <__kernel_sin+0x128>)
    886c:	004b      	lsls	r3, r1, #1
    886e:	4681      	mov	r9, r0
    8870:	4688      	mov	r8, r1
    8872:	085b      	lsrs	r3, r3, #1
    8874:	4293      	cmp	r3, r2
    8876:	dc05      	bgt.n	8884 <__kernel_sin+0x28>
    8878:	f001 fd8c 	bl	a394 <__aeabi_d2iz>
    887c:	4641      	mov	r1, r8
    887e:	1e03      	subs	r3, r0, #0
    8880:	4648      	mov	r0, r9
    8882:	d066      	beq.n	8952 <__kernel_sin+0xf6>
    8884:	464a      	mov	r2, r9
    8886:	4643      	mov	r3, r8
    8888:	4648      	mov	r0, r9
    888a:	4641      	mov	r1, r8
    888c:	f000 ffec 	bl	9868 <__aeabi_dmul>
    8890:	0004      	movs	r4, r0
    8892:	000d      	movs	r5, r1
    8894:	0002      	movs	r2, r0
    8896:	000b      	movs	r3, r1
    8898:	4648      	mov	r0, r9
    889a:	4641      	mov	r1, r8
    889c:	f000 ffe4 	bl	9868 <__aeabi_dmul>
    88a0:	4a39      	ldr	r2, [pc, #228]	; (8988 <__kernel_sin+0x12c>)
    88a2:	4b3a      	ldr	r3, [pc, #232]	; (898c <__kernel_sin+0x130>)
    88a4:	0006      	movs	r6, r0
    88a6:	000f      	movs	r7, r1
    88a8:	0020      	movs	r0, r4
    88aa:	0029      	movs	r1, r5
    88ac:	f000 ffdc 	bl	9868 <__aeabi_dmul>
    88b0:	4a37      	ldr	r2, [pc, #220]	; (8990 <__kernel_sin+0x134>)
    88b2:	4b38      	ldr	r3, [pc, #224]	; (8994 <__kernel_sin+0x138>)
    88b4:	f001 fa58 	bl	9d68 <__aeabi_dsub>
    88b8:	0022      	movs	r2, r4
    88ba:	002b      	movs	r3, r5
    88bc:	f000 ffd4 	bl	9868 <__aeabi_dmul>
    88c0:	4a35      	ldr	r2, [pc, #212]	; (8998 <__kernel_sin+0x13c>)
    88c2:	4b36      	ldr	r3, [pc, #216]	; (899c <__kernel_sin+0x140>)
    88c4:	f000 fbc0 	bl	9048 <__aeabi_dadd>
    88c8:	0022      	movs	r2, r4
    88ca:	002b      	movs	r3, r5
    88cc:	f000 ffcc 	bl	9868 <__aeabi_dmul>
    88d0:	4a33      	ldr	r2, [pc, #204]	; (89a0 <__kernel_sin+0x144>)
    88d2:	4b34      	ldr	r3, [pc, #208]	; (89a4 <__kernel_sin+0x148>)
    88d4:	f001 fa48 	bl	9d68 <__aeabi_dsub>
    88d8:	0022      	movs	r2, r4
    88da:	002b      	movs	r3, r5
    88dc:	f000 ffc4 	bl	9868 <__aeabi_dmul>
    88e0:	4b31      	ldr	r3, [pc, #196]	; (89a8 <__kernel_sin+0x14c>)
    88e2:	4a32      	ldr	r2, [pc, #200]	; (89ac <__kernel_sin+0x150>)
    88e4:	f000 fbb0 	bl	9048 <__aeabi_dadd>
    88e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88ea:	9002      	str	r0, [sp, #8]
    88ec:	9103      	str	r1, [sp, #12]
    88ee:	2b00      	cmp	r3, #0
    88f0:	d034      	beq.n	895c <__kernel_sin+0x100>
    88f2:	9800      	ldr	r0, [sp, #0]
    88f4:	9901      	ldr	r1, [sp, #4]
    88f6:	2200      	movs	r2, #0
    88f8:	4b2d      	ldr	r3, [pc, #180]	; (89b0 <__kernel_sin+0x154>)
    88fa:	f000 ffb5 	bl	9868 <__aeabi_dmul>
    88fe:	9a02      	ldr	r2, [sp, #8]
    8900:	9b03      	ldr	r3, [sp, #12]
    8902:	9004      	str	r0, [sp, #16]
    8904:	9105      	str	r1, [sp, #20]
    8906:	0030      	movs	r0, r6
    8908:	0039      	movs	r1, r7
    890a:	f000 ffad 	bl	9868 <__aeabi_dmul>
    890e:	0002      	movs	r2, r0
    8910:	000b      	movs	r3, r1
    8912:	9804      	ldr	r0, [sp, #16]
    8914:	9905      	ldr	r1, [sp, #20]
    8916:	f001 fa27 	bl	9d68 <__aeabi_dsub>
    891a:	0022      	movs	r2, r4
    891c:	002b      	movs	r3, r5
    891e:	f000 ffa3 	bl	9868 <__aeabi_dmul>
    8922:	9a00      	ldr	r2, [sp, #0]
    8924:	9b01      	ldr	r3, [sp, #4]
    8926:	f001 fa1f 	bl	9d68 <__aeabi_dsub>
    892a:	4a22      	ldr	r2, [pc, #136]	; (89b4 <__kernel_sin+0x158>)
    892c:	0004      	movs	r4, r0
    892e:	000d      	movs	r5, r1
    8930:	4b21      	ldr	r3, [pc, #132]	; (89b8 <__kernel_sin+0x15c>)
    8932:	0030      	movs	r0, r6
    8934:	0039      	movs	r1, r7
    8936:	f000 ff97 	bl	9868 <__aeabi_dmul>
    893a:	0002      	movs	r2, r0
    893c:	000b      	movs	r3, r1
    893e:	0020      	movs	r0, r4
    8940:	0029      	movs	r1, r5
    8942:	f000 fb81 	bl	9048 <__aeabi_dadd>
    8946:	0002      	movs	r2, r0
    8948:	000b      	movs	r3, r1
    894a:	4648      	mov	r0, r9
    894c:	4641      	mov	r1, r8
    894e:	f001 fa0b 	bl	9d68 <__aeabi_dsub>
    8952:	b007      	add	sp, #28
    8954:	bc0c      	pop	{r2, r3}
    8956:	4690      	mov	r8, r2
    8958:	4699      	mov	r9, r3
    895a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    895c:	0002      	movs	r2, r0
    895e:	000b      	movs	r3, r1
    8960:	0020      	movs	r0, r4
    8962:	0029      	movs	r1, r5
    8964:	f000 ff80 	bl	9868 <__aeabi_dmul>
    8968:	4a12      	ldr	r2, [pc, #72]	; (89b4 <__kernel_sin+0x158>)
    896a:	4b13      	ldr	r3, [pc, #76]	; (89b8 <__kernel_sin+0x15c>)
    896c:	f001 f9fc 	bl	9d68 <__aeabi_dsub>
    8970:	0032      	movs	r2, r6
    8972:	003b      	movs	r3, r7
    8974:	f000 ff78 	bl	9868 <__aeabi_dmul>
    8978:	464a      	mov	r2, r9
    897a:	4643      	mov	r3, r8
    897c:	f000 fb64 	bl	9048 <__aeabi_dadd>
    8980:	e7e7      	b.n	8952 <__kernel_sin+0xf6>
    8982:	46c0      	nop			; (mov r8, r8)
    8984:	3e3fffff 	.word	0x3e3fffff
    8988:	5acfd57c 	.word	0x5acfd57c
    898c:	3de5d93a 	.word	0x3de5d93a
    8990:	8a2b9ceb 	.word	0x8a2b9ceb
    8994:	3e5ae5e6 	.word	0x3e5ae5e6
    8998:	57b1fe7d 	.word	0x57b1fe7d
    899c:	3ec71de3 	.word	0x3ec71de3
    89a0:	19c161d5 	.word	0x19c161d5
    89a4:	3f2a01a0 	.word	0x3f2a01a0
    89a8:	3f811111 	.word	0x3f811111
    89ac:	1110f8a6 	.word	0x1110f8a6
    89b0:	3fe00000 	.word	0x3fe00000
    89b4:	55555549 	.word	0x55555549
    89b8:	3fc55555 	.word	0x3fc55555

000089bc <fabs>:
    89bc:	0049      	lsls	r1, r1, #1
    89be:	084b      	lsrs	r3, r1, #1
    89c0:	0019      	movs	r1, r3
    89c2:	4770      	bx	lr

000089c4 <floor>:
    89c4:	4a45      	ldr	r2, [pc, #276]	; (8adc <floor+0x118>)
    89c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89c8:	4657      	mov	r7, sl
    89ca:	4692      	mov	sl, r2
    89cc:	004b      	lsls	r3, r1, #1
    89ce:	0d5b      	lsrs	r3, r3, #21
    89d0:	449a      	add	sl, r3
    89d2:	464e      	mov	r6, r9
    89d4:	4645      	mov	r5, r8
    89d6:	46de      	mov	lr, fp
    89d8:	4652      	mov	r2, sl
    89da:	b5e0      	push	{r5, r6, r7, lr}
    89dc:	000c      	movs	r4, r1
    89de:	0005      	movs	r5, r0
    89e0:	000e      	movs	r6, r1
    89e2:	4689      	mov	r9, r1
    89e4:	0007      	movs	r7, r0
    89e6:	2a13      	cmp	r2, #19
    89e8:	dc22      	bgt.n	8a30 <floor+0x6c>
    89ea:	2a00      	cmp	r2, #0
    89ec:	db47      	blt.n	8a7e <floor+0xba>
    89ee:	4652      	mov	r2, sl
    89f0:	4b3b      	ldr	r3, [pc, #236]	; (8ae0 <floor+0x11c>)
    89f2:	4113      	asrs	r3, r2
    89f4:	4698      	mov	r8, r3
    89f6:	000b      	movs	r3, r1
    89f8:	4642      	mov	r2, r8
    89fa:	4013      	ands	r3, r2
    89fc:	4303      	orrs	r3, r0
    89fe:	d011      	beq.n	8a24 <floor+0x60>
    8a00:	4a38      	ldr	r2, [pc, #224]	; (8ae4 <floor+0x120>)
    8a02:	4b39      	ldr	r3, [pc, #228]	; (8ae8 <floor+0x124>)
    8a04:	f000 fb20 	bl	9048 <__aeabi_dadd>
    8a08:	2200      	movs	r2, #0
    8a0a:	2300      	movs	r3, #0
    8a0c:	f000 fa82 	bl	8f14 <__aeabi_dcmpgt>
    8a10:	2800      	cmp	r0, #0
    8a12:	d005      	beq.n	8a20 <floor+0x5c>
    8a14:	2c00      	cmp	r4, #0
    8a16:	db41      	blt.n	8a9c <floor+0xd8>
    8a18:	464e      	mov	r6, r9
    8a1a:	4643      	mov	r3, r8
    8a1c:	2700      	movs	r7, #0
    8a1e:	439e      	bics	r6, r3
    8a20:	0038      	movs	r0, r7
    8a22:	0031      	movs	r1, r6
    8a24:	bc3c      	pop	{r2, r3, r4, r5}
    8a26:	4690      	mov	r8, r2
    8a28:	4699      	mov	r9, r3
    8a2a:	46a2      	mov	sl, r4
    8a2c:	46ab      	mov	fp, r5
    8a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a30:	4652      	mov	r2, sl
    8a32:	2a33      	cmp	r2, #51	; 0x33
    8a34:	dd08      	ble.n	8a48 <floor+0x84>
    8a36:	2380      	movs	r3, #128	; 0x80
    8a38:	00db      	lsls	r3, r3, #3
    8a3a:	459a      	cmp	sl, r3
    8a3c:	d1f2      	bne.n	8a24 <floor+0x60>
    8a3e:	0002      	movs	r2, r0
    8a40:	000b      	movs	r3, r1
    8a42:	f000 fb01 	bl	9048 <__aeabi_dadd>
    8a46:	e7ed      	b.n	8a24 <floor+0x60>
    8a48:	4a28      	ldr	r2, [pc, #160]	; (8aec <floor+0x128>)
    8a4a:	4694      	mov	ip, r2
    8a4c:	2201      	movs	r2, #1
    8a4e:	4463      	add	r3, ip
    8a50:	4252      	negs	r2, r2
    8a52:	40da      	lsrs	r2, r3
    8a54:	4693      	mov	fp, r2
    8a56:	4202      	tst	r2, r0
    8a58:	d0e4      	beq.n	8a24 <floor+0x60>
    8a5a:	4a22      	ldr	r2, [pc, #136]	; (8ae4 <floor+0x120>)
    8a5c:	4b22      	ldr	r3, [pc, #136]	; (8ae8 <floor+0x124>)
    8a5e:	f000 faf3 	bl	9048 <__aeabi_dadd>
    8a62:	2200      	movs	r2, #0
    8a64:	2300      	movs	r3, #0
    8a66:	f000 fa55 	bl	8f14 <__aeabi_dcmpgt>
    8a6a:	2800      	cmp	r0, #0
    8a6c:	d0d8      	beq.n	8a20 <floor+0x5c>
    8a6e:	2c00      	cmp	r4, #0
    8a70:	db1a      	blt.n	8aa8 <floor+0xe4>
    8a72:	465b      	mov	r3, fp
    8a74:	464e      	mov	r6, r9
    8a76:	439f      	bics	r7, r3
    8a78:	0038      	movs	r0, r7
    8a7a:	0031      	movs	r1, r6
    8a7c:	e7d2      	b.n	8a24 <floor+0x60>
    8a7e:	4a19      	ldr	r2, [pc, #100]	; (8ae4 <floor+0x120>)
    8a80:	4b19      	ldr	r3, [pc, #100]	; (8ae8 <floor+0x124>)
    8a82:	f000 fae1 	bl	9048 <__aeabi_dadd>
    8a86:	2200      	movs	r2, #0
    8a88:	2300      	movs	r3, #0
    8a8a:	f000 fa43 	bl	8f14 <__aeabi_dcmpgt>
    8a8e:	2800      	cmp	r0, #0
    8a90:	d0c6      	beq.n	8a20 <floor+0x5c>
    8a92:	2c00      	cmp	r4, #0
    8a94:	db16      	blt.n	8ac4 <floor+0x100>
    8a96:	2700      	movs	r7, #0
    8a98:	2600      	movs	r6, #0
    8a9a:	e7c1      	b.n	8a20 <floor+0x5c>
    8a9c:	2380      	movs	r3, #128	; 0x80
    8a9e:	4652      	mov	r2, sl
    8aa0:	035b      	lsls	r3, r3, #13
    8aa2:	4113      	asrs	r3, r2
    8aa4:	4499      	add	r9, r3
    8aa6:	e7b7      	b.n	8a18 <floor+0x54>
    8aa8:	4653      	mov	r3, sl
    8aaa:	2b14      	cmp	r3, #20
    8aac:	d012      	beq.n	8ad4 <floor+0x110>
    8aae:	2334      	movs	r3, #52	; 0x34
    8ab0:	4652      	mov	r2, sl
    8ab2:	2701      	movs	r7, #1
    8ab4:	1a9b      	subs	r3, r3, r2
    8ab6:	409f      	lsls	r7, r3
    8ab8:	197f      	adds	r7, r7, r5
    8aba:	42af      	cmp	r7, r5
    8abc:	419b      	sbcs	r3, r3
    8abe:	425b      	negs	r3, r3
    8ac0:	4499      	add	r9, r3
    8ac2:	e7d6      	b.n	8a72 <floor+0xae>
    8ac4:	0064      	lsls	r4, r4, #1
    8ac6:	0864      	lsrs	r4, r4, #1
    8ac8:	4325      	orrs	r5, r4
    8aca:	2700      	movs	r7, #0
    8acc:	2d00      	cmp	r5, #0
    8ace:	d0a7      	beq.n	8a20 <floor+0x5c>
    8ad0:	4e07      	ldr	r6, [pc, #28]	; (8af0 <floor+0x12c>)
    8ad2:	e7a5      	b.n	8a20 <floor+0x5c>
    8ad4:	3b13      	subs	r3, #19
    8ad6:	469c      	mov	ip, r3
    8ad8:	44e1      	add	r9, ip
    8ada:	e7ca      	b.n	8a72 <floor+0xae>
    8adc:	fffffc01 	.word	0xfffffc01
    8ae0:	000fffff 	.word	0x000fffff
    8ae4:	8800759c 	.word	0x8800759c
    8ae8:	7e37e43c 	.word	0x7e37e43c
    8aec:	fffffbed 	.word	0xfffffbed
    8af0:	bff00000 	.word	0xbff00000

00008af4 <scalbn>:
    8af4:	004b      	lsls	r3, r1, #1
    8af6:	b570      	push	{r4, r5, r6, lr}
    8af8:	0d5b      	lsrs	r3, r3, #21
    8afa:	0014      	movs	r4, r2
    8afc:	000a      	movs	r2, r1
    8afe:	2b00      	cmp	r3, #0
    8b00:	d11a      	bne.n	8b38 <scalbn+0x44>
    8b02:	004b      	lsls	r3, r1, #1
    8b04:	085b      	lsrs	r3, r3, #1
    8b06:	4303      	orrs	r3, r0
    8b08:	d015      	beq.n	8b36 <scalbn+0x42>
    8b0a:	2200      	movs	r2, #0
    8b0c:	4b22      	ldr	r3, [pc, #136]	; (8b98 <scalbn+0xa4>)
    8b0e:	f000 feab 	bl	9868 <__aeabi_dmul>
    8b12:	4b22      	ldr	r3, [pc, #136]	; (8b9c <scalbn+0xa8>)
    8b14:	000a      	movs	r2, r1
    8b16:	429c      	cmp	r4, r3
    8b18:	db22      	blt.n	8b60 <scalbn+0x6c>
    8b1a:	004b      	lsls	r3, r1, #1
    8b1c:	0d5b      	lsrs	r3, r3, #21
    8b1e:	3b36      	subs	r3, #54	; 0x36
    8b20:	4d1f      	ldr	r5, [pc, #124]	; (8ba0 <scalbn+0xac>)
    8b22:	18e3      	adds	r3, r4, r3
    8b24:	42ab      	cmp	r3, r5
    8b26:	dc20      	bgt.n	8b6a <scalbn+0x76>
    8b28:	2b00      	cmp	r3, #0
    8b2a:	dd0d      	ble.n	8b48 <scalbn+0x54>
    8b2c:	4c1d      	ldr	r4, [pc, #116]	; (8ba4 <scalbn+0xb0>)
    8b2e:	051b      	lsls	r3, r3, #20
    8b30:	4022      	ands	r2, r4
    8b32:	431a      	orrs	r2, r3
    8b34:	0011      	movs	r1, r2
    8b36:	bd70      	pop	{r4, r5, r6, pc}
    8b38:	4d1b      	ldr	r5, [pc, #108]	; (8ba8 <scalbn+0xb4>)
    8b3a:	42ab      	cmp	r3, r5
    8b3c:	d1f0      	bne.n	8b20 <scalbn+0x2c>
    8b3e:	0002      	movs	r2, r0
    8b40:	000b      	movs	r3, r1
    8b42:	f000 fa81 	bl	9048 <__aeabi_dadd>
    8b46:	e7f6      	b.n	8b36 <scalbn+0x42>
    8b48:	001d      	movs	r5, r3
    8b4a:	3535      	adds	r5, #53	; 0x35
    8b4c:	da18      	bge.n	8b80 <scalbn+0x8c>
    8b4e:	4b17      	ldr	r3, [pc, #92]	; (8bac <scalbn+0xb8>)
    8b50:	0002      	movs	r2, r0
    8b52:	429c      	cmp	r4, r3
    8b54:	dc0a      	bgt.n	8b6c <scalbn+0x78>
    8b56:	000b      	movs	r3, r1
    8b58:	4815      	ldr	r0, [pc, #84]	; (8bb0 <scalbn+0xbc>)
    8b5a:	4916      	ldr	r1, [pc, #88]	; (8bb4 <scalbn+0xc0>)
    8b5c:	f000 f832 	bl	8bc4 <copysign>
    8b60:	4a13      	ldr	r2, [pc, #76]	; (8bb0 <scalbn+0xbc>)
    8b62:	4b14      	ldr	r3, [pc, #80]	; (8bb4 <scalbn+0xc0>)
    8b64:	f000 fe80 	bl	9868 <__aeabi_dmul>
    8b68:	e7e5      	b.n	8b36 <scalbn+0x42>
    8b6a:	0002      	movs	r2, r0
    8b6c:	000b      	movs	r3, r1
    8b6e:	4812      	ldr	r0, [pc, #72]	; (8bb8 <scalbn+0xc4>)
    8b70:	4912      	ldr	r1, [pc, #72]	; (8bbc <scalbn+0xc8>)
    8b72:	f000 f827 	bl	8bc4 <copysign>
    8b76:	4a10      	ldr	r2, [pc, #64]	; (8bb8 <scalbn+0xc4>)
    8b78:	4b10      	ldr	r3, [pc, #64]	; (8bbc <scalbn+0xc8>)
    8b7a:	f000 fe75 	bl	9868 <__aeabi_dmul>
    8b7e:	e7da      	b.n	8b36 <scalbn+0x42>
    8b80:	4c08      	ldr	r4, [pc, #32]	; (8ba4 <scalbn+0xb0>)
    8b82:	3336      	adds	r3, #54	; 0x36
    8b84:	4022      	ands	r2, r4
    8b86:	051b      	lsls	r3, r3, #20
    8b88:	4313      	orrs	r3, r2
    8b8a:	0019      	movs	r1, r3
    8b8c:	2200      	movs	r2, #0
    8b8e:	4b0c      	ldr	r3, [pc, #48]	; (8bc0 <scalbn+0xcc>)
    8b90:	f000 fe6a 	bl	9868 <__aeabi_dmul>
    8b94:	e7cf      	b.n	8b36 <scalbn+0x42>
    8b96:	46c0      	nop			; (mov r8, r8)
    8b98:	43500000 	.word	0x43500000
    8b9c:	ffff3cb0 	.word	0xffff3cb0
    8ba0:	000007fe 	.word	0x000007fe
    8ba4:	800fffff 	.word	0x800fffff
    8ba8:	000007ff 	.word	0x000007ff
    8bac:	0000c350 	.word	0x0000c350
    8bb0:	c2f8f359 	.word	0xc2f8f359
    8bb4:	01a56e1f 	.word	0x01a56e1f
    8bb8:	8800759c 	.word	0x8800759c
    8bbc:	7e37e43c 	.word	0x7e37e43c
    8bc0:	3c900000 	.word	0x3c900000

00008bc4 <copysign>:
    8bc4:	b530      	push	{r4, r5, lr}
    8bc6:	004a      	lsls	r2, r1, #1
    8bc8:	0fdb      	lsrs	r3, r3, #31
    8bca:	07db      	lsls	r3, r3, #31
    8bcc:	0852      	lsrs	r2, r2, #1
    8bce:	431a      	orrs	r2, r3
    8bd0:	0011      	movs	r1, r2
    8bd2:	bd30      	pop	{r4, r5, pc}

00008bd4 <__udivsi3>:
    8bd4:	2200      	movs	r2, #0
    8bd6:	0843      	lsrs	r3, r0, #1
    8bd8:	428b      	cmp	r3, r1
    8bda:	d374      	bcc.n	8cc6 <__udivsi3+0xf2>
    8bdc:	0903      	lsrs	r3, r0, #4
    8bde:	428b      	cmp	r3, r1
    8be0:	d35f      	bcc.n	8ca2 <__udivsi3+0xce>
    8be2:	0a03      	lsrs	r3, r0, #8
    8be4:	428b      	cmp	r3, r1
    8be6:	d344      	bcc.n	8c72 <__udivsi3+0x9e>
    8be8:	0b03      	lsrs	r3, r0, #12
    8bea:	428b      	cmp	r3, r1
    8bec:	d328      	bcc.n	8c40 <__udivsi3+0x6c>
    8bee:	0c03      	lsrs	r3, r0, #16
    8bf0:	428b      	cmp	r3, r1
    8bf2:	d30d      	bcc.n	8c10 <__udivsi3+0x3c>
    8bf4:	22ff      	movs	r2, #255	; 0xff
    8bf6:	0209      	lsls	r1, r1, #8
    8bf8:	ba12      	rev	r2, r2
    8bfa:	0c03      	lsrs	r3, r0, #16
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d302      	bcc.n	8c06 <__udivsi3+0x32>
    8c00:	1212      	asrs	r2, r2, #8
    8c02:	0209      	lsls	r1, r1, #8
    8c04:	d065      	beq.n	8cd2 <__udivsi3+0xfe>
    8c06:	0b03      	lsrs	r3, r0, #12
    8c08:	428b      	cmp	r3, r1
    8c0a:	d319      	bcc.n	8c40 <__udivsi3+0x6c>
    8c0c:	e000      	b.n	8c10 <__udivsi3+0x3c>
    8c0e:	0a09      	lsrs	r1, r1, #8
    8c10:	0bc3      	lsrs	r3, r0, #15
    8c12:	428b      	cmp	r3, r1
    8c14:	d301      	bcc.n	8c1a <__udivsi3+0x46>
    8c16:	03cb      	lsls	r3, r1, #15
    8c18:	1ac0      	subs	r0, r0, r3
    8c1a:	4152      	adcs	r2, r2
    8c1c:	0b83      	lsrs	r3, r0, #14
    8c1e:	428b      	cmp	r3, r1
    8c20:	d301      	bcc.n	8c26 <__udivsi3+0x52>
    8c22:	038b      	lsls	r3, r1, #14
    8c24:	1ac0      	subs	r0, r0, r3
    8c26:	4152      	adcs	r2, r2
    8c28:	0b43      	lsrs	r3, r0, #13
    8c2a:	428b      	cmp	r3, r1
    8c2c:	d301      	bcc.n	8c32 <__udivsi3+0x5e>
    8c2e:	034b      	lsls	r3, r1, #13
    8c30:	1ac0      	subs	r0, r0, r3
    8c32:	4152      	adcs	r2, r2
    8c34:	0b03      	lsrs	r3, r0, #12
    8c36:	428b      	cmp	r3, r1
    8c38:	d301      	bcc.n	8c3e <__udivsi3+0x6a>
    8c3a:	030b      	lsls	r3, r1, #12
    8c3c:	1ac0      	subs	r0, r0, r3
    8c3e:	4152      	adcs	r2, r2
    8c40:	0ac3      	lsrs	r3, r0, #11
    8c42:	428b      	cmp	r3, r1
    8c44:	d301      	bcc.n	8c4a <__udivsi3+0x76>
    8c46:	02cb      	lsls	r3, r1, #11
    8c48:	1ac0      	subs	r0, r0, r3
    8c4a:	4152      	adcs	r2, r2
    8c4c:	0a83      	lsrs	r3, r0, #10
    8c4e:	428b      	cmp	r3, r1
    8c50:	d301      	bcc.n	8c56 <__udivsi3+0x82>
    8c52:	028b      	lsls	r3, r1, #10
    8c54:	1ac0      	subs	r0, r0, r3
    8c56:	4152      	adcs	r2, r2
    8c58:	0a43      	lsrs	r3, r0, #9
    8c5a:	428b      	cmp	r3, r1
    8c5c:	d301      	bcc.n	8c62 <__udivsi3+0x8e>
    8c5e:	024b      	lsls	r3, r1, #9
    8c60:	1ac0      	subs	r0, r0, r3
    8c62:	4152      	adcs	r2, r2
    8c64:	0a03      	lsrs	r3, r0, #8
    8c66:	428b      	cmp	r3, r1
    8c68:	d301      	bcc.n	8c6e <__udivsi3+0x9a>
    8c6a:	020b      	lsls	r3, r1, #8
    8c6c:	1ac0      	subs	r0, r0, r3
    8c6e:	4152      	adcs	r2, r2
    8c70:	d2cd      	bcs.n	8c0e <__udivsi3+0x3a>
    8c72:	09c3      	lsrs	r3, r0, #7
    8c74:	428b      	cmp	r3, r1
    8c76:	d301      	bcc.n	8c7c <__udivsi3+0xa8>
    8c78:	01cb      	lsls	r3, r1, #7
    8c7a:	1ac0      	subs	r0, r0, r3
    8c7c:	4152      	adcs	r2, r2
    8c7e:	0983      	lsrs	r3, r0, #6
    8c80:	428b      	cmp	r3, r1
    8c82:	d301      	bcc.n	8c88 <__udivsi3+0xb4>
    8c84:	018b      	lsls	r3, r1, #6
    8c86:	1ac0      	subs	r0, r0, r3
    8c88:	4152      	adcs	r2, r2
    8c8a:	0943      	lsrs	r3, r0, #5
    8c8c:	428b      	cmp	r3, r1
    8c8e:	d301      	bcc.n	8c94 <__udivsi3+0xc0>
    8c90:	014b      	lsls	r3, r1, #5
    8c92:	1ac0      	subs	r0, r0, r3
    8c94:	4152      	adcs	r2, r2
    8c96:	0903      	lsrs	r3, r0, #4
    8c98:	428b      	cmp	r3, r1
    8c9a:	d301      	bcc.n	8ca0 <__udivsi3+0xcc>
    8c9c:	010b      	lsls	r3, r1, #4
    8c9e:	1ac0      	subs	r0, r0, r3
    8ca0:	4152      	adcs	r2, r2
    8ca2:	08c3      	lsrs	r3, r0, #3
    8ca4:	428b      	cmp	r3, r1
    8ca6:	d301      	bcc.n	8cac <__udivsi3+0xd8>
    8ca8:	00cb      	lsls	r3, r1, #3
    8caa:	1ac0      	subs	r0, r0, r3
    8cac:	4152      	adcs	r2, r2
    8cae:	0883      	lsrs	r3, r0, #2
    8cb0:	428b      	cmp	r3, r1
    8cb2:	d301      	bcc.n	8cb8 <__udivsi3+0xe4>
    8cb4:	008b      	lsls	r3, r1, #2
    8cb6:	1ac0      	subs	r0, r0, r3
    8cb8:	4152      	adcs	r2, r2
    8cba:	0843      	lsrs	r3, r0, #1
    8cbc:	428b      	cmp	r3, r1
    8cbe:	d301      	bcc.n	8cc4 <__udivsi3+0xf0>
    8cc0:	004b      	lsls	r3, r1, #1
    8cc2:	1ac0      	subs	r0, r0, r3
    8cc4:	4152      	adcs	r2, r2
    8cc6:	1a41      	subs	r1, r0, r1
    8cc8:	d200      	bcs.n	8ccc <__udivsi3+0xf8>
    8cca:	4601      	mov	r1, r0
    8ccc:	4152      	adcs	r2, r2
    8cce:	4610      	mov	r0, r2
    8cd0:	4770      	bx	lr
    8cd2:	e7ff      	b.n	8cd4 <__udivsi3+0x100>
    8cd4:	b501      	push	{r0, lr}
    8cd6:	2000      	movs	r0, #0
    8cd8:	f000 f8f0 	bl	8ebc <__aeabi_idiv0>
    8cdc:	bd02      	pop	{r1, pc}
    8cde:	46c0      	nop			; (mov r8, r8)

00008ce0 <__aeabi_uidivmod>:
    8ce0:	2900      	cmp	r1, #0
    8ce2:	d0f7      	beq.n	8cd4 <__udivsi3+0x100>
    8ce4:	e776      	b.n	8bd4 <__udivsi3>
    8ce6:	4770      	bx	lr

00008ce8 <__divsi3>:
    8ce8:	4603      	mov	r3, r0
    8cea:	430b      	orrs	r3, r1
    8cec:	d47f      	bmi.n	8dee <__divsi3+0x106>
    8cee:	2200      	movs	r2, #0
    8cf0:	0843      	lsrs	r3, r0, #1
    8cf2:	428b      	cmp	r3, r1
    8cf4:	d374      	bcc.n	8de0 <__divsi3+0xf8>
    8cf6:	0903      	lsrs	r3, r0, #4
    8cf8:	428b      	cmp	r3, r1
    8cfa:	d35f      	bcc.n	8dbc <__divsi3+0xd4>
    8cfc:	0a03      	lsrs	r3, r0, #8
    8cfe:	428b      	cmp	r3, r1
    8d00:	d344      	bcc.n	8d8c <__divsi3+0xa4>
    8d02:	0b03      	lsrs	r3, r0, #12
    8d04:	428b      	cmp	r3, r1
    8d06:	d328      	bcc.n	8d5a <__divsi3+0x72>
    8d08:	0c03      	lsrs	r3, r0, #16
    8d0a:	428b      	cmp	r3, r1
    8d0c:	d30d      	bcc.n	8d2a <__divsi3+0x42>
    8d0e:	22ff      	movs	r2, #255	; 0xff
    8d10:	0209      	lsls	r1, r1, #8
    8d12:	ba12      	rev	r2, r2
    8d14:	0c03      	lsrs	r3, r0, #16
    8d16:	428b      	cmp	r3, r1
    8d18:	d302      	bcc.n	8d20 <__divsi3+0x38>
    8d1a:	1212      	asrs	r2, r2, #8
    8d1c:	0209      	lsls	r1, r1, #8
    8d1e:	d065      	beq.n	8dec <__divsi3+0x104>
    8d20:	0b03      	lsrs	r3, r0, #12
    8d22:	428b      	cmp	r3, r1
    8d24:	d319      	bcc.n	8d5a <__divsi3+0x72>
    8d26:	e000      	b.n	8d2a <__divsi3+0x42>
    8d28:	0a09      	lsrs	r1, r1, #8
    8d2a:	0bc3      	lsrs	r3, r0, #15
    8d2c:	428b      	cmp	r3, r1
    8d2e:	d301      	bcc.n	8d34 <__divsi3+0x4c>
    8d30:	03cb      	lsls	r3, r1, #15
    8d32:	1ac0      	subs	r0, r0, r3
    8d34:	4152      	adcs	r2, r2
    8d36:	0b83      	lsrs	r3, r0, #14
    8d38:	428b      	cmp	r3, r1
    8d3a:	d301      	bcc.n	8d40 <__divsi3+0x58>
    8d3c:	038b      	lsls	r3, r1, #14
    8d3e:	1ac0      	subs	r0, r0, r3
    8d40:	4152      	adcs	r2, r2
    8d42:	0b43      	lsrs	r3, r0, #13
    8d44:	428b      	cmp	r3, r1
    8d46:	d301      	bcc.n	8d4c <__divsi3+0x64>
    8d48:	034b      	lsls	r3, r1, #13
    8d4a:	1ac0      	subs	r0, r0, r3
    8d4c:	4152      	adcs	r2, r2
    8d4e:	0b03      	lsrs	r3, r0, #12
    8d50:	428b      	cmp	r3, r1
    8d52:	d301      	bcc.n	8d58 <__divsi3+0x70>
    8d54:	030b      	lsls	r3, r1, #12
    8d56:	1ac0      	subs	r0, r0, r3
    8d58:	4152      	adcs	r2, r2
    8d5a:	0ac3      	lsrs	r3, r0, #11
    8d5c:	428b      	cmp	r3, r1
    8d5e:	d301      	bcc.n	8d64 <__divsi3+0x7c>
    8d60:	02cb      	lsls	r3, r1, #11
    8d62:	1ac0      	subs	r0, r0, r3
    8d64:	4152      	adcs	r2, r2
    8d66:	0a83      	lsrs	r3, r0, #10
    8d68:	428b      	cmp	r3, r1
    8d6a:	d301      	bcc.n	8d70 <__divsi3+0x88>
    8d6c:	028b      	lsls	r3, r1, #10
    8d6e:	1ac0      	subs	r0, r0, r3
    8d70:	4152      	adcs	r2, r2
    8d72:	0a43      	lsrs	r3, r0, #9
    8d74:	428b      	cmp	r3, r1
    8d76:	d301      	bcc.n	8d7c <__divsi3+0x94>
    8d78:	024b      	lsls	r3, r1, #9
    8d7a:	1ac0      	subs	r0, r0, r3
    8d7c:	4152      	adcs	r2, r2
    8d7e:	0a03      	lsrs	r3, r0, #8
    8d80:	428b      	cmp	r3, r1
    8d82:	d301      	bcc.n	8d88 <__divsi3+0xa0>
    8d84:	020b      	lsls	r3, r1, #8
    8d86:	1ac0      	subs	r0, r0, r3
    8d88:	4152      	adcs	r2, r2
    8d8a:	d2cd      	bcs.n	8d28 <__divsi3+0x40>
    8d8c:	09c3      	lsrs	r3, r0, #7
    8d8e:	428b      	cmp	r3, r1
    8d90:	d301      	bcc.n	8d96 <__divsi3+0xae>
    8d92:	01cb      	lsls	r3, r1, #7
    8d94:	1ac0      	subs	r0, r0, r3
    8d96:	4152      	adcs	r2, r2
    8d98:	0983      	lsrs	r3, r0, #6
    8d9a:	428b      	cmp	r3, r1
    8d9c:	d301      	bcc.n	8da2 <__divsi3+0xba>
    8d9e:	018b      	lsls	r3, r1, #6
    8da0:	1ac0      	subs	r0, r0, r3
    8da2:	4152      	adcs	r2, r2
    8da4:	0943      	lsrs	r3, r0, #5
    8da6:	428b      	cmp	r3, r1
    8da8:	d301      	bcc.n	8dae <__divsi3+0xc6>
    8daa:	014b      	lsls	r3, r1, #5
    8dac:	1ac0      	subs	r0, r0, r3
    8dae:	4152      	adcs	r2, r2
    8db0:	0903      	lsrs	r3, r0, #4
    8db2:	428b      	cmp	r3, r1
    8db4:	d301      	bcc.n	8dba <__divsi3+0xd2>
    8db6:	010b      	lsls	r3, r1, #4
    8db8:	1ac0      	subs	r0, r0, r3
    8dba:	4152      	adcs	r2, r2
    8dbc:	08c3      	lsrs	r3, r0, #3
    8dbe:	428b      	cmp	r3, r1
    8dc0:	d301      	bcc.n	8dc6 <__divsi3+0xde>
    8dc2:	00cb      	lsls	r3, r1, #3
    8dc4:	1ac0      	subs	r0, r0, r3
    8dc6:	4152      	adcs	r2, r2
    8dc8:	0883      	lsrs	r3, r0, #2
    8dca:	428b      	cmp	r3, r1
    8dcc:	d301      	bcc.n	8dd2 <__divsi3+0xea>
    8dce:	008b      	lsls	r3, r1, #2
    8dd0:	1ac0      	subs	r0, r0, r3
    8dd2:	4152      	adcs	r2, r2
    8dd4:	0843      	lsrs	r3, r0, #1
    8dd6:	428b      	cmp	r3, r1
    8dd8:	d301      	bcc.n	8dde <__divsi3+0xf6>
    8dda:	004b      	lsls	r3, r1, #1
    8ddc:	1ac0      	subs	r0, r0, r3
    8dde:	4152      	adcs	r2, r2
    8de0:	1a41      	subs	r1, r0, r1
    8de2:	d200      	bcs.n	8de6 <__divsi3+0xfe>
    8de4:	4601      	mov	r1, r0
    8de6:	4152      	adcs	r2, r2
    8de8:	4610      	mov	r0, r2
    8dea:	4770      	bx	lr
    8dec:	e05d      	b.n	8eaa <__divsi3+0x1c2>
    8dee:	0fca      	lsrs	r2, r1, #31
    8df0:	d000      	beq.n	8df4 <__divsi3+0x10c>
    8df2:	4249      	negs	r1, r1
    8df4:	1003      	asrs	r3, r0, #32
    8df6:	d300      	bcc.n	8dfa <__divsi3+0x112>
    8df8:	4240      	negs	r0, r0
    8dfa:	4053      	eors	r3, r2
    8dfc:	2200      	movs	r2, #0
    8dfe:	469c      	mov	ip, r3
    8e00:	0903      	lsrs	r3, r0, #4
    8e02:	428b      	cmp	r3, r1
    8e04:	d32d      	bcc.n	8e62 <__divsi3+0x17a>
    8e06:	0a03      	lsrs	r3, r0, #8
    8e08:	428b      	cmp	r3, r1
    8e0a:	d312      	bcc.n	8e32 <__divsi3+0x14a>
    8e0c:	22fc      	movs	r2, #252	; 0xfc
    8e0e:	0189      	lsls	r1, r1, #6
    8e10:	ba12      	rev	r2, r2
    8e12:	0a03      	lsrs	r3, r0, #8
    8e14:	428b      	cmp	r3, r1
    8e16:	d30c      	bcc.n	8e32 <__divsi3+0x14a>
    8e18:	0189      	lsls	r1, r1, #6
    8e1a:	1192      	asrs	r2, r2, #6
    8e1c:	428b      	cmp	r3, r1
    8e1e:	d308      	bcc.n	8e32 <__divsi3+0x14a>
    8e20:	0189      	lsls	r1, r1, #6
    8e22:	1192      	asrs	r2, r2, #6
    8e24:	428b      	cmp	r3, r1
    8e26:	d304      	bcc.n	8e32 <__divsi3+0x14a>
    8e28:	0189      	lsls	r1, r1, #6
    8e2a:	d03a      	beq.n	8ea2 <__divsi3+0x1ba>
    8e2c:	1192      	asrs	r2, r2, #6
    8e2e:	e000      	b.n	8e32 <__divsi3+0x14a>
    8e30:	0989      	lsrs	r1, r1, #6
    8e32:	09c3      	lsrs	r3, r0, #7
    8e34:	428b      	cmp	r3, r1
    8e36:	d301      	bcc.n	8e3c <__divsi3+0x154>
    8e38:	01cb      	lsls	r3, r1, #7
    8e3a:	1ac0      	subs	r0, r0, r3
    8e3c:	4152      	adcs	r2, r2
    8e3e:	0983      	lsrs	r3, r0, #6
    8e40:	428b      	cmp	r3, r1
    8e42:	d301      	bcc.n	8e48 <__divsi3+0x160>
    8e44:	018b      	lsls	r3, r1, #6
    8e46:	1ac0      	subs	r0, r0, r3
    8e48:	4152      	adcs	r2, r2
    8e4a:	0943      	lsrs	r3, r0, #5
    8e4c:	428b      	cmp	r3, r1
    8e4e:	d301      	bcc.n	8e54 <__divsi3+0x16c>
    8e50:	014b      	lsls	r3, r1, #5
    8e52:	1ac0      	subs	r0, r0, r3
    8e54:	4152      	adcs	r2, r2
    8e56:	0903      	lsrs	r3, r0, #4
    8e58:	428b      	cmp	r3, r1
    8e5a:	d301      	bcc.n	8e60 <__divsi3+0x178>
    8e5c:	010b      	lsls	r3, r1, #4
    8e5e:	1ac0      	subs	r0, r0, r3
    8e60:	4152      	adcs	r2, r2
    8e62:	08c3      	lsrs	r3, r0, #3
    8e64:	428b      	cmp	r3, r1
    8e66:	d301      	bcc.n	8e6c <__divsi3+0x184>
    8e68:	00cb      	lsls	r3, r1, #3
    8e6a:	1ac0      	subs	r0, r0, r3
    8e6c:	4152      	adcs	r2, r2
    8e6e:	0883      	lsrs	r3, r0, #2
    8e70:	428b      	cmp	r3, r1
    8e72:	d301      	bcc.n	8e78 <__divsi3+0x190>
    8e74:	008b      	lsls	r3, r1, #2
    8e76:	1ac0      	subs	r0, r0, r3
    8e78:	4152      	adcs	r2, r2
    8e7a:	d2d9      	bcs.n	8e30 <__divsi3+0x148>
    8e7c:	0843      	lsrs	r3, r0, #1
    8e7e:	428b      	cmp	r3, r1
    8e80:	d301      	bcc.n	8e86 <__divsi3+0x19e>
    8e82:	004b      	lsls	r3, r1, #1
    8e84:	1ac0      	subs	r0, r0, r3
    8e86:	4152      	adcs	r2, r2
    8e88:	1a41      	subs	r1, r0, r1
    8e8a:	d200      	bcs.n	8e8e <__divsi3+0x1a6>
    8e8c:	4601      	mov	r1, r0
    8e8e:	4663      	mov	r3, ip
    8e90:	4152      	adcs	r2, r2
    8e92:	105b      	asrs	r3, r3, #1
    8e94:	4610      	mov	r0, r2
    8e96:	d301      	bcc.n	8e9c <__divsi3+0x1b4>
    8e98:	4240      	negs	r0, r0
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d500      	bpl.n	8ea0 <__divsi3+0x1b8>
    8e9e:	4249      	negs	r1, r1
    8ea0:	4770      	bx	lr
    8ea2:	4663      	mov	r3, ip
    8ea4:	105b      	asrs	r3, r3, #1
    8ea6:	d300      	bcc.n	8eaa <__divsi3+0x1c2>
    8ea8:	4240      	negs	r0, r0
    8eaa:	b501      	push	{r0, lr}
    8eac:	2000      	movs	r0, #0
    8eae:	f000 f805 	bl	8ebc <__aeabi_idiv0>
    8eb2:	bd02      	pop	{r1, pc}

00008eb4 <__aeabi_idivmod>:
    8eb4:	2900      	cmp	r1, #0
    8eb6:	d0f8      	beq.n	8eaa <__divsi3+0x1c2>
    8eb8:	e716      	b.n	8ce8 <__divsi3>
    8eba:	4770      	bx	lr

00008ebc <__aeabi_idiv0>:
    8ebc:	4770      	bx	lr
    8ebe:	46c0      	nop			; (mov r8, r8)

00008ec0 <__aeabi_cdrcmple>:
    8ec0:	4684      	mov	ip, r0
    8ec2:	1c10      	adds	r0, r2, #0
    8ec4:	4662      	mov	r2, ip
    8ec6:	468c      	mov	ip, r1
    8ec8:	1c19      	adds	r1, r3, #0
    8eca:	4663      	mov	r3, ip
    8ecc:	e000      	b.n	8ed0 <__aeabi_cdcmpeq>
    8ece:	46c0      	nop			; (mov r8, r8)

00008ed0 <__aeabi_cdcmpeq>:
    8ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8ed2:	f000 fc67 	bl	97a4 <__ledf2>
    8ed6:	2800      	cmp	r0, #0
    8ed8:	d401      	bmi.n	8ede <__aeabi_cdcmpeq+0xe>
    8eda:	2100      	movs	r1, #0
    8edc:	42c8      	cmn	r0, r1
    8ede:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008ee0 <__aeabi_dcmpeq>:
    8ee0:	b510      	push	{r4, lr}
    8ee2:	f000 fbc1 	bl	9668 <__eqdf2>
    8ee6:	4240      	negs	r0, r0
    8ee8:	3001      	adds	r0, #1
    8eea:	bd10      	pop	{r4, pc}

00008eec <__aeabi_dcmplt>:
    8eec:	b510      	push	{r4, lr}
    8eee:	f000 fc59 	bl	97a4 <__ledf2>
    8ef2:	2800      	cmp	r0, #0
    8ef4:	db01      	blt.n	8efa <__aeabi_dcmplt+0xe>
    8ef6:	2000      	movs	r0, #0
    8ef8:	bd10      	pop	{r4, pc}
    8efa:	2001      	movs	r0, #1
    8efc:	bd10      	pop	{r4, pc}
    8efe:	46c0      	nop			; (mov r8, r8)

00008f00 <__aeabi_dcmple>:
    8f00:	b510      	push	{r4, lr}
    8f02:	f000 fc4f 	bl	97a4 <__ledf2>
    8f06:	2800      	cmp	r0, #0
    8f08:	dd01      	ble.n	8f0e <__aeabi_dcmple+0xe>
    8f0a:	2000      	movs	r0, #0
    8f0c:	bd10      	pop	{r4, pc}
    8f0e:	2001      	movs	r0, #1
    8f10:	bd10      	pop	{r4, pc}
    8f12:	46c0      	nop			; (mov r8, r8)

00008f14 <__aeabi_dcmpgt>:
    8f14:	b510      	push	{r4, lr}
    8f16:	f000 fbe1 	bl	96dc <__gedf2>
    8f1a:	2800      	cmp	r0, #0
    8f1c:	dc01      	bgt.n	8f22 <__aeabi_dcmpgt+0xe>
    8f1e:	2000      	movs	r0, #0
    8f20:	bd10      	pop	{r4, pc}
    8f22:	2001      	movs	r0, #1
    8f24:	bd10      	pop	{r4, pc}
    8f26:	46c0      	nop			; (mov r8, r8)

00008f28 <__aeabi_dcmpge>:
    8f28:	b510      	push	{r4, lr}
    8f2a:	f000 fbd7 	bl	96dc <__gedf2>
    8f2e:	2800      	cmp	r0, #0
    8f30:	da01      	bge.n	8f36 <__aeabi_dcmpge+0xe>
    8f32:	2000      	movs	r0, #0
    8f34:	bd10      	pop	{r4, pc}
    8f36:	2001      	movs	r0, #1
    8f38:	bd10      	pop	{r4, pc}
    8f3a:	46c0      	nop			; (mov r8, r8)

00008f3c <__clzsi2>:
    8f3c:	211c      	movs	r1, #28
    8f3e:	2301      	movs	r3, #1
    8f40:	041b      	lsls	r3, r3, #16
    8f42:	4298      	cmp	r0, r3
    8f44:	d301      	bcc.n	8f4a <__clzsi2+0xe>
    8f46:	0c00      	lsrs	r0, r0, #16
    8f48:	3910      	subs	r1, #16
    8f4a:	0a1b      	lsrs	r3, r3, #8
    8f4c:	4298      	cmp	r0, r3
    8f4e:	d301      	bcc.n	8f54 <__clzsi2+0x18>
    8f50:	0a00      	lsrs	r0, r0, #8
    8f52:	3908      	subs	r1, #8
    8f54:	091b      	lsrs	r3, r3, #4
    8f56:	4298      	cmp	r0, r3
    8f58:	d301      	bcc.n	8f5e <__clzsi2+0x22>
    8f5a:	0900      	lsrs	r0, r0, #4
    8f5c:	3904      	subs	r1, #4
    8f5e:	a202      	add	r2, pc, #8	; (adr r2, 8f68 <__clzsi2+0x2c>)
    8f60:	5c10      	ldrb	r0, [r2, r0]
    8f62:	1840      	adds	r0, r0, r1
    8f64:	4770      	bx	lr
    8f66:	46c0      	nop			; (mov r8, r8)
    8f68:	02020304 	.word	0x02020304
    8f6c:	01010101 	.word	0x01010101
	...

00008f78 <__ctzsi2>:
    8f78:	4241      	negs	r1, r0
    8f7a:	4008      	ands	r0, r1
    8f7c:	211c      	movs	r1, #28
    8f7e:	2301      	movs	r3, #1
    8f80:	041b      	lsls	r3, r3, #16
    8f82:	4298      	cmp	r0, r3
    8f84:	d301      	bcc.n	8f8a <__ctzsi2+0x12>
    8f86:	0c00      	lsrs	r0, r0, #16
    8f88:	3910      	subs	r1, #16
    8f8a:	0a1b      	lsrs	r3, r3, #8
    8f8c:	4298      	cmp	r0, r3
    8f8e:	d301      	bcc.n	8f94 <__ctzsi2+0x1c>
    8f90:	0a00      	lsrs	r0, r0, #8
    8f92:	3908      	subs	r1, #8
    8f94:	091b      	lsrs	r3, r3, #4
    8f96:	4298      	cmp	r0, r3
    8f98:	d301      	bcc.n	8f9e <__ctzsi2+0x26>
    8f9a:	0900      	lsrs	r0, r0, #4
    8f9c:	3904      	subs	r1, #4
    8f9e:	a202      	add	r2, pc, #8	; (adr r2, 8fa8 <__ctzsi2+0x30>)
    8fa0:	5c10      	ldrb	r0, [r2, r0]
    8fa2:	1a40      	subs	r0, r0, r1
    8fa4:	4770      	bx	lr
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	1d1d1c1b 	.word	0x1d1d1c1b
    8fac:	1e1e1e1e 	.word	0x1e1e1e1e
    8fb0:	1f1f1f1f 	.word	0x1f1f1f1f
    8fb4:	1f1f1f1f 	.word	0x1f1f1f1f

00008fb8 <__aeabi_lmul>:
    8fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fba:	46ce      	mov	lr, r9
    8fbc:	4647      	mov	r7, r8
    8fbe:	0415      	lsls	r5, r2, #16
    8fc0:	0c2d      	lsrs	r5, r5, #16
    8fc2:	002e      	movs	r6, r5
    8fc4:	b580      	push	{r7, lr}
    8fc6:	0407      	lsls	r7, r0, #16
    8fc8:	0c14      	lsrs	r4, r2, #16
    8fca:	0c3f      	lsrs	r7, r7, #16
    8fcc:	4699      	mov	r9, r3
    8fce:	0c03      	lsrs	r3, r0, #16
    8fd0:	437e      	muls	r6, r7
    8fd2:	435d      	muls	r5, r3
    8fd4:	4367      	muls	r7, r4
    8fd6:	4363      	muls	r3, r4
    8fd8:	197f      	adds	r7, r7, r5
    8fda:	0c34      	lsrs	r4, r6, #16
    8fdc:	19e4      	adds	r4, r4, r7
    8fde:	469c      	mov	ip, r3
    8fe0:	42a5      	cmp	r5, r4
    8fe2:	d903      	bls.n	8fec <__aeabi_lmul+0x34>
    8fe4:	2380      	movs	r3, #128	; 0x80
    8fe6:	025b      	lsls	r3, r3, #9
    8fe8:	4698      	mov	r8, r3
    8fea:	44c4      	add	ip, r8
    8fec:	464b      	mov	r3, r9
    8fee:	4351      	muls	r1, r2
    8ff0:	4343      	muls	r3, r0
    8ff2:	0436      	lsls	r6, r6, #16
    8ff4:	0c36      	lsrs	r6, r6, #16
    8ff6:	0c25      	lsrs	r5, r4, #16
    8ff8:	0424      	lsls	r4, r4, #16
    8ffa:	4465      	add	r5, ip
    8ffc:	19a4      	adds	r4, r4, r6
    8ffe:	1859      	adds	r1, r3, r1
    9000:	1949      	adds	r1, r1, r5
    9002:	0020      	movs	r0, r4
    9004:	bc0c      	pop	{r2, r3}
    9006:	4690      	mov	r8, r2
    9008:	4699      	mov	r9, r3
    900a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000900c <__aeabi_d2uiz>:
    900c:	b570      	push	{r4, r5, r6, lr}
    900e:	2200      	movs	r2, #0
    9010:	4b0c      	ldr	r3, [pc, #48]	; (9044 <__aeabi_d2uiz+0x38>)
    9012:	0004      	movs	r4, r0
    9014:	000d      	movs	r5, r1
    9016:	f7ff ff87 	bl	8f28 <__aeabi_dcmpge>
    901a:	2800      	cmp	r0, #0
    901c:	d104      	bne.n	9028 <__aeabi_d2uiz+0x1c>
    901e:	0020      	movs	r0, r4
    9020:	0029      	movs	r1, r5
    9022:	f001 f9b7 	bl	a394 <__aeabi_d2iz>
    9026:	bd70      	pop	{r4, r5, r6, pc}
    9028:	4b06      	ldr	r3, [pc, #24]	; (9044 <__aeabi_d2uiz+0x38>)
    902a:	2200      	movs	r2, #0
    902c:	0020      	movs	r0, r4
    902e:	0029      	movs	r1, r5
    9030:	f000 fe9a 	bl	9d68 <__aeabi_dsub>
    9034:	f001 f9ae 	bl	a394 <__aeabi_d2iz>
    9038:	2380      	movs	r3, #128	; 0x80
    903a:	061b      	lsls	r3, r3, #24
    903c:	469c      	mov	ip, r3
    903e:	4460      	add	r0, ip
    9040:	e7f1      	b.n	9026 <__aeabi_d2uiz+0x1a>
    9042:	46c0      	nop			; (mov r8, r8)
    9044:	41e00000 	.word	0x41e00000

00009048 <__aeabi_dadd>:
    9048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    904a:	4645      	mov	r5, r8
    904c:	46de      	mov	lr, fp
    904e:	4657      	mov	r7, sl
    9050:	464e      	mov	r6, r9
    9052:	030c      	lsls	r4, r1, #12
    9054:	b5e0      	push	{r5, r6, r7, lr}
    9056:	004e      	lsls	r6, r1, #1
    9058:	0fc9      	lsrs	r1, r1, #31
    905a:	4688      	mov	r8, r1
    905c:	000d      	movs	r5, r1
    905e:	0a61      	lsrs	r1, r4, #9
    9060:	0f44      	lsrs	r4, r0, #29
    9062:	430c      	orrs	r4, r1
    9064:	00c7      	lsls	r7, r0, #3
    9066:	0319      	lsls	r1, r3, #12
    9068:	0058      	lsls	r0, r3, #1
    906a:	0fdb      	lsrs	r3, r3, #31
    906c:	469b      	mov	fp, r3
    906e:	0a4b      	lsrs	r3, r1, #9
    9070:	0f51      	lsrs	r1, r2, #29
    9072:	430b      	orrs	r3, r1
    9074:	0d76      	lsrs	r6, r6, #21
    9076:	0d40      	lsrs	r0, r0, #21
    9078:	0019      	movs	r1, r3
    907a:	00d2      	lsls	r2, r2, #3
    907c:	45d8      	cmp	r8, fp
    907e:	d100      	bne.n	9082 <__aeabi_dadd+0x3a>
    9080:	e0ae      	b.n	91e0 <__aeabi_dadd+0x198>
    9082:	1a35      	subs	r5, r6, r0
    9084:	2d00      	cmp	r5, #0
    9086:	dc00      	bgt.n	908a <__aeabi_dadd+0x42>
    9088:	e0f6      	b.n	9278 <__aeabi_dadd+0x230>
    908a:	2800      	cmp	r0, #0
    908c:	d10f      	bne.n	90ae <__aeabi_dadd+0x66>
    908e:	4313      	orrs	r3, r2
    9090:	d100      	bne.n	9094 <__aeabi_dadd+0x4c>
    9092:	e0db      	b.n	924c <__aeabi_dadd+0x204>
    9094:	1e6b      	subs	r3, r5, #1
    9096:	2b00      	cmp	r3, #0
    9098:	d000      	beq.n	909c <__aeabi_dadd+0x54>
    909a:	e137      	b.n	930c <__aeabi_dadd+0x2c4>
    909c:	1aba      	subs	r2, r7, r2
    909e:	4297      	cmp	r7, r2
    90a0:	41bf      	sbcs	r7, r7
    90a2:	1a64      	subs	r4, r4, r1
    90a4:	427f      	negs	r7, r7
    90a6:	1be4      	subs	r4, r4, r7
    90a8:	2601      	movs	r6, #1
    90aa:	0017      	movs	r7, r2
    90ac:	e024      	b.n	90f8 <__aeabi_dadd+0xb0>
    90ae:	4bc6      	ldr	r3, [pc, #792]	; (93c8 <__aeabi_dadd+0x380>)
    90b0:	429e      	cmp	r6, r3
    90b2:	d04d      	beq.n	9150 <__aeabi_dadd+0x108>
    90b4:	2380      	movs	r3, #128	; 0x80
    90b6:	041b      	lsls	r3, r3, #16
    90b8:	4319      	orrs	r1, r3
    90ba:	2d38      	cmp	r5, #56	; 0x38
    90bc:	dd00      	ble.n	90c0 <__aeabi_dadd+0x78>
    90be:	e107      	b.n	92d0 <__aeabi_dadd+0x288>
    90c0:	2d1f      	cmp	r5, #31
    90c2:	dd00      	ble.n	90c6 <__aeabi_dadd+0x7e>
    90c4:	e138      	b.n	9338 <__aeabi_dadd+0x2f0>
    90c6:	2020      	movs	r0, #32
    90c8:	1b43      	subs	r3, r0, r5
    90ca:	469a      	mov	sl, r3
    90cc:	000b      	movs	r3, r1
    90ce:	4650      	mov	r0, sl
    90d0:	4083      	lsls	r3, r0
    90d2:	4699      	mov	r9, r3
    90d4:	0013      	movs	r3, r2
    90d6:	4648      	mov	r0, r9
    90d8:	40eb      	lsrs	r3, r5
    90da:	4318      	orrs	r0, r3
    90dc:	0003      	movs	r3, r0
    90de:	4650      	mov	r0, sl
    90e0:	4082      	lsls	r2, r0
    90e2:	1e50      	subs	r0, r2, #1
    90e4:	4182      	sbcs	r2, r0
    90e6:	40e9      	lsrs	r1, r5
    90e8:	431a      	orrs	r2, r3
    90ea:	1aba      	subs	r2, r7, r2
    90ec:	1a61      	subs	r1, r4, r1
    90ee:	4297      	cmp	r7, r2
    90f0:	41a4      	sbcs	r4, r4
    90f2:	0017      	movs	r7, r2
    90f4:	4264      	negs	r4, r4
    90f6:	1b0c      	subs	r4, r1, r4
    90f8:	0223      	lsls	r3, r4, #8
    90fa:	d562      	bpl.n	91c2 <__aeabi_dadd+0x17a>
    90fc:	0264      	lsls	r4, r4, #9
    90fe:	0a65      	lsrs	r5, r4, #9
    9100:	2d00      	cmp	r5, #0
    9102:	d100      	bne.n	9106 <__aeabi_dadd+0xbe>
    9104:	e0df      	b.n	92c6 <__aeabi_dadd+0x27e>
    9106:	0028      	movs	r0, r5
    9108:	f7ff ff18 	bl	8f3c <__clzsi2>
    910c:	0003      	movs	r3, r0
    910e:	3b08      	subs	r3, #8
    9110:	2b1f      	cmp	r3, #31
    9112:	dd00      	ble.n	9116 <__aeabi_dadd+0xce>
    9114:	e0d2      	b.n	92bc <__aeabi_dadd+0x274>
    9116:	2220      	movs	r2, #32
    9118:	003c      	movs	r4, r7
    911a:	1ad2      	subs	r2, r2, r3
    911c:	409d      	lsls	r5, r3
    911e:	40d4      	lsrs	r4, r2
    9120:	409f      	lsls	r7, r3
    9122:	4325      	orrs	r5, r4
    9124:	429e      	cmp	r6, r3
    9126:	dd00      	ble.n	912a <__aeabi_dadd+0xe2>
    9128:	e0c4      	b.n	92b4 <__aeabi_dadd+0x26c>
    912a:	1b9e      	subs	r6, r3, r6
    912c:	1c73      	adds	r3, r6, #1
    912e:	2b1f      	cmp	r3, #31
    9130:	dd00      	ble.n	9134 <__aeabi_dadd+0xec>
    9132:	e0f1      	b.n	9318 <__aeabi_dadd+0x2d0>
    9134:	2220      	movs	r2, #32
    9136:	0038      	movs	r0, r7
    9138:	0029      	movs	r1, r5
    913a:	1ad2      	subs	r2, r2, r3
    913c:	40d8      	lsrs	r0, r3
    913e:	4091      	lsls	r1, r2
    9140:	4097      	lsls	r7, r2
    9142:	002c      	movs	r4, r5
    9144:	4301      	orrs	r1, r0
    9146:	1e78      	subs	r0, r7, #1
    9148:	4187      	sbcs	r7, r0
    914a:	40dc      	lsrs	r4, r3
    914c:	2600      	movs	r6, #0
    914e:	430f      	orrs	r7, r1
    9150:	077b      	lsls	r3, r7, #29
    9152:	d009      	beq.n	9168 <__aeabi_dadd+0x120>
    9154:	230f      	movs	r3, #15
    9156:	403b      	ands	r3, r7
    9158:	2b04      	cmp	r3, #4
    915a:	d005      	beq.n	9168 <__aeabi_dadd+0x120>
    915c:	1d3b      	adds	r3, r7, #4
    915e:	42bb      	cmp	r3, r7
    9160:	41bf      	sbcs	r7, r7
    9162:	427f      	negs	r7, r7
    9164:	19e4      	adds	r4, r4, r7
    9166:	001f      	movs	r7, r3
    9168:	0223      	lsls	r3, r4, #8
    916a:	d52c      	bpl.n	91c6 <__aeabi_dadd+0x17e>
    916c:	4b96      	ldr	r3, [pc, #600]	; (93c8 <__aeabi_dadd+0x380>)
    916e:	3601      	adds	r6, #1
    9170:	429e      	cmp	r6, r3
    9172:	d100      	bne.n	9176 <__aeabi_dadd+0x12e>
    9174:	e09a      	b.n	92ac <__aeabi_dadd+0x264>
    9176:	4645      	mov	r5, r8
    9178:	4b94      	ldr	r3, [pc, #592]	; (93cc <__aeabi_dadd+0x384>)
    917a:	08ff      	lsrs	r7, r7, #3
    917c:	401c      	ands	r4, r3
    917e:	0760      	lsls	r0, r4, #29
    9180:	0576      	lsls	r6, r6, #21
    9182:	0264      	lsls	r4, r4, #9
    9184:	4307      	orrs	r7, r0
    9186:	0b24      	lsrs	r4, r4, #12
    9188:	0d76      	lsrs	r6, r6, #21
    918a:	2100      	movs	r1, #0
    918c:	0324      	lsls	r4, r4, #12
    918e:	0b23      	lsrs	r3, r4, #12
    9190:	0d0c      	lsrs	r4, r1, #20
    9192:	4a8f      	ldr	r2, [pc, #572]	; (93d0 <__aeabi_dadd+0x388>)
    9194:	0524      	lsls	r4, r4, #20
    9196:	431c      	orrs	r4, r3
    9198:	4014      	ands	r4, r2
    919a:	0533      	lsls	r3, r6, #20
    919c:	4323      	orrs	r3, r4
    919e:	005b      	lsls	r3, r3, #1
    91a0:	07ed      	lsls	r5, r5, #31
    91a2:	085b      	lsrs	r3, r3, #1
    91a4:	432b      	orrs	r3, r5
    91a6:	0038      	movs	r0, r7
    91a8:	0019      	movs	r1, r3
    91aa:	bc3c      	pop	{r2, r3, r4, r5}
    91ac:	4690      	mov	r8, r2
    91ae:	4699      	mov	r9, r3
    91b0:	46a2      	mov	sl, r4
    91b2:	46ab      	mov	fp, r5
    91b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    91b6:	4664      	mov	r4, ip
    91b8:	4304      	orrs	r4, r0
    91ba:	d100      	bne.n	91be <__aeabi_dadd+0x176>
    91bc:	e211      	b.n	95e2 <__aeabi_dadd+0x59a>
    91be:	0004      	movs	r4, r0
    91c0:	4667      	mov	r7, ip
    91c2:	077b      	lsls	r3, r7, #29
    91c4:	d1c6      	bne.n	9154 <__aeabi_dadd+0x10c>
    91c6:	4645      	mov	r5, r8
    91c8:	0760      	lsls	r0, r4, #29
    91ca:	08ff      	lsrs	r7, r7, #3
    91cc:	4307      	orrs	r7, r0
    91ce:	08e4      	lsrs	r4, r4, #3
    91d0:	4b7d      	ldr	r3, [pc, #500]	; (93c8 <__aeabi_dadd+0x380>)
    91d2:	429e      	cmp	r6, r3
    91d4:	d030      	beq.n	9238 <__aeabi_dadd+0x1f0>
    91d6:	0324      	lsls	r4, r4, #12
    91d8:	0576      	lsls	r6, r6, #21
    91da:	0b24      	lsrs	r4, r4, #12
    91dc:	0d76      	lsrs	r6, r6, #21
    91de:	e7d4      	b.n	918a <__aeabi_dadd+0x142>
    91e0:	1a33      	subs	r3, r6, r0
    91e2:	469a      	mov	sl, r3
    91e4:	2b00      	cmp	r3, #0
    91e6:	dd78      	ble.n	92da <__aeabi_dadd+0x292>
    91e8:	2800      	cmp	r0, #0
    91ea:	d031      	beq.n	9250 <__aeabi_dadd+0x208>
    91ec:	4876      	ldr	r0, [pc, #472]	; (93c8 <__aeabi_dadd+0x380>)
    91ee:	4286      	cmp	r6, r0
    91f0:	d0ae      	beq.n	9150 <__aeabi_dadd+0x108>
    91f2:	2080      	movs	r0, #128	; 0x80
    91f4:	0400      	lsls	r0, r0, #16
    91f6:	4301      	orrs	r1, r0
    91f8:	4653      	mov	r3, sl
    91fa:	2b38      	cmp	r3, #56	; 0x38
    91fc:	dc00      	bgt.n	9200 <__aeabi_dadd+0x1b8>
    91fe:	e0e9      	b.n	93d4 <__aeabi_dadd+0x38c>
    9200:	430a      	orrs	r2, r1
    9202:	1e51      	subs	r1, r2, #1
    9204:	418a      	sbcs	r2, r1
    9206:	2100      	movs	r1, #0
    9208:	19d2      	adds	r2, r2, r7
    920a:	42ba      	cmp	r2, r7
    920c:	41bf      	sbcs	r7, r7
    920e:	1909      	adds	r1, r1, r4
    9210:	427c      	negs	r4, r7
    9212:	0017      	movs	r7, r2
    9214:	190c      	adds	r4, r1, r4
    9216:	0223      	lsls	r3, r4, #8
    9218:	d5d3      	bpl.n	91c2 <__aeabi_dadd+0x17a>
    921a:	4b6b      	ldr	r3, [pc, #428]	; (93c8 <__aeabi_dadd+0x380>)
    921c:	3601      	adds	r6, #1
    921e:	429e      	cmp	r6, r3
    9220:	d100      	bne.n	9224 <__aeabi_dadd+0x1dc>
    9222:	e13a      	b.n	949a <__aeabi_dadd+0x452>
    9224:	2001      	movs	r0, #1
    9226:	4b69      	ldr	r3, [pc, #420]	; (93cc <__aeabi_dadd+0x384>)
    9228:	401c      	ands	r4, r3
    922a:	087b      	lsrs	r3, r7, #1
    922c:	4007      	ands	r7, r0
    922e:	431f      	orrs	r7, r3
    9230:	07e0      	lsls	r0, r4, #31
    9232:	4307      	orrs	r7, r0
    9234:	0864      	lsrs	r4, r4, #1
    9236:	e78b      	b.n	9150 <__aeabi_dadd+0x108>
    9238:	0023      	movs	r3, r4
    923a:	433b      	orrs	r3, r7
    923c:	d100      	bne.n	9240 <__aeabi_dadd+0x1f8>
    923e:	e1cb      	b.n	95d8 <__aeabi_dadd+0x590>
    9240:	2280      	movs	r2, #128	; 0x80
    9242:	0312      	lsls	r2, r2, #12
    9244:	4314      	orrs	r4, r2
    9246:	0324      	lsls	r4, r4, #12
    9248:	0b24      	lsrs	r4, r4, #12
    924a:	e79e      	b.n	918a <__aeabi_dadd+0x142>
    924c:	002e      	movs	r6, r5
    924e:	e77f      	b.n	9150 <__aeabi_dadd+0x108>
    9250:	0008      	movs	r0, r1
    9252:	4310      	orrs	r0, r2
    9254:	d100      	bne.n	9258 <__aeabi_dadd+0x210>
    9256:	e0b4      	b.n	93c2 <__aeabi_dadd+0x37a>
    9258:	1e58      	subs	r0, r3, #1
    925a:	2800      	cmp	r0, #0
    925c:	d000      	beq.n	9260 <__aeabi_dadd+0x218>
    925e:	e0de      	b.n	941e <__aeabi_dadd+0x3d6>
    9260:	18ba      	adds	r2, r7, r2
    9262:	42ba      	cmp	r2, r7
    9264:	419b      	sbcs	r3, r3
    9266:	1864      	adds	r4, r4, r1
    9268:	425b      	negs	r3, r3
    926a:	18e4      	adds	r4, r4, r3
    926c:	0017      	movs	r7, r2
    926e:	2601      	movs	r6, #1
    9270:	0223      	lsls	r3, r4, #8
    9272:	d5a6      	bpl.n	91c2 <__aeabi_dadd+0x17a>
    9274:	2602      	movs	r6, #2
    9276:	e7d5      	b.n	9224 <__aeabi_dadd+0x1dc>
    9278:	2d00      	cmp	r5, #0
    927a:	d16e      	bne.n	935a <__aeabi_dadd+0x312>
    927c:	1c70      	adds	r0, r6, #1
    927e:	0540      	lsls	r0, r0, #21
    9280:	0d40      	lsrs	r0, r0, #21
    9282:	2801      	cmp	r0, #1
    9284:	dc00      	bgt.n	9288 <__aeabi_dadd+0x240>
    9286:	e0f9      	b.n	947c <__aeabi_dadd+0x434>
    9288:	1ab8      	subs	r0, r7, r2
    928a:	4684      	mov	ip, r0
    928c:	4287      	cmp	r7, r0
    928e:	4180      	sbcs	r0, r0
    9290:	1ae5      	subs	r5, r4, r3
    9292:	4240      	negs	r0, r0
    9294:	1a2d      	subs	r5, r5, r0
    9296:	0228      	lsls	r0, r5, #8
    9298:	d400      	bmi.n	929c <__aeabi_dadd+0x254>
    929a:	e089      	b.n	93b0 <__aeabi_dadd+0x368>
    929c:	1bd7      	subs	r7, r2, r7
    929e:	42ba      	cmp	r2, r7
    92a0:	4192      	sbcs	r2, r2
    92a2:	1b1c      	subs	r4, r3, r4
    92a4:	4252      	negs	r2, r2
    92a6:	1aa5      	subs	r5, r4, r2
    92a8:	46d8      	mov	r8, fp
    92aa:	e729      	b.n	9100 <__aeabi_dadd+0xb8>
    92ac:	4645      	mov	r5, r8
    92ae:	2400      	movs	r4, #0
    92b0:	2700      	movs	r7, #0
    92b2:	e76a      	b.n	918a <__aeabi_dadd+0x142>
    92b4:	4c45      	ldr	r4, [pc, #276]	; (93cc <__aeabi_dadd+0x384>)
    92b6:	1af6      	subs	r6, r6, r3
    92b8:	402c      	ands	r4, r5
    92ba:	e749      	b.n	9150 <__aeabi_dadd+0x108>
    92bc:	003d      	movs	r5, r7
    92be:	3828      	subs	r0, #40	; 0x28
    92c0:	4085      	lsls	r5, r0
    92c2:	2700      	movs	r7, #0
    92c4:	e72e      	b.n	9124 <__aeabi_dadd+0xdc>
    92c6:	0038      	movs	r0, r7
    92c8:	f7ff fe38 	bl	8f3c <__clzsi2>
    92cc:	3020      	adds	r0, #32
    92ce:	e71d      	b.n	910c <__aeabi_dadd+0xc4>
    92d0:	430a      	orrs	r2, r1
    92d2:	1e51      	subs	r1, r2, #1
    92d4:	418a      	sbcs	r2, r1
    92d6:	2100      	movs	r1, #0
    92d8:	e707      	b.n	90ea <__aeabi_dadd+0xa2>
    92da:	2b00      	cmp	r3, #0
    92dc:	d000      	beq.n	92e0 <__aeabi_dadd+0x298>
    92de:	e0f3      	b.n	94c8 <__aeabi_dadd+0x480>
    92e0:	1c70      	adds	r0, r6, #1
    92e2:	0543      	lsls	r3, r0, #21
    92e4:	0d5b      	lsrs	r3, r3, #21
    92e6:	2b01      	cmp	r3, #1
    92e8:	dc00      	bgt.n	92ec <__aeabi_dadd+0x2a4>
    92ea:	e0ad      	b.n	9448 <__aeabi_dadd+0x400>
    92ec:	4b36      	ldr	r3, [pc, #216]	; (93c8 <__aeabi_dadd+0x380>)
    92ee:	4298      	cmp	r0, r3
    92f0:	d100      	bne.n	92f4 <__aeabi_dadd+0x2ac>
    92f2:	e0d1      	b.n	9498 <__aeabi_dadd+0x450>
    92f4:	18ba      	adds	r2, r7, r2
    92f6:	42ba      	cmp	r2, r7
    92f8:	41bf      	sbcs	r7, r7
    92fa:	1864      	adds	r4, r4, r1
    92fc:	427f      	negs	r7, r7
    92fe:	19e4      	adds	r4, r4, r7
    9300:	07e7      	lsls	r7, r4, #31
    9302:	0852      	lsrs	r2, r2, #1
    9304:	4317      	orrs	r7, r2
    9306:	0864      	lsrs	r4, r4, #1
    9308:	0006      	movs	r6, r0
    930a:	e721      	b.n	9150 <__aeabi_dadd+0x108>
    930c:	482e      	ldr	r0, [pc, #184]	; (93c8 <__aeabi_dadd+0x380>)
    930e:	4285      	cmp	r5, r0
    9310:	d100      	bne.n	9314 <__aeabi_dadd+0x2cc>
    9312:	e093      	b.n	943c <__aeabi_dadd+0x3f4>
    9314:	001d      	movs	r5, r3
    9316:	e6d0      	b.n	90ba <__aeabi_dadd+0x72>
    9318:	0029      	movs	r1, r5
    931a:	3e1f      	subs	r6, #31
    931c:	40f1      	lsrs	r1, r6
    931e:	2b20      	cmp	r3, #32
    9320:	d100      	bne.n	9324 <__aeabi_dadd+0x2dc>
    9322:	e08d      	b.n	9440 <__aeabi_dadd+0x3f8>
    9324:	2240      	movs	r2, #64	; 0x40
    9326:	1ad3      	subs	r3, r2, r3
    9328:	409d      	lsls	r5, r3
    932a:	432f      	orrs	r7, r5
    932c:	1e7d      	subs	r5, r7, #1
    932e:	41af      	sbcs	r7, r5
    9330:	2400      	movs	r4, #0
    9332:	430f      	orrs	r7, r1
    9334:	2600      	movs	r6, #0
    9336:	e744      	b.n	91c2 <__aeabi_dadd+0x17a>
    9338:	002b      	movs	r3, r5
    933a:	0008      	movs	r0, r1
    933c:	3b20      	subs	r3, #32
    933e:	40d8      	lsrs	r0, r3
    9340:	0003      	movs	r3, r0
    9342:	2d20      	cmp	r5, #32
    9344:	d100      	bne.n	9348 <__aeabi_dadd+0x300>
    9346:	e07d      	b.n	9444 <__aeabi_dadd+0x3fc>
    9348:	2040      	movs	r0, #64	; 0x40
    934a:	1b45      	subs	r5, r0, r5
    934c:	40a9      	lsls	r1, r5
    934e:	430a      	orrs	r2, r1
    9350:	1e51      	subs	r1, r2, #1
    9352:	418a      	sbcs	r2, r1
    9354:	2100      	movs	r1, #0
    9356:	431a      	orrs	r2, r3
    9358:	e6c7      	b.n	90ea <__aeabi_dadd+0xa2>
    935a:	2e00      	cmp	r6, #0
    935c:	d050      	beq.n	9400 <__aeabi_dadd+0x3b8>
    935e:	4e1a      	ldr	r6, [pc, #104]	; (93c8 <__aeabi_dadd+0x380>)
    9360:	42b0      	cmp	r0, r6
    9362:	d057      	beq.n	9414 <__aeabi_dadd+0x3cc>
    9364:	2680      	movs	r6, #128	; 0x80
    9366:	426b      	negs	r3, r5
    9368:	4699      	mov	r9, r3
    936a:	0436      	lsls	r6, r6, #16
    936c:	4334      	orrs	r4, r6
    936e:	464b      	mov	r3, r9
    9370:	2b38      	cmp	r3, #56	; 0x38
    9372:	dd00      	ble.n	9376 <__aeabi_dadd+0x32e>
    9374:	e0d6      	b.n	9524 <__aeabi_dadd+0x4dc>
    9376:	2b1f      	cmp	r3, #31
    9378:	dd00      	ble.n	937c <__aeabi_dadd+0x334>
    937a:	e135      	b.n	95e8 <__aeabi_dadd+0x5a0>
    937c:	2620      	movs	r6, #32
    937e:	1af5      	subs	r5, r6, r3
    9380:	0026      	movs	r6, r4
    9382:	40ae      	lsls	r6, r5
    9384:	46b2      	mov	sl, r6
    9386:	003e      	movs	r6, r7
    9388:	40de      	lsrs	r6, r3
    938a:	46ac      	mov	ip, r5
    938c:	0035      	movs	r5, r6
    938e:	4656      	mov	r6, sl
    9390:	432e      	orrs	r6, r5
    9392:	4665      	mov	r5, ip
    9394:	40af      	lsls	r7, r5
    9396:	1e7d      	subs	r5, r7, #1
    9398:	41af      	sbcs	r7, r5
    939a:	40dc      	lsrs	r4, r3
    939c:	4337      	orrs	r7, r6
    939e:	1bd7      	subs	r7, r2, r7
    93a0:	42ba      	cmp	r2, r7
    93a2:	4192      	sbcs	r2, r2
    93a4:	1b0c      	subs	r4, r1, r4
    93a6:	4252      	negs	r2, r2
    93a8:	1aa4      	subs	r4, r4, r2
    93aa:	0006      	movs	r6, r0
    93ac:	46d8      	mov	r8, fp
    93ae:	e6a3      	b.n	90f8 <__aeabi_dadd+0xb0>
    93b0:	4664      	mov	r4, ip
    93b2:	4667      	mov	r7, ip
    93b4:	432c      	orrs	r4, r5
    93b6:	d000      	beq.n	93ba <__aeabi_dadd+0x372>
    93b8:	e6a2      	b.n	9100 <__aeabi_dadd+0xb8>
    93ba:	2500      	movs	r5, #0
    93bc:	2600      	movs	r6, #0
    93be:	2700      	movs	r7, #0
    93c0:	e706      	b.n	91d0 <__aeabi_dadd+0x188>
    93c2:	001e      	movs	r6, r3
    93c4:	e6c4      	b.n	9150 <__aeabi_dadd+0x108>
    93c6:	46c0      	nop			; (mov r8, r8)
    93c8:	000007ff 	.word	0x000007ff
    93cc:	ff7fffff 	.word	0xff7fffff
    93d0:	800fffff 	.word	0x800fffff
    93d4:	2b1f      	cmp	r3, #31
    93d6:	dc63      	bgt.n	94a0 <__aeabi_dadd+0x458>
    93d8:	2020      	movs	r0, #32
    93da:	1ac3      	subs	r3, r0, r3
    93dc:	0008      	movs	r0, r1
    93de:	4098      	lsls	r0, r3
    93e0:	469c      	mov	ip, r3
    93e2:	4683      	mov	fp, r0
    93e4:	4653      	mov	r3, sl
    93e6:	0010      	movs	r0, r2
    93e8:	40d8      	lsrs	r0, r3
    93ea:	0003      	movs	r3, r0
    93ec:	4658      	mov	r0, fp
    93ee:	4318      	orrs	r0, r3
    93f0:	4663      	mov	r3, ip
    93f2:	409a      	lsls	r2, r3
    93f4:	1e53      	subs	r3, r2, #1
    93f6:	419a      	sbcs	r2, r3
    93f8:	4653      	mov	r3, sl
    93fa:	4302      	orrs	r2, r0
    93fc:	40d9      	lsrs	r1, r3
    93fe:	e703      	b.n	9208 <__aeabi_dadd+0x1c0>
    9400:	0026      	movs	r6, r4
    9402:	433e      	orrs	r6, r7
    9404:	d006      	beq.n	9414 <__aeabi_dadd+0x3cc>
    9406:	43eb      	mvns	r3, r5
    9408:	4699      	mov	r9, r3
    940a:	2b00      	cmp	r3, #0
    940c:	d0c7      	beq.n	939e <__aeabi_dadd+0x356>
    940e:	4e94      	ldr	r6, [pc, #592]	; (9660 <__aeabi_dadd+0x618>)
    9410:	42b0      	cmp	r0, r6
    9412:	d1ac      	bne.n	936e <__aeabi_dadd+0x326>
    9414:	000c      	movs	r4, r1
    9416:	0017      	movs	r7, r2
    9418:	0006      	movs	r6, r0
    941a:	46d8      	mov	r8, fp
    941c:	e698      	b.n	9150 <__aeabi_dadd+0x108>
    941e:	4b90      	ldr	r3, [pc, #576]	; (9660 <__aeabi_dadd+0x618>)
    9420:	459a      	cmp	sl, r3
    9422:	d00b      	beq.n	943c <__aeabi_dadd+0x3f4>
    9424:	4682      	mov	sl, r0
    9426:	e6e7      	b.n	91f8 <__aeabi_dadd+0x1b0>
    9428:	2800      	cmp	r0, #0
    942a:	d000      	beq.n	942e <__aeabi_dadd+0x3e6>
    942c:	e09e      	b.n	956c <__aeabi_dadd+0x524>
    942e:	0018      	movs	r0, r3
    9430:	4310      	orrs	r0, r2
    9432:	d100      	bne.n	9436 <__aeabi_dadd+0x3ee>
    9434:	e0e9      	b.n	960a <__aeabi_dadd+0x5c2>
    9436:	001c      	movs	r4, r3
    9438:	0017      	movs	r7, r2
    943a:	46d8      	mov	r8, fp
    943c:	4e88      	ldr	r6, [pc, #544]	; (9660 <__aeabi_dadd+0x618>)
    943e:	e687      	b.n	9150 <__aeabi_dadd+0x108>
    9440:	2500      	movs	r5, #0
    9442:	e772      	b.n	932a <__aeabi_dadd+0x2e2>
    9444:	2100      	movs	r1, #0
    9446:	e782      	b.n	934e <__aeabi_dadd+0x306>
    9448:	0023      	movs	r3, r4
    944a:	433b      	orrs	r3, r7
    944c:	2e00      	cmp	r6, #0
    944e:	d000      	beq.n	9452 <__aeabi_dadd+0x40a>
    9450:	e0ab      	b.n	95aa <__aeabi_dadd+0x562>
    9452:	2b00      	cmp	r3, #0
    9454:	d100      	bne.n	9458 <__aeabi_dadd+0x410>
    9456:	e0e7      	b.n	9628 <__aeabi_dadd+0x5e0>
    9458:	000b      	movs	r3, r1
    945a:	4313      	orrs	r3, r2
    945c:	d100      	bne.n	9460 <__aeabi_dadd+0x418>
    945e:	e677      	b.n	9150 <__aeabi_dadd+0x108>
    9460:	18ba      	adds	r2, r7, r2
    9462:	42ba      	cmp	r2, r7
    9464:	41bf      	sbcs	r7, r7
    9466:	1864      	adds	r4, r4, r1
    9468:	427f      	negs	r7, r7
    946a:	19e4      	adds	r4, r4, r7
    946c:	0223      	lsls	r3, r4, #8
    946e:	d400      	bmi.n	9472 <__aeabi_dadd+0x42a>
    9470:	e0f2      	b.n	9658 <__aeabi_dadd+0x610>
    9472:	4b7c      	ldr	r3, [pc, #496]	; (9664 <__aeabi_dadd+0x61c>)
    9474:	0017      	movs	r7, r2
    9476:	401c      	ands	r4, r3
    9478:	0006      	movs	r6, r0
    947a:	e669      	b.n	9150 <__aeabi_dadd+0x108>
    947c:	0020      	movs	r0, r4
    947e:	4338      	orrs	r0, r7
    9480:	2e00      	cmp	r6, #0
    9482:	d1d1      	bne.n	9428 <__aeabi_dadd+0x3e0>
    9484:	2800      	cmp	r0, #0
    9486:	d15b      	bne.n	9540 <__aeabi_dadd+0x4f8>
    9488:	001c      	movs	r4, r3
    948a:	4314      	orrs	r4, r2
    948c:	d100      	bne.n	9490 <__aeabi_dadd+0x448>
    948e:	e0a8      	b.n	95e2 <__aeabi_dadd+0x59a>
    9490:	001c      	movs	r4, r3
    9492:	0017      	movs	r7, r2
    9494:	46d8      	mov	r8, fp
    9496:	e65b      	b.n	9150 <__aeabi_dadd+0x108>
    9498:	0006      	movs	r6, r0
    949a:	2400      	movs	r4, #0
    949c:	2700      	movs	r7, #0
    949e:	e697      	b.n	91d0 <__aeabi_dadd+0x188>
    94a0:	4650      	mov	r0, sl
    94a2:	000b      	movs	r3, r1
    94a4:	3820      	subs	r0, #32
    94a6:	40c3      	lsrs	r3, r0
    94a8:	4699      	mov	r9, r3
    94aa:	4653      	mov	r3, sl
    94ac:	2b20      	cmp	r3, #32
    94ae:	d100      	bne.n	94b2 <__aeabi_dadd+0x46a>
    94b0:	e095      	b.n	95de <__aeabi_dadd+0x596>
    94b2:	2340      	movs	r3, #64	; 0x40
    94b4:	4650      	mov	r0, sl
    94b6:	1a1b      	subs	r3, r3, r0
    94b8:	4099      	lsls	r1, r3
    94ba:	430a      	orrs	r2, r1
    94bc:	1e51      	subs	r1, r2, #1
    94be:	418a      	sbcs	r2, r1
    94c0:	464b      	mov	r3, r9
    94c2:	2100      	movs	r1, #0
    94c4:	431a      	orrs	r2, r3
    94c6:	e69f      	b.n	9208 <__aeabi_dadd+0x1c0>
    94c8:	2e00      	cmp	r6, #0
    94ca:	d130      	bne.n	952e <__aeabi_dadd+0x4e6>
    94cc:	0026      	movs	r6, r4
    94ce:	433e      	orrs	r6, r7
    94d0:	d067      	beq.n	95a2 <__aeabi_dadd+0x55a>
    94d2:	43db      	mvns	r3, r3
    94d4:	469a      	mov	sl, r3
    94d6:	2b00      	cmp	r3, #0
    94d8:	d01c      	beq.n	9514 <__aeabi_dadd+0x4cc>
    94da:	4e61      	ldr	r6, [pc, #388]	; (9660 <__aeabi_dadd+0x618>)
    94dc:	42b0      	cmp	r0, r6
    94de:	d060      	beq.n	95a2 <__aeabi_dadd+0x55a>
    94e0:	4653      	mov	r3, sl
    94e2:	2b38      	cmp	r3, #56	; 0x38
    94e4:	dd00      	ble.n	94e8 <__aeabi_dadd+0x4a0>
    94e6:	e096      	b.n	9616 <__aeabi_dadd+0x5ce>
    94e8:	2b1f      	cmp	r3, #31
    94ea:	dd00      	ble.n	94ee <__aeabi_dadd+0x4a6>
    94ec:	e09f      	b.n	962e <__aeabi_dadd+0x5e6>
    94ee:	2620      	movs	r6, #32
    94f0:	1af3      	subs	r3, r6, r3
    94f2:	0026      	movs	r6, r4
    94f4:	409e      	lsls	r6, r3
    94f6:	469c      	mov	ip, r3
    94f8:	46b3      	mov	fp, r6
    94fa:	4653      	mov	r3, sl
    94fc:	003e      	movs	r6, r7
    94fe:	40de      	lsrs	r6, r3
    9500:	0033      	movs	r3, r6
    9502:	465e      	mov	r6, fp
    9504:	431e      	orrs	r6, r3
    9506:	4663      	mov	r3, ip
    9508:	409f      	lsls	r7, r3
    950a:	1e7b      	subs	r3, r7, #1
    950c:	419f      	sbcs	r7, r3
    950e:	4653      	mov	r3, sl
    9510:	40dc      	lsrs	r4, r3
    9512:	4337      	orrs	r7, r6
    9514:	18bf      	adds	r7, r7, r2
    9516:	4297      	cmp	r7, r2
    9518:	4192      	sbcs	r2, r2
    951a:	1864      	adds	r4, r4, r1
    951c:	4252      	negs	r2, r2
    951e:	18a4      	adds	r4, r4, r2
    9520:	0006      	movs	r6, r0
    9522:	e678      	b.n	9216 <__aeabi_dadd+0x1ce>
    9524:	4327      	orrs	r7, r4
    9526:	1e7c      	subs	r4, r7, #1
    9528:	41a7      	sbcs	r7, r4
    952a:	2400      	movs	r4, #0
    952c:	e737      	b.n	939e <__aeabi_dadd+0x356>
    952e:	4e4c      	ldr	r6, [pc, #304]	; (9660 <__aeabi_dadd+0x618>)
    9530:	42b0      	cmp	r0, r6
    9532:	d036      	beq.n	95a2 <__aeabi_dadd+0x55a>
    9534:	2680      	movs	r6, #128	; 0x80
    9536:	425b      	negs	r3, r3
    9538:	0436      	lsls	r6, r6, #16
    953a:	469a      	mov	sl, r3
    953c:	4334      	orrs	r4, r6
    953e:	e7cf      	b.n	94e0 <__aeabi_dadd+0x498>
    9540:	0018      	movs	r0, r3
    9542:	4310      	orrs	r0, r2
    9544:	d100      	bne.n	9548 <__aeabi_dadd+0x500>
    9546:	e603      	b.n	9150 <__aeabi_dadd+0x108>
    9548:	1ab8      	subs	r0, r7, r2
    954a:	4684      	mov	ip, r0
    954c:	4567      	cmp	r7, ip
    954e:	41ad      	sbcs	r5, r5
    9550:	1ae0      	subs	r0, r4, r3
    9552:	426d      	negs	r5, r5
    9554:	1b40      	subs	r0, r0, r5
    9556:	0205      	lsls	r5, r0, #8
    9558:	d400      	bmi.n	955c <__aeabi_dadd+0x514>
    955a:	e62c      	b.n	91b6 <__aeabi_dadd+0x16e>
    955c:	1bd7      	subs	r7, r2, r7
    955e:	42ba      	cmp	r2, r7
    9560:	4192      	sbcs	r2, r2
    9562:	1b1c      	subs	r4, r3, r4
    9564:	4252      	negs	r2, r2
    9566:	1aa4      	subs	r4, r4, r2
    9568:	46d8      	mov	r8, fp
    956a:	e5f1      	b.n	9150 <__aeabi_dadd+0x108>
    956c:	0018      	movs	r0, r3
    956e:	4310      	orrs	r0, r2
    9570:	d100      	bne.n	9574 <__aeabi_dadd+0x52c>
    9572:	e763      	b.n	943c <__aeabi_dadd+0x3f4>
    9574:	08f8      	lsrs	r0, r7, #3
    9576:	0767      	lsls	r7, r4, #29
    9578:	4307      	orrs	r7, r0
    957a:	2080      	movs	r0, #128	; 0x80
    957c:	08e4      	lsrs	r4, r4, #3
    957e:	0300      	lsls	r0, r0, #12
    9580:	4204      	tst	r4, r0
    9582:	d008      	beq.n	9596 <__aeabi_dadd+0x54e>
    9584:	08dd      	lsrs	r5, r3, #3
    9586:	4205      	tst	r5, r0
    9588:	d105      	bne.n	9596 <__aeabi_dadd+0x54e>
    958a:	08d2      	lsrs	r2, r2, #3
    958c:	0759      	lsls	r1, r3, #29
    958e:	4311      	orrs	r1, r2
    9590:	000f      	movs	r7, r1
    9592:	002c      	movs	r4, r5
    9594:	46d8      	mov	r8, fp
    9596:	0f7b      	lsrs	r3, r7, #29
    9598:	00e4      	lsls	r4, r4, #3
    959a:	431c      	orrs	r4, r3
    959c:	00ff      	lsls	r7, r7, #3
    959e:	4e30      	ldr	r6, [pc, #192]	; (9660 <__aeabi_dadd+0x618>)
    95a0:	e5d6      	b.n	9150 <__aeabi_dadd+0x108>
    95a2:	000c      	movs	r4, r1
    95a4:	0017      	movs	r7, r2
    95a6:	0006      	movs	r6, r0
    95a8:	e5d2      	b.n	9150 <__aeabi_dadd+0x108>
    95aa:	2b00      	cmp	r3, #0
    95ac:	d038      	beq.n	9620 <__aeabi_dadd+0x5d8>
    95ae:	000b      	movs	r3, r1
    95b0:	4313      	orrs	r3, r2
    95b2:	d100      	bne.n	95b6 <__aeabi_dadd+0x56e>
    95b4:	e742      	b.n	943c <__aeabi_dadd+0x3f4>
    95b6:	08f8      	lsrs	r0, r7, #3
    95b8:	0767      	lsls	r7, r4, #29
    95ba:	4307      	orrs	r7, r0
    95bc:	2080      	movs	r0, #128	; 0x80
    95be:	08e4      	lsrs	r4, r4, #3
    95c0:	0300      	lsls	r0, r0, #12
    95c2:	4204      	tst	r4, r0
    95c4:	d0e7      	beq.n	9596 <__aeabi_dadd+0x54e>
    95c6:	08cb      	lsrs	r3, r1, #3
    95c8:	4203      	tst	r3, r0
    95ca:	d1e4      	bne.n	9596 <__aeabi_dadd+0x54e>
    95cc:	08d2      	lsrs	r2, r2, #3
    95ce:	0749      	lsls	r1, r1, #29
    95d0:	4311      	orrs	r1, r2
    95d2:	000f      	movs	r7, r1
    95d4:	001c      	movs	r4, r3
    95d6:	e7de      	b.n	9596 <__aeabi_dadd+0x54e>
    95d8:	2700      	movs	r7, #0
    95da:	2400      	movs	r4, #0
    95dc:	e5d5      	b.n	918a <__aeabi_dadd+0x142>
    95de:	2100      	movs	r1, #0
    95e0:	e76b      	b.n	94ba <__aeabi_dadd+0x472>
    95e2:	2500      	movs	r5, #0
    95e4:	2700      	movs	r7, #0
    95e6:	e5f3      	b.n	91d0 <__aeabi_dadd+0x188>
    95e8:	464e      	mov	r6, r9
    95ea:	0025      	movs	r5, r4
    95ec:	3e20      	subs	r6, #32
    95ee:	40f5      	lsrs	r5, r6
    95f0:	464b      	mov	r3, r9
    95f2:	002e      	movs	r6, r5
    95f4:	2b20      	cmp	r3, #32
    95f6:	d02d      	beq.n	9654 <__aeabi_dadd+0x60c>
    95f8:	2540      	movs	r5, #64	; 0x40
    95fa:	1aed      	subs	r5, r5, r3
    95fc:	40ac      	lsls	r4, r5
    95fe:	4327      	orrs	r7, r4
    9600:	1e7c      	subs	r4, r7, #1
    9602:	41a7      	sbcs	r7, r4
    9604:	2400      	movs	r4, #0
    9606:	4337      	orrs	r7, r6
    9608:	e6c9      	b.n	939e <__aeabi_dadd+0x356>
    960a:	2480      	movs	r4, #128	; 0x80
    960c:	2500      	movs	r5, #0
    960e:	0324      	lsls	r4, r4, #12
    9610:	4e13      	ldr	r6, [pc, #76]	; (9660 <__aeabi_dadd+0x618>)
    9612:	2700      	movs	r7, #0
    9614:	e5dc      	b.n	91d0 <__aeabi_dadd+0x188>
    9616:	4327      	orrs	r7, r4
    9618:	1e7c      	subs	r4, r7, #1
    961a:	41a7      	sbcs	r7, r4
    961c:	2400      	movs	r4, #0
    961e:	e779      	b.n	9514 <__aeabi_dadd+0x4cc>
    9620:	000c      	movs	r4, r1
    9622:	0017      	movs	r7, r2
    9624:	4e0e      	ldr	r6, [pc, #56]	; (9660 <__aeabi_dadd+0x618>)
    9626:	e593      	b.n	9150 <__aeabi_dadd+0x108>
    9628:	000c      	movs	r4, r1
    962a:	0017      	movs	r7, r2
    962c:	e590      	b.n	9150 <__aeabi_dadd+0x108>
    962e:	4656      	mov	r6, sl
    9630:	0023      	movs	r3, r4
    9632:	3e20      	subs	r6, #32
    9634:	40f3      	lsrs	r3, r6
    9636:	4699      	mov	r9, r3
    9638:	4653      	mov	r3, sl
    963a:	2b20      	cmp	r3, #32
    963c:	d00e      	beq.n	965c <__aeabi_dadd+0x614>
    963e:	2340      	movs	r3, #64	; 0x40
    9640:	4656      	mov	r6, sl
    9642:	1b9b      	subs	r3, r3, r6
    9644:	409c      	lsls	r4, r3
    9646:	4327      	orrs	r7, r4
    9648:	1e7c      	subs	r4, r7, #1
    964a:	41a7      	sbcs	r7, r4
    964c:	464b      	mov	r3, r9
    964e:	2400      	movs	r4, #0
    9650:	431f      	orrs	r7, r3
    9652:	e75f      	b.n	9514 <__aeabi_dadd+0x4cc>
    9654:	2400      	movs	r4, #0
    9656:	e7d2      	b.n	95fe <__aeabi_dadd+0x5b6>
    9658:	0017      	movs	r7, r2
    965a:	e5b2      	b.n	91c2 <__aeabi_dadd+0x17a>
    965c:	2400      	movs	r4, #0
    965e:	e7f2      	b.n	9646 <__aeabi_dadd+0x5fe>
    9660:	000007ff 	.word	0x000007ff
    9664:	ff7fffff 	.word	0xff7fffff

00009668 <__eqdf2>:
    9668:	b5f0      	push	{r4, r5, r6, r7, lr}
    966a:	464f      	mov	r7, r9
    966c:	4646      	mov	r6, r8
    966e:	46d6      	mov	lr, sl
    9670:	005c      	lsls	r4, r3, #1
    9672:	b5c0      	push	{r6, r7, lr}
    9674:	031f      	lsls	r7, r3, #12
    9676:	0fdb      	lsrs	r3, r3, #31
    9678:	469a      	mov	sl, r3
    967a:	4b17      	ldr	r3, [pc, #92]	; (96d8 <__eqdf2+0x70>)
    967c:	030e      	lsls	r6, r1, #12
    967e:	004d      	lsls	r5, r1, #1
    9680:	4684      	mov	ip, r0
    9682:	4680      	mov	r8, r0
    9684:	0b36      	lsrs	r6, r6, #12
    9686:	0d6d      	lsrs	r5, r5, #21
    9688:	0fc9      	lsrs	r1, r1, #31
    968a:	4691      	mov	r9, r2
    968c:	0b3f      	lsrs	r7, r7, #12
    968e:	0d64      	lsrs	r4, r4, #21
    9690:	2001      	movs	r0, #1
    9692:	429d      	cmp	r5, r3
    9694:	d008      	beq.n	96a8 <__eqdf2+0x40>
    9696:	429c      	cmp	r4, r3
    9698:	d001      	beq.n	969e <__eqdf2+0x36>
    969a:	42a5      	cmp	r5, r4
    969c:	d00b      	beq.n	96b6 <__eqdf2+0x4e>
    969e:	bc1c      	pop	{r2, r3, r4}
    96a0:	4690      	mov	r8, r2
    96a2:	4699      	mov	r9, r3
    96a4:	46a2      	mov	sl, r4
    96a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96a8:	4663      	mov	r3, ip
    96aa:	4333      	orrs	r3, r6
    96ac:	d1f7      	bne.n	969e <__eqdf2+0x36>
    96ae:	42ac      	cmp	r4, r5
    96b0:	d1f5      	bne.n	969e <__eqdf2+0x36>
    96b2:	433a      	orrs	r2, r7
    96b4:	d1f3      	bne.n	969e <__eqdf2+0x36>
    96b6:	2001      	movs	r0, #1
    96b8:	42be      	cmp	r6, r7
    96ba:	d1f0      	bne.n	969e <__eqdf2+0x36>
    96bc:	45c8      	cmp	r8, r9
    96be:	d1ee      	bne.n	969e <__eqdf2+0x36>
    96c0:	4551      	cmp	r1, sl
    96c2:	d007      	beq.n	96d4 <__eqdf2+0x6c>
    96c4:	2d00      	cmp	r5, #0
    96c6:	d1ea      	bne.n	969e <__eqdf2+0x36>
    96c8:	4663      	mov	r3, ip
    96ca:	431e      	orrs	r6, r3
    96cc:	0030      	movs	r0, r6
    96ce:	1e46      	subs	r6, r0, #1
    96d0:	41b0      	sbcs	r0, r6
    96d2:	e7e4      	b.n	969e <__eqdf2+0x36>
    96d4:	2000      	movs	r0, #0
    96d6:	e7e2      	b.n	969e <__eqdf2+0x36>
    96d8:	000007ff 	.word	0x000007ff

000096dc <__gedf2>:
    96dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    96de:	4645      	mov	r5, r8
    96e0:	46de      	mov	lr, fp
    96e2:	4657      	mov	r7, sl
    96e4:	464e      	mov	r6, r9
    96e6:	b5e0      	push	{r5, r6, r7, lr}
    96e8:	031f      	lsls	r7, r3, #12
    96ea:	0b3d      	lsrs	r5, r7, #12
    96ec:	4f2c      	ldr	r7, [pc, #176]	; (97a0 <__gedf2+0xc4>)
    96ee:	030e      	lsls	r6, r1, #12
    96f0:	004c      	lsls	r4, r1, #1
    96f2:	46ab      	mov	fp, r5
    96f4:	005d      	lsls	r5, r3, #1
    96f6:	4684      	mov	ip, r0
    96f8:	0b36      	lsrs	r6, r6, #12
    96fa:	0d64      	lsrs	r4, r4, #21
    96fc:	0fc9      	lsrs	r1, r1, #31
    96fe:	4690      	mov	r8, r2
    9700:	0d6d      	lsrs	r5, r5, #21
    9702:	0fdb      	lsrs	r3, r3, #31
    9704:	42bc      	cmp	r4, r7
    9706:	d02a      	beq.n	975e <__gedf2+0x82>
    9708:	4f25      	ldr	r7, [pc, #148]	; (97a0 <__gedf2+0xc4>)
    970a:	42bd      	cmp	r5, r7
    970c:	d02d      	beq.n	976a <__gedf2+0x8e>
    970e:	2c00      	cmp	r4, #0
    9710:	d10f      	bne.n	9732 <__gedf2+0x56>
    9712:	4330      	orrs	r0, r6
    9714:	0007      	movs	r7, r0
    9716:	4681      	mov	r9, r0
    9718:	4278      	negs	r0, r7
    971a:	4178      	adcs	r0, r7
    971c:	b2c0      	uxtb	r0, r0
    971e:	2d00      	cmp	r5, #0
    9720:	d117      	bne.n	9752 <__gedf2+0x76>
    9722:	465f      	mov	r7, fp
    9724:	433a      	orrs	r2, r7
    9726:	d114      	bne.n	9752 <__gedf2+0x76>
    9728:	464b      	mov	r3, r9
    972a:	2000      	movs	r0, #0
    972c:	2b00      	cmp	r3, #0
    972e:	d00a      	beq.n	9746 <__gedf2+0x6a>
    9730:	e006      	b.n	9740 <__gedf2+0x64>
    9732:	2d00      	cmp	r5, #0
    9734:	d102      	bne.n	973c <__gedf2+0x60>
    9736:	4658      	mov	r0, fp
    9738:	4302      	orrs	r2, r0
    973a:	d001      	beq.n	9740 <__gedf2+0x64>
    973c:	4299      	cmp	r1, r3
    973e:	d018      	beq.n	9772 <__gedf2+0x96>
    9740:	4248      	negs	r0, r1
    9742:	2101      	movs	r1, #1
    9744:	4308      	orrs	r0, r1
    9746:	bc3c      	pop	{r2, r3, r4, r5}
    9748:	4690      	mov	r8, r2
    974a:	4699      	mov	r9, r3
    974c:	46a2      	mov	sl, r4
    974e:	46ab      	mov	fp, r5
    9750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9752:	2800      	cmp	r0, #0
    9754:	d0f2      	beq.n	973c <__gedf2+0x60>
    9756:	2001      	movs	r0, #1
    9758:	3b01      	subs	r3, #1
    975a:	4318      	orrs	r0, r3
    975c:	e7f3      	b.n	9746 <__gedf2+0x6a>
    975e:	0037      	movs	r7, r6
    9760:	4307      	orrs	r7, r0
    9762:	d0d1      	beq.n	9708 <__gedf2+0x2c>
    9764:	2002      	movs	r0, #2
    9766:	4240      	negs	r0, r0
    9768:	e7ed      	b.n	9746 <__gedf2+0x6a>
    976a:	465f      	mov	r7, fp
    976c:	4317      	orrs	r7, r2
    976e:	d0ce      	beq.n	970e <__gedf2+0x32>
    9770:	e7f8      	b.n	9764 <__gedf2+0x88>
    9772:	42ac      	cmp	r4, r5
    9774:	dce4      	bgt.n	9740 <__gedf2+0x64>
    9776:	da03      	bge.n	9780 <__gedf2+0xa4>
    9778:	1e48      	subs	r0, r1, #1
    977a:	2101      	movs	r1, #1
    977c:	4308      	orrs	r0, r1
    977e:	e7e2      	b.n	9746 <__gedf2+0x6a>
    9780:	455e      	cmp	r6, fp
    9782:	d8dd      	bhi.n	9740 <__gedf2+0x64>
    9784:	d006      	beq.n	9794 <__gedf2+0xb8>
    9786:	2000      	movs	r0, #0
    9788:	455e      	cmp	r6, fp
    978a:	d2dc      	bcs.n	9746 <__gedf2+0x6a>
    978c:	2301      	movs	r3, #1
    978e:	1e48      	subs	r0, r1, #1
    9790:	4318      	orrs	r0, r3
    9792:	e7d8      	b.n	9746 <__gedf2+0x6a>
    9794:	45c4      	cmp	ip, r8
    9796:	d8d3      	bhi.n	9740 <__gedf2+0x64>
    9798:	2000      	movs	r0, #0
    979a:	45c4      	cmp	ip, r8
    979c:	d3f6      	bcc.n	978c <__gedf2+0xb0>
    979e:	e7d2      	b.n	9746 <__gedf2+0x6a>
    97a0:	000007ff 	.word	0x000007ff

000097a4 <__ledf2>:
    97a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97a6:	464e      	mov	r6, r9
    97a8:	4645      	mov	r5, r8
    97aa:	46de      	mov	lr, fp
    97ac:	4657      	mov	r7, sl
    97ae:	005c      	lsls	r4, r3, #1
    97b0:	b5e0      	push	{r5, r6, r7, lr}
    97b2:	031f      	lsls	r7, r3, #12
    97b4:	0fdb      	lsrs	r3, r3, #31
    97b6:	4699      	mov	r9, r3
    97b8:	4b2a      	ldr	r3, [pc, #168]	; (9864 <__ledf2+0xc0>)
    97ba:	030e      	lsls	r6, r1, #12
    97bc:	004d      	lsls	r5, r1, #1
    97be:	0fc9      	lsrs	r1, r1, #31
    97c0:	4684      	mov	ip, r0
    97c2:	0b36      	lsrs	r6, r6, #12
    97c4:	0d6d      	lsrs	r5, r5, #21
    97c6:	468b      	mov	fp, r1
    97c8:	4690      	mov	r8, r2
    97ca:	0b3f      	lsrs	r7, r7, #12
    97cc:	0d64      	lsrs	r4, r4, #21
    97ce:	429d      	cmp	r5, r3
    97d0:	d020      	beq.n	9814 <__ledf2+0x70>
    97d2:	4b24      	ldr	r3, [pc, #144]	; (9864 <__ledf2+0xc0>)
    97d4:	429c      	cmp	r4, r3
    97d6:	d022      	beq.n	981e <__ledf2+0x7a>
    97d8:	2d00      	cmp	r5, #0
    97da:	d112      	bne.n	9802 <__ledf2+0x5e>
    97dc:	4330      	orrs	r0, r6
    97de:	4243      	negs	r3, r0
    97e0:	4143      	adcs	r3, r0
    97e2:	b2db      	uxtb	r3, r3
    97e4:	2c00      	cmp	r4, #0
    97e6:	d01f      	beq.n	9828 <__ledf2+0x84>
    97e8:	2b00      	cmp	r3, #0
    97ea:	d00c      	beq.n	9806 <__ledf2+0x62>
    97ec:	464b      	mov	r3, r9
    97ee:	2001      	movs	r0, #1
    97f0:	3b01      	subs	r3, #1
    97f2:	4303      	orrs	r3, r0
    97f4:	0018      	movs	r0, r3
    97f6:	bc3c      	pop	{r2, r3, r4, r5}
    97f8:	4690      	mov	r8, r2
    97fa:	4699      	mov	r9, r3
    97fc:	46a2      	mov	sl, r4
    97fe:	46ab      	mov	fp, r5
    9800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9802:	2c00      	cmp	r4, #0
    9804:	d016      	beq.n	9834 <__ledf2+0x90>
    9806:	45cb      	cmp	fp, r9
    9808:	d017      	beq.n	983a <__ledf2+0x96>
    980a:	465b      	mov	r3, fp
    980c:	4259      	negs	r1, r3
    980e:	2301      	movs	r3, #1
    9810:	430b      	orrs	r3, r1
    9812:	e7ef      	b.n	97f4 <__ledf2+0x50>
    9814:	0031      	movs	r1, r6
    9816:	2302      	movs	r3, #2
    9818:	4301      	orrs	r1, r0
    981a:	d1eb      	bne.n	97f4 <__ledf2+0x50>
    981c:	e7d9      	b.n	97d2 <__ledf2+0x2e>
    981e:	0039      	movs	r1, r7
    9820:	2302      	movs	r3, #2
    9822:	4311      	orrs	r1, r2
    9824:	d1e6      	bne.n	97f4 <__ledf2+0x50>
    9826:	e7d7      	b.n	97d8 <__ledf2+0x34>
    9828:	433a      	orrs	r2, r7
    982a:	d1dd      	bne.n	97e8 <__ledf2+0x44>
    982c:	2300      	movs	r3, #0
    982e:	2800      	cmp	r0, #0
    9830:	d0e0      	beq.n	97f4 <__ledf2+0x50>
    9832:	e7ea      	b.n	980a <__ledf2+0x66>
    9834:	433a      	orrs	r2, r7
    9836:	d1e6      	bne.n	9806 <__ledf2+0x62>
    9838:	e7e7      	b.n	980a <__ledf2+0x66>
    983a:	42a5      	cmp	r5, r4
    983c:	dce5      	bgt.n	980a <__ledf2+0x66>
    983e:	db05      	blt.n	984c <__ledf2+0xa8>
    9840:	42be      	cmp	r6, r7
    9842:	d8e2      	bhi.n	980a <__ledf2+0x66>
    9844:	d007      	beq.n	9856 <__ledf2+0xb2>
    9846:	2300      	movs	r3, #0
    9848:	42be      	cmp	r6, r7
    984a:	d2d3      	bcs.n	97f4 <__ledf2+0x50>
    984c:	4659      	mov	r1, fp
    984e:	2301      	movs	r3, #1
    9850:	3901      	subs	r1, #1
    9852:	430b      	orrs	r3, r1
    9854:	e7ce      	b.n	97f4 <__ledf2+0x50>
    9856:	45c4      	cmp	ip, r8
    9858:	d8d7      	bhi.n	980a <__ledf2+0x66>
    985a:	2300      	movs	r3, #0
    985c:	45c4      	cmp	ip, r8
    985e:	d3f5      	bcc.n	984c <__ledf2+0xa8>
    9860:	e7c8      	b.n	97f4 <__ledf2+0x50>
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	000007ff 	.word	0x000007ff

00009868 <__aeabi_dmul>:
    9868:	b5f0      	push	{r4, r5, r6, r7, lr}
    986a:	4657      	mov	r7, sl
    986c:	4645      	mov	r5, r8
    986e:	46de      	mov	lr, fp
    9870:	464e      	mov	r6, r9
    9872:	b5e0      	push	{r5, r6, r7, lr}
    9874:	030c      	lsls	r4, r1, #12
    9876:	4698      	mov	r8, r3
    9878:	004e      	lsls	r6, r1, #1
    987a:	0b23      	lsrs	r3, r4, #12
    987c:	b087      	sub	sp, #28
    987e:	0007      	movs	r7, r0
    9880:	4692      	mov	sl, r2
    9882:	469b      	mov	fp, r3
    9884:	0d76      	lsrs	r6, r6, #21
    9886:	0fcd      	lsrs	r5, r1, #31
    9888:	2e00      	cmp	r6, #0
    988a:	d06b      	beq.n	9964 <__aeabi_dmul+0xfc>
    988c:	4b6d      	ldr	r3, [pc, #436]	; (9a44 <__aeabi_dmul+0x1dc>)
    988e:	429e      	cmp	r6, r3
    9890:	d035      	beq.n	98fe <__aeabi_dmul+0x96>
    9892:	2480      	movs	r4, #128	; 0x80
    9894:	465b      	mov	r3, fp
    9896:	0f42      	lsrs	r2, r0, #29
    9898:	0424      	lsls	r4, r4, #16
    989a:	00db      	lsls	r3, r3, #3
    989c:	4314      	orrs	r4, r2
    989e:	431c      	orrs	r4, r3
    98a0:	00c3      	lsls	r3, r0, #3
    98a2:	4699      	mov	r9, r3
    98a4:	4b68      	ldr	r3, [pc, #416]	; (9a48 <__aeabi_dmul+0x1e0>)
    98a6:	46a3      	mov	fp, r4
    98a8:	469c      	mov	ip, r3
    98aa:	2300      	movs	r3, #0
    98ac:	2700      	movs	r7, #0
    98ae:	4466      	add	r6, ip
    98b0:	9302      	str	r3, [sp, #8]
    98b2:	4643      	mov	r3, r8
    98b4:	031c      	lsls	r4, r3, #12
    98b6:	005a      	lsls	r2, r3, #1
    98b8:	0fdb      	lsrs	r3, r3, #31
    98ba:	4650      	mov	r0, sl
    98bc:	0b24      	lsrs	r4, r4, #12
    98be:	0d52      	lsrs	r2, r2, #21
    98c0:	4698      	mov	r8, r3
    98c2:	d100      	bne.n	98c6 <__aeabi_dmul+0x5e>
    98c4:	e076      	b.n	99b4 <__aeabi_dmul+0x14c>
    98c6:	4b5f      	ldr	r3, [pc, #380]	; (9a44 <__aeabi_dmul+0x1dc>)
    98c8:	429a      	cmp	r2, r3
    98ca:	d06d      	beq.n	99a8 <__aeabi_dmul+0x140>
    98cc:	2380      	movs	r3, #128	; 0x80
    98ce:	0f41      	lsrs	r1, r0, #29
    98d0:	041b      	lsls	r3, r3, #16
    98d2:	430b      	orrs	r3, r1
    98d4:	495c      	ldr	r1, [pc, #368]	; (9a48 <__aeabi_dmul+0x1e0>)
    98d6:	00e4      	lsls	r4, r4, #3
    98d8:	468c      	mov	ip, r1
    98da:	431c      	orrs	r4, r3
    98dc:	00c3      	lsls	r3, r0, #3
    98de:	2000      	movs	r0, #0
    98e0:	4462      	add	r2, ip
    98e2:	4641      	mov	r1, r8
    98e4:	18b6      	adds	r6, r6, r2
    98e6:	4069      	eors	r1, r5
    98e8:	1c72      	adds	r2, r6, #1
    98ea:	9101      	str	r1, [sp, #4]
    98ec:	4694      	mov	ip, r2
    98ee:	4307      	orrs	r7, r0
    98f0:	2f0f      	cmp	r7, #15
    98f2:	d900      	bls.n	98f6 <__aeabi_dmul+0x8e>
    98f4:	e0b0      	b.n	9a58 <__aeabi_dmul+0x1f0>
    98f6:	4a55      	ldr	r2, [pc, #340]	; (9a4c <__aeabi_dmul+0x1e4>)
    98f8:	00bf      	lsls	r7, r7, #2
    98fa:	59d2      	ldr	r2, [r2, r7]
    98fc:	4697      	mov	pc, r2
    98fe:	465b      	mov	r3, fp
    9900:	4303      	orrs	r3, r0
    9902:	4699      	mov	r9, r3
    9904:	d000      	beq.n	9908 <__aeabi_dmul+0xa0>
    9906:	e087      	b.n	9a18 <__aeabi_dmul+0x1b0>
    9908:	2300      	movs	r3, #0
    990a:	469b      	mov	fp, r3
    990c:	3302      	adds	r3, #2
    990e:	2708      	movs	r7, #8
    9910:	9302      	str	r3, [sp, #8]
    9912:	e7ce      	b.n	98b2 <__aeabi_dmul+0x4a>
    9914:	4642      	mov	r2, r8
    9916:	9201      	str	r2, [sp, #4]
    9918:	2802      	cmp	r0, #2
    991a:	d067      	beq.n	99ec <__aeabi_dmul+0x184>
    991c:	2803      	cmp	r0, #3
    991e:	d100      	bne.n	9922 <__aeabi_dmul+0xba>
    9920:	e20e      	b.n	9d40 <__aeabi_dmul+0x4d8>
    9922:	2801      	cmp	r0, #1
    9924:	d000      	beq.n	9928 <__aeabi_dmul+0xc0>
    9926:	e162      	b.n	9bee <__aeabi_dmul+0x386>
    9928:	2300      	movs	r3, #0
    992a:	2400      	movs	r4, #0
    992c:	2200      	movs	r2, #0
    992e:	4699      	mov	r9, r3
    9930:	9901      	ldr	r1, [sp, #4]
    9932:	4001      	ands	r1, r0
    9934:	b2cd      	uxtb	r5, r1
    9936:	2100      	movs	r1, #0
    9938:	0312      	lsls	r2, r2, #12
    993a:	0d0b      	lsrs	r3, r1, #20
    993c:	0b12      	lsrs	r2, r2, #12
    993e:	051b      	lsls	r3, r3, #20
    9940:	4313      	orrs	r3, r2
    9942:	4a43      	ldr	r2, [pc, #268]	; (9a50 <__aeabi_dmul+0x1e8>)
    9944:	0524      	lsls	r4, r4, #20
    9946:	4013      	ands	r3, r2
    9948:	431c      	orrs	r4, r3
    994a:	0064      	lsls	r4, r4, #1
    994c:	07ed      	lsls	r5, r5, #31
    994e:	0864      	lsrs	r4, r4, #1
    9950:	432c      	orrs	r4, r5
    9952:	4648      	mov	r0, r9
    9954:	0021      	movs	r1, r4
    9956:	b007      	add	sp, #28
    9958:	bc3c      	pop	{r2, r3, r4, r5}
    995a:	4690      	mov	r8, r2
    995c:	4699      	mov	r9, r3
    995e:	46a2      	mov	sl, r4
    9960:	46ab      	mov	fp, r5
    9962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9964:	4303      	orrs	r3, r0
    9966:	4699      	mov	r9, r3
    9968:	d04f      	beq.n	9a0a <__aeabi_dmul+0x1a2>
    996a:	465b      	mov	r3, fp
    996c:	2b00      	cmp	r3, #0
    996e:	d100      	bne.n	9972 <__aeabi_dmul+0x10a>
    9970:	e189      	b.n	9c86 <__aeabi_dmul+0x41e>
    9972:	4658      	mov	r0, fp
    9974:	f7ff fae2 	bl	8f3c <__clzsi2>
    9978:	0003      	movs	r3, r0
    997a:	3b0b      	subs	r3, #11
    997c:	2b1c      	cmp	r3, #28
    997e:	dd00      	ble.n	9982 <__aeabi_dmul+0x11a>
    9980:	e17a      	b.n	9c78 <__aeabi_dmul+0x410>
    9982:	221d      	movs	r2, #29
    9984:	1ad3      	subs	r3, r2, r3
    9986:	003a      	movs	r2, r7
    9988:	0001      	movs	r1, r0
    998a:	465c      	mov	r4, fp
    998c:	40da      	lsrs	r2, r3
    998e:	3908      	subs	r1, #8
    9990:	408c      	lsls	r4, r1
    9992:	0013      	movs	r3, r2
    9994:	408f      	lsls	r7, r1
    9996:	4323      	orrs	r3, r4
    9998:	469b      	mov	fp, r3
    999a:	46b9      	mov	r9, r7
    999c:	2300      	movs	r3, #0
    999e:	4e2d      	ldr	r6, [pc, #180]	; (9a54 <__aeabi_dmul+0x1ec>)
    99a0:	2700      	movs	r7, #0
    99a2:	1a36      	subs	r6, r6, r0
    99a4:	9302      	str	r3, [sp, #8]
    99a6:	e784      	b.n	98b2 <__aeabi_dmul+0x4a>
    99a8:	4653      	mov	r3, sl
    99aa:	4323      	orrs	r3, r4
    99ac:	d12a      	bne.n	9a04 <__aeabi_dmul+0x19c>
    99ae:	2400      	movs	r4, #0
    99b0:	2002      	movs	r0, #2
    99b2:	e796      	b.n	98e2 <__aeabi_dmul+0x7a>
    99b4:	4653      	mov	r3, sl
    99b6:	4323      	orrs	r3, r4
    99b8:	d020      	beq.n	99fc <__aeabi_dmul+0x194>
    99ba:	2c00      	cmp	r4, #0
    99bc:	d100      	bne.n	99c0 <__aeabi_dmul+0x158>
    99be:	e157      	b.n	9c70 <__aeabi_dmul+0x408>
    99c0:	0020      	movs	r0, r4
    99c2:	f7ff fabb 	bl	8f3c <__clzsi2>
    99c6:	0003      	movs	r3, r0
    99c8:	3b0b      	subs	r3, #11
    99ca:	2b1c      	cmp	r3, #28
    99cc:	dd00      	ble.n	99d0 <__aeabi_dmul+0x168>
    99ce:	e149      	b.n	9c64 <__aeabi_dmul+0x3fc>
    99d0:	211d      	movs	r1, #29
    99d2:	1acb      	subs	r3, r1, r3
    99d4:	4651      	mov	r1, sl
    99d6:	0002      	movs	r2, r0
    99d8:	40d9      	lsrs	r1, r3
    99da:	4653      	mov	r3, sl
    99dc:	3a08      	subs	r2, #8
    99de:	4094      	lsls	r4, r2
    99e0:	4093      	lsls	r3, r2
    99e2:	430c      	orrs	r4, r1
    99e4:	4a1b      	ldr	r2, [pc, #108]	; (9a54 <__aeabi_dmul+0x1ec>)
    99e6:	1a12      	subs	r2, r2, r0
    99e8:	2000      	movs	r0, #0
    99ea:	e77a      	b.n	98e2 <__aeabi_dmul+0x7a>
    99ec:	2501      	movs	r5, #1
    99ee:	9b01      	ldr	r3, [sp, #4]
    99f0:	4c14      	ldr	r4, [pc, #80]	; (9a44 <__aeabi_dmul+0x1dc>)
    99f2:	401d      	ands	r5, r3
    99f4:	2300      	movs	r3, #0
    99f6:	2200      	movs	r2, #0
    99f8:	4699      	mov	r9, r3
    99fa:	e79c      	b.n	9936 <__aeabi_dmul+0xce>
    99fc:	2400      	movs	r4, #0
    99fe:	2200      	movs	r2, #0
    9a00:	2001      	movs	r0, #1
    9a02:	e76e      	b.n	98e2 <__aeabi_dmul+0x7a>
    9a04:	4653      	mov	r3, sl
    9a06:	2003      	movs	r0, #3
    9a08:	e76b      	b.n	98e2 <__aeabi_dmul+0x7a>
    9a0a:	2300      	movs	r3, #0
    9a0c:	469b      	mov	fp, r3
    9a0e:	3301      	adds	r3, #1
    9a10:	2704      	movs	r7, #4
    9a12:	2600      	movs	r6, #0
    9a14:	9302      	str	r3, [sp, #8]
    9a16:	e74c      	b.n	98b2 <__aeabi_dmul+0x4a>
    9a18:	2303      	movs	r3, #3
    9a1a:	4681      	mov	r9, r0
    9a1c:	270c      	movs	r7, #12
    9a1e:	9302      	str	r3, [sp, #8]
    9a20:	e747      	b.n	98b2 <__aeabi_dmul+0x4a>
    9a22:	2280      	movs	r2, #128	; 0x80
    9a24:	2300      	movs	r3, #0
    9a26:	2500      	movs	r5, #0
    9a28:	0312      	lsls	r2, r2, #12
    9a2a:	4699      	mov	r9, r3
    9a2c:	4c05      	ldr	r4, [pc, #20]	; (9a44 <__aeabi_dmul+0x1dc>)
    9a2e:	e782      	b.n	9936 <__aeabi_dmul+0xce>
    9a30:	465c      	mov	r4, fp
    9a32:	464b      	mov	r3, r9
    9a34:	9802      	ldr	r0, [sp, #8]
    9a36:	e76f      	b.n	9918 <__aeabi_dmul+0xb0>
    9a38:	465c      	mov	r4, fp
    9a3a:	464b      	mov	r3, r9
    9a3c:	9501      	str	r5, [sp, #4]
    9a3e:	9802      	ldr	r0, [sp, #8]
    9a40:	e76a      	b.n	9918 <__aeabi_dmul+0xb0>
    9a42:	46c0      	nop			; (mov r8, r8)
    9a44:	000007ff 	.word	0x000007ff
    9a48:	fffffc01 	.word	0xfffffc01
    9a4c:	0000abb0 	.word	0x0000abb0
    9a50:	800fffff 	.word	0x800fffff
    9a54:	fffffc0d 	.word	0xfffffc0d
    9a58:	464a      	mov	r2, r9
    9a5a:	4649      	mov	r1, r9
    9a5c:	0c17      	lsrs	r7, r2, #16
    9a5e:	0c1a      	lsrs	r2, r3, #16
    9a60:	041b      	lsls	r3, r3, #16
    9a62:	0c1b      	lsrs	r3, r3, #16
    9a64:	0408      	lsls	r0, r1, #16
    9a66:	0019      	movs	r1, r3
    9a68:	0c00      	lsrs	r0, r0, #16
    9a6a:	4341      	muls	r1, r0
    9a6c:	0015      	movs	r5, r2
    9a6e:	4688      	mov	r8, r1
    9a70:	0019      	movs	r1, r3
    9a72:	437d      	muls	r5, r7
    9a74:	4379      	muls	r1, r7
    9a76:	9503      	str	r5, [sp, #12]
    9a78:	4689      	mov	r9, r1
    9a7a:	0029      	movs	r1, r5
    9a7c:	0015      	movs	r5, r2
    9a7e:	4345      	muls	r5, r0
    9a80:	444d      	add	r5, r9
    9a82:	9502      	str	r5, [sp, #8]
    9a84:	4645      	mov	r5, r8
    9a86:	0c2d      	lsrs	r5, r5, #16
    9a88:	46aa      	mov	sl, r5
    9a8a:	9d02      	ldr	r5, [sp, #8]
    9a8c:	4455      	add	r5, sl
    9a8e:	45a9      	cmp	r9, r5
    9a90:	d906      	bls.n	9aa0 <__aeabi_dmul+0x238>
    9a92:	468a      	mov	sl, r1
    9a94:	2180      	movs	r1, #128	; 0x80
    9a96:	0249      	lsls	r1, r1, #9
    9a98:	4689      	mov	r9, r1
    9a9a:	44ca      	add	sl, r9
    9a9c:	4651      	mov	r1, sl
    9a9e:	9103      	str	r1, [sp, #12]
    9aa0:	0c29      	lsrs	r1, r5, #16
    9aa2:	9104      	str	r1, [sp, #16]
    9aa4:	4641      	mov	r1, r8
    9aa6:	0409      	lsls	r1, r1, #16
    9aa8:	042d      	lsls	r5, r5, #16
    9aaa:	0c09      	lsrs	r1, r1, #16
    9aac:	4688      	mov	r8, r1
    9aae:	0029      	movs	r1, r5
    9ab0:	0c25      	lsrs	r5, r4, #16
    9ab2:	0424      	lsls	r4, r4, #16
    9ab4:	4441      	add	r1, r8
    9ab6:	0c24      	lsrs	r4, r4, #16
    9ab8:	9105      	str	r1, [sp, #20]
    9aba:	0021      	movs	r1, r4
    9abc:	4341      	muls	r1, r0
    9abe:	4688      	mov	r8, r1
    9ac0:	0021      	movs	r1, r4
    9ac2:	4379      	muls	r1, r7
    9ac4:	468a      	mov	sl, r1
    9ac6:	4368      	muls	r0, r5
    9ac8:	4641      	mov	r1, r8
    9aca:	4450      	add	r0, sl
    9acc:	4681      	mov	r9, r0
    9ace:	0c08      	lsrs	r0, r1, #16
    9ad0:	4448      	add	r0, r9
    9ad2:	436f      	muls	r7, r5
    9ad4:	4582      	cmp	sl, r0
    9ad6:	d903      	bls.n	9ae0 <__aeabi_dmul+0x278>
    9ad8:	2180      	movs	r1, #128	; 0x80
    9ada:	0249      	lsls	r1, r1, #9
    9adc:	4689      	mov	r9, r1
    9ade:	444f      	add	r7, r9
    9ae0:	0c01      	lsrs	r1, r0, #16
    9ae2:	4689      	mov	r9, r1
    9ae4:	0039      	movs	r1, r7
    9ae6:	4449      	add	r1, r9
    9ae8:	9102      	str	r1, [sp, #8]
    9aea:	4641      	mov	r1, r8
    9aec:	040f      	lsls	r7, r1, #16
    9aee:	9904      	ldr	r1, [sp, #16]
    9af0:	0c3f      	lsrs	r7, r7, #16
    9af2:	4688      	mov	r8, r1
    9af4:	0400      	lsls	r0, r0, #16
    9af6:	19c0      	adds	r0, r0, r7
    9af8:	4480      	add	r8, r0
    9afa:	4641      	mov	r1, r8
    9afc:	9104      	str	r1, [sp, #16]
    9afe:	4659      	mov	r1, fp
    9b00:	0c0f      	lsrs	r7, r1, #16
    9b02:	0409      	lsls	r1, r1, #16
    9b04:	0c09      	lsrs	r1, r1, #16
    9b06:	4688      	mov	r8, r1
    9b08:	4359      	muls	r1, r3
    9b0a:	468a      	mov	sl, r1
    9b0c:	0039      	movs	r1, r7
    9b0e:	4351      	muls	r1, r2
    9b10:	4689      	mov	r9, r1
    9b12:	4641      	mov	r1, r8
    9b14:	434a      	muls	r2, r1
    9b16:	4651      	mov	r1, sl
    9b18:	0c09      	lsrs	r1, r1, #16
    9b1a:	468b      	mov	fp, r1
    9b1c:	437b      	muls	r3, r7
    9b1e:	18d2      	adds	r2, r2, r3
    9b20:	445a      	add	r2, fp
    9b22:	4293      	cmp	r3, r2
    9b24:	d903      	bls.n	9b2e <__aeabi_dmul+0x2c6>
    9b26:	2380      	movs	r3, #128	; 0x80
    9b28:	025b      	lsls	r3, r3, #9
    9b2a:	469b      	mov	fp, r3
    9b2c:	44d9      	add	r9, fp
    9b2e:	4651      	mov	r1, sl
    9b30:	0409      	lsls	r1, r1, #16
    9b32:	0c09      	lsrs	r1, r1, #16
    9b34:	468a      	mov	sl, r1
    9b36:	4641      	mov	r1, r8
    9b38:	4361      	muls	r1, r4
    9b3a:	437c      	muls	r4, r7
    9b3c:	0c13      	lsrs	r3, r2, #16
    9b3e:	0412      	lsls	r2, r2, #16
    9b40:	444b      	add	r3, r9
    9b42:	4452      	add	r2, sl
    9b44:	46a1      	mov	r9, r4
    9b46:	468a      	mov	sl, r1
    9b48:	003c      	movs	r4, r7
    9b4a:	4641      	mov	r1, r8
    9b4c:	436c      	muls	r4, r5
    9b4e:	434d      	muls	r5, r1
    9b50:	4651      	mov	r1, sl
    9b52:	444d      	add	r5, r9
    9b54:	0c0f      	lsrs	r7, r1, #16
    9b56:	197d      	adds	r5, r7, r5
    9b58:	45a9      	cmp	r9, r5
    9b5a:	d903      	bls.n	9b64 <__aeabi_dmul+0x2fc>
    9b5c:	2180      	movs	r1, #128	; 0x80
    9b5e:	0249      	lsls	r1, r1, #9
    9b60:	4688      	mov	r8, r1
    9b62:	4444      	add	r4, r8
    9b64:	9f04      	ldr	r7, [sp, #16]
    9b66:	9903      	ldr	r1, [sp, #12]
    9b68:	46b8      	mov	r8, r7
    9b6a:	4441      	add	r1, r8
    9b6c:	468b      	mov	fp, r1
    9b6e:	4583      	cmp	fp, r0
    9b70:	4180      	sbcs	r0, r0
    9b72:	4241      	negs	r1, r0
    9b74:	4688      	mov	r8, r1
    9b76:	4651      	mov	r1, sl
    9b78:	0408      	lsls	r0, r1, #16
    9b7a:	042f      	lsls	r7, r5, #16
    9b7c:	0c00      	lsrs	r0, r0, #16
    9b7e:	183f      	adds	r7, r7, r0
    9b80:	4658      	mov	r0, fp
    9b82:	9902      	ldr	r1, [sp, #8]
    9b84:	1810      	adds	r0, r2, r0
    9b86:	4689      	mov	r9, r1
    9b88:	4290      	cmp	r0, r2
    9b8a:	4192      	sbcs	r2, r2
    9b8c:	444f      	add	r7, r9
    9b8e:	46ba      	mov	sl, r7
    9b90:	4252      	negs	r2, r2
    9b92:	4699      	mov	r9, r3
    9b94:	4693      	mov	fp, r2
    9b96:	44c2      	add	sl, r8
    9b98:	44d1      	add	r9, sl
    9b9a:	44cb      	add	fp, r9
    9b9c:	428f      	cmp	r7, r1
    9b9e:	41bf      	sbcs	r7, r7
    9ba0:	45c2      	cmp	sl, r8
    9ba2:	4189      	sbcs	r1, r1
    9ba4:	4599      	cmp	r9, r3
    9ba6:	419b      	sbcs	r3, r3
    9ba8:	4593      	cmp	fp, r2
    9baa:	4192      	sbcs	r2, r2
    9bac:	427f      	negs	r7, r7
    9bae:	4249      	negs	r1, r1
    9bb0:	0c2d      	lsrs	r5, r5, #16
    9bb2:	4252      	negs	r2, r2
    9bb4:	430f      	orrs	r7, r1
    9bb6:	425b      	negs	r3, r3
    9bb8:	4313      	orrs	r3, r2
    9bba:	197f      	adds	r7, r7, r5
    9bbc:	18ff      	adds	r7, r7, r3
    9bbe:	465b      	mov	r3, fp
    9bc0:	193c      	adds	r4, r7, r4
    9bc2:	0ddb      	lsrs	r3, r3, #23
    9bc4:	9a05      	ldr	r2, [sp, #20]
    9bc6:	0264      	lsls	r4, r4, #9
    9bc8:	431c      	orrs	r4, r3
    9bca:	0243      	lsls	r3, r0, #9
    9bcc:	4313      	orrs	r3, r2
    9bce:	1e5d      	subs	r5, r3, #1
    9bd0:	41ab      	sbcs	r3, r5
    9bd2:	465a      	mov	r2, fp
    9bd4:	0dc0      	lsrs	r0, r0, #23
    9bd6:	4303      	orrs	r3, r0
    9bd8:	0252      	lsls	r2, r2, #9
    9bda:	4313      	orrs	r3, r2
    9bdc:	01e2      	lsls	r2, r4, #7
    9bde:	d556      	bpl.n	9c8e <__aeabi_dmul+0x426>
    9be0:	2001      	movs	r0, #1
    9be2:	085a      	lsrs	r2, r3, #1
    9be4:	4003      	ands	r3, r0
    9be6:	4313      	orrs	r3, r2
    9be8:	07e2      	lsls	r2, r4, #31
    9bea:	4313      	orrs	r3, r2
    9bec:	0864      	lsrs	r4, r4, #1
    9bee:	485a      	ldr	r0, [pc, #360]	; (9d58 <__aeabi_dmul+0x4f0>)
    9bf0:	4460      	add	r0, ip
    9bf2:	2800      	cmp	r0, #0
    9bf4:	dd4d      	ble.n	9c92 <__aeabi_dmul+0x42a>
    9bf6:	075a      	lsls	r2, r3, #29
    9bf8:	d009      	beq.n	9c0e <__aeabi_dmul+0x3a6>
    9bfa:	220f      	movs	r2, #15
    9bfc:	401a      	ands	r2, r3
    9bfe:	2a04      	cmp	r2, #4
    9c00:	d005      	beq.n	9c0e <__aeabi_dmul+0x3a6>
    9c02:	1d1a      	adds	r2, r3, #4
    9c04:	429a      	cmp	r2, r3
    9c06:	419b      	sbcs	r3, r3
    9c08:	425b      	negs	r3, r3
    9c0a:	18e4      	adds	r4, r4, r3
    9c0c:	0013      	movs	r3, r2
    9c0e:	01e2      	lsls	r2, r4, #7
    9c10:	d504      	bpl.n	9c1c <__aeabi_dmul+0x3b4>
    9c12:	2080      	movs	r0, #128	; 0x80
    9c14:	4a51      	ldr	r2, [pc, #324]	; (9d5c <__aeabi_dmul+0x4f4>)
    9c16:	00c0      	lsls	r0, r0, #3
    9c18:	4014      	ands	r4, r2
    9c1a:	4460      	add	r0, ip
    9c1c:	4a50      	ldr	r2, [pc, #320]	; (9d60 <__aeabi_dmul+0x4f8>)
    9c1e:	4290      	cmp	r0, r2
    9c20:	dd00      	ble.n	9c24 <__aeabi_dmul+0x3bc>
    9c22:	e6e3      	b.n	99ec <__aeabi_dmul+0x184>
    9c24:	2501      	movs	r5, #1
    9c26:	08db      	lsrs	r3, r3, #3
    9c28:	0762      	lsls	r2, r4, #29
    9c2a:	431a      	orrs	r2, r3
    9c2c:	0264      	lsls	r4, r4, #9
    9c2e:	9b01      	ldr	r3, [sp, #4]
    9c30:	4691      	mov	r9, r2
    9c32:	0b22      	lsrs	r2, r4, #12
    9c34:	0544      	lsls	r4, r0, #21
    9c36:	0d64      	lsrs	r4, r4, #21
    9c38:	401d      	ands	r5, r3
    9c3a:	e67c      	b.n	9936 <__aeabi_dmul+0xce>
    9c3c:	2280      	movs	r2, #128	; 0x80
    9c3e:	4659      	mov	r1, fp
    9c40:	0312      	lsls	r2, r2, #12
    9c42:	4211      	tst	r1, r2
    9c44:	d008      	beq.n	9c58 <__aeabi_dmul+0x3f0>
    9c46:	4214      	tst	r4, r2
    9c48:	d106      	bne.n	9c58 <__aeabi_dmul+0x3f0>
    9c4a:	4322      	orrs	r2, r4
    9c4c:	0312      	lsls	r2, r2, #12
    9c4e:	0b12      	lsrs	r2, r2, #12
    9c50:	4645      	mov	r5, r8
    9c52:	4699      	mov	r9, r3
    9c54:	4c43      	ldr	r4, [pc, #268]	; (9d64 <__aeabi_dmul+0x4fc>)
    9c56:	e66e      	b.n	9936 <__aeabi_dmul+0xce>
    9c58:	465b      	mov	r3, fp
    9c5a:	431a      	orrs	r2, r3
    9c5c:	0312      	lsls	r2, r2, #12
    9c5e:	0b12      	lsrs	r2, r2, #12
    9c60:	4c40      	ldr	r4, [pc, #256]	; (9d64 <__aeabi_dmul+0x4fc>)
    9c62:	e668      	b.n	9936 <__aeabi_dmul+0xce>
    9c64:	0003      	movs	r3, r0
    9c66:	4654      	mov	r4, sl
    9c68:	3b28      	subs	r3, #40	; 0x28
    9c6a:	409c      	lsls	r4, r3
    9c6c:	2300      	movs	r3, #0
    9c6e:	e6b9      	b.n	99e4 <__aeabi_dmul+0x17c>
    9c70:	f7ff f964 	bl	8f3c <__clzsi2>
    9c74:	3020      	adds	r0, #32
    9c76:	e6a6      	b.n	99c6 <__aeabi_dmul+0x15e>
    9c78:	0003      	movs	r3, r0
    9c7a:	3b28      	subs	r3, #40	; 0x28
    9c7c:	409f      	lsls	r7, r3
    9c7e:	2300      	movs	r3, #0
    9c80:	46bb      	mov	fp, r7
    9c82:	4699      	mov	r9, r3
    9c84:	e68a      	b.n	999c <__aeabi_dmul+0x134>
    9c86:	f7ff f959 	bl	8f3c <__clzsi2>
    9c8a:	3020      	adds	r0, #32
    9c8c:	e674      	b.n	9978 <__aeabi_dmul+0x110>
    9c8e:	46b4      	mov	ip, r6
    9c90:	e7ad      	b.n	9bee <__aeabi_dmul+0x386>
    9c92:	2501      	movs	r5, #1
    9c94:	1a2a      	subs	r2, r5, r0
    9c96:	2a38      	cmp	r2, #56	; 0x38
    9c98:	dd06      	ble.n	9ca8 <__aeabi_dmul+0x440>
    9c9a:	9b01      	ldr	r3, [sp, #4]
    9c9c:	2400      	movs	r4, #0
    9c9e:	401d      	ands	r5, r3
    9ca0:	2300      	movs	r3, #0
    9ca2:	2200      	movs	r2, #0
    9ca4:	4699      	mov	r9, r3
    9ca6:	e646      	b.n	9936 <__aeabi_dmul+0xce>
    9ca8:	2a1f      	cmp	r2, #31
    9caa:	dc21      	bgt.n	9cf0 <__aeabi_dmul+0x488>
    9cac:	2520      	movs	r5, #32
    9cae:	0020      	movs	r0, r4
    9cb0:	1aad      	subs	r5, r5, r2
    9cb2:	001e      	movs	r6, r3
    9cb4:	40ab      	lsls	r3, r5
    9cb6:	40a8      	lsls	r0, r5
    9cb8:	40d6      	lsrs	r6, r2
    9cba:	1e5d      	subs	r5, r3, #1
    9cbc:	41ab      	sbcs	r3, r5
    9cbe:	4330      	orrs	r0, r6
    9cc0:	4318      	orrs	r0, r3
    9cc2:	40d4      	lsrs	r4, r2
    9cc4:	0743      	lsls	r3, r0, #29
    9cc6:	d009      	beq.n	9cdc <__aeabi_dmul+0x474>
    9cc8:	230f      	movs	r3, #15
    9cca:	4003      	ands	r3, r0
    9ccc:	2b04      	cmp	r3, #4
    9cce:	d005      	beq.n	9cdc <__aeabi_dmul+0x474>
    9cd0:	0003      	movs	r3, r0
    9cd2:	1d18      	adds	r0, r3, #4
    9cd4:	4298      	cmp	r0, r3
    9cd6:	419b      	sbcs	r3, r3
    9cd8:	425b      	negs	r3, r3
    9cda:	18e4      	adds	r4, r4, r3
    9cdc:	0223      	lsls	r3, r4, #8
    9cde:	d521      	bpl.n	9d24 <__aeabi_dmul+0x4bc>
    9ce0:	2501      	movs	r5, #1
    9ce2:	9b01      	ldr	r3, [sp, #4]
    9ce4:	2401      	movs	r4, #1
    9ce6:	401d      	ands	r5, r3
    9ce8:	2300      	movs	r3, #0
    9cea:	2200      	movs	r2, #0
    9cec:	4699      	mov	r9, r3
    9cee:	e622      	b.n	9936 <__aeabi_dmul+0xce>
    9cf0:	251f      	movs	r5, #31
    9cf2:	0021      	movs	r1, r4
    9cf4:	426d      	negs	r5, r5
    9cf6:	1a28      	subs	r0, r5, r0
    9cf8:	40c1      	lsrs	r1, r0
    9cfa:	0008      	movs	r0, r1
    9cfc:	2a20      	cmp	r2, #32
    9cfe:	d01d      	beq.n	9d3c <__aeabi_dmul+0x4d4>
    9d00:	355f      	adds	r5, #95	; 0x5f
    9d02:	1aaa      	subs	r2, r5, r2
    9d04:	4094      	lsls	r4, r2
    9d06:	4323      	orrs	r3, r4
    9d08:	1e5c      	subs	r4, r3, #1
    9d0a:	41a3      	sbcs	r3, r4
    9d0c:	2507      	movs	r5, #7
    9d0e:	4303      	orrs	r3, r0
    9d10:	401d      	ands	r5, r3
    9d12:	2200      	movs	r2, #0
    9d14:	2d00      	cmp	r5, #0
    9d16:	d009      	beq.n	9d2c <__aeabi_dmul+0x4c4>
    9d18:	220f      	movs	r2, #15
    9d1a:	2400      	movs	r4, #0
    9d1c:	401a      	ands	r2, r3
    9d1e:	0018      	movs	r0, r3
    9d20:	2a04      	cmp	r2, #4
    9d22:	d1d6      	bne.n	9cd2 <__aeabi_dmul+0x46a>
    9d24:	0003      	movs	r3, r0
    9d26:	0765      	lsls	r5, r4, #29
    9d28:	0264      	lsls	r4, r4, #9
    9d2a:	0b22      	lsrs	r2, r4, #12
    9d2c:	08db      	lsrs	r3, r3, #3
    9d2e:	432b      	orrs	r3, r5
    9d30:	2501      	movs	r5, #1
    9d32:	4699      	mov	r9, r3
    9d34:	9b01      	ldr	r3, [sp, #4]
    9d36:	2400      	movs	r4, #0
    9d38:	401d      	ands	r5, r3
    9d3a:	e5fc      	b.n	9936 <__aeabi_dmul+0xce>
    9d3c:	2400      	movs	r4, #0
    9d3e:	e7e2      	b.n	9d06 <__aeabi_dmul+0x49e>
    9d40:	2280      	movs	r2, #128	; 0x80
    9d42:	2501      	movs	r5, #1
    9d44:	0312      	lsls	r2, r2, #12
    9d46:	4322      	orrs	r2, r4
    9d48:	9901      	ldr	r1, [sp, #4]
    9d4a:	0312      	lsls	r2, r2, #12
    9d4c:	0b12      	lsrs	r2, r2, #12
    9d4e:	400d      	ands	r5, r1
    9d50:	4699      	mov	r9, r3
    9d52:	4c04      	ldr	r4, [pc, #16]	; (9d64 <__aeabi_dmul+0x4fc>)
    9d54:	e5ef      	b.n	9936 <__aeabi_dmul+0xce>
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	000003ff 	.word	0x000003ff
    9d5c:	feffffff 	.word	0xfeffffff
    9d60:	000007fe 	.word	0x000007fe
    9d64:	000007ff 	.word	0x000007ff

00009d68 <__aeabi_dsub>:
    9d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d6a:	4646      	mov	r6, r8
    9d6c:	46d6      	mov	lr, sl
    9d6e:	464f      	mov	r7, r9
    9d70:	030c      	lsls	r4, r1, #12
    9d72:	b5c0      	push	{r6, r7, lr}
    9d74:	0fcd      	lsrs	r5, r1, #31
    9d76:	004e      	lsls	r6, r1, #1
    9d78:	0a61      	lsrs	r1, r4, #9
    9d7a:	0f44      	lsrs	r4, r0, #29
    9d7c:	430c      	orrs	r4, r1
    9d7e:	00c1      	lsls	r1, r0, #3
    9d80:	0058      	lsls	r0, r3, #1
    9d82:	0d40      	lsrs	r0, r0, #21
    9d84:	4684      	mov	ip, r0
    9d86:	468a      	mov	sl, r1
    9d88:	000f      	movs	r7, r1
    9d8a:	0319      	lsls	r1, r3, #12
    9d8c:	0f50      	lsrs	r0, r2, #29
    9d8e:	0a49      	lsrs	r1, r1, #9
    9d90:	4301      	orrs	r1, r0
    9d92:	48c6      	ldr	r0, [pc, #792]	; (a0ac <__aeabi_dsub+0x344>)
    9d94:	0d76      	lsrs	r6, r6, #21
    9d96:	46a8      	mov	r8, r5
    9d98:	0fdb      	lsrs	r3, r3, #31
    9d9a:	00d2      	lsls	r2, r2, #3
    9d9c:	4584      	cmp	ip, r0
    9d9e:	d100      	bne.n	9da2 <__aeabi_dsub+0x3a>
    9da0:	e0d8      	b.n	9f54 <__aeabi_dsub+0x1ec>
    9da2:	2001      	movs	r0, #1
    9da4:	4043      	eors	r3, r0
    9da6:	42ab      	cmp	r3, r5
    9da8:	d100      	bne.n	9dac <__aeabi_dsub+0x44>
    9daa:	e0a6      	b.n	9efa <__aeabi_dsub+0x192>
    9dac:	4660      	mov	r0, ip
    9dae:	1a35      	subs	r5, r6, r0
    9db0:	2d00      	cmp	r5, #0
    9db2:	dc00      	bgt.n	9db6 <__aeabi_dsub+0x4e>
    9db4:	e105      	b.n	9fc2 <__aeabi_dsub+0x25a>
    9db6:	2800      	cmp	r0, #0
    9db8:	d110      	bne.n	9ddc <__aeabi_dsub+0x74>
    9dba:	000b      	movs	r3, r1
    9dbc:	4313      	orrs	r3, r2
    9dbe:	d100      	bne.n	9dc2 <__aeabi_dsub+0x5a>
    9dc0:	e0d7      	b.n	9f72 <__aeabi_dsub+0x20a>
    9dc2:	1e6b      	subs	r3, r5, #1
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d000      	beq.n	9dca <__aeabi_dsub+0x62>
    9dc8:	e14b      	b.n	a062 <__aeabi_dsub+0x2fa>
    9dca:	4653      	mov	r3, sl
    9dcc:	1a9f      	subs	r7, r3, r2
    9dce:	45ba      	cmp	sl, r7
    9dd0:	4180      	sbcs	r0, r0
    9dd2:	1a64      	subs	r4, r4, r1
    9dd4:	4240      	negs	r0, r0
    9dd6:	1a24      	subs	r4, r4, r0
    9dd8:	2601      	movs	r6, #1
    9dda:	e01e      	b.n	9e1a <__aeabi_dsub+0xb2>
    9ddc:	4bb3      	ldr	r3, [pc, #716]	; (a0ac <__aeabi_dsub+0x344>)
    9dde:	429e      	cmp	r6, r3
    9de0:	d048      	beq.n	9e74 <__aeabi_dsub+0x10c>
    9de2:	2380      	movs	r3, #128	; 0x80
    9de4:	041b      	lsls	r3, r3, #16
    9de6:	4319      	orrs	r1, r3
    9de8:	2d38      	cmp	r5, #56	; 0x38
    9dea:	dd00      	ble.n	9dee <__aeabi_dsub+0x86>
    9dec:	e119      	b.n	a022 <__aeabi_dsub+0x2ba>
    9dee:	2d1f      	cmp	r5, #31
    9df0:	dd00      	ble.n	9df4 <__aeabi_dsub+0x8c>
    9df2:	e14c      	b.n	a08e <__aeabi_dsub+0x326>
    9df4:	2320      	movs	r3, #32
    9df6:	000f      	movs	r7, r1
    9df8:	1b5b      	subs	r3, r3, r5
    9dfa:	0010      	movs	r0, r2
    9dfc:	409a      	lsls	r2, r3
    9dfe:	409f      	lsls	r7, r3
    9e00:	40e8      	lsrs	r0, r5
    9e02:	1e53      	subs	r3, r2, #1
    9e04:	419a      	sbcs	r2, r3
    9e06:	40e9      	lsrs	r1, r5
    9e08:	4307      	orrs	r7, r0
    9e0a:	4317      	orrs	r7, r2
    9e0c:	4653      	mov	r3, sl
    9e0e:	1bdf      	subs	r7, r3, r7
    9e10:	1a61      	subs	r1, r4, r1
    9e12:	45ba      	cmp	sl, r7
    9e14:	41a4      	sbcs	r4, r4
    9e16:	4264      	negs	r4, r4
    9e18:	1b0c      	subs	r4, r1, r4
    9e1a:	0223      	lsls	r3, r4, #8
    9e1c:	d400      	bmi.n	9e20 <__aeabi_dsub+0xb8>
    9e1e:	e0c5      	b.n	9fac <__aeabi_dsub+0x244>
    9e20:	0264      	lsls	r4, r4, #9
    9e22:	0a65      	lsrs	r5, r4, #9
    9e24:	2d00      	cmp	r5, #0
    9e26:	d100      	bne.n	9e2a <__aeabi_dsub+0xc2>
    9e28:	e0f6      	b.n	a018 <__aeabi_dsub+0x2b0>
    9e2a:	0028      	movs	r0, r5
    9e2c:	f7ff f886 	bl	8f3c <__clzsi2>
    9e30:	0003      	movs	r3, r0
    9e32:	3b08      	subs	r3, #8
    9e34:	2b1f      	cmp	r3, #31
    9e36:	dd00      	ble.n	9e3a <__aeabi_dsub+0xd2>
    9e38:	e0e9      	b.n	a00e <__aeabi_dsub+0x2a6>
    9e3a:	2220      	movs	r2, #32
    9e3c:	003c      	movs	r4, r7
    9e3e:	1ad2      	subs	r2, r2, r3
    9e40:	409d      	lsls	r5, r3
    9e42:	40d4      	lsrs	r4, r2
    9e44:	409f      	lsls	r7, r3
    9e46:	4325      	orrs	r5, r4
    9e48:	429e      	cmp	r6, r3
    9e4a:	dd00      	ble.n	9e4e <__aeabi_dsub+0xe6>
    9e4c:	e0db      	b.n	a006 <__aeabi_dsub+0x29e>
    9e4e:	1b9e      	subs	r6, r3, r6
    9e50:	1c73      	adds	r3, r6, #1
    9e52:	2b1f      	cmp	r3, #31
    9e54:	dd00      	ble.n	9e58 <__aeabi_dsub+0xf0>
    9e56:	e10a      	b.n	a06e <__aeabi_dsub+0x306>
    9e58:	2220      	movs	r2, #32
    9e5a:	0038      	movs	r0, r7
    9e5c:	1ad2      	subs	r2, r2, r3
    9e5e:	0029      	movs	r1, r5
    9e60:	4097      	lsls	r7, r2
    9e62:	002c      	movs	r4, r5
    9e64:	4091      	lsls	r1, r2
    9e66:	40d8      	lsrs	r0, r3
    9e68:	1e7a      	subs	r2, r7, #1
    9e6a:	4197      	sbcs	r7, r2
    9e6c:	40dc      	lsrs	r4, r3
    9e6e:	2600      	movs	r6, #0
    9e70:	4301      	orrs	r1, r0
    9e72:	430f      	orrs	r7, r1
    9e74:	077b      	lsls	r3, r7, #29
    9e76:	d009      	beq.n	9e8c <__aeabi_dsub+0x124>
    9e78:	230f      	movs	r3, #15
    9e7a:	403b      	ands	r3, r7
    9e7c:	2b04      	cmp	r3, #4
    9e7e:	d005      	beq.n	9e8c <__aeabi_dsub+0x124>
    9e80:	1d3b      	adds	r3, r7, #4
    9e82:	42bb      	cmp	r3, r7
    9e84:	41bf      	sbcs	r7, r7
    9e86:	427f      	negs	r7, r7
    9e88:	19e4      	adds	r4, r4, r7
    9e8a:	001f      	movs	r7, r3
    9e8c:	0223      	lsls	r3, r4, #8
    9e8e:	d525      	bpl.n	9edc <__aeabi_dsub+0x174>
    9e90:	4b86      	ldr	r3, [pc, #536]	; (a0ac <__aeabi_dsub+0x344>)
    9e92:	3601      	adds	r6, #1
    9e94:	429e      	cmp	r6, r3
    9e96:	d100      	bne.n	9e9a <__aeabi_dsub+0x132>
    9e98:	e0af      	b.n	9ffa <__aeabi_dsub+0x292>
    9e9a:	4b85      	ldr	r3, [pc, #532]	; (a0b0 <__aeabi_dsub+0x348>)
    9e9c:	2501      	movs	r5, #1
    9e9e:	401c      	ands	r4, r3
    9ea0:	4643      	mov	r3, r8
    9ea2:	0762      	lsls	r2, r4, #29
    9ea4:	08ff      	lsrs	r7, r7, #3
    9ea6:	0264      	lsls	r4, r4, #9
    9ea8:	0576      	lsls	r6, r6, #21
    9eaa:	4317      	orrs	r7, r2
    9eac:	0b24      	lsrs	r4, r4, #12
    9eae:	0d76      	lsrs	r6, r6, #21
    9eb0:	401d      	ands	r5, r3
    9eb2:	2100      	movs	r1, #0
    9eb4:	0324      	lsls	r4, r4, #12
    9eb6:	0b23      	lsrs	r3, r4, #12
    9eb8:	0d0c      	lsrs	r4, r1, #20
    9eba:	4a7e      	ldr	r2, [pc, #504]	; (a0b4 <__aeabi_dsub+0x34c>)
    9ebc:	0524      	lsls	r4, r4, #20
    9ebe:	431c      	orrs	r4, r3
    9ec0:	4014      	ands	r4, r2
    9ec2:	0533      	lsls	r3, r6, #20
    9ec4:	4323      	orrs	r3, r4
    9ec6:	005b      	lsls	r3, r3, #1
    9ec8:	07ed      	lsls	r5, r5, #31
    9eca:	085b      	lsrs	r3, r3, #1
    9ecc:	432b      	orrs	r3, r5
    9ece:	0038      	movs	r0, r7
    9ed0:	0019      	movs	r1, r3
    9ed2:	bc1c      	pop	{r2, r3, r4}
    9ed4:	4690      	mov	r8, r2
    9ed6:	4699      	mov	r9, r3
    9ed8:	46a2      	mov	sl, r4
    9eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9edc:	2501      	movs	r5, #1
    9ede:	4643      	mov	r3, r8
    9ee0:	0762      	lsls	r2, r4, #29
    9ee2:	08ff      	lsrs	r7, r7, #3
    9ee4:	4317      	orrs	r7, r2
    9ee6:	08e4      	lsrs	r4, r4, #3
    9ee8:	401d      	ands	r5, r3
    9eea:	4b70      	ldr	r3, [pc, #448]	; (a0ac <__aeabi_dsub+0x344>)
    9eec:	429e      	cmp	r6, r3
    9eee:	d036      	beq.n	9f5e <__aeabi_dsub+0x1f6>
    9ef0:	0324      	lsls	r4, r4, #12
    9ef2:	0576      	lsls	r6, r6, #21
    9ef4:	0b24      	lsrs	r4, r4, #12
    9ef6:	0d76      	lsrs	r6, r6, #21
    9ef8:	e7db      	b.n	9eb2 <__aeabi_dsub+0x14a>
    9efa:	4663      	mov	r3, ip
    9efc:	1af3      	subs	r3, r6, r3
    9efe:	2b00      	cmp	r3, #0
    9f00:	dc00      	bgt.n	9f04 <__aeabi_dsub+0x19c>
    9f02:	e094      	b.n	a02e <__aeabi_dsub+0x2c6>
    9f04:	4660      	mov	r0, ip
    9f06:	2800      	cmp	r0, #0
    9f08:	d035      	beq.n	9f76 <__aeabi_dsub+0x20e>
    9f0a:	4868      	ldr	r0, [pc, #416]	; (a0ac <__aeabi_dsub+0x344>)
    9f0c:	4286      	cmp	r6, r0
    9f0e:	d0b1      	beq.n	9e74 <__aeabi_dsub+0x10c>
    9f10:	2780      	movs	r7, #128	; 0x80
    9f12:	043f      	lsls	r7, r7, #16
    9f14:	4339      	orrs	r1, r7
    9f16:	2b38      	cmp	r3, #56	; 0x38
    9f18:	dc00      	bgt.n	9f1c <__aeabi_dsub+0x1b4>
    9f1a:	e0fd      	b.n	a118 <__aeabi_dsub+0x3b0>
    9f1c:	430a      	orrs	r2, r1
    9f1e:	0017      	movs	r7, r2
    9f20:	2100      	movs	r1, #0
    9f22:	1e7a      	subs	r2, r7, #1
    9f24:	4197      	sbcs	r7, r2
    9f26:	4457      	add	r7, sl
    9f28:	4557      	cmp	r7, sl
    9f2a:	4180      	sbcs	r0, r0
    9f2c:	1909      	adds	r1, r1, r4
    9f2e:	4244      	negs	r4, r0
    9f30:	190c      	adds	r4, r1, r4
    9f32:	0223      	lsls	r3, r4, #8
    9f34:	d53a      	bpl.n	9fac <__aeabi_dsub+0x244>
    9f36:	4b5d      	ldr	r3, [pc, #372]	; (a0ac <__aeabi_dsub+0x344>)
    9f38:	3601      	adds	r6, #1
    9f3a:	429e      	cmp	r6, r3
    9f3c:	d100      	bne.n	9f40 <__aeabi_dsub+0x1d8>
    9f3e:	e14b      	b.n	a1d8 <__aeabi_dsub+0x470>
    9f40:	2201      	movs	r2, #1
    9f42:	4b5b      	ldr	r3, [pc, #364]	; (a0b0 <__aeabi_dsub+0x348>)
    9f44:	401c      	ands	r4, r3
    9f46:	087b      	lsrs	r3, r7, #1
    9f48:	4017      	ands	r7, r2
    9f4a:	431f      	orrs	r7, r3
    9f4c:	07e2      	lsls	r2, r4, #31
    9f4e:	4317      	orrs	r7, r2
    9f50:	0864      	lsrs	r4, r4, #1
    9f52:	e78f      	b.n	9e74 <__aeabi_dsub+0x10c>
    9f54:	0008      	movs	r0, r1
    9f56:	4310      	orrs	r0, r2
    9f58:	d000      	beq.n	9f5c <__aeabi_dsub+0x1f4>
    9f5a:	e724      	b.n	9da6 <__aeabi_dsub+0x3e>
    9f5c:	e721      	b.n	9da2 <__aeabi_dsub+0x3a>
    9f5e:	0023      	movs	r3, r4
    9f60:	433b      	orrs	r3, r7
    9f62:	d100      	bne.n	9f66 <__aeabi_dsub+0x1fe>
    9f64:	e1b9      	b.n	a2da <__aeabi_dsub+0x572>
    9f66:	2280      	movs	r2, #128	; 0x80
    9f68:	0312      	lsls	r2, r2, #12
    9f6a:	4314      	orrs	r4, r2
    9f6c:	0324      	lsls	r4, r4, #12
    9f6e:	0b24      	lsrs	r4, r4, #12
    9f70:	e79f      	b.n	9eb2 <__aeabi_dsub+0x14a>
    9f72:	002e      	movs	r6, r5
    9f74:	e77e      	b.n	9e74 <__aeabi_dsub+0x10c>
    9f76:	0008      	movs	r0, r1
    9f78:	4310      	orrs	r0, r2
    9f7a:	d100      	bne.n	9f7e <__aeabi_dsub+0x216>
    9f7c:	e0ca      	b.n	a114 <__aeabi_dsub+0x3ac>
    9f7e:	1e58      	subs	r0, r3, #1
    9f80:	4684      	mov	ip, r0
    9f82:	2800      	cmp	r0, #0
    9f84:	d000      	beq.n	9f88 <__aeabi_dsub+0x220>
    9f86:	e0e7      	b.n	a158 <__aeabi_dsub+0x3f0>
    9f88:	4452      	add	r2, sl
    9f8a:	4552      	cmp	r2, sl
    9f8c:	4180      	sbcs	r0, r0
    9f8e:	1864      	adds	r4, r4, r1
    9f90:	4240      	negs	r0, r0
    9f92:	1824      	adds	r4, r4, r0
    9f94:	0017      	movs	r7, r2
    9f96:	2601      	movs	r6, #1
    9f98:	0223      	lsls	r3, r4, #8
    9f9a:	d507      	bpl.n	9fac <__aeabi_dsub+0x244>
    9f9c:	2602      	movs	r6, #2
    9f9e:	e7cf      	b.n	9f40 <__aeabi_dsub+0x1d8>
    9fa0:	4664      	mov	r4, ip
    9fa2:	432c      	orrs	r4, r5
    9fa4:	d100      	bne.n	9fa8 <__aeabi_dsub+0x240>
    9fa6:	e1b3      	b.n	a310 <__aeabi_dsub+0x5a8>
    9fa8:	002c      	movs	r4, r5
    9faa:	4667      	mov	r7, ip
    9fac:	077b      	lsls	r3, r7, #29
    9fae:	d000      	beq.n	9fb2 <__aeabi_dsub+0x24a>
    9fb0:	e762      	b.n	9e78 <__aeabi_dsub+0x110>
    9fb2:	0763      	lsls	r3, r4, #29
    9fb4:	08ff      	lsrs	r7, r7, #3
    9fb6:	431f      	orrs	r7, r3
    9fb8:	2501      	movs	r5, #1
    9fba:	4643      	mov	r3, r8
    9fbc:	08e4      	lsrs	r4, r4, #3
    9fbe:	401d      	ands	r5, r3
    9fc0:	e793      	b.n	9eea <__aeabi_dsub+0x182>
    9fc2:	2d00      	cmp	r5, #0
    9fc4:	d178      	bne.n	a0b8 <__aeabi_dsub+0x350>
    9fc6:	1c75      	adds	r5, r6, #1
    9fc8:	056d      	lsls	r5, r5, #21
    9fca:	0d6d      	lsrs	r5, r5, #21
    9fcc:	2d01      	cmp	r5, #1
    9fce:	dc00      	bgt.n	9fd2 <__aeabi_dsub+0x26a>
    9fd0:	e0f2      	b.n	a1b8 <__aeabi_dsub+0x450>
    9fd2:	4650      	mov	r0, sl
    9fd4:	1a80      	subs	r0, r0, r2
    9fd6:	4582      	cmp	sl, r0
    9fd8:	41bf      	sbcs	r7, r7
    9fda:	1a65      	subs	r5, r4, r1
    9fdc:	427f      	negs	r7, r7
    9fde:	1bed      	subs	r5, r5, r7
    9fe0:	4684      	mov	ip, r0
    9fe2:	0228      	lsls	r0, r5, #8
    9fe4:	d400      	bmi.n	9fe8 <__aeabi_dsub+0x280>
    9fe6:	e08c      	b.n	a102 <__aeabi_dsub+0x39a>
    9fe8:	4650      	mov	r0, sl
    9fea:	1a17      	subs	r7, r2, r0
    9fec:	42ba      	cmp	r2, r7
    9fee:	4192      	sbcs	r2, r2
    9ff0:	1b0c      	subs	r4, r1, r4
    9ff2:	4255      	negs	r5, r2
    9ff4:	1b65      	subs	r5, r4, r5
    9ff6:	4698      	mov	r8, r3
    9ff8:	e714      	b.n	9e24 <__aeabi_dsub+0xbc>
    9ffa:	2501      	movs	r5, #1
    9ffc:	4643      	mov	r3, r8
    9ffe:	2400      	movs	r4, #0
    a000:	401d      	ands	r5, r3
    a002:	2700      	movs	r7, #0
    a004:	e755      	b.n	9eb2 <__aeabi_dsub+0x14a>
    a006:	4c2a      	ldr	r4, [pc, #168]	; (a0b0 <__aeabi_dsub+0x348>)
    a008:	1af6      	subs	r6, r6, r3
    a00a:	402c      	ands	r4, r5
    a00c:	e732      	b.n	9e74 <__aeabi_dsub+0x10c>
    a00e:	003d      	movs	r5, r7
    a010:	3828      	subs	r0, #40	; 0x28
    a012:	4085      	lsls	r5, r0
    a014:	2700      	movs	r7, #0
    a016:	e717      	b.n	9e48 <__aeabi_dsub+0xe0>
    a018:	0038      	movs	r0, r7
    a01a:	f7fe ff8f 	bl	8f3c <__clzsi2>
    a01e:	3020      	adds	r0, #32
    a020:	e706      	b.n	9e30 <__aeabi_dsub+0xc8>
    a022:	430a      	orrs	r2, r1
    a024:	0017      	movs	r7, r2
    a026:	2100      	movs	r1, #0
    a028:	1e7a      	subs	r2, r7, #1
    a02a:	4197      	sbcs	r7, r2
    a02c:	e6ee      	b.n	9e0c <__aeabi_dsub+0xa4>
    a02e:	2b00      	cmp	r3, #0
    a030:	d000      	beq.n	a034 <__aeabi_dsub+0x2cc>
    a032:	e0e5      	b.n	a200 <__aeabi_dsub+0x498>
    a034:	1c73      	adds	r3, r6, #1
    a036:	469c      	mov	ip, r3
    a038:	055b      	lsls	r3, r3, #21
    a03a:	0d5b      	lsrs	r3, r3, #21
    a03c:	2b01      	cmp	r3, #1
    a03e:	dc00      	bgt.n	a042 <__aeabi_dsub+0x2da>
    a040:	e09f      	b.n	a182 <__aeabi_dsub+0x41a>
    a042:	4b1a      	ldr	r3, [pc, #104]	; (a0ac <__aeabi_dsub+0x344>)
    a044:	459c      	cmp	ip, r3
    a046:	d100      	bne.n	a04a <__aeabi_dsub+0x2e2>
    a048:	e0c5      	b.n	a1d6 <__aeabi_dsub+0x46e>
    a04a:	4452      	add	r2, sl
    a04c:	4552      	cmp	r2, sl
    a04e:	4180      	sbcs	r0, r0
    a050:	1864      	adds	r4, r4, r1
    a052:	4240      	negs	r0, r0
    a054:	1824      	adds	r4, r4, r0
    a056:	07e7      	lsls	r7, r4, #31
    a058:	0852      	lsrs	r2, r2, #1
    a05a:	4317      	orrs	r7, r2
    a05c:	0864      	lsrs	r4, r4, #1
    a05e:	4666      	mov	r6, ip
    a060:	e708      	b.n	9e74 <__aeabi_dsub+0x10c>
    a062:	4812      	ldr	r0, [pc, #72]	; (a0ac <__aeabi_dsub+0x344>)
    a064:	4285      	cmp	r5, r0
    a066:	d100      	bne.n	a06a <__aeabi_dsub+0x302>
    a068:	e085      	b.n	a176 <__aeabi_dsub+0x40e>
    a06a:	001d      	movs	r5, r3
    a06c:	e6bc      	b.n	9de8 <__aeabi_dsub+0x80>
    a06e:	0029      	movs	r1, r5
    a070:	3e1f      	subs	r6, #31
    a072:	40f1      	lsrs	r1, r6
    a074:	2b20      	cmp	r3, #32
    a076:	d100      	bne.n	a07a <__aeabi_dsub+0x312>
    a078:	e07f      	b.n	a17a <__aeabi_dsub+0x412>
    a07a:	2240      	movs	r2, #64	; 0x40
    a07c:	1ad3      	subs	r3, r2, r3
    a07e:	409d      	lsls	r5, r3
    a080:	432f      	orrs	r7, r5
    a082:	1e7d      	subs	r5, r7, #1
    a084:	41af      	sbcs	r7, r5
    a086:	2400      	movs	r4, #0
    a088:	430f      	orrs	r7, r1
    a08a:	2600      	movs	r6, #0
    a08c:	e78e      	b.n	9fac <__aeabi_dsub+0x244>
    a08e:	002b      	movs	r3, r5
    a090:	000f      	movs	r7, r1
    a092:	3b20      	subs	r3, #32
    a094:	40df      	lsrs	r7, r3
    a096:	2d20      	cmp	r5, #32
    a098:	d071      	beq.n	a17e <__aeabi_dsub+0x416>
    a09a:	2340      	movs	r3, #64	; 0x40
    a09c:	1b5d      	subs	r5, r3, r5
    a09e:	40a9      	lsls	r1, r5
    a0a0:	430a      	orrs	r2, r1
    a0a2:	1e51      	subs	r1, r2, #1
    a0a4:	418a      	sbcs	r2, r1
    a0a6:	2100      	movs	r1, #0
    a0a8:	4317      	orrs	r7, r2
    a0aa:	e6af      	b.n	9e0c <__aeabi_dsub+0xa4>
    a0ac:	000007ff 	.word	0x000007ff
    a0b0:	ff7fffff 	.word	0xff7fffff
    a0b4:	800fffff 	.word	0x800fffff
    a0b8:	2e00      	cmp	r6, #0
    a0ba:	d03e      	beq.n	a13a <__aeabi_dsub+0x3d2>
    a0bc:	4eb3      	ldr	r6, [pc, #716]	; (a38c <__aeabi_dsub+0x624>)
    a0be:	45b4      	cmp	ip, r6
    a0c0:	d045      	beq.n	a14e <__aeabi_dsub+0x3e6>
    a0c2:	2680      	movs	r6, #128	; 0x80
    a0c4:	0436      	lsls	r6, r6, #16
    a0c6:	426d      	negs	r5, r5
    a0c8:	4334      	orrs	r4, r6
    a0ca:	2d38      	cmp	r5, #56	; 0x38
    a0cc:	dd00      	ble.n	a0d0 <__aeabi_dsub+0x368>
    a0ce:	e0a8      	b.n	a222 <__aeabi_dsub+0x4ba>
    a0d0:	2d1f      	cmp	r5, #31
    a0d2:	dd00      	ble.n	a0d6 <__aeabi_dsub+0x36e>
    a0d4:	e11f      	b.n	a316 <__aeabi_dsub+0x5ae>
    a0d6:	2620      	movs	r6, #32
    a0d8:	0027      	movs	r7, r4
    a0da:	4650      	mov	r0, sl
    a0dc:	1b76      	subs	r6, r6, r5
    a0de:	40b7      	lsls	r7, r6
    a0e0:	40e8      	lsrs	r0, r5
    a0e2:	4307      	orrs	r7, r0
    a0e4:	4650      	mov	r0, sl
    a0e6:	40b0      	lsls	r0, r6
    a0e8:	1e46      	subs	r6, r0, #1
    a0ea:	41b0      	sbcs	r0, r6
    a0ec:	40ec      	lsrs	r4, r5
    a0ee:	4338      	orrs	r0, r7
    a0f0:	1a17      	subs	r7, r2, r0
    a0f2:	42ba      	cmp	r2, r7
    a0f4:	4192      	sbcs	r2, r2
    a0f6:	1b0c      	subs	r4, r1, r4
    a0f8:	4252      	negs	r2, r2
    a0fa:	1aa4      	subs	r4, r4, r2
    a0fc:	4666      	mov	r6, ip
    a0fe:	4698      	mov	r8, r3
    a100:	e68b      	b.n	9e1a <__aeabi_dsub+0xb2>
    a102:	4664      	mov	r4, ip
    a104:	4667      	mov	r7, ip
    a106:	432c      	orrs	r4, r5
    a108:	d000      	beq.n	a10c <__aeabi_dsub+0x3a4>
    a10a:	e68b      	b.n	9e24 <__aeabi_dsub+0xbc>
    a10c:	2500      	movs	r5, #0
    a10e:	2600      	movs	r6, #0
    a110:	2700      	movs	r7, #0
    a112:	e6ea      	b.n	9eea <__aeabi_dsub+0x182>
    a114:	001e      	movs	r6, r3
    a116:	e6ad      	b.n	9e74 <__aeabi_dsub+0x10c>
    a118:	2b1f      	cmp	r3, #31
    a11a:	dc60      	bgt.n	a1de <__aeabi_dsub+0x476>
    a11c:	2720      	movs	r7, #32
    a11e:	1af8      	subs	r0, r7, r3
    a120:	000f      	movs	r7, r1
    a122:	4684      	mov	ip, r0
    a124:	4087      	lsls	r7, r0
    a126:	0010      	movs	r0, r2
    a128:	40d8      	lsrs	r0, r3
    a12a:	4307      	orrs	r7, r0
    a12c:	4660      	mov	r0, ip
    a12e:	4082      	lsls	r2, r0
    a130:	1e50      	subs	r0, r2, #1
    a132:	4182      	sbcs	r2, r0
    a134:	40d9      	lsrs	r1, r3
    a136:	4317      	orrs	r7, r2
    a138:	e6f5      	b.n	9f26 <__aeabi_dsub+0x1be>
    a13a:	0026      	movs	r6, r4
    a13c:	4650      	mov	r0, sl
    a13e:	4306      	orrs	r6, r0
    a140:	d005      	beq.n	a14e <__aeabi_dsub+0x3e6>
    a142:	43ed      	mvns	r5, r5
    a144:	2d00      	cmp	r5, #0
    a146:	d0d3      	beq.n	a0f0 <__aeabi_dsub+0x388>
    a148:	4e90      	ldr	r6, [pc, #576]	; (a38c <__aeabi_dsub+0x624>)
    a14a:	45b4      	cmp	ip, r6
    a14c:	d1bd      	bne.n	a0ca <__aeabi_dsub+0x362>
    a14e:	000c      	movs	r4, r1
    a150:	0017      	movs	r7, r2
    a152:	4666      	mov	r6, ip
    a154:	4698      	mov	r8, r3
    a156:	e68d      	b.n	9e74 <__aeabi_dsub+0x10c>
    a158:	488c      	ldr	r0, [pc, #560]	; (a38c <__aeabi_dsub+0x624>)
    a15a:	4283      	cmp	r3, r0
    a15c:	d00b      	beq.n	a176 <__aeabi_dsub+0x40e>
    a15e:	4663      	mov	r3, ip
    a160:	e6d9      	b.n	9f16 <__aeabi_dsub+0x1ae>
    a162:	2d00      	cmp	r5, #0
    a164:	d000      	beq.n	a168 <__aeabi_dsub+0x400>
    a166:	e096      	b.n	a296 <__aeabi_dsub+0x52e>
    a168:	0008      	movs	r0, r1
    a16a:	4310      	orrs	r0, r2
    a16c:	d100      	bne.n	a170 <__aeabi_dsub+0x408>
    a16e:	e0e2      	b.n	a336 <__aeabi_dsub+0x5ce>
    a170:	000c      	movs	r4, r1
    a172:	0017      	movs	r7, r2
    a174:	4698      	mov	r8, r3
    a176:	4e85      	ldr	r6, [pc, #532]	; (a38c <__aeabi_dsub+0x624>)
    a178:	e67c      	b.n	9e74 <__aeabi_dsub+0x10c>
    a17a:	2500      	movs	r5, #0
    a17c:	e780      	b.n	a080 <__aeabi_dsub+0x318>
    a17e:	2100      	movs	r1, #0
    a180:	e78e      	b.n	a0a0 <__aeabi_dsub+0x338>
    a182:	0023      	movs	r3, r4
    a184:	4650      	mov	r0, sl
    a186:	4303      	orrs	r3, r0
    a188:	2e00      	cmp	r6, #0
    a18a:	d000      	beq.n	a18e <__aeabi_dsub+0x426>
    a18c:	e0a8      	b.n	a2e0 <__aeabi_dsub+0x578>
    a18e:	2b00      	cmp	r3, #0
    a190:	d100      	bne.n	a194 <__aeabi_dsub+0x42c>
    a192:	e0de      	b.n	a352 <__aeabi_dsub+0x5ea>
    a194:	000b      	movs	r3, r1
    a196:	4313      	orrs	r3, r2
    a198:	d100      	bne.n	a19c <__aeabi_dsub+0x434>
    a19a:	e66b      	b.n	9e74 <__aeabi_dsub+0x10c>
    a19c:	4452      	add	r2, sl
    a19e:	4552      	cmp	r2, sl
    a1a0:	4180      	sbcs	r0, r0
    a1a2:	1864      	adds	r4, r4, r1
    a1a4:	4240      	negs	r0, r0
    a1a6:	1824      	adds	r4, r4, r0
    a1a8:	0017      	movs	r7, r2
    a1aa:	0223      	lsls	r3, r4, #8
    a1ac:	d400      	bmi.n	a1b0 <__aeabi_dsub+0x448>
    a1ae:	e6fd      	b.n	9fac <__aeabi_dsub+0x244>
    a1b0:	4b77      	ldr	r3, [pc, #476]	; (a390 <__aeabi_dsub+0x628>)
    a1b2:	4666      	mov	r6, ip
    a1b4:	401c      	ands	r4, r3
    a1b6:	e65d      	b.n	9e74 <__aeabi_dsub+0x10c>
    a1b8:	0025      	movs	r5, r4
    a1ba:	4650      	mov	r0, sl
    a1bc:	4305      	orrs	r5, r0
    a1be:	2e00      	cmp	r6, #0
    a1c0:	d1cf      	bne.n	a162 <__aeabi_dsub+0x3fa>
    a1c2:	2d00      	cmp	r5, #0
    a1c4:	d14f      	bne.n	a266 <__aeabi_dsub+0x4fe>
    a1c6:	000c      	movs	r4, r1
    a1c8:	4314      	orrs	r4, r2
    a1ca:	d100      	bne.n	a1ce <__aeabi_dsub+0x466>
    a1cc:	e0a0      	b.n	a310 <__aeabi_dsub+0x5a8>
    a1ce:	000c      	movs	r4, r1
    a1d0:	0017      	movs	r7, r2
    a1d2:	4698      	mov	r8, r3
    a1d4:	e64e      	b.n	9e74 <__aeabi_dsub+0x10c>
    a1d6:	4666      	mov	r6, ip
    a1d8:	2400      	movs	r4, #0
    a1da:	2700      	movs	r7, #0
    a1dc:	e685      	b.n	9eea <__aeabi_dsub+0x182>
    a1de:	001f      	movs	r7, r3
    a1e0:	0008      	movs	r0, r1
    a1e2:	3f20      	subs	r7, #32
    a1e4:	40f8      	lsrs	r0, r7
    a1e6:	0007      	movs	r7, r0
    a1e8:	2b20      	cmp	r3, #32
    a1ea:	d100      	bne.n	a1ee <__aeabi_dsub+0x486>
    a1ec:	e08e      	b.n	a30c <__aeabi_dsub+0x5a4>
    a1ee:	2040      	movs	r0, #64	; 0x40
    a1f0:	1ac3      	subs	r3, r0, r3
    a1f2:	4099      	lsls	r1, r3
    a1f4:	430a      	orrs	r2, r1
    a1f6:	1e51      	subs	r1, r2, #1
    a1f8:	418a      	sbcs	r2, r1
    a1fa:	2100      	movs	r1, #0
    a1fc:	4317      	orrs	r7, r2
    a1fe:	e692      	b.n	9f26 <__aeabi_dsub+0x1be>
    a200:	2e00      	cmp	r6, #0
    a202:	d114      	bne.n	a22e <__aeabi_dsub+0x4c6>
    a204:	0026      	movs	r6, r4
    a206:	4650      	mov	r0, sl
    a208:	4306      	orrs	r6, r0
    a20a:	d062      	beq.n	a2d2 <__aeabi_dsub+0x56a>
    a20c:	43db      	mvns	r3, r3
    a20e:	2b00      	cmp	r3, #0
    a210:	d15c      	bne.n	a2cc <__aeabi_dsub+0x564>
    a212:	1887      	adds	r7, r0, r2
    a214:	4297      	cmp	r7, r2
    a216:	4192      	sbcs	r2, r2
    a218:	1864      	adds	r4, r4, r1
    a21a:	4252      	negs	r2, r2
    a21c:	18a4      	adds	r4, r4, r2
    a21e:	4666      	mov	r6, ip
    a220:	e687      	b.n	9f32 <__aeabi_dsub+0x1ca>
    a222:	4650      	mov	r0, sl
    a224:	4320      	orrs	r0, r4
    a226:	1e44      	subs	r4, r0, #1
    a228:	41a0      	sbcs	r0, r4
    a22a:	2400      	movs	r4, #0
    a22c:	e760      	b.n	a0f0 <__aeabi_dsub+0x388>
    a22e:	4e57      	ldr	r6, [pc, #348]	; (a38c <__aeabi_dsub+0x624>)
    a230:	45b4      	cmp	ip, r6
    a232:	d04e      	beq.n	a2d2 <__aeabi_dsub+0x56a>
    a234:	2680      	movs	r6, #128	; 0x80
    a236:	0436      	lsls	r6, r6, #16
    a238:	425b      	negs	r3, r3
    a23a:	4334      	orrs	r4, r6
    a23c:	2b38      	cmp	r3, #56	; 0x38
    a23e:	dd00      	ble.n	a242 <__aeabi_dsub+0x4da>
    a240:	e07f      	b.n	a342 <__aeabi_dsub+0x5da>
    a242:	2b1f      	cmp	r3, #31
    a244:	dd00      	ble.n	a248 <__aeabi_dsub+0x4e0>
    a246:	e08b      	b.n	a360 <__aeabi_dsub+0x5f8>
    a248:	2620      	movs	r6, #32
    a24a:	0027      	movs	r7, r4
    a24c:	4650      	mov	r0, sl
    a24e:	1af6      	subs	r6, r6, r3
    a250:	40b7      	lsls	r7, r6
    a252:	40d8      	lsrs	r0, r3
    a254:	4307      	orrs	r7, r0
    a256:	4650      	mov	r0, sl
    a258:	40b0      	lsls	r0, r6
    a25a:	1e46      	subs	r6, r0, #1
    a25c:	41b0      	sbcs	r0, r6
    a25e:	4307      	orrs	r7, r0
    a260:	40dc      	lsrs	r4, r3
    a262:	18bf      	adds	r7, r7, r2
    a264:	e7d6      	b.n	a214 <__aeabi_dsub+0x4ac>
    a266:	000d      	movs	r5, r1
    a268:	4315      	orrs	r5, r2
    a26a:	d100      	bne.n	a26e <__aeabi_dsub+0x506>
    a26c:	e602      	b.n	9e74 <__aeabi_dsub+0x10c>
    a26e:	4650      	mov	r0, sl
    a270:	1a80      	subs	r0, r0, r2
    a272:	4582      	cmp	sl, r0
    a274:	41bf      	sbcs	r7, r7
    a276:	1a65      	subs	r5, r4, r1
    a278:	427f      	negs	r7, r7
    a27a:	1bed      	subs	r5, r5, r7
    a27c:	4684      	mov	ip, r0
    a27e:	0228      	lsls	r0, r5, #8
    a280:	d400      	bmi.n	a284 <__aeabi_dsub+0x51c>
    a282:	e68d      	b.n	9fa0 <__aeabi_dsub+0x238>
    a284:	4650      	mov	r0, sl
    a286:	1a17      	subs	r7, r2, r0
    a288:	42ba      	cmp	r2, r7
    a28a:	4192      	sbcs	r2, r2
    a28c:	1b0c      	subs	r4, r1, r4
    a28e:	4252      	negs	r2, r2
    a290:	1aa4      	subs	r4, r4, r2
    a292:	4698      	mov	r8, r3
    a294:	e5ee      	b.n	9e74 <__aeabi_dsub+0x10c>
    a296:	000d      	movs	r5, r1
    a298:	4315      	orrs	r5, r2
    a29a:	d100      	bne.n	a29e <__aeabi_dsub+0x536>
    a29c:	e76b      	b.n	a176 <__aeabi_dsub+0x40e>
    a29e:	4650      	mov	r0, sl
    a2a0:	0767      	lsls	r7, r4, #29
    a2a2:	08c0      	lsrs	r0, r0, #3
    a2a4:	4307      	orrs	r7, r0
    a2a6:	2080      	movs	r0, #128	; 0x80
    a2a8:	08e4      	lsrs	r4, r4, #3
    a2aa:	0300      	lsls	r0, r0, #12
    a2ac:	4204      	tst	r4, r0
    a2ae:	d007      	beq.n	a2c0 <__aeabi_dsub+0x558>
    a2b0:	08cd      	lsrs	r5, r1, #3
    a2b2:	4205      	tst	r5, r0
    a2b4:	d104      	bne.n	a2c0 <__aeabi_dsub+0x558>
    a2b6:	002c      	movs	r4, r5
    a2b8:	4698      	mov	r8, r3
    a2ba:	08d7      	lsrs	r7, r2, #3
    a2bc:	0749      	lsls	r1, r1, #29
    a2be:	430f      	orrs	r7, r1
    a2c0:	0f7b      	lsrs	r3, r7, #29
    a2c2:	00e4      	lsls	r4, r4, #3
    a2c4:	431c      	orrs	r4, r3
    a2c6:	00ff      	lsls	r7, r7, #3
    a2c8:	4e30      	ldr	r6, [pc, #192]	; (a38c <__aeabi_dsub+0x624>)
    a2ca:	e5d3      	b.n	9e74 <__aeabi_dsub+0x10c>
    a2cc:	4e2f      	ldr	r6, [pc, #188]	; (a38c <__aeabi_dsub+0x624>)
    a2ce:	45b4      	cmp	ip, r6
    a2d0:	d1b4      	bne.n	a23c <__aeabi_dsub+0x4d4>
    a2d2:	000c      	movs	r4, r1
    a2d4:	0017      	movs	r7, r2
    a2d6:	4666      	mov	r6, ip
    a2d8:	e5cc      	b.n	9e74 <__aeabi_dsub+0x10c>
    a2da:	2700      	movs	r7, #0
    a2dc:	2400      	movs	r4, #0
    a2de:	e5e8      	b.n	9eb2 <__aeabi_dsub+0x14a>
    a2e0:	2b00      	cmp	r3, #0
    a2e2:	d039      	beq.n	a358 <__aeabi_dsub+0x5f0>
    a2e4:	000b      	movs	r3, r1
    a2e6:	4313      	orrs	r3, r2
    a2e8:	d100      	bne.n	a2ec <__aeabi_dsub+0x584>
    a2ea:	e744      	b.n	a176 <__aeabi_dsub+0x40e>
    a2ec:	08c0      	lsrs	r0, r0, #3
    a2ee:	0767      	lsls	r7, r4, #29
    a2f0:	4307      	orrs	r7, r0
    a2f2:	2080      	movs	r0, #128	; 0x80
    a2f4:	08e4      	lsrs	r4, r4, #3
    a2f6:	0300      	lsls	r0, r0, #12
    a2f8:	4204      	tst	r4, r0
    a2fa:	d0e1      	beq.n	a2c0 <__aeabi_dsub+0x558>
    a2fc:	08cb      	lsrs	r3, r1, #3
    a2fe:	4203      	tst	r3, r0
    a300:	d1de      	bne.n	a2c0 <__aeabi_dsub+0x558>
    a302:	08d7      	lsrs	r7, r2, #3
    a304:	0749      	lsls	r1, r1, #29
    a306:	430f      	orrs	r7, r1
    a308:	001c      	movs	r4, r3
    a30a:	e7d9      	b.n	a2c0 <__aeabi_dsub+0x558>
    a30c:	2100      	movs	r1, #0
    a30e:	e771      	b.n	a1f4 <__aeabi_dsub+0x48c>
    a310:	2500      	movs	r5, #0
    a312:	2700      	movs	r7, #0
    a314:	e5e9      	b.n	9eea <__aeabi_dsub+0x182>
    a316:	002e      	movs	r6, r5
    a318:	0027      	movs	r7, r4
    a31a:	3e20      	subs	r6, #32
    a31c:	40f7      	lsrs	r7, r6
    a31e:	2d20      	cmp	r5, #32
    a320:	d02f      	beq.n	a382 <__aeabi_dsub+0x61a>
    a322:	2640      	movs	r6, #64	; 0x40
    a324:	1b75      	subs	r5, r6, r5
    a326:	40ac      	lsls	r4, r5
    a328:	4650      	mov	r0, sl
    a32a:	4320      	orrs	r0, r4
    a32c:	1e44      	subs	r4, r0, #1
    a32e:	41a0      	sbcs	r0, r4
    a330:	2400      	movs	r4, #0
    a332:	4338      	orrs	r0, r7
    a334:	e6dc      	b.n	a0f0 <__aeabi_dsub+0x388>
    a336:	2480      	movs	r4, #128	; 0x80
    a338:	2500      	movs	r5, #0
    a33a:	0324      	lsls	r4, r4, #12
    a33c:	4e13      	ldr	r6, [pc, #76]	; (a38c <__aeabi_dsub+0x624>)
    a33e:	2700      	movs	r7, #0
    a340:	e5d3      	b.n	9eea <__aeabi_dsub+0x182>
    a342:	4650      	mov	r0, sl
    a344:	4320      	orrs	r0, r4
    a346:	0007      	movs	r7, r0
    a348:	1e78      	subs	r0, r7, #1
    a34a:	4187      	sbcs	r7, r0
    a34c:	2400      	movs	r4, #0
    a34e:	18bf      	adds	r7, r7, r2
    a350:	e760      	b.n	a214 <__aeabi_dsub+0x4ac>
    a352:	000c      	movs	r4, r1
    a354:	0017      	movs	r7, r2
    a356:	e58d      	b.n	9e74 <__aeabi_dsub+0x10c>
    a358:	000c      	movs	r4, r1
    a35a:	0017      	movs	r7, r2
    a35c:	4e0b      	ldr	r6, [pc, #44]	; (a38c <__aeabi_dsub+0x624>)
    a35e:	e589      	b.n	9e74 <__aeabi_dsub+0x10c>
    a360:	001e      	movs	r6, r3
    a362:	0027      	movs	r7, r4
    a364:	3e20      	subs	r6, #32
    a366:	40f7      	lsrs	r7, r6
    a368:	2b20      	cmp	r3, #32
    a36a:	d00c      	beq.n	a386 <__aeabi_dsub+0x61e>
    a36c:	2640      	movs	r6, #64	; 0x40
    a36e:	1af3      	subs	r3, r6, r3
    a370:	409c      	lsls	r4, r3
    a372:	4650      	mov	r0, sl
    a374:	4320      	orrs	r0, r4
    a376:	1e44      	subs	r4, r0, #1
    a378:	41a0      	sbcs	r0, r4
    a37a:	4307      	orrs	r7, r0
    a37c:	2400      	movs	r4, #0
    a37e:	18bf      	adds	r7, r7, r2
    a380:	e748      	b.n	a214 <__aeabi_dsub+0x4ac>
    a382:	2400      	movs	r4, #0
    a384:	e7d0      	b.n	a328 <__aeabi_dsub+0x5c0>
    a386:	2400      	movs	r4, #0
    a388:	e7f3      	b.n	a372 <__aeabi_dsub+0x60a>
    a38a:	46c0      	nop			; (mov r8, r8)
    a38c:	000007ff 	.word	0x000007ff
    a390:	ff7fffff 	.word	0xff7fffff

0000a394 <__aeabi_d2iz>:
    a394:	b530      	push	{r4, r5, lr}
    a396:	4d13      	ldr	r5, [pc, #76]	; (a3e4 <__aeabi_d2iz+0x50>)
    a398:	030a      	lsls	r2, r1, #12
    a39a:	004b      	lsls	r3, r1, #1
    a39c:	0b12      	lsrs	r2, r2, #12
    a39e:	0d5b      	lsrs	r3, r3, #21
    a3a0:	0fc9      	lsrs	r1, r1, #31
    a3a2:	2400      	movs	r4, #0
    a3a4:	42ab      	cmp	r3, r5
    a3a6:	dd10      	ble.n	a3ca <__aeabi_d2iz+0x36>
    a3a8:	4c0f      	ldr	r4, [pc, #60]	; (a3e8 <__aeabi_d2iz+0x54>)
    a3aa:	42a3      	cmp	r3, r4
    a3ac:	dc0f      	bgt.n	a3ce <__aeabi_d2iz+0x3a>
    a3ae:	2480      	movs	r4, #128	; 0x80
    a3b0:	4d0e      	ldr	r5, [pc, #56]	; (a3ec <__aeabi_d2iz+0x58>)
    a3b2:	0364      	lsls	r4, r4, #13
    a3b4:	4322      	orrs	r2, r4
    a3b6:	1aed      	subs	r5, r5, r3
    a3b8:	2d1f      	cmp	r5, #31
    a3ba:	dd0b      	ble.n	a3d4 <__aeabi_d2iz+0x40>
    a3bc:	480c      	ldr	r0, [pc, #48]	; (a3f0 <__aeabi_d2iz+0x5c>)
    a3be:	1ac3      	subs	r3, r0, r3
    a3c0:	40da      	lsrs	r2, r3
    a3c2:	4254      	negs	r4, r2
    a3c4:	2900      	cmp	r1, #0
    a3c6:	d100      	bne.n	a3ca <__aeabi_d2iz+0x36>
    a3c8:	0014      	movs	r4, r2
    a3ca:	0020      	movs	r0, r4
    a3cc:	bd30      	pop	{r4, r5, pc}
    a3ce:	4b09      	ldr	r3, [pc, #36]	; (a3f4 <__aeabi_d2iz+0x60>)
    a3d0:	18cc      	adds	r4, r1, r3
    a3d2:	e7fa      	b.n	a3ca <__aeabi_d2iz+0x36>
    a3d4:	4c08      	ldr	r4, [pc, #32]	; (a3f8 <__aeabi_d2iz+0x64>)
    a3d6:	40e8      	lsrs	r0, r5
    a3d8:	46a4      	mov	ip, r4
    a3da:	4463      	add	r3, ip
    a3dc:	409a      	lsls	r2, r3
    a3de:	4302      	orrs	r2, r0
    a3e0:	e7ef      	b.n	a3c2 <__aeabi_d2iz+0x2e>
    a3e2:	46c0      	nop			; (mov r8, r8)
    a3e4:	000003fe 	.word	0x000003fe
    a3e8:	0000041d 	.word	0x0000041d
    a3ec:	00000433 	.word	0x00000433
    a3f0:	00000413 	.word	0x00000413
    a3f4:	7fffffff 	.word	0x7fffffff
    a3f8:	fffffbed 	.word	0xfffffbed

0000a3fc <__aeabi_i2d>:
    a3fc:	b570      	push	{r4, r5, r6, lr}
    a3fe:	2800      	cmp	r0, #0
    a400:	d030      	beq.n	a464 <__aeabi_i2d+0x68>
    a402:	17c3      	asrs	r3, r0, #31
    a404:	18c4      	adds	r4, r0, r3
    a406:	405c      	eors	r4, r3
    a408:	0fc5      	lsrs	r5, r0, #31
    a40a:	0020      	movs	r0, r4
    a40c:	f7fe fd96 	bl	8f3c <__clzsi2>
    a410:	4b17      	ldr	r3, [pc, #92]	; (a470 <__aeabi_i2d+0x74>)
    a412:	4a18      	ldr	r2, [pc, #96]	; (a474 <__aeabi_i2d+0x78>)
    a414:	1a1b      	subs	r3, r3, r0
    a416:	1ad2      	subs	r2, r2, r3
    a418:	2a1f      	cmp	r2, #31
    a41a:	dd18      	ble.n	a44e <__aeabi_i2d+0x52>
    a41c:	4a16      	ldr	r2, [pc, #88]	; (a478 <__aeabi_i2d+0x7c>)
    a41e:	1ad2      	subs	r2, r2, r3
    a420:	4094      	lsls	r4, r2
    a422:	2200      	movs	r2, #0
    a424:	0324      	lsls	r4, r4, #12
    a426:	055b      	lsls	r3, r3, #21
    a428:	0b24      	lsrs	r4, r4, #12
    a42a:	0d5b      	lsrs	r3, r3, #21
    a42c:	2100      	movs	r1, #0
    a42e:	0010      	movs	r0, r2
    a430:	0324      	lsls	r4, r4, #12
    a432:	0d0a      	lsrs	r2, r1, #20
    a434:	0b24      	lsrs	r4, r4, #12
    a436:	0512      	lsls	r2, r2, #20
    a438:	4322      	orrs	r2, r4
    a43a:	4c10      	ldr	r4, [pc, #64]	; (a47c <__aeabi_i2d+0x80>)
    a43c:	051b      	lsls	r3, r3, #20
    a43e:	4022      	ands	r2, r4
    a440:	4313      	orrs	r3, r2
    a442:	005b      	lsls	r3, r3, #1
    a444:	07ed      	lsls	r5, r5, #31
    a446:	085b      	lsrs	r3, r3, #1
    a448:	432b      	orrs	r3, r5
    a44a:	0019      	movs	r1, r3
    a44c:	bd70      	pop	{r4, r5, r6, pc}
    a44e:	0021      	movs	r1, r4
    a450:	4091      	lsls	r1, r2
    a452:	000a      	movs	r2, r1
    a454:	210b      	movs	r1, #11
    a456:	1a08      	subs	r0, r1, r0
    a458:	40c4      	lsrs	r4, r0
    a45a:	055b      	lsls	r3, r3, #21
    a45c:	0324      	lsls	r4, r4, #12
    a45e:	0b24      	lsrs	r4, r4, #12
    a460:	0d5b      	lsrs	r3, r3, #21
    a462:	e7e3      	b.n	a42c <__aeabi_i2d+0x30>
    a464:	2500      	movs	r5, #0
    a466:	2300      	movs	r3, #0
    a468:	2400      	movs	r4, #0
    a46a:	2200      	movs	r2, #0
    a46c:	e7de      	b.n	a42c <__aeabi_i2d+0x30>
    a46e:	46c0      	nop			; (mov r8, r8)
    a470:	0000041e 	.word	0x0000041e
    a474:	00000433 	.word	0x00000433
    a478:	00000413 	.word	0x00000413
    a47c:	800fffff 	.word	0x800fffff

0000a480 <__libc_init_array>:
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	2600      	movs	r6, #0
    a484:	4d0c      	ldr	r5, [pc, #48]	; (a4b8 <__libc_init_array+0x38>)
    a486:	4c0d      	ldr	r4, [pc, #52]	; (a4bc <__libc_init_array+0x3c>)
    a488:	1b64      	subs	r4, r4, r5
    a48a:	10a4      	asrs	r4, r4, #2
    a48c:	42a6      	cmp	r6, r4
    a48e:	d109      	bne.n	a4a4 <__libc_init_array+0x24>
    a490:	2600      	movs	r6, #0
    a492:	f000 fbdd 	bl	ac50 <_init>
    a496:	4d0a      	ldr	r5, [pc, #40]	; (a4c0 <__libc_init_array+0x40>)
    a498:	4c0a      	ldr	r4, [pc, #40]	; (a4c4 <__libc_init_array+0x44>)
    a49a:	1b64      	subs	r4, r4, r5
    a49c:	10a4      	asrs	r4, r4, #2
    a49e:	42a6      	cmp	r6, r4
    a4a0:	d105      	bne.n	a4ae <__libc_init_array+0x2e>
    a4a2:	bd70      	pop	{r4, r5, r6, pc}
    a4a4:	00b3      	lsls	r3, r6, #2
    a4a6:	58eb      	ldr	r3, [r5, r3]
    a4a8:	4798      	blx	r3
    a4aa:	3601      	adds	r6, #1
    a4ac:	e7ee      	b.n	a48c <__libc_init_array+0xc>
    a4ae:	00b3      	lsls	r3, r6, #2
    a4b0:	58eb      	ldr	r3, [r5, r3]
    a4b2:	4798      	blx	r3
    a4b4:	3601      	adds	r6, #1
    a4b6:	e7f2      	b.n	a49e <__libc_init_array+0x1e>
    a4b8:	0000ac5c 	.word	0x0000ac5c
    a4bc:	0000ac5c 	.word	0x0000ac5c
    a4c0:	0000ac5c 	.word	0x0000ac5c
    a4c4:	0000ac60 	.word	0x0000ac60

0000a4c8 <malloc>:
    a4c8:	b510      	push	{r4, lr}
    a4ca:	4b03      	ldr	r3, [pc, #12]	; (a4d8 <malloc+0x10>)
    a4cc:	0001      	movs	r1, r0
    a4ce:	6818      	ldr	r0, [r3, #0]
    a4d0:	f000 f816 	bl	a500 <_malloc_r>
    a4d4:	bd10      	pop	{r4, pc}
    a4d6:	46c0      	nop			; (mov r8, r8)
    a4d8:	20000124 	.word	0x20000124

0000a4dc <memcpy>:
    a4dc:	2300      	movs	r3, #0
    a4de:	b510      	push	{r4, lr}
    a4e0:	429a      	cmp	r2, r3
    a4e2:	d100      	bne.n	a4e6 <memcpy+0xa>
    a4e4:	bd10      	pop	{r4, pc}
    a4e6:	5ccc      	ldrb	r4, [r1, r3]
    a4e8:	54c4      	strb	r4, [r0, r3]
    a4ea:	3301      	adds	r3, #1
    a4ec:	e7f8      	b.n	a4e0 <memcpy+0x4>

0000a4ee <memset>:
    a4ee:	0003      	movs	r3, r0
    a4f0:	1882      	adds	r2, r0, r2
    a4f2:	4293      	cmp	r3, r2
    a4f4:	d100      	bne.n	a4f8 <memset+0xa>
    a4f6:	4770      	bx	lr
    a4f8:	7019      	strb	r1, [r3, #0]
    a4fa:	3301      	adds	r3, #1
    a4fc:	e7f9      	b.n	a4f2 <memset+0x4>
	...

0000a500 <_malloc_r>:
    a500:	2303      	movs	r3, #3
    a502:	b570      	push	{r4, r5, r6, lr}
    a504:	1ccd      	adds	r5, r1, #3
    a506:	439d      	bics	r5, r3
    a508:	3508      	adds	r5, #8
    a50a:	0006      	movs	r6, r0
    a50c:	2d0c      	cmp	r5, #12
    a50e:	d21e      	bcs.n	a54e <_malloc_r+0x4e>
    a510:	250c      	movs	r5, #12
    a512:	42a9      	cmp	r1, r5
    a514:	d81d      	bhi.n	a552 <_malloc_r+0x52>
    a516:	0030      	movs	r0, r6
    a518:	f000 f862 	bl	a5e0 <__malloc_lock>
    a51c:	4a25      	ldr	r2, [pc, #148]	; (a5b4 <_malloc_r+0xb4>)
    a51e:	6814      	ldr	r4, [r2, #0]
    a520:	0021      	movs	r1, r4
    a522:	2900      	cmp	r1, #0
    a524:	d119      	bne.n	a55a <_malloc_r+0x5a>
    a526:	4c24      	ldr	r4, [pc, #144]	; (a5b8 <_malloc_r+0xb8>)
    a528:	6823      	ldr	r3, [r4, #0]
    a52a:	2b00      	cmp	r3, #0
    a52c:	d103      	bne.n	a536 <_malloc_r+0x36>
    a52e:	0030      	movs	r0, r6
    a530:	f000 f844 	bl	a5bc <_sbrk_r>
    a534:	6020      	str	r0, [r4, #0]
    a536:	0029      	movs	r1, r5
    a538:	0030      	movs	r0, r6
    a53a:	f000 f83f 	bl	a5bc <_sbrk_r>
    a53e:	1c43      	adds	r3, r0, #1
    a540:	d12c      	bne.n	a59c <_malloc_r+0x9c>
    a542:	230c      	movs	r3, #12
    a544:	0030      	movs	r0, r6
    a546:	6033      	str	r3, [r6, #0]
    a548:	f000 f84b 	bl	a5e2 <__malloc_unlock>
    a54c:	e003      	b.n	a556 <_malloc_r+0x56>
    a54e:	2d00      	cmp	r5, #0
    a550:	dadf      	bge.n	a512 <_malloc_r+0x12>
    a552:	230c      	movs	r3, #12
    a554:	6033      	str	r3, [r6, #0]
    a556:	2000      	movs	r0, #0
    a558:	bd70      	pop	{r4, r5, r6, pc}
    a55a:	680b      	ldr	r3, [r1, #0]
    a55c:	1b5b      	subs	r3, r3, r5
    a55e:	d41a      	bmi.n	a596 <_malloc_r+0x96>
    a560:	2b0b      	cmp	r3, #11
    a562:	d903      	bls.n	a56c <_malloc_r+0x6c>
    a564:	600b      	str	r3, [r1, #0]
    a566:	18cc      	adds	r4, r1, r3
    a568:	6025      	str	r5, [r4, #0]
    a56a:	e003      	b.n	a574 <_malloc_r+0x74>
    a56c:	428c      	cmp	r4, r1
    a56e:	d10e      	bne.n	a58e <_malloc_r+0x8e>
    a570:	6863      	ldr	r3, [r4, #4]
    a572:	6013      	str	r3, [r2, #0]
    a574:	0030      	movs	r0, r6
    a576:	f000 f834 	bl	a5e2 <__malloc_unlock>
    a57a:	0020      	movs	r0, r4
    a57c:	2207      	movs	r2, #7
    a57e:	300b      	adds	r0, #11
    a580:	1d23      	adds	r3, r4, #4
    a582:	4390      	bics	r0, r2
    a584:	1ac3      	subs	r3, r0, r3
    a586:	d0e7      	beq.n	a558 <_malloc_r+0x58>
    a588:	425a      	negs	r2, r3
    a58a:	50e2      	str	r2, [r4, r3]
    a58c:	e7e4      	b.n	a558 <_malloc_r+0x58>
    a58e:	684b      	ldr	r3, [r1, #4]
    a590:	6063      	str	r3, [r4, #4]
    a592:	000c      	movs	r4, r1
    a594:	e7ee      	b.n	a574 <_malloc_r+0x74>
    a596:	000c      	movs	r4, r1
    a598:	6849      	ldr	r1, [r1, #4]
    a59a:	e7c2      	b.n	a522 <_malloc_r+0x22>
    a59c:	2303      	movs	r3, #3
    a59e:	1cc4      	adds	r4, r0, #3
    a5a0:	439c      	bics	r4, r3
    a5a2:	42a0      	cmp	r0, r4
    a5a4:	d0e0      	beq.n	a568 <_malloc_r+0x68>
    a5a6:	1a21      	subs	r1, r4, r0
    a5a8:	0030      	movs	r0, r6
    a5aa:	f000 f807 	bl	a5bc <_sbrk_r>
    a5ae:	1c43      	adds	r3, r0, #1
    a5b0:	d1da      	bne.n	a568 <_malloc_r+0x68>
    a5b2:	e7c6      	b.n	a542 <_malloc_r+0x42>
    a5b4:	200003f0 	.word	0x200003f0
    a5b8:	200003f4 	.word	0x200003f4

0000a5bc <_sbrk_r>:
    a5bc:	2300      	movs	r3, #0
    a5be:	b570      	push	{r4, r5, r6, lr}
    a5c0:	4c06      	ldr	r4, [pc, #24]	; (a5dc <_sbrk_r+0x20>)
    a5c2:	0005      	movs	r5, r0
    a5c4:	0008      	movs	r0, r1
    a5c6:	6023      	str	r3, [r4, #0]
    a5c8:	f7fc fbe2 	bl	6d90 <_sbrk>
    a5cc:	1c43      	adds	r3, r0, #1
    a5ce:	d103      	bne.n	a5d8 <_sbrk_r+0x1c>
    a5d0:	6823      	ldr	r3, [r4, #0]
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d000      	beq.n	a5d8 <_sbrk_r+0x1c>
    a5d6:	602b      	str	r3, [r5, #0]
    a5d8:	bd70      	pop	{r4, r5, r6, pc}
    a5da:	46c0      	nop			; (mov r8, r8)
    a5dc:	20000af0 	.word	0x20000af0

0000a5e0 <__malloc_lock>:
    a5e0:	4770      	bx	lr

0000a5e2 <__malloc_unlock>:
    a5e2:	4770      	bx	lr

0000a5e4 <tc_interrupt_vectors.13546>:
    a5e4:	1312 0014                                   ....

0000a5e8 <tc_interrupt_vectors.13546>:
    a5e8:	1312 0014 004c 0004 05b8 2000 0000 0000     ....L...... ....
    a5f8:	23b4 0000 2412 0000 24e0 0000 24e0 0000     .#...$...$...$..
    a608:	2498 0000 2432 0000 24e0 0000 24e0 0000     .$..2$...$...$..
    a618:	24e0 0000 24e0 0000 24e0 0000 2400 0000     .$...$...$...$..
    a628:	2390 0000 24e0 0000 237a 0000 24e0 0000     .#...$..z#...$..
    a638:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a648:	243e 0000 24e0 0000 24e0 0000 24d4 0000     >$...$...$...$..
    a658:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a668:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a678:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a688:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a698:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a6a8:	24e0 0000 24e0 0000 24e0 0000 24e0 0000     .$...$...$...$..
    a6b8:	24e0 0000 24e0 0000 24b2 0000 24e0 0000     .$...$...$...$..
    a6c8:	24e0 0000 2342 0000 24e0 0000 24e0 0000     .$..B#...$...$..
    a6d8:	24e0 0000 25b2 0000 24c4 0000 24f0 0000     .$...%...$...$..
    a6e8:	253c 0000 2548 0000 24d4 0000 25a2 0000     <%..H%...$...%..
    a6f8:	31ee 0000 3434 0000 3434 0000 3434 0000     .1..44..44..44..
    a708:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a718:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a728:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a738:	31d6 0000 3434 0000 3434 0000 3434 0000     .1..44..44..44..
    a748:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a758:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a768:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a778:	31e6 0000 3434 0000 3434 0000 3434 0000     .1..44..44..44..
    a788:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a798:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a7a8:	3434 0000 3434 0000 3434 0000 3434 0000     44..44..44..44..
    a7b8:	31de 0000 31f6 0000 31be 0000 31ce 0000     .1...1...1...1..
    a7c8:	31c6 0000 0002 0000 0003 0000 0028 0000     .1..........(...
    a7d8:	0029 0000 0004 0000 0005 0000 0006 0000     )...............
    a7e8:	0007 0000 ffff 0000 ffff 0000 0022 0000     ............"...
    a7f8:	0023 0000 ffff 0000 ffff 0000 ffff 0000     #...............
    a808:	ffff 0000 0008 0000 0009 0000 000a 0000     ................
    a818:	000b 0000 0800 4200 0c00 4200 1000 4200     .......B...B...B
    a828:	1400 4200 1800 4200 1c00 4200 441e 0000     ...B...B...B.D..
    a838:	441a 0000 441a 0000 4472 0000 4472 0000     .D...D..rD..rD..
    a848:	4432 0000 4424 0000 4438 0000 4460 0000     2D..$D..8D..`D..

0000a858 <_tcc_apbcmasks>:
    a858:	0100 0000 0200 0000 0400 0000               ............

0000a864 <_tcc_cc_nums>:
    a864:	0204 0002                                   ....

0000a868 <_tcc_gclk_ids>:
    a868:	1a1a 001b                                   ....

0000a86c <_tcc_maxs>:
    a86c:	ffff 00ff ffff 00ff ffff 0000               ............

0000a878 <_tcc_ow_nums>:
    a878:	0408 0002                                   ....

0000a87c <_tcc_intflag>:
    a87c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    a88c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    a89c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    a8ac:	2c00 4200 3000 4200 3400 4200 60b8 0000     .,.B.0.B.4.B.`..
    a8bc:	60c6 0000 6160 0000 6200 0000 6264 0000     .`..`a...b..db..

0000a8cc <_usb_device_irq_bits>:
    a8cc:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

0000a8dc <_usb_endpoint_irq_bits>:
    a8dc:	0c03 6010 73ba 0000 742e 0000 7652 0000     ...`.s...t..Rv..
    a8ec:	7652 0000 761a 0000 746c 0000 7652 0000     Rv...v..lt..Rv..
    a8fc:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a90c:	740e 0000 736e 0000 7652 0000 7330 0000     .t..ns..Rv..0s..
    a91c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a92c:	7652 0000 7486 0000 7652 0000 7652 0000     Rv...t..Rv..Rv..
    a93c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a94c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a95c:	7652 0000 7652 0000 72f0 0000 7652 0000     Rv..Rv...r..Rv..
    a96c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a97c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a98c:	7652 0000 7652 0000 7652 0000 7652 0000     Rv..Rv..Rv..Rv..
    a99c:	7652 0000 7652 0000 7652 0000 74ec 0000     Rv..Rv..Rv...t..
    a9ac:	7652 0000 6f84 0000 70f0 0000 7652 0000     Rv...o...p..Rv..
    a9bc:	7644 0000 751a 0000 753a 0000 758e 0000     Dv...u..:u...u..
    a9cc:	75a8 0000 75c8 0000 75f2 0000               .u...u...u..

0000a9d8 <npio2_hw>:
    a9d8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
    a9e8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
    a9f8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
    aa08:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
    aa18:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
    aa28:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
    aa38:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
    aa48:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0000aa58 <two_over_pi>:
    aa58:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
    aa68:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
    aa78:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
    aa88:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
    aa98:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
    aaa8:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
    aab8:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
    aac8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
    aad8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
    aae8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
    aaf8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
    ab08:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
    ab18:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
    ab28:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
    ab38:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
    ab48:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
    ab58:	e27b 0060 8c6b 00c0                         {.`.k...

0000ab60 <PIo2>:
    ab60:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
    ab70:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
    ab80:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
    ab90:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0000aba0 <init_jk>:
    aba0:	0002 0000 0003 0000 0004 0000 0006 0000     ................
    abb0:	9a58 0000 9918 0000 9918 0000 9914 0000     X...............
    abc0:	9a30 0000 9a30 0000 9a22 0000 9914 0000     0...0...".......
    abd0:	9a30 0000 9a22 0000 9a30 0000 9914 0000     0..."...0.......
    abe0:	9a38 0000 9a38 0000 9a38 0000 9c3c 0000     8...8...8...<...

0000abf0 <__sf_fake_stderr>:
	...

0000ac10 <__sf_fake_stdin>:
	...

0000ac30 <__sf_fake_stdout>:
	...

0000ac50 <_init>:
    ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac52:	46c0      	nop			; (mov r8, r8)
    ac54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac56:	bc08      	pop	{r3}
    ac58:	469e      	mov	lr, r3
    ac5a:	4770      	bx	lr

0000ac5c <__init_array_start>:
    ac5c:	000000dd 	.word	0x000000dd

0000ac60 <_fini>:
    ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac62:	46c0      	nop			; (mov r8, r8)
    ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac66:	bc08      	pop	{r3}
    ac68:	469e      	mov	lr, r3
    ac6a:	4770      	bx	lr

0000ac6c <__fini_array_start>:
    ac6c:	000000b5 	.word	0x000000b5
