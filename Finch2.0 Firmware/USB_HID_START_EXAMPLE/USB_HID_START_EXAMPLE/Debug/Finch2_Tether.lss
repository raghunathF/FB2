
Finch2_Tether.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c550  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000188  20000000  0000c550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000954  20000190  0000c6e0  00020188  2**4
                  ALLOC
  3 .stack        00002004  20000ae4  0000d034  00020188  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0008a028  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a29c  00000000  00000000  000aa231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010148  00000000  00000000  000b44cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010c8  00000000  00000000  000c4615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013e8  00000000  00000000  000c56dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00026436  00000000  00000000  000c6ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00025a75  00000000  00000000  000ecefb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095082  00000000  00000000  00112970  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000032e4  00000000  00000000  001a79f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 2a 00 20 39 6b 00 00 35 6b 00 00 35 6b 00 00     .*. 9k..5k..5k..
	...
      2c:	35 6b 00 00 00 00 00 00 00 00 00 00 35 6b 00 00     5k..........5k..
      3c:	35 6b 00 00 35 6b 00 00 35 6b 00 00 35 6b 00 00     5k..5k..5k..5k..
      4c:	35 6b 00 00 59 34 00 00 35 6b 00 00 15 01 00 00     5k..Y4..5k......
      5c:	65 63 00 00 35 6b 00 00 39 42 00 00 49 42 00 00     ec..5k..9B..IB..
      6c:	59 42 00 00 69 42 00 00 79 42 00 00 89 42 00 00     YB..iB..yB...B..
      7c:	b9 4b 00 00 c9 4b 00 00 d9 4b 00 00 8d 4c 00 00     .K...K...K...L..
      8c:	9d 4c 00 00 ad 4c 00 00 00 00 00 00 00 00 00 00     .L...L..........
      9c:	35 6b 00 00 35 6b 00 00 35 6b 00 00 35 6b 00 00     5k..5k..5k..5k..
      ac:	35 6b 00 00 00 00 00 00                             5k......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000190 	.word	0x20000190
      d4:	00000000 	.word	0x00000000
      d8:	0000c550 	.word	0x0000c550

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000194 	.word	0x20000194
     108:	0000c550 	.word	0x0000c550
     10c:	0000c550 	.word	0x0000c550
     110:	00000000 	.word	0x00000000

00000114 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     114:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     116:	4b26      	ldr	r3, [pc, #152]	; (1b0 <DMAC_Handler+0x9c>)
     118:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     11a:	4926      	ldr	r1, [pc, #152]	; (1b4 <DMAC_Handler+0xa0>)
     11c:	8c0b      	ldrh	r3, [r1, #32]
     11e:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     120:	4013      	ands	r3, r2
     122:	009b      	lsls	r3, r3, #2
     124:	4824      	ldr	r0, [pc, #144]	; (1b8 <DMAC_Handler+0xa4>)
     126:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     128:	7803      	ldrb	r3, [r0, #0]
     12a:	401a      	ands	r2, r3
     12c:	233f      	movs	r3, #63	; 0x3f
     12e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     130:	330f      	adds	r3, #15
     132:	5cca      	ldrb	r2, [r1, r3]
     134:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     136:	7803      	ldrb	r3, [r0, #0]
     138:	011b      	lsls	r3, r3, #4
     13a:	4920      	ldr	r1, [pc, #128]	; (1bc <DMAC_Handler+0xa8>)
     13c:	18c9      	adds	r1, r1, r3
     13e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     140:	4c1f      	ldr	r4, [pc, #124]	; (1c0 <DMAC_Handler+0xac>)
     142:	18e3      	adds	r3, r4, r3
     144:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     146:	1acb      	subs	r3, r1, r3
     148:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     14a:	07d3      	lsls	r3, r2, #31
     14c:	d50f      	bpl.n	16e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     14e:	2101      	movs	r1, #1
     150:	234e      	movs	r3, #78	; 0x4e
     152:	4a18      	ldr	r2, [pc, #96]	; (1b4 <DMAC_Handler+0xa0>)
     154:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     156:	3b3e      	subs	r3, #62	; 0x3e
     158:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     15a:	7c03      	ldrb	r3, [r0, #16]
     15c:	07db      	lsls	r3, r3, #31
     15e:	d503      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     160:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     162:	2b00      	cmp	r3, #0
     164:	d000      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     166:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     168:	4b16      	ldr	r3, [pc, #88]	; (1c4 <DMAC_Handler+0xb0>)
     16a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     16c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     16e:	0793      	lsls	r3, r2, #30
     170:	d50d      	bpl.n	18e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     172:	2102      	movs	r1, #2
     174:	234e      	movs	r3, #78	; 0x4e
     176:	4a0f      	ldr	r2, [pc, #60]	; (1b4 <DMAC_Handler+0xa0>)
     178:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     17a:	2300      	movs	r3, #0
     17c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     17e:	7c03      	ldrb	r3, [r0, #16]
     180:	079b      	lsls	r3, r3, #30
     182:	d5f1      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     184:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     186:	2b00      	cmp	r3, #0
     188:	d0ee      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     18a:	4798      	blx	r3
     18c:	e7ec      	b.n	168 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     18e:	0753      	lsls	r3, r2, #29
     190:	d5ea      	bpl.n	168 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     192:	2104      	movs	r1, #4
     194:	234e      	movs	r3, #78	; 0x4e
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <DMAC_Handler+0xa0>)
     198:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     19a:	3b48      	subs	r3, #72	; 0x48
     19c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     19e:	7c03      	ldrb	r3, [r0, #16]
     1a0:	075b      	lsls	r3, r3, #29
     1a2:	d5e1      	bpl.n	168 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     1a4:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     1a6:	2b00      	cmp	r3, #0
     1a8:	d0de      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     1aa:	4798      	blx	r3
     1ac:	e7dc      	b.n	168 <DMAC_Handler+0x54>
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00002e25 	.word	0x00002e25
     1b4:	41004800 	.word	0x41004800
     1b8:	200001ac 	.word	0x200001ac
     1bc:	200003f0 	.word	0x200003f0
     1c0:	200001c0 	.word	0x200001c0
     1c4:	00002e65 	.word	0x00002e65

000001c8 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     1c8:	2300      	movs	r3, #0
     1ca:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     1cc:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTON_TRANSACTION;
     1ce:	2203      	movs	r2, #3
     1d0:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     1d2:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     1d4:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     1d6:	4770      	bx	lr

000001d8 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1da:	46ce      	mov	lr, r9
     1dc:	4647      	mov	r7, r8
     1de:	b580      	push	{r7, lr}
     1e0:	0005      	movs	r5, r0
     1e2:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     1e4:	4b45      	ldr	r3, [pc, #276]	; (2fc <dma_allocate+0x124>)
     1e6:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     1e8:	4b45      	ldr	r3, [pc, #276]	; (300 <dma_allocate+0x128>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d118      	bne.n	222 <dma_allocate+0x4a>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	PM->AHBMASK.reg |= ahb_mask;
     1f0:	4b44      	ldr	r3, [pc, #272]	; (304 <dma_allocate+0x12c>)
     1f2:	695a      	ldr	r2, [r3, #20]
     1f4:	2120      	movs	r1, #32
     1f6:	430a      	orrs	r2, r1
     1f8:	615a      	str	r2, [r3, #20]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1fa:	69da      	ldr	r2, [r3, #28]
     1fc:	3910      	subs	r1, #16
     1fe:	430a      	orrs	r2, r1
     200:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     202:	4b41      	ldr	r3, [pc, #260]	; (308 <dma_allocate+0x130>)
     204:	881a      	ldrh	r2, [r3, #0]
     206:	390e      	subs	r1, #14
     208:	438a      	bics	r2, r1
     20a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     20c:	2201      	movs	r2, #1
     20e:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     210:	4a3e      	ldr	r2, [pc, #248]	; (30c <dma_allocate+0x134>)
     212:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     214:	4a3e      	ldr	r2, [pc, #248]	; (310 <dma_allocate+0x138>)
     216:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     218:	4a3e      	ldr	r2, [pc, #248]	; (314 <dma_allocate+0x13c>)
     21a:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     21c:	4b38      	ldr	r3, [pc, #224]	; (300 <dma_allocate+0x128>)
     21e:	2201      	movs	r2, #1
     220:	701a      	strb	r2, [r3, #0]
     222:	4b36      	ldr	r3, [pc, #216]	; (2fc <dma_allocate+0x124>)
     224:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     226:	4b36      	ldr	r3, [pc, #216]	; (300 <dma_allocate+0x128>)
     228:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     22a:	07da      	lsls	r2, r3, #31
     22c:	d50f      	bpl.n	24e <dma_allocate+0x76>
		tmp = tmp >> 1;
     22e:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     230:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     232:	2201      	movs	r2, #1
     234:	421a      	tst	r2, r3
     236:	d00b      	beq.n	250 <dma_allocate+0x78>
		tmp = tmp >> 1;
     238:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     23a:	3401      	adds	r4, #1
     23c:	b2e4      	uxtb	r4, r4
     23e:	2c05      	cmp	r4, #5
     240:	d1f8      	bne.n	234 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     242:	4b35      	ldr	r3, [pc, #212]	; (318 <dma_allocate+0x140>)
     244:	4798      	blx	r3
     246:	4b34      	ldr	r3, [pc, #208]	; (318 <dma_allocate+0x140>)
     248:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     24a:	2014      	movs	r0, #20
     24c:	e051      	b.n	2f2 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     24e:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     250:	4a2b      	ldr	r2, [pc, #172]	; (300 <dma_allocate+0x128>)
     252:	6851      	ldr	r1, [r2, #4]
     254:	2301      	movs	r3, #1
     256:	40a3      	lsls	r3, r4
     258:	430b      	orrs	r3, r1
     25a:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     25c:	7a13      	ldrb	r3, [r2, #8]
     25e:	3b01      	subs	r3, #1
     260:	7213      	strb	r3, [r2, #8]
     262:	4b2d      	ldr	r3, [pc, #180]	; (318 <dma_allocate+0x140>)
     264:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     266:	2cff      	cmp	r4, #255	; 0xff
     268:	d0ed      	beq.n	246 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     26a:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     26c:	230f      	movs	r3, #15
     26e:	4698      	mov	r8, r3
     270:	401c      	ands	r4, r3
     272:	4f25      	ldr	r7, [pc, #148]	; (308 <dma_allocate+0x130>)
     274:	3330      	adds	r3, #48	; 0x30
     276:	4699      	mov	r9, r3
     278:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     27a:	3301      	adds	r3, #1
     27c:	5cfa      	ldrb	r2, [r7, r3]
     27e:	2102      	movs	r1, #2
     280:	438a      	bics	r2, r1
     282:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     284:	2401      	movs	r4, #1
     286:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     288:	4b1c      	ldr	r3, [pc, #112]	; (2fc <dma_allocate+0x124>)
     28a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     28c:	782b      	ldrb	r3, [r5, #0]
     28e:	4642      	mov	r2, r8
     290:	4013      	ands	r3, r2
     292:	464a      	mov	r2, r9
     294:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     296:	693b      	ldr	r3, [r7, #16]
     298:	782a      	ldrb	r2, [r5, #0]
     29a:	4094      	lsls	r4, r2
     29c:	43a3      	bics	r3, r4
     29e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2a0:	7832      	ldrb	r2, [r6, #0]
     2a2:	0152      	lsls	r2, r2, #5
     2a4:	2360      	movs	r3, #96	; 0x60
     2a6:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     2a8:	7872      	ldrb	r2, [r6, #1]
     2aa:	0212      	lsls	r2, r2, #8
     2ac:	21fc      	movs	r1, #252	; 0xfc
     2ae:	0189      	lsls	r1, r1, #6
     2b0:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2b2:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     2b4:	78b2      	ldrb	r2, [r6, #2]
     2b6:	0592      	lsls	r2, r2, #22
     2b8:	21c0      	movs	r1, #192	; 0xc0
     2ba:	0409      	lsls	r1, r1, #16
     2bc:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2be:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     2c0:	78f1      	ldrb	r1, [r6, #3]
     2c2:	2900      	cmp	r1, #0
     2c4:	d004      	beq.n	2d0 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     2c6:	2207      	movs	r2, #7
     2c8:	400a      	ands	r2, r1
     2ca:	2108      	movs	r1, #8
     2cc:	430a      	orrs	r2, r1
     2ce:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     2d0:	7932      	ldrb	r2, [r6, #4]
     2d2:	2a00      	cmp	r2, #0
     2d4:	d001      	beq.n	2da <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     2d6:	2210      	movs	r2, #16
     2d8:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     2da:	4a0b      	ldr	r2, [pc, #44]	; (308 <dma_allocate+0x130>)
     2dc:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     2de:	4c0e      	ldr	r4, [pc, #56]	; (318 <dma_allocate+0x140>)
     2e0:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     2e2:	2300      	movs	r3, #0
     2e4:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     2e6:	782b      	ldrb	r3, [r5, #0]
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <dma_allocate+0x144>)
     2ec:	509d      	str	r5, [r3, r2]
     2ee:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     2f0:	2000      	movs	r0, #0
}
     2f2:	bc0c      	pop	{r2, r3}
     2f4:	4690      	mov	r8, r2
     2f6:	4699      	mov	r9, r3
     2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00002e25 	.word	0x00002e25
     300:	20000000 	.word	0x20000000
     304:	40000400 	.word	0x40000400
     308:	41004800 	.word	0x41004800
     30c:	200003f0 	.word	0x200003f0
     310:	200001c0 	.word	0x200001c0
     314:	00000f02 	.word	0x00000f02
     318:	00002e65 	.word	0x00002e65
     31c:	200001ac 	.word	0x200001ac

00000320 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     324:	4b19      	ldr	r3, [pc, #100]	; (38c <dma_start_transfer_job+0x6c>)
     326:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     328:	7c63      	ldrb	r3, [r4, #17]
     32a:	2b05      	cmp	r3, #5
     32c:	d008      	beq.n	340 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     32e:	69a3      	ldr	r3, [r4, #24]
     330:	885b      	ldrh	r3, [r3, #2]
     332:	b29b      	uxth	r3, r3
     334:	2b00      	cmp	r3, #0
     336:	d107      	bne.n	348 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <dma_start_transfer_job+0x70>)
     33a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     33c:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     33e:	bd70      	pop	{r4, r5, r6, pc}
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <dma_start_transfer_job+0x70>)
     342:	4798      	blx	r3
		return STATUS_BUSY;
     344:	2005      	movs	r0, #5
     346:	e7fa      	b.n	33e <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     348:	2640      	movs	r6, #64	; 0x40
     34a:	4b12      	ldr	r3, [pc, #72]	; (394 <dma_start_transfer_job+0x74>)
     34c:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     34e:	7822      	ldrb	r2, [r4, #0]
     350:	230f      	movs	r3, #15
     352:	4013      	ands	r3, r2
     354:	4d10      	ldr	r5, [pc, #64]	; (398 <dma_start_transfer_job+0x78>)
     356:	223f      	movs	r2, #63	; 0x3f
     358:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     35a:	7823      	ldrb	r3, [r4, #0]
     35c:	4a0f      	ldr	r2, [pc, #60]	; (39c <dma_start_transfer_job+0x7c>)
     35e:	5cd2      	ldrb	r2, [r2, r3]
     360:	2307      	movs	r3, #7
     362:	4013      	ands	r3, r2
     364:	224d      	movs	r2, #77	; 0x4d
     366:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     368:	2305      	movs	r3, #5
     36a:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     36c:	7820      	ldrb	r0, [r4, #0]
     36e:	0100      	lsls	r0, r0, #4
     370:	4b0b      	ldr	r3, [pc, #44]	; (3a0 <dma_start_transfer_job+0x80>)
     372:	18c0      	adds	r0, r0, r3
     374:	69a1      	ldr	r1, [r4, #24]
     376:	3a3d      	subs	r2, #61	; 0x3d
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <dma_start_transfer_job+0x84>)
     37a:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     37c:	5dab      	ldrb	r3, [r5, r6]
     37e:	2202      	movs	r2, #2
     380:	4313      	orrs	r3, r2
     382:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <dma_start_transfer_job+0x70>)
     386:	4798      	blx	r3
	return STATUS_OK;
     388:	2000      	movs	r0, #0
     38a:	e7d8      	b.n	33e <dma_start_transfer_job+0x1e>
     38c:	00002e25 	.word	0x00002e25
     390:	00002e65 	.word	0x00002e65
     394:	e000e100 	.word	0xe000e100
     398:	41004800 	.word	0x41004800
     39c:	20000210 	.word	0x20000210
     3a0:	200003f0 	.word	0x200003f0
     3a4:	0000bcdd 	.word	0x0000bcdd

000003a8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     3aa:	780a      	ldrb	r2, [r1, #0]
     3ac:	8803      	ldrh	r3, [r0, #0]
     3ae:	2601      	movs	r6, #1
     3b0:	4032      	ands	r2, r6
     3b2:	2401      	movs	r4, #1
     3b4:	43a3      	bics	r3, r4
     3b6:	4313      	orrs	r3, r2
     3b8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     3ba:	784b      	ldrb	r3, [r1, #1]
     3bc:	8804      	ldrh	r4, [r0, #0]
     3be:	2703      	movs	r7, #3
     3c0:	403b      	ands	r3, r7
     3c2:	005b      	lsls	r3, r3, #1
     3c4:	2206      	movs	r2, #6
     3c6:	4394      	bics	r4, r2
     3c8:	431c      	orrs	r4, r3
     3ca:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     3cc:	788d      	ldrb	r5, [r1, #2]
     3ce:	8804      	ldrh	r4, [r0, #0]
     3d0:	403d      	ands	r5, r7
     3d2:	00ed      	lsls	r5, r5, #3
     3d4:	2318      	movs	r3, #24
     3d6:	439c      	bics	r4, r3
     3d8:	432c      	orrs	r4, r5
     3da:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     3dc:	78ca      	ldrb	r2, [r1, #3]
     3de:	8803      	ldrh	r3, [r0, #0]
     3e0:	403a      	ands	r2, r7
     3e2:	0212      	lsls	r2, r2, #8
     3e4:	4c16      	ldr	r4, [pc, #88]	; (440 <dma_descriptor_create+0x98>)
     3e6:	4023      	ands	r3, r4
     3e8:	4313      	orrs	r3, r2
     3ea:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     3ec:	790b      	ldrb	r3, [r1, #4]
     3ee:	8804      	ldrh	r4, [r0, #0]
     3f0:	4033      	ands	r3, r6
     3f2:	029b      	lsls	r3, r3, #10
     3f4:	4a13      	ldr	r2, [pc, #76]	; (444 <dma_descriptor_create+0x9c>)
     3f6:	4014      	ands	r4, r2
     3f8:	431c      	orrs	r4, r3
     3fa:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     3fc:	794d      	ldrb	r5, [r1, #5]
     3fe:	8804      	ldrh	r4, [r0, #0]
     400:	4035      	ands	r5, r6
     402:	02ed      	lsls	r5, r5, #11
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <dma_descriptor_create+0xa0>)
     406:	401c      	ands	r4, r3
     408:	432c      	orrs	r4, r5
     40a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     40c:	798a      	ldrb	r2, [r1, #6]
     40e:	8803      	ldrh	r3, [r0, #0]
     410:	4032      	ands	r2, r6
     412:	0312      	lsls	r2, r2, #12
     414:	4c0d      	ldr	r4, [pc, #52]	; (44c <dma_descriptor_create+0xa4>)
     416:	4023      	ands	r3, r4
     418:	4313      	orrs	r3, r2
     41a:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     41c:	79cb      	ldrb	r3, [r1, #7]
     41e:	2207      	movs	r2, #7
     420:	401a      	ands	r2, r3
     422:	8803      	ldrh	r3, [r0, #0]
     424:	0352      	lsls	r2, r2, #13
     426:	04db      	lsls	r3, r3, #19
     428:	0cdb      	lsrs	r3, r3, #19
     42a:	4313      	orrs	r3, r2
     42c:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     42e:	890b      	ldrh	r3, [r1, #8]
     430:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     432:	68cb      	ldr	r3, [r1, #12]
     434:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     436:	690b      	ldr	r3, [r1, #16]
     438:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     43a:	694b      	ldr	r3, [r1, #20]
     43c:	60c3      	str	r3, [r0, #12]
}
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     440:	fffffcff 	.word	0xfffffcff
     444:	fffffbff 	.word	0xfffffbff
     448:	fffff7ff 	.word	0xfffff7ff
     44c:	ffffefff 	.word	0xffffefff

00000450 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     450:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     452:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     454:	2a05      	cmp	r2, #5
     456:	d00b      	beq.n	470 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     458:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     45a:	2b00      	cmp	r3, #0
     45c:	d00a      	beq.n	474 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     45e:	68da      	ldr	r2, [r3, #12]
     460:	2a00      	cmp	r2, #0
     462:	d003      	beq.n	46c <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     464:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     466:	68da      	ldr	r2, [r3, #12]
     468:	2a00      	cmp	r2, #0
     46a:	d1fb      	bne.n	464 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     46c:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     46e:	2300      	movs	r3, #0
}
     470:	0018      	movs	r0, r3
     472:	4770      	bx	lr
		resource->descriptor = descriptor;
     474:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     476:	2300      	movs	r3, #0
     478:	e7fa      	b.n	470 <dma_add_descriptor+0x20>
	...

0000047c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     47c:	b5f0      	push	{r4, r5, r6, r7, lr}
     47e:	46de      	mov	lr, fp
     480:	4657      	mov	r7, sl
     482:	464e      	mov	r6, r9
     484:	4645      	mov	r5, r8
     486:	b5e0      	push	{r5, r6, r7, lr}
     488:	b091      	sub	sp, #68	; 0x44
     48a:	0005      	movs	r5, r0
     48c:	000c      	movs	r4, r1
     48e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     490:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     492:	0008      	movs	r0, r1
     494:	4bbb      	ldr	r3, [pc, #748]	; (784 <usart_init+0x308>)
     496:	4798      	blx	r3
     498:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     49a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     49c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     49e:	07db      	lsls	r3, r3, #31
     4a0:	d506      	bpl.n	4b0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     4a2:	b011      	add	sp, #68	; 0x44
     4a4:	bc3c      	pop	{r2, r3, r4, r5}
     4a6:	4690      	mov	r8, r2
     4a8:	4699      	mov	r9, r3
     4aa:	46a2      	mov	sl, r4
     4ac:	46ab      	mov	fp, r5
     4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4b0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     4b2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     4b4:	079b      	lsls	r3, r3, #30
     4b6:	d4f4      	bmi.n	4a2 <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4b8:	49b3      	ldr	r1, [pc, #716]	; (788 <usart_init+0x30c>)
     4ba:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     4bc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     4be:	2301      	movs	r3, #1
     4c0:	40bb      	lsls	r3, r7
     4c2:	4303      	orrs	r3, r0
     4c4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     4c6:	a90f      	add	r1, sp, #60	; 0x3c
     4c8:	272d      	movs	r7, #45	; 0x2d
     4ca:	5df3      	ldrb	r3, [r6, r7]
     4cc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     4ce:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     4d0:	b2d3      	uxtb	r3, r2
     4d2:	9302      	str	r3, [sp, #8]
     4d4:	0018      	movs	r0, r3
     4d6:	4bad      	ldr	r3, [pc, #692]	; (78c <usart_init+0x310>)
     4d8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     4da:	9802      	ldr	r0, [sp, #8]
     4dc:	4bac      	ldr	r3, [pc, #688]	; (790 <usart_init+0x314>)
     4de:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     4e0:	5df0      	ldrb	r0, [r6, r7]
     4e2:	2100      	movs	r1, #0
     4e4:	4bab      	ldr	r3, [pc, #684]	; (794 <usart_init+0x318>)
     4e6:	4798      	blx	r3
	module->character_size = config->character_size;
     4e8:	7af3      	ldrb	r3, [r6, #11]
     4ea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     4ec:	2324      	movs	r3, #36	; 0x24
     4ee:	5cf3      	ldrb	r3, [r6, r3]
     4f0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     4f2:	2325      	movs	r3, #37	; 0x25
     4f4:	5cf3      	ldrb	r3, [r6, r3]
     4f6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     4f8:	7ef3      	ldrb	r3, [r6, #27]
     4fa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     4fc:	7f33      	ldrb	r3, [r6, #28]
     4fe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     500:	682b      	ldr	r3, [r5, #0]
     502:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     504:	0018      	movs	r0, r3
     506:	4b9f      	ldr	r3, [pc, #636]	; (784 <usart_init+0x308>)
     508:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     50a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     50c:	2200      	movs	r2, #0
     50e:	230e      	movs	r3, #14
     510:	a906      	add	r1, sp, #24
     512:	468c      	mov	ip, r1
     514:	4463      	add	r3, ip
     516:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     518:	8a32      	ldrh	r2, [r6, #16]
     51a:	9202      	str	r2, [sp, #8]
     51c:	2380      	movs	r3, #128	; 0x80
     51e:	01db      	lsls	r3, r3, #7
     520:	429a      	cmp	r2, r3
     522:	d100      	bne.n	526 <usart_init+0xaa>
     524:	e09c      	b.n	660 <usart_init+0x1e4>
     526:	d90f      	bls.n	548 <usart_init+0xcc>
     528:	23c0      	movs	r3, #192	; 0xc0
     52a:	01db      	lsls	r3, r3, #7
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	429a      	cmp	r2, r3
     530:	d100      	bne.n	534 <usart_init+0xb8>
     532:	e090      	b.n	656 <usart_init+0x1da>
     534:	2380      	movs	r3, #128	; 0x80
     536:	021b      	lsls	r3, r3, #8
     538:	429a      	cmp	r2, r3
     53a:	d000      	beq.n	53e <usart_init+0xc2>
     53c:	e11d      	b.n	77a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     53e:	2303      	movs	r3, #3
     540:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     542:	2300      	movs	r3, #0
     544:	9307      	str	r3, [sp, #28]
     546:	e008      	b.n	55a <usart_init+0xde>
	switch (config->sample_rate) {
     548:	2380      	movs	r3, #128	; 0x80
     54a:	019b      	lsls	r3, r3, #6
     54c:	429a      	cmp	r2, r3
     54e:	d000      	beq.n	552 <usart_init+0xd6>
     550:	e113      	b.n	77a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     552:	2310      	movs	r3, #16
     554:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     556:	3b0f      	subs	r3, #15
     558:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     55a:	6833      	ldr	r3, [r6, #0]
     55c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     55e:	68f3      	ldr	r3, [r6, #12]
     560:	469b      	mov	fp, r3
		config->sample_adjustment |
     562:	6973      	ldr	r3, [r6, #20]
     564:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     566:	7e33      	ldrb	r3, [r6, #24]
     568:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     56a:	2326      	movs	r3, #38	; 0x26
     56c:	5cf3      	ldrb	r3, [r6, r3]
     56e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     570:	6873      	ldr	r3, [r6, #4]
     572:	4699      	mov	r9, r3
	switch (transfer_mode)
     574:	2b00      	cmp	r3, #0
     576:	d100      	bne.n	57a <usart_init+0xfe>
     578:	e09e      	b.n	6b8 <usart_init+0x23c>
     57a:	2380      	movs	r3, #128	; 0x80
     57c:	055b      	lsls	r3, r3, #21
     57e:	4599      	cmp	r9, r3
     580:	d100      	bne.n	584 <usart_init+0x108>
     582:	e082      	b.n	68a <usart_init+0x20e>
	if(config->encoding_format_enable) {
     584:	7e73      	ldrb	r3, [r6, #25]
     586:	2b00      	cmp	r3, #0
     588:	d002      	beq.n	590 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     58a:	7eb3      	ldrb	r3, [r6, #26]
     58c:	4642      	mov	r2, r8
     58e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     590:	682a      	ldr	r2, [r5, #0]
     592:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     594:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     596:	2b00      	cmp	r3, #0
     598:	d1fc      	bne.n	594 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     59a:	330e      	adds	r3, #14
     59c:	aa06      	add	r2, sp, #24
     59e:	4694      	mov	ip, r2
     5a0:	4463      	add	r3, ip
     5a2:	881b      	ldrh	r3, [r3, #0]
     5a4:	4642      	mov	r2, r8
     5a6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     5a8:	9b05      	ldr	r3, [sp, #20]
     5aa:	465a      	mov	r2, fp
     5ac:	4313      	orrs	r3, r2
     5ae:	9a03      	ldr	r2, [sp, #12]
     5b0:	4313      	orrs	r3, r2
     5b2:	464a      	mov	r2, r9
     5b4:	4313      	orrs	r3, r2
     5b6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     5b8:	9b04      	ldr	r3, [sp, #16]
     5ba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     5bc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     5be:	4653      	mov	r3, sl
     5c0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     5c2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     5c4:	2327      	movs	r3, #39	; 0x27
     5c6:	5cf3      	ldrb	r3, [r6, r3]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d101      	bne.n	5d0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     5cc:	3304      	adds	r3, #4
     5ce:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5d0:	7e73      	ldrb	r3, [r6, #25]
     5d2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5d4:	7f32      	ldrb	r2, [r6, #28]
     5d6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     5d8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5da:	7f72      	ldrb	r2, [r6, #29]
     5dc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     5de:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5e0:	2224      	movs	r2, #36	; 0x24
     5e2:	5cb2      	ldrb	r2, [r6, r2]
     5e4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     5e6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     5e8:	2225      	movs	r2, #37	; 0x25
     5ea:	5cb2      	ldrb	r2, [r6, r2]
     5ec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     5ee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     5f0:	7af1      	ldrb	r1, [r6, #11]
     5f2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     5f4:	8933      	ldrh	r3, [r6, #8]
     5f6:	2bff      	cmp	r3, #255	; 0xff
     5f8:	d100      	bne.n	5fc <usart_init+0x180>
     5fa:	e081      	b.n	700 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     5fc:	2280      	movs	r2, #128	; 0x80
     5fe:	0452      	lsls	r2, r2, #17
     600:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     602:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     604:	232c      	movs	r3, #44	; 0x2c
     606:	5cf3      	ldrb	r3, [r6, r3]
     608:	2b00      	cmp	r3, #0
     60a:	d103      	bne.n	614 <usart_init+0x198>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     60c:	4b62      	ldr	r3, [pc, #392]	; (798 <usart_init+0x31c>)
     60e:	789b      	ldrb	r3, [r3, #2]
     610:	079b      	lsls	r3, r3, #30
     612:	d501      	bpl.n	618 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     614:	2380      	movs	r3, #128	; 0x80
     616:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     618:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     61a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     61c:	2b00      	cmp	r3, #0
     61e:	d1fc      	bne.n	61a <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
     620:	4643      	mov	r3, r8
     622:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     624:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     626:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     628:	2b00      	cmp	r3, #0
     62a:	d1fc      	bne.n	626 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
     62c:	4643      	mov	r3, r8
     62e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     630:	ab0e      	add	r3, sp, #56	; 0x38
     632:	2280      	movs	r2, #128	; 0x80
     634:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     636:	2200      	movs	r2, #0
     638:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     63a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     63c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     63e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     640:	930a      	str	r3, [sp, #40]	; 0x28
     642:	6b73      	ldr	r3, [r6, #52]	; 0x34
     644:	930b      	str	r3, [sp, #44]	; 0x2c
     646:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     648:	930c      	str	r3, [sp, #48]	; 0x30
     64a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     64c:	9302      	str	r3, [sp, #8]
     64e:	930d      	str	r3, [sp, #52]	; 0x34
     650:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     652:	ae0a      	add	r6, sp, #40	; 0x28
     654:	e063      	b.n	71e <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     656:	2308      	movs	r3, #8
     658:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     65a:	3b07      	subs	r3, #7
     65c:	9307      	str	r3, [sp, #28]
     65e:	e77c      	b.n	55a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     660:	6833      	ldr	r3, [r6, #0]
     662:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     664:	68f3      	ldr	r3, [r6, #12]
     666:	469b      	mov	fp, r3
		config->sample_adjustment |
     668:	6973      	ldr	r3, [r6, #20]
     66a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     66c:	7e33      	ldrb	r3, [r6, #24]
     66e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     670:	2326      	movs	r3, #38	; 0x26
     672:	5cf3      	ldrb	r3, [r6, r3]
     674:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     676:	6873      	ldr	r3, [r6, #4]
     678:	4699      	mov	r9, r3
	switch (transfer_mode)
     67a:	2b00      	cmp	r3, #0
     67c:	d018      	beq.n	6b0 <usart_init+0x234>
     67e:	2380      	movs	r3, #128	; 0x80
     680:	055b      	lsls	r3, r3, #21
     682:	4599      	cmp	r9, r3
     684:	d001      	beq.n	68a <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
     686:	2000      	movs	r0, #0
     688:	e025      	b.n	6d6 <usart_init+0x25a>
			if (!config->use_external_clock) {
     68a:	2327      	movs	r3, #39	; 0x27
     68c:	5cf3      	ldrb	r3, [r6, r3]
     68e:	2b00      	cmp	r3, #0
     690:	d000      	beq.n	694 <usart_init+0x218>
     692:	e777      	b.n	584 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     694:	6a33      	ldr	r3, [r6, #32]
     696:	001f      	movs	r7, r3
     698:	b2c0      	uxtb	r0, r0
     69a:	4b40      	ldr	r3, [pc, #256]	; (79c <usart_init+0x320>)
     69c:	4798      	blx	r3
     69e:	0001      	movs	r1, r0
     6a0:	220e      	movs	r2, #14
     6a2:	ab06      	add	r3, sp, #24
     6a4:	469c      	mov	ip, r3
     6a6:	4462      	add	r2, ip
     6a8:	0038      	movs	r0, r7
     6aa:	4b3d      	ldr	r3, [pc, #244]	; (7a0 <usart_init+0x324>)
     6ac:	4798      	blx	r3
     6ae:	e012      	b.n	6d6 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6b0:	2308      	movs	r3, #8
     6b2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     6b4:	2300      	movs	r3, #0
     6b6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     6b8:	2327      	movs	r3, #39	; 0x27
     6ba:	5cf3      	ldrb	r3, [r6, r3]
     6bc:	2b00      	cmp	r3, #0
     6be:	d00e      	beq.n	6de <usart_init+0x262>
				status_code =
     6c0:	9b06      	ldr	r3, [sp, #24]
     6c2:	9300      	str	r3, [sp, #0]
     6c4:	9b07      	ldr	r3, [sp, #28]
     6c6:	220e      	movs	r2, #14
     6c8:	a906      	add	r1, sp, #24
     6ca:	468c      	mov	ip, r1
     6cc:	4462      	add	r2, ip
     6ce:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6d0:	6a30      	ldr	r0, [r6, #32]
     6d2:	4f34      	ldr	r7, [pc, #208]	; (7a4 <usart_init+0x328>)
     6d4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     6d6:	2800      	cmp	r0, #0
     6d8:	d000      	beq.n	6dc <usart_init+0x260>
     6da:	e6e2      	b.n	4a2 <usart_init+0x26>
     6dc:	e752      	b.n	584 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     6de:	6a33      	ldr	r3, [r6, #32]
     6e0:	001f      	movs	r7, r3
     6e2:	b2c0      	uxtb	r0, r0
     6e4:	4b2d      	ldr	r3, [pc, #180]	; (79c <usart_init+0x320>)
     6e6:	4798      	blx	r3
     6e8:	0001      	movs	r1, r0
				status_code =
     6ea:	9b06      	ldr	r3, [sp, #24]
     6ec:	9300      	str	r3, [sp, #0]
     6ee:	9b07      	ldr	r3, [sp, #28]
     6f0:	220e      	movs	r2, #14
     6f2:	a806      	add	r0, sp, #24
     6f4:	4684      	mov	ip, r0
     6f6:	4462      	add	r2, ip
     6f8:	0038      	movs	r0, r7
     6fa:	4f2a      	ldr	r7, [pc, #168]	; (7a4 <usart_init+0x328>)
     6fc:	47b8      	blx	r7
     6fe:	e7ea      	b.n	6d6 <usart_init+0x25a>
		if(config->lin_slave_enable) {
     700:	7ef3      	ldrb	r3, [r6, #27]
     702:	2b00      	cmp	r3, #0
     704:	d100      	bne.n	708 <usart_init+0x28c>
     706:	e77d      	b.n	604 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     708:	2380      	movs	r3, #128	; 0x80
     70a:	04db      	lsls	r3, r3, #19
     70c:	431f      	orrs	r7, r3
     70e:	e779      	b.n	604 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     710:	0020      	movs	r0, r4
     712:	4b25      	ldr	r3, [pc, #148]	; (7a8 <usart_init+0x32c>)
     714:	4798      	blx	r3
     716:	e007      	b.n	728 <usart_init+0x2ac>
     718:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     71a:	2f04      	cmp	r7, #4
     71c:	d00d      	beq.n	73a <usart_init+0x2be>
     71e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     720:	00bb      	lsls	r3, r7, #2
     722:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     724:	2800      	cmp	r0, #0
     726:	d0f3      	beq.n	710 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
     728:	1c43      	adds	r3, r0, #1
     72a:	d0f5      	beq.n	718 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     72c:	a90e      	add	r1, sp, #56	; 0x38
     72e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     730:	0c00      	lsrs	r0, r0, #16
     732:	b2c0      	uxtb	r0, r0
     734:	4b1d      	ldr	r3, [pc, #116]	; (7ac <usart_init+0x330>)
     736:	4798      	blx	r3
     738:	e7ee      	b.n	718 <usart_init+0x29c>
		module->callback[i]            = NULL;
     73a:	2300      	movs	r3, #0
     73c:	60eb      	str	r3, [r5, #12]
     73e:	612b      	str	r3, [r5, #16]
     740:	616b      	str	r3, [r5, #20]
     742:	61ab      	str	r3, [r5, #24]
     744:	61eb      	str	r3, [r5, #28]
     746:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     748:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     74a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     74c:	2200      	movs	r2, #0
     74e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     750:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     752:	3330      	adds	r3, #48	; 0x30
     754:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     756:	3301      	adds	r3, #1
     758:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     75a:	3301      	adds	r3, #1
     75c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     75e:	3301      	adds	r3, #1
     760:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     762:	6828      	ldr	r0, [r5, #0]
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <usart_init+0x308>)
     766:	4798      	blx	r3
     768:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     76a:	4911      	ldr	r1, [pc, #68]	; (7b0 <usart_init+0x334>)
     76c:	4b11      	ldr	r3, [pc, #68]	; (7b4 <usart_init+0x338>)
     76e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     770:	00a4      	lsls	r4, r4, #2
     772:	4b11      	ldr	r3, [pc, #68]	; (7b8 <usart_init+0x33c>)
     774:	50e5      	str	r5, [r4, r3]
	return status_code;
     776:	2000      	movs	r0, #0
     778:	e693      	b.n	4a2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     77a:	2310      	movs	r3, #16
     77c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     77e:	2300      	movs	r3, #0
     780:	9307      	str	r3, [sp, #28]
     782:	e6ea      	b.n	55a <usart_init+0xde>
     784:	00004191 	.word	0x00004191
     788:	40000400 	.word	0x40000400
     78c:	00004435 	.word	0x00004435
     790:	000043a9 	.word	0x000043a9
     794:	00003fcd 	.word	0x00003fcd
     798:	41002000 	.word	0x41002000
     79c:	00004451 	.word	0x00004451
     7a0:	00003dd5 	.word	0x00003dd5
     7a4:	00003dfd 	.word	0x00003dfd
     7a8:	00004019 	.word	0x00004019
     7ac:	0000452d 	.word	0x0000452d
     7b0:	00000931 	.word	0x00000931
     7b4:	000041cd 	.word	0x000041cd
     7b8:	20000678 	.word	0x20000678

000007bc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7bc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     7be:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     7c0:	2a00      	cmp	r2, #0
     7c2:	d101      	bne.n	7c8 <usart_write_wait+0xc>
	}
	//cpu_irq_enable();
	//Enable the interrupts

	return STATUS_OK;
}
     7c4:	0018      	movs	r0, r3
     7c6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     7c8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     7ca:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     7cc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     7ce:	2a00      	cmp	r2, #0
     7d0:	d1f8      	bne.n	7c4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     7d2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     7d4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     7d6:	2a00      	cmp	r2, #0
     7d8:	d1fc      	bne.n	7d4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     7da:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     7dc:	2102      	movs	r1, #2
     7de:	7e1a      	ldrb	r2, [r3, #24]
     7e0:	420a      	tst	r2, r1
     7e2:	d0fc      	beq.n	7de <usart_write_wait+0x22>
	return STATUS_OK;
     7e4:	2300      	movs	r3, #0
     7e6:	e7ed      	b.n	7c4 <usart_write_wait+0x8>

000007e8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ea:	46ce      	mov	lr, r9
     7ec:	4647      	mov	r7, r8
     7ee:	b580      	push	{r7, lr}
     7f0:	b083      	sub	sp, #12
     7f2:	0005      	movs	r5, r0
     7f4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     7f6:	2017      	movs	r0, #23
	if (length == 0) {
     7f8:	2a00      	cmp	r2, #0
     7fa:	d104      	bne.n	806 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     7fc:	b003      	add	sp, #12
     7fe:	bc0c      	pop	{r2, r3}
     800:	4690      	mov	r8, r2
     802:	4699      	mov	r9, r3
     804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     806:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     808:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     80a:	2b00      	cmp	r3, #0
     80c:	d0f6      	beq.n	7fc <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     80e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     810:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     812:	2b00      	cmp	r3, #0
     814:	d1fc      	bne.n	810 <usart_write_buffer_wait+0x28>
	while (length--) {
     816:	3a01      	subs	r2, #1
     818:	b293      	uxth	r3, r2
     81a:	4699      	mov	r9, r3
     81c:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     81e:	2701      	movs	r7, #1
	while (length--) {
     820:	4b1f      	ldr	r3, [pc, #124]	; (8a0 <usart_write_buffer_wait+0xb8>)
     822:	4698      	mov	r8, r3
     824:	e011      	b.n	84a <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     826:	1c73      	adds	r3, r6, #1
     828:	b29b      	uxth	r3, r3
     82a:	9a01      	ldr	r2, [sp, #4]
     82c:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     82e:	796a      	ldrb	r2, [r5, #5]
     830:	2a01      	cmp	r2, #1
     832:	d017      	beq.n	864 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     834:	b289      	uxth	r1, r1
     836:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     838:	0028      	movs	r0, r5
     83a:	4b1a      	ldr	r3, [pc, #104]	; (8a4 <usart_write_buffer_wait+0xbc>)
     83c:	4798      	blx	r3
	while (length--) {
     83e:	464b      	mov	r3, r9
     840:	3b01      	subs	r3, #1
     842:	b29b      	uxth	r3, r3
     844:	4699      	mov	r9, r3
     846:	4543      	cmp	r3, r8
     848:	d013      	beq.n	872 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     84a:	7e23      	ldrb	r3, [r4, #24]
     84c:	423b      	tst	r3, r7
     84e:	d1ea      	bne.n	826 <usart_write_buffer_wait+0x3e>
     850:	4b13      	ldr	r3, [pc, #76]	; (8a0 <usart_write_buffer_wait+0xb8>)
     852:	7e22      	ldrb	r2, [r4, #24]
     854:	423a      	tst	r2, r7
     856:	d1e6      	bne.n	826 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     858:	2b01      	cmp	r3, #1
     85a:	d019      	beq.n	890 <usart_write_buffer_wait+0xa8>
     85c:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     85e:	2b00      	cmp	r3, #0
     860:	d1f7      	bne.n	852 <usart_write_buffer_wait+0x6a>
     862:	e7e0      	b.n	826 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     864:	3602      	adds	r6, #2
     866:	b2b6      	uxth	r6, r6
     868:	9a01      	ldr	r2, [sp, #4]
     86a:	5cd3      	ldrb	r3, [r2, r3]
     86c:	021b      	lsls	r3, r3, #8
     86e:	4319      	orrs	r1, r3
     870:	e7e2      	b.n	838 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     872:	7e23      	ldrb	r3, [r4, #24]
     874:	079b      	lsls	r3, r3, #30
     876:	d40d      	bmi.n	894 <usart_write_buffer_wait+0xac>
     878:	4b09      	ldr	r3, [pc, #36]	; (8a0 <usart_write_buffer_wait+0xb8>)
     87a:	2102      	movs	r1, #2
     87c:	7e22      	ldrb	r2, [r4, #24]
     87e:	420a      	tst	r2, r1
     880:	d10a      	bne.n	898 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     882:	2b01      	cmp	r3, #1
     884:	d00a      	beq.n	89c <usart_write_buffer_wait+0xb4>
     886:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     888:	2b00      	cmp	r3, #0
     88a:	d1f7      	bne.n	87c <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     88c:	2000      	movs	r0, #0
     88e:	e7b5      	b.n	7fc <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     890:	2012      	movs	r0, #18
     892:	e7b3      	b.n	7fc <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     894:	2000      	movs	r0, #0
     896:	e7b1      	b.n	7fc <usart_write_buffer_wait+0x14>
     898:	2000      	movs	r0, #0
     89a:	e7af      	b.n	7fc <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     89c:	2012      	movs	r0, #18
     89e:	e7ad      	b.n	7fc <usart_write_buffer_wait+0x14>
     8a0:	0000ffff 	.word	0x0000ffff
     8a4:	000007bd 	.word	0x000007bd

000008a8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8aa:	0004      	movs	r4, r0
     8ac:	000d      	movs	r5, r1
     8ae:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8b0:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     8b2:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <_usart_read_buffer+0x48>)
     8b4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     8b6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     8b8:	b29b      	uxth	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d003      	beq.n	8c6 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8be:	4b0d      	ldr	r3, [pc, #52]	; (8f4 <_usart_read_buffer+0x4c>)
     8c0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     8c2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     8c6:	85a6      	strh	r6, [r4, #44]	; 0x2c
     8c8:	4b0a      	ldr	r3, [pc, #40]	; (8f4 <_usart_read_buffer+0x4c>)
     8ca:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     8cc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     8ce:	2205      	movs	r2, #5
     8d0:	2332      	movs	r3, #50	; 0x32
     8d2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     8d4:	3b2e      	subs	r3, #46	; 0x2e
     8d6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     8d8:	7a23      	ldrb	r3, [r4, #8]
     8da:	2b00      	cmp	r3, #0
     8dc:	d001      	beq.n	8e2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     8de:	2320      	movs	r3, #32
     8e0:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     8e2:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     8e4:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     8e6:	2b00      	cmp	r3, #0
     8e8:	d0ec      	beq.n	8c4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     8ea:	2308      	movs	r3, #8
     8ec:	75bb      	strb	r3, [r7, #22]
     8ee:	e7e9      	b.n	8c4 <_usart_read_buffer+0x1c>
     8f0:	00002e25 	.word	0x00002e25
     8f4:	00002e65 	.word	0x00002e65

000008f8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     8f8:	1c93      	adds	r3, r2, #2
     8fa:	009b      	lsls	r3, r3, #2
     8fc:	18c3      	adds	r3, r0, r3
     8fe:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     900:	2130      	movs	r1, #48	; 0x30
     902:	2301      	movs	r3, #1
     904:	4093      	lsls	r3, r2
     906:	001a      	movs	r2, r3
     908:	5c43      	ldrb	r3, [r0, r1]
     90a:	4313      	orrs	r3, r2
     90c:	5443      	strb	r3, [r0, r1]
}
     90e:	4770      	bx	lr

00000910 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     910:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     912:	2317      	movs	r3, #23
	if (length == 0) {
     914:	2a00      	cmp	r2, #0
     916:	d101      	bne.n	91c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     918:	0018      	movs	r0, r3
     91a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     91c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     91e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     920:	2c00      	cmp	r4, #0
     922:	d0f9      	beq.n	918 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     924:	4b01      	ldr	r3, [pc, #4]	; (92c <usart_read_buffer_job+0x1c>)
     926:	4798      	blx	r3
     928:	0003      	movs	r3, r0
     92a:	e7f5      	b.n	918 <usart_read_buffer_job+0x8>
     92c:	000008a9 	.word	0x000008a9

00000930 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     932:	0080      	lsls	r0, r0, #2
     934:	4b56      	ldr	r3, [pc, #344]	; (a90 <_usart_interrupt_handler+0x160>)
     936:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     938:	6834      	ldr	r4, [r6, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     93a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     93c:	2b00      	cmp	r3, #0
     93e:	d1fc      	bne.n	93a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     940:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     942:	7da5      	ldrb	r5, [r4, #22]
     944:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
     946:	2330      	movs	r3, #48	; 0x30
     948:	5cf3      	ldrb	r3, [r6, r3]
     94a:	2231      	movs	r2, #49	; 0x31
     94c:	5cb7      	ldrb	r7, [r6, r2]
     94e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     950:	07eb      	lsls	r3, r5, #31
     952:	d522      	bpl.n	99a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     954:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     956:	b29b      	uxth	r3, r3
     958:	2b00      	cmp	r3, #0
     95a:	d01c      	beq.n	996 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     95c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     95e:	7813      	ldrb	r3, [r2, #0]
     960:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     962:	1c51      	adds	r1, r2, #1
     964:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     966:	7971      	ldrb	r1, [r6, #5]
     968:	2901      	cmp	r1, #1
     96a:	d00e      	beq.n	98a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     96c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     96e:	05db      	lsls	r3, r3, #23
     970:	0ddb      	lsrs	r3, r3, #23
     972:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     974:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     976:	3b01      	subs	r3, #1
     978:	b29b      	uxth	r3, r3
     97a:	85f3      	strh	r3, [r6, #46]	; 0x2e
     97c:	2b00      	cmp	r3, #0
     97e:	d10c      	bne.n	99a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     980:	3301      	adds	r3, #1
     982:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     984:	3301      	adds	r3, #1
     986:	75a3      	strb	r3, [r4, #22]
     988:	e007      	b.n	99a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     98a:	7851      	ldrb	r1, [r2, #1]
     98c:	0209      	lsls	r1, r1, #8
     98e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     990:	3202      	adds	r2, #2
     992:	62b2      	str	r2, [r6, #40]	; 0x28
     994:	e7eb      	b.n	96e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     996:	2301      	movs	r3, #1
     998:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     99a:	07ab      	lsls	r3, r5, #30
     99c:	d506      	bpl.n	9ac <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     99e:	2302      	movs	r3, #2
     9a0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9a2:	2200      	movs	r2, #0
     9a4:	3331      	adds	r3, #49	; 0x31
     9a6:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9a8:	07fb      	lsls	r3, r7, #31
     9aa:	d42a      	bmi.n	a02 <_usart_interrupt_handler+0xd2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9ac:	076b      	lsls	r3, r5, #29
     9ae:	d512      	bpl.n	9d6 <_usart_interrupt_handler+0xa6>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9b0:	8b63      	ldrh	r3, [r4, #26]
     9b2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     9b4:	071a      	lsls	r2, r3, #28
     9b6:	d428      	bmi.n	a0a <_usart_interrupt_handler+0xda>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9b8:	223f      	movs	r2, #63	; 0x3f
     9ba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9bc:	2b00      	cmp	r3, #0
     9be:	d054      	beq.n	a6a <_usart_interrupt_handler+0x13a>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9c0:	079a      	lsls	r2, r3, #30
     9c2:	d525      	bpl.n	a10 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9c4:	221a      	movs	r2, #26
     9c6:	2332      	movs	r3, #50	; 0x32
     9c8:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9ca:	8b63      	ldrh	r3, [r4, #26]
     9cc:	3a18      	subs	r2, #24
     9ce:	4313      	orrs	r3, r2
     9d0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     9d2:	077b      	lsls	r3, r7, #29
     9d4:	d445      	bmi.n	a62 <_usart_interrupt_handler+0x132>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     9d6:	06eb      	lsls	r3, r5, #27
     9d8:	d504      	bpl.n	9e4 <_usart_interrupt_handler+0xb4>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     9da:	2310      	movs	r3, #16
     9dc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     9de:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     9e0:	06fb      	lsls	r3, r7, #27
     9e2:	d448      	bmi.n	a76 <_usart_interrupt_handler+0x146>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     9e4:	06ab      	lsls	r3, r5, #26
     9e6:	d504      	bpl.n	9f2 <_usart_interrupt_handler+0xc2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     9e8:	2320      	movs	r3, #32
     9ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     9ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     9ee:	073b      	lsls	r3, r7, #28
     9f0:	d445      	bmi.n	a7e <_usart_interrupt_handler+0x14e>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     9f2:	072b      	lsls	r3, r5, #28
     9f4:	d504      	bpl.n	a00 <_usart_interrupt_handler+0xd0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     9f6:	2308      	movs	r3, #8
     9f8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     9fa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     9fc:	06bb      	lsls	r3, r7, #26
     9fe:	d442      	bmi.n	a86 <_usart_interrupt_handler+0x156>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a02:	0030      	movs	r0, r6
     a04:	68f3      	ldr	r3, [r6, #12]
     a06:	4798      	blx	r3
     a08:	e7d0      	b.n	9ac <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a0a:	2237      	movs	r2, #55	; 0x37
     a0c:	4013      	ands	r3, r2
     a0e:	e7d5      	b.n	9bc <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a10:	075a      	lsls	r2, r3, #29
     a12:	d507      	bpl.n	a24 <_usart_interrupt_handler+0xf4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a14:	221e      	movs	r2, #30
     a16:	2332      	movs	r3, #50	; 0x32
     a18:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     a1a:	8b63      	ldrh	r3, [r4, #26]
     a1c:	3a1a      	subs	r2, #26
     a1e:	4313      	orrs	r3, r2
     a20:	8363      	strh	r3, [r4, #26]
     a22:	e7d6      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a24:	07da      	lsls	r2, r3, #31
     a26:	d507      	bpl.n	a38 <_usart_interrupt_handler+0x108>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a28:	2213      	movs	r2, #19
     a2a:	2332      	movs	r3, #50	; 0x32
     a2c:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a2e:	8b63      	ldrh	r3, [r4, #26]
     a30:	3a12      	subs	r2, #18
     a32:	4313      	orrs	r3, r2
     a34:	8363      	strh	r3, [r4, #26]
     a36:	e7cc      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a38:	06da      	lsls	r2, r3, #27
     a3a:	d507      	bpl.n	a4c <_usart_interrupt_handler+0x11c>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a3c:	2242      	movs	r2, #66	; 0x42
     a3e:	2332      	movs	r3, #50	; 0x32
     a40:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a42:	8b63      	ldrh	r3, [r4, #26]
     a44:	3a32      	subs	r2, #50	; 0x32
     a46:	4313      	orrs	r3, r2
     a48:	8363      	strh	r3, [r4, #26]
     a4a:	e7c2      	b.n	9d2 <_usart_interrupt_handler+0xa2>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a4c:	2220      	movs	r2, #32
     a4e:	421a      	tst	r2, r3
     a50:	d0bf      	beq.n	9d2 <_usart_interrupt_handler+0xa2>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a52:	3221      	adds	r2, #33	; 0x21
     a54:	2332      	movs	r3, #50	; 0x32
     a56:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a58:	8b63      	ldrh	r3, [r4, #26]
     a5a:	3a21      	subs	r2, #33	; 0x21
     a5c:	4313      	orrs	r3, r2
     a5e:	8363      	strh	r3, [r4, #26]
     a60:	e7b7      	b.n	9d2 <_usart_interrupt_handler+0xa2>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a62:	0030      	movs	r0, r6
     a64:	6973      	ldr	r3, [r6, #20]
     a66:	4798      	blx	r3
     a68:	e7b5      	b.n	9d6 <_usart_interrupt_handler+0xa6>
				if (callback_status
     a6a:	07bb      	lsls	r3, r7, #30
     a6c:	d5b3      	bpl.n	9d6 <_usart_interrupt_handler+0xa6>
					(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a6e:	0030      	movs	r0, r6
     a70:	6933      	ldr	r3, [r6, #16]
     a72:	4798      	blx	r3
     a74:	e7af      	b.n	9d6 <_usart_interrupt_handler+0xa6>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     a76:	0030      	movs	r0, r6
     a78:	69f3      	ldr	r3, [r6, #28]
     a7a:	4798      	blx	r3
     a7c:	e7b2      	b.n	9e4 <_usart_interrupt_handler+0xb4>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     a7e:	0030      	movs	r0, r6
     a80:	69b3      	ldr	r3, [r6, #24]
     a82:	4798      	blx	r3
     a84:	e7b5      	b.n	9f2 <_usart_interrupt_handler+0xc2>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     a86:	6a33      	ldr	r3, [r6, #32]
     a88:	0030      	movs	r0, r6
     a8a:	4798      	blx	r3
}
     a8c:	e7b8      	b.n	a00 <_usart_interrupt_handler+0xd0>
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	20000678 	.word	0x20000678

00000a94 <configure_batt_status_pins>:
#include "orb.h"
#include "battery.h"


void configure_batt_status_pins()
{
     a94:	b500      	push	{lr}
     a96:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     a98:	a901      	add	r1, sp, #4
     a9a:	2300      	movs	r3, #0
     a9c:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     a9e:	708b      	strb	r3, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     aa0:	3302      	adds	r3, #2
     aa2:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(BATT_STATUS , &config_port_pin);
     aa4:	2013      	movs	r0, #19
     aa6:	4b02      	ldr	r3, [pc, #8]	; (ab0 <configure_batt_status_pins+0x1c>)
     aa8:	4798      	blx	r3
}
     aaa:	b003      	add	sp, #12
     aac:	bd00      	pop	{pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	000035bd 	.word	0x000035bd

00000ab4 <check_batterylevel_initial>:

void check_batterylevel_initial()
{
     ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab6:	46d6      	mov	lr, sl
     ab8:	4647      	mov	r7, r8
     aba:	b580      	push	{r7, lr}
     abc:	b083      	sub	sp, #12
	uint8_t low_battery_adc = 0;
	uint8_t i=0;
	bool fade_increase = false;
	low_battery_adc = adc_start_read_result(BATT_MTR);
     abe:	200a      	movs	r0, #10
     ac0:	4b28      	ldr	r3, [pc, #160]	; (b64 <check_batterylevel_initial+0xb0>)
     ac2:	4798      	blx	r3
	while(low_battery_adc < LOW_BATTERY_THRESHOLD)
     ac4:	4b28      	ldr	r3, [pc, #160]	; (b68 <check_batterylevel_initial+0xb4>)
     ac6:	4798      	blx	r3
     ac8:	4a28      	ldr	r2, [pc, #160]	; (b6c <check_batterylevel_initial+0xb8>)
     aca:	4b29      	ldr	r3, [pc, #164]	; (b70 <check_batterylevel_initial+0xbc>)
     acc:	4c29      	ldr	r4, [pc, #164]	; (b74 <check_batterylevel_initial+0xc0>)
     ace:	47a0      	blx	r4
     ad0:	2700      	movs	r7, #0
     ad2:	2400      	movs	r4, #0
     ad4:	2800      	cmp	r0, #0
     ad6:	d03a      	beq.n	b4e <check_batterylevel_initial+0x9a>
	{
		low_battery_adc = adc_start_read_result(BATT_MTR);
     ad8:	4e22      	ldr	r6, [pc, #136]	; (b64 <check_batterylevel_initial+0xb0>)
		if(fade_increase == false)
		{
			set_led_left_new(RED_MAX-i, 0, 0);
     ada:	4b27      	ldr	r3, [pc, #156]	; (b78 <check_batterylevel_initial+0xc4>)
     adc:	469a      	mov	sl, r3
			set_led_right_new(RED_MAX-i,0, 0);
     ade:	4b27      	ldr	r3, [pc, #156]	; (b7c <check_batterylevel_initial+0xc8>)
     ae0:	4698      	mov	r8, r3
     ae2:	e019      	b.n	b18 <check_batterylevel_initial+0x64>
			}
			
		}
		else
		{
			set_led_left_new(i, 0, 0);
     ae4:	2200      	movs	r2, #0
     ae6:	2100      	movs	r1, #0
     ae8:	0020      	movs	r0, r4
     aea:	4b23      	ldr	r3, [pc, #140]	; (b78 <check_batterylevel_initial+0xc4>)
     aec:	4798      	blx	r3
			set_led_right_new(i,0, 0);
     aee:	2200      	movs	r2, #0
     af0:	2100      	movs	r1, #0
     af2:	0020      	movs	r0, r4
     af4:	4b21      	ldr	r3, [pc, #132]	; (b7c <check_batterylevel_initial+0xc8>)
     af6:	4798      	blx	r3
			i++;
     af8:	3401      	adds	r4, #1
     afa:	b2e4      	uxtb	r4, r4
			if(i > RED_MAX)
     afc:	2cff      	cmp	r4, #255	; 0xff
     afe:	d023      	beq.n	b48 <check_batterylevel_initial+0x94>
				i=0;
				fade_increase = false;
			}
			
		}
		delay_cycles_ms(3);
     b00:	2003      	movs	r0, #3
     b02:	4b1f      	ldr	r3, [pc, #124]	; (b80 <check_batterylevel_initial+0xcc>)
     b04:	4798      	blx	r3
	while(low_battery_adc < LOW_BATTERY_THRESHOLD)
     b06:	9801      	ldr	r0, [sp, #4]
     b08:	4b17      	ldr	r3, [pc, #92]	; (b68 <check_batterylevel_initial+0xb4>)
     b0a:	4798      	blx	r3
     b0c:	4a17      	ldr	r2, [pc, #92]	; (b6c <check_batterylevel_initial+0xb8>)
     b0e:	4b18      	ldr	r3, [pc, #96]	; (b70 <check_batterylevel_initial+0xbc>)
     b10:	4d18      	ldr	r5, [pc, #96]	; (b74 <check_batterylevel_initial+0xc0>)
     b12:	47a8      	blx	r5
     b14:	2800      	cmp	r0, #0
     b16:	d01a      	beq.n	b4e <check_batterylevel_initial+0x9a>
		low_battery_adc = adc_start_read_result(BATT_MTR);
     b18:	200a      	movs	r0, #10
     b1a:	47b0      	blx	r6
     b1c:	9001      	str	r0, [sp, #4]
		if(fade_increase == false)
     b1e:	2f00      	cmp	r7, #0
     b20:	d1e0      	bne.n	ae4 <check_batterylevel_initial+0x30>
			set_led_left_new(RED_MAX-i, 0, 0);
     b22:	2502      	movs	r5, #2
     b24:	426d      	negs	r5, r5
     b26:	1b2d      	subs	r5, r5, r4
     b28:	b2ed      	uxtb	r5, r5
     b2a:	2200      	movs	r2, #0
     b2c:	2100      	movs	r1, #0
     b2e:	0028      	movs	r0, r5
     b30:	47d0      	blx	sl
			set_led_right_new(RED_MAX-i,0, 0);
     b32:	2200      	movs	r2, #0
     b34:	2100      	movs	r1, #0
     b36:	0028      	movs	r0, r5
     b38:	47c0      	blx	r8
			i++;
     b3a:	3401      	adds	r4, #1
     b3c:	b2e4      	uxtb	r4, r4
			if(i > RED_MAX)
     b3e:	2cff      	cmp	r4, #255	; 0xff
     b40:	d1de      	bne.n	b00 <check_batterylevel_initial+0x4c>
				fade_increase = true;
     b42:	3701      	adds	r7, #1
				i=0;
     b44:	2400      	movs	r4, #0
     b46:	e7db      	b.n	b00 <check_batterylevel_initial+0x4c>
				fade_increase = false;
     b48:	2700      	movs	r7, #0
				i=0;
     b4a:	2400      	movs	r4, #0
     b4c:	e7d8      	b.n	b00 <check_batterylevel_initial+0x4c>
		//motors_stop();
		//turn_off_motors();
	}
	set_led_left_new(20, 20, 20);
     b4e:	2214      	movs	r2, #20
     b50:	2114      	movs	r1, #20
     b52:	2014      	movs	r0, #20
     b54:	4b08      	ldr	r3, [pc, #32]	; (b78 <check_batterylevel_initial+0xc4>)
     b56:	4798      	blx	r3
	
}
     b58:	b003      	add	sp, #12
     b5a:	bc0c      	pop	{r2, r3}
     b5c:	4690      	mov	r8, r2
     b5e:	469a      	mov	sl, r3
     b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	00006ca9 	.word	0x00006ca9
     b68:	0000b881 	.word	0x0000b881
     b6c:	5b5f4f8f 	.word	0x5b5f4f8f
     b70:	40650c1c 	.word	0x40650c1c
     b74:	00009041 	.word	0x00009041
     b78:	00001145 	.word	0x00001145
     b7c:	00001159 	.word	0x00001159
     b80:	000019f9 	.word	0x000019f9

00000b84 <configure_batt_status>:

void configure_batt_status()
{
     b84:	b510      	push	{r4, lr}
	configure_batt_status_pins();
     b86:	4b01      	ldr	r3, [pc, #4]	; (b8c <configure_batt_status+0x8>)
     b88:	4798      	blx	r3
     b8a:	bd10      	pop	{r4, pc}
     b8c:	00000a95 	.word	0x00000a95

00000b90 <board_init>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void board_init(void)
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     b90:	4a40      	ldr	r2, [pc, #256]	; (c94 <board_init+0x104>)
     b92:	6853      	ldr	r3, [r2, #4]
     b94:	211e      	movs	r1, #30
     b96:	438b      	bics	r3, r1
     b98:	391c      	subs	r1, #28
     b9a:	430b      	orrs	r3, r1
     b9c:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     b9e:	4a3e      	ldr	r2, [pc, #248]	; (c98 <board_init+0x108>)
     ba0:	6993      	ldr	r3, [r2, #24]
     ba2:	3106      	adds	r1, #6
     ba4:	430b      	orrs	r3, r1
     ba6:	6193      	str	r3, [r2, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     ba8:	4b3c      	ldr	r3, [pc, #240]	; (c9c <board_init+0x10c>)
     baa:	4a3d      	ldr	r2, [pc, #244]	; (ca0 <board_init+0x110>)
     bac:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K;
  SYSCTRL->XOSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     bae:	8a9a      	ldrh	r2, [r3, #20]
     bb0:	2102      	movs	r1, #2
     bb2:	430a      	orrs	r2, r1
     bb4:	829a      	strh	r2, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     bb6:	0019      	movs	r1, r3
     bb8:	2202      	movs	r2, #2
     bba:	68cb      	ldr	r3, [r1, #12]
     bbc:	421a      	tst	r2, r3
     bbe:	d0fc      	beq.n	bba <board_init+0x2a>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     bc0:	2201      	movs	r2, #1
     bc2:	4b38      	ldr	r3, [pc, #224]	; (ca4 <board_init+0x114>)
     bc4:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     bc6:	001a      	movs	r2, r3
     bc8:	2101      	movs	r1, #1
     bca:	7813      	ldrb	r3, [r2, #0]
     bcc:	420b      	tst	r3, r1
     bce:	d003      	beq.n	bd8 <board_init+0x48>
     bd0:	7853      	ldrb	r3, [r2, #1]
     bd2:	b25b      	sxtb	r3, r3
     bd4:	2b00      	cmp	r3, #0
     bd6:	dbf8      	blt.n	bca <board_init+0x3a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ); // Generic Clock Generator 1
     bd8:	2201      	movs	r2, #1
     bda:	4b32      	ldr	r3, [pc, #200]	; (ca4 <board_init+0x114>)
     bdc:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     bde:	001a      	movs	r2, r3
     be0:	7853      	ldrb	r3, [r2, #1]
     be2:	b25b      	sxtb	r3, r3
     be4:	2b00      	cmp	r3, #0
     be6:	dbfb      	blt.n	be0 <board_init+0x50>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
     be8:	4a2f      	ldr	r2, [pc, #188]	; (ca8 <board_init+0x118>)
     bea:	4b2e      	ldr	r3, [pc, #184]	; (ca4 <board_init+0x114>)
     bec:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     bee:	001a      	movs	r2, r3
     bf0:	7853      	ldrb	r3, [r2, #1]
     bf2:	b25b      	sxtb	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	dbfb      	blt.n	bf0 <board_init+0x60>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     bf8:	2282      	movs	r2, #130	; 0x82
     bfa:	01d2      	lsls	r2, r2, #7
     bfc:	4b29      	ldr	r3, [pc, #164]	; (ca4 <board_init+0x114>)
     bfe:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c00:	001a      	movs	r2, r3
     c02:	7853      	ldrb	r3, [r2, #1]
     c04:	b25b      	sxtb	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	dbfb      	blt.n	c02 <board_init+0x72>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     c0a:	4a24      	ldr	r2, [pc, #144]	; (c9c <board_init+0x10c>)
     c0c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c0e:	2180      	movs	r1, #128	; 0x80
     c10:	438b      	bics	r3, r1
     c12:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c14:	0011      	movs	r1, r2
     c16:	2210      	movs	r2, #16
     c18:	68cb      	ldr	r3, [r1, #12]
     c1a:	421a      	tst	r2, r3
     c1c:	d0fc      	beq.n	c18 <board_init+0x88>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     c1e:	4a23      	ldr	r2, [pc, #140]	; (cac <board_init+0x11c>)
     c20:	4b1e      	ldr	r3, [pc, #120]	; (c9c <board_init+0x10c>)
     c22:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ); // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c24:	0019      	movs	r1, r3
     c26:	2210      	movs	r2, #16
     c28:	68cb      	ldr	r3, [r1, #12]
     c2a:	421a      	tst	r2, r3
     c2c:	d0fc      	beq.n	c28 <board_init+0x98>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     c2e:	4a1b      	ldr	r2, [pc, #108]	; (c9c <board_init+0x10c>)
     c30:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c32:	491f      	ldr	r1, [pc, #124]	; (cb0 <board_init+0x120>)
     c34:	430b      	orrs	r3, r1
     c36:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c38:	0011      	movs	r1, r2
     c3a:	2210      	movs	r2, #16
     c3c:	68cb      	ldr	r3, [r1, #12]
     c3e:	421a      	tst	r2, r3
     c40:	d0fc      	beq.n	c3c <board_init+0xac>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE;
     c42:	4a16      	ldr	r2, [pc, #88]	; (c9c <board_init+0x10c>)
     c44:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     c46:	2102      	movs	r1, #2
     c48:	430b      	orrs	r3, r1
     c4a:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c4c:	317e      	adds	r1, #126	; 0x7e
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c4e:	2040      	movs	r0, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c50:	68d3      	ldr	r3, [r2, #12]
     c52:	4219      	tst	r1, r3
     c54:	d0fc      	beq.n	c50 <board_init+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     c56:	68d3      	ldr	r3, [r2, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     c58:	4218      	tst	r0, r3
     c5a:	d0f9      	beq.n	c50 <board_init+0xc0>
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     c5c:	490f      	ldr	r1, [pc, #60]	; (c9c <board_init+0x10c>)
     c5e:	2210      	movs	r2, #16
     c60:	68cb      	ldr	r3, [r1, #12]
     c62:	421a      	tst	r2, r3
     c64:	d0fc      	beq.n	c60 <board_init+0xd0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ); // Generic Clock Generator 0
     c66:	2200      	movs	r2, #0
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <board_init+0x114>)
     c6a:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c6c:	001a      	movs	r2, r3
     c6e:	7853      	ldrb	r3, [r2, #1]
     c70:	b25b      	sxtb	r3, r3
     c72:	2b00      	cmp	r3, #0
     c74:	dbfb      	blt.n	c6e <board_init+0xde>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <board_init+0x124>)
     c78:	4b0a      	ldr	r3, [pc, #40]	; (ca4 <board_init+0x114>)
     c7a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     c7c:	001a      	movs	r2, r3
     c7e:	7853      	ldrb	r3, [r2, #1]
     c80:	b25b      	sxtb	r3, r3
     c82:	2b00      	cmp	r3, #0
     c84:	dbfb      	blt.n	c7e <board_init+0xee>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * These values are normally the ones present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1;
     c86:	4b04      	ldr	r3, [pc, #16]	; (c98 <board_init+0x108>)
     c88:	2200      	movs	r2, #0
     c8a:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val;
     c8c:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val;
     c8e:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val;
     c90:	72da      	strb	r2, [r3, #11]
  
  /* Initialize External hardware */
  
}
     c92:	4770      	bx	lr
     c94:	41004000 	.word	0x41004000
     c98:	40000400 	.word	0x40000400
     c9c:	40000800 	.word	0x40000800
     ca0:	0000060c 	.word	0x0000060c
     ca4:	40000c00 	.word	0x40000c00
     ca8:	00010501 	.word	0x00010501
     cac:	7dff05b8 	.word	0x7dff05b8
     cb0:	00000a04 	.word	0x00000a04
     cb4:	00030700 	.word	0x00030700

00000cb8 <write_data_encoders>:
	
}

// Helper function to just execute a simple write
void write_data_encoders(uint8_t *bufferSend, uint8_t length, struct i2c_master_module *const module)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	b084      	sub	sp, #16
     cbc:	0016      	movs	r6, r2
	struct i2c_master_packet packet = {
     cbe:	ab01      	add	r3, sp, #4
     cc0:	225e      	movs	r2, #94	; 0x5e
     cc2:	801a      	strh	r2, [r3, #0]
     cc4:	8059      	strh	r1, [r3, #2]
     cc6:	9002      	str	r0, [sp, #8]
     cc8:	2200      	movs	r2, #0
     cca:	721a      	strb	r2, [r3, #8]
     ccc:	725a      	strb	r2, [r3, #9]
     cce:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		error_code = i2c_master_write_packet_wait(module, &packet);
     cd0:	4d04      	ldr	r5, [pc, #16]	; (ce4 <write_data_encoders+0x2c>)
     cd2:	4c05      	ldr	r4, [pc, #20]	; (ce8 <write_data_encoders+0x30>)
     cd4:	a901      	add	r1, sp, #4
     cd6:	0030      	movs	r0, r6
     cd8:	47a8      	blx	r5
     cda:	7020      	strb	r0, [r4, #0]
		
	}
	while (error_code != STATUS_OK);
     cdc:	2800      	cmp	r0, #0
     cde:	d1f9      	bne.n	cd4 <write_data_encoders+0x1c>
	
}
     ce0:	b004      	add	sp, #16
     ce2:	bd70      	pop	{r4, r5, r6, pc}
     ce4:	00003af5 	.word	0x00003af5
     ce8:	2000052c 	.word	0x2000052c

00000cec <config_I2C_SERCOM4>:

void config_I2C_SERCOM4()
{
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	b08e      	sub	sp, #56	; 0x38
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     cf0:	ab01      	add	r3, sp, #4
     cf2:	4a24      	ldr	r2, [pc, #144]	; (d84 <config_I2C_SERCOM4+0x98>)
     cf4:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     cf6:	2200      	movs	r2, #0
     cf8:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     cfa:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     cfc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     cfe:	2101      	movs	r1, #1
     d00:	4249      	negs	r1, r1
     d02:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d04:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d06:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
     d08:	3125      	adds	r1, #37	; 0x25
     d0a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     d0c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     d0e:	3108      	adds	r1, #8
     d10:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     d12:	3101      	adds	r1, #1
     d14:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     d16:	3101      	adds	r1, #1
     d18:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     d1a:	32d7      	adds	r2, #215	; 0xd7
     d1c:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
     d1e:	4a1a      	ldr	r2, [pc, #104]	; (d88 <config_I2C_SERCOM4+0x9c>)
     d20:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     d22:	22c8      	movs	r2, #200	; 0xc8
     d24:	0052      	lsls	r2, r2, #1
     d26:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
     d28:	22c0      	movs	r2, #192	; 0xc0
     d2a:	0392      	lsls	r2, r2, #14
     d2c:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do 
	{
		error_code = i2c_master_init(&i2c_master_encoder_right, RIGHT_ENCODER_SERCOMM_4, &config_i2c_master);
     d2e:	4e17      	ldr	r6, [pc, #92]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d30:	4d17      	ldr	r5, [pc, #92]	; (d90 <config_I2C_SERCOM4+0xa4>)
     d32:	4c18      	ldr	r4, [pc, #96]	; (d94 <config_I2C_SERCOM4+0xa8>)
     d34:	aa01      	add	r2, sp, #4
     d36:	4918      	ldr	r1, [pc, #96]	; (d98 <config_I2C_SERCOM4+0xac>)
     d38:	0030      	movs	r0, r6
     d3a:	47a8      	blx	r5
     d3c:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
     d3e:	2800      	cmp	r0, #0
     d40:	d1f8      	bne.n	d34 <config_I2C_SERCOM4+0x48>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d42:	4b12      	ldr	r3, [pc, #72]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d44:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d46:	2207      	movs	r2, #7
     d48:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     d4a:	421a      	tst	r2, r3
     d4c:	d1fc      	bne.n	d48 <config_I2C_SERCOM4+0x5c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     d4e:	6823      	ldr	r3, [r4, #0]
     d50:	2202      	movs	r2, #2
     d52:	4313      	orrs	r3, r2
     d54:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d56:	4d0d      	ldr	r5, [pc, #52]	; (d8c <config_I2C_SERCOM4+0xa0>)
     d58:	6828      	ldr	r0, [r5, #0]
     d5a:	4b10      	ldr	r3, [pc, #64]	; (d9c <config_I2C_SERCOM4+0xb0>)
     d5c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d5e:	231f      	movs	r3, #31
     d60:	4018      	ands	r0, r3
     d62:	3b1e      	subs	r3, #30
     d64:	4083      	lsls	r3, r0
     d66:	4a0e      	ldr	r2, [pc, #56]	; (da0 <config_I2C_SERCOM4+0xb4>)
     d68:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     d6a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     d6c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     d6e:	2110      	movs	r1, #16
     d70:	8b62      	ldrh	r2, [r4, #26]
     d72:	420a      	tst	r2, r1
     d74:	d104      	bne.n	d80 <config_I2C_SERCOM4+0x94>
		timeout_counter++;
     d76:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     d78:	4283      	cmp	r3, r0
     d7a:	d3f9      	bcc.n	d70 <config_I2C_SERCOM4+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     d7c:	2310      	movs	r3, #16
     d7e:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder_right);
}
     d80:	b00e      	add	sp, #56	; 0x38
     d82:	bd70      	pop	{r4, r5, r6, pc}
     d84:	00000d48 	.word	0x00000d48
     d88:	ffff9c40 	.word	0xffff9c40
     d8c:	200004dc 	.word	0x200004dc
     d90:	000035ed 	.word	0x000035ed
     d94:	2000052c 	.word	0x2000052c
     d98:	42001800 	.word	0x42001800
     d9c:	00004209 	.word	0x00004209
     da0:	e000e100 	.word	0xe000e100

00000da4 <config_I2C_SERCOM3>:

void config_I2C_SERCOM3()
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	b08e      	sub	sp, #56	; 0x38
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     da8:	ab01      	add	r3, sp, #4
     daa:	4a24      	ldr	r2, [pc, #144]	; (e3c <config_I2C_SERCOM3+0x98>)
     dac:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     dae:	2200      	movs	r2, #0
     db0:	9203      	str	r2, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
     db2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     db4:	761a      	strb	r2, [r3, #24]
	config->unknown_bus_state_timeout = 65535;
     db6:	2101      	movs	r1, #1
     db8:	4249      	negs	r1, r1
     dba:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     dbc:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     dbe:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
     dc0:	3125      	adds	r1, #37	; 0x25
     dc2:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     dc4:	920b      	str	r2, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
     dc6:	3108      	adds	r1, #8
     dc8:	545a      	strb	r2, [r3, r1]
	config->slave_scl_low_extend_timeout   = false;
     dca:	3101      	adds	r1, #1
     dcc:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     dce:	3101      	adds	r1, #1
     dd0:	545a      	strb	r2, [r3, r1]
	config->sda_scl_rise_time_ns = 215;
     dd2:	32d7      	adds	r2, #215	; 0xd7
     dd4:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
     dd6:	4a1a      	ldr	r2, [pc, #104]	; (e40 <config_I2C_SERCOM3+0x9c>)
     dd8:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     dda:	22c8      	movs	r2, #200	; 0xc8
     ddc:	0052      	lsls	r2, r2, #1
     dde:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
     de0:	22c0      	movs	r2, #192	; 0xc0
     de2:	0392      	lsls	r2, r2, #14
     de4:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do
	{
		error_code = i2c_master_init(&i2c_master_encoder_left, LEFT_ENCODER_SERCOMM_3, &config_i2c_master);
     de6:	4e17      	ldr	r6, [pc, #92]	; (e44 <config_I2C_SERCOM3+0xa0>)
     de8:	4d17      	ldr	r5, [pc, #92]	; (e48 <config_I2C_SERCOM3+0xa4>)
     dea:	4c18      	ldr	r4, [pc, #96]	; (e4c <config_I2C_SERCOM3+0xa8>)
     dec:	aa01      	add	r2, sp, #4
     dee:	4918      	ldr	r1, [pc, #96]	; (e50 <config_I2C_SERCOM3+0xac>)
     df0:	0030      	movs	r0, r6
     df2:	47a8      	blx	r5
     df4:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
     df6:	2800      	cmp	r0, #0
     df8:	d1f8      	bne.n	dec <config_I2C_SERCOM3+0x48>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dfa:	4b12      	ldr	r3, [pc, #72]	; (e44 <config_I2C_SERCOM3+0xa0>)
     dfc:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     dfe:	2207      	movs	r2, #7
     e00:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     e02:	421a      	tst	r2, r3
     e04:	d1fc      	bne.n	e00 <config_I2C_SERCOM3+0x5c>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     e06:	6823      	ldr	r3, [r4, #0]
     e08:	2202      	movs	r2, #2
     e0a:	4313      	orrs	r3, r2
     e0c:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e0e:	4d0d      	ldr	r5, [pc, #52]	; (e44 <config_I2C_SERCOM3+0xa0>)
     e10:	6828      	ldr	r0, [r5, #0]
     e12:	4b10      	ldr	r3, [pc, #64]	; (e54 <config_I2C_SERCOM3+0xb0>)
     e14:	4798      	blx	r3
     e16:	231f      	movs	r3, #31
     e18:	4018      	ands	r0, r3
     e1a:	3b1e      	subs	r3, #30
     e1c:	4083      	lsls	r3, r0
     e1e:	4a0e      	ldr	r2, [pc, #56]	; (e58 <config_I2C_SERCOM3+0xb4>)
     e20:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e22:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     e24:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     e26:	2110      	movs	r1, #16
     e28:	8b62      	ldrh	r2, [r4, #26]
     e2a:	420a      	tst	r2, r1
     e2c:	d104      	bne.n	e38 <config_I2C_SERCOM3+0x94>
		timeout_counter++;
     e2e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     e30:	4283      	cmp	r3, r0
     e32:	d3f9      	bcc.n	e28 <config_I2C_SERCOM3+0x84>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     e34:	2310      	movs	r3, #16
     e36:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder_left);
}
     e38:	b00e      	add	sp, #56	; 0x38
     e3a:	bd70      	pop	{r4, r5, r6, pc}
     e3c:	00000d48 	.word	0x00000d48
     e40:	ffff9c40 	.word	0xffff9c40
     e44:	20000504 	.word	0x20000504
     e48:	000035ed 	.word	0x000035ed
     e4c:	2000052c 	.word	0x2000052c
     e50:	42001400 	.word	0x42001400
     e54:	00004209 	.word	0x00004209
     e58:	e000e100 	.word	0xe000e100

00000e5c <initialize_left_encoder>:


void initialize_left_encoder()
{
     e5c:	b500      	push	{lr}
     e5e:	b083      	sub	sp, #12
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
     e60:	a801      	add	r0, sp, #4
     e62:	2300      	movs	r3, #0
     e64:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000110;
     e66:	2206      	movs	r2, #6
     e68:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
     e6a:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;  
     e6c:	3380      	adds	r3, #128	; 0x80
     e6e:	70c3      	strb	r3, [r0, #3]
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder_left);
     e70:	4a02      	ldr	r2, [pc, #8]	; (e7c <initialize_left_encoder+0x20>)
     e72:	2104      	movs	r1, #4
     e74:	4b02      	ldr	r3, [pc, #8]	; (e80 <initialize_left_encoder+0x24>)
     e76:	4798      	blx	r3
	
}
     e78:	b003      	add	sp, #12
     e7a:	bd00      	pop	{pc}
     e7c:	20000504 	.word	0x20000504
     e80:	00000cb9 	.word	0x00000cb9

00000e84 <initialize_right_encoder>:

void initialize_right_encoder()
{
     e84:	b500      	push	{lr}
     e86:	b083      	sub	sp, #12
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
     e88:	a801      	add	r0, sp, #4
     e8a:	2300      	movs	r3, #0
     e8c:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000110;
     e8e:	2206      	movs	r2, #6
     e90:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
     e92:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;
     e94:	3380      	adds	r3, #128	; 0x80
     e96:	70c3      	strb	r3, [r0, #3]
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder_right);
     e98:	4a02      	ldr	r2, [pc, #8]	; (ea4 <initialize_right_encoder+0x20>)
     e9a:	2104      	movs	r1, #4
     e9c:	4b02      	ldr	r3, [pc, #8]	; (ea8 <initialize_right_encoder+0x24>)
     e9e:	4798      	blx	r3
	
}
     ea0:	b003      	add	sp, #12
     ea2:	bd00      	pop	{pc}
     ea4:	200004dc 	.word	0x200004dc
     ea8:	00000cb9 	.word	0x00000cb9

00000eac <config_left_encoder>:

void config_left_encoder()
{
     eac:	b510      	push	{r4, lr}
	config_I2C_SERCOM3(); //have to change
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <config_left_encoder+0xc>)
     eb0:	4798      	blx	r3
	initialize_left_encoder();
     eb2:	4b02      	ldr	r3, [pc, #8]	; (ebc <config_left_encoder+0x10>)
     eb4:	4798      	blx	r3
}
     eb6:	bd10      	pop	{r4, pc}
     eb8:	00000da5 	.word	0x00000da5
     ebc:	00000e5d 	.word	0x00000e5d

00000ec0 <config_right_encoder>:

void config_right_encoder()
{
     ec0:	b510      	push	{r4, lr}
	config_I2C_SERCOM4(); 
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <config_right_encoder+0xc>)
     ec4:	4798      	blx	r3
	initialize_right_encoder();
     ec6:	4b02      	ldr	r3, [pc, #8]	; (ed0 <config_right_encoder+0x10>)
     ec8:	4798      	blx	r3
	
}
     eca:	bd10      	pop	{r4, pc}
     ecc:	00000ced 	.word	0x00000ced
     ed0:	00000e85 	.word	0x00000e85

00000ed4 <config_encoders_modules>:
void config_encoders_modules()
{
     ed4:	b510      	push	{r4, lr}
	config_right_encoder();
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <config_encoders_modules+0xc>)
     ed8:	4798      	blx	r3
	config_left_encoder();
     eda:	4b02      	ldr	r3, [pc, #8]	; (ee4 <config_encoders_modules+0x10>)
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}
     ee0:	00000ec1 	.word	0x00000ec1
     ee4:	00000ead 	.word	0x00000ead

00000ee8 <configure_encoders>:
void configure_encoders()
{
     ee8:	b510      	push	{r4, lr}
	config_encoders_modules();
     eea:	4b01      	ldr	r3, [pc, #4]	; (ef0 <configure_encoders+0x8>)
     eec:	4798      	blx	r3
}
     eee:	bd10      	pop	{r4, pc}
     ef0:	00000ed5 	.word	0x00000ed5

00000ef4 <tc_callback_PWM>:
//Sad used a bubble sort , six elements so did not spend much time on writing a  beautiful code

//! [callback_funcs]
void tc_callback_PWM(
struct tc_module *const module_inst)
{
     ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef6:	46de      	mov	lr, fp
     ef8:	4657      	mov	r7, sl
     efa:	4646      	mov	r6, r8
     efc:	b5c0      	push	{r6, r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	9001      	str	r0, [sp, #4]
	volatile uint32_t count;
	//count = tc_get_count_value(&tc_instance);
	//tc_stop_counter(&tc_instance);
	//count = count +1;
	//Enable the LED
	if(first_time == false)
     f02:	4b51      	ldr	r3, [pc, #324]	; (1048 <tc_callback_PWM+0x154>)
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	2b00      	cmp	r3, #0
     f08:	d000      	beq.n	f0c <tc_callback_PWM+0x18>
     f0a:	e094      	b.n	1036 <tc_callback_PWM+0x142>
	{
		port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f0c:	4a4f      	ldr	r2, [pc, #316]	; (104c <tc_callback_PWM+0x158>)
     f0e:	7813      	ldrb	r3, [r2, #0]
     f10:	1c59      	adds	r1, r3, #1
     f12:	b2c9      	uxtb	r1, r1
     f14:	7011      	strb	r1, [r2, #0]
     f16:	4a4e      	ldr	r2, [pc, #312]	; (1050 <tc_callback_PWM+0x15c>)
     f18:	5cd2      	ldrb	r2, [r2, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f1a:	09d0      	lsrs	r0, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f1c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     f1e:	2800      	cmp	r0, #0
     f20:	d104      	bne.n	f2c <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
     f22:	0953      	lsrs	r3, r2, #5
     f24:	01db      	lsls	r3, r3, #7
     f26:	484b      	ldr	r0, [pc, #300]	; (1054 <tc_callback_PWM+0x160>)
     f28:	4684      	mov	ip, r0
     f2a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f2c:	201f      	movs	r0, #31
     f2e:	4010      	ands	r0, r2
     f30:	2201      	movs	r2, #1
     f32:	4082      	lsls	r2, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f34:	615a      	str	r2, [r3, #20]
		 
		if(time_array_ID < N_valid_compares-1 )
     f36:	4b48      	ldr	r3, [pc, #288]	; (1058 <tc_callback_PWM+0x164>)
     f38:	781e      	ldrb	r6, [r3, #0]
     f3a:	4b48      	ldr	r3, [pc, #288]	; (105c <tc_callback_PWM+0x168>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	3b01      	subs	r3, #1
     f40:	4698      	mov	r8, r3
     f42:	429e      	cmp	r6, r3
     f44:	db00      	blt.n	f48 <tc_callback_PWM+0x54>
     f46:	e070      	b.n	102a <tc_callback_PWM+0x136>
		{
			compare_value_last = time_array[time_array_ID];
     f48:	4845      	ldr	r0, [pc, #276]	; (1060 <tc_callback_PWM+0x16c>)
     f4a:	5d82      	ldrb	r2, [r0, r6]
     f4c:	4b45      	ldr	r3, [pc, #276]	; (1064 <tc_callback_PWM+0x170>)
     f4e:	701a      	strb	r2, [r3, #0]
			compare_value_current = time_array[++time_array_ID];
     f50:	3601      	adds	r6, #1
     f52:	b2f6      	uxtb	r6, r6
     f54:	4b40      	ldr	r3, [pc, #256]	; (1058 <tc_callback_PWM+0x164>)
     f56:	701e      	strb	r6, [r3, #0]
     f58:	0033      	movs	r3, r6
     f5a:	5d85      	ldrb	r5, [r0, r6]
     f5c:	4842      	ldr	r0, [pc, #264]	; (1068 <tc_callback_PWM+0x174>)
     f5e:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f60:	42aa      	cmp	r2, r5
     f62:	d135      	bne.n	fd0 <tc_callback_PWM+0xdc>
     f64:	45b0      	cmp	r8, r6
     f66:	db53      	blt.n	1010 <tc_callback_PWM+0x11c>
     f68:	0008      	movs	r0, r1
			{
				//Enable the LED
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f6a:	4a39      	ldr	r2, [pc, #228]	; (1050 <tc_callback_PWM+0x15c>)
     f6c:	4693      	mov	fp, r2
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f6e:	221f      	movs	r2, #31
     f70:	4692      	mov	sl, r2
     f72:	2701      	movs	r7, #1
				compare_value_last = time_array[time_array_ID];
     f74:	4c3a      	ldr	r4, [pc, #232]	; (1060 <tc_callback_PWM+0x16c>)
     f76:	1a76      	subs	r6, r6, r1
     f78:	e00f      	b.n	f9a <tc_callback_PWM+0xa6>
     f7a:	4655      	mov	r5, sl
     f7c:	402a      	ands	r2, r5
     f7e:	003d      	movs	r5, r7
     f80:	4095      	lsls	r5, r2
		port_base->OUTCLR.reg = pin_mask;
     f82:	6145      	str	r5, [r0, #20]
     f84:	5ce2      	ldrb	r2, [r4, r3]
     f86:	198b      	adds	r3, r1, r6
     f88:	b2db      	uxtb	r3, r3
				compare_value_current = time_array[++time_array_ID];
     f8a:	9300      	str	r3, [sp, #0]
     f8c:	5ce0      	ldrb	r0, [r4, r3]
     f8e:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f90:	4282      	cmp	r2, r0
     f92:	d112      	bne.n	fba <tc_callback_PWM+0xc6>
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f94:	0008      	movs	r0, r1
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
     f96:	4598      	cmp	r8, r3
     f98:	db2d      	blt.n	ff6 <tc_callback_PWM+0x102>
				port_pin_set_output_level(led_array[led_array_ID++],RGB_LED_DISABLE);
     f9a:	1c41      	adds	r1, r0, #1
     f9c:	b2c9      	uxtb	r1, r1
     f9e:	465a      	mov	r2, fp
     fa0:	5c12      	ldrb	r2, [r2, r0]
	if (port_index < PORT_INST_NUM) {
     fa2:	09d0      	lsrs	r0, r2, #7
     fa4:	4684      	mov	ip, r0
		return NULL;
     fa6:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
     fa8:	4665      	mov	r5, ip
     faa:	2d00      	cmp	r5, #0
     fac:	d1e5      	bne.n	f7a <tc_callback_PWM+0x86>
		return &(ports[port_index]->Group[group_index]);
     fae:	0950      	lsrs	r0, r2, #5
     fb0:	01c0      	lsls	r0, r0, #7
     fb2:	4d28      	ldr	r5, [pc, #160]	; (1054 <tc_callback_PWM+0x160>)
     fb4:	46ac      	mov	ip, r5
     fb6:	4460      	add	r0, ip
     fb8:	e7df      	b.n	f7a <tc_callback_PWM+0x86>
     fba:	0005      	movs	r5, r0
     fbc:	4b29      	ldr	r3, [pc, #164]	; (1064 <tc_callback_PWM+0x170>)
     fbe:	701a      	strb	r2, [r3, #0]
     fc0:	4b25      	ldr	r3, [pc, #148]	; (1058 <tc_callback_PWM+0x164>)
     fc2:	4668      	mov	r0, sp
     fc4:	7800      	ldrb	r0, [r0, #0]
     fc6:	7018      	strb	r0, [r3, #0]
     fc8:	4b27      	ldr	r3, [pc, #156]	; (1068 <tc_callback_PWM+0x174>)
     fca:	701d      	strb	r5, [r3, #0]
     fcc:	4b1f      	ldr	r3, [pc, #124]	; (104c <tc_callback_PWM+0x158>)
     fce:	7019      	strb	r1, [r3, #0]
			}
			if(compare_value_current != 255)
     fd0:	2dff      	cmp	r5, #255	; 0xff
     fd2:	d01f      	beq.n	1014 <tc_callback_PWM+0x120>
			{
				tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_last);
     fd4:	2100      	movs	r1, #0
     fd6:	9c01      	ldr	r4, [sp, #4]
     fd8:	0020      	movs	r0, r4
     fda:	4b24      	ldr	r3, [pc, #144]	; (106c <tc_callback_PWM+0x178>)
     fdc:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
     fde:	4b22      	ldr	r3, [pc, #136]	; (1068 <tc_callback_PWM+0x174>)
     fe0:	781a      	ldrb	r2, [r3, #0]
     fe2:	2100      	movs	r1, #0
     fe4:	0020      	movs	r0, r4
     fe6:	4b22      	ldr	r3, [pc, #136]	; (1070 <tc_callback_PWM+0x17c>)
     fe8:	4798      	blx	r3
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
	//tc_start_counter(&tc_instance);
	
}
     fea:	b002      	add	sp, #8
     fec:	bc1c      	pop	{r2, r3, r4}
     fee:	4690      	mov	r8, r2
     ff0:	469a      	mov	sl, r3
     ff2:	46a3      	mov	fp, r4
     ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ff6:	4665      	mov	r5, ip
     ff8:	4b1a      	ldr	r3, [pc, #104]	; (1064 <tc_callback_PWM+0x170>)
     ffa:	701a      	strb	r2, [r3, #0]
     ffc:	4b16      	ldr	r3, [pc, #88]	; (1058 <tc_callback_PWM+0x164>)
     ffe:	4668      	mov	r0, sp
    1000:	7800      	ldrb	r0, [r0, #0]
    1002:	7018      	strb	r0, [r3, #0]
    1004:	4b18      	ldr	r3, [pc, #96]	; (1068 <tc_callback_PWM+0x174>)
    1006:	701a      	strb	r2, [r3, #0]
    1008:	4b10      	ldr	r3, [pc, #64]	; (104c <tc_callback_PWM+0x158>)
    100a:	7019      	strb	r1, [r3, #0]
				compare_value_current = time_array[++time_array_ID];
    100c:	4662      	mov	r2, ip
    100e:	e7df      	b.n	fd0 <tc_callback_PWM+0xdc>
			while(compare_value_last == compare_value_current && time_array_ID <= N_valid_compares - 1)
    1010:	0015      	movs	r5, r2
    1012:	e7dd      	b.n	fd0 <tc_callback_PWM+0xdc>
				tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_last);
    1014:	2100      	movs	r1, #0
    1016:	9c01      	ldr	r4, [sp, #4]
    1018:	0020      	movs	r0, r4
    101a:	4b14      	ldr	r3, [pc, #80]	; (106c <tc_callback_PWM+0x178>)
    101c:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    101e:	2200      	movs	r2, #0
    1020:	2100      	movs	r1, #0
    1022:	0020      	movs	r0, r4
    1024:	4b12      	ldr	r3, [pc, #72]	; (1070 <tc_callback_PWM+0x17c>)
    1026:	4798      	blx	r3
    1028:	e7df      	b.n	fea <tc_callback_PWM+0xf6>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    102a:	2200      	movs	r2, #0
    102c:	2100      	movs	r1, #0
    102e:	9801      	ldr	r0, [sp, #4]
    1030:	4b0f      	ldr	r3, [pc, #60]	; (1070 <tc_callback_PWM+0x17c>)
    1032:	4798      	blx	r3
    1034:	e7d9      	b.n	fea <tc_callback_PWM+0xf6>
		first_time = false;
    1036:	2200      	movs	r2, #0
    1038:	4b03      	ldr	r3, [pc, #12]	; (1048 <tc_callback_PWM+0x154>)
    103a:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    103c:	2100      	movs	r1, #0
    103e:	9801      	ldr	r0, [sp, #4]
    1040:	4b0b      	ldr	r3, [pc, #44]	; (1070 <tc_callback_PWM+0x17c>)
    1042:	4798      	blx	r3
}
    1044:	e7d1      	b.n	fea <tc_callback_PWM+0xf6>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	2000000d 	.word	0x2000000d
    104c:	20000564 	.word	0x20000564
    1050:	20000568 	.word	0x20000568
    1054:	41004400 	.word	0x41004400
    1058:	20000536 	.word	0x20000536
    105c:	2000000c 	.word	0x2000000c
    1060:	20000540 	.word	0x20000540
    1064:	20000216 	.word	0x20000216
    1068:	20000215 	.word	0x20000215
    106c:	00004fdf 	.word	0x00004fdf
    1070:	00004f8f 	.word	0x00004f8f

00001074 <increasing_sort_tag>:
	//tc_start_counter(&tc_instance);
	//tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
}

void increasing_sort_tag()
{
    1074:	b5f0      	push	{r4, r5, r6, r7, lr}
    1076:	46ce      	mov	lr, r9
    1078:	b500      	push	{lr}
	uint8_t i,j ,temp;
	uint8_t N=6;
	for(i=0; i< N-1 ;i++)
	{
		for(j=0;j< N-i-1;j++)
    107a:	2305      	movs	r3, #5
    107c:	4699      	mov	r9, r3
		{
			if(temp_time_array[j]>temp_time_array[j+1])
    107e:	4f13      	ldr	r7, [pc, #76]	; (10cc <increasing_sort_tag+0x58>)
			{
				temp = temp_time_array[j];
				temp_time_array[j] = temp_time_array[j+1];
    1080:	003e      	movs	r6, r7
				temp_time_array[j+1]= temp;
				
				temp = temp_led_array[j];
    1082:	4d13      	ldr	r5, [pc, #76]	; (10d0 <increasing_sort_tag+0x5c>)
    1084:	e017      	b.n	10b6 <increasing_sort_tag+0x42>
		for(j=0;j< N-i-1;j++)
    1086:	3301      	adds	r3, #1
    1088:	b2db      	uxtb	r3, r3
    108a:	001a      	movs	r2, r3
    108c:	4563      	cmp	r3, ip
    108e:	da0b      	bge.n	10a8 <increasing_sort_tag+0x34>
			if(temp_time_array[j]>temp_time_array[j+1])
    1090:	5cb8      	ldrb	r0, [r7, r2]
    1092:	1c51      	adds	r1, r2, #1
    1094:	5c7c      	ldrb	r4, [r7, r1]
    1096:	42a0      	cmp	r0, r4
    1098:	d9f5      	bls.n	1086 <increasing_sort_tag+0x12>
				temp_time_array[j] = temp_time_array[j+1];
    109a:	54b4      	strb	r4, [r6, r2]
				temp_time_array[j+1]= temp;
    109c:	5470      	strb	r0, [r6, r1]
				temp = temp_led_array[j];
    109e:	5ca8      	ldrb	r0, [r5, r2]
				temp_led_array[j] = temp_led_array[j+1];
    10a0:	5c6c      	ldrb	r4, [r5, r1]
    10a2:	54ac      	strb	r4, [r5, r2]
				temp_led_array[j+1] = temp;
    10a4:	5468      	strb	r0, [r5, r1]
    10a6:	e7ee      	b.n	1086 <increasing_sort_tag+0x12>
    10a8:	2301      	movs	r3, #1
    10aa:	425b      	negs	r3, r3
    10ac:	469c      	mov	ip, r3
    10ae:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    10b0:	464b      	mov	r3, r9
    10b2:	2b00      	cmp	r3, #0
    10b4:	d006      	beq.n	10c4 <increasing_sort_tag+0x50>
		for(j=0;j< N-i-1;j++)
    10b6:	46cc      	mov	ip, r9
    10b8:	2200      	movs	r2, #0
    10ba:	2300      	movs	r3, #0
    10bc:	4649      	mov	r1, r9
    10be:	2900      	cmp	r1, #0
    10c0:	dce6      	bgt.n	1090 <increasing_sort_tag+0x1c>
    10c2:	e7f1      	b.n	10a8 <increasing_sort_tag+0x34>
				
			}
		}
	}
}
    10c4:	bc04      	pop	{r2}
    10c6:	4691      	mov	r9, r2
    10c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	20000530 	.word	0x20000530
    10d0:	20000538 	.word	0x20000538

000010d4 <transfer_temp>:

void transfer_temp()
{
    10d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t i;
	N_valid_compares = 0;
    10d6:	2200      	movs	r2, #0
    10d8:	4b0d      	ldr	r3, [pc, #52]	; (1110 <transfer_temp+0x3c>)
    10da:	701a      	strb	r2, [r3, #0]
    10dc:	2300      	movs	r3, #0
    10de:	2600      	movs	r6, #0
	for(i=0;i<=5;i++)
	{
		if(temp_time_array[i] != 255)
    10e0:	4d0c      	ldr	r5, [pc, #48]	; (1114 <transfer_temp+0x40>)
		{
			N_valid_compares++;
		}
		time_array[i] = temp_time_array[i] ;
    10e2:	4f0d      	ldr	r7, [pc, #52]	; (1118 <transfer_temp+0x44>)
		led_array[i]  = temp_led_array[i];
    10e4:	4c0d      	ldr	r4, [pc, #52]	; (111c <transfer_temp+0x48>)
    10e6:	480e      	ldr	r0, [pc, #56]	; (1120 <transfer_temp+0x4c>)
    10e8:	e005      	b.n	10f6 <transfer_temp+0x22>
		time_array[i] = temp_time_array[i] ;
    10ea:	54f9      	strb	r1, [r7, r3]
		led_array[i]  = temp_led_array[i];
    10ec:	5cc1      	ldrb	r1, [r0, r3]
    10ee:	54e1      	strb	r1, [r4, r3]
    10f0:	3301      	adds	r3, #1
	for(i=0;i<=5;i++)
    10f2:	2b06      	cmp	r3, #6
    10f4:	d006      	beq.n	1104 <transfer_temp+0x30>
		if(temp_time_array[i] != 255)
    10f6:	5ce9      	ldrb	r1, [r5, r3]
    10f8:	29ff      	cmp	r1, #255	; 0xff
    10fa:	d0f6      	beq.n	10ea <transfer_temp+0x16>
			N_valid_compares++;
    10fc:	3201      	adds	r2, #1
    10fe:	b2d2      	uxtb	r2, r2
    1100:	2601      	movs	r6, #1
    1102:	e7f2      	b.n	10ea <transfer_temp+0x16>
    1104:	2e00      	cmp	r6, #0
    1106:	d100      	bne.n	110a <transfer_temp+0x36>
	}
}
    1108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    110a:	4b01      	ldr	r3, [pc, #4]	; (1110 <transfer_temp+0x3c>)
    110c:	701a      	strb	r2, [r3, #0]
    110e:	e7fb      	b.n	1108 <transfer_temp+0x34>
    1110:	2000000c 	.word	0x2000000c
    1114:	20000530 	.word	0x20000530
    1118:	20000540 	.word	0x20000540
    111c:	20000568 	.word	0x20000568
    1120:	20000538 	.word	0x20000538

00001124 <initializing_led_pins>:

void initializing_led_pins()
{
	
	temp_led_array[0]  = PIN_PA07;
    1124:	4b06      	ldr	r3, [pc, #24]	; (1140 <initializing_led_pins+0x1c>)
    1126:	2207      	movs	r2, #7
    1128:	701a      	strb	r2, [r3, #0]
	temp_led_array[1]  = PIN_PA06;
    112a:	3a01      	subs	r2, #1
    112c:	705a      	strb	r2, [r3, #1]
	temp_led_array[2]  = PIN_PB22;
    112e:	3230      	adds	r2, #48	; 0x30
    1130:	709a      	strb	r2, [r3, #2]
	temp_led_array[3]  = PIN_PB11;
    1132:	3a0b      	subs	r2, #11
    1134:	70da      	strb	r2, [r3, #3]
	temp_led_array[4]  = PIN_PB10;
    1136:	3a01      	subs	r2, #1
    1138:	711a      	strb	r2, [r3, #4]
	temp_led_array[5]  = PIN_PA27;
    113a:	3a0f      	subs	r2, #15
    113c:	715a      	strb	r2, [r3, #5]
}
    113e:	4770      	bx	lr
    1140:	20000538 	.word	0x20000538

00001144 <set_led_left_new>:

void set_led_left_new(uint8_t red, uint8_t green, uint8_t blue)
{
	temp_time_array[0] = MAX_INTENSITY - red;
    1144:	4b03      	ldr	r3, [pc, #12]	; (1154 <set_led_left_new+0x10>)
    1146:	43c0      	mvns	r0, r0
    1148:	7018      	strb	r0, [r3, #0]
	temp_time_array[1] = MAX_INTENSITY - green;
    114a:	43c9      	mvns	r1, r1
    114c:	7059      	strb	r1, [r3, #1]
	temp_time_array[2] = MAX_INTENSITY - blue;
    114e:	43d2      	mvns	r2, r2
    1150:	709a      	strb	r2, [r3, #2]
	//initializing_led_pins();
	
	//increasing_sort_tag();
	//update_LED = true;

}
    1152:	4770      	bx	lr
    1154:	20000530 	.word	0x20000530

00001158 <set_led_right_new>:

void set_led_right_new(uint8_t red, uint8_t green, uint8_t blue)
{
    1158:	b510      	push	{r4, lr}
	temp_time_array[3] = MAX_INTENSITY - red;
    115a:	4b07      	ldr	r3, [pc, #28]	; (1178 <set_led_right_new+0x20>)
    115c:	43c0      	mvns	r0, r0
    115e:	70d8      	strb	r0, [r3, #3]
	temp_time_array[4] = MAX_INTENSITY - green;
    1160:	43c9      	mvns	r1, r1
    1162:	7119      	strb	r1, [r3, #4]
	temp_time_array[5] = MAX_INTENSITY- blue;
    1164:	43d2      	mvns	r2, r2
    1166:	715a      	strb	r2, [r3, #5]
	initializing_led_pins();
    1168:	4b04      	ldr	r3, [pc, #16]	; (117c <set_led_right_new+0x24>)
    116a:	4798      	blx	r3
	
	increasing_sort_tag();
    116c:	4b04      	ldr	r3, [pc, #16]	; (1180 <set_led_right_new+0x28>)
    116e:	4798      	blx	r3
	update_LED = true;
    1170:	2201      	movs	r2, #1
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <set_led_right_new+0x2c>)
    1174:	701a      	strb	r2, [r3, #0]
}
    1176:	bd10      	pop	{r4, pc}
    1178:	20000530 	.word	0x20000530
    117c:	00001125 	.word	0x00001125
    1180:	00001075 	.word	0x00001075
    1184:	20000217 	.word	0x20000217

00001188 <initializing_leds>:

void initializing_leds()
{

	temp_time_array[0] = 254;//Left -- R
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <initializing_leds+0x14>)
    118a:	22fe      	movs	r2, #254	; 0xfe
    118c:	701a      	strb	r2, [r3, #0]
	temp_time_array[1] = 254;//Left  -- G
    118e:	705a      	strb	r2, [r3, #1]
	temp_time_array[2] = 254;//Left  -- B
    1190:	709a      	strb	r2, [r3, #2]
	temp_time_array[3] = 254;//Right -- R
    1192:	70da      	strb	r2, [r3, #3]
	temp_time_array[4] = 254;//Right  -- G
    1194:	711a      	strb	r2, [r3, #4]
	temp_time_array[5] = 254;//Right -- B
    1196:	715a      	strb	r2, [r3, #5]

}
    1198:	4770      	bx	lr
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	20000530 	.word	0x20000530

000011a0 <setup_output_levels_leds_off>:
		port_base->OUTSET.reg = pin_mask;
    11a0:	4a09      	ldr	r2, [pc, #36]	; (11c8 <setup_output_levels_leds_off+0x28>)
    11a2:	2380      	movs	r3, #128	; 0x80
    11a4:	6193      	str	r3, [r2, #24]
    11a6:	2140      	movs	r1, #64	; 0x40
    11a8:	6191      	str	r1, [r2, #24]
    11aa:	4694      	mov	ip, r2
    11ac:	4463      	add	r3, ip
    11ae:	2180      	movs	r1, #128	; 0x80
    11b0:	03c9      	lsls	r1, r1, #15
    11b2:	6199      	str	r1, [r3, #24]
    11b4:	2180      	movs	r1, #128	; 0x80
    11b6:	0109      	lsls	r1, r1, #4
    11b8:	6199      	str	r1, [r3, #24]
    11ba:	2180      	movs	r1, #128	; 0x80
    11bc:	00c9      	lsls	r1, r1, #3
    11be:	6199      	str	r1, [r3, #24]
    11c0:	2380      	movs	r3, #128	; 0x80
    11c2:	051b      	lsls	r3, r3, #20
    11c4:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(L_BLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_RLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_GLED_PIN,RGB_LED_ENABLE);
	port_pin_set_output_level(R_BLED_PIN,RGB_LED_ENABLE);
	
}
    11c6:	4770      	bx	lr
    11c8:	41004400 	.word	0x41004400

000011cc <tc_callback_OF>:
{
    11cc:	b510      	push	{r4, lr}
    11ce:	0004      	movs	r4, r0
	setup_output_levels_leds_off();
    11d0:	4b20      	ldr	r3, [pc, #128]	; (1254 <tc_callback_OF+0x88>)
    11d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11d4:	4b20      	ldr	r3, [pc, #128]	; (1258 <tc_callback_OF+0x8c>)
    11d6:	6818      	ldr	r0, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11d8:	7bc3      	ldrb	r3, [r0, #15]

	while (tc_is_syncing(module_inst)) {
    11da:	b25b      	sxtb	r3, r3
    11dc:	2b00      	cmp	r3, #0
    11de:	dbfb      	blt.n	11d8 <tc_callback_OF+0xc>
		/* Wait for sync */
	}
	
	/* Enable TC module */
	tc_module->INTFLAG.reg = 0x30; //Clearing the Channel 0 and Channel 1 interrupt
    11e0:	2330      	movs	r3, #48	; 0x30
    11e2:	7383      	strb	r3, [r0, #14]
	if(update_LED == true)
    11e4:	4b1d      	ldr	r3, [pc, #116]	; (125c <tc_callback_OF+0x90>)
    11e6:	781b      	ldrb	r3, [r3, #0]
    11e8:	2b00      	cmp	r3, #0
    11ea:	d115      	bne.n	1218 <tc_callback_OF+0x4c>
	time_array_ID = 0;
    11ec:	2300      	movs	r3, #0
    11ee:	4a1c      	ldr	r2, [pc, #112]	; (1260 <tc_callback_OF+0x94>)
    11f0:	7013      	strb	r3, [r2, #0]
	led_array_ID  = 0;
    11f2:	4a1c      	ldr	r2, [pc, #112]	; (1264 <tc_callback_OF+0x98>)
    11f4:	7013      	strb	r3, [r2, #0]
	compare_value = time_array[0];
    11f6:	4b1c      	ldr	r3, [pc, #112]	; (1268 <tc_callback_OF+0x9c>)
    11f8:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    11fa:	2aff      	cmp	r2, #255	; 0xff
    11fc:	d124      	bne.n	1248 <tc_callback_OF+0x7c>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    11fe:	4b16      	ldr	r3, [pc, #88]	; (1258 <tc_callback_OF+0x8c>)
    1200:	2110      	movs	r1, #16
    1202:	681a      	ldr	r2, [r3, #0]
    1204:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1206:	7e5a      	ldrb	r2, [r3, #25]
    1208:	438a      	bics	r2, r1
    120a:	765a      	strb	r2, [r3, #25]
	tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    120c:	2200      	movs	r2, #0
    120e:	2100      	movs	r1, #0
    1210:	0020      	movs	r0, r4
    1212:	4b16      	ldr	r3, [pc, #88]	; (126c <tc_callback_OF+0xa0>)
    1214:	4798      	blx	r3
}
    1216:	bd10      	pop	{r4, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1218:	4b15      	ldr	r3, [pc, #84]	; (1270 <tc_callback_OF+0xa4>)
    121a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    121c:	4b15      	ldr	r3, [pc, #84]	; (1274 <tc_callback_OF+0xa8>)
    121e:	5c1b      	ldrb	r3, [r3, r0]
    1220:	221f      	movs	r2, #31
    1222:	401a      	ands	r2, r3
    1224:	2301      	movs	r3, #1
    1226:	4093      	lsls	r3, r2
    1228:	4a13      	ldr	r2, [pc, #76]	; (1278 <tc_callback_OF+0xac>)
    122a:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    122c:	4b0a      	ldr	r3, [pc, #40]	; (1258 <tc_callback_OF+0x8c>)
    122e:	7e5a      	ldrb	r2, [r3, #25]
    1230:	2110      	movs	r1, #16
    1232:	430a      	orrs	r2, r1
    1234:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	2210      	movs	r2, #16
    123a:	735a      	strb	r2, [r3, #13]
		transfer_temp();
    123c:	4b0f      	ldr	r3, [pc, #60]	; (127c <tc_callback_OF+0xb0>)
    123e:	4798      	blx	r3
		update_LED = false;
    1240:	2200      	movs	r2, #0
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <tc_callback_OF+0x90>)
    1244:	701a      	strb	r2, [r3, #0]
    1246:	e7d1      	b.n	11ec <tc_callback_OF+0x20>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    1248:	2100      	movs	r1, #0
    124a:	0020      	movs	r0, r4
    124c:	4b0c      	ldr	r3, [pc, #48]	; (1280 <tc_callback_OF+0xb4>)
    124e:	4798      	blx	r3
    1250:	e7dc      	b.n	120c <tc_callback_OF+0x40>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	000011a1 	.word	0x000011a1
    1258:	20000548 	.word	0x20000548
    125c:	20000217 	.word	0x20000217
    1260:	20000536 	.word	0x20000536
    1264:	20000564 	.word	0x20000564
    1268:	20000540 	.word	0x20000540
    126c:	00004fdf 	.word	0x00004fdf
    1270:	00004cbd 	.word	0x00004cbd
    1274:	0000bde4 	.word	0x0000bde4
    1278:	e000e100 	.word	0xe000e100
    127c:	000010d5 	.word	0x000010d5
    1280:	00004f8f 	.word	0x00004f8f

00001284 <setup_outputs_leds>:

void setup_outputs_leds()
{
    1284:	b530      	push	{r4, r5, lr}
    1286:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1288:	ac01      	add	r4, sp, #4
    128a:	2301      	movs	r3, #1
    128c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    128e:	2200      	movs	r2, #0
    1290:	70a2      	strb	r2, [r4, #2]
	
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1292:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(L_RLED_PIN, &config_port_pin);
    1294:	0021      	movs	r1, r4
    1296:	2007      	movs	r0, #7
    1298:	4d0a      	ldr	r5, [pc, #40]	; (12c4 <setup_outputs_leds+0x40>)
    129a:	47a8      	blx	r5
	port_pin_set_config(L_GLED_PIN, &config_port_pin);
    129c:	0021      	movs	r1, r4
    129e:	2006      	movs	r0, #6
    12a0:	47a8      	blx	r5
	port_pin_set_config(L_BLED_PIN, &config_port_pin);
    12a2:	0021      	movs	r1, r4
    12a4:	2036      	movs	r0, #54	; 0x36
    12a6:	47a8      	blx	r5
	port_pin_set_config(R_RLED_PIN, &config_port_pin);
    12a8:	0021      	movs	r1, r4
    12aa:	202b      	movs	r0, #43	; 0x2b
    12ac:	47a8      	blx	r5
	port_pin_set_config(R_GLED_PIN, &config_port_pin);
    12ae:	0021      	movs	r1, r4
    12b0:	202a      	movs	r0, #42	; 0x2a
    12b2:	47a8      	blx	r5
	port_pin_set_config(R_BLED_PIN, &config_port_pin);
    12b4:	0021      	movs	r1, r4
    12b6:	201b      	movs	r0, #27
    12b8:	47a8      	blx	r5
	setup_output_levels_leds_off();
    12ba:	4b03      	ldr	r3, [pc, #12]	; (12c8 <setup_outputs_leds+0x44>)
    12bc:	4798      	blx	r3

}
    12be:	b003      	add	sp, #12
    12c0:	bd30      	pop	{r4, r5, pc}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	000035bd 	.word	0x000035bd
    12c8:	000011a1 	.word	0x000011a1

000012cc <configure_rgb_led>:


void configure_rgb_led(void)
{	
    12cc:	b510      	push	{r4, lr}
    12ce:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    12d0:	aa01      	add	r2, sp, #4
    12d2:	2300      	movs	r3, #0
    12d4:	2100      	movs	r1, #0
    12d6:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    12d8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    12da:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    12dc:	2000      	movs	r0, #0
    12de:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    12e0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    12e2:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    12e4:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    12e6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    12e8:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    12ea:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    12ec:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    12ee:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    12f0:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    12f2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    12f4:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    12f6:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    12f8:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    12fa:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config rgb_led_config;
	tc_get_config_defaults(&rgb_led_config);
	//rgb_led_config.clock_source = GCLK_GENERATOR_1;
	rgb_led_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV1024;
    12fc:	23e0      	movs	r3, #224	; 0xe0
    12fe:	00db      	lsls	r3, r3, #3
    1300:	8093      	strh	r3, [r2, #4]
	rgb_led_config.counter_size = TC_COUNTER_SIZE_8BIT; 
    1302:	2304      	movs	r3, #4
    1304:	7093      	strb	r3, [r2, #2]
	rgb_led_config.counter_8_bit.period = 0XFF;
    1306:	21ff      	movs	r1, #255	; 0xff
    1308:	3325      	adds	r3, #37	; 0x25
    130a:	54d1      	strb	r1, [r2, r3]
	rgb_led_config.counter_8_bit.compare_capture_channel[0] = 0;
	
	tc_init(&tc_instance, TC3, &rgb_led_config);
    130c:	4c0c      	ldr	r4, [pc, #48]	; (1340 <configure_rgb_led+0x74>)
    130e:	490d      	ldr	r1, [pc, #52]	; (1344 <configure_rgb_led+0x78>)
    1310:	0020      	movs	r0, r4
    1312:	4b0d      	ldr	r3, [pc, #52]	; (1348 <configure_rgb_led+0x7c>)
    1314:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1316:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1318:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    131a:	b25b      	sxtb	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	dbfb      	blt.n	1318 <configure_rgb_led+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1320:	8813      	ldrh	r3, [r2, #0]
    1322:	2102      	movs	r1, #2
    1324:	430b      	orrs	r3, r1
    1326:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
	
	initializing_leds();
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <configure_rgb_led+0x80>)
    132a:	4798      	blx	r3
	initializing_led_pins();
    132c:	4b08      	ldr	r3, [pc, #32]	; (1350 <configure_rgb_led+0x84>)
    132e:	4798      	blx	r3
	increasing_sort_tag();
    1330:	4b08      	ldr	r3, [pc, #32]	; (1354 <configure_rgb_led+0x88>)
    1332:	4798      	blx	r3
	transfer_temp();
    1334:	4b08      	ldr	r3, [pc, #32]	; (1358 <configure_rgb_led+0x8c>)
    1336:	4798      	blx	r3
	setup_outputs_leds();
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <configure_rgb_led+0x90>)
    133a:	4798      	blx	r3
}
    133c:	b00e      	add	sp, #56	; 0x38
    133e:	bd10      	pop	{r4, pc}
    1340:	20000548 	.word	0x20000548
    1344:	42002c00 	.word	0x42002c00
    1348:	00004cf5 	.word	0x00004cf5
    134c:	00001189 	.word	0x00001189
    1350:	00001125 	.word	0x00001125
    1354:	00001075 	.word	0x00001075
    1358:	000010d5 	.word	0x000010d5
    135c:	00001285 	.word	0x00001285

00001360 <configure_tc_callbacks>:

void configure_tc_callbacks(void)
{
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	46ce      	mov	lr, r9
    1364:	4647      	mov	r7, r8
    1366:	b580      	push	{r7, lr}
	tc_register_callback(&tc_instance, tc_callback_OF,
    1368:	4c17      	ldr	r4, [pc, #92]	; (13c8 <configure_tc_callbacks+0x68>)
    136a:	2200      	movs	r2, #0
    136c:	4917      	ldr	r1, [pc, #92]	; (13cc <configure_tc_callbacks+0x6c>)
    136e:	0020      	movs	r0, r4
    1370:	4d17      	ldr	r5, [pc, #92]	; (13d0 <configure_tc_callbacks+0x70>)
    1372:	47a8      	blx	r5
	TC_CALLBACK_OVERFLOW);
	tc_register_callback(&tc_instance, tc_callback_PWM,
    1374:	2202      	movs	r2, #2
    1376:	4917      	ldr	r1, [pc, #92]	; (13d4 <configure_tc_callbacks+0x74>)
    1378:	0020      	movs	r0, r4
    137a:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    137c:	6820      	ldr	r0, [r4, #0]
    137e:	4b16      	ldr	r3, [pc, #88]	; (13d8 <configure_tc_callbacks+0x78>)
    1380:	4699      	mov	r9, r3
    1382:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1384:	4b15      	ldr	r3, [pc, #84]	; (13dc <configure_tc_callbacks+0x7c>)
    1386:	4698      	mov	r8, r3
    1388:	5c1b      	ldrb	r3, [r3, r0]
    138a:	261f      	movs	r6, #31
    138c:	4033      	ands	r3, r6
    138e:	2501      	movs	r5, #1
    1390:	002a      	movs	r2, r5
    1392:	409a      	lsls	r2, r3
    1394:	4f12      	ldr	r7, [pc, #72]	; (13e0 <configure_tc_callbacks+0x80>)
    1396:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    1398:	7e63      	ldrb	r3, [r4, #25]
    139a:	2201      	movs	r2, #1
    139c:	4313      	orrs	r3, r2
    139e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    13a0:	6823      	ldr	r3, [r4, #0]
    13a2:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    13a4:	0018      	movs	r0, r3
    13a6:	47c8      	blx	r9
    13a8:	4643      	mov	r3, r8
    13aa:	5c1b      	ldrb	r3, [r3, r0]
    13ac:	401e      	ands	r6, r3
    13ae:	40b5      	lsls	r5, r6
    13b0:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    13b2:	7e63      	ldrb	r3, [r4, #25]
    13b4:	2210      	movs	r2, #16
    13b6:	4313      	orrs	r3, r2
    13b8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    13ba:	6823      	ldr	r3, [r4, #0]
    13bc:	2210      	movs	r2, #16
    13be:	735a      	strb	r2, [r3, #13]
	TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&tc_instance, TC_CALLBACK_CC_CHANNEL0);
	
}
    13c0:	bc0c      	pop	{r2, r3}
    13c2:	4690      	mov	r8, r2
    13c4:	4699      	mov	r9, r3
    13c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13c8:	20000548 	.word	0x20000548
    13cc:	000011cd 	.word	0x000011cd
    13d0:	00004be9 	.word	0x00004be9
    13d4:	00000ef5 	.word	0x00000ef5
    13d8:	00004cbd 	.word	0x00004cbd
    13dc:	0000bde4 	.word	0x0000bde4
    13e0:	e000e100 	.word	0xe000e100

000013e4 <enable_power_ic>:
		port_base->OUTSET.reg = pin_mask;
    13e4:	4b03      	ldr	r3, [pc, #12]	; (13f4 <enable_power_ic+0x10>)
    13e6:	2280      	movs	r2, #128	; 0x80
    13e8:	02d2      	lsls	r2, r2, #11
    13ea:	619a      	str	r2, [r3, #24]
    13ec:	2280      	movs	r2, #128	; 0x80
    13ee:	01d2      	lsls	r2, r2, #7
    13f0:	619a      	str	r2, [r3, #24]

void enable_power_ic(void)
{
	port_pin_set_output_level(ENABLE_PIN_PWIC,ENABLE_PWIC);
	port_pin_set_output_level(ENABLE_PIN_5V,ENABLE_5V);
}
    13f2:	4770      	bx	lr
    13f4:	41004400 	.word	0x41004400

000013f8 <configure_power_enable_pins>:


void configure_power_enable_pins(void)
{
    13f8:	b530      	push	{r4, r5, lr}
    13fa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    13fc:	ac01      	add	r4, sp, #4
    13fe:	2301      	movs	r3, #1
    1400:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1402:	2200      	movs	r2, #0
    1404:	70a2      	strb	r2, [r4, #2]

	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1406:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ENABLE_PIN_PWIC, &config_port_pin);
    1408:	0021      	movs	r1, r4
    140a:	2012      	movs	r0, #18
    140c:	4d03      	ldr	r5, [pc, #12]	; (141c <configure_power_enable_pins+0x24>)
    140e:	47a8      	blx	r5
	port_pin_set_config(ENABLE_PIN_5V, &config_port_pin);
    1410:	0021      	movs	r1, r4
    1412:	200e      	movs	r0, #14
    1414:	47a8      	blx	r5


	
    1416:	b003      	add	sp, #12
    1418:	bd30      	pop	{r4, r5, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	000035bd 	.word	0x000035bd

00001420 <usart_read_callback>:
{
	serial_ble_usart_configure();	
}

void usart_read_callback(struct usart_module *const usart_module)
{
    1420:	b530      	push	{r4, r5, lr}
	uint16_t received_data;
	received_data_updated = true;
    1422:	4809      	ldr	r0, [pc, #36]	; (1448 <usart_read_callback+0x28>)
    1424:	2401      	movs	r4, #1
    1426:	7004      	strb	r4, [r0, #0]
	received_data = (usart_ble_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    1428:	4b08      	ldr	r3, [pc, #32]	; (144c <usart_read_callback+0x2c>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	8d19      	ldrh	r1, [r3, #40]	; 0x28
	*(ring_buffer + head_ring_buffer) = (uint8_t)received_data;
    142e:	4a08      	ldr	r2, [pc, #32]	; (1450 <usart_read_callback+0x30>)
    1430:	7815      	ldrb	r5, [r2, #0]
    1432:	4b08      	ldr	r3, [pc, #32]	; (1454 <usart_read_callback+0x34>)
    1434:	195b      	adds	r3, r3, r5
    1436:	b2c9      	uxtb	r1, r1
    1438:	7019      	strb	r1, [r3, #0]
	head_ring_buffer++;
    143a:	7813      	ldrb	r3, [r2, #0]
    143c:	3301      	adds	r3, #1
    143e:	b2db      	uxtb	r3, r3
    1440:	7013      	strb	r3, [r2, #0]
	received_data_updated = true;
    1442:	7004      	strb	r4, [r0, #0]
}
    1444:	bd30      	pop	{r4, r5, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	200003e0 	.word	0x200003e0
    144c:	20000574 	.word	0x20000574
    1450:	200003ca 	.word	0x200003ca
    1454:	200009e0 	.word	0x200009e0

00001458 <serial_ble_usart_configure>:
{
    1458:	b530      	push	{r4, r5, lr}
    145a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	05db      	lsls	r3, r3, #23
    1460:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1462:	2300      	movs	r3, #0
    1464:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1466:	22ff      	movs	r2, #255	; 0xff
    1468:	4669      	mov	r1, sp
    146a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    146c:	2200      	movs	r2, #0
    146e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1470:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1472:	2101      	movs	r1, #1
    1474:	2024      	movs	r0, #36	; 0x24
    1476:	466c      	mov	r4, sp
    1478:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    147a:	3001      	adds	r0, #1
    147c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    147e:	3125      	adds	r1, #37	; 0x25
    1480:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1482:	3101      	adds	r1, #1
    1484:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1486:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1488:	3105      	adds	r1, #5
    148a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    148c:	3101      	adds	r1, #1
    148e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1490:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1492:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1494:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1496:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1498:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    149a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    149c:	2313      	movs	r3, #19
    149e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    14a0:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    14a2:	23e1      	movs	r3, #225	; 0xe1
    14a4:	025b      	lsls	r3, r3, #9
    14a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = BLE_SERCOM_MUX_SETTING;
    14a8:	23c4      	movs	r3, #196	; 0xc4
    14aa:	039b      	lsls	r3, r3, #14
    14ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = BLE_SERCOM_PINMUX_PAD0;
    14ae:	2301      	movs	r3, #1
    14b0:	425b      	negs	r3, r3
    14b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = BLE_SERCOM_PINMUX_PAD1;
    14b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = BLE_SERCOM_PINMUX_PAD2;
    14b6:	4b10      	ldr	r3, [pc, #64]	; (14f8 <serial_ble_usart_configure+0xa0>)
    14b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = BLE_SERCOM_PINMUX_PAD3;
    14ba:	4b10      	ldr	r3, [pc, #64]	; (14fc <serial_ble_usart_configure+0xa4>)
    14bc:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_ble_instance,BLE_SERCOM, &config_usart) != STATUS_OK) 
    14be:	4d10      	ldr	r5, [pc, #64]	; (1500 <serial_ble_usart_configure+0xa8>)
    14c0:	4c10      	ldr	r4, [pc, #64]	; (1504 <serial_ble_usart_configure+0xac>)
    14c2:	466a      	mov	r2, sp
    14c4:	4910      	ldr	r1, [pc, #64]	; (1508 <serial_ble_usart_configure+0xb0>)
    14c6:	0028      	movs	r0, r5
    14c8:	47a0      	blx	r4
    14ca:	2800      	cmp	r0, #0
    14cc:	d1f9      	bne.n	14c2 <serial_ble_usart_configure+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14ce:	4d0c      	ldr	r5, [pc, #48]	; (1500 <serial_ble_usart_configure+0xa8>)
    14d0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14d2:	0020      	movs	r0, r4
    14d4:	4b0d      	ldr	r3, [pc, #52]	; (150c <serial_ble_usart_configure+0xb4>)
    14d6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14d8:	231f      	movs	r3, #31
    14da:	4018      	ands	r0, r3
    14dc:	3b1e      	subs	r3, #30
    14de:	4083      	lsls	r3, r0
    14e0:	4a0b      	ldr	r2, [pc, #44]	; (1510 <serial_ble_usart_configure+0xb8>)
    14e2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14e8:	2b00      	cmp	r3, #0
    14ea:	d1fc      	bne.n	14e6 <serial_ble_usart_configure+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    14ec:	6823      	ldr	r3, [r4, #0]
    14ee:	2202      	movs	r2, #2
    14f0:	4313      	orrs	r3, r2
    14f2:	6023      	str	r3, [r4, #0]
}
    14f4:	b011      	add	sp, #68	; 0x44
    14f6:	bd30      	pop	{r4, r5, pc}
    14f8:	000a0003 	.word	0x000a0003
    14fc:	000b0003 	.word	0x000b0003
    1500:	20000574 	.word	0x20000574
    1504:	0000047d 	.word	0x0000047d
    1508:	42001000 	.word	0x42001000
    150c:	00004209 	.word	0x00004209
    1510:	e000e100 	.word	0xe000e100

00001514 <serial_ble_enable>:
{
    1514:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1516:	4805      	ldr	r0, [pc, #20]	; (152c <serial_ble_enable+0x18>)
    1518:	2231      	movs	r2, #49	; 0x31
    151a:	5c83      	ldrb	r3, [r0, r2]
    151c:	2102      	movs	r1, #2
    151e:	430b      	orrs	r3, r1
    1520:	5483      	strb	r3, [r0, r2]
	usart_read_buffer_job(&usart_ble_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1522:	3a30      	subs	r2, #48	; 0x30
    1524:	4902      	ldr	r1, [pc, #8]	; (1530 <serial_ble_enable+0x1c>)
    1526:	4b03      	ldr	r3, [pc, #12]	; (1534 <serial_ble_enable+0x20>)
    1528:	4798      	blx	r3
}
    152a:	bd10      	pop	{r4, pc}
    152c:	20000574 	.word	0x20000574
    1530:	20000570 	.word	0x20000570
    1534:	00000911 	.word	0x00000911

00001538 <configure_usart_ble_callbacks>:

void configure_usart_ble_callbacks(void)
{
    1538:	b510      	push	{r4, lr}
	//usart_register_callback(&usart_ble_instance,usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_ble_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    153a:	2201      	movs	r2, #1
    153c:	4902      	ldr	r1, [pc, #8]	; (1548 <configure_usart_ble_callbacks+0x10>)
    153e:	4803      	ldr	r0, [pc, #12]	; (154c <configure_usart_ble_callbacks+0x14>)
    1540:	4b03      	ldr	r3, [pc, #12]	; (1550 <configure_usart_ble_callbacks+0x18>)
    1542:	4798      	blx	r3
}
    1544:	bd10      	pop	{r4, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	00001421 	.word	0x00001421
    154c:	20000574 	.word	0x20000574
    1550:	000008f9 	.word	0x000008f9

00001554 <serial_ble_configure>:
{
	configure_usart_ble_callbacks();
}

void serial_ble_configure()
{
    1554:	b510      	push	{r4, lr}
	serial_ble_usart_configure();	
    1556:	4b03      	ldr	r3, [pc, #12]	; (1564 <serial_ble_configure+0x10>)
    1558:	4798      	blx	r3
	configure_usart_ble_callbacks();
    155a:	4b03      	ldr	r3, [pc, #12]	; (1568 <serial_ble_configure+0x14>)
    155c:	4798      	blx	r3
	//serial_ble_pins_configure();
	serial_ble_modules_configure();
	serial_ble_callbacks_configure();
	serial_ble_enable();
    155e:	4b03      	ldr	r3, [pc, #12]	; (156c <serial_ble_configure+0x18>)
    1560:	4798      	blx	r3
}
    1562:	bd10      	pop	{r4, pc}
    1564:	00001459 	.word	0x00001459
    1568:	00001539 	.word	0x00001539
    156c:	00001515 	.word	0x00001515

00001570 <new_echo_detection_callback>:
	//tc_start_counter(&tc_instance4);
}


void new_echo_detection_callback(void)
{
    1570:	b510      	push	{r4, lr}
	//stop timer
	//tc_stop_counter(&tc_instance4);
	//disable echo interrupt
	
	//tc_set_count_value(&tc_instance4, 0);
	one_minute_count = one_minute_count + 1;
    1572:	4a1e      	ldr	r2, [pc, #120]	; (15ec <new_echo_detection_callback+0x7c>)
    1574:	8813      	ldrh	r3, [r2, #0]
    1576:	3301      	adds	r3, #1
    1578:	8013      	strh	r3, [r2, #0]
	serial_timeout_count = serial_timeout_count + 1;
    157a:	4a1d      	ldr	r2, [pc, #116]	; (15f0 <new_echo_detection_callback+0x80>)
    157c:	7813      	ldrb	r3, [r2, #0]
    157e:	3301      	adds	r3, #1
    1580:	b2db      	uxtb	r3, r3
    1582:	7013      	strb	r3, [r2, #0]
	count_broadcast = count_broadcast + 1; 
    1584:	4a1b      	ldr	r2, [pc, #108]	; (15f4 <new_echo_detection_callback+0x84>)
    1586:	7813      	ldrb	r3, [r2, #0]
    1588:	3301      	adds	r3, #1
    158a:	b2db      	uxtb	r3, r3
    158c:	7013      	strb	r3, [r2, #0]
	
	if(interrupt_edge == true )
    158e:	4b1a      	ldr	r3, [pc, #104]	; (15f8 <new_echo_detection_callback+0x88>)
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d01c      	beq.n	15d0 <new_echo_detection_callback+0x60>
	{
		tc_set_count_value(&tc_instance4, 0);
    1596:	2100      	movs	r1, #0
    1598:	4818      	ldr	r0, [pc, #96]	; (15fc <new_echo_detection_callback+0x8c>)
    159a:	4b19      	ldr	r3, [pc, #100]	; (1600 <new_echo_detection_callback+0x90>)
    159c:	4798      	blx	r3
		interrupt_edge = false;
    159e:	2200      	movs	r2, #0
    15a0:	4b15      	ldr	r3, [pc, #84]	; (15f8 <new_echo_detection_callback+0x88>)
    15a2:	701a      	strb	r2, [r3, #0]
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    15a4:	4b12      	ldr	r3, [pc, #72]	; (15f0 <new_echo_detection_callback+0x80>)
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	b2db      	uxtb	r3, r3
    15aa:	2bfa      	cmp	r3, #250	; 0xfa
    15ac:	d905      	bls.n	15ba <new_echo_detection_callback+0x4a>
		{
			serial_timeout = true;
    15ae:	3201      	adds	r2, #1
    15b0:	4b14      	ldr	r3, [pc, #80]	; (1604 <new_echo_detection_callback+0x94>)
    15b2:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    15b4:	2200      	movs	r2, #0
    15b6:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <new_echo_detection_callback+0x80>)
    15b8:	701a      	strb	r2, [r3, #0]
		}
		if(one_minute_count > 690)
    15ba:	4b13      	ldr	r3, [pc, #76]	; (1608 <new_echo_detection_callback+0x98>)
    15bc:	4a0b      	ldr	r2, [pc, #44]	; (15ec <new_echo_detection_callback+0x7c>)
    15be:	8812      	ldrh	r2, [r2, #0]
    15c0:	429a      	cmp	r2, r3
    15c2:	d911      	bls.n	15e8 <new_echo_detection_callback+0x78>
		{
			one_minute_count = 0;	 //One Minute 
    15c4:	2200      	movs	r2, #0
    15c6:	4b09      	ldr	r3, [pc, #36]	; (15ec <new_echo_detection_callback+0x7c>)
    15c8:	801a      	strh	r2, [r3, #0]
			check_batterylevel_initial();
    15ca:	4b10      	ldr	r3, [pc, #64]	; (160c <new_echo_detection_callback+0x9c>)
    15cc:	4798      	blx	r3
    15ce:	e00b      	b.n	15e8 <new_echo_detection_callback+0x78>
		}	
	}
	else
	{
		interrupt_edge = true;
    15d0:	2301      	movs	r3, #1
    15d2:	4a09      	ldr	r2, [pc, #36]	; (15f8 <new_echo_detection_callback+0x88>)
    15d4:	7013      	strb	r3, [r2, #0]
		resource_distance_lock  = true;
    15d6:	4c0e      	ldr	r4, [pc, #56]	; (1610 <new_echo_detection_callback+0xa0>)
    15d8:	7023      	strb	r3, [r4, #0]
		distance_16b = tc_get_count_value(&tc_instance4);
    15da:	4808      	ldr	r0, [pc, #32]	; (15fc <new_echo_detection_callback+0x8c>)
    15dc:	4b0d      	ldr	r3, [pc, #52]	; (1614 <new_echo_detection_callback+0xa4>)
    15de:	4798      	blx	r3
    15e0:	4b0d      	ldr	r3, [pc, #52]	; (1618 <new_echo_detection_callback+0xa8>)
    15e2:	6018      	str	r0, [r3, #0]
		resource_distance_lock = false;
    15e4:	2300      	movs	r3, #0
    15e6:	7023      	strb	r3, [r4, #0]
	//extint_chan_disable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//read counter value
	//distance_16b = tc_get_count_value(&tc_instance4);
	//start timer
	//tc_start_counter(&tc_instance4);
}
    15e8:	bd10      	pop	{r4, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	2000021c 	.word	0x2000021c
    15f0:	200003e3 	.word	0x200003e3
    15f4:	200003c0 	.word	0x200003c0
    15f8:	2000000e 	.word	0x2000000e
    15fc:	200004c0 	.word	0x200004c0
    1600:	00004f31 	.word	0x00004f31
    1604:	200003e2 	.word	0x200003e2
    1608:	000002b2 	.word	0x000002b2
    160c:	00000ab5 	.word	0x00000ab5
    1610:	200003e1 	.word	0x200003e1
    1614:	00004f63 	.word	0x00004f63
    1618:	20000218 	.word	0x20000218

0000161c <configure_pins>:
{
    161c:	b570      	push	{r4, r5, r6, lr}
    161e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    1620:	ac01      	add	r4, sp, #4
    1622:	2301      	movs	r3, #1
    1624:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1626:	2600      	movs	r6, #0
    1628:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    162a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(TRIG_PIN, &config_port_pin);
    162c:	0021      	movs	r1, r4
    162e:	2003      	movs	r0, #3
    1630:	4d05      	ldr	r5, [pc, #20]	; (1648 <configure_pins+0x2c>)
    1632:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    1634:	2208      	movs	r2, #8
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <configure_pins+0x30>)
    1638:	615a      	str	r2, [r3, #20]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    163a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(ECHO_PIN, &config_port_pin);
    163c:	0021      	movs	r1, r4
    163e:	200f      	movs	r0, #15
    1640:	47a8      	blx	r5
}
    1642:	b002      	add	sp, #8
    1644:	bd70      	pop	{r4, r5, r6, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	000035bd 	.word	0x000035bd
    164c:	41004400 	.word	0x41004400

00001650 <configure_tc4>:
{
    1650:	b510      	push	{r4, lr}
    1652:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    1654:	aa01      	add	r2, sp, #4
    1656:	2300      	movs	r3, #0
    1658:	2100      	movs	r1, #0
    165a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    165c:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    165e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1660:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1662:	2000      	movs	r0, #0
    1664:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1666:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1668:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    166a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    166c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    166e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1670:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1672:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1674:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1676:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1678:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    167a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    167c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    167e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1680:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64; //64
    1682:	23a0      	movs	r3, #160	; 0xa0
    1684:	00db      	lsls	r3, r3, #3
    1686:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance4, TC4, &config_tc);
    1688:	4c07      	ldr	r4, [pc, #28]	; (16a8 <configure_tc4+0x58>)
    168a:	4908      	ldr	r1, [pc, #32]	; (16ac <configure_tc4+0x5c>)
    168c:	0020      	movs	r0, r4
    168e:	4b08      	ldr	r3, [pc, #32]	; (16b0 <configure_tc4+0x60>)
    1690:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1692:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1694:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1696:	b25b      	sxtb	r3, r3
    1698:	2b00      	cmp	r3, #0
    169a:	dbfb      	blt.n	1694 <configure_tc4+0x44>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    169c:	8813      	ldrh	r3, [r2, #0]
    169e:	2102      	movs	r1, #2
    16a0:	430b      	orrs	r3, r1
    16a2:	8013      	strh	r3, [r2, #0]
}
    16a4:	b00e      	add	sp, #56	; 0x38
    16a6:	bd10      	pop	{r4, pc}
    16a8:	200004c0 	.word	0x200004c0
    16ac:	42003000 	.word	0x42003000
    16b0:	00004cf5 	.word	0x00004cf5

000016b4 <configure_echo_extint>:
{
    16b4:	b510      	push	{r4, lr}
    16b6:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    16b8:	ac01      	add	r4, sp, #4
    16ba:	0020      	movs	r0, r4
    16bc:	4b08      	ldr	r3, [pc, #32]	; (16e0 <configure_echo_extint+0x2c>)
    16be:	4798      	blx	r3
	config_extint_chan.gpio_pin           = ECHO_PIN_EIC;
    16c0:	230f      	movs	r3, #15
    16c2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = ECHO_PIN_MUX;
    16c4:	23f0      	movs	r3, #240	; 0xf0
    16c6:	031b      	lsls	r3, r3, #12
    16c8:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    16ca:	2302      	movs	r3, #2
    16cc:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    16ce:	3301      	adds	r3, #1
    16d0:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ECHO_EIC_LINE, &config_extint_chan);
    16d2:	0021      	movs	r1, r4
    16d4:	200f      	movs	r0, #15
    16d6:	4b03      	ldr	r3, [pc, #12]	; (16e4 <configure_echo_extint+0x30>)
    16d8:	4798      	blx	r3
}
    16da:	b004      	add	sp, #16
    16dc:	bd10      	pop	{r4, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	00003531 	.word	0x00003531
    16e4:	00003545 	.word	0x00003545

000016e8 <setup_ultrasound>:
{
    16e8:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTSET.reg = pin_mask;
    16ea:	4c06      	ldr	r4, [pc, #24]	; (1704 <setup_ultrasound+0x1c>)
    16ec:	2508      	movs	r5, #8
    16ee:	61a5      	str	r5, [r4, #24]
	delay_us(100); 
    16f0:	2064      	movs	r0, #100	; 0x64
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <setup_ultrasound+0x20>)
    16f4:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    16f6:	6165      	str	r5, [r4, #20]
	tc_set_count_value(&tc_instance4, 0);
    16f8:	2100      	movs	r1, #0
    16fa:	4804      	ldr	r0, [pc, #16]	; (170c <setup_ultrasound+0x24>)
    16fc:	4b04      	ldr	r3, [pc, #16]	; (1710 <setup_ultrasound+0x28>)
    16fe:	4798      	blx	r3
}
    1700:	bd70      	pop	{r4, r5, r6, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	41004400 	.word	0x41004400
    1708:	000019cd 	.word	0x000019cd
    170c:	200004c0 	.word	0x200004c0
    1710:	00004f31 	.word	0x00004f31

00001714 <TC4_OV_callback>:
{
    1714:	b510      	push	{r4, lr}
	setup_ultrasound();
    1716:	4b01      	ldr	r3, [pc, #4]	; (171c <TC4_OV_callback+0x8>)
    1718:	4798      	blx	r3
}
    171a:	bd10      	pop	{r4, pc}
    171c:	000016e9 	.word	0x000016e9

00001720 <get_ultrasound_distance>:
char* get_ultrasound_distance()
{
	char* distance_ultrasound= NULL;
	distance_ultrasound= &distance_16b;
	return distance_ultrasound;
}
    1720:	4800      	ldr	r0, [pc, #0]	; (1724 <get_ultrasound_distance+0x4>)
    1722:	4770      	bx	lr
    1724:	20000218 	.word	0x20000218

00001728 <configure_TC4_callback>:

void configure_TC4_callback()
{
    1728:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance4, TC4_OV_callback,TC_CALLBACK_OVERFLOW);
    172a:	4c0c      	ldr	r4, [pc, #48]	; (175c <configure_TC4_callback+0x34>)
    172c:	2200      	movs	r2, #0
    172e:	490c      	ldr	r1, [pc, #48]	; (1760 <configure_TC4_callback+0x38>)
    1730:	0020      	movs	r0, r4
    1732:	4b0c      	ldr	r3, [pc, #48]	; (1764 <configure_TC4_callback+0x3c>)
    1734:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1736:	6820      	ldr	r0, [r4, #0]
    1738:	4b0b      	ldr	r3, [pc, #44]	; (1768 <configure_TC4_callback+0x40>)
    173a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    173c:	4b0b      	ldr	r3, [pc, #44]	; (176c <configure_TC4_callback+0x44>)
    173e:	5c1a      	ldrb	r2, [r3, r0]
    1740:	231f      	movs	r3, #31
    1742:	4013      	ands	r3, r2
    1744:	2201      	movs	r2, #1
    1746:	0011      	movs	r1, r2
    1748:	4099      	lsls	r1, r3
    174a:	4b09      	ldr	r3, [pc, #36]	; (1770 <configure_TC4_callback+0x48>)
    174c:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    174e:	7e63      	ldrb	r3, [r4, #25]
    1750:	2101      	movs	r1, #1
    1752:	430b      	orrs	r3, r1
    1754:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1756:	6823      	ldr	r3, [r4, #0]
    1758:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance4, TC_CALLBACK_OVERFLOW);
}
    175a:	bd10      	pop	{r4, pc}
    175c:	200004c0 	.word	0x200004c0
    1760:	00001715 	.word	0x00001715
    1764:	00004be9 	.word	0x00004be9
    1768:	00004cbd 	.word	0x00004cbd
    176c:	0000bde8 	.word	0x0000bde8
    1770:	e000e100 	.word	0xe000e100

00001774 <configure_ext_callback>:

void configure_ext_callback()
{
    1774:	b510      	push	{r4, lr}
	extint_register_callback(new_echo_detection_callback,ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1776:	2200      	movs	r2, #0
    1778:	210f      	movs	r1, #15
    177a:	4804      	ldr	r0, [pc, #16]	; (178c <configure_ext_callback+0x18>)
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <configure_ext_callback+0x1c>)
    177e:	4798      	blx	r3
	extint_chan_enable_callback(ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    1780:	2100      	movs	r1, #0
    1782:	200f      	movs	r0, #15
    1784:	4b03      	ldr	r3, [pc, #12]	; (1794 <configure_ext_callback+0x20>)
    1786:	4798      	blx	r3
}
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	00001571 	.word	0x00001571
    1790:	0000340d 	.word	0x0000340d
    1794:	00003439 	.word	0x00003439

00001798 <configure_callbacks>:

void configure_callbacks()
{
    1798:	b510      	push	{r4, lr}
	configure_TC4_callback();
    179a:	4b02      	ldr	r3, [pc, #8]	; (17a4 <configure_callbacks+0xc>)
    179c:	4798      	blx	r3
	configure_ext_callback();
    179e:	4b02      	ldr	r3, [pc, #8]	; (17a8 <configure_callbacks+0x10>)
    17a0:	4798      	blx	r3
	
}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	00001729 	.word	0x00001729
    17a8:	00001775 	.word	0x00001775

000017ac <configure_modules>:
void configure_modules()
{
    17ac:	b510      	push	{r4, lr}
	configure_tc4();
    17ae:	4b02      	ldr	r3, [pc, #8]	; (17b8 <configure_modules+0xc>)
    17b0:	4798      	blx	r3
	configure_echo_extint();
    17b2:	4b02      	ldr	r3, [pc, #8]	; (17bc <configure_modules+0x10>)
    17b4:	4798      	blx	r3
}
    17b6:	bd10      	pop	{r4, pc}
    17b8:	00001651 	.word	0x00001651
    17bc:	000016b5 	.word	0x000016b5

000017c0 <configure_ultrasound>:

void configure_ultrasound()
{
    17c0:	b510      	push	{r4, lr}
	configure_pins();
    17c2:	4b03      	ldr	r3, [pc, #12]	; (17d0 <configure_ultrasound+0x10>)
    17c4:	4798      	blx	r3
	configure_modules();
    17c6:	4b03      	ldr	r3, [pc, #12]	; (17d4 <configure_ultrasound+0x14>)
    17c8:	4798      	blx	r3
	configure_callbacks();
    17ca:	4b03      	ldr	r3, [pc, #12]	; (17d8 <configure_ultrasound+0x18>)
    17cc:	4798      	blx	r3
    17ce:	bd10      	pop	{r4, pc}
    17d0:	0000161d 	.word	0x0000161d
    17d4:	000017ad 	.word	0x000017ad
    17d8:	00001799 	.word	0x00001799

000017dc <write_data>:
	
}

// Helper function to just execute a simple write
void write_data(uint8_t *bufferSend, uint8_t length)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
    17de:	b084      	sub	sp, #16
	struct i2c_master_packet packet = {
    17e0:	ab01      	add	r3, sp, #4
    17e2:	224c      	movs	r2, #76	; 0x4c
    17e4:	801a      	strh	r2, [r3, #0]
    17e6:	8059      	strh	r1, [r3, #2]
    17e8:	9002      	str	r0, [sp, #8]
    17ea:	2200      	movs	r2, #0
    17ec:	721a      	strb	r2, [r3, #8]
    17ee:	725a      	strb	r2, [r3, #9]
    17f0:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		calc_baud = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    17f2:	4e05      	ldr	r6, [pc, #20]	; (1808 <write_data+0x2c>)
    17f4:	4d05      	ldr	r5, [pc, #20]	; (180c <write_data+0x30>)
    17f6:	4c06      	ldr	r4, [pc, #24]	; (1810 <write_data+0x34>)
    17f8:	a901      	add	r1, sp, #4
    17fa:	0030      	movs	r0, r6
    17fc:	47a8      	blx	r5
    17fe:	7020      	strb	r0, [r4, #0]
		
	}
	while (calc_baud != STATUS_OK);
    1800:	2800      	cmp	r0, #0
    1802:	d1f9      	bne.n	17f8 <write_data+0x1c>
	
    1804:	b004      	add	sp, #16
    1806:	bd70      	pop	{r4, r5, r6, pc}
    1808:	200005ac 	.word	0x200005ac
    180c:	00003af5 	.word	0x00003af5
    1810:	200005d5 	.word	0x200005d5

00001814 <config_accel>:
{
    1814:	b570      	push	{r4, r5, r6, lr}
    1816:	b090      	sub	sp, #64	; 0x40
	config->direction  = PORT_PIN_DIR_INPUT;
    1818:	ad0e      	add	r5, sp, #56	; 0x38
    181a:	2400      	movs	r4, #0
    181c:	702c      	strb	r4, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    181e:	2301      	movs	r3, #1
    1820:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
    1822:	70ac      	strb	r4, [r5, #2]
	port_pin_set_config(PIN_PA23, &config_port_pin);
    1824:	0029      	movs	r1, r5
    1826:	2017      	movs	r0, #23
    1828:	4e3f      	ldr	r6, [pc, #252]	; (1928 <config_accel+0x114>)
    182a:	47b0      	blx	r6
	port_pin_set_config(PIN_PA22, &config_port_pin);
    182c:	0029      	movs	r1, r5
    182e:	2016      	movs	r0, #22
    1830:	47b0      	blx	r6
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1832:	ab01      	add	r3, sp, #4
    1834:	4a3d      	ldr	r2, [pc, #244]	; (192c <config_accel+0x118>)
    1836:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1838:	9403      	str	r4, [sp, #12]
	config->generator_source = GCLK_GENERATOR_0;
    183a:	731c      	strb	r4, [r3, #12]
	config->run_in_standby   = false;
    183c:	761c      	strb	r4, [r3, #24]
	config->unknown_bus_state_timeout = 65535;
    183e:	2201      	movs	r2, #1
    1840:	4252      	negs	r2, r2
    1842:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1844:	9408      	str	r4, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1846:	9409      	str	r4, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1848:	3225      	adds	r2, #37	; 0x25
    184a:	549c      	strb	r4, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    184c:	940b      	str	r4, [sp, #44]	; 0x2c
	config->scl_stretch_only_after_ack_bit = false;
    184e:	3208      	adds	r2, #8
    1850:	549c      	strb	r4, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
    1852:	3201      	adds	r2, #1
    1854:	549c      	strb	r4, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    1856:	3201      	adds	r2, #1
    1858:	549c      	strb	r4, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
    185a:	32a9      	adds	r2, #169	; 0xa9
    185c:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.buffer_timeout = 40000;
    185e:	4a34      	ldr	r2, [pc, #208]	; (1930 <config_accel+0x11c>)
    1860:	82da      	strh	r2, [r3, #22]
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1862:	22c8      	movs	r2, #200	; 0xc8
    1864:	0052      	lsls	r2, r2, #1
    1866:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    1868:	22c0      	movs	r2, #192	; 0xc0
    186a:	0392      	lsls	r2, r2, #14
    186c:	9205      	str	r2, [sp, #20]
		value = i2c_master_init(&i2c_master_instance, SERCOM5, &config_i2c_master);
    186e:	4e31      	ldr	r6, [pc, #196]	; (1934 <config_accel+0x120>)
    1870:	4d31      	ldr	r5, [pc, #196]	; (1938 <config_accel+0x124>)
    1872:	4c32      	ldr	r4, [pc, #200]	; (193c <config_accel+0x128>)
    1874:	aa01      	add	r2, sp, #4
    1876:	4932      	ldr	r1, [pc, #200]	; (1940 <config_accel+0x12c>)
    1878:	0030      	movs	r0, r6
    187a:	47a8      	blx	r5
    187c:	7020      	strb	r0, [r4, #0]
	while(value != STATUS_OK); 
    187e:	2800      	cmp	r0, #0
    1880:	d1f8      	bne.n	1874 <config_accel+0x60>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1882:	4b2c      	ldr	r3, [pc, #176]	; (1934 <config_accel+0x120>)
    1884:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1886:	2207      	movs	r2, #7
    1888:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    188a:	421a      	tst	r2, r3
    188c:	d1fc      	bne.n	1888 <config_accel+0x74>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    188e:	6823      	ldr	r3, [r4, #0]
    1890:	2202      	movs	r2, #2
    1892:	4313      	orrs	r3, r2
    1894:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1896:	4d27      	ldr	r5, [pc, #156]	; (1934 <config_accel+0x120>)
    1898:	6828      	ldr	r0, [r5, #0]
    189a:	4b2a      	ldr	r3, [pc, #168]	; (1944 <config_accel+0x130>)
    189c:	4798      	blx	r3
    189e:	231f      	movs	r3, #31
    18a0:	4018      	ands	r0, r3
    18a2:	3b1e      	subs	r3, #30
    18a4:	4083      	lsls	r3, r0
    18a6:	4a28      	ldr	r2, [pc, #160]	; (1948 <config_accel+0x134>)
    18a8:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18aa:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    18ac:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    18ae:	2110      	movs	r1, #16
    18b0:	8b62      	ldrh	r2, [r4, #26]
    18b2:	420a      	tst	r2, r1
    18b4:	d104      	bne.n	18c0 <config_accel+0xac>
		timeout_counter++;
    18b6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    18b8:	4283      	cmp	r3, r0
    18ba:	d3f9      	bcc.n	18b0 <config_accel+0x9c>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    18bc:	2310      	movs	r3, #16
    18be:	8363      	strh	r3, [r4, #26]
	bufferSend[0] = 0x07;
    18c0:	ac0f      	add	r4, sp, #60	; 0x3c
    18c2:	2607      	movs	r6, #7
    18c4:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
    18c6:	2350      	movs	r3, #80	; 0x50
    18c8:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18ca:	2102      	movs	r1, #2
    18cc:	0020      	movs	r0, r4
    18ce:	4d1f      	ldr	r5, [pc, #124]	; (194c <config_accel+0x138>)
    18d0:	47a8      	blx	r5
	bufferSend[0] = 0x05;
    18d2:	2305      	movs	r3, #5
    18d4:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00000000;
    18d6:	2300      	movs	r3, #0
    18d8:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18da:	2102      	movs	r1, #2
    18dc:	0020      	movs	r0, r4
    18de:	47a8      	blx	r5
	bufferSend[0] = 0x06;
    18e0:	2306      	movs	r3, #6
    18e2:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
    18e4:	33de      	adds	r3, #222	; 0xde
    18e6:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18e8:	2102      	movs	r1, #2
    18ea:	0020      	movs	r0, r4
    18ec:	47a8      	blx	r5
	bufferSend[0] = 0x08;
    18ee:	2308      	movs	r3, #8
    18f0:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100000;
    18f2:	33d8      	adds	r3, #216	; 0xd8
    18f4:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    18f6:	2102      	movs	r1, #2
    18f8:	0020      	movs	r0, r4
    18fa:	47a8      	blx	r5
	bufferSend[0] = 0x09;
    18fc:	2309      	movs	r3, #9
    18fe:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b01101000;
    1900:	335f      	adds	r3, #95	; 0x5f
    1902:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1904:	2102      	movs	r1, #2
    1906:	0020      	movs	r0, r4
    1908:	47a8      	blx	r5
	bufferSend[0] = 0x0A;
    190a:	230a      	movs	r3, #10
    190c:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00010000;
    190e:	3306      	adds	r3, #6
    1910:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    1912:	2102      	movs	r1, #2
    1914:	0020      	movs	r0, r4
    1916:	47a8      	blx	r5
	bufferSend[0] = 0x07;
    1918:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010001;
    191a:	2351      	movs	r3, #81	; 0x51
    191c:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
    191e:	2102      	movs	r1, #2
    1920:	0020      	movs	r0, r4
    1922:	47a8      	blx	r5
}
    1924:	b010      	add	sp, #64	; 0x40
    1926:	bd70      	pop	{r4, r5, r6, pc}
    1928:	000035bd 	.word	0x000035bd
    192c:	00000d48 	.word	0x00000d48
    1930:	ffff9c40 	.word	0xffff9c40
    1934:	200005ac 	.word	0x200005ac
    1938:	000035ed 	.word	0x000035ed
    193c:	200005d4 	.word	0x200005d4
    1940:	42001c00 	.word	0x42001c00
    1944:	00004209 	.word	0x00004209
    1948:	e000e100 	.word	0xe000e100
    194c:	000017dd 	.word	0x000017dd

00001950 <get_accel_data>:
{
    1950:	b530      	push	{r4, r5, lr}
    1952:	b085      	sub	sp, #20
	struct i2c_master_packet packet = {
    1954:	aa01      	add	r2, sp, #4
    1956:	4b09      	ldr	r3, [pc, #36]	; (197c <get_accel_data+0x2c>)
    1958:	cb13      	ldmia	r3!, {r0, r1, r4}
    195a:	c213      	stmia	r2!, {r0, r1, r4}
	bufferSend[0] = 0x00;
    195c:	2300      	movs	r3, #0
    195e:	466a      	mov	r2, sp
    1960:	7013      	strb	r3, [r2, #0]
	write_data(bufferSend, 1);
    1962:	2101      	movs	r1, #1
    1964:	4668      	mov	r0, sp
    1966:	4b06      	ldr	r3, [pc, #24]	; (1980 <get_accel_data+0x30>)
    1968:	4798      	blx	r3
	while(i2c_master_read_packet_wait_no_stop(&i2c_master_instance, &packet) !=
    196a:	4d06      	ldr	r5, [pc, #24]	; (1984 <get_accel_data+0x34>)
    196c:	4c06      	ldr	r4, [pc, #24]	; (1988 <get_accel_data+0x38>)
    196e:	a901      	add	r1, sp, #4
    1970:	0028      	movs	r0, r5
    1972:	47a0      	blx	r4
    1974:	2800      	cmp	r0, #0
    1976:	d1fa      	bne.n	196e <get_accel_data+0x1e>
}
    1978:	b005      	add	sp, #20
    197a:	bd30      	pop	{r4, r5, pc}
    197c:	0000bdec 	.word	0x0000bdec
    1980:	000017dd 	.word	0x000017dd
    1984:	200005ac 	.word	0x200005ac
    1988:	00003ad1 	.word	0x00003ad1

0000198c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    198c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    198e:	2000      	movs	r0, #0
    1990:	4b08      	ldr	r3, [pc, #32]	; (19b4 <delay_init+0x28>)
    1992:	4798      	blx	r3
    1994:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1996:	4c08      	ldr	r4, [pc, #32]	; (19b8 <delay_init+0x2c>)
    1998:	21fa      	movs	r1, #250	; 0xfa
    199a:	0089      	lsls	r1, r1, #2
    199c:	47a0      	blx	r4
    199e:	4b07      	ldr	r3, [pc, #28]	; (19bc <delay_init+0x30>)
    19a0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    19a2:	4907      	ldr	r1, [pc, #28]	; (19c0 <delay_init+0x34>)
    19a4:	0028      	movs	r0, r5
    19a6:	47a0      	blx	r4
    19a8:	4b06      	ldr	r3, [pc, #24]	; (19c4 <delay_init+0x38>)
    19aa:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    19ac:	2205      	movs	r2, #5
    19ae:	4b06      	ldr	r3, [pc, #24]	; (19c8 <delay_init+0x3c>)
    19b0:	601a      	str	r2, [r3, #0]
}
    19b2:	bd70      	pop	{r4, r5, r6, pc}
    19b4:	0000431d 	.word	0x0000431d
    19b8:	00008d29 	.word	0x00008d29
    19bc:	20000010 	.word	0x20000010
    19c0:	000f4240 	.word	0x000f4240
    19c4:	20000014 	.word	0x20000014
    19c8:	e000e010 	.word	0xe000e010

000019cc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    19cc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    19ce:	4b08      	ldr	r3, [pc, #32]	; (19f0 <delay_cycles_us+0x24>)
    19d0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    19d2:	4a08      	ldr	r2, [pc, #32]	; (19f4 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    19d4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19d6:	2180      	movs	r1, #128	; 0x80
    19d8:	0249      	lsls	r1, r1, #9
	while (n--) {
    19da:	3801      	subs	r0, #1
    19dc:	d307      	bcc.n	19ee <delay_cycles_us+0x22>
	if (n > 0) {
    19de:	2c00      	cmp	r4, #0
    19e0:	d0fb      	beq.n	19da <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    19e2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    19e4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19e6:	6813      	ldr	r3, [r2, #0]
    19e8:	420b      	tst	r3, r1
    19ea:	d0fc      	beq.n	19e6 <delay_cycles_us+0x1a>
    19ec:	e7f5      	b.n	19da <delay_cycles_us+0xe>
	}
}
    19ee:	bd30      	pop	{r4, r5, pc}
    19f0:	20000014 	.word	0x20000014
    19f4:	e000e010 	.word	0xe000e010

000019f8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    19f8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    19fa:	4b08      	ldr	r3, [pc, #32]	; (1a1c <delay_cycles_ms+0x24>)
    19fc:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    19fe:	4a08      	ldr	r2, [pc, #32]	; (1a20 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1a00:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a02:	2180      	movs	r1, #128	; 0x80
    1a04:	0249      	lsls	r1, r1, #9
	while (n--) {
    1a06:	3801      	subs	r0, #1
    1a08:	d307      	bcc.n	1a1a <delay_cycles_ms+0x22>
	if (n > 0) {
    1a0a:	2c00      	cmp	r4, #0
    1a0c:	d0fb      	beq.n	1a06 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1a0e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1a10:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a12:	6813      	ldr	r3, [r2, #0]
    1a14:	420b      	tst	r3, r1
    1a16:	d0fc      	beq.n	1a12 <delay_cycles_ms+0x1a>
    1a18:	e7f5      	b.n	1a06 <delay_cycles_ms+0xe>
	}
}
    1a1a:	bd30      	pop	{r4, r5, pc}
    1a1c:	20000010 	.word	0x20000010
    1a20:	e000e010 	.word	0xe000e010

00001a24 <read_left_ir>:
	return (port_base->IN.reg & pin_mask);
    1a24:	4b02      	ldr	r3, [pc, #8]	; (1a30 <read_left_ir+0xc>)
    1a26:	6a18      	ldr	r0, [r3, #32]
    1a28:	0540      	lsls	r0, r0, #21
	
}

uint8_t read_left_ir(void)
{
	return port_pin_get_input_level(OBSTACLE_SENSE);
    1a2a:	0fc0      	lsrs	r0, r0, #31
}
    1a2c:	4770      	bx	lr
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	41004480 	.word	0x41004480

00001a34 <read_right_ir>:
    1a34:	4b02      	ldr	r3, [pc, #8]	; (1a40 <read_right_ir+0xc>)
    1a36:	6a18      	ldr	r0, [r3, #32]
    1a38:	0540      	lsls	r0, r0, #21

uint8_t read_right_ir(void)
{
	return port_pin_get_input_level(OBSTACLE_SENSE);
    1a3a:	0fc0      	lsrs	r0, r0, #31
}
    1a3c:	4770      	bx	lr
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	41004480 	.word	0x41004480

00001a44 <config_motors>:
}
//! [setup]


void config_motors(void)
{
    1a44:	b570      	push	{r4, r5, r6, lr}
    1a46:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    1a48:	4e17      	ldr	r6, [pc, #92]	; (1aa8 <config_motors+0x64>)
    1a4a:	ac01      	add	r4, sp, #4
    1a4c:	0031      	movs	r1, r6
    1a4e:	0020      	movs	r0, r4
    1a50:	4b16      	ldr	r3, [pc, #88]	; (1aac <config_motors+0x68>)
    1a52:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    1a54:	2306      	movs	r3, #6
    1a56:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0x00FF;
    1a58:	33f9      	adds	r3, #249	; 0xf9
    1a5a:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1a5c:	3bfd      	subs	r3, #253	; 0xfd
    1a5e:	7623      	strb	r3, [r4, #24]
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CH] = TCC_WAVE_POLARITY_0;
    1a60:	2300      	movs	r3, #0
    1a62:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CH] = TCC_WAVE_POLARITY_0;
    1a64:	7563      	strb	r3, [r4, #21]
	config_tcc.compare.match[LEFT_MOTOR_CH] = 0;
    1a66:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_WO] = true;
    1a68:	2201      	movs	r2, #1
    1a6a:	2198      	movs	r1, #152	; 0x98
    1a6c:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_WO]        = PIN_PA05E_TCC0_WO1; //this is no longer correct--- should be now
    1a6e:	3993      	subs	r1, #147	; 0x93
    1a70:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_WO]    = PINMUX_PA05E_TCC0_WO1; // this is no longer correct --- should be now
    1a72:	490f      	ldr	r1, [pc, #60]	; (1ab0 <config_motors+0x6c>)
    1a74:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.compare.match[RIGHT_MOTOR_CH] = 0;
    1a76:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_WO] = true;
    1a78:	3399      	adds	r3, #153	; 0x99
    1a7a:	54e2      	strb	r2, [r4, r3]
    config_tcc.pins.wave_out_pin[RIGHT_MOTOR_WO]        = PIN_PA04E_TCC0_WO0; // this is no longer correct --- should be now
    1a7c:	3b95      	subs	r3, #149	; 0x95
    1a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_WO]    = PINMUX_PA04E_TCC0_WO0; // this is no longer correct --- should be now
    1a80:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <config_motors+0x70>)
    1a82:	67e3      	str	r3, [r4, #124]	; 0x7c
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    1a84:	4d0c      	ldr	r5, [pc, #48]	; (1ab8 <config_motors+0x74>)
    1a86:	0022      	movs	r2, r4
    1a88:	0031      	movs	r1, r6
    1a8a:	0028      	movs	r0, r5
    1a8c:	4b0b      	ldr	r3, [pc, #44]	; (1abc <config_motors+0x78>)
    1a8e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1a90:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    1a92:	2102      	movs	r1, #2
    1a94:	6893      	ldr	r3, [r2, #8]
    1a96:	4219      	tst	r1, r3
    1a98:	d1fc      	bne.n	1a94 <config_motors+0x50>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1a9a:	6813      	ldr	r3, [r2, #0]
    1a9c:	2102      	movs	r1, #2
    1a9e:	430b      	orrs	r3, r1
    1aa0:	6013      	str	r3, [r2, #0]
	port_pin_set_output_level(PIN_PA20, true);
	port_pin_set_output_level(PIN_PA21, true);
	motor_enable = false;
	*/
	
}
    1aa2:	b02a      	add	sp, #168	; 0xa8
    1aa4:	bd70      	pop	{r4, r5, r6, pc}
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	42002000 	.word	0x42002000
    1aac:	00004605 	.word	0x00004605
    1ab0:	00050004 	.word	0x00050004
    1ab4:	00040004 	.word	0x00040004
    1ab8:	20000440 	.word	0x20000440
    1abc:	00004751 	.word	0x00004751

00001ac0 <set_motor_left>:


// PWM is on BIN1/BIN2 - PA13 and PA21
// Depending on direction, set other pin to standard output and set it to low
void set_motor_left(uint8_t dir, uint8_t speed)
{
    1ac0:	b530      	push	{r4, r5, lr}
    1ac2:	b083      	sub	sp, #12
    1ac4:	0004      	movs	r4, r0
    1ac6:	000d      	movs	r5, r1
	if(motor_enable == false)
    1ac8:	4b1f      	ldr	r3, [pc, #124]	; (1b48 <set_motor_left+0x88>)
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	2b00      	cmp	r3, #0
    1ace:	d106      	bne.n	1ade <set_motor_left+0x1e>
		port_base->OUTSET.reg = pin_mask;
    1ad0:	2280      	movs	r2, #128	; 0x80
    1ad2:	0512      	lsls	r2, r2, #20
    1ad4:	4b1d      	ldr	r3, [pc, #116]	; (1b4c <set_motor_left+0x8c>)
    1ad6:	619a      	str	r2, [r3, #24]
	{
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
		
		// set flag to true
		motor_enable = true;
    1ad8:	2201      	movs	r2, #1
    1ada:	4b1b      	ldr	r3, [pc, #108]	; (1b48 <set_motor_left+0x88>)
    1adc:	701a      	strb	r2, [r3, #0]
	}
	if(old_left_dir != dir)
    1ade:	4b1c      	ldr	r3, [pc, #112]	; (1b50 <set_motor_left+0x90>)
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	42a3      	cmp	r3, r4
    1ae4:	d017      	beq.n	1b16 <set_motor_left+0x56>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1ae6:	2201      	movs	r2, #1
    1ae8:	466b      	mov	r3, sp
    1aea:	701a      	strb	r2, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1aec:	ab01      	add	r3, sp, #4
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aee:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1af0:	2100      	movs	r1, #0
    1af2:	70d9      	strb	r1, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1af4:	705a      	strb	r2, [r3, #1]
		// need to configure PWM with opposite pins
		if(dir == 0)
    1af6:	2c00      	cmp	r4, #0
    1af8:	d116      	bne.n	1b28 <set_motor_left+0x68>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA21F_TCC0_WO7;
    1afa:	0019      	movs	r1, r3
    1afc:	2305      	movs	r3, #5
    1afe:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA21F_TCC0_WO7, &pin_config);
    1b00:	2015      	movs	r0, #21
    1b02:	4b14      	ldr	r3, [pc, #80]	; (1b54 <set_motor_left+0x94>)
    1b04:	4798      	blx	r3
			port_pin_set_config(PIN_PA13, &config_port_pin);
    1b06:	4669      	mov	r1, sp
    1b08:	200d      	movs	r0, #13
    1b0a:	4b13      	ldr	r3, [pc, #76]	; (1b58 <set_motor_left+0x98>)
    1b0c:	4798      	blx	r3
    1b0e:	2280      	movs	r2, #128	; 0x80
    1b10:	0192      	lsls	r2, r2, #6
    1b12:	4b0e      	ldr	r3, [pc, #56]	; (1b4c <set_motor_left+0x8c>)
    1b14:	619a      	str	r2, [r3, #24]
			system_pinmux_pin_set_config(PIN_PA13F_TCC0_WO7, &pin_config);
			port_pin_set_config(PIN_PA21, &config_port_pin);
			port_pin_set_output_level(PIN_PA21, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CH, speed);
    1b16:	002a      	movs	r2, r5
    1b18:	2100      	movs	r1, #0
    1b1a:	4810      	ldr	r0, [pc, #64]	; (1b5c <set_motor_left+0x9c>)
    1b1c:	4b10      	ldr	r3, [pc, #64]	; (1b60 <set_motor_left+0xa0>)
    1b1e:	4798      	blx	r3
	//tcc_enable(&tcc_instance0);
	old_left_dir = dir;
    1b20:	4b0b      	ldr	r3, [pc, #44]	; (1b50 <set_motor_left+0x90>)
    1b22:	701c      	strb	r4, [r3, #0]
}
    1b24:	b003      	add	sp, #12
    1b26:	bd30      	pop	{r4, r5, pc}
			pin_config.mux_position = (uint8_t)PINMUX_PA13F_TCC0_WO7;
    1b28:	a901      	add	r1, sp, #4
    1b2a:	2305      	movs	r3, #5
    1b2c:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA13F_TCC0_WO7, &pin_config);
    1b2e:	200d      	movs	r0, #13
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <set_motor_left+0x94>)
    1b32:	4798      	blx	r3
			port_pin_set_config(PIN_PA21, &config_port_pin);
    1b34:	4669      	mov	r1, sp
    1b36:	2015      	movs	r0, #21
    1b38:	4b07      	ldr	r3, [pc, #28]	; (1b58 <set_motor_left+0x98>)
    1b3a:	4798      	blx	r3
    1b3c:	2280      	movs	r2, #128	; 0x80
    1b3e:	0392      	lsls	r2, r2, #14
    1b40:	4b02      	ldr	r3, [pc, #8]	; (1b4c <set_motor_left+0x8c>)
    1b42:	619a      	str	r2, [r3, #24]
    1b44:	e7e7      	b.n	1b16 <set_motor_left+0x56>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	2000021e 	.word	0x2000021e
    1b4c:	41004400 	.word	0x41004400
    1b50:	20000018 	.word	0x20000018
    1b54:	0000452d 	.word	0x0000452d
    1b58:	000035bd 	.word	0x000035bd
    1b5c:	20000440 	.word	0x20000440
    1b60:	00004b5d 	.word	0x00004b5d

00001b64 <set_motor_right>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor_right(uint8_t dir, uint8_t speed)
{
    1b64:	b530      	push	{r4, r5, lr}
    1b66:	b083      	sub	sp, #12
    1b68:	0004      	movs	r4, r0
    1b6a:	000d      	movs	r5, r1
	if(motor_enable == false)
    1b6c:	4b1f      	ldr	r3, [pc, #124]	; (1bec <set_motor_right+0x88>)
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d106      	bne.n	1b82 <set_motor_right+0x1e>
    1b74:	2280      	movs	r2, #128	; 0x80
    1b76:	0512      	lsls	r2, r2, #20
    1b78:	4b1d      	ldr	r3, [pc, #116]	; (1bf0 <set_motor_right+0x8c>)
    1b7a:	619a      	str	r2, [r3, #24]
	{
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
		// enable PWM
		// set flag to true
		motor_enable = true;
    1b7c:	2201      	movs	r2, #1
    1b7e:	4b1b      	ldr	r3, [pc, #108]	; (1bec <set_motor_right+0x88>)
    1b80:	701a      	strb	r2, [r3, #0]
	}
	if(old_right_dir != dir)
    1b82:	4b1c      	ldr	r3, [pc, #112]	; (1bf4 <set_motor_right+0x90>)
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	42a3      	cmp	r3, r4
    1b88:	d017      	beq.n	1bba <set_motor_right+0x56>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1b8a:	2101      	movs	r1, #1
    1b8c:	466b      	mov	r3, sp
    1b8e:	7019      	strb	r1, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1b90:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b92:	2200      	movs	r2, #0
    1b94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1b96:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1b98:	70da      	strb	r2, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		// need to configure PWM with opposite pins
		if(dir == 0)
    1b9a:	2c00      	cmp	r4, #0
    1b9c:	d116      	bne.n	1bcc <set_motor_right+0x68>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA20F_TCC0_WO6;
    1b9e:	0019      	movs	r1, r3
    1ba0:	2305      	movs	r3, #5
    1ba2:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA20F_TCC0_WO6, &pin_config);
    1ba4:	2014      	movs	r0, #20
    1ba6:	4b14      	ldr	r3, [pc, #80]	; (1bf8 <set_motor_right+0x94>)
    1ba8:	4798      	blx	r3
			port_pin_set_config(PIN_PA12, &config_port_pin);
    1baa:	4669      	mov	r1, sp
    1bac:	200c      	movs	r0, #12
    1bae:	4b13      	ldr	r3, [pc, #76]	; (1bfc <set_motor_right+0x98>)
    1bb0:	4798      	blx	r3
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	0152      	lsls	r2, r2, #5
    1bb6:	4b0e      	ldr	r3, [pc, #56]	; (1bf0 <set_motor_right+0x8c>)
    1bb8:	619a      	str	r2, [r3, #24]
			system_pinmux_pin_set_config(PIN_PA12F_TCC0_WO6, &pin_config);
			port_pin_set_config(PIN_PA20, &config_port_pin);
			port_pin_set_output_level(PIN_PA20, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CH, speed);
    1bba:	002a      	movs	r2, r5
    1bbc:	2101      	movs	r1, #1
    1bbe:	4810      	ldr	r0, [pc, #64]	; (1c00 <set_motor_right+0x9c>)
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <set_motor_right+0xa0>)
    1bc2:	4798      	blx	r3
	old_right_dir = dir;
    1bc4:	4b0b      	ldr	r3, [pc, #44]	; (1bf4 <set_motor_right+0x90>)
    1bc6:	701c      	strb	r4, [r3, #0]
}
    1bc8:	b003      	add	sp, #12
    1bca:	bd30      	pop	{r4, r5, pc}
			pin_config.mux_position = (uint8_t)PINMUX_PA12F_TCC0_WO6;
    1bcc:	a901      	add	r1, sp, #4
    1bce:	2305      	movs	r3, #5
    1bd0:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA12F_TCC0_WO6, &pin_config);
    1bd2:	200c      	movs	r0, #12
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <set_motor_right+0x94>)
    1bd6:	4798      	blx	r3
			port_pin_set_config(PIN_PA20, &config_port_pin);
    1bd8:	4669      	mov	r1, sp
    1bda:	2014      	movs	r0, #20
    1bdc:	4b07      	ldr	r3, [pc, #28]	; (1bfc <set_motor_right+0x98>)
    1bde:	4798      	blx	r3
    1be0:	2280      	movs	r2, #128	; 0x80
    1be2:	0352      	lsls	r2, r2, #13
    1be4:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <set_motor_right+0x8c>)
    1be6:	619a      	str	r2, [r3, #24]
    1be8:	e7e7      	b.n	1bba <set_motor_right+0x56>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	2000021e 	.word	0x2000021e
    1bf0:	41004400 	.word	0x41004400
    1bf4:	20000019 	.word	0x20000019
    1bf8:	0000452d 	.word	0x0000452d
    1bfc:	000035bd 	.word	0x000035bd
    1c00:	20000440 	.word	0x20000440
    1c04:	00004b5d 	.word	0x00004b5d

00001c08 <turn_off_motors>:

void turn_off_motors()
{
    1c08:	b510      	push	{r4, lr}
	
	// disable the chip to save power - this is no longer an option as we needed the sleep mode i/o pin for something else
	// port_pin_set_output_level(PIN_PA27, false); 
	// Turn PWM to 0, no need to turn everything off
	set_motor_left(1,0);
    1c0a:	2100      	movs	r1, #0
    1c0c:	2001      	movs	r0, #1
    1c0e:	4b05      	ldr	r3, [pc, #20]	; (1c24 <turn_off_motors+0x1c>)
    1c10:	4798      	blx	r3
	set_motor_right(1,0);
    1c12:	2100      	movs	r1, #0
    1c14:	2001      	movs	r0, #1
    1c16:	4b04      	ldr	r3, [pc, #16]	; (1c28 <turn_off_motors+0x20>)
    1c18:	4798      	blx	r3
	
	// Set flag to false
	motor_enable = false;
    1c1a:	2200      	movs	r2, #0
    1c1c:	4b03      	ldr	r3, [pc, #12]	; (1c2c <turn_off_motors+0x24>)
    1c1e:	701a      	strb	r2, [r3, #0]
    1c20:	bd10      	pop	{r4, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00001ac1 	.word	0x00001ac1
    1c28:	00001b65 	.word	0x00001b65
    1c2c:	2000021e 	.word	0x2000021e

00001c30 <configure_dac>:
static volatile uint16_t waveform_volume = 0; //0x3ff highest analog value to be generated
volatile static uint16_t waveform_frequency = 5000;  //1KHz


void configure_dac(void)
{
    1c30:	b500      	push	{lr}
    1c32:	b083      	sub	sp, #12

	struct dac_config config_dac;
	dac_get_config_defaults(&config_dac);
    1c34:	4668      	mov	r0, sp
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <configure_dac+0x1c>)
    1c38:	4798      	blx	r3
	config_dac.reference = DAC_REFERENCE_AVCC;
    1c3a:	2340      	movs	r3, #64	; 0x40
    1c3c:	466a      	mov	r2, sp
    1c3e:	7013      	strb	r3, [r2, #0]
	dac_init(&dac_instance, DAC, &config_dac);
    1c40:	4903      	ldr	r1, [pc, #12]	; (1c50 <configure_dac+0x20>)
    1c42:	4804      	ldr	r0, [pc, #16]	; (1c54 <configure_dac+0x24>)
    1c44:	4b04      	ldr	r3, [pc, #16]	; (1c58 <configure_dac+0x28>)
    1c46:	4798      	blx	r3
	//dac_enable(&dac_instance);
	
}
    1c48:	b003      	add	sp, #12
    1c4a:	bd00      	pop	{pc}
    1c4c:	000032d5 	.word	0x000032d5
    1c50:	42004800 	.word	0x42004800
    1c54:	200005fc 	.word	0x200005fc
    1c58:	000032e9 	.word	0x000032e9

00001c5c <configure_dac_channel>:

void configure_dac_channel(void)
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	b082      	sub	sp, #8
	
	struct dac_chan_config config_dac_chan;
	dac_chan_get_config_defaults(&config_dac_chan);
    1c60:	a801      	add	r0, sp, #4
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <configure_dac_channel+0x24>)
    1c64:	4798      	blx	r3
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    1c66:	4c07      	ldr	r4, [pc, #28]	; (1c84 <configure_dac_channel+0x28>)
    1c68:	aa01      	add	r2, sp, #4
    1c6a:	2100      	movs	r1, #0
    1c6c:	0020      	movs	r0, r4
    1c6e:	4b06      	ldr	r3, [pc, #24]	; (1c88 <configure_dac_channel+0x2c>)
    1c70:	4798      	blx	r3
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    1c72:	2100      	movs	r1, #0
    1c74:	0020      	movs	r0, r4
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <configure_dac_channel+0x30>)
    1c78:	4798      	blx	r3
	
}
    1c7a:	b002      	add	sp, #8
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	00003405 	.word	0x00003405
    1c84:	200005fc 	.word	0x200005fc
    1c88:	00003407 	.word	0x00003407
    1c8c:	00003409 	.word	0x00003409

00001c90 <configure_buzzer_pins>:

void configure_buzzer_pins()
{
    1c90:	b500      	push	{lr}
    1c92:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1c94:	a901      	add	r1, sp, #4
    1c96:	2301      	movs	r3, #1
    1c98:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1c9a:	2200      	movs	r2, #0
    1c9c:	708a      	strb	r2, [r1, #2]
	// Enable output on the I/O line
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1c9e:	700b      	strb	r3, [r1, #0]
	//port_pin_set_config(PIN_PA02, &config_port_pin);
	port_pin_set_config(AUDIO_SDB, &config_port_pin);
    1ca0:	2037      	movs	r0, #55	; 0x37
    1ca2:	4b02      	ldr	r3, [pc, #8]	; (1cac <configure_buzzer_pins+0x1c>)
    1ca4:	4798      	blx	r3

}
    1ca6:	b003      	add	sp, #12
    1ca8:	bd00      	pop	{pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	000035bd 	.word	0x000035bd

00001cb0 <calculate_frequency>:



struct speaker_timer* calculate_frequency(void)
{	
    1cb0:	b510      	push	{r4, lr}
	static struct speaker_timer* I_1 = NULL;
	static first_time = true;
	uint8_t prescalar_value = 1;
	if(first_time == true)
    1cb2:	4b48      	ldr	r3, [pc, #288]	; (1dd4 <calculate_frequency+0x124>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	2b01      	cmp	r3, #1
    1cb8:	d01e      	beq.n	1cf8 <calculate_frequency+0x48>
	{
		I_1 = malloc(sizeof(struct speaker_timer));
		first_time = false;
	}
	
	if((waveform_frequency <= 10000) & (waveform_frequency > 2941))
    1cba:	4b47      	ldr	r3, [pc, #284]	; (1dd8 <calculate_frequency+0x128>)
    1cbc:	881a      	ldrh	r2, [r3, #0]
    1cbe:	b292      	uxth	r2, r2
    1cc0:	8819      	ldrh	r1, [r3, #0]
    1cc2:	b289      	uxth	r1, r1
    1cc4:	2300      	movs	r3, #0
    1cc6:	4845      	ldr	r0, [pc, #276]	; (1ddc <calculate_frequency+0x12c>)
    1cc8:	4290      	cmp	r0, r2
    1cca:	415b      	adcs	r3, r3
    1ccc:	b2db      	uxtb	r3, r3
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d01b      	beq.n	1d0a <calculate_frequency+0x5a>
    1cd2:	4b43      	ldr	r3, [pc, #268]	; (1de0 <calculate_frequency+0x130>)
    1cd4:	428b      	cmp	r3, r1
    1cd6:	d218      	bcs.n	1d0a <calculate_frequency+0x5a>
	{
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV1;
    1cd8:	4b42      	ldr	r3, [pc, #264]	; (1de4 <calculate_frequency+0x134>)
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	2200      	movs	r2, #0
    1cde:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_1 ; 
    1ce0:	3201      	adds	r2, #1
	else 
	{
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV64;
		prescalar_value = PRESCALAR_64 ; 	
	}
	I_1->speaker_period = (OPTIMIZE_COUNT_CALCULATION/((prescalar_value)*(waveform_frequency)));
    1ce2:	4b40      	ldr	r3, [pc, #256]	; (1de4 <calculate_frequency+0x134>)
    1ce4:	681c      	ldr	r4, [r3, #0]
    1ce6:	4b3c      	ldr	r3, [pc, #240]	; (1dd8 <calculate_frequency+0x128>)
    1ce8:	8819      	ldrh	r1, [r3, #0]
    1cea:	4351      	muls	r1, r2
    1cec:	483e      	ldr	r0, [pc, #248]	; (1de8 <calculate_frequency+0x138>)
    1cee:	4b3f      	ldr	r3, [pc, #252]	; (1dec <calculate_frequency+0x13c>)
    1cf0:	4798      	blx	r3
    1cf2:	7020      	strb	r0, [r4, #0]
	
	return I_1; 
}
    1cf4:	0020      	movs	r0, r4
    1cf6:	bd10      	pop	{r4, pc}
		I_1 = malloc(sizeof(struct speaker_timer));
    1cf8:	2008      	movs	r0, #8
    1cfa:	4b3d      	ldr	r3, [pc, #244]	; (1df0 <calculate_frequency+0x140>)
    1cfc:	4798      	blx	r3
    1cfe:	4b39      	ldr	r3, [pc, #228]	; (1de4 <calculate_frequency+0x134>)
    1d00:	6018      	str	r0, [r3, #0]
		first_time = false;
    1d02:	2200      	movs	r2, #0
    1d04:	4b33      	ldr	r3, [pc, #204]	; (1dd4 <calculate_frequency+0x124>)
    1d06:	601a      	str	r2, [r3, #0]
    1d08:	e7d7      	b.n	1cba <calculate_frequency+0xa>
	else if((waveform_frequency <= 2941) & (waveform_frequency > 1470))
    1d0a:	4b33      	ldr	r3, [pc, #204]	; (1dd8 <calculate_frequency+0x128>)
    1d0c:	881a      	ldrh	r2, [r3, #0]
    1d0e:	b292      	uxth	r2, r2
    1d10:	8819      	ldrh	r1, [r3, #0]
    1d12:	b289      	uxth	r1, r1
    1d14:	2300      	movs	r3, #0
    1d16:	4832      	ldr	r0, [pc, #200]	; (1de0 <calculate_frequency+0x130>)
    1d18:	4290      	cmp	r0, r2
    1d1a:	415b      	adcs	r3, r3
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d009      	beq.n	1d36 <calculate_frequency+0x86>
    1d22:	4b34      	ldr	r3, [pc, #208]	; (1df4 <calculate_frequency+0x144>)
    1d24:	428b      	cmp	r3, r1
    1d26:	d206      	bcs.n	1d36 <calculate_frequency+0x86>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV2;
    1d28:	4b2e      	ldr	r3, [pc, #184]	; (1de4 <calculate_frequency+0x134>)
    1d2a:	681b      	ldr	r3, [r3, #0]
    1d2c:	2280      	movs	r2, #128	; 0x80
    1d2e:	0052      	lsls	r2, r2, #1
    1d30:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_2 ; 
    1d32:	3afe      	subs	r2, #254	; 0xfe
    1d34:	e7d5      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency <= 1470) & (waveform_frequency > 732))
    1d36:	4b28      	ldr	r3, [pc, #160]	; (1dd8 <calculate_frequency+0x128>)
    1d38:	881a      	ldrh	r2, [r3, #0]
    1d3a:	b292      	uxth	r2, r2
    1d3c:	8819      	ldrh	r1, [r3, #0]
    1d3e:	b289      	uxth	r1, r1
    1d40:	2300      	movs	r3, #0
    1d42:	482c      	ldr	r0, [pc, #176]	; (1df4 <calculate_frequency+0x144>)
    1d44:	4290      	cmp	r0, r2
    1d46:	415b      	adcs	r3, r3
    1d48:	b2db      	uxtb	r3, r3
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d00b      	beq.n	1d66 <calculate_frequency+0xb6>
    1d4e:	23b7      	movs	r3, #183	; 0xb7
    1d50:	009b      	lsls	r3, r3, #2
    1d52:	428b      	cmp	r3, r1
    1d54:	d207      	bcs.n	1d66 <calculate_frequency+0xb6>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV4;
    1d56:	4b23      	ldr	r3, [pc, #140]	; (1de4 <calculate_frequency+0x134>)
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	2280      	movs	r2, #128	; 0x80
    1d5c:	0092      	lsls	r2, r2, #2
    1d5e:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_4 ; 	
    1d60:	3afd      	subs	r2, #253	; 0xfd
    1d62:	3aff      	subs	r2, #255	; 0xff
    1d64:	e7bd      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency <= 732) & (waveform_frequency > 366))
    1d66:	4b1c      	ldr	r3, [pc, #112]	; (1dd8 <calculate_frequency+0x128>)
    1d68:	881a      	ldrh	r2, [r3, #0]
    1d6a:	b292      	uxth	r2, r2
    1d6c:	8819      	ldrh	r1, [r3, #0]
    1d6e:	b289      	uxth	r1, r1
    1d70:	2300      	movs	r3, #0
    1d72:	20b7      	movs	r0, #183	; 0xb7
    1d74:	0080      	lsls	r0, r0, #2
    1d76:	4290      	cmp	r0, r2
    1d78:	415b      	adcs	r3, r3
    1d7a:	b2db      	uxtb	r3, r3
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d00a      	beq.n	1d96 <calculate_frequency+0xe6>
    1d80:	23b7      	movs	r3, #183	; 0xb7
    1d82:	005b      	lsls	r3, r3, #1
    1d84:	428b      	cmp	r3, r1
    1d86:	d206      	bcs.n	1d96 <calculate_frequency+0xe6>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV8;
    1d88:	4b16      	ldr	r3, [pc, #88]	; (1de4 <calculate_frequency+0x134>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	22c0      	movs	r2, #192	; 0xc0
    1d8e:	0092      	lsls	r2, r2, #2
    1d90:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_8 ; 
    1d92:	2208      	movs	r2, #8
    1d94:	e7a5      	b.n	1ce2 <calculate_frequency+0x32>
	else if((waveform_frequency>= 366) & (waveform_frequency < 183))
    1d96:	4a10      	ldr	r2, [pc, #64]	; (1dd8 <calculate_frequency+0x128>)
    1d98:	8813      	ldrh	r3, [r2, #0]
    1d9a:	b29b      	uxth	r3, r3
    1d9c:	8812      	ldrh	r2, [r2, #0]
    1d9e:	b292      	uxth	r2, r2
    1da0:	216e      	movs	r1, #110	; 0x6e
    1da2:	31ff      	adds	r1, #255	; 0xff
    1da4:	4299      	cmp	r1, r3
    1da6:	d20d      	bcs.n	1dc4 <calculate_frequency+0x114>
    1da8:	2300      	movs	r3, #0
    1daa:	39b7      	subs	r1, #183	; 0xb7
    1dac:	4291      	cmp	r1, r2
    1dae:	415b      	adcs	r3, r3
    1db0:	b2db      	uxtb	r3, r3
    1db2:	2b00      	cmp	r3, #0
    1db4:	d006      	beq.n	1dc4 <calculate_frequency+0x114>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV16;
    1db6:	4b0b      	ldr	r3, [pc, #44]	; (1de4 <calculate_frequency+0x134>)
    1db8:	681b      	ldr	r3, [r3, #0]
    1dba:	2280      	movs	r2, #128	; 0x80
    1dbc:	00d2      	lsls	r2, r2, #3
    1dbe:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_32 ; 	
    1dc0:	2220      	movs	r2, #32
    1dc2:	e78e      	b.n	1ce2 <calculate_frequency+0x32>
		I_1->speaker_prescalar =  TC_CLOCK_PRESCALER_DIV64;
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <calculate_frequency+0x134>)
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	22a0      	movs	r2, #160	; 0xa0
    1dca:	00d2      	lsls	r2, r2, #3
    1dcc:	605a      	str	r2, [r3, #4]
		prescalar_value = PRESCALAR_64 ; 	
    1dce:	2240      	movs	r2, #64	; 0x40
    1dd0:	e787      	b.n	1ce2 <calculate_frequency+0x32>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	2000001c 	.word	0x2000001c
    1dd8:	20000022 	.word	0x20000022
    1ddc:	00002710 	.word	0x00002710
    1de0:	00000b7d 	.word	0x00000b7d
    1de4:	20000220 	.word	0x20000220
    1de8:	000b71b0 	.word	0x000b71b0
    1dec:	00008d29 	.word	0x00008d29
    1df0:	0000bcc9 	.word	0x0000bcc9
    1df4:	000005be 	.word	0x000005be

00001df8 <configure_dma_resource_dac>:



//DMA initialization
void configure_dma_resource_dac(struct dma_resource *resource)
{
    1df8:	b510      	push	{r4, lr}
    1dfa:	b082      	sub	sp, #8
    1dfc:	0004      	movs	r4, r0
	struct dma_resource_config config;
	dma_get_config_defaults(&config);
    1dfe:	4668      	mov	r0, sp
    1e00:	4b06      	ldr	r3, [pc, #24]	; (1e1c <configure_dma_resource_dac+0x24>)
    1e02:	4798      	blx	r3
	config.peripheral_trigger = TC5_DMAC_ID_OVF;
    1e04:	231e      	movs	r3, #30
    1e06:	466a      	mov	r2, sp
    1e08:	7053      	strb	r3, [r2, #1]
	config.trigger_action = DMA_TRIGGER_ACTON_BEAT;
    1e0a:	3b1c      	subs	r3, #28
    1e0c:	7093      	strb	r3, [r2, #2]
	dma_allocate(resource, &config);
    1e0e:	4669      	mov	r1, sp
    1e10:	0020      	movs	r0, r4
    1e12:	4b03      	ldr	r3, [pc, #12]	; (1e20 <configure_dma_resource_dac+0x28>)
    1e14:	4798      	blx	r3
}
    1e16:	b002      	add	sp, #8
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	000001c9 	.word	0x000001c9
    1e20:	000001d9 	.word	0x000001d9

00001e24 <setup_transfer_descriptor_dac>:

void setup_transfer_descriptor_dac(DmacDescriptor *descriptor)
{
    1e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e26:	46de      	mov	lr, fp
    1e28:	4657      	mov	r7, sl
    1e2a:	464e      	mov	r6, r9
    1e2c:	4645      	mov	r5, r8
    1e2e:	b5e0      	push	{r5, r6, r7, lr}
    1e30:	b08b      	sub	sp, #44	; 0x2c
    1e32:	9003      	str	r0, [sp, #12]
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    1e34:	2201      	movs	r2, #1
    1e36:	ab04      	add	r3, sp, #16
    1e38:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    1e3a:	2300      	movs	r3, #0
    1e3c:	a904      	add	r1, sp, #16
    1e3e:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    1e40:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    1e42:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
    1e44:	710a      	strb	r2, [r1, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
    1e46:	714a      	strb	r2, [r1, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    1e48:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    1e4a:	71cb      	strb	r3, [r1, #7]
	/* Default transfer size is set to 0 */
	config->block_transfer_count = 0;
    1e4c:	810b      	strh	r3, [r1, #8]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
    1e4e:	9307      	str	r3, [sp, #28]
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
    1e50:	9308      	str	r3, [sp, #32]
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    1e52:	9309      	str	r3, [sp, #36]	; 0x24
	waveform_amplitude = waveform_volume*MAX_AMPLITUDE;
    1e54:	4b72      	ldr	r3, [pc, #456]	; (2020 <STACK_SIZE+0x20>)
    1e56:	8818      	ldrh	r0, [r3, #0]
    1e58:	b280      	uxth	r0, r0
    1e5a:	4b72      	ldr	r3, [pc, #456]	; (2024 <STACK_SIZE+0x24>)
    1e5c:	4798      	blx	r3
    1e5e:	4a72      	ldr	r2, [pc, #456]	; (2028 <STACK_SIZE+0x28>)
    1e60:	4b72      	ldr	r3, [pc, #456]	; (202c <STACK_SIZE+0x2c>)
    1e62:	4c73      	ldr	r4, [pc, #460]	; (2030 <STACK_SIZE+0x30>)
    1e64:	47a0      	blx	r4
    1e66:	4b73      	ldr	r3, [pc, #460]	; (2034 <STACK_SIZE+0x34>)
    1e68:	4798      	blx	r3
    1e6a:	b284      	uxth	r4, r0
	if(first_run == true )
    1e6c:	4b72      	ldr	r3, [pc, #456]	; (2038 <STACK_SIZE+0x38>)
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d13b      	bne.n	1eec <setup_transfer_descriptor_dac+0xc8>
	if(waveform_type == square )
    1e74:	4b71      	ldr	r3, [pc, #452]	; (203c <STACK_SIZE+0x3c>)
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d14e      	bne.n	1f1a <setup_transfer_descriptor_dac+0xf6>
		waveform_current = waveform_square;
    1e7c:	4b70      	ldr	r3, [pc, #448]	; (2040 <STACK_SIZE+0x40>)
    1e7e:	6818      	ldr	r0, [r3, #0]
    1e80:	4b70      	ldr	r3, [pc, #448]	; (2044 <STACK_SIZE+0x44>)
    1e82:	6018      	str	r0, [r3, #0]
    1e84:	0003      	movs	r3, r0
    1e86:	0002      	movs	r2, r0
    1e88:	3240      	adds	r2, #64	; 0x40
			*waveform_square = waveform_amplitude;
    1e8a:	801c      	strh	r4, [r3, #0]
    1e8c:	3302      	adds	r3, #2
		for(i=0;i<(NO_DATA_SQUARE/2);i++)
    1e8e:	4293      	cmp	r3, r2
    1e90:	d1fb      	bne.n	1e8a <setup_transfer_descriptor_dac+0x66>
    1e92:	0001      	movs	r1, r0
    1e94:	3180      	adds	r1, #128	; 0x80
			*waveform_square = 0;
    1e96:	2200      	movs	r2, #0
    1e98:	801a      	strh	r2, [r3, #0]
    1e9a:	3302      	adds	r3, #2
		for(i=(NO_DATA_SQUARE/2);i<NO_DATA_SQUARE;i++)
    1e9c:	4299      	cmp	r1, r3
    1e9e:	d1fb      	bne.n	1e98 <setup_transfer_descriptor_dac+0x74>
		waveform_square = waveform_current;
    1ea0:	4b67      	ldr	r3, [pc, #412]	; (2040 <STACK_SIZE+0x40>)
    1ea2:	6018      	str	r0, [r3, #0]
	return waveform_current;
    1ea4:	4b67      	ldr	r3, [pc, #412]	; (2044 <STACK_SIZE+0x44>)
    1ea6:	681b      	ldr	r3, [r3, #0]
	uint16_t* waveform=NULL;
	static bool first_time = true;
	struct dma_descriptor_config descriptor_config;
	dma_descriptor_get_config_defaults(&descriptor_config);
	waveform = calculate_wave();
	descriptor_config.beat_size = DMA_BEAT_SIZE_HWORD;
    1ea8:	2201      	movs	r2, #1
    1eaa:	a904      	add	r1, sp, #16
    1eac:	70ca      	strb	r2, [r1, #3]
	descriptor_config.dst_increment_enable = false;
    1eae:	2200      	movs	r2, #0
    1eb0:	714a      	strb	r2, [r1, #5]
	descriptor_config.block_transfer_count = NO_DATA_SINE;
    1eb2:	3240      	adds	r2, #64	; 0x40
    1eb4:	810a      	strh	r2, [r1, #8]
	descriptor_config.source_address = (uint32_t)waveform +  NO_DATA_SINE*2;
    1eb6:	3380      	adds	r3, #128	; 0x80
    1eb8:	9307      	str	r3, [sp, #28]
	//descriptor_config.block_transfer_count = sizeof(start_up_song);
	//descriptor_config.source_address = (uint32_t)start_up_song +  sizeof(start_up_song);
	descriptor_config.destination_address = (uint32_t)(&dac_instance.hw->DATA.reg);
    1eba:	4b63      	ldr	r3, [pc, #396]	; (2048 <STACK_SIZE+0x48>)
    1ebc:	681b      	ldr	r3, [r3, #0]
    1ebe:	3308      	adds	r3, #8
    1ec0:	9308      	str	r3, [sp, #32]
	descriptor_config.next_descriptor_address = (uint32_t)descriptor;
    1ec2:	9b03      	ldr	r3, [sp, #12]
    1ec4:	9309      	str	r3, [sp, #36]	; 0x24

	if(first_time == true)
    1ec6:	4b61      	ldr	r3, [pc, #388]	; (204c <STACK_SIZE+0x4c>)
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d000      	beq.n	1ed0 <setup_transfer_descriptor_dac+0xac>
    1ece:	e09f      	b.n	2010 <STACK_SIZE+0x10>
		first_time = false;
	}
	else
	{
		//dma_suspend_job( &resource_DAC);
		dma_descriptor_create(descriptor, &descriptor_config);
    1ed0:	a904      	add	r1, sp, #16
    1ed2:	9803      	ldr	r0, [sp, #12]
    1ed4:	4b5e      	ldr	r3, [pc, #376]	; (2050 <STACK_SIZE+0x50>)
    1ed6:	4798      	blx	r3
		dma_start_transfer_job(&resource_DAC);
    1ed8:	485e      	ldr	r0, [pc, #376]	; (2054 <STACK_SIZE+0x54>)
    1eda:	4b5f      	ldr	r3, [pc, #380]	; (2058 <STACK_SIZE+0x58>)
    1edc:	4798      	blx	r3
		//dma_resume_job( &resource_DAC);
	}
	
}
    1ede:	b00b      	add	sp, #44	; 0x2c
    1ee0:	bc3c      	pop	{r2, r3, r4, r5}
    1ee2:	4690      	mov	r8, r2
    1ee4:	4699      	mov	r9, r3
    1ee6:	46a2      	mov	sl, r4
    1ee8:	46ab      	mov	fp, r5
    1eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		waveform_sine = malloc(NO_DATA_SINE*sizeof(waveform_sine));
    1eec:	2680      	movs	r6, #128	; 0x80
    1eee:	0076      	lsls	r6, r6, #1
    1ef0:	0030      	movs	r0, r6
    1ef2:	4d5a      	ldr	r5, [pc, #360]	; (205c <STACK_SIZE+0x5c>)
    1ef4:	47a8      	blx	r5
    1ef6:	4b5a      	ldr	r3, [pc, #360]	; (2060 <STACK_SIZE+0x60>)
    1ef8:	6018      	str	r0, [r3, #0]
		waveform_ramp = malloc(NO_DATA_RAMP*sizeof(waveform_ramp));
    1efa:	0030      	movs	r0, r6
    1efc:	47a8      	blx	r5
    1efe:	4b59      	ldr	r3, [pc, #356]	; (2064 <STACK_SIZE+0x64>)
    1f00:	6018      	str	r0, [r3, #0]
		waveform_tri = malloc(NO_DATA_TRI*sizeof(waveform_tri));
    1f02:	0030      	movs	r0, r6
    1f04:	47a8      	blx	r5
    1f06:	4b58      	ldr	r3, [pc, #352]	; (2068 <STACK_SIZE+0x68>)
    1f08:	6018      	str	r0, [r3, #0]
		waveform_square = malloc(NO_DATA_TRI*sizeof(waveform_square));
    1f0a:	0030      	movs	r0, r6
    1f0c:	47a8      	blx	r5
    1f0e:	4b4c      	ldr	r3, [pc, #304]	; (2040 <STACK_SIZE+0x40>)
    1f10:	6018      	str	r0, [r3, #0]
		first_run = false;
    1f12:	2200      	movs	r2, #0
    1f14:	4b48      	ldr	r3, [pc, #288]	; (2038 <STACK_SIZE+0x38>)
    1f16:	701a      	strb	r2, [r3, #0]
    1f18:	e7ac      	b.n	1e74 <setup_transfer_descriptor_dac+0x50>
	else if(waveform_type == ramp )
    1f1a:	4b48      	ldr	r3, [pc, #288]	; (203c <STACK_SIZE+0x3c>)
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	2b01      	cmp	r3, #1
    1f20:	d03b      	beq.n	1f9a <setup_transfer_descriptor_dac+0x176>
	else if(waveform_type == triangular)
    1f22:	4b46      	ldr	r3, [pc, #280]	; (203c <STACK_SIZE+0x3c>)
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	2b02      	cmp	r3, #2
    1f28:	d04e      	beq.n	1fc8 <setup_transfer_descriptor_dac+0x1a4>
	else if(waveform_type == sine)
    1f2a:	4b44      	ldr	r3, [pc, #272]	; (203c <STACK_SIZE+0x3c>)
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	2b03      	cmp	r3, #3
    1f30:	d1b8      	bne.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_sine;
    1f32:	4b4b      	ldr	r3, [pc, #300]	; (2060 <STACK_SIZE+0x60>)
    1f34:	681f      	ldr	r7, [r3, #0]
    1f36:	4b43      	ldr	r3, [pc, #268]	; (2044 <STACK_SIZE+0x44>)
    1f38:	601f      	str	r7, [r3, #0]
			waveform_test[i] =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f3a:	0860      	lsrs	r0, r4, #1
    1f3c:	4b39      	ldr	r3, [pc, #228]	; (2024 <STACK_SIZE+0x24>)
    1f3e:	4798      	blx	r3
    1f40:	9000      	str	r0, [sp, #0]
    1f42:	9101      	str	r1, [sp, #4]
    1f44:	2500      	movs	r5, #0
		for(i=0;i<NO_DATA_SINE;i++)
    1f46:	2400      	movs	r4, #0
			waveform_test[i] =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f48:	4b36      	ldr	r3, [pc, #216]	; (2024 <STACK_SIZE+0x24>)
    1f4a:	469b      	mov	fp, r3
    1f4c:	4e38      	ldr	r6, [pc, #224]	; (2030 <STACK_SIZE+0x30>)
    1f4e:	4b47      	ldr	r3, [pc, #284]	; (206c <STACK_SIZE+0x6c>)
    1f50:	469a      	mov	sl, r3
    1f52:	4b38      	ldr	r3, [pc, #224]	; (2034 <STACK_SIZE+0x34>)
    1f54:	4699      	mov	r9, r3
    1f56:	4b46      	ldr	r3, [pc, #280]	; (2070 <STACK_SIZE+0x70>)
    1f58:	4698      	mov	r8, r3
    1f5a:	9702      	str	r7, [sp, #8]
    1f5c:	0028      	movs	r0, r5
    1f5e:	47d8      	blx	fp
    1f60:	4a44      	ldr	r2, [pc, #272]	; (2074 <STACK_SIZE+0x74>)
    1f62:	4b45      	ldr	r3, [pc, #276]	; (2078 <STACK_SIZE+0x78>)
    1f64:	47b0      	blx	r6
    1f66:	2200      	movs	r2, #0
    1f68:	4b44      	ldr	r3, [pc, #272]	; (207c <STACK_SIZE+0x7c>)
    1f6a:	47b0      	blx	r6
    1f6c:	47d0      	blx	sl
    1f6e:	9a00      	ldr	r2, [sp, #0]
    1f70:	9b01      	ldr	r3, [sp, #4]
    1f72:	47b0      	blx	r6
    1f74:	9a00      	ldr	r2, [sp, #0]
    1f76:	9b01      	ldr	r3, [sp, #4]
    1f78:	4f41      	ldr	r7, [pc, #260]	; (2080 <STACK_SIZE+0x80>)
    1f7a:	47b8      	blx	r7
    1f7c:	47c8      	blx	r9
    1f7e:	b280      	uxth	r0, r0
    1f80:	0063      	lsls	r3, r4, #1
    1f82:	4642      	mov	r2, r8
    1f84:	5298      	strh	r0, [r3, r2]
			*waveform_sine =   (uint16_t)(sin((i*2*PI)/NO_DATA_SINE)*(waveform_amplitude/2) + (waveform_amplitude/2));
    1f86:	9b02      	ldr	r3, [sp, #8]
    1f88:	5358      	strh	r0, [r3, r5]
		for(i=0;i<NO_DATA_SINE;i++)
    1f8a:	3401      	adds	r4, #1
    1f8c:	3502      	adds	r5, #2
    1f8e:	2c40      	cmp	r4, #64	; 0x40
    1f90:	d1e4      	bne.n	1f5c <setup_transfer_descriptor_dac+0x138>
    1f92:	001f      	movs	r7, r3
		waveform_sine = waveform_current; 
    1f94:	4b32      	ldr	r3, [pc, #200]	; (2060 <STACK_SIZE+0x60>)
    1f96:	601f      	str	r7, [r3, #0]
    1f98:	e784      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_ramp;
    1f9a:	4b32      	ldr	r3, [pc, #200]	; (2064 <STACK_SIZE+0x64>)
    1f9c:	681f      	ldr	r7, [r3, #0]
    1f9e:	4b29      	ldr	r3, [pc, #164]	; (2044 <STACK_SIZE+0x44>)
    1fa0:	601f      	str	r7, [r3, #0]
    1fa2:	003d      	movs	r5, r7
    1fa4:	2040      	movs	r0, #64	; 0x40
		for(i=0;i<NO_DATA_RAMP;i++)
    1fa6:	2100      	movs	r1, #0
			*waveform_ramp = (i*waveform_amplitude) / NO_DATA_RAMP;
    1fa8:	263f      	movs	r6, #63	; 0x3f
    1faa:	000a      	movs	r2, r1
    1fac:	4362      	muls	r2, r4
    1fae:	17d3      	asrs	r3, r2, #31
    1fb0:	4033      	ands	r3, r6
    1fb2:	189b      	adds	r3, r3, r2
    1fb4:	119b      	asrs	r3, r3, #6
    1fb6:	802b      	strh	r3, [r5, #0]
			 waveform_ramp++;
    1fb8:	3502      	adds	r5, #2
		for(i=0;i<NO_DATA_RAMP;i++)
    1fba:	3101      	adds	r1, #1
    1fbc:	3801      	subs	r0, #1
    1fbe:	2800      	cmp	r0, #0
    1fc0:	d1f3      	bne.n	1faa <setup_transfer_descriptor_dac+0x186>
		waveform_ramp = waveform_current;
    1fc2:	4b28      	ldr	r3, [pc, #160]	; (2064 <STACK_SIZE+0x64>)
    1fc4:	601f      	str	r7, [r3, #0]
    1fc6:	e76d      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		waveform_current = waveform_tri;
    1fc8:	4b27      	ldr	r3, [pc, #156]	; (2068 <STACK_SIZE+0x68>)
    1fca:	681d      	ldr	r5, [r3, #0]
    1fcc:	4b1d      	ldr	r3, [pc, #116]	; (2044 <STACK_SIZE+0x44>)
    1fce:	601d      	str	r5, [r3, #0]
    1fd0:	002b      	movs	r3, r5
    1fd2:	0064      	lsls	r4, r4, #1
    1fd4:	0027      	movs	r7, r4
    1fd6:	002e      	movs	r6, r5
    1fd8:	3640      	adds	r6, #64	; 0x40
    1fda:	2100      	movs	r1, #0
			*waveform_tri = (i*waveform_amplitude*2) / NO_DATA_TRI;
    1fdc:	203f      	movs	r0, #63	; 0x3f
    1fde:	17ca      	asrs	r2, r1, #31
    1fe0:	4002      	ands	r2, r0
    1fe2:	1852      	adds	r2, r2, r1
    1fe4:	1192      	asrs	r2, r2, #6
    1fe6:	801a      	strh	r2, [r3, #0]
    1fe8:	3302      	adds	r3, #2
    1fea:	19c9      	adds	r1, r1, r7
		for(i=0;i<(NO_DATA_TRI/2);i++)
    1fec:	42b3      	cmp	r3, r6
    1fee:	d1f6      	bne.n	1fde <setup_transfer_descriptor_dac+0x1ba>
    1ff0:	0161      	lsls	r1, r4, #5
    1ff2:	002e      	movs	r6, r5
    1ff4:	3680      	adds	r6, #128	; 0x80
			*waveform_tri = ((NO_DATA_TRI-i)*(waveform_amplitude*2))/NO_DATA_TRI;
    1ff6:	203f      	movs	r0, #63	; 0x3f
    1ff8:	17ca      	asrs	r2, r1, #31
    1ffa:	4002      	ands	r2, r0
    1ffc:	1852      	adds	r2, r2, r1
    1ffe:	1192      	asrs	r2, r2, #6
    2000:	801a      	strh	r2, [r3, #0]
    2002:	3302      	adds	r3, #2
    2004:	1b09      	subs	r1, r1, r4
		for(i= (NO_DATA_TRI/2);i<NO_DATA_TRI;i++)
    2006:	42b3      	cmp	r3, r6
    2008:	d1f6      	bne.n	1ff8 <setup_transfer_descriptor_dac+0x1d4>
		waveform_tri = waveform_current; 
    200a:	4b17      	ldr	r3, [pc, #92]	; (2068 <STACK_SIZE+0x68>)
    200c:	601d      	str	r5, [r3, #0]
    200e:	e749      	b.n	1ea4 <setup_transfer_descriptor_dac+0x80>
		dma_descriptor_create(descriptor, &descriptor_config);
    2010:	9803      	ldr	r0, [sp, #12]
    2012:	4b0f      	ldr	r3, [pc, #60]	; (2050 <STACK_SIZE+0x50>)
    2014:	4798      	blx	r3
		first_time = false;
    2016:	2200      	movs	r2, #0
    2018:	4b0c      	ldr	r3, [pc, #48]	; (204c <STACK_SIZE+0x4c>)
    201a:	701a      	strb	r2, [r3, #0]
    201c:	e75f      	b.n	1ede <setup_transfer_descriptor_dac+0xba>
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	200002bc 	.word	0x200002bc
    2024:	0000b881 	.word	0x0000b881
    2028:	8f5c28f6 	.word	0x8f5c28f6
    202c:	402475c2 	.word	0x402475c2
    2030:	0000aced 	.word	0x0000aced
    2034:	00009191 	.word	0x00009191
    2038:	2000001a 	.word	0x2000001a
    203c:	20000024 	.word	0x20000024
    2040:	20000234 	.word	0x20000234
    2044:	20000228 	.word	0x20000228
    2048:	200005fc 	.word	0x200005fc
    204c:	20000020 	.word	0x20000020
    2050:	000003a9 	.word	0x000003a9
    2054:	20000604 	.word	0x20000604
    2058:	00000321 	.word	0x00000321
    205c:	0000bcc9 	.word	0x0000bcc9
    2060:	20000230 	.word	0x20000230
    2064:	2000022c 	.word	0x2000022c
    2068:	200002b8 	.word	0x200002b8
    206c:	000079c5 	.word	0x000079c5
    2070:	20000238 	.word	0x20000238
    2074:	c083126f 	.word	0xc083126f
    2078:	400921ca 	.word	0x400921ca
    207c:	3f900000 	.word	0x3f900000
    2080:	00009e65 	.word	0x00009e65

00002084 <setup_prescalar>:

void setup_prescalar(struct speaker_timer* I_1)
{
    2084:	b530      	push	{r4, r5, lr}
    2086:	b083      	sub	sp, #12
	volatile uint16_t temp = 0;
    2088:	2200      	movs	r2, #0
    208a:	466b      	mov	r3, sp
    208c:	80da      	strh	r2, [r3, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    208e:	4b11      	ldr	r3, [pc, #68]	; (20d4 <setup_prescalar+0x50>)
    2090:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2092:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    2094:	b25b      	sxtb	r3, r3
    2096:	2b00      	cmp	r3, #0
    2098:	dbfb      	blt.n	2092 <setup_prescalar+0xe>
		/* Wait for sync */
	}

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    209a:	8813      	ldrh	r3, [r2, #0]
    209c:	2102      	movs	r1, #2
    209e:	438b      	bics	r3, r1
    20a0:	8013      	strh	r3, [r2, #0]
	tc_disable(&tc_instance5);

	tc_instance5.hw->COUNT8.PER.reg	=  (uint8_t)I_1->speaker_period ;
    20a2:	4c0c      	ldr	r4, [pc, #48]	; (20d4 <setup_prescalar+0x50>)
    20a4:	6821      	ldr	r1, [r4, #0]
    20a6:	7803      	ldrb	r3, [r0, #0]
    20a8:	750b      	strb	r3, [r1, #20]
	temp = tc_instance5.hw->COUNT8.CTRLA.reg ;
    20aa:	880b      	ldrh	r3, [r1, #0]
    20ac:	b29b      	uxth	r3, r3
    20ae:	466a      	mov	r2, sp
    20b0:	80d3      	strh	r3, [r2, #6]
	temp = ((uint16_t)I_1->speaker_prescalar) | (temp & PRESCALAR_MASK); 
    20b2:	88d3      	ldrh	r3, [r2, #6]
    20b4:	4d08      	ldr	r5, [pc, #32]	; (20d8 <setup_prescalar+0x54>)
    20b6:	402b      	ands	r3, r5
    20b8:	8880      	ldrh	r0, [r0, #4]
    20ba:	4303      	orrs	r3, r0
    20bc:	80d3      	strh	r3, [r2, #6]
	tc_instance5.hw->COUNT8.CTRLA.reg =  temp;
    20be:	88d3      	ldrh	r3, [r2, #6]
    20c0:	b29b      	uxth	r3, r3
    20c2:	800b      	strh	r3, [r1, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    20c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    20c6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(&tc_instance5)) {
    20c8:	b25b      	sxtb	r3, r3
    20ca:	2b00      	cmp	r3, #0
    20cc:	dbfb      	blt.n	20c6 <setup_prescalar+0x42>
		/* Wait for sync */
	}
	
}
    20ce:	b003      	add	sp, #12
    20d0:	bd30      	pop	{r4, r5, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	200005e0 	.word	0x200005e0
    20d8:	fffff8ff 	.word	0xfffff8ff

000020dc <configure_tc5>:



//
void configure_tc5(struct speaker_timer* I_1)
{
    20dc:	b510      	push	{r4, lr}
    20de:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    20e0:	aa01      	add	r2, sp, #4
    20e2:	2300      	movs	r3, #0
    20e4:	2100      	movs	r1, #0
    20e6:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    20e8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    20ea:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    20ec:	2400      	movs	r4, #0
    20ee:	7054      	strb	r4, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    20f0:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    20f2:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    20f4:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    20f6:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    20f8:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    20fa:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    20fc:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    20fe:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2100:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2102:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2104:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2106:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2108:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    210a:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //16
    210c:	3304      	adds	r3, #4
    210e:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = I_1->speaker_prescalar; //64
    2110:	8883      	ldrh	r3, [r0, #4]
    2112:	8093      	strh	r3, [r2, #4]
	config_tc.counter_8_bit.period = I_1->speaker_period; // 10KHz waveform
    2114:	7801      	ldrb	r1, [r0, #0]
    2116:	2329      	movs	r3, #41	; 0x29
    2118:	54d1      	strb	r1, [r2, r3]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	tc_init(&tc_instance5, TC5, &config_tc);
    211a:	4903      	ldr	r1, [pc, #12]	; (2128 <configure_tc5+0x4c>)
    211c:	4803      	ldr	r0, [pc, #12]	; (212c <configure_tc5+0x50>)
    211e:	4b04      	ldr	r3, [pc, #16]	; (2130 <configure_tc5+0x54>)
    2120:	4798      	blx	r3
}
    2122:	b00e      	add	sp, #56	; 0x38
    2124:	bd10      	pop	{r4, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	42003400 	.word	0x42003400
    212c:	200005e0 	.word	0x200005e0
    2130:	00004cf5 	.word	0x00004cf5

00002134 <disable_speaker>:
{
	configure_TC5_callback();
}

void disable_speaker()
{
    2134:	b510      	push	{r4, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2136:	2280      	movs	r2, #128	; 0x80
    2138:	0412      	lsls	r2, r2, #16
    213a:	4b08      	ldr	r3, [pc, #32]	; (215c <disable_speaker+0x28>)
    213c:	615a      	str	r2, [r3, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <disable_speaker+0x2c>)
    2140:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2142:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2144:	b25b      	sxtb	r3, r3
    2146:	2b00      	cmp	r3, #0
    2148:	dbfb      	blt.n	2142 <disable_speaker+0xe>
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    214a:	8813      	ldrh	r3, [r2, #0]
    214c:	2102      	movs	r1, #2
    214e:	438b      	bics	r3, r1
    2150:	8013      	strh	r3, [r2, #0]
	//Disable the all the modules which are involved in speaker which work independently
	port_pin_set_output_level(AUDIO_SDB, false);
	tc_disable(&tc_instance5);
	dac_disable(&dac_instance);
    2152:	4804      	ldr	r0, [pc, #16]	; (2164 <disable_speaker+0x30>)
    2154:	4b04      	ldr	r3, [pc, #16]	; (2168 <disable_speaker+0x34>)
    2156:	4798      	blx	r3

}
    2158:	bd10      	pop	{r4, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	41004480 	.word	0x41004480
    2160:	200005e0 	.word	0x200005e0
    2164:	200005fc 	.word	0x200005fc
    2168:	000033e5 	.word	0x000033e5

0000216c <enable_speaker>:

void enable_speaker()
{
    216c:	b510      	push	{r4, lr}
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    216e:	4b0e      	ldr	r3, [pc, #56]	; (21a8 <enable_speaker+0x3c>)
    2170:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2172:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2174:	b25b      	sxtb	r3, r3
    2176:	2b00      	cmp	r3, #0
    2178:	dbfb      	blt.n	2172 <enable_speaker+0x6>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    217a:	8813      	ldrh	r3, [r2, #0]
    217c:	2102      	movs	r1, #2
    217e:	430b      	orrs	r3, r1
    2180:	8013      	strh	r3, [r2, #0]
	static bool first_time = true; 
	//configure_dac_callbacks();
	tc_enable(&tc_instance5);
	dac_enable(&dac_instance);
    2182:	480a      	ldr	r0, [pc, #40]	; (21ac <enable_speaker+0x40>)
    2184:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <enable_speaker+0x44>)
    2186:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    2188:	2280      	movs	r2, #128	; 0x80
    218a:	0412      	lsls	r2, r2, #16
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <enable_speaker+0x48>)
    218e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(AUDIO_SDB, true);
	if(first_time == true)
    2190:	4b09      	ldr	r3, [pc, #36]	; (21b8 <enable_speaker+0x4c>)
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	2b00      	cmp	r3, #0
    2196:	d100      	bne.n	219a <enable_speaker+0x2e>
	{
		dma_start_transfer_job(&resource_DAC);
		first_time = false;
	}
	//dma_start_transfer_job(&resource_DAC);
}
    2198:	bd10      	pop	{r4, pc}
		dma_start_transfer_job(&resource_DAC);
    219a:	4808      	ldr	r0, [pc, #32]	; (21bc <enable_speaker+0x50>)
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <enable_speaker+0x54>)
    219e:	4798      	blx	r3
		first_time = false;
    21a0:	2200      	movs	r2, #0
    21a2:	4b05      	ldr	r3, [pc, #20]	; (21b8 <enable_speaker+0x4c>)
    21a4:	701a      	strb	r2, [r3, #0]
}
    21a6:	e7f7      	b.n	2198 <enable_speaker+0x2c>
    21a8:	200005e0 	.word	0x200005e0
    21ac:	200005fc 	.word	0x200005fc
    21b0:	000033a9 	.word	0x000033a9
    21b4:	41004480 	.word	0x41004480
    21b8:	20000021 	.word	0x20000021
    21bc:	20000604 	.word	0x20000604
    21c0:	00000321 	.word	0x00000321

000021c4 <speaker_update>:
{
    21c4:	b510      	push	{r4, lr}
	waveform_type      =   buzz_type;
    21c6:	4b19      	ldr	r3, [pc, #100]	; (222c <speaker_update+0x68>)
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b2db      	uxtb	r3, r3
    21cc:	4a18      	ldr	r2, [pc, #96]	; (2230 <speaker_update+0x6c>)
    21ce:	7013      	strb	r3, [r2, #0]
	waveform_frequency =   buzz_frequency;
    21d0:	4b18      	ldr	r3, [pc, #96]	; (2234 <speaker_update+0x70>)
    21d2:	881b      	ldrh	r3, [r3, #0]
    21d4:	b29b      	uxth	r3, r3
    21d6:	4a18      	ldr	r2, [pc, #96]	; (2238 <speaker_update+0x74>)
    21d8:	8013      	strh	r3, [r2, #0]
	waveform_volume    =   buzz_volume;
    21da:	4b18      	ldr	r3, [pc, #96]	; (223c <speaker_update+0x78>)
    21dc:	881b      	ldrh	r3, [r3, #0]
    21de:	b29b      	uxth	r3, r3
    21e0:	4917      	ldr	r1, [pc, #92]	; (2240 <speaker_update+0x7c>)
    21e2:	800b      	strh	r3, [r1, #0]
	if((waveform_frequency > 0) && (waveform_volume > 0))
    21e4:	8813      	ldrh	r3, [r2, #0]
    21e6:	b29b      	uxth	r3, r3
    21e8:	2b00      	cmp	r3, #0
    21ea:	d003      	beq.n	21f4 <speaker_update+0x30>
    21ec:	880b      	ldrh	r3, [r1, #0]
    21ee:	b29b      	uxth	r3, r3
    21f0:	2b00      	cmp	r3, #0
    21f2:	d105      	bne.n	2200 <speaker_update+0x3c>
		speaker_enable = false;
    21f4:	2200      	movs	r2, #0
    21f6:	4b13      	ldr	r3, [pc, #76]	; (2244 <speaker_update+0x80>)
    21f8:	701a      	strb	r2, [r3, #0]
		disable_speaker();
    21fa:	4b13      	ldr	r3, [pc, #76]	; (2248 <speaker_update+0x84>)
    21fc:	4798      	blx	r3
}
    21fe:	bd10      	pop	{r4, pc}
		I_1 = calculate_frequency() ;
    2200:	4b12      	ldr	r3, [pc, #72]	; (224c <speaker_update+0x88>)
    2202:	4798      	blx	r3
    2204:	0004      	movs	r4, r0
		setup_transfer_descriptor_dac(&descriptor_DAC);
    2206:	4812      	ldr	r0, [pc, #72]	; (2250 <speaker_update+0x8c>)
    2208:	4b12      	ldr	r3, [pc, #72]	; (2254 <speaker_update+0x90>)
    220a:	4798      	blx	r3
		setup_prescalar(I_1);
    220c:	0020      	movs	r0, r4
    220e:	4b12      	ldr	r3, [pc, #72]	; (2258 <speaker_update+0x94>)
    2210:	4798      	blx	r3
		dma_start_transfer_job(&resource_DAC);
    2212:	4812      	ldr	r0, [pc, #72]	; (225c <speaker_update+0x98>)
    2214:	4b12      	ldr	r3, [pc, #72]	; (2260 <speaker_update+0x9c>)
    2216:	4798      	blx	r3
		enable_speaker();
    2218:	4b12      	ldr	r3, [pc, #72]	; (2264 <speaker_update+0xa0>)
    221a:	4798      	blx	r3
		if(speaker_enable == false)
    221c:	4b09      	ldr	r3, [pc, #36]	; (2244 <speaker_update+0x80>)
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d1ec      	bne.n	21fe <speaker_update+0x3a>
			speaker_enable = true;
    2224:	2201      	movs	r2, #1
    2226:	4b07      	ldr	r3, [pc, #28]	; (2244 <speaker_update+0x80>)
    2228:	701a      	strb	r2, [r3, #0]
    222a:	e7e8      	b.n	21fe <speaker_update+0x3a>
    222c:	200003bc 	.word	0x200003bc
    2230:	20000024 	.word	0x20000024
    2234:	200003ba 	.word	0x200003ba
    2238:	20000022 	.word	0x20000022
    223c:	200003be 	.word	0x200003be
    2240:	200002bc 	.word	0x200002bc
    2244:	20000224 	.word	0x20000224
    2248:	00002135 	.word	0x00002135
    224c:	00001cb1 	.word	0x00001cb1
    2250:	20000620 	.word	0x20000620
    2254:	00001e25 	.word	0x00001e25
    2258:	00002085 	.word	0x00002085
    225c:	20000604 	.word	0x20000604
    2260:	00000321 	.word	0x00000321
    2264:	0000216d 	.word	0x0000216d

00002268 <configure_dma_buzzer>:

void configure_dma_buzzer()
{
    2268:	b570      	push	{r4, r5, r6, lr}
	configure_dma_resource_dac(&resource_DAC);
    226a:	4c06      	ldr	r4, [pc, #24]	; (2284 <configure_dma_buzzer+0x1c>)
    226c:	0020      	movs	r0, r4
    226e:	4b06      	ldr	r3, [pc, #24]	; (2288 <configure_dma_buzzer+0x20>)
    2270:	4798      	blx	r3
	setup_transfer_descriptor_dac(&descriptor_DAC);
    2272:	4d06      	ldr	r5, [pc, #24]	; (228c <configure_dma_buzzer+0x24>)
    2274:	0028      	movs	r0, r5
    2276:	4b06      	ldr	r3, [pc, #24]	; (2290 <configure_dma_buzzer+0x28>)
    2278:	4798      	blx	r3
	dma_add_descriptor(&resource_DAC, &descriptor_DAC);
    227a:	0029      	movs	r1, r5
    227c:	0020      	movs	r0, r4
    227e:	4b05      	ldr	r3, [pc, #20]	; (2294 <configure_dma_buzzer+0x2c>)
    2280:	4798      	blx	r3
}
    2282:	bd70      	pop	{r4, r5, r6, pc}
    2284:	20000604 	.word	0x20000604
    2288:	00001df9 	.word	0x00001df9
    228c:	20000620 	.word	0x20000620
    2290:	00001e25 	.word	0x00001e25
    2294:	00000451 	.word	0x00000451

00002298 <configure_buzzer_modules>:

void configure_buzzer_modules()
{
    2298:	b510      	push	{r4, lr}
	struct speaker_timer* I_2 = NULL;
	configure_dac();
    229a:	4b05      	ldr	r3, [pc, #20]	; (22b0 <configure_buzzer_modules+0x18>)
    229c:	4798      	blx	r3
	configure_dac_channel();
    229e:	4b05      	ldr	r3, [pc, #20]	; (22b4 <configure_buzzer_modules+0x1c>)
    22a0:	4798      	blx	r3
	I_2 = calculate_frequency();
    22a2:	4b05      	ldr	r3, [pc, #20]	; (22b8 <configure_buzzer_modules+0x20>)
    22a4:	4798      	blx	r3
	configure_tc5(I_2);
    22a6:	4b05      	ldr	r3, [pc, #20]	; (22bc <configure_buzzer_modules+0x24>)
    22a8:	4798      	blx	r3
	configure_dma_buzzer();
    22aa:	4b05      	ldr	r3, [pc, #20]	; (22c0 <configure_buzzer_modules+0x28>)
    22ac:	4798      	blx	r3
}
    22ae:	bd10      	pop	{r4, pc}
    22b0:	00001c31 	.word	0x00001c31
    22b4:	00001c5d 	.word	0x00001c5d
    22b8:	00001cb1 	.word	0x00001cb1
    22bc:	000020dd 	.word	0x000020dd
    22c0:	00002269 	.word	0x00002269

000022c4 <configure_buzzer>:

void configure_buzzer()
{
    22c4:	b510      	push	{r4, lr}
	configure_buzzer_pins();
    22c6:	4b03      	ldr	r3, [pc, #12]	; (22d4 <configure_buzzer+0x10>)
    22c8:	4798      	blx	r3
	configure_buzzer_modules();
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <configure_buzzer+0x14>)
    22cc:	4798      	blx	r3
	enable_speaker();	
    22ce:	4b03      	ldr	r3, [pc, #12]	; (22dc <configure_buzzer+0x18>)
    22d0:	4798      	blx	r3
    22d2:	bd10      	pop	{r4, pc}
    22d4:	00001c91 	.word	0x00001c91
    22d8:	00002299 	.word	0x00002299
    22dc:	0000216d 	.word	0x0000216d

000022e0 <ui_init>:

void ui_init(void)
{
	/* Initialize LEDs */
	//LED_On(LED_0_PIN);
}
    22e0:	4770      	bx	lr

000022e2 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
    22e2:	4770      	bx	lr

000022e4 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{

}
    22e4:	4770      	bx	lr

000022e6 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{

}
    22e6:	4770      	bx	lr

000022e8 <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
    22e8:	4770      	bx	lr

000022ea <ui_process>:
	if (b_btn_state != btn0_last_state) {
		ui_hid_report[0] = b_btn_state;
		udi_hid_generic_send_report_in(ui_hid_report);
		btn0_last_state = b_btn_state;
	}*/
}
    22ea:	4770      	bx	lr

000022ec <ui_handle_report>:

void ui_handle_report(uint8_t *report)
{
    22ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ee:	0004      	movs	r4, r0
	uint8_t blue;	

	char* echo_distance;
	
	int i;
	count++;
    22f0:	4b59      	ldr	r3, [pc, #356]	; (2458 <ui_handle_report+0x16c>)
    22f2:	681b      	ldr	r3, [r3, #0]
    22f4:	3301      	adds	r3, #1
	if(count > 255)
    22f6:	2bff      	cmp	r3, #255	; 0xff
    22f8:	dc0a      	bgt.n	2310 <ui_handle_report+0x24>
	count++;
    22fa:	4a57      	ldr	r2, [pc, #348]	; (2458 <ui_handle_report+0x16c>)
    22fc:	6013      	str	r3, [r2, #0]
		count = 0;
		

	// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
	switch(report[0]) {
    22fe:	7823      	ldrb	r3, [r4, #0]
    2300:	3b41      	subs	r3, #65	; 0x41
    2302:	b2da      	uxtb	r2, r3
    2304:	2a39      	cmp	r2, #57	; 0x39
    2306:	d814      	bhi.n	2332 <ui_handle_report+0x46>
    2308:	0093      	lsls	r3, r2, #2
    230a:	4a54      	ldr	r2, [pc, #336]	; (245c <ui_handle_report+0x170>)
    230c:	58d3      	ldr	r3, [r2, r3]
    230e:	469f      	mov	pc, r3
		count = 0;
    2310:	2200      	movs	r2, #0
    2312:	4b51      	ldr	r3, [pc, #324]	; (2458 <ui_handle_report+0x16c>)
    2314:	601a      	str	r2, [r3, #0]
    2316:	e7f2      	b.n	22fe <ui_handle_report+0x12>
		// If O, set the LED using bytes 1-3 of the HID report
		// ASCII value for O --
		case 'O':
			red = report[1];
    2318:	7865      	ldrb	r5, [r4, #1]
			green = report[2];
    231a:	78a6      	ldrb	r6, [r4, #2]
			blue = report[3];
    231c:	78e7      	ldrb	r7, [r4, #3]
			set_led_left_new(red, green, blue);
    231e:	003a      	movs	r2, r7
    2320:	0031      	movs	r1, r6
    2322:	0028      	movs	r0, r5
    2324:	4b4e      	ldr	r3, [pc, #312]	; (2460 <ui_handle_report+0x174>)
    2326:	4798      	blx	r3
			set_led_right_new(red, green, blue);
    2328:	003a      	movs	r2, r7
    232a:	0031      	movs	r1, r6
    232c:	0028      	movs	r0, r5
    232e:	4b4d      	ldr	r3, [pc, #308]	; (2464 <ui_handle_report+0x178>)
    2330:	4798      	blx	r3
		//exit_count = 0;
		break;
		default:
		break;
	}
	report[0] = 0x00;
    2332:	2300      	movs	r3, #0
    2334:	7023      	strb	r3, [r4, #0]
	// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
	ui_hid_report[7]= report[7];
    2336:	79e3      	ldrb	r3, [r4, #7]
    2338:	484b      	ldr	r0, [pc, #300]	; (2468 <ui_handle_report+0x17c>)
    233a:	71c3      	strb	r3, [r0, #7]
	udi_hid_generic_send_report_in(ui_hid_report);
    233c:	4b4b      	ldr	r3, [pc, #300]	; (246c <ui_handle_report+0x180>)
    233e:	4798      	blx	r3
			case '1':
			ui_b_led_blink = true;
			break;
		}
	}*/
}
    2340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ui_hid_report[0] = adc_start_read_result(LEFT_LIGHT);
    2342:	200b      	movs	r0, #11
    2344:	4e4a      	ldr	r6, [pc, #296]	; (2470 <ui_handle_report+0x184>)
    2346:	47b0      	blx	r6
    2348:	4d47      	ldr	r5, [pc, #284]	; (2468 <ui_handle_report+0x17c>)
    234a:	7028      	strb	r0, [r5, #0]
			ui_hid_report[1] = adc_start_read_result(RIGHT_LIGHT);
    234c:	2003      	movs	r0, #3
    234e:	47b0      	blx	r6
    2350:	7068      	strb	r0, [r5, #1]
		break;
    2352:	e7ee      	b.n	2332 <ui_handle_report+0x46>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    2354:	4a47      	ldr	r2, [pc, #284]	; (2474 <ui_handle_report+0x188>)
    2356:	6c13      	ldr	r3, [r2, #64]	; 0x40
    2358:	2102      	movs	r1, #2
    235a:	430b      	orrs	r3, r1
    235c:	6413      	str	r3, [r2, #64]	; 0x40
			configure_adc_temp();
    235e:	4b46      	ldr	r3, [pc, #280]	; (2478 <ui_handle_report+0x18c>)
    2360:	4798      	blx	r3
			load_calibration_data();
    2362:	4b46      	ldr	r3, [pc, #280]	; (247c <ui_handle_report+0x190>)
    2364:	4798      	blx	r3
			ui_hid_report[0] = calculate_temperature(adc_start_read_result(ADC_POSITIVE_INPUT_TEMP));
    2366:	2018      	movs	r0, #24
    2368:	4b41      	ldr	r3, [pc, #260]	; (2470 <ui_handle_report+0x184>)
    236a:	4798      	blx	r3
    236c:	b280      	uxth	r0, r0
    236e:	4b44      	ldr	r3, [pc, #272]	; (2480 <ui_handle_report+0x194>)
    2370:	4798      	blx	r3
    2372:	4b44      	ldr	r3, [pc, #272]	; (2484 <ui_handle_report+0x198>)
    2374:	4798      	blx	r3
    2376:	4b3c      	ldr	r3, [pc, #240]	; (2468 <ui_handle_report+0x17c>)
    2378:	7018      	strb	r0, [r3, #0]
			configure_adc();
    237a:	4b43      	ldr	r3, [pc, #268]	; (2488 <ui_handle_report+0x19c>)
    237c:	4798      	blx	r3
		break;
    237e:	e7d8      	b.n	2332 <ui_handle_report+0x46>
		if(report[2] == 0 && report[4] == 0)
    2380:	78a3      	ldrb	r3, [r4, #2]
    2382:	2b00      	cmp	r3, #0
    2384:	d102      	bne.n	238c <ui_handle_report+0xa0>
    2386:	7923      	ldrb	r3, [r4, #4]
    2388:	2b00      	cmp	r3, #0
    238a:	d008      	beq.n	239e <ui_handle_report+0xb2>
		set_motor_left(report[1], report[2]); // directions and speed are inputs
    238c:	78a1      	ldrb	r1, [r4, #2]
    238e:	7860      	ldrb	r0, [r4, #1]
    2390:	4b3e      	ldr	r3, [pc, #248]	; (248c <ui_handle_report+0x1a0>)
    2392:	4798      	blx	r3
		set_motor_right(report[3], report[4]);
    2394:	7921      	ldrb	r1, [r4, #4]
    2396:	78e0      	ldrb	r0, [r4, #3]
    2398:	4b3d      	ldr	r3, [pc, #244]	; (2490 <ui_handle_report+0x1a4>)
    239a:	4798      	blx	r3
		break;
    239c:	e7c9      	b.n	2332 <ui_handle_report+0x46>
			turn_off_motors();
    239e:	4b3d      	ldr	r3, [pc, #244]	; (2494 <ui_handle_report+0x1a8>)
    23a0:	4798      	blx	r3
    23a2:	e7f3      	b.n	238c <ui_handle_report+0xa0>
		buzz_type =  report[1];
    23a4:	7862      	ldrb	r2, [r4, #1]
    23a6:	4b3c      	ldr	r3, [pc, #240]	; (2498 <ui_handle_report+0x1ac>)
    23a8:	701a      	strb	r2, [r3, #0]
		buzz_frequency =  (report[2]<<8) + report[3];
    23aa:	78a2      	ldrb	r2, [r4, #2]
    23ac:	0212      	lsls	r2, r2, #8
    23ae:	78e3      	ldrb	r3, [r4, #3]
    23b0:	189b      	adds	r3, r3, r2
    23b2:	b29b      	uxth	r3, r3
    23b4:	4a39      	ldr	r2, [pc, #228]	; (249c <ui_handle_report+0x1b0>)
    23b6:	8013      	strh	r3, [r2, #0]
		buzz_volume    =  report[4];
    23b8:	7922      	ldrb	r2, [r4, #4]
    23ba:	4b39      	ldr	r3, [pc, #228]	; (24a0 <ui_handle_report+0x1b4>)
    23bc:	801a      	strh	r2, [r3, #0]
		speaker_update();
    23be:	4b39      	ldr	r3, [pc, #228]	; (24a4 <ui_handle_report+0x1b8>)
    23c0:	4798      	blx	r3
		break;
    23c2:	e7b6      	b.n	2332 <ui_handle_report+0x46>
		get_accel_data();
    23c4:	4b38      	ldr	r3, [pc, #224]	; (24a8 <ui_handle_report+0x1bc>)
    23c6:	4798      	blx	r3
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23c8:	4a38      	ldr	r2, [pc, #224]	; (24ac <ui_handle_report+0x1c0>)
    23ca:	7813      	ldrb	r3, [r2, #0]
    23cc:	7851      	ldrb	r1, [r2, #1]
    23ce:	430b      	orrs	r3, r1
    23d0:	7891      	ldrb	r1, [r2, #2]
    23d2:	430b      	orrs	r3, r1
    23d4:	78d2      	ldrb	r2, [r2, #3]
    23d6:	4313      	orrs	r3, r2
    23d8:	065b      	lsls	r3, r3, #25
    23da:	d50c      	bpl.n	23f6 <ui_handle_report+0x10a>
			get_accel_data();
    23dc:	4f32      	ldr	r7, [pc, #200]	; (24a8 <ui_handle_report+0x1bc>)
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23de:	4d33      	ldr	r5, [pc, #204]	; (24ac <ui_handle_report+0x1c0>)
    23e0:	2640      	movs	r6, #64	; 0x40
			get_accel_data();
    23e2:	47b8      	blx	r7
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    23e4:	782b      	ldrb	r3, [r5, #0]
    23e6:	786a      	ldrb	r2, [r5, #1]
    23e8:	4313      	orrs	r3, r2
    23ea:	78aa      	ldrb	r2, [r5, #2]
    23ec:	4313      	orrs	r3, r2
    23ee:	78ea      	ldrb	r2, [r5, #3]
    23f0:	4313      	orrs	r3, r2
    23f2:	421e      	tst	r6, r3
    23f4:	d1f5      	bne.n	23e2 <ui_handle_report+0xf6>
		ui_hid_report[0] = 153; // legacy reasons 
    23f6:	4b1c      	ldr	r3, [pc, #112]	; (2468 <ui_handle_report+0x17c>)
    23f8:	2299      	movs	r2, #153	; 0x99
    23fa:	701a      	strb	r2, [r3, #0]
			ui_hid_report[i] = bufferReceive[i-1];
    23fc:	4a2b      	ldr	r2, [pc, #172]	; (24ac <ui_handle_report+0x1c0>)
    23fe:	7811      	ldrb	r1, [r2, #0]
    2400:	7059      	strb	r1, [r3, #1]
    2402:	7851      	ldrb	r1, [r2, #1]
    2404:	7099      	strb	r1, [r3, #2]
    2406:	7891      	ldrb	r1, [r2, #2]
    2408:	70d9      	strb	r1, [r3, #3]
    240a:	78d2      	ldrb	r2, [r2, #3]
    240c:	711a      	strb	r2, [r3, #4]
    240e:	e790      	b.n	2332 <ui_handle_report+0x46>
		ui_hid_report[0] = read_left_ir();
    2410:	4b27      	ldr	r3, [pc, #156]	; (24b0 <ui_handle_report+0x1c4>)
    2412:	4798      	blx	r3
    2414:	4d14      	ldr	r5, [pc, #80]	; (2468 <ui_handle_report+0x17c>)
    2416:	7028      	strb	r0, [r5, #0]
		ui_hid_report[1] = read_right_ir();
    2418:	4b26      	ldr	r3, [pc, #152]	; (24b4 <ui_handle_report+0x1c8>)
    241a:	4798      	blx	r3
    241c:	7068      	strb	r0, [r5, #1]
		break;
    241e:	e788      	b.n	2332 <ui_handle_report+0x46>
		ui_hid_report[0] = adc_start_read_result(LINE_FOLLOWER);
    2420:	2002      	movs	r0, #2
    2422:	4b13      	ldr	r3, [pc, #76]	; (2470 <ui_handle_report+0x184>)
    2424:	4798      	blx	r3
    2426:	4b10      	ldr	r3, [pc, #64]	; (2468 <ui_handle_report+0x17c>)
    2428:	7018      	strb	r0, [r3, #0]
		break;
    242a:	e782      	b.n	2332 <ui_handle_report+0x46>
		echo_distance = get_ultrasound_distance();
    242c:	4b22      	ldr	r3, [pc, #136]	; (24b8 <ui_handle_report+0x1cc>)
    242e:	4798      	blx	r3
		ui_hid_report[0] = *echo_distance++;
    2430:	7802      	ldrb	r2, [r0, #0]
    2432:	4b0d      	ldr	r3, [pc, #52]	; (2468 <ui_handle_report+0x17c>)
    2434:	701a      	strb	r2, [r3, #0]
		ui_hid_report[1] = *echo_distance;
    2436:	7842      	ldrb	r2, [r0, #1]
    2438:	705a      	strb	r2, [r3, #1]
		break;
    243a:	e77a      	b.n	2332 <ui_handle_report+0x46>
		ui_hid_report[0] = count;
    243c:	4b06      	ldr	r3, [pc, #24]	; (2458 <ui_handle_report+0x16c>)
    243e:	681b      	ldr	r3, [r3, #0]
    2440:	4a09      	ldr	r2, [pc, #36]	; (2468 <ui_handle_report+0x17c>)
    2442:	7013      	strb	r3, [r2, #0]
		count++;
    2444:	3301      	adds	r3, #1
		if(count > 255) {
    2446:	2bff      	cmp	r3, #255	; 0xff
    2448:	dd03      	ble.n	2452 <ui_handle_report+0x166>
			count = 0;
    244a:	2200      	movs	r2, #0
    244c:	4b02      	ldr	r3, [pc, #8]	; (2458 <ui_handle_report+0x16c>)
    244e:	601a      	str	r2, [r3, #0]
    2450:	e76f      	b.n	2332 <ui_handle_report+0x46>
		count++;
    2452:	4a01      	ldr	r2, [pc, #4]	; (2458 <ui_handle_report+0x16c>)
    2454:	6013      	str	r3, [r2, #0]
    2456:	e76c      	b.n	2332 <ui_handle_report+0x46>
    2458:	200002c0 	.word	0x200002c0
    245c:	0000bdf8 	.word	0x0000bdf8
    2460:	00001145 	.word	0x00001145
    2464:	00001159 	.word	0x00001159
    2468:	200002c4 	.word	0x200002c4
    246c:	000025d9 	.word	0x000025d9
    2470:	00006ca9 	.word	0x00006ca9
    2474:	40000800 	.word	0x40000800
    2478:	00006d59 	.word	0x00006d59
    247c:	00006ee9 	.word	0x00006ee9
    2480:	00006dc1 	.word	0x00006dc1
    2484:	00009161 	.word	0x00009161
    2488:	00006c41 	.word	0x00006c41
    248c:	00001ac1 	.word	0x00001ac1
    2490:	00001b65 	.word	0x00001b65
    2494:	00001c09 	.word	0x00001c09
    2498:	200003bc 	.word	0x200003bc
    249c:	200003ba 	.word	0x200003ba
    24a0:	200003be 	.word	0x200003be
    24a4:	000021c5 	.word	0x000021c5
    24a8:	00001951 	.word	0x00001951
    24ac:	200005a8 	.word	0x200005a8
    24b0:	00001a25 	.word	0x00001a25
    24b4:	00001a35 	.word	0x00001a35
    24b8:	00001721 	.word	0x00001721

000024bc <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    24bc:	2000      	movs	r0, #0
    24be:	4770      	bx	lr

000024c0 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    24c0:	4b0b      	ldr	r3, [pc, #44]	; (24f0 <udi_hid_generic_setreport+0x30>)
    24c2:	885b      	ldrh	r3, [r3, #2]
    24c4:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
    24c6:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    24c8:	2a03      	cmp	r2, #3
    24ca:	d000      	beq.n	24ce <udi_hid_generic_setreport+0xe>
}
    24cc:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    24ce:	32fc      	adds	r2, #252	; 0xfc
    24d0:	421a      	tst	r2, r3
    24d2:	d1fb      	bne.n	24cc <udi_hid_generic_setreport+0xc>
					udd_g_ctrlreq.req.wLength)) {
    24d4:	4b06      	ldr	r3, [pc, #24]	; (24f0 <udi_hid_generic_setreport+0x30>)
			&& (sizeof(udi_hid_generic_report_feature) ==
    24d6:	88db      	ldrh	r3, [r3, #6]
    24d8:	2b04      	cmp	r3, #4
    24da:	d1f7      	bne.n	24cc <udi_hid_generic_setreport+0xc>
		udd_g_ctrlreq.payload =
    24dc:	4b04      	ldr	r3, [pc, #16]	; (24f0 <udi_hid_generic_setreport+0x30>)
    24de:	4a05      	ldr	r2, [pc, #20]	; (24f4 <udi_hid_generic_setreport+0x34>)
    24e0:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    24e2:	4a05      	ldr	r2, [pc, #20]	; (24f8 <udi_hid_generic_setreport+0x38>)
    24e4:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
    24e6:	2204      	movs	r2, #4
    24e8:	819a      	strh	r2, [r3, #12]
		return true;
    24ea:	3001      	adds	r0, #1
    24ec:	e7ee      	b.n	24cc <udi_hid_generic_setreport+0xc>
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	20000890 	.word	0x20000890
    24f4:	200002d8 	.word	0x200002d8
    24f8:	000025b9 	.word	0x000025b9

000024fc <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    24fc:	2201      	movs	r2, #1
    24fe:	4b01      	ldr	r3, [pc, #4]	; (2504 <udi_hid_generic_report_in_sent+0x8>)
    2500:	701a      	strb	r2, [r3, #0]
}
    2502:	4770      	bx	lr
    2504:	200002cc 	.word	0x200002cc

00002508 <udi_hid_generic_report_out_enable>:
{
    2508:	b510      	push	{r4, lr}
    250a:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
    250c:	4b04      	ldr	r3, [pc, #16]	; (2520 <udi_hid_generic_report_out_enable+0x18>)
    250e:	9300      	str	r3, [sp, #0]
    2510:	2308      	movs	r3, #8
    2512:	4a04      	ldr	r2, [pc, #16]	; (2524 <udi_hid_generic_report_out_enable+0x1c>)
    2514:	2100      	movs	r1, #0
    2516:	2002      	movs	r0, #2
    2518:	4c03      	ldr	r4, [pc, #12]	; (2528 <udi_hid_generic_report_out_enable+0x20>)
    251a:	47a0      	blx	r4
}
    251c:	b002      	add	sp, #8
    251e:	bd10      	pop	{r4, pc}
    2520:	00002565 	.word	0x00002565
    2524:	200002e4 	.word	0x200002e4
    2528:	000059b9 	.word	0x000059b9

0000252c <udi_hid_generic_enable>:
{
    252c:	b510      	push	{r4, lr}
	udi_hid_generic_rate = 0;
    252e:	2300      	movs	r3, #0
    2530:	4a07      	ldr	r2, [pc, #28]	; (2550 <udi_hid_generic_enable+0x24>)
    2532:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
    2534:	4a07      	ldr	r2, [pc, #28]	; (2554 <udi_hid_generic_enable+0x28>)
    2536:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
    2538:	2201      	movs	r2, #1
    253a:	4b07      	ldr	r3, [pc, #28]	; (2558 <udi_hid_generic_enable+0x2c>)
    253c:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <udi_hid_generic_enable+0x30>)
    2540:	4798      	blx	r3
    2542:	2800      	cmp	r0, #0
    2544:	d100      	bne.n	2548 <udi_hid_generic_enable+0x1c>
}
    2546:	bd10      	pop	{r4, pc}
	return UDI_HID_GENERIC_ENABLE_EXT();
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <udi_hid_generic_enable+0x34>)
    254a:	4798      	blx	r3
    254c:	e7fb      	b.n	2546 <udi_hid_generic_enable+0x1a>
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	200002d4 	.word	0x200002d4
    2554:	200002d0 	.word	0x200002d0
    2558:	200002cc 	.word	0x200002cc
    255c:	00002509 	.word	0x00002509
    2560:	000079a5 	.word	0x000079a5

00002564 <udi_hid_generic_report_out_received>:
{
    2564:	b510      	push	{r4, lr}
	if (UDD_EP_TRANSFER_OK != status)
    2566:	2800      	cmp	r0, #0
    2568:	d103      	bne.n	2572 <udi_hid_generic_report_out_received+0xe>
	if (sizeof(udi_hid_generic_report_out) == nb_received) {
    256a:	2908      	cmp	r1, #8
    256c:	d002      	beq.n	2574 <udi_hid_generic_report_out_received+0x10>
	udi_hid_generic_report_out_enable();
    256e:	4b03      	ldr	r3, [pc, #12]	; (257c <udi_hid_generic_report_out_received+0x18>)
    2570:	4798      	blx	r3
}
    2572:	bd10      	pop	{r4, pc}
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
    2574:	4802      	ldr	r0, [pc, #8]	; (2580 <udi_hid_generic_report_out_received+0x1c>)
    2576:	4b03      	ldr	r3, [pc, #12]	; (2584 <udi_hid_generic_report_out_received+0x20>)
    2578:	4798      	blx	r3
    257a:	e7f8      	b.n	256e <udi_hid_generic_report_out_received+0xa>
    257c:	00002509 	.word	0x00002509
    2580:	200002e4 	.word	0x200002e4
    2584:	000022ed 	.word	0x000022ed

00002588 <udi_hid_generic_disable>:
{
    2588:	b510      	push	{r4, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
    258a:	4b01      	ldr	r3, [pc, #4]	; (2590 <udi_hid_generic_disable+0x8>)
    258c:	4798      	blx	r3
}
    258e:	bd10      	pop	{r4, pc}
    2590:	000079b5 	.word	0x000079b5

00002594 <udi_hid_generic_setup>:
{
    2594:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
    2596:	4b03      	ldr	r3, [pc, #12]	; (25a4 <udi_hid_generic_setup+0x10>)
    2598:	4a03      	ldr	r2, [pc, #12]	; (25a8 <udi_hid_generic_setup+0x14>)
    259a:	4904      	ldr	r1, [pc, #16]	; (25ac <udi_hid_generic_setup+0x18>)
    259c:	4804      	ldr	r0, [pc, #16]	; (25b0 <udi_hid_generic_setup+0x1c>)
    259e:	4c05      	ldr	r4, [pc, #20]	; (25b4 <udi_hid_generic_setup+0x20>)
    25a0:	47a0      	blx	r4
}
    25a2:	bd10      	pop	{r4, pc}
    25a4:	000024c1 	.word	0x000024c1
    25a8:	2000003c 	.word	0x2000003c
    25ac:	200002d0 	.word	0x200002d0
    25b0:	200002d4 	.word	0x200002d4
    25b4:	00002661 	.word	0x00002661

000025b8 <udi_hid_generic_setfeature_valid>:
{
    25b8:	b510      	push	{r4, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
    25ba:	4b04      	ldr	r3, [pc, #16]	; (25cc <udi_hid_generic_setfeature_valid+0x14>)
    25bc:	899b      	ldrh	r3, [r3, #12]
    25be:	2b04      	cmp	r3, #4
    25c0:	d000      	beq.n	25c4 <udi_hid_generic_setfeature_valid+0xc>
}
    25c2:	bd10      	pop	{r4, pc}
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
    25c4:	4802      	ldr	r0, [pc, #8]	; (25d0 <udi_hid_generic_setfeature_valid+0x18>)
    25c6:	4b03      	ldr	r3, [pc, #12]	; (25d4 <udi_hid_generic_setfeature_valid+0x1c>)
    25c8:	4798      	blx	r3
    25ca:	e7fa      	b.n	25c2 <udi_hid_generic_setfeature_valid+0xa>
    25cc:	20000890 	.word	0x20000890
    25d0:	200002d8 	.word	0x200002d8
    25d4:	000079c1 	.word	0x000079c1

000025d8 <udi_hid_generic_send_report_in>:
{
    25d8:	b570      	push	{r4, r5, r6, lr}
    25da:	b082      	sub	sp, #8
    25dc:	0005      	movs	r5, r0
	if (!udi_hid_generic_b_report_in_free)
    25de:	4b19      	ldr	r3, [pc, #100]	; (2644 <udi_hid_generic_send_report_in+0x6c>)
    25e0:	7818      	ldrb	r0, [r3, #0]
    25e2:	2800      	cmp	r0, #0
    25e4:	d101      	bne.n	25ea <udi_hid_generic_send_report_in+0x12>
}
    25e6:	b002      	add	sp, #8
    25e8:	bd70      	pop	{r4, r5, r6, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    25ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    25ee:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    25f0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    25f4:	2200      	movs	r2, #0
    25f6:	4b14      	ldr	r3, [pc, #80]	; (2648 <udi_hid_generic_send_report_in+0x70>)
    25f8:	701a      	strb	r2, [r3, #0]
	memset(&udi_hid_generic_report_in, 0,
    25fa:	4e14      	ldr	r6, [pc, #80]	; (264c <udi_hid_generic_send_report_in+0x74>)
    25fc:	3208      	adds	r2, #8
    25fe:	2100      	movs	r1, #0
    2600:	0030      	movs	r0, r6
    2602:	4b13      	ldr	r3, [pc, #76]	; (2650 <udi_hid_generic_send_report_in+0x78>)
    2604:	4798      	blx	r3
	memcpy(&udi_hid_generic_report_in, data,
    2606:	2208      	movs	r2, #8
    2608:	0029      	movs	r1, r5
    260a:	0030      	movs	r0, r6
    260c:	4b11      	ldr	r3, [pc, #68]	; (2654 <udi_hid_generic_send_report_in+0x7c>)
    260e:	4798      	blx	r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    2610:	4b11      	ldr	r3, [pc, #68]	; (2658 <udi_hid_generic_send_report_in+0x80>)
    2612:	9300      	str	r3, [sp, #0]
    2614:	2308      	movs	r3, #8
    2616:	0032      	movs	r2, r6
    2618:	2100      	movs	r1, #0
    261a:	2081      	movs	r0, #129	; 0x81
    261c:	4d0f      	ldr	r5, [pc, #60]	; (265c <udi_hid_generic_send_report_in+0x84>)
    261e:	47a8      	blx	r5
							udi_hid_generic_report_in_sent);
    2620:	2301      	movs	r3, #1
    2622:	4058      	eors	r0, r3
	udi_hid_generic_b_report_in_free =
    2624:	4b07      	ldr	r3, [pc, #28]	; (2644 <udi_hid_generic_send_report_in+0x6c>)
    2626:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2628:	2c00      	cmp	r4, #0
    262a:	d105      	bne.n	2638 <udi_hid_generic_send_report_in+0x60>
		cpu_irq_enable();
    262c:	2201      	movs	r2, #1
    262e:	4b06      	ldr	r3, [pc, #24]	; (2648 <udi_hid_generic_send_report_in+0x70>)
    2630:	701a      	strb	r2, [r3, #0]
    2632:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2636:	b662      	cpsie	i
	return !udi_hid_generic_b_report_in_free;
    2638:	4b02      	ldr	r3, [pc, #8]	; (2644 <udi_hid_generic_send_report_in+0x6c>)
    263a:	7818      	ldrb	r0, [r3, #0]
    263c:	2301      	movs	r3, #1
    263e:	4058      	eors	r0, r3
    2640:	e7d1      	b.n	25e6 <udi_hid_generic_send_report_in+0xe>
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	200002cc 	.word	0x200002cc
    2648:	20000122 	.word	0x20000122
    264c:	200002dc 	.word	0x200002dc
    2650:	0000bcef 	.word	0x0000bcef
    2654:	0000bcdd 	.word	0x0000bcdd
    2658:	000024fd 	.word	0x000024fd
    265c:	000059b9 	.word	0x000059b9

00002660 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    2660:	b570      	push	{r4, r5, r6, lr}
    2662:	0005      	movs	r5, r0
    2664:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
    2666:	4a3b      	ldr	r2, [pc, #236]	; (2754 <udi_hid_setup+0xf4>)
    2668:	7812      	ldrb	r2, [r2, #0]
    266a:	b250      	sxtb	r0, r2
    266c:	2800      	cmp	r0, #0
    266e:	db05      	blt.n	267c <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2670:	2460      	movs	r4, #96	; 0x60
    2672:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    2674:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    2676:	2a20      	cmp	r2, #32
    2678:	d04f      	beq.n	271a <udi_hid_setup+0xba>
}
    267a:	bd70      	pop	{r4, r5, r6, pc}
    267c:	2060      	movs	r0, #96	; 0x60
    267e:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2680:	d103      	bne.n	268a <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
    2682:	4834      	ldr	r0, [pc, #208]	; (2754 <udi_hid_setup+0xf4>)
    2684:	7840      	ldrb	r0, [r0, #1]
    2686:	2806      	cmp	r0, #6
    2688:	d00d      	beq.n	26a6 <udi_hid_setup+0x46>
	return false;	// Request not supported
    268a:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    268c:	2a20      	cmp	r2, #32
    268e:	d1f4      	bne.n	267a <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    2690:	4a30      	ldr	r2, [pc, #192]	; (2754 <udi_hid_setup+0xf4>)
    2692:	7852      	ldrb	r2, [r2, #1]
    2694:	2a02      	cmp	r2, #2
    2696:	d034      	beq.n	2702 <udi_hid_setup+0xa2>
    2698:	2a03      	cmp	r2, #3
    269a:	d038      	beq.n	270e <udi_hid_setup+0xae>
	return false;	// Request not supported
    269c:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    269e:	2a01      	cmp	r2, #1
    26a0:	d1eb      	bne.n	267a <udi_hid_setup+0x1a>
				return setup_report();
    26a2:	4798      	blx	r3
    26a4:	e7e9      	b.n	267a <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    26a6:	4b2c      	ldr	r3, [pc, #176]	; (2758 <udi_hid_setup+0xf8>)
    26a8:	4798      	blx	r3
    26aa:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    26ac:	7a82      	ldrb	r2, [r0, #10]
		return false;
    26ae:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    26b0:	2a21      	cmp	r2, #33	; 0x21
    26b2:	d1e2      	bne.n	267a <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    26b4:	4a27      	ldr	r2, [pc, #156]	; (2754 <udi_hid_setup+0xf4>)
    26b6:	8852      	ldrh	r2, [r2, #2]
    26b8:	0a12      	lsrs	r2, r2, #8
    26ba:	2a21      	cmp	r2, #33	; 0x21
    26bc:	d013      	beq.n	26e6 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    26be:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    26c0:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
    26c2:	4291      	cmp	r1, r2
    26c4:	d1d9      	bne.n	267a <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
    26c6:	4a23      	ldr	r2, [pc, #140]	; (2754 <udi_hid_setup+0xf4>)
    26c8:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    26ca:	7c19      	ldrb	r1, [r3, #16]
    26cc:	3309      	adds	r3, #9
    26ce:	7a1b      	ldrb	r3, [r3, #8]
    26d0:	021b      	lsls	r3, r3, #8
    26d2:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
    26d4:	88d0      	ldrh	r0, [r2, #6]
    26d6:	1c19      	adds	r1, r3, #0
    26d8:	b29b      	uxth	r3, r3
    26da:	4283      	cmp	r3, r0
    26dc:	d900      	bls.n	26e0 <udi_hid_setup+0x80>
    26de:	1c01      	adds	r1, r0, #0
    26e0:	8191      	strh	r1, [r2, #12]
		return true;
    26e2:	2001      	movs	r0, #1
    26e4:	e7c9      	b.n	267a <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    26e6:	4a1b      	ldr	r2, [pc, #108]	; (2754 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    26e8:	0019      	movs	r1, r3
    26ea:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    26ec:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    26ee:	7a5b      	ldrb	r3, [r3, #9]
    26f0:	88d0      	ldrh	r0, [r2, #6]
    26f2:	1c19      	adds	r1, r3, #0
    26f4:	b29b      	uxth	r3, r3
    26f6:	4283      	cmp	r3, r0
    26f8:	d900      	bls.n	26fc <udi_hid_setup+0x9c>
    26fa:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
    26fc:	8191      	strh	r1, [r2, #12]
		return true;
    26fe:	2001      	movs	r0, #1
    2700:	e7bb      	b.n	267a <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
    2702:	4b14      	ldr	r3, [pc, #80]	; (2754 <udi_hid_setup+0xf4>)
    2704:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2706:	2201      	movs	r2, #1
    2708:	819a      	strh	r2, [r3, #12]
				return true;
    270a:	2001      	movs	r0, #1
    270c:	e7b5      	b.n	267a <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
    270e:	4b11      	ldr	r3, [pc, #68]	; (2754 <udi_hid_setup+0xf4>)
    2710:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2712:	2201      	movs	r2, #1
    2714:	819a      	strh	r2, [r3, #12]
				return true;
    2716:	2001      	movs	r0, #1
    2718:	e7af      	b.n	267a <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    271a:	4a0e      	ldr	r2, [pc, #56]	; (2754 <udi_hid_setup+0xf4>)
    271c:	7852      	ldrb	r2, [r2, #1]
    271e:	2a0a      	cmp	r2, #10
    2720:	d006      	beq.n	2730 <udi_hid_setup+0xd0>
    2722:	2a0b      	cmp	r2, #11
    2724:	d00a      	beq.n	273c <udi_hid_setup+0xdc>
	return false;	// Request not supported
    2726:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2728:	2a09      	cmp	r2, #9
    272a:	d1a6      	bne.n	267a <udi_hid_setup+0x1a>
				return setup_report();
    272c:	4798      	blx	r3
    272e:	e7a4      	b.n	267a <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    2730:	4b08      	ldr	r3, [pc, #32]	; (2754 <udi_hid_setup+0xf4>)
    2732:	885b      	ldrh	r3, [r3, #2]
    2734:	0a1b      	lsrs	r3, r3, #8
    2736:	702b      	strb	r3, [r5, #0]
				return true;
    2738:	2001      	movs	r0, #1
    273a:	e79e      	b.n	267a <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
    273c:	4b05      	ldr	r3, [pc, #20]	; (2754 <udi_hid_setup+0xf4>)
    273e:	88db      	ldrh	r3, [r3, #6]
					return false;
    2740:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
    2742:	2b00      	cmp	r3, #0
    2744:	d000      	beq.n	2748 <udi_hid_setup+0xe8>
    2746:	e798      	b.n	267a <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
    2748:	4b02      	ldr	r3, [pc, #8]	; (2754 <udi_hid_setup+0xf4>)
    274a:	885b      	ldrh	r3, [r3, #2]
    274c:	700b      	strb	r3, [r1, #0]
				return true;
    274e:	3001      	adds	r0, #1
    2750:	e793      	b.n	267a <udi_hid_setup+0x1a>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	20000890 	.word	0x20000890
    2758:	000028f9 	.word	0x000028f9

0000275c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    275c:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    275e:	4b11      	ldr	r3, [pc, #68]	; (27a4 <udc_next_desc_in_iface+0x48>)
    2760:	681b      	ldr	r3, [r3, #0]
    2762:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    2764:	7894      	ldrb	r4, [r2, #2]
    2766:	78d3      	ldrb	r3, [r2, #3]
    2768:	021b      	lsls	r3, r3, #8
    276a:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    276c:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    276e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    2770:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    2772:	4290      	cmp	r0, r2
    2774:	d210      	bcs.n	2798 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    2776:	7843      	ldrb	r3, [r0, #1]
    2778:	2b04      	cmp	r3, #4
    277a:	d00f      	beq.n	279c <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    277c:	428b      	cmp	r3, r1
    277e:	d00a      	beq.n	2796 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    2780:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    2782:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    2784:	4290      	cmp	r0, r2
    2786:	d205      	bcs.n	2794 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    2788:	7843      	ldrb	r3, [r0, #1]
    278a:	2b04      	cmp	r3, #4
    278c:	d008      	beq.n	27a0 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    278e:	428b      	cmp	r3, r1
    2790:	d1f6      	bne.n	2780 <udc_next_desc_in_iface+0x24>
    2792:	e000      	b.n	2796 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    2794:	2000      	movs	r0, #0
}
    2796:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    2798:	2000      	movs	r0, #0
    279a:	e7fc      	b.n	2796 <udc_next_desc_in_iface+0x3a>
    279c:	2000      	movs	r0, #0
    279e:	e7fa      	b.n	2796 <udc_next_desc_in_iface+0x3a>
    27a0:	2000      	movs	r0, #0
    27a2:	e7f8      	b.n	2796 <udc_next_desc_in_iface+0x3a>
    27a4:	200002f8 	.word	0x200002f8

000027a8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    27a8:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    27aa:	4b03      	ldr	r3, [pc, #12]	; (27b8 <udc_valid_address+0x10>)
    27ac:	885b      	ldrh	r3, [r3, #2]
    27ae:	207f      	movs	r0, #127	; 0x7f
    27b0:	4018      	ands	r0, r3
    27b2:	4b02      	ldr	r3, [pc, #8]	; (27bc <udc_valid_address+0x14>)
    27b4:	4798      	blx	r3
}
    27b6:	bd10      	pop	{r4, pc}
    27b8:	20000890 	.word	0x20000890
    27bc:	00005b89 	.word	0x00005b89

000027c0 <udc_update_iface_desc>:
{
    27c0:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    27c2:	4b19      	ldr	r3, [pc, #100]	; (2828 <udc_update_iface_desc+0x68>)
    27c4:	781b      	ldrb	r3, [r3, #0]
		return false;
    27c6:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    27c8:	2b00      	cmp	r3, #0
    27ca:	d029      	beq.n	2820 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    27cc:	4b17      	ldr	r3, [pc, #92]	; (282c <udc_update_iface_desc+0x6c>)
    27ce:	681b      	ldr	r3, [r3, #0]
    27d0:	681b      	ldr	r3, [r3, #0]
    27d2:	791c      	ldrb	r4, [r3, #4]
    27d4:	4284      	cmp	r4, r0
    27d6:	d923      	bls.n	2820 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    27d8:	4a15      	ldr	r2, [pc, #84]	; (2830 <udc_update_iface_desc+0x70>)
    27da:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    27dc:	789a      	ldrb	r2, [r3, #2]
    27de:	78dc      	ldrb	r4, [r3, #3]
    27e0:	0224      	lsls	r4, r4, #8
    27e2:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    27e4:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    27e6:	42a3      	cmp	r3, r4
    27e8:	d21c      	bcs.n	2824 <udc_update_iface_desc+0x64>
    27ea:	2500      	movs	r5, #0
    27ec:	2601      	movs	r6, #1
    27ee:	e007      	b.n	2800 <udc_update_iface_desc+0x40>
    27f0:	4a0f      	ldr	r2, [pc, #60]	; (2830 <udc_update_iface_desc+0x70>)
    27f2:	6013      	str	r3, [r2, #0]
    27f4:	e00f      	b.n	2816 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    27f6:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    27f8:	189b      	adds	r3, r3, r2
    27fa:	0035      	movs	r5, r6
	while (ptr_end_desc >
    27fc:	42a3      	cmp	r3, r4
    27fe:	d20c      	bcs.n	281a <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    2800:	785a      	ldrb	r2, [r3, #1]
    2802:	2a04      	cmp	r2, #4
    2804:	d1f7      	bne.n	27f6 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    2806:	789a      	ldrb	r2, [r3, #2]
    2808:	4282      	cmp	r2, r0
    280a:	d1f4      	bne.n	27f6 <udc_update_iface_desc+0x36>
    280c:	78da      	ldrb	r2, [r3, #3]
    280e:	428a      	cmp	r2, r1
    2810:	d1f1      	bne.n	27f6 <udc_update_iface_desc+0x36>
    2812:	2d00      	cmp	r5, #0
    2814:	d1ec      	bne.n	27f0 <udc_update_iface_desc+0x30>
				return true; // Interface found
    2816:	2201      	movs	r2, #1
    2818:	e002      	b.n	2820 <udc_update_iface_desc+0x60>
    281a:	4a05      	ldr	r2, [pc, #20]	; (2830 <udc_update_iface_desc+0x70>)
    281c:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    281e:	2200      	movs	r2, #0
}
    2820:	0010      	movs	r0, r2
    2822:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    2824:	2200      	movs	r2, #0
    2826:	e7fb      	b.n	2820 <udc_update_iface_desc+0x60>
    2828:	200002f4 	.word	0x200002f4
    282c:	200002f8 	.word	0x200002f8
    2830:	200002fc 	.word	0x200002fc

00002834 <udc_iface_disable>:
{
    2834:	b5f0      	push	{r4, r5, r6, r7, lr}
    2836:	46c6      	mov	lr, r8
    2838:	b500      	push	{lr}
    283a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    283c:	2100      	movs	r1, #0
    283e:	4b13      	ldr	r3, [pc, #76]	; (288c <udc_iface_disable+0x58>)
    2840:	4798      	blx	r3
    2842:	1e05      	subs	r5, r0, #0
    2844:	d103      	bne.n	284e <udc_iface_disable+0x1a>
}
    2846:	0028      	movs	r0, r5
    2848:	bc04      	pop	{r2}
    284a:	4690      	mov	r8, r2
    284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    284e:	4b10      	ldr	r3, [pc, #64]	; (2890 <udc_iface_disable+0x5c>)
    2850:	681b      	ldr	r3, [r3, #0]
    2852:	685b      	ldr	r3, [r3, #4]
    2854:	00a2      	lsls	r2, r4, #2
    2856:	58d3      	ldr	r3, [r2, r3]
    2858:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    285a:	68db      	ldr	r3, [r3, #12]
    285c:	4798      	blx	r3
    285e:	0001      	movs	r1, r0
    2860:	0020      	movs	r0, r4
    2862:	4b0a      	ldr	r3, [pc, #40]	; (288c <udc_iface_disable+0x58>)
    2864:	4798      	blx	r3
    2866:	1e05      	subs	r5, r0, #0
    2868:	d0ed      	beq.n	2846 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    286a:	4b0a      	ldr	r3, [pc, #40]	; (2894 <udc_iface_disable+0x60>)
    286c:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    286e:	4e0a      	ldr	r6, [pc, #40]	; (2898 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    2870:	4f0a      	ldr	r7, [pc, #40]	; (289c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    2872:	2105      	movs	r1, #5
    2874:	0020      	movs	r0, r4
    2876:	47b0      	blx	r6
    2878:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    287a:	d002      	beq.n	2882 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    287c:	7880      	ldrb	r0, [r0, #2]
    287e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    2880:	e7f7      	b.n	2872 <udc_iface_disable+0x3e>
	udi_api->disable();
    2882:	4643      	mov	r3, r8
    2884:	685b      	ldr	r3, [r3, #4]
    2886:	4798      	blx	r3
	return true;
    2888:	e7dd      	b.n	2846 <udc_iface_disable+0x12>
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	000027c1 	.word	0x000027c1
    2890:	200002f8 	.word	0x200002f8
    2894:	200002fc 	.word	0x200002fc
    2898:	0000275d 	.word	0x0000275d
    289c:	000056d1 	.word	0x000056d1

000028a0 <udc_iface_enable>:
{
    28a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28a2:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    28a4:	4b0f      	ldr	r3, [pc, #60]	; (28e4 <udc_iface_enable+0x44>)
    28a6:	4798      	blx	r3
    28a8:	2800      	cmp	r0, #0
    28aa:	d019      	beq.n	28e0 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    28ac:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <udc_iface_enable+0x48>)
    28ae:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    28b0:	4e0e      	ldr	r6, [pc, #56]	; (28ec <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    28b2:	4f0f      	ldr	r7, [pc, #60]	; (28f0 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    28b4:	2105      	movs	r1, #5
    28b6:	0020      	movs	r0, r4
    28b8:	47b0      	blx	r6
    28ba:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    28bc:	d009      	beq.n	28d2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    28be:	7903      	ldrb	r3, [r0, #4]
    28c0:	7942      	ldrb	r2, [r0, #5]
    28c2:	0212      	lsls	r2, r2, #8
    28c4:	431a      	orrs	r2, r3
    28c6:	78c1      	ldrb	r1, [r0, #3]
    28c8:	7880      	ldrb	r0, [r0, #2]
    28ca:	47b8      	blx	r7
    28cc:	2800      	cmp	r0, #0
    28ce:	d1f1      	bne.n	28b4 <udc_iface_enable+0x14>
    28d0:	e006      	b.n	28e0 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    28d2:	4b08      	ldr	r3, [pc, #32]	; (28f4 <udc_iface_enable+0x54>)
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	685b      	ldr	r3, [r3, #4]
    28d8:	00ad      	lsls	r5, r5, #2
    28da:	58eb      	ldr	r3, [r5, r3]
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	4798      	blx	r3
}
    28e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	000027c1 	.word	0x000027c1
    28e8:	200002fc 	.word	0x200002fc
    28ec:	0000275d 	.word	0x0000275d
    28f0:	00005729 	.word	0x00005729
    28f4:	200002f8 	.word	0x200002f8

000028f8 <udc_get_interface_desc>:
	return udc_ptr_iface;
    28f8:	4b01      	ldr	r3, [pc, #4]	; (2900 <udc_get_interface_desc+0x8>)
    28fa:	6818      	ldr	r0, [r3, #0]
}
    28fc:	4770      	bx	lr
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	200002fc 	.word	0x200002fc

00002904 <udc_start>:
{
    2904:	b510      	push	{r4, lr}
	udd_enable();
    2906:	4b01      	ldr	r3, [pc, #4]	; (290c <udc_start+0x8>)
    2908:	4798      	blx	r3
}
    290a:	bd10      	pop	{r4, pc}
    290c:	00005c39 	.word	0x00005c39

00002910 <udc_reset>:
{
    2910:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    2912:	4b12      	ldr	r3, [pc, #72]	; (295c <udc_reset+0x4c>)
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	2b00      	cmp	r3, #0
    2918:	d011      	beq.n	293e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    291a:	4b11      	ldr	r3, [pc, #68]	; (2960 <udc_reset+0x50>)
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2920:	791b      	ldrb	r3, [r3, #4]
    2922:	2b00      	cmp	r3, #0
    2924:	d00b      	beq.n	293e <udc_reset+0x2e>
    2926:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    2928:	4e0e      	ldr	r6, [pc, #56]	; (2964 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    292a:	4d0d      	ldr	r5, [pc, #52]	; (2960 <udc_reset+0x50>)
			udc_iface_disable(iface_num);
    292c:	0020      	movs	r0, r4
    292e:	47b0      	blx	r6
				iface_num++) {
    2930:	3401      	adds	r4, #1
    2932:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2934:	682b      	ldr	r3, [r5, #0]
    2936:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2938:	791b      	ldrb	r3, [r3, #4]
    293a:	42a3      	cmp	r3, r4
    293c:	d8f6      	bhi.n	292c <udc_reset+0x1c>
	udc_num_configuration = 0;
    293e:	2200      	movs	r2, #0
    2940:	4b06      	ldr	r3, [pc, #24]	; (295c <udc_reset+0x4c>)
    2942:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    2944:	4b08      	ldr	r3, [pc, #32]	; (2968 <udc_reset+0x58>)
    2946:	881b      	ldrh	r3, [r3, #0]
    2948:	079b      	lsls	r3, r3, #30
    294a:	d403      	bmi.n	2954 <udc_reset+0x44>
	udc_device_status =
    294c:	2200      	movs	r2, #0
    294e:	4b06      	ldr	r3, [pc, #24]	; (2968 <udc_reset+0x58>)
    2950:	801a      	strh	r2, [r3, #0]
}
    2952:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
    2954:	4b05      	ldr	r3, [pc, #20]	; (296c <udc_reset+0x5c>)
    2956:	4798      	blx	r3
    2958:	e7f8      	b.n	294c <udc_reset+0x3c>
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	200002f4 	.word	0x200002f4
    2960:	200002f8 	.word	0x200002f8
    2964:	00002835 	.word	0x00002835
    2968:	200002ec 	.word	0x200002ec
    296c:	00007999 	.word	0x00007999

00002970 <udc_sof_notify>:
{
    2970:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    2972:	4b0e      	ldr	r3, [pc, #56]	; (29ac <udc_sof_notify+0x3c>)
    2974:	781b      	ldrb	r3, [r3, #0]
    2976:	2b00      	cmp	r3, #0
    2978:	d017      	beq.n	29aa <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    297a:	4b0d      	ldr	r3, [pc, #52]	; (29b0 <udc_sof_notify+0x40>)
    297c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    297e:	681a      	ldr	r2, [r3, #0]
    2980:	7912      	ldrb	r2, [r2, #4]
    2982:	2a00      	cmp	r2, #0
    2984:	d011      	beq.n	29aa <udc_sof_notify+0x3a>
    2986:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2988:	4d09      	ldr	r5, [pc, #36]	; (29b0 <udc_sof_notify+0x40>)
    298a:	e006      	b.n	299a <udc_sof_notify+0x2a>
				iface_num++) {
    298c:	3401      	adds	r4, #1
    298e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2990:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    2992:	681a      	ldr	r2, [r3, #0]
    2994:	7912      	ldrb	r2, [r2, #4]
    2996:	42a2      	cmp	r2, r4
    2998:	d907      	bls.n	29aa <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    299a:	685b      	ldr	r3, [r3, #4]
    299c:	00a2      	lsls	r2, r4, #2
    299e:	58d3      	ldr	r3, [r2, r3]
    29a0:	691b      	ldr	r3, [r3, #16]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d0f2      	beq.n	298c <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    29a6:	4798      	blx	r3
    29a8:	e7f0      	b.n	298c <udc_sof_notify+0x1c>
}
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	200002f4 	.word	0x200002f4
    29b0:	200002f8 	.word	0x200002f8

000029b4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    29b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    29b6:	4bb6      	ldr	r3, [pc, #728]	; (2c90 <udc_process_setup+0x2dc>)
    29b8:	2200      	movs	r2, #0
    29ba:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    29bc:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    29be:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	b25a      	sxtb	r2, r3
    29c4:	2a00      	cmp	r2, #0
    29c6:	db13      	blt.n	29f0 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    29c8:	2260      	movs	r2, #96	; 0x60
    29ca:	421a      	tst	r2, r3
    29cc:	d100      	bne.n	29d0 <udc_process_setup+0x1c>
    29ce:	e0d7      	b.n	2b80 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    29d0:	4baf      	ldr	r3, [pc, #700]	; (2c90 <udc_process_setup+0x2dc>)
    29d2:	781a      	ldrb	r2, [r3, #0]
    29d4:	231f      	movs	r3, #31
    29d6:	4013      	ands	r3, r2
    29d8:	2b01      	cmp	r3, #1
    29da:	d100      	bne.n	29de <udc_process_setup+0x2a>
    29dc:	e18e      	b.n	2cfc <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    29de:	4bac      	ldr	r3, [pc, #688]	; (2c90 <udc_process_setup+0x2dc>)
    29e0:	781a      	ldrb	r2, [r3, #0]
    29e2:	231f      	movs	r3, #31
    29e4:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    29e6:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    29e8:	2b02      	cmp	r3, #2
    29ea:	d100      	bne.n	29ee <udc_process_setup+0x3a>
    29ec:	e1df      	b.n	2dae <udc_process_setup+0x3fa>
#endif
}
    29ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    29f0:	4aa7      	ldr	r2, [pc, #668]	; (2c90 <udc_process_setup+0x2dc>)
    29f2:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    29f4:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    29f6:	2a00      	cmp	r2, #0
    29f8:	d0f9      	beq.n	29ee <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    29fa:	2160      	movs	r1, #96	; 0x60
    29fc:	4219      	tst	r1, r3
    29fe:	d1e7      	bne.n	29d0 <udc_process_setup+0x1c>
    2a00:	211f      	movs	r1, #31
    2a02:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2a04:	d108      	bne.n	2a18 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    2a06:	49a2      	ldr	r1, [pc, #648]	; (2c90 <udc_process_setup+0x2dc>)
    2a08:	7849      	ldrb	r1, [r1, #1]
    2a0a:	2906      	cmp	r1, #6
    2a0c:	d023      	beq.n	2a56 <udc_process_setup+0xa2>
    2a0e:	2908      	cmp	r1, #8
    2a10:	d100      	bne.n	2a14 <udc_process_setup+0x60>
    2a12:	e084      	b.n	2b1e <udc_process_setup+0x16a>
    2a14:	2900      	cmp	r1, #0
    2a16:	d017      	beq.n	2a48 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2a18:	2b01      	cmp	r3, #1
    2a1a:	d100      	bne.n	2a1e <udc_process_setup+0x6a>
    2a1c:	e087      	b.n	2b2e <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2a1e:	2b02      	cmp	r3, #2
    2a20:	d1d6      	bne.n	29d0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2a22:	4b9b      	ldr	r3, [pc, #620]	; (2c90 <udc_process_setup+0x2dc>)
    2a24:	785b      	ldrb	r3, [r3, #1]
	return false;
    2a26:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d000      	beq.n	2a2e <udc_process_setup+0x7a>
    2a2c:	e12b      	b.n	2c86 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2a2e:	2a02      	cmp	r2, #2
    2a30:	d1d5      	bne.n	29de <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2a32:	4b97      	ldr	r3, [pc, #604]	; (2c90 <udc_process_setup+0x2dc>)
    2a34:	7918      	ldrb	r0, [r3, #4]
    2a36:	4b97      	ldr	r3, [pc, #604]	; (2c94 <udc_process_setup+0x2e0>)
    2a38:	4798      	blx	r3
    2a3a:	4b97      	ldr	r3, [pc, #604]	; (2c98 <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    2a3c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2a3e:	2102      	movs	r1, #2
    2a40:	0018      	movs	r0, r3
    2a42:	4b96      	ldr	r3, [pc, #600]	; (2c9c <udc_process_setup+0x2e8>)
    2a44:	4798      	blx	r3
    2a46:	e0fd      	b.n	2c44 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2a48:	2a02      	cmp	r2, #2
    2a4a:	d1c8      	bne.n	29de <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    2a4c:	3102      	adds	r1, #2
    2a4e:	4894      	ldr	r0, [pc, #592]	; (2ca0 <udc_process_setup+0x2ec>)
    2a50:	4b92      	ldr	r3, [pc, #584]	; (2c9c <udc_process_setup+0x2e8>)
    2a52:	4798      	blx	r3
    2a54:	e0f6      	b.n	2c44 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2a56:	4b8e      	ldr	r3, [pc, #568]	; (2c90 <udc_process_setup+0x2dc>)
    2a58:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2a5a:	0a13      	lsrs	r3, r2, #8
    2a5c:	2b02      	cmp	r3, #2
    2a5e:	d023      	beq.n	2aa8 <udc_process_setup+0xf4>
    2a60:	b2d9      	uxtb	r1, r3
    2a62:	2902      	cmp	r1, #2
    2a64:	d90f      	bls.n	2a86 <udc_process_setup+0xd2>
    2a66:	2b03      	cmp	r3, #3
    2a68:	d034      	beq.n	2ad4 <udc_process_setup+0x120>
    2a6a:	2b0f      	cmp	r3, #15
    2a6c:	d000      	beq.n	2a70 <udc_process_setup+0xbc>
    2a6e:	e19c      	b.n	2daa <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
    2a70:	4b8c      	ldr	r3, [pc, #560]	; (2ca4 <udc_process_setup+0x2f0>)
    2a72:	6898      	ldr	r0, [r3, #8]
    2a74:	2800      	cmp	r0, #0
    2a76:	d0b2      	beq.n	29de <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    2a78:	7883      	ldrb	r3, [r0, #2]
    2a7a:	78c1      	ldrb	r1, [r0, #3]
    2a7c:	0209      	lsls	r1, r1, #8
    2a7e:	4319      	orrs	r1, r3
    2a80:	4b86      	ldr	r3, [pc, #536]	; (2c9c <udc_process_setup+0x2e8>)
    2a82:	4798      	blx	r3
    2a84:	e007      	b.n	2a96 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2a86:	2b01      	cmp	r3, #1
    2a88:	d000      	beq.n	2a8c <udc_process_setup+0xd8>
    2a8a:	e18e      	b.n	2daa <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
    2a8c:	4b85      	ldr	r3, [pc, #532]	; (2ca4 <udc_process_setup+0x2f0>)
    2a8e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    2a90:	7801      	ldrb	r1, [r0, #0]
    2a92:	4b82      	ldr	r3, [pc, #520]	; (2c9c <udc_process_setup+0x2e8>)
    2a94:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    2a96:	4b7e      	ldr	r3, [pc, #504]	; (2c90 <udc_process_setup+0x2dc>)
    2a98:	88da      	ldrh	r2, [r3, #6]
    2a9a:	899b      	ldrh	r3, [r3, #12]
    2a9c:	4293      	cmp	r3, r2
    2a9e:	d800      	bhi.n	2aa2 <udc_process_setup+0xee>
    2aa0:	e0d0      	b.n	2c44 <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2aa2:	4b7b      	ldr	r3, [pc, #492]	; (2c90 <udc_process_setup+0x2dc>)
    2aa4:	819a      	strh	r2, [r3, #12]
    2aa6:	e0cd      	b.n	2c44 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2aa8:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    2aaa:	4b7e      	ldr	r3, [pc, #504]	; (2ca4 <udc_process_setup+0x2f0>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	7c5b      	ldrb	r3, [r3, #17]
    2ab0:	4293      	cmp	r3, r2
    2ab2:	d800      	bhi.n	2ab6 <udc_process_setup+0x102>
    2ab4:	e793      	b.n	29de <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    2ab6:	4b7b      	ldr	r3, [pc, #492]	; (2ca4 <udc_process_setup+0x2f0>)
    2ab8:	685b      	ldr	r3, [r3, #4]
    2aba:	00d2      	lsls	r2, r2, #3
    2abc:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    2abe:	7883      	ldrb	r3, [r0, #2]
    2ac0:	78c1      	ldrb	r1, [r0, #3]
    2ac2:	0209      	lsls	r1, r1, #8
    2ac4:	4319      	orrs	r1, r3
    2ac6:	4b75      	ldr	r3, [pc, #468]	; (2c9c <udc_process_setup+0x2e8>)
    2ac8:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2aca:	4b71      	ldr	r3, [pc, #452]	; (2c90 <udc_process_setup+0x2dc>)
    2acc:	689b      	ldr	r3, [r3, #8]
    2ace:	2202      	movs	r2, #2
    2ad0:	705a      	strb	r2, [r3, #1]
    2ad2:	e7e0      	b.n	2a96 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2ad4:	23ff      	movs	r3, #255	; 0xff
    2ad6:	401a      	ands	r2, r3
    2ad8:	2a01      	cmp	r2, #1
    2ada:	d01d      	beq.n	2b18 <udc_process_setup+0x164>
    2adc:	2a00      	cmp	r2, #0
    2ade:	d016      	beq.n	2b0e <udc_process_setup+0x15a>
    2ae0:	2a02      	cmp	r2, #2
    2ae2:	d000      	beq.n	2ae6 <udc_process_setup+0x132>
    2ae4:	e774      	b.n	29d0 <udc_process_setup+0x1c>
		str = udc_string_product_name;
    2ae6:	4c70      	ldr	r4, [pc, #448]	; (2ca8 <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2ae8:	2109      	movs	r1, #9
    2aea:	4a70      	ldr	r2, [pc, #448]	; (2cac <udc_process_setup+0x2f8>)
    2aec:	3202      	adds	r2, #2
    2aee:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    2af0:	5ce0      	ldrb	r0, [r4, r3]
    2af2:	8010      	strh	r0, [r2, #0]
    2af4:	3301      	adds	r3, #1
    2af6:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    2af8:	b2d8      	uxtb	r0, r3
    2afa:	4288      	cmp	r0, r1
    2afc:	d3f8      	bcc.n	2af0 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    2afe:	0049      	lsls	r1, r1, #1
    2b00:	3102      	adds	r1, #2
    2b02:	486a      	ldr	r0, [pc, #424]	; (2cac <udc_process_setup+0x2f8>)
    2b04:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    2b06:	b289      	uxth	r1, r1
    2b08:	4b64      	ldr	r3, [pc, #400]	; (2c9c <udc_process_setup+0x2e8>)
    2b0a:	4798      	blx	r3
    2b0c:	e7c3      	b.n	2a96 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2b0e:	2104      	movs	r1, #4
    2b10:	4867      	ldr	r0, [pc, #412]	; (2cb0 <udc_process_setup+0x2fc>)
    2b12:	4b62      	ldr	r3, [pc, #392]	; (2c9c <udc_process_setup+0x2e8>)
    2b14:	4798      	blx	r3
    2b16:	e7be      	b.n	2a96 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    2b18:	4c66      	ldr	r4, [pc, #408]	; (2cb4 <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2b1a:	2116      	movs	r1, #22
    2b1c:	e7e5      	b.n	2aea <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2b1e:	2a01      	cmp	r2, #1
    2b20:	d000      	beq.n	2b24 <udc_process_setup+0x170>
    2b22:	e75c      	b.n	29de <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    2b24:	2101      	movs	r1, #1
    2b26:	4864      	ldr	r0, [pc, #400]	; (2cb8 <udc_process_setup+0x304>)
    2b28:	4b5c      	ldr	r3, [pc, #368]	; (2c9c <udc_process_setup+0x2e8>)
    2b2a:	4798      	blx	r3
    2b2c:	e08a      	b.n	2c44 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b2e:	4958      	ldr	r1, [pc, #352]	; (2c90 <udc_process_setup+0x2dc>)
    2b30:	7849      	ldrb	r1, [r1, #1]
    2b32:	290a      	cmp	r1, #10
    2b34:	d000      	beq.n	2b38 <udc_process_setup+0x184>
    2b36:	e772      	b.n	2a1e <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2b38:	2a01      	cmp	r2, #1
    2b3a:	d000      	beq.n	2b3e <udc_process_setup+0x18a>
    2b3c:	e0de      	b.n	2cfc <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    2b3e:	4b5e      	ldr	r3, [pc, #376]	; (2cb8 <udc_process_setup+0x304>)
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	2b00      	cmp	r3, #0
    2b44:	d100      	bne.n	2b48 <udc_process_setup+0x194>
    2b46:	e0d9      	b.n	2cfc <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2b48:	4b51      	ldr	r3, [pc, #324]	; (2c90 <udc_process_setup+0x2dc>)
    2b4a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2b4c:	4b5b      	ldr	r3, [pc, #364]	; (2cbc <udc_process_setup+0x308>)
    2b4e:	681d      	ldr	r5, [r3, #0]
    2b50:	682b      	ldr	r3, [r5, #0]
    2b52:	791b      	ldrb	r3, [r3, #4]
    2b54:	42a3      	cmp	r3, r4
    2b56:	d800      	bhi.n	2b5a <udc_process_setup+0x1a6>
    2b58:	e0d0      	b.n	2cfc <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2b5a:	2100      	movs	r1, #0
    2b5c:	0020      	movs	r0, r4
    2b5e:	4b58      	ldr	r3, [pc, #352]	; (2cc0 <udc_process_setup+0x30c>)
    2b60:	4798      	blx	r3
    2b62:	2800      	cmp	r0, #0
    2b64:	d100      	bne.n	2b68 <udc_process_setup+0x1b4>
    2b66:	e733      	b.n	29d0 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2b68:	686b      	ldr	r3, [r5, #4]
    2b6a:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    2b6c:	58e3      	ldr	r3, [r4, r3]
    2b6e:	68db      	ldr	r3, [r3, #12]
    2b70:	4798      	blx	r3
    2b72:	4b54      	ldr	r3, [pc, #336]	; (2cc4 <udc_process_setup+0x310>)
    2b74:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    2b76:	2101      	movs	r1, #1
    2b78:	0018      	movs	r0, r3
    2b7a:	4b48      	ldr	r3, [pc, #288]	; (2c9c <udc_process_setup+0x2e8>)
    2b7c:	4798      	blx	r3
    2b7e:	e061      	b.n	2c44 <udc_process_setup+0x290>
    2b80:	221f      	movs	r2, #31
    2b82:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2b84:	d172      	bne.n	2c6c <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
    2b86:	4a42      	ldr	r2, [pc, #264]	; (2c90 <udc_process_setup+0x2dc>)
    2b88:	7852      	ldrb	r2, [r2, #1]
    2b8a:	2a03      	cmp	r2, #3
    2b8c:	d05c      	beq.n	2c48 <udc_process_setup+0x294>
    2b8e:	b2d1      	uxtb	r1, r2
    2b90:	2903      	cmp	r1, #3
    2b92:	d93b      	bls.n	2c0c <udc_process_setup+0x258>
    2b94:	2a05      	cmp	r2, #5
    2b96:	d04d      	beq.n	2c34 <udc_process_setup+0x280>
    2b98:	2a09      	cmp	r2, #9
    2b9a:	d167      	bne.n	2c6c <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    2b9c:	4b3c      	ldr	r3, [pc, #240]	; (2c90 <udc_process_setup+0x2dc>)
    2b9e:	88db      	ldrh	r3, [r3, #6]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d000      	beq.n	2ba6 <udc_process_setup+0x1f2>
    2ba4:	e71b      	b.n	29de <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    2ba6:	4b48      	ldr	r3, [pc, #288]	; (2cc8 <udc_process_setup+0x314>)
    2ba8:	4798      	blx	r3
    2baa:	2800      	cmp	r0, #0
    2bac:	d100      	bne.n	2bb0 <udc_process_setup+0x1fc>
    2bae:	e70f      	b.n	29d0 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2bb0:	4b37      	ldr	r3, [pc, #220]	; (2c90 <udc_process_setup+0x2dc>)
    2bb2:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    2bb4:	4b3b      	ldr	r3, [pc, #236]	; (2ca4 <udc_process_setup+0x2f0>)
    2bb6:	681b      	ldr	r3, [r3, #0]
    2bb8:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2bba:	429a      	cmp	r2, r3
    2bbc:	dd00      	ble.n	2bc0 <udc_process_setup+0x20c>
    2bbe:	e707      	b.n	29d0 <udc_process_setup+0x1c>
	udc_reset();
    2bc0:	4b42      	ldr	r3, [pc, #264]	; (2ccc <udc_process_setup+0x318>)
    2bc2:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2bc4:	4b32      	ldr	r3, [pc, #200]	; (2c90 <udc_process_setup+0x2dc>)
    2bc6:	789b      	ldrb	r3, [r3, #2]
    2bc8:	4a3b      	ldr	r2, [pc, #236]	; (2cb8 <udc_process_setup+0x304>)
    2bca:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d039      	beq.n	2c44 <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2bd0:	4a3f      	ldr	r2, [pc, #252]	; (2cd0 <udc_process_setup+0x31c>)
    2bd2:	4694      	mov	ip, r2
    2bd4:	4463      	add	r3, ip
    2bd6:	00db      	lsls	r3, r3, #3
    2bd8:	4a32      	ldr	r2, [pc, #200]	; (2ca4 <udc_process_setup+0x2f0>)
    2bda:	6852      	ldr	r2, [r2, #4]
    2bdc:	18d3      	adds	r3, r2, r3
    2bde:	4a37      	ldr	r2, [pc, #220]	; (2cbc <udc_process_setup+0x308>)
    2be0:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2be2:	681b      	ldr	r3, [r3, #0]
    2be4:	791b      	ldrb	r3, [r3, #4]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d02c      	beq.n	2c44 <udc_process_setup+0x290>
    2bea:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    2bec:	4d39      	ldr	r5, [pc, #228]	; (2cd4 <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2bee:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    2bf0:	2100      	movs	r1, #0
    2bf2:	0020      	movs	r0, r4
    2bf4:	47a8      	blx	r5
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d100      	bne.n	2bfc <udc_process_setup+0x248>
    2bfa:	e6e9      	b.n	29d0 <udc_process_setup+0x1c>
			iface_num++) {
    2bfc:	3401      	adds	r4, #1
    2bfe:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c00:	6833      	ldr	r3, [r6, #0]
    2c02:	681b      	ldr	r3, [r3, #0]
    2c04:	791b      	ldrb	r3, [r3, #4]
    2c06:	42a3      	cmp	r3, r4
    2c08:	d8f2      	bhi.n	2bf0 <udc_process_setup+0x23c>
    2c0a:	e01b      	b.n	2c44 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    2c0c:	2a01      	cmp	r2, #1
    2c0e:	d12d      	bne.n	2c6c <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    2c10:	4b1f      	ldr	r3, [pc, #124]	; (2c90 <udc_process_setup+0x2dc>)
    2c12:	88db      	ldrh	r3, [r3, #6]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d000      	beq.n	2c1a <udc_process_setup+0x266>
    2c18:	e6e1      	b.n	29de <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2c1a:	4b1d      	ldr	r3, [pc, #116]	; (2c90 <udc_process_setup+0x2dc>)
    2c1c:	885b      	ldrh	r3, [r3, #2]
    2c1e:	2b01      	cmp	r3, #1
    2c20:	d000      	beq.n	2c24 <udc_process_setup+0x270>
    2c22:	e6dc      	b.n	29de <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2c24:	4a1e      	ldr	r2, [pc, #120]	; (2ca0 <udc_process_setup+0x2ec>)
    2c26:	8813      	ldrh	r3, [r2, #0]
    2c28:	2102      	movs	r1, #2
    2c2a:	438b      	bics	r3, r1
    2c2c:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
    2c2e:	4b2a      	ldr	r3, [pc, #168]	; (2cd8 <udc_process_setup+0x324>)
    2c30:	4798      	blx	r3
    2c32:	e007      	b.n	2c44 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    2c34:	4b16      	ldr	r3, [pc, #88]	; (2c90 <udc_process_setup+0x2dc>)
    2c36:	88db      	ldrh	r3, [r3, #6]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d000      	beq.n	2c3e <udc_process_setup+0x28a>
    2c3c:	e6cf      	b.n	29de <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    2c3e:	4a27      	ldr	r2, [pc, #156]	; (2cdc <udc_process_setup+0x328>)
    2c40:	4b13      	ldr	r3, [pc, #76]	; (2c90 <udc_process_setup+0x2dc>)
    2c42:	611a      	str	r2, [r3, #16]
			return true;
    2c44:	2001      	movs	r0, #1
    2c46:	e6d2      	b.n	29ee <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
    2c48:	4b11      	ldr	r3, [pc, #68]	; (2c90 <udc_process_setup+0x2dc>)
    2c4a:	88db      	ldrh	r3, [r3, #6]
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	d000      	beq.n	2c52 <udc_process_setup+0x29e>
    2c50:	e6c5      	b.n	29de <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
    2c52:	4b0f      	ldr	r3, [pc, #60]	; (2c90 <udc_process_setup+0x2dc>)
    2c54:	885b      	ldrh	r3, [r3, #2]
	return false;
    2c56:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
    2c58:	2b01      	cmp	r3, #1
    2c5a:	d114      	bne.n	2c86 <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    2c5c:	4a10      	ldr	r2, [pc, #64]	; (2ca0 <udc_process_setup+0x2ec>)
    2c5e:	8813      	ldrh	r3, [r2, #0]
    2c60:	2102      	movs	r1, #2
    2c62:	430b      	orrs	r3, r1
    2c64:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    2c66:	4b1e      	ldr	r3, [pc, #120]	; (2ce0 <udc_process_setup+0x32c>)
    2c68:	4798      	blx	r3
    2c6a:	e7eb      	b.n	2c44 <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2c6c:	2b01      	cmp	r3, #1
    2c6e:	d039      	beq.n	2ce4 <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2c70:	2b02      	cmp	r3, #2
    2c72:	d000      	beq.n	2c76 <udc_process_setup+0x2c2>
    2c74:	e6ac      	b.n	29d0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2c76:	4b06      	ldr	r3, [pc, #24]	; (2c90 <udc_process_setup+0x2dc>)
    2c78:	785b      	ldrb	r3, [r3, #1]
    2c7a:	2b01      	cmp	r3, #1
    2c7c:	d074      	beq.n	2d68 <udc_process_setup+0x3b4>
    2c7e:	2b03      	cmp	r3, #3
    2c80:	d100      	bne.n	2c84 <udc_process_setup+0x2d0>
    2c82:	e080      	b.n	2d86 <udc_process_setup+0x3d2>
	return false;
    2c84:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2c86:	2800      	cmp	r0, #0
    2c88:	d000      	beq.n	2c8c <udc_process_setup+0x2d8>
    2c8a:	e6b0      	b.n	29ee <udc_process_setup+0x3a>
    2c8c:	e6a0      	b.n	29d0 <udc_process_setup+0x1c>
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	20000890 	.word	0x20000890
    2c94:	00005831 	.word	0x00005831
    2c98:	200002ee 	.word	0x200002ee
    2c9c:	00005ba9 	.word	0x00005ba9
    2ca0:	200002ec 	.word	0x200002ec
    2ca4:	20000074 	.word	0x20000074
    2ca8:	20000118 	.word	0x20000118
    2cac:	200000cc 	.word	0x200000cc
    2cb0:	200000fc 	.word	0x200000fc
    2cb4:	20000100 	.word	0x20000100
    2cb8:	200002f4 	.word	0x200002f4
    2cbc:	200002f8 	.word	0x200002f8
    2cc0:	000027c1 	.word	0x000027c1
    2cc4:	200002f0 	.word	0x200002f0
    2cc8:	00005b99 	.word	0x00005b99
    2ccc:	00002911 	.word	0x00002911
    2cd0:	1fffffff 	.word	0x1fffffff
    2cd4:	000028a1 	.word	0x000028a1
    2cd8:	00007999 	.word	0x00007999
    2cdc:	000027a9 	.word	0x000027a9
    2ce0:	0000798d 	.word	0x0000798d
			switch (udd_g_ctrlreq.req.bRequest) {
    2ce4:	4a46      	ldr	r2, [pc, #280]	; (2e00 <udc_process_setup+0x44c>)
    2ce6:	7852      	ldrb	r2, [r2, #1]
    2ce8:	2a0b      	cmp	r2, #11
    2cea:	d1c1      	bne.n	2c70 <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
    2cec:	4b44      	ldr	r3, [pc, #272]	; (2e00 <udc_process_setup+0x44c>)
    2cee:	88db      	ldrh	r3, [r3, #6]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d103      	bne.n	2cfc <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    2cf4:	4b43      	ldr	r3, [pc, #268]	; (2e04 <udc_process_setup+0x450>)
    2cf6:	781b      	ldrb	r3, [r3, #0]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d127      	bne.n	2d4c <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
    2cfc:	4b41      	ldr	r3, [pc, #260]	; (2e04 <udc_process_setup+0x450>)
    2cfe:	781b      	ldrb	r3, [r3, #0]
	return false;
    2d00:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    2d02:	2b00      	cmp	r3, #0
    2d04:	d100      	bne.n	2d08 <udc_process_setup+0x354>
    2d06:	e672      	b.n	29ee <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2d08:	4b3d      	ldr	r3, [pc, #244]	; (2e00 <udc_process_setup+0x44c>)
    2d0a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2d0c:	4b3e      	ldr	r3, [pc, #248]	; (2e08 <udc_process_setup+0x454>)
    2d0e:	681d      	ldr	r5, [r3, #0]
    2d10:	682b      	ldr	r3, [r5, #0]
    2d12:	791b      	ldrb	r3, [r3, #4]
    2d14:	42a3      	cmp	r3, r4
    2d16:	d800      	bhi.n	2d1a <udc_process_setup+0x366>
    2d18:	e669      	b.n	29ee <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2d1a:	2100      	movs	r1, #0
    2d1c:	0020      	movs	r0, r4
    2d1e:	4b3b      	ldr	r3, [pc, #236]	; (2e0c <udc_process_setup+0x458>)
    2d20:	4798      	blx	r3
    2d22:	2800      	cmp	r0, #0
    2d24:	d100      	bne.n	2d28 <udc_process_setup+0x374>
    2d26:	e65a      	b.n	29de <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2d28:	686b      	ldr	r3, [r5, #4]
    2d2a:	00a2      	lsls	r2, r4, #2
    2d2c:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2d2e:	68eb      	ldr	r3, [r5, #12]
    2d30:	4798      	blx	r3
    2d32:	0001      	movs	r1, r0
    2d34:	0020      	movs	r0, r4
    2d36:	4b35      	ldr	r3, [pc, #212]	; (2e0c <udc_process_setup+0x458>)
    2d38:	4798      	blx	r3
    2d3a:	2800      	cmp	r0, #0
    2d3c:	d100      	bne.n	2d40 <udc_process_setup+0x38c>
    2d3e:	e64e      	b.n	29de <udc_process_setup+0x2a>
	return udi_api->setup();
    2d40:	68ab      	ldr	r3, [r5, #8]
    2d42:	4798      	blx	r3
		if (udc_req_iface()) {
    2d44:	2800      	cmp	r0, #0
    2d46:	d000      	beq.n	2d4a <udc_process_setup+0x396>
    2d48:	e651      	b.n	29ee <udc_process_setup+0x3a>
    2d4a:	e648      	b.n	29de <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2d4c:	4b2c      	ldr	r3, [pc, #176]	; (2e00 <udc_process_setup+0x44c>)
    2d4e:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2d50:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    2d52:	0028      	movs	r0, r5
    2d54:	4b2e      	ldr	r3, [pc, #184]	; (2e10 <udc_process_setup+0x45c>)
    2d56:	4798      	blx	r3
    2d58:	2800      	cmp	r0, #0
    2d5a:	d100      	bne.n	2d5e <udc_process_setup+0x3aa>
    2d5c:	e638      	b.n	29d0 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    2d5e:	b2e1      	uxtb	r1, r4
    2d60:	0028      	movs	r0, r5
    2d62:	4b2c      	ldr	r3, [pc, #176]	; (2e14 <udc_process_setup+0x460>)
    2d64:	4798      	blx	r3
    2d66:	e78e      	b.n	2c86 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2d68:	4b25      	ldr	r3, [pc, #148]	; (2e00 <udc_process_setup+0x44c>)
    2d6a:	88db      	ldrh	r3, [r3, #6]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d000      	beq.n	2d72 <udc_process_setup+0x3be>
    2d70:	e635      	b.n	29de <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2d72:	4b23      	ldr	r3, [pc, #140]	; (2e00 <udc_process_setup+0x44c>)
    2d74:	885b      	ldrh	r3, [r3, #2]
    2d76:	2b00      	cmp	r3, #0
    2d78:	d000      	beq.n	2d7c <udc_process_setup+0x3c8>
    2d7a:	e630      	b.n	29de <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2d7c:	4b20      	ldr	r3, [pc, #128]	; (2e00 <udc_process_setup+0x44c>)
    2d7e:	7918      	ldrb	r0, [r3, #4]
    2d80:	4b25      	ldr	r3, [pc, #148]	; (2e18 <udc_process_setup+0x464>)
    2d82:	4798      	blx	r3
    2d84:	e77f      	b.n	2c86 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2d86:	4b1e      	ldr	r3, [pc, #120]	; (2e00 <udc_process_setup+0x44c>)
    2d88:	88db      	ldrh	r3, [r3, #6]
    2d8a:	2b00      	cmp	r3, #0
    2d8c:	d000      	beq.n	2d90 <udc_process_setup+0x3dc>
    2d8e:	e626      	b.n	29de <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2d90:	4b1b      	ldr	r3, [pc, #108]	; (2e00 <udc_process_setup+0x44c>)
    2d92:	885b      	ldrh	r3, [r3, #2]
    2d94:	2b00      	cmp	r3, #0
    2d96:	d000      	beq.n	2d9a <udc_process_setup+0x3e6>
    2d98:	e621      	b.n	29de <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2d9a:	4c19      	ldr	r4, [pc, #100]	; (2e00 <udc_process_setup+0x44c>)
    2d9c:	7920      	ldrb	r0, [r4, #4]
    2d9e:	4b1f      	ldr	r3, [pc, #124]	; (2e1c <udc_process_setup+0x468>)
    2da0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2da2:	7920      	ldrb	r0, [r4, #4]
    2da4:	4b1e      	ldr	r3, [pc, #120]	; (2e20 <udc_process_setup+0x46c>)
    2da6:	4798      	blx	r3
    2da8:	e76d      	b.n	2c86 <udc_process_setup+0x2d2>
		return false;
    2daa:	2000      	movs	r0, #0
    2dac:	e76b      	b.n	2c86 <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
    2dae:	4b15      	ldr	r3, [pc, #84]	; (2e04 <udc_process_setup+0x450>)
    2db0:	781b      	ldrb	r3, [r3, #0]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d100      	bne.n	2db8 <udc_process_setup+0x404>
    2db6:	e61a      	b.n	29ee <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2db8:	4b13      	ldr	r3, [pc, #76]	; (2e08 <udc_process_setup+0x454>)
    2dba:	681b      	ldr	r3, [r3, #0]
    2dbc:	681a      	ldr	r2, [r3, #0]
    2dbe:	7912      	ldrb	r2, [r2, #4]
    2dc0:	2a00      	cmp	r2, #0
    2dc2:	d01a      	beq.n	2dfa <udc_process_setup+0x446>
    2dc4:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2dc6:	4e11      	ldr	r6, [pc, #68]	; (2e0c <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2dc8:	4f0f      	ldr	r7, [pc, #60]	; (2e08 <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2dca:	685b      	ldr	r3, [r3, #4]
    2dcc:	00aa      	lsls	r2, r5, #2
    2dce:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2dd0:	68e3      	ldr	r3, [r4, #12]
    2dd2:	4798      	blx	r3
    2dd4:	0001      	movs	r1, r0
    2dd6:	0028      	movs	r0, r5
    2dd8:	47b0      	blx	r6
    2dda:	2800      	cmp	r0, #0
    2ddc:	d100      	bne.n	2de0 <udc_process_setup+0x42c>
    2dde:	e606      	b.n	29ee <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    2de0:	68a3      	ldr	r3, [r4, #8]
    2de2:	4798      	blx	r3
    2de4:	2800      	cmp	r0, #0
    2de6:	d000      	beq.n	2dea <udc_process_setup+0x436>
    2de8:	e601      	b.n	29ee <udc_process_setup+0x3a>
			iface_num++) {
    2dea:	3501      	adds	r5, #1
    2dec:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2dee:	683b      	ldr	r3, [r7, #0]
    2df0:	681a      	ldr	r2, [r3, #0]
    2df2:	7912      	ldrb	r2, [r2, #4]
    2df4:	42aa      	cmp	r2, r5
    2df6:	d8e8      	bhi.n	2dca <udc_process_setup+0x416>
    2df8:	e5f9      	b.n	29ee <udc_process_setup+0x3a>
	return false;
    2dfa:	2000      	movs	r0, #0
    2dfc:	e5f7      	b.n	29ee <udc_process_setup+0x3a>
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	20000890 	.word	0x20000890
    2e04:	200002f4 	.word	0x200002f4
    2e08:	200002f8 	.word	0x200002f8
    2e0c:	000027c1 	.word	0x000027c1
    2e10:	00002835 	.word	0x00002835
    2e14:	000028a1 	.word	0x000028a1
    2e18:	00005975 	.word	0x00005975
    2e1c:	00005685 	.word	0x00005685
    2e20:	00005845 	.word	0x00005845

00002e24 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e24:	4b0c      	ldr	r3, [pc, #48]	; (2e58 <cpu_irq_enter_critical+0x34>)
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d106      	bne.n	2e3a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e2c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e30:	2b00      	cmp	r3, #0
    2e32:	d007      	beq.n	2e44 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e34:	2200      	movs	r2, #0
    2e36:	4b09      	ldr	r3, [pc, #36]	; (2e5c <cpu_irq_enter_critical+0x38>)
    2e38:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e3a:	4a07      	ldr	r2, [pc, #28]	; (2e58 <cpu_irq_enter_critical+0x34>)
    2e3c:	6813      	ldr	r3, [r2, #0]
    2e3e:	3301      	adds	r3, #1
    2e40:	6013      	str	r3, [r2, #0]
}
    2e42:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2e44:	b672      	cpsid	i
    2e46:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e4a:	2200      	movs	r2, #0
    2e4c:	4b04      	ldr	r3, [pc, #16]	; (2e60 <cpu_irq_enter_critical+0x3c>)
    2e4e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e50:	3201      	adds	r2, #1
    2e52:	4b02      	ldr	r3, [pc, #8]	; (2e5c <cpu_irq_enter_critical+0x38>)
    2e54:	701a      	strb	r2, [r3, #0]
    2e56:	e7f0      	b.n	2e3a <cpu_irq_enter_critical+0x16>
    2e58:	20000300 	.word	0x20000300
    2e5c:	20000304 	.word	0x20000304
    2e60:	20000122 	.word	0x20000122

00002e64 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e64:	4b08      	ldr	r3, [pc, #32]	; (2e88 <cpu_irq_leave_critical+0x24>)
    2e66:	681a      	ldr	r2, [r3, #0]
    2e68:	3a01      	subs	r2, #1
    2e6a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d109      	bne.n	2e86 <cpu_irq_leave_critical+0x22>
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <cpu_irq_leave_critical+0x28>)
    2e74:	781b      	ldrb	r3, [r3, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d005      	beq.n	2e86 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2e7a:	2201      	movs	r2, #1
    2e7c:	4b04      	ldr	r3, [pc, #16]	; (2e90 <cpu_irq_leave_critical+0x2c>)
    2e7e:	701a      	strb	r2, [r3, #0]
    2e80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e84:	b662      	cpsie	i
	}
}
    2e86:	4770      	bx	lr
    2e88:	20000300 	.word	0x20000300
    2e8c:	20000304 	.word	0x20000304
    2e90:	20000122 	.word	0x20000122

00002e94 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2e94:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2e96:	2200      	movs	r2, #0
    2e98:	2300      	movs	r3, #0
    2e9a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2e9c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    2e9e:	2100      	movs	r1, #0
    2ea0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2ea2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2ea4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2ea6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    2ea8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    2eaa:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    2eac:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2eae:	24c0      	movs	r4, #192	; 0xc0
    2eb0:	0164      	lsls	r4, r4, #5
    2eb2:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2eb4:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2eb6:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    2eb8:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    2eba:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    2ebc:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2ebe:	242a      	movs	r4, #42	; 0x2a
    2ec0:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    2ec2:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    2ec4:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    2ec6:	3c06      	subs	r4, #6
    2ec8:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2eca:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2ecc:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2ece:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    2ed0:	232b      	movs	r3, #43	; 0x2b
    2ed2:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    2ed4:	3301      	adds	r3, #1
    2ed6:	54c1      	strb	r1, [r0, r3]
}
    2ed8:	bd10      	pop	{r4, pc}
	...

00002edc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ede:	46d6      	mov	lr, sl
    2ee0:	464f      	mov	r7, r9
    2ee2:	4646      	mov	r6, r8
    2ee4:	b5c0      	push	{r6, r7, lr}
    2ee6:	b096      	sub	sp, #88	; 0x58
    2ee8:	0007      	movs	r7, r0
    2eea:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2eec:	6001      	str	r1, [r0, #0]
    2eee:	4acb      	ldr	r2, [pc, #812]	; (321c <adc_init+0x340>)
    2ef0:	6a10      	ldr	r0, [r2, #32]
    2ef2:	2380      	movs	r3, #128	; 0x80
    2ef4:	025b      	lsls	r3, r3, #9
    2ef6:	4303      	orrs	r3, r0
    2ef8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2efa:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2efc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2efe:	07db      	lsls	r3, r3, #31
    2f00:	d505      	bpl.n	2f0e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    2f02:	b016      	add	sp, #88	; 0x58
    2f04:	bc1c      	pop	{r2, r3, r4}
    2f06:	4690      	mov	r8, r2
    2f08:	4699      	mov	r9, r3
    2f0a:	46a2      	mov	sl, r4
    2f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2f0e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    2f10:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2f12:	079b      	lsls	r3, r3, #30
    2f14:	d4f5      	bmi.n	2f02 <adc_init+0x26>
	module_inst->reference = config->reference;
    2f16:	7873      	ldrb	r3, [r6, #1]
    2f18:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d104      	bne.n	2f28 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    2f1e:	4ac0      	ldr	r2, [pc, #768]	; (3220 <adc_init+0x344>)
    2f20:	6c13      	ldr	r3, [r2, #64]	; 0x40
    2f22:	2104      	movs	r1, #4
    2f24:	430b      	orrs	r3, r1
    2f26:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    2f28:	683b      	ldr	r3, [r7, #0]
    2f2a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    2f2c:	7833      	ldrb	r3, [r6, #0]
    2f2e:	466a      	mov	r2, sp
    2f30:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2f32:	4669      	mov	r1, sp
    2f34:	201e      	movs	r0, #30
    2f36:	4bbb      	ldr	r3, [pc, #748]	; (3224 <adc_init+0x348>)
    2f38:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2f3a:	201e      	movs	r0, #30
    2f3c:	4bba      	ldr	r3, [pc, #744]	; (3228 <adc_init+0x34c>)
    2f3e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    2f40:	232c      	movs	r3, #44	; 0x2c
    2f42:	5cf2      	ldrb	r2, [r6, r3]
    2f44:	2a00      	cmp	r2, #0
    2f46:	d054      	beq.n	2ff2 <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2f48:	3b01      	subs	r3, #1
    2f4a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    2f4c:	7b33      	ldrb	r3, [r6, #12]
    2f4e:	18eb      	adds	r3, r5, r3
    2f50:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    2f52:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    2f54:	b2c9      	uxtb	r1, r1
    2f56:	428b      	cmp	r3, r1
    2f58:	d221      	bcs.n	2f9e <adc_init+0xc2>
    2f5a:	1952      	adds	r2, r2, r5
    2f5c:	b2d3      	uxtb	r3, r2
    2f5e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    2f60:	4bb2      	ldr	r3, [pc, #712]	; (322c <adc_init+0x350>)
    2f62:	469a      	mov	sl, r3
    2f64:	e003      	b.n	2f6e <adc_init+0x92>
			offset++;
    2f66:	3501      	adds	r5, #1
    2f68:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    2f6a:	45a9      	cmp	r9, r5
    2f6c:	d017      	beq.n	2f9e <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2f6e:	240f      	movs	r4, #15
    2f70:	402c      	ands	r4, r5
    2f72:	7b33      	ldrb	r3, [r6, #12]
    2f74:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    2f76:	2250      	movs	r2, #80	; 0x50
    2f78:	49ad      	ldr	r1, [pc, #692]	; (3230 <adc_init+0x354>)
    2f7a:	a802      	add	r0, sp, #8
    2f7c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2f7e:	2c13      	cmp	r4, #19
    2f80:	d8f1      	bhi.n	2f66 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2f82:	00a4      	lsls	r4, r4, #2
    2f84:	ab02      	add	r3, sp, #8
    2f86:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f88:	a901      	add	r1, sp, #4
    2f8a:	2300      	movs	r3, #0
    2f8c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2f8e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2f90:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2f92:	3301      	adds	r3, #1
    2f94:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2f96:	b2c0      	uxtb	r0, r0
    2f98:	4ba6      	ldr	r3, [pc, #664]	; (3234 <adc_init+0x358>)
    2f9a:	4798      	blx	r3
    2f9c:	e7e3      	b.n	2f66 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    2f9e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    2fa0:	2250      	movs	r2, #80	; 0x50
    2fa2:	49a3      	ldr	r1, [pc, #652]	; (3230 <adc_init+0x354>)
    2fa4:	a802      	add	r0, sp, #8
    2fa6:	4ba1      	ldr	r3, [pc, #644]	; (322c <adc_init+0x350>)
    2fa8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2faa:	2c13      	cmp	r4, #19
    2fac:	d913      	bls.n	2fd6 <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2fae:	7d73      	ldrb	r3, [r6, #21]
    2fb0:	009b      	lsls	r3, r3, #2
    2fb2:	b2db      	uxtb	r3, r3
    2fb4:	4642      	mov	r2, r8
    2fb6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    2fb8:	7db3      	ldrb	r3, [r6, #22]
    2fba:	01db      	lsls	r3, r3, #7
    2fbc:	7872      	ldrb	r2, [r6, #1]
    2fbe:	4313      	orrs	r3, r2
    2fc0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    2fc2:	4642      	mov	r2, r8
    2fc4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    2fc6:	7933      	ldrb	r3, [r6, #4]
    2fc8:	2b34      	cmp	r3, #52	; 0x34
    2fca:	d900      	bls.n	2fce <adc_init+0xf2>
    2fcc:	e178      	b.n	32c0 <adc_init+0x3e4>
    2fce:	009b      	lsls	r3, r3, #2
    2fd0:	4a99      	ldr	r2, [pc, #612]	; (3238 <adc_init+0x35c>)
    2fd2:	58d3      	ldr	r3, [r2, r3]
    2fd4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2fd6:	00a4      	lsls	r4, r4, #2
    2fd8:	ab02      	add	r3, sp, #8
    2fda:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2fdc:	a901      	add	r1, sp, #4
    2fde:	2300      	movs	r3, #0
    2fe0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2fe2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2fe4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2fe6:	3301      	adds	r3, #1
    2fe8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2fea:	b2c0      	uxtb	r0, r0
    2fec:	4b91      	ldr	r3, [pc, #580]	; (3234 <adc_init+0x358>)
    2fee:	4798      	blx	r3
    2ff0:	e7dd      	b.n	2fae <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    2ff2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    2ff4:	2250      	movs	r2, #80	; 0x50
    2ff6:	498e      	ldr	r1, [pc, #568]	; (3230 <adc_init+0x354>)
    2ff8:	a802      	add	r0, sp, #8
    2ffa:	4b8c      	ldr	r3, [pc, #560]	; (322c <adc_init+0x350>)
    2ffc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2ffe:	2c13      	cmp	r4, #19
    3000:	d915      	bls.n	302e <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    3002:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    3004:	2250      	movs	r2, #80	; 0x50
    3006:	498a      	ldr	r1, [pc, #552]	; (3230 <adc_init+0x354>)
    3008:	a802      	add	r0, sp, #8
    300a:	4b88      	ldr	r3, [pc, #544]	; (322c <adc_init+0x350>)
    300c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    300e:	2c13      	cmp	r4, #19
    3010:	d8cd      	bhi.n	2fae <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    3012:	00a4      	lsls	r4, r4, #2
    3014:	ab02      	add	r3, sp, #8
    3016:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3018:	a901      	add	r1, sp, #4
    301a:	2300      	movs	r3, #0
    301c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    301e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3020:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    3022:	3301      	adds	r3, #1
    3024:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    3026:	b2c0      	uxtb	r0, r0
    3028:	4b82      	ldr	r3, [pc, #520]	; (3234 <adc_init+0x358>)
    302a:	4798      	blx	r3
    302c:	e7bf      	b.n	2fae <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    302e:	00a4      	lsls	r4, r4, #2
    3030:	ab02      	add	r3, sp, #8
    3032:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3034:	a901      	add	r1, sp, #4
    3036:	2300      	movs	r3, #0
    3038:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    303a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    303c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    303e:	3301      	adds	r3, #1
    3040:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    3042:	b2c0      	uxtb	r0, r0
    3044:	4b7b      	ldr	r3, [pc, #492]	; (3234 <adc_init+0x358>)
    3046:	4798      	blx	r3
    3048:	e7db      	b.n	3002 <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    304a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    304c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    304e:	2102      	movs	r1, #2
    3050:	e01a      	b.n	3088 <adc_init+0x1ac>
		adjres = config->divide_result;
    3052:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    3054:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    3056:	2410      	movs	r4, #16
    3058:	e016      	b.n	3088 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    305a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    305c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    305e:	2101      	movs	r1, #1
    3060:	e012      	b.n	3088 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    3062:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    3064:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    3066:	2100      	movs	r1, #0
    3068:	e00e      	b.n	3088 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    306a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    306c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    306e:	2100      	movs	r1, #0
    3070:	e00a      	b.n	3088 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    3072:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    3074:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    3076:	2100      	movs	r1, #0
    3078:	e006      	b.n	3088 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    307a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    307c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    307e:	2100      	movs	r1, #0
    3080:	e002      	b.n	3088 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    3082:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    3084:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    3086:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    3088:	0109      	lsls	r1, r1, #4
    308a:	2270      	movs	r2, #112	; 0x70
    308c:	400a      	ands	r2, r1
    308e:	4313      	orrs	r3, r2
    3090:	4642      	mov	r2, r8
    3092:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    3094:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    3096:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    3098:	2b3f      	cmp	r3, #63	; 0x3f
    309a:	d900      	bls.n	309e <adc_init+0x1c2>
    309c:	e731      	b.n	2f02 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    309e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    30a0:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    30a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    30a4:	b25b      	sxtb	r3, r3
    30a6:	2b00      	cmp	r3, #0
    30a8:	dbfb      	blt.n	30a2 <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    30aa:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    30ac:	8872      	ldrh	r2, [r6, #2]
    30ae:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    30b0:	2224      	movs	r2, #36	; 0x24
    30b2:	5cb2      	ldrb	r2, [r6, r2]
    30b4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    30b6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    30b8:	7d32      	ldrb	r2, [r6, #20]
    30ba:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    30bc:	4313      	orrs	r3, r2
    30be:	7cb2      	ldrb	r2, [r6, #18]
    30c0:	0052      	lsls	r2, r2, #1
    30c2:	4313      	orrs	r3, r2
    30c4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    30c6:	4642      	mov	r2, r8
    30c8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    30ca:	7e33      	ldrb	r3, [r6, #24]
    30cc:	2b00      	cmp	r3, #0
    30ce:	d020      	beq.n	3112 <adc_init+0x236>
		switch (resolution) {
    30d0:	2c10      	cmp	r4, #16
    30d2:	d100      	bne.n	30d6 <adc_init+0x1fa>
    30d4:	e0d6      	b.n	3284 <adc_init+0x3a8>
    30d6:	d800      	bhi.n	30da <adc_init+0x1fe>
    30d8:	e080      	b.n	31dc <adc_init+0x300>
    30da:	2c20      	cmp	r4, #32
    30dc:	d100      	bne.n	30e0 <adc_init+0x204>
    30de:	e0b3      	b.n	3248 <adc_init+0x36c>
    30e0:	2c30      	cmp	r4, #48	; 0x30
    30e2:	d116      	bne.n	3112 <adc_init+0x236>
			if (config->differential_mode &&
    30e4:	7cf2      	ldrb	r2, [r6, #19]
    30e6:	2a00      	cmp	r2, #0
    30e8:	d00a      	beq.n	3100 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    30ea:	69f2      	ldr	r2, [r6, #28]
    30ec:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    30ee:	2017      	movs	r0, #23
			if (config->differential_mode &&
    30f0:	2aff      	cmp	r2, #255	; 0xff
    30f2:	d900      	bls.n	30f6 <adc_init+0x21a>
    30f4:	e705      	b.n	2f02 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    30f6:	6a32      	ldr	r2, [r6, #32]
    30f8:	3280      	adds	r2, #128	; 0x80
    30fa:	2aff      	cmp	r2, #255	; 0xff
    30fc:	d900      	bls.n	3100 <adc_init+0x224>
    30fe:	e700      	b.n	2f02 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    3100:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    3102:	69f2      	ldr	r2, [r6, #28]
    3104:	2aff      	cmp	r2, #255	; 0xff
    3106:	dd00      	ble.n	310a <adc_init+0x22e>
    3108:	e6fb      	b.n	2f02 <adc_init+0x26>
    310a:	6a32      	ldr	r2, [r6, #32]
    310c:	2aff      	cmp	r2, #255	; 0xff
    310e:	dd00      	ble.n	3112 <adc_init+0x236>
    3110:	e6f7      	b.n	2f02 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    3112:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3114:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3116:	b252      	sxtb	r2, r2
    3118:	2a00      	cmp	r2, #0
    311a:	dbfb      	blt.n	3114 <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    311c:	4642      	mov	r2, r8
    311e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    3120:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3122:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3124:	b25b      	sxtb	r3, r3
    3126:	2b00      	cmp	r3, #0
    3128:	dbfb      	blt.n	3122 <adc_init+0x246>
	adc_module->WINLT.reg =
    312a:	8bb3      	ldrh	r3, [r6, #28]
    312c:	4642      	mov	r2, r8
    312e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    3130:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3132:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3134:	b25b      	sxtb	r3, r3
    3136:	2b00      	cmp	r3, #0
    3138:	dbfb      	blt.n	3132 <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    313a:	8c33      	ldrh	r3, [r6, #32]
    313c:	4642      	mov	r2, r8
    313e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    3140:	232c      	movs	r3, #44	; 0x2c
    3142:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    3144:	2b00      	cmp	r3, #0
    3146:	d005      	beq.n	3154 <adc_init+0x278>
		inputs_to_scan--;
    3148:	3b01      	subs	r3, #1
    314a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    314c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    314e:	2b0f      	cmp	r3, #15
    3150:	d900      	bls.n	3154 <adc_init+0x278>
    3152:	e6d6      	b.n	2f02 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    3154:	222b      	movs	r2, #43	; 0x2b
    3156:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    3158:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    315a:	290f      	cmp	r1, #15
    315c:	d900      	bls.n	3160 <adc_init+0x284>
    315e:	e6d0      	b.n	2f02 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    3160:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3162:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    3164:	b252      	sxtb	r2, r2
    3166:	2a00      	cmp	r2, #0
    3168:	dbfb      	blt.n	3162 <adc_init+0x286>
			config->negative_input |
    316a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    316c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    316e:	4302      	orrs	r2, r0
    3170:	68b0      	ldr	r0, [r6, #8]
    3172:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    3174:	0509      	lsls	r1, r1, #20
			config->negative_input |
    3176:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    3178:	041b      	lsls	r3, r3, #16
			config->negative_input |
    317a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    317c:	4642      	mov	r2, r8
    317e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    3180:	232a      	movs	r3, #42	; 0x2a
    3182:	5cf3      	ldrb	r3, [r6, r3]
    3184:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    3186:	230f      	movs	r3, #15
    3188:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    318a:	3315      	adds	r3, #21
    318c:	5cf3      	ldrb	r3, [r6, r3]
    318e:	2b00      	cmp	r3, #0
    3190:	d012      	beq.n	31b8 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    3192:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    3194:	4a29      	ldr	r2, [pc, #164]	; (323c <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    3196:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    3198:	4293      	cmp	r3, r2
    319a:	d900      	bls.n	319e <adc_init+0x2c2>
    319c:	e6b1      	b.n	2f02 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    319e:	4642      	mov	r2, r8
    31a0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    31a2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    31a4:	2380      	movs	r3, #128	; 0x80
    31a6:	011b      	lsls	r3, r3, #4
    31a8:	18d3      	adds	r3, r2, r3
    31aa:	4924      	ldr	r1, [pc, #144]	; (323c <adc_init+0x360>)
    31ac:	b29b      	uxth	r3, r3
    31ae:	428b      	cmp	r3, r1
    31b0:	d900      	bls.n	31b4 <adc_init+0x2d8>
    31b2:	e6a6      	b.n	2f02 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    31b4:	4643      	mov	r3, r8
    31b6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    31b8:	4b21      	ldr	r3, [pc, #132]	; (3240 <adc_init+0x364>)
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	015b      	lsls	r3, r3, #5
    31be:	22e0      	movs	r2, #224	; 0xe0
    31c0:	00d2      	lsls	r2, r2, #3
    31c2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    31c4:	4a1f      	ldr	r2, [pc, #124]	; (3244 <adc_init+0x368>)
    31c6:	6851      	ldr	r1, [r2, #4]
    31c8:	0149      	lsls	r1, r1, #5
    31ca:	6812      	ldr	r2, [r2, #0]
    31cc:	0ed2      	lsrs	r2, r2, #27
    31ce:	430a      	orrs	r2, r1
    31d0:	b2d2      	uxtb	r2, r2
			) |
    31d2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    31d4:	4642      	mov	r2, r8
    31d6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    31d8:	2000      	movs	r0, #0
    31da:	e692      	b.n	2f02 <adc_init+0x26>
		switch (resolution) {
    31dc:	2c00      	cmp	r4, #0
    31de:	d198      	bne.n	3112 <adc_init+0x236>
			if (config->differential_mode &&
    31e0:	7cf2      	ldrb	r2, [r6, #19]
    31e2:	2a00      	cmp	r2, #0
    31e4:	d00f      	beq.n	3206 <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    31e6:	69f2      	ldr	r2, [r6, #28]
    31e8:	2180      	movs	r1, #128	; 0x80
    31ea:	0109      	lsls	r1, r1, #4
    31ec:	468c      	mov	ip, r1
    31ee:	4462      	add	r2, ip
			if (config->differential_mode &&
    31f0:	4912      	ldr	r1, [pc, #72]	; (323c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    31f2:	2017      	movs	r0, #23
			if (config->differential_mode &&
    31f4:	428a      	cmp	r2, r1
    31f6:	d900      	bls.n	31fa <adc_init+0x31e>
    31f8:	e683      	b.n	2f02 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    31fa:	6a32      	ldr	r2, [r6, #32]
    31fc:	4462      	add	r2, ip
    31fe:	490f      	ldr	r1, [pc, #60]	; (323c <adc_init+0x360>)
    3200:	428a      	cmp	r2, r1
    3202:	d900      	bls.n	3206 <adc_init+0x32a>
    3204:	e67d      	b.n	2f02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    3206:	4a0d      	ldr	r2, [pc, #52]	; (323c <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    3208:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    320a:	69f1      	ldr	r1, [r6, #28]
    320c:	4291      	cmp	r1, r2
    320e:	dd00      	ble.n	3212 <adc_init+0x336>
    3210:	e677      	b.n	2f02 <adc_init+0x26>
    3212:	6a31      	ldr	r1, [r6, #32]
    3214:	4291      	cmp	r1, r2
    3216:	dd00      	ble.n	321a <adc_init+0x33e>
    3218:	e673      	b.n	2f02 <adc_init+0x26>
    321a:	e77a      	b.n	3112 <adc_init+0x236>
    321c:	40000400 	.word	0x40000400
    3220:	40000800 	.word	0x40000800
    3224:	00004435 	.word	0x00004435
    3228:	000043a9 	.word	0x000043a9
    322c:	0000bcdd 	.word	0x0000bcdd
    3230:	0000bfb4 	.word	0x0000bfb4
    3234:	0000452d 	.word	0x0000452d
    3238:	0000bee0 	.word	0x0000bee0
    323c:	00000fff 	.word	0x00000fff
    3240:	00806024 	.word	0x00806024
    3244:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    3248:	7cf2      	ldrb	r2, [r6, #19]
    324a:	2a00      	cmp	r2, #0
    324c:	d00f      	beq.n	326e <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    324e:	69f2      	ldr	r2, [r6, #28]
    3250:	2180      	movs	r1, #128	; 0x80
    3252:	0089      	lsls	r1, r1, #2
    3254:	468c      	mov	ip, r1
    3256:	4462      	add	r2, ip
			if (config->differential_mode &&
    3258:	491a      	ldr	r1, [pc, #104]	; (32c4 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    325a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    325c:	428a      	cmp	r2, r1
    325e:	d900      	bls.n	3262 <adc_init+0x386>
    3260:	e64f      	b.n	2f02 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    3262:	6a32      	ldr	r2, [r6, #32]
    3264:	4462      	add	r2, ip
    3266:	4917      	ldr	r1, [pc, #92]	; (32c4 <adc_init+0x3e8>)
    3268:	428a      	cmp	r2, r1
    326a:	d900      	bls.n	326e <adc_init+0x392>
    326c:	e649      	b.n	2f02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    326e:	4a15      	ldr	r2, [pc, #84]	; (32c4 <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    3270:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    3272:	69f1      	ldr	r1, [r6, #28]
    3274:	4291      	cmp	r1, r2
    3276:	dd00      	ble.n	327a <adc_init+0x39e>
    3278:	e643      	b.n	2f02 <adc_init+0x26>
    327a:	6a31      	ldr	r1, [r6, #32]
    327c:	4291      	cmp	r1, r2
    327e:	dd00      	ble.n	3282 <adc_init+0x3a6>
    3280:	e63f      	b.n	2f02 <adc_init+0x26>
    3282:	e746      	b.n	3112 <adc_init+0x236>
			if (config->differential_mode &&
    3284:	7cf2      	ldrb	r2, [r6, #19]
    3286:	2a00      	cmp	r2, #0
    3288:	d00f      	beq.n	32aa <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    328a:	69f2      	ldr	r2, [r6, #28]
    328c:	2180      	movs	r1, #128	; 0x80
    328e:	0209      	lsls	r1, r1, #8
    3290:	468c      	mov	ip, r1
    3292:	4462      	add	r2, ip
			if (config->differential_mode &&
    3294:	490c      	ldr	r1, [pc, #48]	; (32c8 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    3296:	2017      	movs	r0, #23
			if (config->differential_mode &&
    3298:	428a      	cmp	r2, r1
    329a:	d900      	bls.n	329e <adc_init+0x3c2>
    329c:	e631      	b.n	2f02 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    329e:	6a32      	ldr	r2, [r6, #32]
    32a0:	4462      	add	r2, ip
    32a2:	4909      	ldr	r1, [pc, #36]	; (32c8 <adc_init+0x3ec>)
    32a4:	428a      	cmp	r2, r1
    32a6:	d900      	bls.n	32aa <adc_init+0x3ce>
    32a8:	e62b      	b.n	2f02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    32aa:	4a07      	ldr	r2, [pc, #28]	; (32c8 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    32ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    32ae:	69f1      	ldr	r1, [r6, #28]
    32b0:	4291      	cmp	r1, r2
    32b2:	dd00      	ble.n	32b6 <adc_init+0x3da>
    32b4:	e625      	b.n	2f02 <adc_init+0x26>
    32b6:	6a31      	ldr	r1, [r6, #32]
    32b8:	4291      	cmp	r1, r2
    32ba:	dd00      	ble.n	32be <adc_init+0x3e2>
    32bc:	e621      	b.n	2f02 <adc_init+0x26>
    32be:	e728      	b.n	3112 <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    32c0:	2017      	movs	r0, #23
    32c2:	e61e      	b.n	2f02 <adc_init+0x26>
    32c4:	000003ff 	.word	0x000003ff
    32c8:	0000ffff 	.word	0x0000ffff

000032cc <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    32cc:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    32ce:	79d8      	ldrb	r0, [r3, #7]
    32d0:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
    32d2:	4770      	bx	lr

000032d4 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    32d4:	2300      	movs	r3, #0
    32d6:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    32d8:	2201      	movs	r2, #1
    32da:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    32dc:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    32de:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
    32e0:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    32e2:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    32e4:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    32e6:	4770      	bx	lr

000032e8 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    32e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ea:	46c6      	mov	lr, r8
    32ec:	b500      	push	{lr}
    32ee:	b082      	sub	sp, #8
    32f0:	0005      	movs	r5, r0
    32f2:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    32f4:	6001      	str	r1, [r0, #0]
    32f6:	4a27      	ldr	r2, [pc, #156]	; (3394 <dac_init+0xac>)
    32f8:	6a10      	ldr	r0, [r2, #32]
    32fa:	2380      	movs	r3, #128	; 0x80
    32fc:	02db      	lsls	r3, r3, #11
    32fe:	4303      	orrs	r3, r0
    3300:	6213      	str	r3, [r2, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    3302:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    3304:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    3306:	079b      	lsls	r3, r3, #30
    3308:	d503      	bpl.n	3312 <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
    330a:	b002      	add	sp, #8
    330c:	bc04      	pop	{r2}
    330e:	4690      	mov	r8, r2
    3310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    3312:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
    3314:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    3316:	07db      	lsls	r3, r3, #31
    3318:	d4f7      	bmi.n	330a <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
    331a:	a901      	add	r1, sp, #4
    331c:	78e3      	ldrb	r3, [r4, #3]
    331e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    3320:	301c      	adds	r0, #28
    3322:	4b1d      	ldr	r3, [pc, #116]	; (3398 <dac_init+0xb0>)
    3324:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    3326:	2021      	movs	r0, #33	; 0x21
    3328:	4b1c      	ldr	r3, [pc, #112]	; (339c <dac_init+0xb4>)
    332a:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    332c:	2600      	movs	r6, #0
    332e:	466b      	mov	r3, sp
    3330:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
    3332:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    3334:	2301      	movs	r3, #1
    3336:	466a      	mov	r2, sp
    3338:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    333a:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    333c:	4669      	mov	r1, sp
    333e:	2002      	movs	r0, #2
    3340:	4b17      	ldr	r3, [pc, #92]	; (33a0 <dac_init+0xb8>)
    3342:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
    3344:	682b      	ldr	r3, [r5, #0]
    3346:	4698      	mov	r8, r3
	module_inst->output = config->output;
    3348:	7863      	ldrb	r3, [r4, #1]
    334a:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
    334c:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
    334e:	79a3      	ldrb	r3, [r4, #6]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    3350:	1e5a      	subs	r2, r3, #1
    3352:	4193      	sbcs	r3, r2
    3354:	009b      	lsls	r3, r3, #2
	new_ctrlb |= config->reference;
    3356:	7826      	ldrb	r6, [r4, #0]
	if (config->left_adjust) {
    3358:	78a2      	ldrb	r2, [r4, #2]
    335a:	2a00      	cmp	r2, #0
    335c:	d001      	beq.n	3362 <dac_init+0x7a>
    335e:	2204      	movs	r2, #4
    3360:	4316      	orrs	r6, r2
	if (config->databuf_protection_bypass) {
    3362:	7922      	ldrb	r2, [r4, #4]
    3364:	2a00      	cmp	r2, #0
    3366:	d001      	beq.n	336c <dac_init+0x84>
    3368:	2210      	movs	r2, #16
    336a:	4316      	orrs	r6, r2
	if (config->voltage_pump_disable) {
    336c:	7962      	ldrb	r2, [r4, #5]
    336e:	2a00      	cmp	r2, #0
    3370:	d001      	beq.n	3376 <dac_init+0x8e>
    3372:	2208      	movs	r2, #8
    3374:	4316      	orrs	r6, r2
	dac_module->CTRLA.reg = new_ctrla;
    3376:	b2db      	uxtb	r3, r3
    3378:	4642      	mov	r2, r8
    337a:	7013      	strb	r3, [r2, #0]
	while (dac_is_syncing(module_inst)) {
    337c:	4f09      	ldr	r7, [pc, #36]	; (33a4 <dac_init+0xbc>)
    337e:	0028      	movs	r0, r5
    3380:	47b8      	blx	r7
    3382:	2800      	cmp	r0, #0
    3384:	d1fb      	bne.n	337e <dac_init+0x96>
	dac_module->CTRLB.reg = new_ctrlb;
    3386:	b2f6      	uxtb	r6, r6
    3388:	4643      	mov	r3, r8
    338a:	705e      	strb	r6, [r3, #1]
	module_inst->reference = config->reference;
    338c:	7823      	ldrb	r3, [r4, #0]
    338e:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
    3390:	e7bb      	b.n	330a <dac_init+0x22>
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	40000400 	.word	0x40000400
    3398:	00004435 	.word	0x00004435
    339c:	000043a9 	.word	0x000043a9
    33a0:	0000452d 	.word	0x0000452d
    33a4:	000032cd 	.word	0x000032cd

000033a8 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    33a8:	b570      	push	{r4, r5, r6, lr}
    33aa:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    33ac:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    33ae:	7873      	ldrb	r3, [r6, #1]
    33b0:	7902      	ldrb	r2, [r0, #4]
    33b2:	4313      	orrs	r3, r2
    33b4:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
    33b6:	4d09      	ldr	r5, [pc, #36]	; (33dc <dac_enable+0x34>)
    33b8:	0020      	movs	r0, r4
    33ba:	47a8      	blx	r5
    33bc:	2800      	cmp	r0, #0
    33be:	d1fb      	bne.n	33b8 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    33c0:	7833      	ldrb	r3, [r6, #0]
    33c2:	2202      	movs	r2, #2
    33c4:	4313      	orrs	r3, r2
    33c6:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    33c8:	7963      	ldrb	r3, [r4, #5]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d104      	bne.n	33d8 <dac_enable+0x30>
    33ce:	4a04      	ldr	r2, [pc, #16]	; (33e0 <dac_enable+0x38>)
    33d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    33d2:	2104      	movs	r1, #4
    33d4:	430b      	orrs	r3, r1
    33d6:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    33d8:	bd70      	pop	{r4, r5, r6, pc}
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	000032cd 	.word	0x000032cd
    33e0:	40000800 	.word	0x40000800

000033e4 <dac_disable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_disable(
		struct dac_module *const module_inst)
{
    33e4:	b570      	push	{r4, r5, r6, lr}
    33e6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    33e8:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
    33ea:	4d05      	ldr	r5, [pc, #20]	; (3400 <dac_disable+0x1c>)
    33ec:	0020      	movs	r0, r4
    33ee:	47a8      	blx	r5
    33f0:	2800      	cmp	r0, #0
    33f2:	d1fb      	bne.n	33ec <dac_disable+0x8>
	};

	/* Disable DAC */
	dac_module->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
    33f4:	7833      	ldrb	r3, [r6, #0]
    33f6:	2202      	movs	r2, #2
    33f8:	4393      	bics	r3, r2
    33fa:	7033      	strb	r3, [r6, #0]
}
    33fc:	bd70      	pop	{r4, r5, r6, pc}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	000032cd 	.word	0x000032cd

00003404 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
    3404:	4770      	bx	lr

00003406 <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
    3406:	4770      	bx	lr

00003408 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
    3408:	4770      	bx	lr
	...

0000340c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    340c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    340e:	2a00      	cmp	r2, #0
    3410:	d001      	beq.n	3416 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3412:	0018      	movs	r0, r3
    3414:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    3416:	008b      	lsls	r3, r1, #2
    3418:	4a06      	ldr	r2, [pc, #24]	; (3434 <extint_register_callback+0x28>)
    341a:	589b      	ldr	r3, [r3, r2]
    341c:	2b00      	cmp	r3, #0
    341e:	d003      	beq.n	3428 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3420:	4283      	cmp	r3, r0
    3422:	d005      	beq.n	3430 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3424:	231d      	movs	r3, #29
    3426:	e7f4      	b.n	3412 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    3428:	0089      	lsls	r1, r1, #2
    342a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    342c:	2300      	movs	r3, #0
    342e:	e7f0      	b.n	3412 <extint_register_callback+0x6>
		return STATUS_OK;
    3430:	2300      	movs	r3, #0
    3432:	e7ee      	b.n	3412 <extint_register_callback+0x6>
    3434:	20000638 	.word	0x20000638

00003438 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3438:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    343a:	2900      	cmp	r1, #0
    343c:	d001      	beq.n	3442 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    343e:	0018      	movs	r0, r3
    3440:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3442:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3444:	281f      	cmp	r0, #31
    3446:	d800      	bhi.n	344a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3448:	4a02      	ldr	r2, [pc, #8]	; (3454 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    344a:	2301      	movs	r3, #1
    344c:	4083      	lsls	r3, r0
    344e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3450:	2300      	movs	r3, #0
    3452:	e7f4      	b.n	343e <extint_chan_enable_callback+0x6>
    3454:	40001800 	.word	0x40001800

00003458 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3458:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    345a:	2200      	movs	r2, #0
    345c:	4b10      	ldr	r3, [pc, #64]	; (34a0 <EIC_Handler+0x48>)
    345e:	701a      	strb	r2, [r3, #0]
    3460:	2300      	movs	r3, #0
    3462:	4910      	ldr	r1, [pc, #64]	; (34a4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3464:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3466:	4e10      	ldr	r6, [pc, #64]	; (34a8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3468:	4c0d      	ldr	r4, [pc, #52]	; (34a0 <EIC_Handler+0x48>)
    346a:	e00a      	b.n	3482 <EIC_Handler+0x2a>
		return eics[eic_index];
    346c:	490d      	ldr	r1, [pc, #52]	; (34a4 <EIC_Handler+0x4c>)
    346e:	e008      	b.n	3482 <EIC_Handler+0x2a>
    3470:	7823      	ldrb	r3, [r4, #0]
    3472:	3301      	adds	r3, #1
    3474:	b2db      	uxtb	r3, r3
    3476:	7023      	strb	r3, [r4, #0]
    3478:	2b0f      	cmp	r3, #15
    347a:	d810      	bhi.n	349e <EIC_Handler+0x46>
		return NULL;
    347c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    347e:	2b1f      	cmp	r3, #31
    3480:	d9f4      	bls.n	346c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3482:	0028      	movs	r0, r5
    3484:	4018      	ands	r0, r3
    3486:	2201      	movs	r2, #1
    3488:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    348a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    348c:	4210      	tst	r0, r2
    348e:	d0ef      	beq.n	3470 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3490:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3492:	009b      	lsls	r3, r3, #2
    3494:	599b      	ldr	r3, [r3, r6]
    3496:	2b00      	cmp	r3, #0
    3498:	d0ea      	beq.n	3470 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    349a:	4798      	blx	r3
    349c:	e7e8      	b.n	3470 <EIC_Handler+0x18>
			}
		}
	}
}
    349e:	bd70      	pop	{r4, r5, r6, pc}
    34a0:	20000635 	.word	0x20000635
    34a4:	40001800 	.word	0x40001800
    34a8:	20000638 	.word	0x20000638

000034ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    34ac:	4a04      	ldr	r2, [pc, #16]	; (34c0 <_extint_enable+0x14>)
    34ae:	7813      	ldrb	r3, [r2, #0]
    34b0:	2102      	movs	r1, #2
    34b2:	430b      	orrs	r3, r1
    34b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34b6:	7853      	ldrb	r3, [r2, #1]
    34b8:	b25b      	sxtb	r3, r3
    34ba:	2b00      	cmp	r3, #0
    34bc:	dbfb      	blt.n	34b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    34be:	4770      	bx	lr
    34c0:	40001800 	.word	0x40001800

000034c4 <_system_extint_init>:
{
    34c4:	b500      	push	{lr}
    34c6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    34c8:	4a12      	ldr	r2, [pc, #72]	; (3514 <_system_extint_init+0x50>)
    34ca:	6993      	ldr	r3, [r2, #24]
    34cc:	2140      	movs	r1, #64	; 0x40
    34ce:	430b      	orrs	r3, r1
    34d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    34d2:	a901      	add	r1, sp, #4
    34d4:	2300      	movs	r3, #0
    34d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    34d8:	2005      	movs	r0, #5
    34da:	4b0f      	ldr	r3, [pc, #60]	; (3518 <_system_extint_init+0x54>)
    34dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    34de:	2005      	movs	r0, #5
    34e0:	4b0e      	ldr	r3, [pc, #56]	; (351c <_system_extint_init+0x58>)
    34e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    34e4:	4a0e      	ldr	r2, [pc, #56]	; (3520 <_system_extint_init+0x5c>)
    34e6:	7813      	ldrb	r3, [r2, #0]
    34e8:	2101      	movs	r1, #1
    34ea:	430b      	orrs	r3, r1
    34ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    34ee:	7853      	ldrb	r3, [r2, #1]
    34f0:	b25b      	sxtb	r3, r3
    34f2:	2b00      	cmp	r3, #0
    34f4:	dbfb      	blt.n	34ee <_system_extint_init+0x2a>
    34f6:	4b0b      	ldr	r3, [pc, #44]	; (3524 <_system_extint_init+0x60>)
    34f8:	0019      	movs	r1, r3
    34fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    34fc:	2200      	movs	r2, #0
    34fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3500:	4299      	cmp	r1, r3
    3502:	d1fc      	bne.n	34fe <_system_extint_init+0x3a>
    3504:	2210      	movs	r2, #16
    3506:	4b08      	ldr	r3, [pc, #32]	; (3528 <_system_extint_init+0x64>)
    3508:	601a      	str	r2, [r3, #0]
	_extint_enable();
    350a:	4b08      	ldr	r3, [pc, #32]	; (352c <_system_extint_init+0x68>)
    350c:	4798      	blx	r3
}
    350e:	b003      	add	sp, #12
    3510:	bd00      	pop	{pc}
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	40000400 	.word	0x40000400
    3518:	00004435 	.word	0x00004435
    351c:	000043a9 	.word	0x000043a9
    3520:	40001800 	.word	0x40001800
    3524:	20000638 	.word	0x20000638
    3528:	e000e100 	.word	0xe000e100
    352c:	000034ad 	.word	0x000034ad

00003530 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3530:	2300      	movs	r3, #0
    3532:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3534:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3536:	2201      	movs	r2, #1
    3538:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    353a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    353c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    353e:	3302      	adds	r3, #2
    3540:	72c3      	strb	r3, [r0, #11]
}
    3542:	4770      	bx	lr

00003544 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3544:	b5f0      	push	{r4, r5, r6, r7, lr}
    3546:	b083      	sub	sp, #12
    3548:	0005      	movs	r5, r0
    354a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    354c:	a901      	add	r1, sp, #4
    354e:	2300      	movs	r3, #0
    3550:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3552:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3554:	7923      	ldrb	r3, [r4, #4]
    3556:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3558:	7a23      	ldrb	r3, [r4, #8]
    355a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    355c:	7820      	ldrb	r0, [r4, #0]
    355e:	4b15      	ldr	r3, [pc, #84]	; (35b4 <extint_chan_set_config+0x70>)
    3560:	4798      	blx	r3
		return NULL;
    3562:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    3564:	2d1f      	cmp	r5, #31
    3566:	d800      	bhi.n	356a <extint_chan_set_config+0x26>
		return eics[eic_index];
    3568:	4813      	ldr	r0, [pc, #76]	; (35b8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    356a:	2207      	movs	r2, #7
    356c:	402a      	ands	r2, r5
    356e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3570:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3572:	7aa3      	ldrb	r3, [r4, #10]
    3574:	2b00      	cmp	r3, #0
    3576:	d001      	beq.n	357c <extint_chan_set_config+0x38>
    3578:	2308      	movs	r3, #8
    357a:	431f      	orrs	r7, r3
    357c:	08eb      	lsrs	r3, r5, #3
    357e:	009b      	lsls	r3, r3, #2
    3580:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3582:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3584:	260f      	movs	r6, #15
    3586:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    3588:	43b1      	bics	r1, r6
			(new_config << config_pos);
    358a:	4097      	lsls	r7, r2
    358c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    358e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    3590:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3592:	7a63      	ldrb	r3, [r4, #9]
    3594:	2b00      	cmp	r3, #0
    3596:	d106      	bne.n	35a6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    3598:	6943      	ldr	r3, [r0, #20]
    359a:	2201      	movs	r2, #1
    359c:	40aa      	lsls	r2, r5
    359e:	4393      	bics	r3, r2
    35a0:	6143      	str	r3, [r0, #20]
	}
}
    35a2:	b003      	add	sp, #12
    35a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    35a6:	6942      	ldr	r2, [r0, #20]
    35a8:	2301      	movs	r3, #1
    35aa:	40ab      	lsls	r3, r5
    35ac:	4313      	orrs	r3, r2
    35ae:	6143      	str	r3, [r0, #20]
    35b0:	e7f7      	b.n	35a2 <extint_chan_set_config+0x5e>
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	0000452d 	.word	0x0000452d
    35b8:	40001800 	.word	0x40001800

000035bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    35bc:	b500      	push	{lr}
    35be:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    35c0:	ab01      	add	r3, sp, #4
    35c2:	2280      	movs	r2, #128	; 0x80
    35c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    35c6:	780a      	ldrb	r2, [r1, #0]
    35c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    35ca:	784a      	ldrb	r2, [r1, #1]
    35cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    35ce:	788a      	ldrb	r2, [r1, #2]
    35d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    35d2:	0019      	movs	r1, r3
    35d4:	4b01      	ldr	r3, [pc, #4]	; (35dc <port_pin_set_config+0x20>)
    35d6:	4798      	blx	r3
}
    35d8:	b003      	add	sp, #12
    35da:	bd00      	pop	{pc}
    35dc:	0000452d 	.word	0x0000452d

000035e0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    35e0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    35e2:	2207      	movs	r2, #7
    35e4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    35e6:	421a      	tst	r2, r3
    35e8:	d1fc      	bne.n	35e4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    35ea:	4770      	bx	lr

000035ec <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    35ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ee:	46c6      	mov	lr, r8
    35f0:	b500      	push	{lr}
    35f2:	b082      	sub	sp, #8
    35f4:	0007      	movs	r7, r0
    35f6:	000d      	movs	r5, r1
    35f8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    35fa:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    35fc:	0008      	movs	r0, r1
    35fe:	4b67      	ldr	r3, [pc, #412]	; (379c <i2c_master_init+0x1b0>)
    3600:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    3602:	4a67      	ldr	r2, [pc, #412]	; (37a0 <i2c_master_init+0x1b4>)
    3604:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3606:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3608:	2301      	movs	r3, #1
    360a:	40a3      	lsls	r3, r4
    360c:	430b      	orrs	r3, r1
    360e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3610:	a901      	add	r1, sp, #4
    3612:	7b33      	ldrb	r3, [r6, #12]
    3614:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3616:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3618:	b2c4      	uxtb	r4, r0
    361a:	0020      	movs	r0, r4
    361c:	4b61      	ldr	r3, [pc, #388]	; (37a4 <i2c_master_init+0x1b8>)
    361e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3620:	0020      	movs	r0, r4
    3622:	4b61      	ldr	r3, [pc, #388]	; (37a8 <i2c_master_init+0x1bc>)
    3624:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3626:	7b30      	ldrb	r0, [r6, #12]
    3628:	2100      	movs	r1, #0
    362a:	4b60      	ldr	r3, [pc, #384]	; (37ac <i2c_master_init+0x1c0>)
    362c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    362e:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    3630:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3632:	079b      	lsls	r3, r3, #30
    3634:	d503      	bpl.n	363e <i2c_master_init+0x52>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    3636:	b002      	add	sp, #8
    3638:	bc04      	pop	{r2}
    363a:	4690      	mov	r8, r2
    363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    363e:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    3640:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3642:	07db      	lsls	r3, r3, #31
    3644:	d4f7      	bmi.n	3636 <i2c_master_init+0x4a>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3646:	6838      	ldr	r0, [r7, #0]
    3648:	4b54      	ldr	r3, [pc, #336]	; (379c <i2c_master_init+0x1b0>)
    364a:	4698      	mov	r8, r3
    364c:	4798      	blx	r3
    364e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3650:	4957      	ldr	r1, [pc, #348]	; (37b0 <i2c_master_init+0x1c4>)
    3652:	4b58      	ldr	r3, [pc, #352]	; (37b4 <i2c_master_init+0x1c8>)
    3654:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3656:	00a4      	lsls	r4, r4, #2
    3658:	4b57      	ldr	r3, [pc, #348]	; (37b8 <i2c_master_init+0x1cc>)
    365a:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    365c:	2300      	movs	r3, #0
    365e:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    3660:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    3662:	2400      	movs	r4, #0
    3664:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    3666:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    3668:	2225      	movs	r2, #37	; 0x25
    366a:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
    366c:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    366e:	3314      	adds	r3, #20
    3670:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3672:	683d      	ldr	r5, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3674:	0028      	movs	r0, r5
    3676:	47c0      	blx	r8
    3678:	2380      	movs	r3, #128	; 0x80
    367a:	466a      	mov	r2, sp
    367c:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    367e:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3680:	2301      	movs	r3, #1
    3682:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    3684:	70d4      	strb	r4, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    3686:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    3688:	6a34      	ldr	r4, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    368a:	2800      	cmp	r0, #0
    368c:	d070      	beq.n	3770 <i2c_master_init+0x184>
	pin_conf.mux_position = pad0 & 0xFFFF;
    368e:	466b      	mov	r3, sp
    3690:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3692:	2302      	movs	r3, #2
    3694:	466a      	mov	r2, sp
    3696:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3698:	0c00      	lsrs	r0, r0, #16
    369a:	b2c0      	uxtb	r0, r0
    369c:	4669      	mov	r1, sp
    369e:	4b47      	ldr	r3, [pc, #284]	; (37bc <i2c_master_init+0x1d0>)
    36a0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    36a2:	2c00      	cmp	r4, #0
    36a4:	d069      	beq.n	377a <i2c_master_init+0x18e>
	pin_conf.mux_position = pad1 & 0xFFFF;
    36a6:	466b      	mov	r3, sp
    36a8:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    36aa:	2302      	movs	r3, #2
    36ac:	466a      	mov	r2, sp
    36ae:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    36b0:	0c24      	lsrs	r4, r4, #16
    36b2:	b2e0      	uxtb	r0, r4
    36b4:	4669      	mov	r1, sp
    36b6:	4b41      	ldr	r3, [pc, #260]	; (37bc <i2c_master_init+0x1d0>)
    36b8:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    36ba:	8ab3      	ldrh	r3, [r6, #20]
    36bc:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    36be:	8af3      	ldrh	r3, [r6, #22]
    36c0:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    36c2:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    36c4:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    36c6:	2b00      	cmp	r3, #0
    36c8:	d104      	bne.n	36d4 <i2c_master_init+0xe8>
    36ca:	4b3d      	ldr	r3, [pc, #244]	; (37c0 <i2c_master_init+0x1d4>)
    36cc:	789b      	ldrb	r3, [r3, #2]
    36ce:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    36d0:	0fdb      	lsrs	r3, r3, #31
    36d2:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    36d4:	6933      	ldr	r3, [r6, #16]
    36d6:	68b1      	ldr	r1, [r6, #8]
    36d8:	430b      	orrs	r3, r1
    36da:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    36dc:	2224      	movs	r2, #36	; 0x24
    36de:	5cb2      	ldrb	r2, [r6, r2]
    36e0:	2a00      	cmp	r2, #0
    36e2:	d002      	beq.n	36ea <i2c_master_init+0xfe>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    36e4:	2280      	movs	r2, #128	; 0x80
    36e6:	05d2      	lsls	r2, r2, #23
    36e8:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    36ea:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    36ec:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit) {
    36ee:	222c      	movs	r2, #44	; 0x2c
    36f0:	5cb2      	ldrb	r2, [r6, r2]
    36f2:	2a00      	cmp	r2, #0
    36f4:	d002      	beq.n	36fc <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    36f6:	2280      	movs	r2, #128	; 0x80
    36f8:	0512      	lsls	r2, r2, #20
    36fa:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    36fc:	222d      	movs	r2, #45	; 0x2d
    36fe:	5cb2      	ldrb	r2, [r6, r2]
    3700:	2a00      	cmp	r2, #0
    3702:	d002      	beq.n	370a <i2c_master_init+0x11e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3704:	2280      	movs	r2, #128	; 0x80
    3706:	0412      	lsls	r2, r2, #16
    3708:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    370a:	222e      	movs	r2, #46	; 0x2e
    370c:	5cb2      	ldrb	r2, [r6, r2]
    370e:	2a00      	cmp	r2, #0
    3710:	d002      	beq.n	3718 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3712:	2280      	movs	r2, #128	; 0x80
    3714:	03d2      	lsls	r2, r2, #15
    3716:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3718:	682a      	ldr	r2, [r5, #0]
    371a:	4313      	orrs	r3, r2
    371c:	602b      	str	r3, [r5, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    371e:	2380      	movs	r3, #128	; 0x80
    3720:	005b      	lsls	r3, r3, #1
    3722:	606b      	str	r3, [r5, #4]
	uint32_t fscl        = 1000*config->baud_rate;
    3724:	27fa      	movs	r7, #250	; 0xfa
    3726:	00bf      	lsls	r7, r7, #2
    3728:	6833      	ldr	r3, [r6, #0]
    372a:	435f      	muls	r7, r3
	int32_t  denominator = 2*fscl;
    372c:	007b      	lsls	r3, r7, #1
    372e:	4698      	mov	r8, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3730:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    3732:	4c24      	ldr	r4, [pc, #144]	; (37c4 <i2c_master_init+0x1d8>)
    3734:	4360      	muls	r0, r4
    3736:	4924      	ldr	r1, [pc, #144]	; (37c8 <i2c_master_init+0x1dc>)
    3738:	4b24      	ldr	r3, [pc, #144]	; (37cc <i2c_master_init+0x1e0>)
    373a:	4798      	blx	r3
    373c:	300a      	adds	r0, #10
    373e:	4378      	muls	r0, r7
    3740:	1a20      	subs	r0, r4, r0
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    3742:	4440      	add	r0, r8
    3744:	3801      	subs	r0, #1
    3746:	4641      	mov	r1, r8
    3748:	4b21      	ldr	r3, [pc, #132]	; (37d0 <i2c_master_init+0x1e4>)
    374a:	4798      	blx	r3
    374c:	0004      	movs	r4, r0
	if (tmp_baud > 255 || tmp_baud < 0) {
    374e:	2040      	movs	r0, #64	; 0x40
    3750:	2cff      	cmp	r4, #255	; 0xff
    3752:	d900      	bls.n	3756 <i2c_master_init+0x16a>
    3754:	e76f      	b.n	3636 <i2c_master_init+0x4a>
		tmp_baud_hs = (int32_t)(div_ceil(
    3756:	6873      	ldr	r3, [r6, #4]
    3758:	21fa      	movs	r1, #250	; 0xfa
    375a:	00c9      	lsls	r1, r1, #3
    375c:	4359      	muls	r1, r3
    375e:	4b1d      	ldr	r3, [pc, #116]	; (37d4 <i2c_master_init+0x1e8>)
    3760:	18c8      	adds	r0, r1, r3
    3762:	4b1a      	ldr	r3, [pc, #104]	; (37cc <i2c_master_init+0x1e0>)
    3764:	4798      	blx	r3
				(2000*(config->baud_rate_high_speed))) - 1);
    3766:	3801      	subs	r0, #1
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3768:	28ff      	cmp	r0, #255	; 0xff
    376a:	d90c      	bls.n	3786 <i2c_master_init+0x19a>
    376c:	2040      	movs	r0, #64	; 0x40
    376e:	e762      	b.n	3636 <i2c_master_init+0x4a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3770:	2100      	movs	r1, #0
    3772:	0028      	movs	r0, r5
    3774:	4b18      	ldr	r3, [pc, #96]	; (37d8 <i2c_master_init+0x1ec>)
    3776:	4798      	blx	r3
    3778:	e789      	b.n	368e <i2c_master_init+0xa2>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    377a:	2101      	movs	r1, #1
    377c:	0028      	movs	r0, r5
    377e:	4b16      	ldr	r3, [pc, #88]	; (37d8 <i2c_master_init+0x1ec>)
    3780:	4798      	blx	r3
    3782:	0004      	movs	r4, r0
    3784:	e78f      	b.n	36a6 <i2c_master_init+0xba>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    3786:	0400      	lsls	r0, r0, #16
    3788:	23ff      	movs	r3, #255	; 0xff
    378a:	041b      	lsls	r3, r3, #16
    378c:	4018      	ands	r0, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    378e:	23ff      	movs	r3, #255	; 0xff
    3790:	4023      	ands	r3, r4
    3792:	4318      	orrs	r0, r3
    3794:	60e8      	str	r0, [r5, #12]
	enum status_code tmp_status_code = STATUS_OK;
    3796:	2000      	movs	r0, #0
    3798:	e74d      	b.n	3636 <i2c_master_init+0x4a>
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	00004191 	.word	0x00004191
    37a0:	40000400 	.word	0x40000400
    37a4:	00004435 	.word	0x00004435
    37a8:	000043a9 	.word	0x000043a9
    37ac:	00003fcd 	.word	0x00003fcd
    37b0:	00003be9 	.word	0x00003be9
    37b4:	000041cd 	.word	0x000041cd
    37b8:	20000678 	.word	0x20000678
    37bc:	0000452d 	.word	0x0000452d
    37c0:	41002000 	.word	0x41002000
    37c4:	02dc6c00 	.word	0x02dc6c00
    37c8:	3b9aca00 	.word	0x3b9aca00
    37cc:	00008d29 	.word	0x00008d29
    37d0:	00008e3d 	.word	0x00008e3d
    37d4:	02dc6bff 	.word	0x02dc6bff
    37d8:	00004019 	.word	0x00004019

000037dc <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    37dc:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    37de:	7e1a      	ldrb	r2, [r3, #24]
    37e0:	0792      	lsls	r2, r2, #30
    37e2:	d507      	bpl.n	37f4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    37e4:	2202      	movs	r2, #2
    37e6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    37e8:	8b5b      	ldrh	r3, [r3, #26]
    37ea:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    37ec:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    37ee:	17db      	asrs	r3, r3, #31
    37f0:	4018      	ands	r0, r3
}
    37f2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    37f4:	8b5a      	ldrh	r2, [r3, #26]
    37f6:	0752      	lsls	r2, r2, #29
    37f8:	d506      	bpl.n	3808 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    37fa:	6859      	ldr	r1, [r3, #4]
    37fc:	22c0      	movs	r2, #192	; 0xc0
    37fe:	0292      	lsls	r2, r2, #10
    3800:	430a      	orrs	r2, r1
    3802:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    3804:	2018      	movs	r0, #24
    3806:	e7f4      	b.n	37f2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    3808:	2000      	movs	r0, #0
    380a:	e7f2      	b.n	37f2 <_i2c_master_address_response+0x16>

0000380c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    380c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    380e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3810:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3812:	2401      	movs	r4, #1
    3814:	2502      	movs	r5, #2
    3816:	7e11      	ldrb	r1, [r2, #24]
    3818:	4221      	tst	r1, r4
    381a:	d10b      	bne.n	3834 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    381c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    381e:	4229      	tst	r1, r5
    3820:	d106      	bne.n	3830 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3822:	3301      	adds	r3, #1
    3824:	b29b      	uxth	r3, r3
    3826:	8901      	ldrh	r1, [r0, #8]
    3828:	4299      	cmp	r1, r3
    382a:	d8f4      	bhi.n	3816 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    382c:	2012      	movs	r0, #18
    382e:	e002      	b.n	3836 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    3830:	2000      	movs	r0, #0
    3832:	e000      	b.n	3836 <_i2c_master_wait_for_bus+0x2a>
    3834:	2000      	movs	r0, #0
}
    3836:	bd30      	pop	{r4, r5, pc}

00003838 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3838:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    383a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    383c:	6862      	ldr	r2, [r4, #4]
    383e:	2380      	movs	r3, #128	; 0x80
    3840:	02db      	lsls	r3, r3, #11
    3842:	4313      	orrs	r3, r2
    3844:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3846:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3848:	4b02      	ldr	r3, [pc, #8]	; (3854 <_i2c_master_send_hs_master_code+0x1c>)
    384a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    384c:	2301      	movs	r3, #1
    384e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    3850:	bd10      	pop	{r4, pc}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	0000380d 	.word	0x0000380d

00003858 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3858:	b5f0      	push	{r4, r5, r6, r7, lr}
    385a:	46de      	mov	lr, fp
    385c:	4657      	mov	r7, sl
    385e:	464e      	mov	r6, r9
    3860:	4645      	mov	r5, r8
    3862:	b5e0      	push	{r5, r6, r7, lr}
    3864:	b083      	sub	sp, #12
    3866:	0006      	movs	r6, r0
    3868:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    386a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    386c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    386e:	682b      	ldr	r3, [r5, #0]
    3870:	011b      	lsls	r3, r3, #4
    3872:	0fdb      	lsrs	r3, r3, #31
    3874:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3876:	7a4b      	ldrb	r3, [r1, #9]
    3878:	2b00      	cmp	r3, #0
    387a:	d123      	bne.n	38c4 <_i2c_master_read_packet+0x6c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    387c:	686b      	ldr	r3, [r5, #4]
    387e:	4a51      	ldr	r2, [pc, #324]	; (39c4 <_i2c_master_read_packet+0x16c>)
    3880:	4013      	ands	r3, r2
    3882:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3884:	464b      	mov	r3, r9
    3886:	7a1b      	ldrb	r3, [r3, #8]
    3888:	2b00      	cmp	r3, #0
    388a:	d11f      	bne.n	38cc <_i2c_master_read_packet+0x74>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    388c:	464b      	mov	r3, r9
    388e:	881b      	ldrh	r3, [r3, #0]
    3890:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3892:	464a      	mov	r2, r9
    3894:	7a52      	ldrb	r2, [r2, #9]
    3896:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3898:	4313      	orrs	r3, r2
    389a:	2201      	movs	r2, #1
    389c:	4313      	orrs	r3, r2
    389e:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    38a0:	0030      	movs	r0, r6
    38a2:	4b49      	ldr	r3, [pc, #292]	; (39c8 <_i2c_master_read_packet+0x170>)
    38a4:	4798      	blx	r3
    38a6:	9001      	str	r0, [sp, #4]

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    38a8:	686b      	ldr	r3, [r5, #4]
    38aa:	4a46      	ldr	r2, [pc, #280]	; (39c4 <_i2c_master_read_packet+0x16c>)
    38ac:	4013      	ands	r3, r2
    38ae:	606b      	str	r3, [r5, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    38b0:	2800      	cmp	r0, #0
    38b2:	d034      	beq.n	391e <_i2c_master_read_packet+0xc6>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    38b4:	9801      	ldr	r0, [sp, #4]
    38b6:	b003      	add	sp, #12
    38b8:	bc3c      	pop	{r2, r3, r4, r5}
    38ba:	4690      	mov	r8, r2
    38bc:	4699      	mov	r9, r3
    38be:	46a2      	mov	sl, r4
    38c0:	46ab      	mov	fp, r5
    38c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    38c4:	7a89      	ldrb	r1, [r1, #10]
    38c6:	4b41      	ldr	r3, [pc, #260]	; (39cc <_i2c_master_read_packet+0x174>)
    38c8:	4798      	blx	r3
    38ca:	e7d7      	b.n	387c <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    38cc:	464b      	mov	r3, r9
    38ce:	881b      	ldrh	r3, [r3, #0]
    38d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38d2:	464a      	mov	r2, r9
    38d4:	7a52      	ldrb	r2, [r2, #9]
    38d6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    38d8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38da:	2280      	movs	r2, #128	; 0x80
    38dc:	0212      	lsls	r2, r2, #8
    38de:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    38e0:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    38e2:	0030      	movs	r0, r6
    38e4:	4b38      	ldr	r3, [pc, #224]	; (39c8 <_i2c_master_read_packet+0x170>)
    38e6:	4798      	blx	r3
    38e8:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    38ea:	686b      	ldr	r3, [r5, #4]
    38ec:	4a35      	ldr	r2, [pc, #212]	; (39c4 <_i2c_master_read_packet+0x16c>)
    38ee:	4013      	ands	r3, r2
    38f0:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    38f2:	2800      	cmp	r0, #0
    38f4:	d1de      	bne.n	38b4 <_i2c_master_read_packet+0x5c>
			tmp_status = _i2c_master_address_response(module);
    38f6:	0030      	movs	r0, r6
    38f8:	4b35      	ldr	r3, [pc, #212]	; (39d0 <_i2c_master_read_packet+0x178>)
    38fa:	4798      	blx	r3
    38fc:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    38fe:	2800      	cmp	r0, #0
    3900:	d1d8      	bne.n	38b4 <_i2c_master_read_packet+0x5c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3902:	464b      	mov	r3, r9
    3904:	881b      	ldrh	r3, [r3, #0]
    3906:	0a1b      	lsrs	r3, r3, #8
    3908:	2278      	movs	r2, #120	; 0x78
    390a:	4313      	orrs	r3, r2
    390c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    390e:	464a      	mov	r2, r9
    3910:	7a52      	ldrb	r2, [r2, #9]
    3912:	0392      	lsls	r2, r2, #14
    3914:	2101      	movs	r1, #1
    3916:	430a      	orrs	r2, r1
    3918:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    391a:	626b      	str	r3, [r5, #36]	; 0x24
    391c:	e7c0      	b.n	38a0 <_i2c_master_read_packet+0x48>
		tmp_status = _i2c_master_address_response(module);
    391e:	0030      	movs	r0, r6
    3920:	4b2b      	ldr	r3, [pc, #172]	; (39d0 <_i2c_master_read_packet+0x178>)
    3922:	4798      	blx	r3
    3924:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3926:	2800      	cmp	r0, #0
    3928:	d1c4      	bne.n	38b4 <_i2c_master_read_packet+0x5c>
    392a:	3c01      	subs	r4, #1
    392c:	b2a4      	uxth	r4, r4
    392e:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    3930:	4b28      	ldr	r3, [pc, #160]	; (39d4 <_i2c_master_read_packet+0x17c>)
    3932:	469b      	mov	fp, r3
    3934:	e015      	b.n	3962 <_i2c_master_read_packet+0x10a>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3936:	2c01      	cmp	r4, #1
    3938:	d020      	beq.n	397c <_i2c_master_read_packet+0x124>
				_i2c_master_wait_for_sync(module);
    393a:	0030      	movs	r0, r6
    393c:	4b26      	ldr	r3, [pc, #152]	; (39d8 <_i2c_master_read_packet+0x180>)
    393e:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3940:	4643      	mov	r3, r8
    3942:	1c5f      	adds	r7, r3, #1
    3944:	b2bf      	uxth	r7, r7
    3946:	2328      	movs	r3, #40	; 0x28
    3948:	5ceb      	ldrb	r3, [r5, r3]
    394a:	464a      	mov	r2, r9
    394c:	6852      	ldr	r2, [r2, #4]
    394e:	4641      	mov	r1, r8
    3950:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    3952:	0030      	movs	r0, r6
    3954:	4b1c      	ldr	r3, [pc, #112]	; (39c8 <_i2c_master_read_packet+0x170>)
    3956:	4798      	blx	r3
    3958:	3c01      	subs	r4, #1
    395a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    395c:	2800      	cmp	r0, #0
    395e:	d115      	bne.n	398c <_i2c_master_read_packet+0x134>
				packet->data[counter++] = i2c_module->DATA.reg;
    3960:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    3962:	455c      	cmp	r4, fp
    3964:	d014      	beq.n	3990 <_i2c_master_read_packet+0x138>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3966:	8b6b      	ldrh	r3, [r5, #26]
    3968:	069b      	lsls	r3, r3, #26
    396a:	d527      	bpl.n	39bc <_i2c_master_read_packet+0x164>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    396c:	7af3      	ldrb	r3, [r6, #11]
    396e:	2b00      	cmp	r3, #0
    3970:	d0e3      	beq.n	393a <_i2c_master_read_packet+0xe2>
    3972:	4653      	mov	r3, sl
    3974:	2b00      	cmp	r3, #0
    3976:	d1de      	bne.n	3936 <_i2c_master_read_packet+0xde>
    3978:	2c00      	cmp	r4, #0
    397a:	d1de      	bne.n	393a <_i2c_master_read_packet+0xe2>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    397c:	686a      	ldr	r2, [r5, #4]
    397e:	2380      	movs	r3, #128	; 0x80
    3980:	02db      	lsls	r3, r3, #11
    3982:	4313      	orrs	r3, r2
    3984:	606b      	str	r3, [r5, #4]
    3986:	3c01      	subs	r4, #1
    3988:	b2a4      	uxth	r4, r4
    398a:	e7ea      	b.n	3962 <_i2c_master_read_packet+0x10a>
				packet->data[counter++] = i2c_module->DATA.reg;
    398c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    398e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3990:	7ab3      	ldrb	r3, [r6, #10]
    3992:	2b00      	cmp	r3, #0
    3994:	d109      	bne.n	39aa <_i2c_master_read_packet+0x152>
		_i2c_master_wait_for_sync(module);
    3996:	0030      	movs	r0, r6
    3998:	4b0f      	ldr	r3, [pc, #60]	; (39d8 <_i2c_master_read_packet+0x180>)
    399a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    399c:	2328      	movs	r3, #40	; 0x28
    399e:	5cea      	ldrb	r2, [r5, r3]
    39a0:	464b      	mov	r3, r9
    39a2:	685b      	ldr	r3, [r3, #4]
    39a4:	4641      	mov	r1, r8
    39a6:	545a      	strb	r2, [r3, r1]
    39a8:	e784      	b.n	38b4 <_i2c_master_read_packet+0x5c>
			_i2c_master_wait_for_sync(module);
    39aa:	0030      	movs	r0, r6
    39ac:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <_i2c_master_read_packet+0x180>)
    39ae:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    39b0:	686a      	ldr	r2, [r5, #4]
    39b2:	23c0      	movs	r3, #192	; 0xc0
    39b4:	029b      	lsls	r3, r3, #10
    39b6:	4313      	orrs	r3, r2
    39b8:	606b      	str	r3, [r5, #4]
    39ba:	e7ec      	b.n	3996 <_i2c_master_read_packet+0x13e>
				return STATUS_ERR_PACKET_COLLISION;
    39bc:	2341      	movs	r3, #65	; 0x41
    39be:	9301      	str	r3, [sp, #4]
    39c0:	e778      	b.n	38b4 <_i2c_master_read_packet+0x5c>
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	fffbffff 	.word	0xfffbffff
    39c8:	0000380d 	.word	0x0000380d
    39cc:	00003839 	.word	0x00003839
    39d0:	000037dd 	.word	0x000037dd
    39d4:	0000ffff 	.word	0x0000ffff
    39d8:	000035e1 	.word	0x000035e1

000039dc <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    39dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    39de:	46de      	mov	lr, fp
    39e0:	4657      	mov	r7, sl
    39e2:	464e      	mov	r6, r9
    39e4:	4645      	mov	r5, r8
    39e6:	b5e0      	push	{r5, r6, r7, lr}
    39e8:	b083      	sub	sp, #12
    39ea:	0006      	movs	r6, r0
    39ec:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    39ee:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    39f0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    39f2:	4b32      	ldr	r3, [pc, #200]	; (3abc <_i2c_master_write_packet+0xe0>)
    39f4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    39f6:	7a7b      	ldrb	r3, [r7, #9]
    39f8:	2b00      	cmp	r3, #0
    39fa:	d11d      	bne.n	3a38 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    39fc:	686b      	ldr	r3, [r5, #4]
    39fe:	4a30      	ldr	r2, [pc, #192]	; (3ac0 <_i2c_master_write_packet+0xe4>)
    3a00:	4013      	ands	r3, r2
    3a02:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3a04:	7a3b      	ldrb	r3, [r7, #8]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d01b      	beq.n	3a42 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a0a:	883b      	ldrh	r3, [r7, #0]
    3a0c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a0e:	7a7a      	ldrb	r2, [r7, #9]
    3a10:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a12:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a14:	2280      	movs	r2, #128	; 0x80
    3a16:	0212      	lsls	r2, r2, #8
    3a18:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a1a:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a1c:	0030      	movs	r0, r6
    3a1e:	4b29      	ldr	r3, [pc, #164]	; (3ac4 <_i2c_master_write_packet+0xe8>)
    3a20:	4798      	blx	r3
    3a22:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a24:	2800      	cmp	r0, #0
    3a26:	d013      	beq.n	3a50 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    3a28:	9801      	ldr	r0, [sp, #4]
    3a2a:	b003      	add	sp, #12
    3a2c:	bc3c      	pop	{r2, r3, r4, r5}
    3a2e:	4690      	mov	r8, r2
    3a30:	4699      	mov	r9, r3
    3a32:	46a2      	mov	sl, r4
    3a34:	46ab      	mov	fp, r5
    3a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3a38:	7ab9      	ldrb	r1, [r7, #10]
    3a3a:	0030      	movs	r0, r6
    3a3c:	4b22      	ldr	r3, [pc, #136]	; (3ac8 <_i2c_master_write_packet+0xec>)
    3a3e:	4798      	blx	r3
    3a40:	e7dc      	b.n	39fc <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a42:	883b      	ldrh	r3, [r7, #0]
    3a44:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a46:	7a7a      	ldrb	r2, [r7, #9]
    3a48:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a4a:	4313      	orrs	r3, r2
    3a4c:	626b      	str	r3, [r5, #36]	; 0x24
    3a4e:	e7e5      	b.n	3a1c <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    3a50:	0030      	movs	r0, r6
    3a52:	4b1e      	ldr	r3, [pc, #120]	; (3acc <_i2c_master_write_packet+0xf0>)
    3a54:	4798      	blx	r3
    3a56:	1e03      	subs	r3, r0, #0
    3a58:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3a5a:	d1e5      	bne.n	3a28 <_i2c_master_write_packet+0x4c>
    3a5c:	46a0      	mov	r8, r4
    3a5e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3a60:	3320      	adds	r3, #32
    3a62:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    3a64:	4b15      	ldr	r3, [pc, #84]	; (3abc <_i2c_master_write_packet+0xe0>)
    3a66:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    3a68:	4b16      	ldr	r3, [pc, #88]	; (3ac4 <_i2c_master_write_packet+0xe8>)
    3a6a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    3a6c:	4544      	cmp	r4, r8
    3a6e:	d015      	beq.n	3a9c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3a70:	8b6b      	ldrh	r3, [r5, #26]
    3a72:	464a      	mov	r2, r9
    3a74:	4213      	tst	r3, r2
    3a76:	d01d      	beq.n	3ab4 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    3a78:	0030      	movs	r0, r6
    3a7a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	5d1a      	ldrb	r2, [r3, r4]
    3a80:	2328      	movs	r3, #40	; 0x28
    3a82:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    3a84:	0030      	movs	r0, r6
    3a86:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    3a88:	2800      	cmp	r0, #0
    3a8a:	d106      	bne.n	3a9a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3a8c:	8b6b      	ldrh	r3, [r5, #26]
    3a8e:	3401      	adds	r4, #1
    3a90:	075b      	lsls	r3, r3, #29
    3a92:	d5eb      	bpl.n	3a6c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    3a94:	231e      	movs	r3, #30
    3a96:	9301      	str	r3, [sp, #4]
    3a98:	e000      	b.n	3a9c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    3a9a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3a9c:	7ab3      	ldrb	r3, [r6, #10]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d0c2      	beq.n	3a28 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    3aa2:	0030      	movs	r0, r6
    3aa4:	4b05      	ldr	r3, [pc, #20]	; (3abc <_i2c_master_write_packet+0xe0>)
    3aa6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3aa8:	686a      	ldr	r2, [r5, #4]
    3aaa:	23c0      	movs	r3, #192	; 0xc0
    3aac:	029b      	lsls	r3, r3, #10
    3aae:	4313      	orrs	r3, r2
    3ab0:	606b      	str	r3, [r5, #4]
    3ab2:	e7b9      	b.n	3a28 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    3ab4:	2341      	movs	r3, #65	; 0x41
    3ab6:	9301      	str	r3, [sp, #4]
    3ab8:	e7b6      	b.n	3a28 <_i2c_master_write_packet+0x4c>
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	000035e1 	.word	0x000035e1
    3ac0:	fffbffff 	.word	0xfffbffff
    3ac4:	0000380d 	.word	0x0000380d
    3ac8:	00003839 	.word	0x00003839
    3acc:	000037dd 	.word	0x000037dd

00003ad0 <i2c_master_read_packet_wait_no_stop>:
{
    3ad0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    3ad2:	8b83      	ldrh	r3, [r0, #28]
    3ad4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3ad6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d001      	beq.n	3ae0 <i2c_master_read_packet_wait_no_stop+0x10>
}
    3adc:	0010      	movs	r0, r2
    3ade:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    3ae0:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3ae2:	3301      	adds	r3, #1
    3ae4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    3ae6:	4b02      	ldr	r3, [pc, #8]	; (3af0 <i2c_master_read_packet_wait_no_stop+0x20>)
    3ae8:	4798      	blx	r3
    3aea:	0002      	movs	r2, r0
    3aec:	e7f6      	b.n	3adc <i2c_master_read_packet_wait_no_stop+0xc>
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	00003859 	.word	0x00003859

00003af4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3af4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3af6:	8b83      	ldrh	r3, [r0, #28]
    3af8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3afa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    3afc:	2b00      	cmp	r3, #0
    3afe:	d001      	beq.n	3b04 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    3b00:	0010      	movs	r0, r2
    3b02:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    3b04:	3301      	adds	r3, #1
    3b06:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3b08:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    3b0a:	4b02      	ldr	r3, [pc, #8]	; (3b14 <i2c_master_write_packet_wait+0x20>)
    3b0c:	4798      	blx	r3
    3b0e:	0002      	movs	r2, r0
    3b10:	e7f6      	b.n	3b00 <i2c_master_write_packet_wait+0xc>
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	000039dd 	.word	0x000039dd

00003b18 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3b18:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3b1a:	2207      	movs	r2, #7
    3b1c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    3b1e:	421a      	tst	r2, r3
    3b20:	d1fc      	bne.n	3b1c <_i2c_master_wait_for_sync+0x4>
}
    3b22:	4770      	bx	lr

00003b24 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3b24:	b570      	push	{r4, r5, r6, lr}
    3b26:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b28:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3b2a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3b2c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3b2e:	8b83      	ldrh	r3, [r0, #28]
    3b30:	1aed      	subs	r5, r5, r3
    3b32:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    3b34:	8b83      	ldrh	r3, [r0, #28]
    3b36:	3b01      	subs	r3, #1
    3b38:	b29b      	uxth	r3, r3
    3b3a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    3b3c:	0113      	lsls	r3, r2, #4
    3b3e:	d51d      	bpl.n	3b7c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    3b40:	7ac3      	ldrb	r3, [r0, #11]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d003      	beq.n	3b4e <_i2c_master_read+0x2a>
    3b46:	8b83      	ldrh	r3, [r0, #28]
    3b48:	b29b      	uxth	r3, r3
    3b4a:	2b01      	cmp	r3, #1
    3b4c:	d010      	beq.n	3b70 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    3b4e:	8ba3      	ldrh	r3, [r4, #28]
    3b50:	b29b      	uxth	r3, r3
    3b52:	2b00      	cmp	r3, #0
    3b54:	d102      	bne.n	3b5c <_i2c_master_read+0x38>
		if (module->send_stop) {
    3b56:	7aa3      	ldrb	r3, [r4, #10]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	d11c      	bne.n	3b96 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3b5c:	0020      	movs	r0, r4
    3b5e:	4b12      	ldr	r3, [pc, #72]	; (3ba8 <_i2c_master_read+0x84>)
    3b60:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3b62:	6a23      	ldr	r3, [r4, #32]
    3b64:	195d      	adds	r5, r3, r5
    3b66:	2328      	movs	r3, #40	; 0x28
    3b68:	5cf3      	ldrb	r3, [r6, r3]
    3b6a:	b2db      	uxtb	r3, r3
    3b6c:	702b      	strb	r3, [r5, #0]
}
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b70:	6872      	ldr	r2, [r6, #4]
    3b72:	2380      	movs	r3, #128	; 0x80
    3b74:	02db      	lsls	r3, r3, #11
    3b76:	4313      	orrs	r3, r2
    3b78:	6073      	str	r3, [r6, #4]
    3b7a:	e7e8      	b.n	3b4e <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    3b7c:	7ac3      	ldrb	r3, [r0, #11]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d0e5      	beq.n	3b4e <_i2c_master_read+0x2a>
    3b82:	8b83      	ldrh	r3, [r0, #28]
    3b84:	b29b      	uxth	r3, r3
    3b86:	2b00      	cmp	r3, #0
    3b88:	d1e1      	bne.n	3b4e <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b8a:	6872      	ldr	r2, [r6, #4]
    3b8c:	2380      	movs	r3, #128	; 0x80
    3b8e:	02db      	lsls	r3, r3, #11
    3b90:	4313      	orrs	r3, r2
    3b92:	6073      	str	r3, [r6, #4]
    3b94:	e7db      	b.n	3b4e <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    3b96:	0020      	movs	r0, r4
    3b98:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <_i2c_master_read+0x84>)
    3b9a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3b9c:	6872      	ldr	r2, [r6, #4]
    3b9e:	23c0      	movs	r3, #192	; 0xc0
    3ba0:	029b      	lsls	r3, r3, #10
    3ba2:	4313      	orrs	r3, r2
    3ba4:	6073      	str	r3, [r6, #4]
    3ba6:	e7d9      	b.n	3b5c <_i2c_master_read+0x38>
    3ba8:	00003b19 	.word	0x00003b19

00003bac <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3bac:	b570      	push	{r4, r5, r6, lr}
    3bae:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3bb0:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3bb2:	8b6b      	ldrh	r3, [r5, #26]
    3bb4:	075b      	lsls	r3, r3, #29
    3bb6:	d503      	bpl.n	3bc0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3bb8:	221e      	movs	r2, #30
    3bba:	2325      	movs	r3, #37	; 0x25
    3bbc:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    3bbe:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    3bc0:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3bc2:	8b83      	ldrh	r3, [r0, #28]
    3bc4:	1af6      	subs	r6, r6, r3
    3bc6:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    3bc8:	8b83      	ldrh	r3, [r0, #28]
    3bca:	3b01      	subs	r3, #1
    3bcc:	b29b      	uxth	r3, r3
    3bce:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    3bd0:	4b04      	ldr	r3, [pc, #16]	; (3be4 <_i2c_master_write+0x38>)
    3bd2:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3bd4:	6a23      	ldr	r3, [r4, #32]
    3bd6:	199e      	adds	r6, r3, r6
    3bd8:	7833      	ldrb	r3, [r6, #0]
    3bda:	b2db      	uxtb	r3, r3
    3bdc:	2228      	movs	r2, #40	; 0x28
    3bde:	54ab      	strb	r3, [r5, r2]
    3be0:	e7ed      	b.n	3bbe <_i2c_master_write+0x12>
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	00003b19 	.word	0x00003b19

00003be8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    3be8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    3bea:	0080      	lsls	r0, r0, #2
    3bec:	4b75      	ldr	r3, [pc, #468]	; (3dc4 <_i2c_master_interrupt_handler+0x1dc>)
    3bee:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3bf0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3bf2:	682b      	ldr	r3, [r5, #0]
    3bf4:	011b      	lsls	r3, r3, #4
    3bf6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    3bf8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    3bfa:	7e26      	ldrb	r6, [r4, #24]
    3bfc:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    3bfe:	8b63      	ldrh	r3, [r4, #26]
    3c00:	b29b      	uxth	r3, r3
    3c02:	2b00      	cmp	r3, #0
    3c04:	d103      	bne.n	3c0e <_i2c_master_interrupt_handler+0x26>
    3c06:	8ba3      	ldrh	r3, [r4, #28]
    3c08:	b29b      	uxth	r3, r3
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d123      	bne.n	3c56 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3c0e:	8b63      	ldrh	r3, [r4, #26]
    3c10:	b29b      	uxth	r3, r3
    3c12:	2b00      	cmp	r3, #0
    3c14:	d008      	beq.n	3c28 <_i2c_master_interrupt_handler+0x40>
    3c16:	8ba3      	ldrh	r3, [r4, #28]
    3c18:	b29b      	uxth	r3, r3
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	d104      	bne.n	3c28 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    3c1e:	3325      	adds	r3, #37	; 0x25
    3c20:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3c22:	2b05      	cmp	r3, #5
    3c24:	d100      	bne.n	3c28 <_i2c_master_interrupt_handler+0x40>
    3c26:	e06d      	b.n	3d04 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    3c28:	8b63      	ldrh	r3, [r4, #26]
    3c2a:	b29b      	uxth	r3, r3
    3c2c:	2b00      	cmp	r3, #0
    3c2e:	d024      	beq.n	3c7a <_i2c_master_interrupt_handler+0x92>
    3c30:	8ba3      	ldrh	r3, [r4, #28]
    3c32:	b29b      	uxth	r3, r3
    3c34:	2b00      	cmp	r3, #0
    3c36:	d020      	beq.n	3c7a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3c38:	8b6b      	ldrh	r3, [r5, #26]
    3c3a:	069b      	lsls	r3, r3, #26
    3c3c:	d500      	bpl.n	3c40 <_i2c_master_interrupt_handler+0x58>
    3c3e:	e081      	b.n	3d44 <_i2c_master_interrupt_handler+0x15c>
    3c40:	2a00      	cmp	r2, #0
    3c42:	d004      	beq.n	3c4e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3c44:	8ba3      	ldrh	r3, [r4, #28]
    3c46:	b29b      	uxth	r3, r3
    3c48:	2b01      	cmp	r3, #1
    3c4a:	d100      	bne.n	3c4e <_i2c_master_interrupt_handler+0x66>
    3c4c:	e07a      	b.n	3d44 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3c4e:	2241      	movs	r2, #65	; 0x41
    3c50:	2325      	movs	r3, #37	; 0x25
    3c52:	54e2      	strb	r2, [r4, r3]
    3c54:	e011      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3c56:	7e2b      	ldrb	r3, [r5, #24]
    3c58:	07db      	lsls	r3, r3, #31
    3c5a:	d533      	bpl.n	3cc4 <_i2c_master_interrupt_handler+0xdc>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3c5c:	2301      	movs	r3, #1
    3c5e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3c60:	8b6b      	ldrh	r3, [r5, #26]
    3c62:	079b      	lsls	r3, r3, #30
    3c64:	d502      	bpl.n	3c6c <_i2c_master_interrupt_handler+0x84>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3c66:	2241      	movs	r2, #65	; 0x41
    3c68:	2325      	movs	r3, #37	; 0x25
    3c6a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    3c6c:	8ba3      	ldrh	r3, [r4, #28]
    3c6e:	b29b      	uxth	r3, r3
    3c70:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    3c72:	2325      	movs	r3, #37	; 0x25
    3c74:	5ce3      	ldrb	r3, [r4, r3]
    3c76:	2b05      	cmp	r3, #5
    3c78:	d038      	beq.n	3cec <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3c7a:	8b63      	ldrh	r3, [r4, #26]
    3c7c:	b29b      	uxth	r3, r3
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d007      	beq.n	3c92 <_i2c_master_interrupt_handler+0xaa>
    3c82:	8ba3      	ldrh	r3, [r4, #28]
    3c84:	b29b      	uxth	r3, r3
    3c86:	2b00      	cmp	r3, #0
    3c88:	d103      	bne.n	3c92 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    3c8a:	3325      	adds	r3, #37	; 0x25
    3c8c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3c8e:	2b05      	cmp	r3, #5
    3c90:	d064      	beq.n	3d5c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    3c92:	2325      	movs	r3, #37	; 0x25
    3c94:	5ce3      	ldrb	r3, [r4, r3]
    3c96:	2b05      	cmp	r3, #5
    3c98:	d013      	beq.n	3cc2 <_i2c_master_interrupt_handler+0xda>
    3c9a:	2325      	movs	r3, #37	; 0x25
    3c9c:	5ce3      	ldrb	r3, [r4, r3]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d00f      	beq.n	3cc2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    3ca2:	2303      	movs	r3, #3
    3ca4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3ca6:	2300      	movs	r3, #0
    3ca8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    3caa:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3cac:	3325      	adds	r3, #37	; 0x25
    3cae:	5ce3      	ldrb	r3, [r4, r3]
    3cb0:	2b41      	cmp	r3, #65	; 0x41
    3cb2:	d003      	beq.n	3cbc <_i2c_master_interrupt_handler+0xd4>
    3cb4:	7aa3      	ldrb	r3, [r4, #10]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d000      	beq.n	3cbc <_i2c_master_interrupt_handler+0xd4>
    3cba:	e075      	b.n	3da8 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    3cbc:	0773      	lsls	r3, r6, #29
    3cbe:	d500      	bpl.n	3cc2 <_i2c_master_interrupt_handler+0xda>
    3cc0:	e07b      	b.n	3dba <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3cc4:	8b6b      	ldrh	r3, [r5, #26]
    3cc6:	075b      	lsls	r3, r3, #29
    3cc8:	d5d0      	bpl.n	3c6c <_i2c_master_interrupt_handler+0x84>
		module->status           = STATUS_ERR_BAD_ADDRESS;
    3cca:	2218      	movs	r2, #24
    3ccc:	2325      	movs	r3, #37	; 0x25
    3cce:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
    3cd0:	2300      	movs	r3, #0
    3cd2:	83a3      	strh	r3, [r4, #28]
		if (module->send_stop) {
    3cd4:	7aa3      	ldrb	r3, [r4, #10]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d0c8      	beq.n	3c6c <_i2c_master_interrupt_handler+0x84>
			_i2c_master_wait_for_sync(module);
    3cda:	0020      	movs	r0, r4
    3cdc:	4b3a      	ldr	r3, [pc, #232]	; (3dc8 <_i2c_master_interrupt_handler+0x1e0>)
    3cde:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3ce0:	686a      	ldr	r2, [r5, #4]
    3ce2:	23c0      	movs	r3, #192	; 0xc0
    3ce4:	029b      	lsls	r3, r3, #10
    3ce6:	4313      	orrs	r3, r2
    3ce8:	606b      	str	r3, [r5, #4]
    3cea:	e7bf      	b.n	3c6c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3cec:	331f      	adds	r3, #31
    3cee:	5ce3      	ldrb	r3, [r4, r3]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d003      	beq.n	3cfc <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    3cf4:	0020      	movs	r0, r4
    3cf6:	4b35      	ldr	r3, [pc, #212]	; (3dcc <_i2c_master_interrupt_handler+0x1e4>)
    3cf8:	4798      	blx	r3
    3cfa:	e7be      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    3cfc:	0020      	movs	r0, r4
    3cfe:	4b34      	ldr	r3, [pc, #208]	; (3dd0 <_i2c_master_interrupt_handler+0x1e8>)
    3d00:	4798      	blx	r3
    3d02:	e7ba      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3d04:	331f      	adds	r3, #31
    3d06:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d000      	beq.n	3d0e <_i2c_master_interrupt_handler+0x126>
    3d0c:	e78c      	b.n	3c28 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    3d0e:	3303      	adds	r3, #3
    3d10:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3d12:	2300      	movs	r3, #0
    3d14:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3d16:	3325      	adds	r3, #37	; 0x25
    3d18:	2200      	movs	r2, #0
    3d1a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    3d1c:	7aa3      	ldrb	r3, [r4, #10]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d107      	bne.n	3d32 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3d22:	2301      	movs	r3, #1
    3d24:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3d26:	07f3      	lsls	r3, r6, #31
    3d28:	d5a7      	bpl.n	3c7a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3d2a:	68e3      	ldr	r3, [r4, #12]
    3d2c:	0020      	movs	r0, r4
    3d2e:	4798      	blx	r3
    3d30:	e7a3      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    3d32:	0020      	movs	r0, r4
    3d34:	4b24      	ldr	r3, [pc, #144]	; (3dc8 <_i2c_master_interrupt_handler+0x1e0>)
    3d36:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3d38:	686a      	ldr	r2, [r5, #4]
    3d3a:	23c0      	movs	r3, #192	; 0xc0
    3d3c:	029b      	lsls	r3, r3, #10
    3d3e:	4313      	orrs	r3, r2
    3d40:	606b      	str	r3, [r5, #4]
    3d42:	e7f0      	b.n	3d26 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3d44:	2324      	movs	r3, #36	; 0x24
    3d46:	5ce3      	ldrb	r3, [r4, r3]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d103      	bne.n	3d54 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    3d4c:	0020      	movs	r0, r4
    3d4e:	4b20      	ldr	r3, [pc, #128]	; (3dd0 <_i2c_master_interrupt_handler+0x1e8>)
    3d50:	4798      	blx	r3
    3d52:	e792      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    3d54:	0020      	movs	r0, r4
    3d56:	4b1d      	ldr	r3, [pc, #116]	; (3dcc <_i2c_master_interrupt_handler+0x1e4>)
    3d58:	4798      	blx	r3
    3d5a:	e78e      	b.n	3c7a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    3d5c:	331f      	adds	r3, #31
    3d5e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    3d60:	2b01      	cmp	r3, #1
    3d62:	d196      	bne.n	3c92 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3d64:	7e2b      	ldrb	r3, [r5, #24]
    3d66:	079b      	lsls	r3, r3, #30
    3d68:	d501      	bpl.n	3d6e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3d6a:	2302      	movs	r3, #2
    3d6c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    3d6e:	2303      	movs	r3, #3
    3d70:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    3d72:	2300      	movs	r3, #0
    3d74:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3d76:	3325      	adds	r3, #37	; 0x25
    3d78:	2200      	movs	r2, #0
    3d7a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3d7c:	07b3      	lsls	r3, r6, #30
    3d7e:	d503      	bpl.n	3d88 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    3d80:	2324      	movs	r3, #36	; 0x24
    3d82:	5ce3      	ldrb	r3, [r4, r3]
    3d84:	2b01      	cmp	r3, #1
    3d86:	d00b      	beq.n	3da0 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3d88:	07f3      	lsls	r3, r6, #31
    3d8a:	d400      	bmi.n	3d8e <_i2c_master_interrupt_handler+0x1a6>
    3d8c:	e781      	b.n	3c92 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3d8e:	2324      	movs	r3, #36	; 0x24
    3d90:	5ce3      	ldrb	r3, [r4, r3]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d000      	beq.n	3d98 <_i2c_master_interrupt_handler+0x1b0>
    3d96:	e77c      	b.n	3c92 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3d98:	68e3      	ldr	r3, [r4, #12]
    3d9a:	0020      	movs	r0, r4
    3d9c:	4798      	blx	r3
    3d9e:	e778      	b.n	3c92 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    3da0:	6923      	ldr	r3, [r4, #16]
    3da2:	0020      	movs	r0, r4
    3da4:	4798      	blx	r3
    3da6:	e774      	b.n	3c92 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    3da8:	0020      	movs	r0, r4
    3daa:	4b07      	ldr	r3, [pc, #28]	; (3dc8 <_i2c_master_interrupt_handler+0x1e0>)
    3dac:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    3dae:	686a      	ldr	r2, [r5, #4]
    3db0:	23e0      	movs	r3, #224	; 0xe0
    3db2:	02db      	lsls	r3, r3, #11
    3db4:	4313      	orrs	r3, r2
    3db6:	606b      	str	r3, [r5, #4]
    3db8:	e780      	b.n	3cbc <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3dba:	6963      	ldr	r3, [r4, #20]
    3dbc:	0020      	movs	r0, r4
    3dbe:	4798      	blx	r3
}
    3dc0:	e77f      	b.n	3cc2 <_i2c_master_interrupt_handler+0xda>
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	20000678 	.word	0x20000678
    3dc8:	00003b19 	.word	0x00003b19
    3dcc:	00003b25 	.word	0x00003b25
    3dd0:	00003bad 	.word	0x00003bad

00003dd4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3dd4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3dd6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3dd8:	2340      	movs	r3, #64	; 0x40
    3dda:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3ddc:	4281      	cmp	r1, r0
    3dde:	d202      	bcs.n	3de6 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3de0:	0018      	movs	r0, r3
    3de2:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3de4:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    3de6:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3de8:	1c63      	adds	r3, r4, #1
    3dea:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    3dec:	4288      	cmp	r0, r1
    3dee:	d9f9      	bls.n	3de4 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3df0:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3df2:	2cff      	cmp	r4, #255	; 0xff
    3df4:	d8f4      	bhi.n	3de0 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    3df6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    3df8:	2300      	movs	r3, #0
    3dfa:	e7f1      	b.n	3de0 <_sercom_get_sync_baud_val+0xc>

00003dfc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dfe:	46de      	mov	lr, fp
    3e00:	4657      	mov	r7, sl
    3e02:	464e      	mov	r6, r9
    3e04:	4645      	mov	r5, r8
    3e06:	b5e0      	push	{r5, r6, r7, lr}
    3e08:	b089      	sub	sp, #36	; 0x24
    3e0a:	000c      	movs	r4, r1
    3e0c:	9205      	str	r2, [sp, #20]
    3e0e:	aa12      	add	r2, sp, #72	; 0x48
    3e10:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3e12:	0005      	movs	r5, r0
    3e14:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3e16:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3e18:	42a5      	cmp	r5, r4
    3e1a:	d907      	bls.n	3e2c <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3e1c:	0010      	movs	r0, r2
    3e1e:	b009      	add	sp, #36	; 0x24
    3e20:	bc3c      	pop	{r2, r3, r4, r5}
    3e22:	4690      	mov	r8, r2
    3e24:	4699      	mov	r9, r3
    3e26:	46a2      	mov	sl, r4
    3e28:	46ab      	mov	fp, r5
    3e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d155      	bne.n	3edc <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3e30:	0002      	movs	r2, r0
    3e32:	0008      	movs	r0, r1
    3e34:	2100      	movs	r1, #0
    3e36:	4d63      	ldr	r5, [pc, #396]	; (3fc4 <_sercom_get_async_baud_val+0x1c8>)
    3e38:	47a8      	blx	r5
    3e3a:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3e3c:	0026      	movs	r6, r4
    3e3e:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    3e40:	2300      	movs	r3, #0
    3e42:	2400      	movs	r4, #0
    3e44:	9300      	str	r3, [sp, #0]
    3e46:	9401      	str	r4, [sp, #4]
    3e48:	2200      	movs	r2, #0
    3e4a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3e4c:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3e4e:	2120      	movs	r1, #32
    3e50:	468c      	mov	ip, r1
    3e52:	391f      	subs	r1, #31
    3e54:	9602      	str	r6, [sp, #8]
    3e56:	9703      	str	r7, [sp, #12]
    3e58:	e014      	b.n	3e84 <_sercom_get_async_baud_val+0x88>
    3e5a:	4664      	mov	r4, ip
    3e5c:	1a24      	subs	r4, r4, r0
    3e5e:	000d      	movs	r5, r1
    3e60:	40e5      	lsrs	r5, r4
    3e62:	46a8      	mov	r8, r5
    3e64:	e015      	b.n	3e92 <_sercom_get_async_baud_val+0x96>
			r = r - d;
    3e66:	9c02      	ldr	r4, [sp, #8]
    3e68:	9d03      	ldr	r5, [sp, #12]
    3e6a:	1b12      	subs	r2, r2, r4
    3e6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3e6e:	464d      	mov	r5, r9
    3e70:	9e00      	ldr	r6, [sp, #0]
    3e72:	9f01      	ldr	r7, [sp, #4]
    3e74:	4335      	orrs	r5, r6
    3e76:	003c      	movs	r4, r7
    3e78:	4646      	mov	r6, r8
    3e7a:	4334      	orrs	r4, r6
    3e7c:	9500      	str	r5, [sp, #0]
    3e7e:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    3e80:	3801      	subs	r0, #1
    3e82:	d31d      	bcc.n	3ec0 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    3e84:	2420      	movs	r4, #32
    3e86:	4264      	negs	r4, r4
    3e88:	1904      	adds	r4, r0, r4
    3e8a:	d4e6      	bmi.n	3e5a <_sercom_get_async_baud_val+0x5e>
    3e8c:	000d      	movs	r5, r1
    3e8e:	40a5      	lsls	r5, r4
    3e90:	46a8      	mov	r8, r5
    3e92:	000c      	movs	r4, r1
    3e94:	4084      	lsls	r4, r0
    3e96:	46a1      	mov	r9, r4
		r = r << 1;
    3e98:	1892      	adds	r2, r2, r2
    3e9a:	415b      	adcs	r3, r3
    3e9c:	0014      	movs	r4, r2
    3e9e:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3ea0:	4646      	mov	r6, r8
    3ea2:	465f      	mov	r7, fp
    3ea4:	423e      	tst	r6, r7
    3ea6:	d003      	beq.n	3eb0 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    3ea8:	000e      	movs	r6, r1
    3eaa:	4326      	orrs	r6, r4
    3eac:	0032      	movs	r2, r6
    3eae:	002b      	movs	r3, r5
		if (r >= d) {
    3eb0:	9c02      	ldr	r4, [sp, #8]
    3eb2:	9d03      	ldr	r5, [sp, #12]
    3eb4:	429d      	cmp	r5, r3
    3eb6:	d8e3      	bhi.n	3e80 <_sercom_get_async_baud_val+0x84>
    3eb8:	d1d5      	bne.n	3e66 <_sercom_get_async_baud_val+0x6a>
    3eba:	4294      	cmp	r4, r2
    3ebc:	d8e0      	bhi.n	3e80 <_sercom_get_async_baud_val+0x84>
    3ebe:	e7d2      	b.n	3e66 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3ec0:	2200      	movs	r2, #0
    3ec2:	2301      	movs	r3, #1
    3ec4:	9800      	ldr	r0, [sp, #0]
    3ec6:	9901      	ldr	r1, [sp, #4]
    3ec8:	1a12      	subs	r2, r2, r0
    3eca:	418b      	sbcs	r3, r1
    3ecc:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    3ece:	0c13      	lsrs	r3, r2, #16
    3ed0:	040a      	lsls	r2, r1, #16
    3ed2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    3ed4:	9b05      	ldr	r3, [sp, #20]
    3ed6:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3ed8:	2200      	movs	r2, #0
    3eda:	e79f      	b.n	3e1c <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    3edc:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3ede:	2b01      	cmp	r3, #1
    3ee0:	d1f8      	bne.n	3ed4 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    3ee2:	0f63      	lsrs	r3, r4, #29
    3ee4:	9304      	str	r3, [sp, #16]
    3ee6:	00e3      	lsls	r3, r4, #3
    3ee8:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    3eea:	000a      	movs	r2, r1
    3eec:	2300      	movs	r3, #0
    3eee:	2100      	movs	r1, #0
    3ef0:	4c34      	ldr	r4, [pc, #208]	; (3fc4 <_sercom_get_async_baud_val+0x1c8>)
    3ef2:	47a0      	blx	r4
    3ef4:	0004      	movs	r4, r0
    3ef6:	000d      	movs	r5, r1
    3ef8:	2300      	movs	r3, #0
    3efa:	469c      	mov	ip, r3
    3efc:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    3efe:	3320      	adds	r3, #32
    3f00:	469b      	mov	fp, r3
    3f02:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    3f04:	4663      	mov	r3, ip
    3f06:	9307      	str	r3, [sp, #28]
    3f08:	e048      	b.n	3f9c <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    3f0a:	4659      	mov	r1, fp
    3f0c:	1bc9      	subs	r1, r1, r7
    3f0e:	0030      	movs	r0, r6
    3f10:	40c8      	lsrs	r0, r1
    3f12:	4682      	mov	sl, r0
    3f14:	e010      	b.n	3f38 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    3f16:	9800      	ldr	r0, [sp, #0]
    3f18:	9901      	ldr	r1, [sp, #4]
    3f1a:	1a12      	subs	r2, r2, r0
    3f1c:	418b      	sbcs	r3, r1
			q |= bit_shift;
    3f1e:	9902      	ldr	r1, [sp, #8]
    3f20:	4648      	mov	r0, r9
    3f22:	4301      	orrs	r1, r0
    3f24:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    3f26:	3f01      	subs	r7, #1
    3f28:	d325      	bcc.n	3f76 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    3f2a:	2120      	movs	r1, #32
    3f2c:	4249      	negs	r1, r1
    3f2e:	1879      	adds	r1, r7, r1
    3f30:	d4eb      	bmi.n	3f0a <_sercom_get_async_baud_val+0x10e>
    3f32:	0030      	movs	r0, r6
    3f34:	4088      	lsls	r0, r1
    3f36:	4682      	mov	sl, r0
    3f38:	0031      	movs	r1, r6
    3f3a:	40b9      	lsls	r1, r7
    3f3c:	4689      	mov	r9, r1
		r = r << 1;
    3f3e:	1892      	adds	r2, r2, r2
    3f40:	415b      	adcs	r3, r3
    3f42:	0010      	movs	r0, r2
    3f44:	0019      	movs	r1, r3
		if (n & bit_shift) {
    3f46:	4644      	mov	r4, r8
    3f48:	464d      	mov	r5, r9
    3f4a:	402c      	ands	r4, r5
    3f4c:	46a4      	mov	ip, r4
    3f4e:	4654      	mov	r4, sl
    3f50:	9d04      	ldr	r5, [sp, #16]
    3f52:	402c      	ands	r4, r5
    3f54:	46a2      	mov	sl, r4
    3f56:	4664      	mov	r4, ip
    3f58:	4655      	mov	r5, sl
    3f5a:	432c      	orrs	r4, r5
    3f5c:	d003      	beq.n	3f66 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    3f5e:	0034      	movs	r4, r6
    3f60:	4304      	orrs	r4, r0
    3f62:	0022      	movs	r2, r4
    3f64:	000b      	movs	r3, r1
		if (r >= d) {
    3f66:	9800      	ldr	r0, [sp, #0]
    3f68:	9901      	ldr	r1, [sp, #4]
    3f6a:	4299      	cmp	r1, r3
    3f6c:	d8db      	bhi.n	3f26 <_sercom_get_async_baud_val+0x12a>
    3f6e:	d1d2      	bne.n	3f16 <_sercom_get_async_baud_val+0x11a>
    3f70:	4290      	cmp	r0, r2
    3f72:	d8d8      	bhi.n	3f26 <_sercom_get_async_baud_val+0x12a>
    3f74:	e7cf      	b.n	3f16 <_sercom_get_async_baud_val+0x11a>
    3f76:	9c00      	ldr	r4, [sp, #0]
    3f78:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    3f7a:	9902      	ldr	r1, [sp, #8]
    3f7c:	9a07      	ldr	r2, [sp, #28]
    3f7e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    3f80:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3f82:	4911      	ldr	r1, [pc, #68]	; (3fc8 <_sercom_get_async_baud_val+0x1cc>)
    3f84:	428b      	cmp	r3, r1
    3f86:	d914      	bls.n	3fb2 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3f88:	9b06      	ldr	r3, [sp, #24]
    3f8a:	3301      	adds	r3, #1
    3f8c:	b2db      	uxtb	r3, r3
    3f8e:	0019      	movs	r1, r3
    3f90:	9306      	str	r3, [sp, #24]
    3f92:	0013      	movs	r3, r2
    3f94:	3301      	adds	r3, #1
    3f96:	9307      	str	r3, [sp, #28]
    3f98:	2908      	cmp	r1, #8
    3f9a:	d008      	beq.n	3fae <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    3f9c:	2300      	movs	r3, #0
    3f9e:	9302      	str	r3, [sp, #8]
    3fa0:	2200      	movs	r2, #0
    3fa2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3fa4:	213f      	movs	r1, #63	; 0x3f
    3fa6:	9400      	str	r4, [sp, #0]
    3fa8:	9501      	str	r5, [sp, #4]
    3faa:	000f      	movs	r7, r1
    3fac:	e7bd      	b.n	3f2a <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3fae:	2240      	movs	r2, #64	; 0x40
    3fb0:	e734      	b.n	3e1c <_sercom_get_async_baud_val+0x20>
    3fb2:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    3fb4:	9906      	ldr	r1, [sp, #24]
    3fb6:	2908      	cmp	r1, #8
    3fb8:	d100      	bne.n	3fbc <_sercom_get_async_baud_val+0x1c0>
    3fba:	e72f      	b.n	3e1c <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    3fbc:	034a      	lsls	r2, r1, #13
    3fbe:	431a      	orrs	r2, r3
    3fc0:	e788      	b.n	3ed4 <_sercom_get_async_baud_val+0xd8>
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	0000910d 	.word	0x0000910d
    3fc8:	00001fff 	.word	0x00001fff

00003fcc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3fcc:	b510      	push	{r4, lr}
    3fce:	b082      	sub	sp, #8
    3fd0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3fd2:	4b0e      	ldr	r3, [pc, #56]	; (400c <sercom_set_gclk_generator+0x40>)
    3fd4:	781b      	ldrb	r3, [r3, #0]
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d007      	beq.n	3fea <sercom_set_gclk_generator+0x1e>
    3fda:	2900      	cmp	r1, #0
    3fdc:	d105      	bne.n	3fea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3fde:	4b0b      	ldr	r3, [pc, #44]	; (400c <sercom_set_gclk_generator+0x40>)
    3fe0:	785b      	ldrb	r3, [r3, #1]
    3fe2:	4283      	cmp	r3, r0
    3fe4:	d010      	beq.n	4008 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3fe6:	201d      	movs	r0, #29
    3fe8:	e00c      	b.n	4004 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3fea:	a901      	add	r1, sp, #4
    3fec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3fee:	2013      	movs	r0, #19
    3ff0:	4b07      	ldr	r3, [pc, #28]	; (4010 <sercom_set_gclk_generator+0x44>)
    3ff2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3ff4:	2013      	movs	r0, #19
    3ff6:	4b07      	ldr	r3, [pc, #28]	; (4014 <sercom_set_gclk_generator+0x48>)
    3ff8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3ffa:	4b04      	ldr	r3, [pc, #16]	; (400c <sercom_set_gclk_generator+0x40>)
    3ffc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3ffe:	2201      	movs	r2, #1
    4000:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4002:	2000      	movs	r0, #0
}
    4004:	b002      	add	sp, #8
    4006:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4008:	2000      	movs	r0, #0
    400a:	e7fb      	b.n	4004 <sercom_set_gclk_generator+0x38>
    400c:	20000308 	.word	0x20000308
    4010:	00004435 	.word	0x00004435
    4014:	000043a9 	.word	0x000043a9

00004018 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4018:	4b40      	ldr	r3, [pc, #256]	; (411c <_sercom_get_default_pad+0x104>)
    401a:	4298      	cmp	r0, r3
    401c:	d031      	beq.n	4082 <_sercom_get_default_pad+0x6a>
    401e:	d90a      	bls.n	4036 <_sercom_get_default_pad+0x1e>
    4020:	4b3f      	ldr	r3, [pc, #252]	; (4120 <_sercom_get_default_pad+0x108>)
    4022:	4298      	cmp	r0, r3
    4024:	d04d      	beq.n	40c2 <_sercom_get_default_pad+0xaa>
    4026:	4b3f      	ldr	r3, [pc, #252]	; (4124 <_sercom_get_default_pad+0x10c>)
    4028:	4298      	cmp	r0, r3
    402a:	d05a      	beq.n	40e2 <_sercom_get_default_pad+0xca>
    402c:	4b3e      	ldr	r3, [pc, #248]	; (4128 <_sercom_get_default_pad+0x110>)
    402e:	4298      	cmp	r0, r3
    4030:	d037      	beq.n	40a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4032:	2000      	movs	r0, #0
}
    4034:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4036:	4b3d      	ldr	r3, [pc, #244]	; (412c <_sercom_get_default_pad+0x114>)
    4038:	4298      	cmp	r0, r3
    403a:	d00c      	beq.n	4056 <_sercom_get_default_pad+0x3e>
    403c:	4b3c      	ldr	r3, [pc, #240]	; (4130 <_sercom_get_default_pad+0x118>)
    403e:	4298      	cmp	r0, r3
    4040:	d1f7      	bne.n	4032 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4042:	2901      	cmp	r1, #1
    4044:	d017      	beq.n	4076 <_sercom_get_default_pad+0x5e>
    4046:	2900      	cmp	r1, #0
    4048:	d05d      	beq.n	4106 <_sercom_get_default_pad+0xee>
    404a:	2902      	cmp	r1, #2
    404c:	d015      	beq.n	407a <_sercom_get_default_pad+0x62>
    404e:	2903      	cmp	r1, #3
    4050:	d015      	beq.n	407e <_sercom_get_default_pad+0x66>
	return 0;
    4052:	2000      	movs	r0, #0
    4054:	e7ee      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4056:	2901      	cmp	r1, #1
    4058:	d007      	beq.n	406a <_sercom_get_default_pad+0x52>
    405a:	2900      	cmp	r1, #0
    405c:	d051      	beq.n	4102 <_sercom_get_default_pad+0xea>
    405e:	2902      	cmp	r1, #2
    4060:	d005      	beq.n	406e <_sercom_get_default_pad+0x56>
    4062:	2903      	cmp	r1, #3
    4064:	d005      	beq.n	4072 <_sercom_get_default_pad+0x5a>
	return 0;
    4066:	2000      	movs	r0, #0
    4068:	e7e4      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    406a:	4832      	ldr	r0, [pc, #200]	; (4134 <_sercom_get_default_pad+0x11c>)
    406c:	e7e2      	b.n	4034 <_sercom_get_default_pad+0x1c>
    406e:	4832      	ldr	r0, [pc, #200]	; (4138 <_sercom_get_default_pad+0x120>)
    4070:	e7e0      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4072:	4832      	ldr	r0, [pc, #200]	; (413c <_sercom_get_default_pad+0x124>)
    4074:	e7de      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4076:	4832      	ldr	r0, [pc, #200]	; (4140 <_sercom_get_default_pad+0x128>)
    4078:	e7dc      	b.n	4034 <_sercom_get_default_pad+0x1c>
    407a:	4832      	ldr	r0, [pc, #200]	; (4144 <_sercom_get_default_pad+0x12c>)
    407c:	e7da      	b.n	4034 <_sercom_get_default_pad+0x1c>
    407e:	4832      	ldr	r0, [pc, #200]	; (4148 <_sercom_get_default_pad+0x130>)
    4080:	e7d8      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4082:	2901      	cmp	r1, #1
    4084:	d007      	beq.n	4096 <_sercom_get_default_pad+0x7e>
    4086:	2900      	cmp	r1, #0
    4088:	d03f      	beq.n	410a <_sercom_get_default_pad+0xf2>
    408a:	2902      	cmp	r1, #2
    408c:	d005      	beq.n	409a <_sercom_get_default_pad+0x82>
    408e:	2903      	cmp	r1, #3
    4090:	d005      	beq.n	409e <_sercom_get_default_pad+0x86>
	return 0;
    4092:	2000      	movs	r0, #0
    4094:	e7ce      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4096:	482d      	ldr	r0, [pc, #180]	; (414c <_sercom_get_default_pad+0x134>)
    4098:	e7cc      	b.n	4034 <_sercom_get_default_pad+0x1c>
    409a:	482d      	ldr	r0, [pc, #180]	; (4150 <_sercom_get_default_pad+0x138>)
    409c:	e7ca      	b.n	4034 <_sercom_get_default_pad+0x1c>
    409e:	482d      	ldr	r0, [pc, #180]	; (4154 <_sercom_get_default_pad+0x13c>)
    40a0:	e7c8      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40a2:	2901      	cmp	r1, #1
    40a4:	d007      	beq.n	40b6 <_sercom_get_default_pad+0x9e>
    40a6:	2900      	cmp	r1, #0
    40a8:	d031      	beq.n	410e <_sercom_get_default_pad+0xf6>
    40aa:	2902      	cmp	r1, #2
    40ac:	d005      	beq.n	40ba <_sercom_get_default_pad+0xa2>
    40ae:	2903      	cmp	r1, #3
    40b0:	d005      	beq.n	40be <_sercom_get_default_pad+0xa6>
	return 0;
    40b2:	2000      	movs	r0, #0
    40b4:	e7be      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    40b6:	4828      	ldr	r0, [pc, #160]	; (4158 <_sercom_get_default_pad+0x140>)
    40b8:	e7bc      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40ba:	4828      	ldr	r0, [pc, #160]	; (415c <_sercom_get_default_pad+0x144>)
    40bc:	e7ba      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40be:	4828      	ldr	r0, [pc, #160]	; (4160 <_sercom_get_default_pad+0x148>)
    40c0:	e7b8      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40c2:	2901      	cmp	r1, #1
    40c4:	d007      	beq.n	40d6 <_sercom_get_default_pad+0xbe>
    40c6:	2900      	cmp	r1, #0
    40c8:	d023      	beq.n	4112 <_sercom_get_default_pad+0xfa>
    40ca:	2902      	cmp	r1, #2
    40cc:	d005      	beq.n	40da <_sercom_get_default_pad+0xc2>
    40ce:	2903      	cmp	r1, #3
    40d0:	d005      	beq.n	40de <_sercom_get_default_pad+0xc6>
	return 0;
    40d2:	2000      	movs	r0, #0
    40d4:	e7ae      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    40d6:	4823      	ldr	r0, [pc, #140]	; (4164 <_sercom_get_default_pad+0x14c>)
    40d8:	e7ac      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40da:	4823      	ldr	r0, [pc, #140]	; (4168 <_sercom_get_default_pad+0x150>)
    40dc:	e7aa      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40de:	4823      	ldr	r0, [pc, #140]	; (416c <_sercom_get_default_pad+0x154>)
    40e0:	e7a8      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40e2:	2901      	cmp	r1, #1
    40e4:	d007      	beq.n	40f6 <_sercom_get_default_pad+0xde>
    40e6:	2900      	cmp	r1, #0
    40e8:	d015      	beq.n	4116 <_sercom_get_default_pad+0xfe>
    40ea:	2902      	cmp	r1, #2
    40ec:	d005      	beq.n	40fa <_sercom_get_default_pad+0xe2>
    40ee:	2903      	cmp	r1, #3
    40f0:	d005      	beq.n	40fe <_sercom_get_default_pad+0xe6>
	return 0;
    40f2:	2000      	movs	r0, #0
    40f4:	e79e      	b.n	4034 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    40f6:	481e      	ldr	r0, [pc, #120]	; (4170 <_sercom_get_default_pad+0x158>)
    40f8:	e79c      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40fa:	481e      	ldr	r0, [pc, #120]	; (4174 <_sercom_get_default_pad+0x15c>)
    40fc:	e79a      	b.n	4034 <_sercom_get_default_pad+0x1c>
    40fe:	481e      	ldr	r0, [pc, #120]	; (4178 <_sercom_get_default_pad+0x160>)
    4100:	e798      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4102:	481e      	ldr	r0, [pc, #120]	; (417c <_sercom_get_default_pad+0x164>)
    4104:	e796      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4106:	2003      	movs	r0, #3
    4108:	e794      	b.n	4034 <_sercom_get_default_pad+0x1c>
    410a:	481d      	ldr	r0, [pc, #116]	; (4180 <_sercom_get_default_pad+0x168>)
    410c:	e792      	b.n	4034 <_sercom_get_default_pad+0x1c>
    410e:	481d      	ldr	r0, [pc, #116]	; (4184 <_sercom_get_default_pad+0x16c>)
    4110:	e790      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4112:	481d      	ldr	r0, [pc, #116]	; (4188 <_sercom_get_default_pad+0x170>)
    4114:	e78e      	b.n	4034 <_sercom_get_default_pad+0x1c>
    4116:	481d      	ldr	r0, [pc, #116]	; (418c <_sercom_get_default_pad+0x174>)
    4118:	e78c      	b.n	4034 <_sercom_get_default_pad+0x1c>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	42001000 	.word	0x42001000
    4120:	42001800 	.word	0x42001800
    4124:	42001c00 	.word	0x42001c00
    4128:	42001400 	.word	0x42001400
    412c:	42000800 	.word	0x42000800
    4130:	42000c00 	.word	0x42000c00
    4134:	00050003 	.word	0x00050003
    4138:	00060003 	.word	0x00060003
    413c:	00070003 	.word	0x00070003
    4140:	00010003 	.word	0x00010003
    4144:	001e0003 	.word	0x001e0003
    4148:	001f0003 	.word	0x001f0003
    414c:	00090003 	.word	0x00090003
    4150:	000a0003 	.word	0x000a0003
    4154:	000b0003 	.word	0x000b0003
    4158:	00110003 	.word	0x00110003
    415c:	00120003 	.word	0x00120003
    4160:	00130003 	.word	0x00130003
    4164:	000d0003 	.word	0x000d0003
    4168:	000e0003 	.word	0x000e0003
    416c:	000f0003 	.word	0x000f0003
    4170:	00170003 	.word	0x00170003
    4174:	00180003 	.word	0x00180003
    4178:	00190003 	.word	0x00190003
    417c:	00040003 	.word	0x00040003
    4180:	00080003 	.word	0x00080003
    4184:	00100003 	.word	0x00100003
    4188:	000c0003 	.word	0x000c0003
    418c:	00160003 	.word	0x00160003

00004190 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4190:	b530      	push	{r4, r5, lr}
    4192:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4194:	4b0b      	ldr	r3, [pc, #44]	; (41c4 <_sercom_get_sercom_inst_index+0x34>)
    4196:	466a      	mov	r2, sp
    4198:	cb32      	ldmia	r3!, {r1, r4, r5}
    419a:	c232      	stmia	r2!, {r1, r4, r5}
    419c:	cb32      	ldmia	r3!, {r1, r4, r5}
    419e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    41a0:	9b00      	ldr	r3, [sp, #0]
    41a2:	4283      	cmp	r3, r0
    41a4:	d00b      	beq.n	41be <_sercom_get_sercom_inst_index+0x2e>
    41a6:	2301      	movs	r3, #1
    41a8:	009a      	lsls	r2, r3, #2
    41aa:	4669      	mov	r1, sp
    41ac:	5852      	ldr	r2, [r2, r1]
    41ae:	4282      	cmp	r2, r0
    41b0:	d006      	beq.n	41c0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41b2:	3301      	adds	r3, #1
    41b4:	2b06      	cmp	r3, #6
    41b6:	d1f7      	bne.n	41a8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    41b8:	2000      	movs	r0, #0
}
    41ba:	b007      	add	sp, #28
    41bc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41be:	2300      	movs	r3, #0
			return i;
    41c0:	b2d8      	uxtb	r0, r3
    41c2:	e7fa      	b.n	41ba <_sercom_get_sercom_inst_index+0x2a>
    41c4:	0000c004 	.word	0x0000c004

000041c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    41c8:	4770      	bx	lr
	...

000041cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    41cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    41ce:	4b0a      	ldr	r3, [pc, #40]	; (41f8 <_sercom_set_handler+0x2c>)
    41d0:	781b      	ldrb	r3, [r3, #0]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d10c      	bne.n	41f0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    41d6:	4f09      	ldr	r7, [pc, #36]	; (41fc <_sercom_set_handler+0x30>)
    41d8:	4e09      	ldr	r6, [pc, #36]	; (4200 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    41da:	4d0a      	ldr	r5, [pc, #40]	; (4204 <_sercom_set_handler+0x38>)
    41dc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    41de:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    41e0:	195a      	adds	r2, r3, r5
    41e2:	6014      	str	r4, [r2, #0]
    41e4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41e6:	2b18      	cmp	r3, #24
    41e8:	d1f9      	bne.n	41de <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    41ea:	2201      	movs	r2, #1
    41ec:	4b02      	ldr	r3, [pc, #8]	; (41f8 <_sercom_set_handler+0x2c>)
    41ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    41f0:	0080      	lsls	r0, r0, #2
    41f2:	4b02      	ldr	r3, [pc, #8]	; (41fc <_sercom_set_handler+0x30>)
    41f4:	50c1      	str	r1, [r0, r3]
}
    41f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41f8:	2000030a 	.word	0x2000030a
    41fc:	2000030c 	.word	0x2000030c
    4200:	000041c9 	.word	0x000041c9
    4204:	20000678 	.word	0x20000678

00004208 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4208:	b500      	push	{lr}
    420a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    420c:	2309      	movs	r3, #9
    420e:	466a      	mov	r2, sp
    4210:	7013      	strb	r3, [r2, #0]
    4212:	3301      	adds	r3, #1
    4214:	7053      	strb	r3, [r2, #1]
    4216:	3301      	adds	r3, #1
    4218:	7093      	strb	r3, [r2, #2]
    421a:	3301      	adds	r3, #1
    421c:	70d3      	strb	r3, [r2, #3]
    421e:	3301      	adds	r3, #1
    4220:	7113      	strb	r3, [r2, #4]
    4222:	3301      	adds	r3, #1
    4224:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4226:	4b03      	ldr	r3, [pc, #12]	; (4234 <_sercom_get_interrupt_vector+0x2c>)
    4228:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    422a:	466b      	mov	r3, sp
    422c:	5618      	ldrsb	r0, [r3, r0]
}
    422e:	b003      	add	sp, #12
    4230:	bd00      	pop	{pc}
    4232:	46c0      	nop			; (mov r8, r8)
    4234:	00004191 	.word	0x00004191

00004238 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4238:	b510      	push	{r4, lr}
    423a:	4b02      	ldr	r3, [pc, #8]	; (4244 <SERCOM0_Handler+0xc>)
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	2000      	movs	r0, #0
    4240:	4798      	blx	r3
    4242:	bd10      	pop	{r4, pc}
    4244:	2000030c 	.word	0x2000030c

00004248 <SERCOM1_Handler>:
    4248:	b510      	push	{r4, lr}
    424a:	4b02      	ldr	r3, [pc, #8]	; (4254 <SERCOM1_Handler+0xc>)
    424c:	685b      	ldr	r3, [r3, #4]
    424e:	2001      	movs	r0, #1
    4250:	4798      	blx	r3
    4252:	bd10      	pop	{r4, pc}
    4254:	2000030c 	.word	0x2000030c

00004258 <SERCOM2_Handler>:
    4258:	b510      	push	{r4, lr}
    425a:	4b02      	ldr	r3, [pc, #8]	; (4264 <SERCOM2_Handler+0xc>)
    425c:	689b      	ldr	r3, [r3, #8]
    425e:	2002      	movs	r0, #2
    4260:	4798      	blx	r3
    4262:	bd10      	pop	{r4, pc}
    4264:	2000030c 	.word	0x2000030c

00004268 <SERCOM3_Handler>:
    4268:	b510      	push	{r4, lr}
    426a:	4b02      	ldr	r3, [pc, #8]	; (4274 <SERCOM3_Handler+0xc>)
    426c:	68db      	ldr	r3, [r3, #12]
    426e:	2003      	movs	r0, #3
    4270:	4798      	blx	r3
    4272:	bd10      	pop	{r4, pc}
    4274:	2000030c 	.word	0x2000030c

00004278 <SERCOM4_Handler>:
    4278:	b510      	push	{r4, lr}
    427a:	4b02      	ldr	r3, [pc, #8]	; (4284 <SERCOM4_Handler+0xc>)
    427c:	691b      	ldr	r3, [r3, #16]
    427e:	2004      	movs	r0, #4
    4280:	4798      	blx	r3
    4282:	bd10      	pop	{r4, pc}
    4284:	2000030c 	.word	0x2000030c

00004288 <SERCOM5_Handler>:
    4288:	b510      	push	{r4, lr}
    428a:	4b02      	ldr	r3, [pc, #8]	; (4294 <SERCOM5_Handler+0xc>)
    428c:	695b      	ldr	r3, [r3, #20]
    428e:	2005      	movs	r0, #5
    4290:	4798      	blx	r3
    4292:	bd10      	pop	{r4, pc}
    4294:	2000030c 	.word	0x2000030c

00004298 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4298:	b510      	push	{r4, lr}
	switch (clock_source) {
    429a:	2808      	cmp	r0, #8
    429c:	d803      	bhi.n	42a6 <system_clock_source_get_hz+0xe>
    429e:	0080      	lsls	r0, r0, #2
    42a0:	4b18      	ldr	r3, [pc, #96]	; (4304 <system_clock_source_get_hz+0x6c>)
    42a2:	581b      	ldr	r3, [r3, r0]
    42a4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    42a6:	2000      	movs	r0, #0
    42a8:	e02b      	b.n	4302 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.xosc.frequency;
    42aa:	4b17      	ldr	r3, [pc, #92]	; (4308 <system_clock_source_get_hz+0x70>)
    42ac:	6918      	ldr	r0, [r3, #16]
    42ae:	e028      	b.n	4302 <system_clock_source_get_hz+0x6a>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    42b0:	4b16      	ldr	r3, [pc, #88]	; (430c <system_clock_source_get_hz+0x74>)
    42b2:	6a1b      	ldr	r3, [r3, #32]
    42b4:	059b      	lsls	r3, r3, #22
    42b6:	0f9b      	lsrs	r3, r3, #30
    42b8:	4815      	ldr	r0, [pc, #84]	; (4310 <system_clock_source_get_hz+0x78>)
    42ba:	40d8      	lsrs	r0, r3
    42bc:	e021      	b.n	4302 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.xosc32k.frequency;
    42be:	4b12      	ldr	r3, [pc, #72]	; (4308 <system_clock_source_get_hz+0x70>)
    42c0:	6958      	ldr	r0, [r3, #20]
    42c2:	e01e      	b.n	4302 <system_clock_source_get_hz+0x6a>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    42c4:	4911      	ldr	r1, [pc, #68]	; (430c <system_clock_source_get_hz+0x74>)
    42c6:	2210      	movs	r2, #16
    42c8:	68cb      	ldr	r3, [r1, #12]
    42ca:	421a      	tst	r2, r3
    42cc:	d0fc      	beq.n	42c8 <system_clock_source_get_hz+0x30>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    42ce:	4b0e      	ldr	r3, [pc, #56]	; (4308 <system_clock_source_get_hz+0x70>)
    42d0:	681b      	ldr	r3, [r3, #0]
    42d2:	075b      	lsls	r3, r3, #29
    42d4:	d401      	bmi.n	42da <system_clock_source_get_hz+0x42>
		return 48000000UL;
    42d6:	480f      	ldr	r0, [pc, #60]	; (4314 <system_clock_source_get_hz+0x7c>)
    42d8:	e013      	b.n	4302 <system_clock_source_get_hz+0x6a>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42da:	2000      	movs	r0, #0
    42dc:	4b0e      	ldr	r3, [pc, #56]	; (4318 <system_clock_source_get_hz+0x80>)
    42de:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    42e0:	4b09      	ldr	r3, [pc, #36]	; (4308 <system_clock_source_get_hz+0x70>)
    42e2:	689b      	ldr	r3, [r3, #8]
    42e4:	041b      	lsls	r3, r3, #16
    42e6:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    42e8:	4358      	muls	r0, r3
    42ea:	e00a      	b.n	4302 <system_clock_source_get_hz+0x6a>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42ec:	2350      	movs	r3, #80	; 0x50
    42ee:	4a07      	ldr	r2, [pc, #28]	; (430c <system_clock_source_get_hz+0x74>)
    42f0:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    42f2:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    42f4:	075b      	lsls	r3, r3, #29
    42f6:	d504      	bpl.n	4302 <system_clock_source_get_hz+0x6a>
		return _system_clock_inst.dpll.frequency;
    42f8:	4b03      	ldr	r3, [pc, #12]	; (4308 <system_clock_source_get_hz+0x70>)
    42fa:	68d8      	ldr	r0, [r3, #12]
    42fc:	e001      	b.n	4302 <system_clock_source_get_hz+0x6a>
		return 32768UL;
    42fe:	2080      	movs	r0, #128	; 0x80
    4300:	0200      	lsls	r0, r0, #8
	}
}
    4302:	bd10      	pop	{r4, pc}
    4304:	0000c01c 	.word	0x0000c01c
    4308:	20000324 	.word	0x20000324
    430c:	40000800 	.word	0x40000800
    4310:	007a1200 	.word	0x007a1200
    4314:	02dc6c00 	.word	0x02dc6c00
    4318:	00004451 	.word	0x00004451

0000431c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    431c:	b570      	push	{r4, r5, r6, lr}
    431e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4320:	4a1a      	ldr	r2, [pc, #104]	; (438c <system_gclk_gen_get_hz+0x70>)
    4322:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4324:	b25b      	sxtb	r3, r3
    4326:	2b00      	cmp	r3, #0
    4328:	dbfb      	blt.n	4322 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    432a:	4b19      	ldr	r3, [pc, #100]	; (4390 <system_gclk_gen_get_hz+0x74>)
    432c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    432e:	4b19      	ldr	r3, [pc, #100]	; (4394 <system_gclk_gen_get_hz+0x78>)
    4330:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4332:	4a16      	ldr	r2, [pc, #88]	; (438c <system_gclk_gen_get_hz+0x70>)
    4334:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4336:	b25b      	sxtb	r3, r3
    4338:	2b00      	cmp	r3, #0
    433a:	dbfb      	blt.n	4334 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    433c:	4e13      	ldr	r6, [pc, #76]	; (438c <system_gclk_gen_get_hz+0x70>)
    433e:	6870      	ldr	r0, [r6, #4]
    4340:	04c0      	lsls	r0, r0, #19
    4342:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4344:	4b14      	ldr	r3, [pc, #80]	; (4398 <system_gclk_gen_get_hz+0x7c>)
    4346:	4798      	blx	r3
    4348:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    434a:	4b12      	ldr	r3, [pc, #72]	; (4394 <system_gclk_gen_get_hz+0x78>)
    434c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    434e:	6876      	ldr	r6, [r6, #4]
    4350:	02f6      	lsls	r6, r6, #11
    4352:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4354:	4b11      	ldr	r3, [pc, #68]	; (439c <system_gclk_gen_get_hz+0x80>)
    4356:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4358:	4a0c      	ldr	r2, [pc, #48]	; (438c <system_gclk_gen_get_hz+0x70>)
    435a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    435c:	b25b      	sxtb	r3, r3
    435e:	2b00      	cmp	r3, #0
    4360:	dbfb      	blt.n	435a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4362:	4b0a      	ldr	r3, [pc, #40]	; (438c <system_gclk_gen_get_hz+0x70>)
    4364:	689c      	ldr	r4, [r3, #8]
    4366:	0224      	lsls	r4, r4, #8
    4368:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    436a:	4b0d      	ldr	r3, [pc, #52]	; (43a0 <system_gclk_gen_get_hz+0x84>)
    436c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    436e:	2e00      	cmp	r6, #0
    4370:	d107      	bne.n	4382 <system_gclk_gen_get_hz+0x66>
    4372:	2c01      	cmp	r4, #1
    4374:	d907      	bls.n	4386 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4376:	0021      	movs	r1, r4
    4378:	0028      	movs	r0, r5
    437a:	4b0a      	ldr	r3, [pc, #40]	; (43a4 <system_gclk_gen_get_hz+0x88>)
    437c:	4798      	blx	r3
    437e:	0005      	movs	r5, r0
    4380:	e001      	b.n	4386 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4382:	3401      	adds	r4, #1
    4384:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4386:	0028      	movs	r0, r5
    4388:	bd70      	pop	{r4, r5, r6, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	40000c00 	.word	0x40000c00
    4390:	00002e25 	.word	0x00002e25
    4394:	40000c04 	.word	0x40000c04
    4398:	00004299 	.word	0x00004299
    439c:	40000c08 	.word	0x40000c08
    43a0:	00002e65 	.word	0x00002e65
    43a4:	00008d29 	.word	0x00008d29

000043a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    43a8:	b510      	push	{r4, lr}
    43aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    43ac:	4b06      	ldr	r3, [pc, #24]	; (43c8 <system_gclk_chan_enable+0x20>)
    43ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    43b0:	4b06      	ldr	r3, [pc, #24]	; (43cc <system_gclk_chan_enable+0x24>)
    43b2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    43b4:	4a06      	ldr	r2, [pc, #24]	; (43d0 <system_gclk_chan_enable+0x28>)
    43b6:	8853      	ldrh	r3, [r2, #2]
    43b8:	2180      	movs	r1, #128	; 0x80
    43ba:	01c9      	lsls	r1, r1, #7
    43bc:	430b      	orrs	r3, r1
    43be:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    43c0:	4b04      	ldr	r3, [pc, #16]	; (43d4 <system_gclk_chan_enable+0x2c>)
    43c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    43c4:	bd10      	pop	{r4, pc}
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	00002e25 	.word	0x00002e25
    43cc:	40000c02 	.word	0x40000c02
    43d0:	40000c00 	.word	0x40000c00
    43d4:	00002e65 	.word	0x00002e65

000043d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    43d8:	b510      	push	{r4, lr}
    43da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    43dc:	4b0f      	ldr	r3, [pc, #60]	; (441c <system_gclk_chan_disable+0x44>)
    43de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    43e0:	4b0f      	ldr	r3, [pc, #60]	; (4420 <system_gclk_chan_disable+0x48>)
    43e2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    43e4:	4a0f      	ldr	r2, [pc, #60]	; (4424 <system_gclk_chan_disable+0x4c>)
    43e6:	8853      	ldrh	r3, [r2, #2]
    43e8:	051b      	lsls	r3, r3, #20
    43ea:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    43ec:	8853      	ldrh	r3, [r2, #2]
    43ee:	490e      	ldr	r1, [pc, #56]	; (4428 <system_gclk_chan_disable+0x50>)
    43f0:	400b      	ands	r3, r1
    43f2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    43f4:	8853      	ldrh	r3, [r2, #2]
    43f6:	490d      	ldr	r1, [pc, #52]	; (442c <system_gclk_chan_disable+0x54>)
    43f8:	400b      	ands	r3, r1
    43fa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    43fc:	0011      	movs	r1, r2
    43fe:	2280      	movs	r2, #128	; 0x80
    4400:	01d2      	lsls	r2, r2, #7
    4402:	884b      	ldrh	r3, [r1, #2]
    4404:	4213      	tst	r3, r2
    4406:	d1fc      	bne.n	4402 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4408:	4906      	ldr	r1, [pc, #24]	; (4424 <system_gclk_chan_disable+0x4c>)
    440a:	884a      	ldrh	r2, [r1, #2]
    440c:	0203      	lsls	r3, r0, #8
    440e:	4806      	ldr	r0, [pc, #24]	; (4428 <system_gclk_chan_disable+0x50>)
    4410:	4002      	ands	r2, r0
    4412:	4313      	orrs	r3, r2
    4414:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4416:	4b06      	ldr	r3, [pc, #24]	; (4430 <system_gclk_chan_disable+0x58>)
    4418:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    441a:	bd10      	pop	{r4, pc}
    441c:	00002e25 	.word	0x00002e25
    4420:	40000c02 	.word	0x40000c02
    4424:	40000c00 	.word	0x40000c00
    4428:	fffff0ff 	.word	0xfffff0ff
    442c:	ffffbfff 	.word	0xffffbfff
    4430:	00002e65 	.word	0x00002e65

00004434 <system_gclk_chan_set_config>:
{
    4434:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4436:	780c      	ldrb	r4, [r1, #0]
    4438:	0224      	lsls	r4, r4, #8
    443a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    443c:	4b02      	ldr	r3, [pc, #8]	; (4448 <system_gclk_chan_set_config+0x14>)
    443e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4440:	b2a4      	uxth	r4, r4
    4442:	4b02      	ldr	r3, [pc, #8]	; (444c <system_gclk_chan_set_config+0x18>)
    4444:	805c      	strh	r4, [r3, #2]
}
    4446:	bd10      	pop	{r4, pc}
    4448:	000043d9 	.word	0x000043d9
    444c:	40000c00 	.word	0x40000c00

00004450 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4450:	b510      	push	{r4, lr}
    4452:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4454:	4b06      	ldr	r3, [pc, #24]	; (4470 <system_gclk_chan_get_hz+0x20>)
    4456:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4458:	4b06      	ldr	r3, [pc, #24]	; (4474 <system_gclk_chan_get_hz+0x24>)
    445a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    445c:	4b06      	ldr	r3, [pc, #24]	; (4478 <system_gclk_chan_get_hz+0x28>)
    445e:	885c      	ldrh	r4, [r3, #2]
    4460:	0524      	lsls	r4, r4, #20
    4462:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4464:	4b05      	ldr	r3, [pc, #20]	; (447c <system_gclk_chan_get_hz+0x2c>)
    4466:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4468:	0020      	movs	r0, r4
    446a:	4b05      	ldr	r3, [pc, #20]	; (4480 <system_gclk_chan_get_hz+0x30>)
    446c:	4798      	blx	r3
}
    446e:	bd10      	pop	{r4, pc}
    4470:	00002e25 	.word	0x00002e25
    4474:	40000c02 	.word	0x40000c02
    4478:	40000c00 	.word	0x40000c00
    447c:	00002e65 	.word	0x00002e65
    4480:	0000431d 	.word	0x0000431d

00004484 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4484:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4486:	78d3      	ldrb	r3, [r2, #3]
    4488:	2b00      	cmp	r3, #0
    448a:	d135      	bne.n	44f8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    448c:	7813      	ldrb	r3, [r2, #0]
    448e:	2b80      	cmp	r3, #128	; 0x80
    4490:	d029      	beq.n	44e6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4492:	061b      	lsls	r3, r3, #24
    4494:	2480      	movs	r4, #128	; 0x80
    4496:	0264      	lsls	r4, r4, #9
    4498:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    449a:	7854      	ldrb	r4, [r2, #1]
    449c:	2502      	movs	r5, #2
    449e:	43ac      	bics	r4, r5
    44a0:	d106      	bne.n	44b0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    44a2:	7894      	ldrb	r4, [r2, #2]
    44a4:	2c00      	cmp	r4, #0
    44a6:	d120      	bne.n	44ea <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    44a8:	2480      	movs	r4, #128	; 0x80
    44aa:	02a4      	lsls	r4, r4, #10
    44ac:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    44ae:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    44b0:	7854      	ldrb	r4, [r2, #1]
    44b2:	3c01      	subs	r4, #1
    44b4:	2c01      	cmp	r4, #1
    44b6:	d91c      	bls.n	44f2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    44b8:	040d      	lsls	r5, r1, #16
    44ba:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    44bc:	24a0      	movs	r4, #160	; 0xa0
    44be:	05e4      	lsls	r4, r4, #23
    44c0:	432c      	orrs	r4, r5
    44c2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    44c4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    44c6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    44c8:	24d0      	movs	r4, #208	; 0xd0
    44ca:	0624      	lsls	r4, r4, #24
    44cc:	432c      	orrs	r4, r5
    44ce:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    44d0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    44d2:	78d4      	ldrb	r4, [r2, #3]
    44d4:	2c00      	cmp	r4, #0
    44d6:	d122      	bne.n	451e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    44d8:	035b      	lsls	r3, r3, #13
    44da:	d51c      	bpl.n	4516 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    44dc:	7893      	ldrb	r3, [r2, #2]
    44de:	2b01      	cmp	r3, #1
    44e0:	d01e      	beq.n	4520 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    44e2:	6141      	str	r1, [r0, #20]
    44e4:	e017      	b.n	4516 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    44e6:	2300      	movs	r3, #0
    44e8:	e7d7      	b.n	449a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    44ea:	24c0      	movs	r4, #192	; 0xc0
    44ec:	02e4      	lsls	r4, r4, #11
    44ee:	4323      	orrs	r3, r4
    44f0:	e7dd      	b.n	44ae <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    44f2:	4c0d      	ldr	r4, [pc, #52]	; (4528 <_system_pinmux_config+0xa4>)
    44f4:	4023      	ands	r3, r4
    44f6:	e7df      	b.n	44b8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    44f8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    44fa:	040c      	lsls	r4, r1, #16
    44fc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    44fe:	23a0      	movs	r3, #160	; 0xa0
    4500:	05db      	lsls	r3, r3, #23
    4502:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4504:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4506:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4508:	23d0      	movs	r3, #208	; 0xd0
    450a:	061b      	lsls	r3, r3, #24
    450c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    450e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4510:	78d3      	ldrb	r3, [r2, #3]
    4512:	2b00      	cmp	r3, #0
    4514:	d103      	bne.n	451e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4516:	7853      	ldrb	r3, [r2, #1]
    4518:	3b01      	subs	r3, #1
    451a:	2b01      	cmp	r3, #1
    451c:	d902      	bls.n	4524 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    451e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4520:	6181      	str	r1, [r0, #24]
    4522:	e7f8      	b.n	4516 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4524:	6081      	str	r1, [r0, #8]
}
    4526:	e7fa      	b.n	451e <_system_pinmux_config+0x9a>
    4528:	fffbffff 	.word	0xfffbffff

0000452c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    452c:	b510      	push	{r4, lr}
    452e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4530:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4532:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4534:	2900      	cmp	r1, #0
    4536:	d104      	bne.n	4542 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4538:	0943      	lsrs	r3, r0, #5
    453a:	01db      	lsls	r3, r3, #7
    453c:	4905      	ldr	r1, [pc, #20]	; (4554 <system_pinmux_pin_set_config+0x28>)
    453e:	468c      	mov	ip, r1
    4540:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4542:	241f      	movs	r4, #31
    4544:	4020      	ands	r0, r4
    4546:	2101      	movs	r1, #1
    4548:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    454a:	0018      	movs	r0, r3
    454c:	4b02      	ldr	r3, [pc, #8]	; (4558 <system_pinmux_pin_set_config+0x2c>)
    454e:	4798      	blx	r3
}
    4550:	bd10      	pop	{r4, pc}
    4552:	46c0      	nop			; (mov r8, r8)
    4554:	41004400 	.word	0x41004400
    4558:	00004485 	.word	0x00004485

0000455c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    455c:	b510      	push	{r4, lr}

	/* Initialize EVSYS hardware */
	//_system_events_init();

	/* Initialize External hardware */
	_system_extint_init();
    455e:	4b01      	ldr	r3, [pc, #4]	; (4564 <system_init+0x8>)
    4560:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	//_system_divas_init();
}
    4562:	bd10      	pop	{r4, pc}
    4564:	000034c5 	.word	0x000034c5

00004568 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    4568:	4b09      	ldr	r3, [pc, #36]	; (4590 <_tcc_get_inst_index+0x28>)
    456a:	4298      	cmp	r0, r3
    456c:	d00c      	beq.n	4588 <_tcc_get_inst_index+0x20>
    456e:	4b09      	ldr	r3, [pc, #36]	; (4594 <_tcc_get_inst_index+0x2c>)
    4570:	4298      	cmp	r0, r3
    4572:	d007      	beq.n	4584 <_tcc_get_inst_index+0x1c>
    4574:	4a08      	ldr	r2, [pc, #32]	; (4598 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4576:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    4578:	4290      	cmp	r0, r2
    457a:	d001      	beq.n	4580 <_tcc_get_inst_index+0x18>
}
    457c:	0018      	movs	r0, r3
    457e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    4580:	3302      	adds	r3, #2
    4582:	e002      	b.n	458a <_tcc_get_inst_index+0x22>
    4584:	2301      	movs	r3, #1
    4586:	e000      	b.n	458a <_tcc_get_inst_index+0x22>
    4588:	2300      	movs	r3, #0
			return i;
    458a:	b2db      	uxtb	r3, r3
    458c:	e7f6      	b.n	457c <_tcc_get_inst_index+0x14>
    458e:	46c0      	nop			; (mov r8, r8)
    4590:	42002000 	.word	0x42002000
    4594:	42002400 	.word	0x42002400
    4598:	42002800 	.word	0x42002800

0000459c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    459e:	000f      	movs	r7, r1
    45a0:	0015      	movs	r5, r2
    45a2:	001e      	movs	r6, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    45a4:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    45a6:	0020      	movs	r0, r4
    45a8:	4b13      	ldr	r3, [pc, #76]	; (45f8 <_tcc_set_compare_value+0x5c>)
    45aa:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    45ac:	4b13      	ldr	r3, [pc, #76]	; (45fc <_tcc_set_compare_value+0x60>)
    45ae:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    45b0:	2317      	movs	r3, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    45b2:	42ba      	cmp	r2, r7
    45b4:	d801      	bhi.n	45ba <_tcc_set_compare_value+0x1e>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    45b6:	0018      	movs	r0, r3
    45b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t max_count = _tcc_maxs[module_index];
    45ba:	0080      	lsls	r0, r0, #2
	if (compare > max_count) {
    45bc:	4b10      	ldr	r3, [pc, #64]	; (4600 <_tcc_set_compare_value+0x64>)
    45be:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    45c0:	2317      	movs	r3, #23
	if (compare > max_count) {
    45c2:	42aa      	cmp	r2, r5
    45c4:	d3f7      	bcc.n	45b6 <_tcc_set_compare_value+0x1a>
	if (double_buffering_enabled) {
    45c6:	2e00      	cmp	r6, #0
    45c8:	d00a      	beq.n	45e0 <_tcc_set_compare_value+0x44>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    45ca:	2280      	movs	r2, #128	; 0x80
    45cc:	0312      	lsls	r2, r2, #12
    45ce:	40ba      	lsls	r2, r7
		while(tcc_module->SYNCBUSY.reg  &
    45d0:	68a3      	ldr	r3, [r4, #8]
    45d2:	421a      	tst	r2, r3
    45d4:	d1fc      	bne.n	45d0 <_tcc_set_compare_value+0x34>
		tcc_module->CCB[channel_index].reg = compare;
    45d6:	371c      	adds	r7, #28
    45d8:	00bf      	lsls	r7, r7, #2
    45da:	513d      	str	r5, [r7, r4]
	return STATUS_OK;
    45dc:	2300      	movs	r3, #0
    45de:	e7ea      	b.n	45b6 <_tcc_set_compare_value+0x1a>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    45e0:	2280      	movs	r2, #128	; 0x80
    45e2:	0052      	lsls	r2, r2, #1
    45e4:	40ba      	lsls	r2, r7
    45e6:	68a3      	ldr	r3, [r4, #8]
    45e8:	421a      	tst	r2, r3
    45ea:	d1fc      	bne.n	45e6 <_tcc_set_compare_value+0x4a>
		tcc_module->CC[channel_index].reg = compare;
    45ec:	3710      	adds	r7, #16
    45ee:	00bf      	lsls	r7, r7, #2
    45f0:	19e4      	adds	r4, r4, r7
    45f2:	6065      	str	r5, [r4, #4]
	return STATUS_OK;
    45f4:	2300      	movs	r3, #0
    45f6:	e7de      	b.n	45b6 <_tcc_set_compare_value+0x1a>
    45f8:	00004569 	.word	0x00004569
    45fc:	0000c04c 	.word	0x0000c04c
    4600:	0000c054 	.word	0x0000c054

00004604 <tcc_get_config_defaults>:
{
    4604:	b510      	push	{r4, lr}
    4606:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    4608:	0008      	movs	r0, r1
    460a:	4b4f      	ldr	r3, [pc, #316]	; (4748 <tcc_get_config_defaults+0x144>)
    460c:	4798      	blx	r3
	config->counter.count                  = 0;
    460e:	2300      	movs	r3, #0
    4610:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    4612:	0080      	lsls	r0, r0, #2
    4614:	4a4d      	ldr	r2, [pc, #308]	; (474c <tcc_get_config_defaults+0x148>)
    4616:	5882      	ldr	r2, [r0, r2]
    4618:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    461a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    461c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    461e:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    4620:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    4622:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    4624:	61e3      	str	r3, [r4, #28]
    4626:	6223      	str	r3, [r4, #32]
    4628:	6263      	str	r3, [r4, #36]	; 0x24
    462a:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    462c:	7523      	strb	r3, [r4, #20]
    462e:	7563      	strb	r3, [r4, #21]
    4630:	75a3      	strb	r3, [r4, #22]
    4632:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    4634:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    4636:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    4638:	7423      	strb	r3, [r4, #16]
    463a:	7463      	strb	r3, [r4, #17]
    463c:	74a3      	strb	r3, [r4, #18]
    463e:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    4640:	222c      	movs	r2, #44	; 0x2c
    4642:	54a3      	strb	r3, [r4, r2]
    4644:	3201      	adds	r2, #1
    4646:	54a3      	strb	r3, [r4, r2]
    4648:	3201      	adds	r2, #1
    464a:	54a3      	strb	r3, [r4, r2]
    464c:	3201      	adds	r2, #1
    464e:	54a3      	strb	r3, [r4, r2]
    4650:	3201      	adds	r2, #1
    4652:	54a3      	strb	r3, [r4, r2]
    4654:	3201      	adds	r2, #1
    4656:	54a3      	strb	r3, [r4, r2]
    4658:	3201      	adds	r2, #1
    465a:	54a3      	strb	r3, [r4, r2]
    465c:	3201      	adds	r2, #1
    465e:	54a3      	strb	r3, [r4, r2]
    4660:	3201      	adds	r2, #1
    4662:	54a3      	strb	r3, [r4, r2]
    4664:	3201      	adds	r2, #1
    4666:	54a3      	strb	r3, [r4, r2]
    4668:	3201      	adds	r2, #1
    466a:	54a3      	strb	r3, [r4, r2]
    466c:	3201      	adds	r2, #1
    466e:	54a3      	strb	r3, [r4, r2]
    4670:	3201      	adds	r2, #1
    4672:	54a3      	strb	r3, [r4, r2]
    4674:	3201      	adds	r2, #1
    4676:	54a3      	strb	r3, [r4, r2]
    4678:	3201      	adds	r2, #1
    467a:	54a3      	strb	r3, [r4, r2]
    467c:	3201      	adds	r2, #1
    467e:	54a3      	strb	r3, [r4, r2]
    4680:	3201      	adds	r2, #1
    4682:	54a3      	strb	r3, [r4, r2]
    4684:	3201      	adds	r2, #1
    4686:	54a3      	strb	r3, [r4, r2]
    4688:	3201      	adds	r2, #1
    468a:	54a3      	strb	r3, [r4, r2]
    468c:	3201      	adds	r2, #1
    468e:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    4690:	3201      	adds	r2, #1
    4692:	54a3      	strb	r3, [r4, r2]
    4694:	3201      	adds	r2, #1
    4696:	54a3      	strb	r3, [r4, r2]
    4698:	3201      	adds	r2, #1
    469a:	54a3      	strb	r3, [r4, r2]
    469c:	3201      	adds	r2, #1
    469e:	54a3      	strb	r3, [r4, r2]
    46a0:	3201      	adds	r2, #1
    46a2:	54a3      	strb	r3, [r4, r2]
    46a4:	3201      	adds	r2, #1
    46a6:	54a3      	strb	r3, [r4, r2]
    46a8:	3201      	adds	r2, #1
    46aa:	54a3      	strb	r3, [r4, r2]
    46ac:	3201      	adds	r2, #1
    46ae:	54a3      	strb	r3, [r4, r2]
    46b0:	3201      	adds	r2, #1
    46b2:	54a3      	strb	r3, [r4, r2]
    46b4:	3201      	adds	r2, #1
    46b6:	54a3      	strb	r3, [r4, r2]
    46b8:	3201      	adds	r2, #1
    46ba:	54a3      	strb	r3, [r4, r2]
    46bc:	3201      	adds	r2, #1
    46be:	54a3      	strb	r3, [r4, r2]
    46c0:	3201      	adds	r2, #1
    46c2:	54a3      	strb	r3, [r4, r2]
    46c4:	3201      	adds	r2, #1
    46c6:	54a3      	strb	r3, [r4, r2]
    46c8:	3201      	adds	r2, #1
    46ca:	54a3      	strb	r3, [r4, r2]
    46cc:	3201      	adds	r2, #1
    46ce:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    46d0:	3201      	adds	r2, #1
    46d2:	54a3      	strb	r3, [r4, r2]
    46d4:	3201      	adds	r2, #1
    46d6:	54a3      	strb	r3, [r4, r2]
    46d8:	3201      	adds	r2, #1
    46da:	54a3      	strb	r3, [r4, r2]
    46dc:	3201      	adds	r2, #1
    46de:	54a3      	strb	r3, [r4, r2]
    46e0:	3201      	adds	r2, #1
    46e2:	54a3      	strb	r3, [r4, r2]
    46e4:	3201      	adds	r2, #1
    46e6:	54a3      	strb	r3, [r4, r2]
    46e8:	3201      	adds	r2, #1
    46ea:	54a3      	strb	r3, [r4, r2]
    46ec:	3201      	adds	r2, #1
    46ee:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    46f0:	3241      	adds	r2, #65	; 0x41
    46f2:	54a3      	strb	r3, [r4, r2]
    46f4:	65a3      	str	r3, [r4, #88]	; 0x58
    46f6:	67a3      	str	r3, [r4, #120]	; 0x78
    46f8:	3201      	adds	r2, #1
    46fa:	54a3      	strb	r3, [r4, r2]
    46fc:	65e3      	str	r3, [r4, #92]	; 0x5c
    46fe:	67e3      	str	r3, [r4, #124]	; 0x7c
    4700:	3201      	adds	r2, #1
    4702:	54a3      	strb	r3, [r4, r2]
    4704:	6623      	str	r3, [r4, #96]	; 0x60
    4706:	3a1a      	subs	r2, #26
    4708:	50a3      	str	r3, [r4, r2]
    470a:	321b      	adds	r2, #27
    470c:	54a3      	strb	r3, [r4, r2]
    470e:	6663      	str	r3, [r4, #100]	; 0x64
    4710:	3a17      	subs	r2, #23
    4712:	50a3      	str	r3, [r4, r2]
    4714:	3218      	adds	r2, #24
    4716:	54a3      	strb	r3, [r4, r2]
    4718:	66a3      	str	r3, [r4, #104]	; 0x68
    471a:	3a14      	subs	r2, #20
    471c:	50a3      	str	r3, [r4, r2]
    471e:	3215      	adds	r2, #21
    4720:	54a3      	strb	r3, [r4, r2]
    4722:	66e3      	str	r3, [r4, #108]	; 0x6c
    4724:	3a11      	subs	r2, #17
    4726:	50a3      	str	r3, [r4, r2]
    4728:	3212      	adds	r2, #18
    472a:	54a3      	strb	r3, [r4, r2]
    472c:	6723      	str	r3, [r4, #112]	; 0x70
    472e:	3a0e      	subs	r2, #14
    4730:	50a3      	str	r3, [r4, r2]
    4732:	320f      	adds	r2, #15
    4734:	54a3      	strb	r3, [r4, r2]
    4736:	6763      	str	r3, [r4, #116]	; 0x74
    4738:	3a0b      	subs	r2, #11
    473a:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    473c:	2101      	movs	r1, #1
    473e:	320c      	adds	r2, #12
    4740:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    4742:	3201      	adds	r2, #1
    4744:	54a3      	strb	r3, [r4, r2]
}
    4746:	bd10      	pop	{r4, pc}
    4748:	00004569 	.word	0x00004569
    474c:	0000c054 	.word	0x0000c054

00004750 <tcc_init>:
{
    4750:	b5f0      	push	{r4, r5, r6, r7, lr}
    4752:	46de      	mov	lr, fp
    4754:	4657      	mov	r7, sl
    4756:	464e      	mov	r6, r9
    4758:	4645      	mov	r5, r8
    475a:	b5e0      	push	{r5, r6, r7, lr}
    475c:	b091      	sub	sp, #68	; 0x44
    475e:	9001      	str	r0, [sp, #4]
    4760:	000c      	movs	r4, r1
    4762:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    4764:	0008      	movs	r0, r1
    4766:	4bc3      	ldr	r3, [pc, #780]	; (4a74 <tcc_init+0x324>)
    4768:	4798      	blx	r3
    476a:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    476c:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    476e:	48c2      	ldr	r0, [pc, #776]	; (4a78 <tcc_init+0x328>)
    4770:	6a02      	ldr	r2, [r0, #32]
    4772:	009e      	lsls	r6, r3, #2
    4774:	4fc1      	ldr	r7, [pc, #772]	; (4a7c <tcc_init+0x32c>)
    4776:	59f7      	ldr	r7, [r6, r7]
    4778:	433a      	orrs	r2, r7
    477a:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    477c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    477e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    4780:	0792      	lsls	r2, r2, #30
    4782:	d506      	bpl.n	4792 <tcc_init+0x42>
}
    4784:	b011      	add	sp, #68	; 0x44
    4786:	bc3c      	pop	{r2, r3, r4, r5}
    4788:	4690      	mov	r8, r2
    478a:	4699      	mov	r9, r3
    478c:	46a2      	mov	sl, r4
    478e:	46ab      	mov	fp, r5
    4790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    4792:	6822      	ldr	r2, [r4, #0]
    4794:	2701      	movs	r7, #1
    4796:	4017      	ands	r7, r2
    4798:	d1f4      	bne.n	4784 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    479a:	48b9      	ldr	r0, [pc, #740]	; (4a80 <tcc_init+0x330>)
    479c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    479e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    47a0:	682e      	ldr	r6, [r5, #0]
    47a2:	42b2      	cmp	r2, r6
    47a4:	d3ee      	bcc.n	4784 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    47a6:	686e      	ldr	r6, [r5, #4]
    47a8:	42b2      	cmp	r2, r6
    47aa:	d3eb      	bcc.n	4784 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    47ac:	69e8      	ldr	r0, [r5, #28]
    47ae:	4282      	cmp	r2, r0
    47b0:	d200      	bcs.n	47b4 <tcc_init+0x64>
    47b2:	e1b9      	b.n	4b28 <tcc_init+0x3d8>
    47b4:	6a28      	ldr	r0, [r5, #32]
    47b6:	4282      	cmp	r2, r0
    47b8:	d200      	bcs.n	47bc <tcc_init+0x6c>
    47ba:	e1b7      	b.n	4b2c <tcc_init+0x3dc>
    47bc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    47be:	4282      	cmp	r2, r0
    47c0:	d200      	bcs.n	47c4 <tcc_init+0x74>
    47c2:	e1b5      	b.n	4b30 <tcc_init+0x3e0>
    47c4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    47c6:	4282      	cmp	r2, r0
    47c8:	d200      	bcs.n	47cc <tcc_init+0x7c>
    47ca:	e1b3      	b.n	4b34 <tcc_init+0x3e4>
    47cc:	2298      	movs	r2, #152	; 0x98
    47ce:	4694      	mov	ip, r2
    47d0:	44ac      	add	ip, r5
    47d2:	4662      	mov	r2, ip
    47d4:	9208      	str	r2, [sp, #32]
    47d6:	2000      	movs	r0, #0
    47d8:	e003      	b.n	47e2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    47da:	3001      	adds	r0, #1
    47dc:	3201      	adds	r2, #1
    47de:	2808      	cmp	r0, #8
    47e0:	d008      	beq.n	47f4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    47e2:	7816      	ldrb	r6, [r2, #0]
    47e4:	2e00      	cmp	r6, #0
    47e6:	d0f8      	beq.n	47da <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    47e8:	4ea6      	ldr	r6, [pc, #664]	; (4a84 <tcc_init+0x334>)
    47ea:	5c76      	ldrb	r6, [r6, r1]
    47ec:	4286      	cmp	r6, r0
    47ee:	dcf4      	bgt.n	47da <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    47f0:	2017      	movs	r0, #23
    47f2:	e7c7      	b.n	4784 <tcc_init+0x34>
    47f4:	2200      	movs	r2, #0
    47f6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    47f8:	2080      	movs	r0, #128	; 0x80
    47fa:	0440      	lsls	r0, r0, #17
    47fc:	4684      	mov	ip, r0
    47fe:	e002      	b.n	4806 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    4800:	3201      	adds	r2, #1
    4802:	2a04      	cmp	r2, #4
    4804:	d00e      	beq.n	4824 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    4806:	18a8      	adds	r0, r5, r2
    4808:	7c00      	ldrb	r0, [r0, #16]
    480a:	2801      	cmp	r0, #1
    480c:	d1f8      	bne.n	4800 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    480e:	489e      	ldr	r0, [pc, #632]	; (4a88 <tcc_init+0x338>)
    4810:	5c40      	ldrb	r0, [r0, r1]
    4812:	4290      	cmp	r0, r2
    4814:	da00      	bge.n	4818 <tcc_init+0xc8>
    4816:	e18f      	b.n	4b38 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    4818:	4660      	mov	r0, ip
    481a:	4090      	lsls	r0, r2
    481c:	9e02      	ldr	r6, [sp, #8]
    481e:	4306      	orrs	r6, r0
    4820:	9602      	str	r6, [sp, #8]
    4822:	e7ed      	b.n	4800 <tcc_init+0xb0>
	if (config->run_in_standby) {
    4824:	329d      	adds	r2, #157	; 0x9d
    4826:	5caa      	ldrb	r2, [r5, r2]
    4828:	2a00      	cmp	r2, #0
    482a:	d004      	beq.n	4836 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    482c:	2280      	movs	r2, #128	; 0x80
    482e:	0112      	lsls	r2, r2, #4
    4830:	9902      	ldr	r1, [sp, #8]
    4832:	4311      	orrs	r1, r2
    4834:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    4836:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    4838:	1e51      	subs	r1, r2, #1
    483a:	418a      	sbcs	r2, r1
    483c:	0092      	lsls	r2, r2, #2
    483e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    4840:	7a6a      	ldrb	r2, [r5, #9]
    4842:	2a01      	cmp	r2, #1
    4844:	d022      	beq.n	488c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    4846:	4a90      	ldr	r2, [pc, #576]	; (4a88 <tcc_init+0x338>)
    4848:	5cd2      	ldrb	r2, [r2, r3]
    484a:	0011      	movs	r1, r2
    484c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    484e:	2235      	movs	r2, #53	; 0x35
    4850:	5caa      	ldrb	r2, [r5, r2]
    4852:	428a      	cmp	r2, r1
    4854:	d300      	bcc.n	4858 <tcc_init+0x108>
    4856:	e179      	b.n	4b4c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    4858:	212c      	movs	r1, #44	; 0x2c
    485a:	5c69      	ldrb	r1, [r5, r1]
    485c:	290f      	cmp	r1, #15
    485e:	d900      	bls.n	4862 <tcc_init+0x112>
    4860:	e174      	b.n	4b4c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4862:	7b28      	ldrb	r0, [r5, #12]
    4864:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4866:	7ae8      	ldrb	r0, [r5, #11]
    4868:	900b      	str	r0, [sp, #44]	; 0x2c
    486a:	202d      	movs	r0, #45	; 0x2d
    486c:	4682      	mov	sl, r0
    486e:	44aa      	add	sl, r5
    4870:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    4872:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    4874:	ae0e      	add	r6, sp, #56	; 0x38
    4876:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4878:	26c0      	movs	r6, #192	; 0xc0
    487a:	0136      	lsls	r6, r6, #4
    487c:	46b1      	mov	r9, r6
    487e:	4684      	mov	ip, r0
    4880:	46a0      	mov	r8, r4
    4882:	0028      	movs	r0, r5
    4884:	4655      	mov	r5, sl
    4886:	9309      	str	r3, [sp, #36]	; 0x24
    4888:	4682      	mov	sl, r0
    488a:	e035      	b.n	48f8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    488c:	9906      	ldr	r1, [sp, #24]
    488e:	4311      	orrs	r1, r2
    4890:	9106      	str	r1, [sp, #24]
    4892:	e7d8      	b.n	4846 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    4894:	0292      	lsls	r2, r2, #10
    4896:	464f      	mov	r7, r9
    4898:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    489a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    489c:	7919      	ldrb	r1, [r3, #4]
    489e:	468b      	mov	fp, r1
    48a0:	2103      	movs	r1, #3
    48a2:	465f      	mov	r7, fp
    48a4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    48a6:	430a      	orrs	r2, r1
    48a8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    48aa:	795a      	ldrb	r2, [r3, #5]
    48ac:	0152      	lsls	r2, r2, #5
    48ae:	2160      	movs	r1, #96	; 0x60
    48b0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    48b2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    48b4:	7999      	ldrb	r1, [r3, #6]
    48b6:	0209      	lsls	r1, r1, #8
    48b8:	26c0      	movs	r6, #192	; 0xc0
    48ba:	00b6      	lsls	r6, r6, #2
    48bc:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    48be:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    48c0:	79da      	ldrb	r2, [r3, #7]
    48c2:	0312      	lsls	r2, r2, #12
    48c4:	21e0      	movs	r1, #224	; 0xe0
    48c6:	01c9      	lsls	r1, r1, #7
    48c8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    48ca:	4316      	orrs	r6, r2
    48cc:	4334      	orrs	r4, r6
    48ce:	9a03      	ldr	r2, [sp, #12]
    48d0:	4314      	orrs	r4, r2
    48d2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    48d4:	4662      	mov	r2, ip
    48d6:	9907      	ldr	r1, [sp, #28]
    48d8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    48da:	2a04      	cmp	r2, #4
    48dc:	d02a      	beq.n	4934 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    48de:	7c9a      	ldrb	r2, [r3, #18]
    48e0:	9905      	ldr	r1, [sp, #20]
    48e2:	4291      	cmp	r1, r2
    48e4:	d800      	bhi.n	48e8 <tcc_init+0x198>
    48e6:	e131      	b.n	4b4c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    48e8:	7a59      	ldrb	r1, [r3, #9]
    48ea:	350a      	adds	r5, #10
    48ec:	2304      	movs	r3, #4
    48ee:	469b      	mov	fp, r3
    48f0:	44dc      	add	ip, fp
    48f2:	290f      	cmp	r1, #15
    48f4:	d900      	bls.n	48f8 <tcc_init+0x1a8>
    48f6:	e129      	b.n	4b4c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    48f8:	0609      	lsls	r1, r1, #24
    48fa:	23f0      	movs	r3, #240	; 0xf0
    48fc:	051b      	lsls	r3, r3, #20
    48fe:	4019      	ands	r1, r3
    4900:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    4902:	782e      	ldrb	r6, [r5, #0]
    4904:	0436      	lsls	r6, r6, #16
    4906:	20ff      	movs	r0, #255	; 0xff
    4908:	0400      	lsls	r0, r0, #16
    490a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    490c:	7868      	ldrb	r0, [r5, #1]
    490e:	2480      	movs	r4, #128	; 0x80
    4910:	2800      	cmp	r0, #0
    4912:	d100      	bne.n	4916 <tcc_init+0x1c6>
    4914:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    4916:	7898      	ldrb	r0, [r3, #2]
    4918:	2708      	movs	r7, #8
    491a:	9703      	str	r7, [sp, #12]
    491c:	2800      	cmp	r0, #0
    491e:	d101      	bne.n	4924 <tcc_init+0x1d4>
    4920:	9804      	ldr	r0, [sp, #16]
    4922:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    4924:	78d8      	ldrb	r0, [r3, #3]
    4926:	4683      	mov	fp, r0
    4928:	2010      	movs	r0, #16
    492a:	465f      	mov	r7, fp
    492c:	2f00      	cmp	r7, #0
    492e:	d1b1      	bne.n	4894 <tcc_init+0x144>
    4930:	9804      	ldr	r0, [sp, #16]
    4932:	e7af      	b.n	4894 <tcc_init+0x144>
    4934:	4644      	mov	r4, r8
    4936:	4655      	mov	r5, sl
    4938:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    493a:	4a52      	ldr	r2, [pc, #328]	; (4a84 <tcc_init+0x334>)
    493c:	5cd2      	ldrb	r2, [r2, r3]
    493e:	4691      	mov	r9, r2
    4940:	4651      	mov	r1, sl
    4942:	3150      	adds	r1, #80	; 0x50
    4944:	4650      	mov	r0, sl
    4946:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    4948:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    494a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    494c:	2601      	movs	r6, #1
    494e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    4950:	2602      	movs	r6, #2
    4952:	36ff      	adds	r6, #255	; 0xff
    4954:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4956:	2680      	movs	r6, #128	; 0x80
    4958:	0276      	lsls	r6, r6, #9
    495a:	46b0      	mov	r8, r6
    495c:	46a4      	mov	ip, r4
    495e:	001c      	movs	r4, r3
    4960:	464b      	mov	r3, r9
    4962:	e00f      	b.n	4984 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4964:	7806      	ldrb	r6, [r0, #0]
    4966:	2e00      	cmp	r6, #0
    4968:	d007      	beq.n	497a <tcc_init+0x22a>
			if (i >= ow_num) {
    496a:	4293      	cmp	r3, r2
    496c:	d800      	bhi.n	4970 <tcc_init+0x220>
    496e:	e0e7      	b.n	4b40 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    4970:	2e02      	cmp	r6, #2
    4972:	d014      	beq.n	499e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    4974:	4656      	mov	r6, sl
    4976:	4096      	lsls	r6, r2
    4978:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    497a:	3201      	adds	r2, #1
    497c:	3101      	adds	r1, #1
    497e:	3002      	adds	r0, #2
    4980:	2a08      	cmp	r2, #8
    4982:	d010      	beq.n	49a6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    4984:	780e      	ldrb	r6, [r1, #0]
    4986:	2e00      	cmp	r6, #0
    4988:	d0ec      	beq.n	4964 <tcc_init+0x214>
			if (i >= ow_num) {
    498a:	4293      	cmp	r3, r2
    498c:	d800      	bhi.n	4990 <tcc_init+0x240>
    498e:	e0d5      	b.n	4b3c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    4990:	4646      	mov	r6, r8
    4992:	4096      	lsls	r6, r2
    4994:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    4996:	7806      	ldrb	r6, [r0, #0]
    4998:	2e00      	cmp	r6, #0
    499a:	d1e9      	bne.n	4970 <tcc_init+0x220>
    499c:	e7ed      	b.n	497a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    499e:	465e      	mov	r6, fp
    49a0:	4096      	lsls	r6, r2
    49a2:	4337      	orrs	r7, r6
    49a4:	e7e9      	b.n	497a <tcc_init+0x22a>
    49a6:	4699      	mov	r9, r3
    49a8:	0023      	movs	r3, r4
    49aa:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    49ac:	7e6a      	ldrb	r2, [r5, #25]
    49ae:	0112      	lsls	r2, r2, #4
    49b0:	2130      	movs	r1, #48	; 0x30
    49b2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    49b4:	7e28      	ldrb	r0, [r5, #24]
    49b6:	2207      	movs	r2, #7
    49b8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    49ba:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    49bc:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    49be:	2080      	movs	r0, #128	; 0x80
    49c0:	0240      	lsls	r0, r0, #9
    49c2:	000e      	movs	r6, r1
    49c4:	e002      	b.n	49cc <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    49c6:	3201      	adds	r2, #1
    49c8:	2a04      	cmp	r2, #4
    49ca:	d00b      	beq.n	49e4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    49cc:	18a9      	adds	r1, r5, r2
    49ce:	7d09      	ldrb	r1, [r1, #20]
    49d0:	2900      	cmp	r1, #0
    49d2:	d0f8      	beq.n	49c6 <tcc_init+0x276>
			if (n >= cc_num) {
    49d4:	9905      	ldr	r1, [sp, #20]
    49d6:	4291      	cmp	r1, r2
    49d8:	dc00      	bgt.n	49dc <tcc_init+0x28c>
    49da:	e0b3      	b.n	4b44 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    49dc:	0001      	movs	r1, r0
    49de:	4091      	lsls	r1, r2
    49e0:	430e      	orrs	r6, r1
    49e2:	e7f0      	b.n	49c6 <tcc_init+0x276>
    49e4:	46b2      	mov	sl, r6
    49e6:	9801      	ldr	r0, [sp, #4]
    49e8:	0002      	movs	r2, r0
    49ea:	3204      	adds	r2, #4
    49ec:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    49ee:	2100      	movs	r1, #0
    49f0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    49f2:	4282      	cmp	r2, r0
    49f4:	d1fc      	bne.n	49f0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    49f6:	2200      	movs	r2, #0
    49f8:	9801      	ldr	r0, [sp, #4]
    49fa:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    49fc:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    49fe:	0099      	lsls	r1, r3, #2
    4a00:	4a22      	ldr	r2, [pc, #136]	; (4a8c <tcc_init+0x33c>)
    4a02:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    4a04:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    4a06:	22a0      	movs	r2, #160	; 0xa0
    4a08:	5ca9      	ldrb	r1, [r5, r2]
    4a0a:	3a64      	subs	r2, #100	; 0x64
    4a0c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    4a0e:	a90d      	add	r1, sp, #52	; 0x34
    4a10:	7aaa      	ldrb	r2, [r5, #10]
    4a12:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    4a14:	4a1e      	ldr	r2, [pc, #120]	; (4a90 <tcc_init+0x340>)
    4a16:	5cd6      	ldrb	r6, [r2, r3]
    4a18:	0030      	movs	r0, r6
    4a1a:	4b1e      	ldr	r3, [pc, #120]	; (4a94 <tcc_init+0x344>)
    4a1c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    4a1e:	0030      	movs	r0, r6
    4a20:	4b1d      	ldr	r3, [pc, #116]	; (4a98 <tcc_init+0x348>)
    4a22:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    4a24:	464b      	mov	r3, r9
    4a26:	2b00      	cmp	r3, #0
    4a28:	dd3c      	ble.n	4aa4 <tcc_init+0x354>
    4a2a:	002e      	movs	r6, r5
    4a2c:	3658      	adds	r6, #88	; 0x58
    4a2e:	3398      	adds	r3, #152	; 0x98
    4a30:	4698      	mov	r8, r3
    4a32:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4a34:	2301      	movs	r3, #1
    4a36:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    4a38:	46ab      	mov	fp, r5
    4a3a:	4645      	mov	r5, r8
    4a3c:	46a0      	mov	r8, r4
    4a3e:	9c08      	ldr	r4, [sp, #32]
    4a40:	e003      	b.n	4a4a <tcc_init+0x2fa>
    4a42:	3401      	adds	r4, #1
    4a44:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    4a46:	42ac      	cmp	r4, r5
    4a48:	d02a      	beq.n	4aa0 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    4a4a:	7823      	ldrb	r3, [r4, #0]
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d0f8      	beq.n	4a42 <tcc_init+0x2f2>
    4a50:	ab0c      	add	r3, sp, #48	; 0x30
    4a52:	464a      	mov	r2, r9
    4a54:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4a56:	2300      	movs	r3, #0
    4a58:	aa0c      	add	r2, sp, #48	; 0x30
    4a5a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    4a5c:	0013      	movs	r3, r2
    4a5e:	2220      	movs	r2, #32
    4a60:	18b2      	adds	r2, r6, r2
    4a62:	7812      	ldrb	r2, [r2, #0]
    4a64:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4a66:	464a      	mov	r2, r9
    4a68:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    4a6a:	7830      	ldrb	r0, [r6, #0]
    4a6c:	0019      	movs	r1, r3
    4a6e:	4b0b      	ldr	r3, [pc, #44]	; (4a9c <tcc_init+0x34c>)
    4a70:	4798      	blx	r3
    4a72:	e7e6      	b.n	4a42 <tcc_init+0x2f2>
    4a74:	00004569 	.word	0x00004569
    4a78:	40000400 	.word	0x40000400
    4a7c:	0000c040 	.word	0x0000c040
    4a80:	0000c054 	.word	0x0000c054
    4a84:	0000c060 	.word	0x0000c060
    4a88:	0000c04c 	.word	0x0000c04c
    4a8c:	20000690 	.word	0x20000690
    4a90:	0000c050 	.word	0x0000c050
    4a94:	00004435 	.word	0x00004435
    4a98:	000043a9 	.word	0x000043a9
    4a9c:	0000452d 	.word	0x0000452d
    4aa0:	4644      	mov	r4, r8
    4aa2:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    4aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4aa6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    4aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4aaa:	0212      	lsls	r2, r2, #8
    4aac:	4313      	orrs	r3, r2
    4aae:	9a02      	ldr	r2, [sp, #8]
    4ab0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    4ab2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    4ab4:	2204      	movs	r2, #4
    4ab6:	68a3      	ldr	r3, [r4, #8]
    4ab8:	421a      	tst	r2, r3
    4aba:	d1fc      	bne.n	4ab6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    4abc:	23ff      	movs	r3, #255	; 0xff
    4abe:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    4ac0:	2204      	movs	r2, #4
    4ac2:	68a3      	ldr	r3, [r4, #8]
    4ac4:	421a      	tst	r2, r3
    4ac6:	d1fc      	bne.n	4ac2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    4ac8:	466b      	mov	r3, sp
    4aca:	7e1b      	ldrb	r3, [r3, #24]
    4acc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    4ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ad0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    4ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4ad4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    4ad6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    4ad8:	4a1d      	ldr	r2, [pc, #116]	; (4b50 <tcc_init+0x400>)
    4ada:	68a3      	ldr	r3, [r4, #8]
    4adc:	4213      	tst	r3, r2
    4ade:	d1fc      	bne.n	4ada <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    4ae0:	4653      	mov	r3, sl
    4ae2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    4ae4:	2210      	movs	r2, #16
    4ae6:	68a3      	ldr	r3, [r4, #8]
    4ae8:	421a      	tst	r2, r3
    4aea:	d1fc      	bne.n	4ae6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    4aec:	682b      	ldr	r3, [r5, #0]
    4aee:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    4af0:	4a18      	ldr	r2, [pc, #96]	; (4b54 <tcc_init+0x404>)
    4af2:	68a3      	ldr	r3, [r4, #8]
    4af4:	4213      	tst	r3, r2
    4af6:	d1fc      	bne.n	4af2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    4af8:	686b      	ldr	r3, [r5, #4]
    4afa:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    4afc:	9805      	ldr	r0, [sp, #20]
    4afe:	2800      	cmp	r0, #0
    4b00:	dd22      	ble.n	4b48 <tcc_init+0x3f8>
    4b02:	351c      	adds	r5, #28
    4b04:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    4b06:	4e14      	ldr	r6, [pc, #80]	; (4b58 <tcc_init+0x408>)
    4b08:	0032      	movs	r2, r6
    4b0a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    4b0c:	68a3      	ldr	r3, [r4, #8]
    4b0e:	421a      	tst	r2, r3
    4b10:	d1fc      	bne.n	4b0c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    4b12:	cd04      	ldmia	r5!, {r2}
    4b14:	000b      	movs	r3, r1
    4b16:	3310      	adds	r3, #16
    4b18:	009b      	lsls	r3, r3, #2
    4b1a:	18e3      	adds	r3, r4, r3
    4b1c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    4b1e:	3101      	adds	r1, #1
    4b20:	4288      	cmp	r0, r1
    4b22:	dcf1      	bgt.n	4b08 <tcc_init+0x3b8>
	return STATUS_OK;
    4b24:	2000      	movs	r0, #0
    4b26:	e62d      	b.n	4784 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    4b28:	2017      	movs	r0, #23
    4b2a:	e62b      	b.n	4784 <tcc_init+0x34>
    4b2c:	2017      	movs	r0, #23
    4b2e:	e629      	b.n	4784 <tcc_init+0x34>
    4b30:	2017      	movs	r0, #23
    4b32:	e627      	b.n	4784 <tcc_init+0x34>
    4b34:	2017      	movs	r0, #23
    4b36:	e625      	b.n	4784 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4b38:	2017      	movs	r0, #23
    4b3a:	e623      	b.n	4784 <tcc_init+0x34>
			if (i >= ow_num) {
    4b3c:	2017      	movs	r0, #23
    4b3e:	e621      	b.n	4784 <tcc_init+0x34>
			if (i >= ow_num) {
    4b40:	2017      	movs	r0, #23
    4b42:	e61f      	b.n	4784 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4b44:	2017      	movs	r0, #23
    4b46:	e61d      	b.n	4784 <tcc_init+0x34>
	return STATUS_OK;
    4b48:	2000      	movs	r0, #0
    4b4a:	e61b      	b.n	4784 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    4b4c:	2017      	movs	r0, #23
    4b4e:	e619      	b.n	4784 <tcc_init+0x34>
    4b50:	00020040 	.word	0x00020040
    4b54:	00040080 	.word	0x00040080
    4b58:	00080100 	.word	0x00080100

00004b5c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    4b5c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    4b5e:	233c      	movs	r3, #60	; 0x3c
    4b60:	5cc3      	ldrb	r3, [r0, r3]
    4b62:	4c01      	ldr	r4, [pc, #4]	; (4b68 <tcc_set_compare_value+0xc>)
    4b64:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    4b66:	bd10      	pop	{r4, pc}
    4b68:	0000459d 	.word	0x0000459d

00004b6c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    4b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6e:	46c6      	mov	lr, r8
    4b70:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    4b72:	0080      	lsls	r0, r0, #2
    4b74:	4b0e      	ldr	r3, [pc, #56]	; (4bb0 <_tcc_interrupt_handler+0x44>)
    4b76:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    4b78:	683b      	ldr	r3, [r7, #0]
    4b7a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4b80:	4013      	ands	r3, r2
    4b82:	401e      	ands	r6, r3
    4b84:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4b86:	4b0b      	ldr	r3, [pc, #44]	; (4bb4 <_tcc_interrupt_handler+0x48>)
    4b88:	4698      	mov	r8, r3
    4b8a:	e002      	b.n	4b92 <_tcc_interrupt_handler+0x26>
    4b8c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    4b8e:	2c30      	cmp	r4, #48	; 0x30
    4b90:	d00a      	beq.n	4ba8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    4b92:	4643      	mov	r3, r8
    4b94:	58e5      	ldr	r5, [r4, r3]
    4b96:	4235      	tst	r5, r6
    4b98:	d0f8      	beq.n	4b8c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    4b9a:	193b      	adds	r3, r7, r4
    4b9c:	685b      	ldr	r3, [r3, #4]
    4b9e:	0038      	movs	r0, r7
    4ba0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    4ba2:	683b      	ldr	r3, [r7, #0]
    4ba4:	62dd      	str	r5, [r3, #44]	; 0x2c
    4ba6:	e7f1      	b.n	4b8c <_tcc_interrupt_handler+0x20>
		}
	}
}
    4ba8:	bc04      	pop	{r2}
    4baa:	4690      	mov	r8, r2
    4bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	20000690 	.word	0x20000690
    4bb4:	0000c064 	.word	0x0000c064

00004bb8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    4bb8:	b510      	push	{r4, lr}
    4bba:	2000      	movs	r0, #0
    4bbc:	4b01      	ldr	r3, [pc, #4]	; (4bc4 <TCC0_Handler+0xc>)
    4bbe:	4798      	blx	r3
    4bc0:	bd10      	pop	{r4, pc}
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	00004b6d 	.word	0x00004b6d

00004bc8 <TCC1_Handler>:
    4bc8:	b510      	push	{r4, lr}
    4bca:	2001      	movs	r0, #1
    4bcc:	4b01      	ldr	r3, [pc, #4]	; (4bd4 <TCC1_Handler+0xc>)
    4bce:	4798      	blx	r3
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	00004b6d 	.word	0x00004b6d

00004bd8 <TCC2_Handler>:
    4bd8:	b510      	push	{r4, lr}
    4bda:	2002      	movs	r0, #2
    4bdc:	4b01      	ldr	r3, [pc, #4]	; (4be4 <TCC2_Handler+0xc>)
    4bde:	4798      	blx	r3
    4be0:	bd10      	pop	{r4, pc}
    4be2:	46c0      	nop			; (mov r8, r8)
    4be4:	00004b6d 	.word	0x00004b6d

00004be8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    4be8:	1c93      	adds	r3, r2, #2
    4bea:	009b      	lsls	r3, r3, #2
    4bec:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    4bee:	2a02      	cmp	r2, #2
    4bf0:	d009      	beq.n	4c06 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    4bf2:	2a03      	cmp	r2, #3
    4bf4:	d00c      	beq.n	4c10 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    4bf6:	2301      	movs	r3, #1
    4bf8:	4093      	lsls	r3, r2
    4bfa:	001a      	movs	r2, r3
    4bfc:	7e03      	ldrb	r3, [r0, #24]
    4bfe:	4313      	orrs	r3, r2
    4c00:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    4c02:	2000      	movs	r0, #0
    4c04:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    4c06:	7e03      	ldrb	r3, [r0, #24]
    4c08:	2210      	movs	r2, #16
    4c0a:	4313      	orrs	r3, r2
    4c0c:	7603      	strb	r3, [r0, #24]
    4c0e:	e7f8      	b.n	4c02 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    4c10:	7e03      	ldrb	r3, [r0, #24]
    4c12:	2220      	movs	r2, #32
    4c14:	4313      	orrs	r3, r2
    4c16:	7603      	strb	r3, [r0, #24]
    4c18:	e7f3      	b.n	4c02 <tc_register_callback+0x1a>
	...

00004c1c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    4c1c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    4c1e:	0080      	lsls	r0, r0, #2
    4c20:	4b19      	ldr	r3, [pc, #100]	; (4c88 <_tc_interrupt_handler+0x6c>)
    4c22:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4c24:	6823      	ldr	r3, [r4, #0]
    4c26:	7b9d      	ldrb	r5, [r3, #14]
    4c28:	7e22      	ldrb	r2, [r4, #24]
    4c2a:	7e63      	ldrb	r3, [r4, #25]
    4c2c:	4013      	ands	r3, r2
    4c2e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    4c30:	07eb      	lsls	r3, r5, #31
    4c32:	d40c      	bmi.n	4c4e <_tc_interrupt_handler+0x32>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    4c34:	07ab      	lsls	r3, r5, #30
    4c36:	d411      	bmi.n	4c5c <_tc_interrupt_handler+0x40>
		(module->callback[TC_CALLBACK_ERROR])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}
	
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    4c38:	6823      	ldr	r3, [r4, #0]
    4c3a:	7b9d      	ldrb	r5, [r3, #14]
    4c3c:	7e22      	ldrb	r2, [r4, #24]
    4c3e:	7e63      	ldrb	r3, [r4, #25]
    4c40:	4013      	ands	r3, r2
    4c42:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    4c44:	06eb      	lsls	r3, r5, #27
    4c46:	d410      	bmi.n	4c6a <_tc_interrupt_handler+0x4e>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    4c48:	06ab      	lsls	r3, r5, #26
    4c4a:	d415      	bmi.n	4c78 <_tc_interrupt_handler+0x5c>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    4c4c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    4c4e:	0020      	movs	r0, r4
    4c50:	68a3      	ldr	r3, [r4, #8]
    4c52:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4c54:	2301      	movs	r3, #1
    4c56:	6822      	ldr	r2, [r4, #0]
    4c58:	7393      	strb	r3, [r2, #14]
    4c5a:	e7eb      	b.n	4c34 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    4c5c:	0020      	movs	r0, r4
    4c5e:	68e3      	ldr	r3, [r4, #12]
    4c60:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4c62:	2302      	movs	r3, #2
    4c64:	6822      	ldr	r2, [r4, #0]
    4c66:	7393      	strb	r3, [r2, #14]
    4c68:	e7e6      	b.n	4c38 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    4c6a:	0020      	movs	r0, r4
    4c6c:	6923      	ldr	r3, [r4, #16]
    4c6e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    4c70:	2310      	movs	r3, #16
    4c72:	6822      	ldr	r2, [r4, #0]
    4c74:	7393      	strb	r3, [r2, #14]
    4c76:	e7e7      	b.n	4c48 <_tc_interrupt_handler+0x2c>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    4c78:	0020      	movs	r0, r4
    4c7a:	6963      	ldr	r3, [r4, #20]
    4c7c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    4c7e:	6823      	ldr	r3, [r4, #0]
    4c80:	2220      	movs	r2, #32
    4c82:	739a      	strb	r2, [r3, #14]
}
    4c84:	e7e2      	b.n	4c4c <_tc_interrupt_handler+0x30>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	2000069c 	.word	0x2000069c

00004c8c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    4c8c:	b510      	push	{r4, lr}
    4c8e:	2000      	movs	r0, #0
    4c90:	4b01      	ldr	r3, [pc, #4]	; (4c98 <TC3_Handler+0xc>)
    4c92:	4798      	blx	r3
    4c94:	bd10      	pop	{r4, pc}
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	00004c1d 	.word	0x00004c1d

00004c9c <TC4_Handler>:
    4c9c:	b510      	push	{r4, lr}
    4c9e:	2001      	movs	r0, #1
    4ca0:	4b01      	ldr	r3, [pc, #4]	; (4ca8 <TC4_Handler+0xc>)
    4ca2:	4798      	blx	r3
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	00004c1d 	.word	0x00004c1d

00004cac <TC5_Handler>:
    4cac:	b510      	push	{r4, lr}
    4cae:	2002      	movs	r0, #2
    4cb0:	4b01      	ldr	r3, [pc, #4]	; (4cb8 <TC5_Handler+0xc>)
    4cb2:	4798      	blx	r3
    4cb4:	bd10      	pop	{r4, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	00004c1d 	.word	0x00004c1d

00004cbc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    4cbc:	b530      	push	{r4, r5, lr}
    4cbe:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4cc0:	aa01      	add	r2, sp, #4
    4cc2:	4b0b      	ldr	r3, [pc, #44]	; (4cf0 <_tc_get_inst_index+0x34>)
    4cc4:	cb32      	ldmia	r3!, {r1, r4, r5}
    4cc6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    4cc8:	9b01      	ldr	r3, [sp, #4]
    4cca:	4298      	cmp	r0, r3
    4ccc:	d00d      	beq.n	4cea <_tc_get_inst_index+0x2e>
    4cce:	9b02      	ldr	r3, [sp, #8]
    4cd0:	4298      	cmp	r0, r3
    4cd2:	d008      	beq.n	4ce6 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    4cd4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    4cd6:	9a03      	ldr	r2, [sp, #12]
    4cd8:	4282      	cmp	r2, r0
    4cda:	d002      	beq.n	4ce2 <_tc_get_inst_index+0x26>
}
    4cdc:	0018      	movs	r0, r3
    4cde:	b005      	add	sp, #20
    4ce0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4ce2:	3302      	adds	r3, #2
    4ce4:	e002      	b.n	4cec <_tc_get_inst_index+0x30>
    4ce6:	2301      	movs	r3, #1
    4ce8:	e000      	b.n	4cec <_tc_get_inst_index+0x30>
    4cea:	2300      	movs	r3, #0
			return i;
    4cec:	b2db      	uxtb	r3, r3
    4cee:	e7f5      	b.n	4cdc <_tc_get_inst_index+0x20>
    4cf0:	0000c094 	.word	0x0000c094

00004cf4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    4cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cf6:	b087      	sub	sp, #28
    4cf8:	0004      	movs	r4, r0
    4cfa:	000d      	movs	r5, r1
    4cfc:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    4cfe:	0008      	movs	r0, r1
    4d00:	4b85      	ldr	r3, [pc, #532]	; (4f18 <tc_init+0x224>)
    4d02:	4798      	blx	r3
    4d04:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    4d06:	ab05      	add	r3, sp, #20
    4d08:	221b      	movs	r2, #27
    4d0a:	701a      	strb	r2, [r3, #0]
    4d0c:	3201      	adds	r2, #1
    4d0e:	705a      	strb	r2, [r3, #1]
    4d10:	709a      	strb	r2, [r3, #2]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    4d12:	ab03      	add	r3, sp, #12
    4d14:	2280      	movs	r2, #128	; 0x80
    4d16:	0112      	lsls	r2, r2, #4
    4d18:	801a      	strh	r2, [r3, #0]
    4d1a:	2280      	movs	r2, #128	; 0x80
    4d1c:	0152      	lsls	r2, r2, #5
    4d1e:	805a      	strh	r2, [r3, #2]
    4d20:	2280      	movs	r2, #128	; 0x80
    4d22:	0192      	lsls	r2, r2, #6
    4d24:	809a      	strh	r2, [r3, #4]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    4d26:	2300      	movs	r3, #0
    4d28:	60a3      	str	r3, [r4, #8]
    4d2a:	60e3      	str	r3, [r4, #12]
    4d2c:	6123      	str	r3, [r4, #16]
    4d2e:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    4d30:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    4d32:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    4d34:	0082      	lsls	r2, r0, #2
    4d36:	4b79      	ldr	r3, [pc, #484]	; (4f1c <tc_init+0x228>)
    4d38:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    4d3a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4d3c:	78b3      	ldrb	r3, [r6, #2]
    4d3e:	2b08      	cmp	r3, #8
    4d40:	d006      	beq.n	4d50 <tc_init+0x5c>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    4d42:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4d44:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    4d46:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    4d48:	07db      	lsls	r3, r3, #31
    4d4a:	d505      	bpl.n	4d58 <tc_init+0x64>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    4d4c:	b007      	add	sp, #28
    4d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4d50:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    4d52:	07fa      	lsls	r2, r7, #31
    4d54:	d5fa      	bpl.n	4d4c <tc_init+0x58>
    4d56:	e7f4      	b.n	4d42 <tc_init+0x4e>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4d58:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    4d5a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    4d5c:	06db      	lsls	r3, r3, #27
    4d5e:	d4f5      	bmi.n	4d4c <tc_init+0x58>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    4d60:	882b      	ldrh	r3, [r5, #0]
    4d62:	079b      	lsls	r3, r3, #30
    4d64:	d4f2      	bmi.n	4d4c <tc_init+0x58>
	if (config->pwm_channel[0].enabled) {
    4d66:	7c33      	ldrb	r3, [r6, #16]
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d179      	bne.n	4e60 <tc_init+0x16c>
	if (config->pwm_channel[1].enabled) {
    4d6c:	7f33      	ldrb	r3, [r6, #28]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d000      	beq.n	4d74 <tc_init+0x80>
    4d72:	e081      	b.n	4e78 <tc_init+0x184>
    4d74:	496a      	ldr	r1, [pc, #424]	; (4f20 <tc_init+0x22c>)
    4d76:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    4d78:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4d7a:	ab03      	add	r3, sp, #12
    4d7c:	5ad3      	ldrh	r3, [r2, r3]
    4d7e:	4303      	orrs	r3, r0
    4d80:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    4d82:	78b3      	ldrb	r3, [r6, #2]
    4d84:	2b08      	cmp	r3, #8
    4d86:	d100      	bne.n	4d8a <tc_init+0x96>
    4d88:	e086      	b.n	4e98 <tc_init+0x1a4>
	gclk_chan_config.source_generator = config->clock_source;
    4d8a:	a901      	add	r1, sp, #4
    4d8c:	7833      	ldrb	r3, [r6, #0]
    4d8e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    4d90:	ab05      	add	r3, sp, #20
    4d92:	5ddf      	ldrb	r7, [r3, r7]
    4d94:	0038      	movs	r0, r7
    4d96:	4b63      	ldr	r3, [pc, #396]	; (4f24 <tc_init+0x230>)
    4d98:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    4d9a:	0038      	movs	r0, r7
    4d9c:	4b62      	ldr	r3, [pc, #392]	; (4f28 <tc_init+0x234>)
    4d9e:	4798      	blx	r3
	ctrla_tmp =
    4da0:	8931      	ldrh	r1, [r6, #8]
    4da2:	88b3      	ldrh	r3, [r6, #4]
    4da4:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    4da6:	78b1      	ldrb	r1, [r6, #2]
    4da8:	79b2      	ldrb	r2, [r6, #6]
    4daa:	4311      	orrs	r1, r2
	ctrla_tmp =
    4dac:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    4dae:	7873      	ldrb	r3, [r6, #1]
    4db0:	2b00      	cmp	r3, #0
    4db2:	d002      	beq.n	4dba <tc_init+0xc6>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    4db4:	2380      	movs	r3, #128	; 0x80
    4db6:	011b      	lsls	r3, r3, #4
    4db8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4dba:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4dbc:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4dbe:	b25b      	sxtb	r3, r3
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	dbfb      	blt.n	4dbc <tc_init+0xc8>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    4dc4:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    4dc6:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    4dc8:	1e4b      	subs	r3, r1, #1
    4dca:	4199      	sbcs	r1, r3
    4dcc:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    4dce:	7bb3      	ldrb	r3, [r6, #14]
    4dd0:	2b00      	cmp	r3, #0
    4dd2:	d001      	beq.n	4dd8 <tc_init+0xe4>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    4dd4:	2301      	movs	r3, #1
    4dd6:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4dd8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4dda:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4ddc:	b25b      	sxtb	r3, r3
    4dde:	2b00      	cmp	r3, #0
    4de0:	dbfb      	blt.n	4dda <tc_init+0xe6>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    4de2:	23ff      	movs	r3, #255	; 0xff
    4de4:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    4de6:	2900      	cmp	r1, #0
    4de8:	d005      	beq.n	4df6 <tc_init+0x102>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4dea:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4dec:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    4dee:	b25b      	sxtb	r3, r3
    4df0:	2b00      	cmp	r3, #0
    4df2:	dbfb      	blt.n	4dec <tc_init+0xf8>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    4df4:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    4df6:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    4df8:	7af3      	ldrb	r3, [r6, #11]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d001      	beq.n	4e02 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4dfe:	2310      	movs	r3, #16
    4e00:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    4e02:	7b33      	ldrb	r3, [r6, #12]
    4e04:	2b00      	cmp	r3, #0
    4e06:	d001      	beq.n	4e0c <tc_init+0x118>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    4e08:	2320      	movs	r3, #32
    4e0a:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4e0c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4e0e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4e10:	b25b      	sxtb	r3, r3
    4e12:	2b00      	cmp	r3, #0
    4e14:	dbfb      	blt.n	4e0e <tc_init+0x11a>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    4e16:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4e18:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4e1a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    4e1c:	b25b      	sxtb	r3, r3
    4e1e:	2b00      	cmp	r3, #0
    4e20:	dbfb      	blt.n	4e1a <tc_init+0x126>
	switch (module_inst->counter_size) {
    4e22:	7923      	ldrb	r3, [r4, #4]
    4e24:	2b04      	cmp	r3, #4
    4e26:	d03f      	beq.n	4ea8 <tc_init+0x1b4>
    4e28:	2b08      	cmp	r3, #8
    4e2a:	d05e      	beq.n	4eea <tc_init+0x1f6>
	return STATUS_ERR_INVALID_ARG;
    4e2c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d000      	beq.n	4e34 <tc_init+0x140>
    4e32:	e78b      	b.n	4d4c <tc_init+0x58>
    4e34:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4e36:	b25b      	sxtb	r3, r3
    4e38:	2b00      	cmp	r3, #0
    4e3a:	dbfb      	blt.n	4e34 <tc_init+0x140>
				= config->counter_16_bit.value;
    4e3c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    4e3e:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4e40:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4e42:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4e44:	b25b      	sxtb	r3, r3
    4e46:	2b00      	cmp	r3, #0
    4e48:	dbfb      	blt.n	4e42 <tc_init+0x14e>
					config->counter_16_bit.compare_capture_channel[0];
    4e4a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    4e4c:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4e4e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4e50:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4e52:	b25b      	sxtb	r3, r3
    4e54:	2b00      	cmp	r3, #0
    4e56:	dbfb      	blt.n	4e50 <tc_init+0x15c>
					config->counter_16_bit.compare_capture_channel[1];
    4e58:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    4e5a:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    4e5c:	2000      	movs	r0, #0
    4e5e:	e775      	b.n	4d4c <tc_init+0x58>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e60:	a902      	add	r1, sp, #8
    4e62:	2301      	movs	r3, #1
    4e64:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4e66:	2200      	movs	r2, #0
    4e68:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    4e6a:	7e32      	ldrb	r2, [r6, #24]
    4e6c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4e6e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    4e70:	7d30      	ldrb	r0, [r6, #20]
    4e72:	4b2e      	ldr	r3, [pc, #184]	; (4f2c <tc_init+0x238>)
    4e74:	4798      	blx	r3
    4e76:	e779      	b.n	4d6c <tc_init+0x78>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e78:	a902      	add	r1, sp, #8
    4e7a:	2301      	movs	r3, #1
    4e7c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    4e7e:	2200      	movs	r2, #0
    4e80:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    4e82:	3224      	adds	r2, #36	; 0x24
    4e84:	18b2      	adds	r2, r6, r2
    4e86:	7812      	ldrb	r2, [r2, #0]
    4e88:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    4e8a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    4e8c:	331f      	adds	r3, #31
    4e8e:	18f3      	adds	r3, r6, r3
    4e90:	7818      	ldrb	r0, [r3, #0]
    4e92:	4b26      	ldr	r3, [pc, #152]	; (4f2c <tc_init+0x238>)
    4e94:	4798      	blx	r3
    4e96:	e76d      	b.n	4d74 <tc_init+0x80>
    4e98:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    4e9a:	1c7a      	adds	r2, r7, #1
    4e9c:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    4e9e:	ab03      	add	r3, sp, #12
    4ea0:	5ad3      	ldrh	r3, [r2, r3]
    4ea2:	4303      	orrs	r3, r0
    4ea4:	620b      	str	r3, [r1, #32]
    4ea6:	e770      	b.n	4d8a <tc_init+0x96>
    4ea8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4eaa:	b25b      	sxtb	r3, r3
    4eac:	2b00      	cmp	r3, #0
    4eae:	dbfb      	blt.n	4ea8 <tc_init+0x1b4>
					config->counter_8_bit.value;
    4eb0:	2328      	movs	r3, #40	; 0x28
    4eb2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    4eb4:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4eb6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4eb8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4eba:	b25b      	sxtb	r3, r3
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	dbfb      	blt.n	4eb8 <tc_init+0x1c4>
					config->counter_8_bit.period;
    4ec0:	2329      	movs	r3, #41	; 0x29
    4ec2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    4ec4:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4ec6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4ec8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4eca:	b25b      	sxtb	r3, r3
    4ecc:	2b00      	cmp	r3, #0
    4ece:	dbfb      	blt.n	4ec8 <tc_init+0x1d4>
					config->counter_8_bit.compare_capture_channel[0];
    4ed0:	232a      	movs	r3, #42	; 0x2a
    4ed2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    4ed4:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4ed6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4ed8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4eda:	b25b      	sxtb	r3, r3
    4edc:	2b00      	cmp	r3, #0
    4ede:	dbfb      	blt.n	4ed8 <tc_init+0x1e4>
					config->counter_8_bit.compare_capture_channel[1];
    4ee0:	232b      	movs	r3, #43	; 0x2b
    4ee2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    4ee4:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    4ee6:	2000      	movs	r0, #0
    4ee8:	e730      	b.n	4d4c <tc_init+0x58>
    4eea:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4eec:	b25b      	sxtb	r3, r3
    4eee:	2b00      	cmp	r3, #0
    4ef0:	dbfb      	blt.n	4eea <tc_init+0x1f6>
				= config->counter_32_bit.value;
    4ef2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4ef4:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4ef6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4ef8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4efa:	b25b      	sxtb	r3, r3
    4efc:	2b00      	cmp	r3, #0
    4efe:	dbfb      	blt.n	4ef8 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    4f00:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4f02:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    4f04:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    4f06:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    4f08:	b25b      	sxtb	r3, r3
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	dbfb      	blt.n	4f06 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    4f0e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    4f10:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    4f12:	2000      	movs	r0, #0
    4f14:	e71a      	b.n	4d4c <tc_init+0x58>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	00004cbd 	.word	0x00004cbd
    4f1c:	2000069c 	.word	0x2000069c
    4f20:	40000400 	.word	0x40000400
    4f24:	00004435 	.word	0x00004435
    4f28:	000043a9 	.word	0x000043a9
    4f2c:	0000452d 	.word	0x0000452d

00004f30 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    4f30:	6802      	ldr	r2, [r0, #0]
    4f32:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    4f34:	b25b      	sxtb	r3, r3
    4f36:	2b00      	cmp	r3, #0
    4f38:	dbfb      	blt.n	4f32 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    4f3a:	7903      	ldrb	r3, [r0, #4]
    4f3c:	2b04      	cmp	r3, #4
    4f3e:	d005      	beq.n	4f4c <tc_set_count_value+0x1c>
    4f40:	2b08      	cmp	r3, #8
    4f42:	d00b      	beq.n	4f5c <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    4f44:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4f46:	2b00      	cmp	r3, #0
    4f48:	d004      	beq.n	4f54 <tc_set_count_value+0x24>
	}
}
    4f4a:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    4f4c:	b2c9      	uxtb	r1, r1
    4f4e:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    4f50:	2000      	movs	r0, #0
    4f52:	e7fa      	b.n	4f4a <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    4f54:	b289      	uxth	r1, r1
    4f56:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    4f58:	2000      	movs	r0, #0
    4f5a:	e7f6      	b.n	4f4a <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    4f5c:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    4f5e:	2000      	movs	r0, #0
    4f60:	e7f3      	b.n	4f4a <tc_set_count_value+0x1a>

00004f62 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    4f62:	6802      	ldr	r2, [r0, #0]
    4f64:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    4f66:	b25b      	sxtb	r3, r3
    4f68:	2b00      	cmp	r3, #0
    4f6a:	dbfb      	blt.n	4f64 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    4f6c:	7903      	ldrb	r3, [r0, #4]
    4f6e:	2b04      	cmp	r3, #4
    4f70:	d005      	beq.n	4f7e <tc_get_count_value+0x1c>
    4f72:	2b08      	cmp	r3, #8
    4f74:	d009      	beq.n	4f8a <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    4f76:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d003      	beq.n	4f84 <tc_get_count_value+0x22>
}
    4f7c:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    4f7e:	7c10      	ldrb	r0, [r2, #16]
    4f80:	b2c0      	uxtb	r0, r0
    4f82:	e7fb      	b.n	4f7c <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    4f84:	8a10      	ldrh	r0, [r2, #16]
    4f86:	b280      	uxth	r0, r0
    4f88:	e7f8      	b.n	4f7c <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    4f8a:	6910      	ldr	r0, [r2, #16]
    4f8c:	e7f6      	b.n	4f7c <tc_get_count_value+0x1a>

00004f8e <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    4f8e:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    4f90:	6804      	ldr	r4, [r0, #0]
    4f92:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    4f94:	b25b      	sxtb	r3, r3
    4f96:	2b00      	cmp	r3, #0
    4f98:	dbfb      	blt.n	4f92 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    4f9a:	7903      	ldrb	r3, [r0, #4]
    4f9c:	2b04      	cmp	r3, #4
    4f9e:	d005      	beq.n	4fac <tc_set_compare_value+0x1e>
    4fa0:	2b08      	cmp	r3, #8
    4fa2:	d014      	beq.n	4fce <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    4fa4:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	d008      	beq.n	4fbc <tc_set_compare_value+0x2e>
}
    4faa:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    4fac:	2017      	movs	r0, #23
			if (channel_index <
    4fae:	2901      	cmp	r1, #1
    4fb0:	d8fb      	bhi.n	4faa <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    4fb2:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    4fb4:	1861      	adds	r1, r4, r1
    4fb6:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    4fb8:	2000      	movs	r0, #0
    4fba:	e7f6      	b.n	4faa <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    4fbc:	2017      	movs	r0, #23
			if (channel_index <
    4fbe:	2901      	cmp	r1, #1
    4fc0:	d8f3      	bhi.n	4faa <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    4fc2:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    4fc4:	310c      	adds	r1, #12
    4fc6:	0049      	lsls	r1, r1, #1
    4fc8:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    4fca:	2000      	movs	r0, #0
    4fcc:	e7ed      	b.n	4faa <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    4fce:	2017      	movs	r0, #23
			if (channel_index <
    4fd0:	2901      	cmp	r1, #1
    4fd2:	d8ea      	bhi.n	4faa <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    4fd4:	3106      	adds	r1, #6
    4fd6:	0089      	lsls	r1, r1, #2
    4fd8:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    4fda:	2000      	movs	r0, #0
    4fdc:	e7e5      	b.n	4faa <tc_set_compare_value+0x1c>

00004fde <tc_set_inital_value>:

enum status_code tc_set_inital_value(
const struct tc_module *const module_inst,
const enum tc_compare_capture_channel channel_index,
const uint32_t initial_value)
{
    4fde:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */

	Tc *const tc_module = module_inst->hw;
    4fe0:	6804      	ldr	r4, [r0, #0]
    4fe2:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    4fe4:	b25b      	sxtb	r3, r3
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	dbfb      	blt.n	4fe2 <tc_set_inital_value+0x4>
		/* Wait for sync */
	}
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    4fea:	7903      	ldrb	r3, [r0, #4]
    4fec:	2b04      	cmp	r3, #4
    4fee:	d005      	beq.n	4ffc <tc_set_inital_value+0x1e>
    4ff0:	2b08      	cmp	r3, #8
    4ff2:	d011      	beq.n	5018 <tc_set_inital_value+0x3a>
			(uint32_t)initial_value;
			return STATUS_OK;
		}
	}

	return STATUS_ERR_INVALID_ARG;
    4ff4:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d007      	beq.n	500a <tc_set_inital_value+0x2c>
}
    4ffa:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    4ffc:	2017      	movs	r0, #23
		if (channel_index <
    4ffe:	2901      	cmp	r1, #1
    5000:	d8fb      	bhi.n	4ffa <tc_set_inital_value+0x1c>
			(uint8_t)initial_value;
    5002:	b2d2      	uxtb	r2, r2
			tc_module->COUNT8.COUNT.reg  =
    5004:	7422      	strb	r2, [r4, #16]
			return STATUS_OK;
    5006:	2000      	movs	r0, #0
    5008:	e7f7      	b.n	4ffa <tc_set_inital_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    500a:	2017      	movs	r0, #23
		if (channel_index <
    500c:	2901      	cmp	r1, #1
    500e:	d8f4      	bhi.n	4ffa <tc_set_inital_value+0x1c>
			(uint16_t)initial_value;
    5010:	b292      	uxth	r2, r2
			tc_module->COUNT16.COUNT.reg =
    5012:	8222      	strh	r2, [r4, #16]
			return STATUS_OK;
    5014:	2000      	movs	r0, #0
    5016:	e7f0      	b.n	4ffa <tc_set_inital_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    5018:	2017      	movs	r0, #23
		if (channel_index <
    501a:	2901      	cmp	r1, #1
    501c:	d8ed      	bhi.n	4ffa <tc_set_inital_value+0x1c>
			tc_module->COUNT32.COUNT.reg =
    501e:	6122      	str	r2, [r4, #16]
			return STATUS_OK;
    5020:	2000      	movs	r0, #0
    5022:	e7ea      	b.n	4ffa <tc_set_inital_value+0x1c>

00005024 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    5024:	b510      	push	{r4, lr}
    5026:	b082      	sub	sp, #8
	enum sleepmgr_mode sleep_mode[] = {
    5028:	ab01      	add	r3, sp, #4
    502a:	2200      	movs	r2, #0
    502c:	701a      	strb	r2, [r3, #0]
    502e:	3203      	adds	r2, #3
    5030:	705a      	strb	r2, [r3, #1]
    5032:	3a01      	subs	r2, #1
    5034:	709a      	strb	r2, [r3, #2]
    5036:	3a01      	subs	r2, #1
    5038:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    503a:	4b22      	ldr	r3, [pc, #136]	; (50c4 <udd_sleep_mode+0xa0>)
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	4283      	cmp	r3, r0
    5040:	d03d      	beq.n	50be <udd_sleep_mode+0x9a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    5042:	2800      	cmp	r0, #0
    5044:	d01a      	beq.n	507c <udd_sleep_mode+0x58>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    5046:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    5048:	5c1a      	ldrb	r2, [r3, r0]
    504a:	4b1f      	ldr	r3, [pc, #124]	; (50c8 <udd_sleep_mode+0xa4>)
    504c:	5c9b      	ldrb	r3, [r3, r2]
    504e:	2bff      	cmp	r3, #255	; 0xff
    5050:	d100      	bne.n	5054 <udd_sleep_mode+0x30>
    5052:	e7fe      	b.n	5052 <udd_sleep_mode+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5054:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    5058:	b672      	cpsid	i
    505a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    505e:	2400      	movs	r4, #0
    5060:	491a      	ldr	r1, [pc, #104]	; (50cc <udd_sleep_mode+0xa8>)
    5062:	700c      	strb	r4, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    5064:	4c18      	ldr	r4, [pc, #96]	; (50c8 <udd_sleep_mode+0xa4>)
    5066:	5ca1      	ldrb	r1, [r4, r2]
    5068:	3101      	adds	r1, #1
    506a:	54a1      	strb	r1, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
    506c:	2b00      	cmp	r3, #0
    506e:	d105      	bne.n	507c <udd_sleep_mode+0x58>
		cpu_irq_enable();
    5070:	2201      	movs	r2, #1
    5072:	4b16      	ldr	r3, [pc, #88]	; (50cc <udd_sleep_mode+0xa8>)
    5074:	701a      	strb	r2, [r3, #0]
    5076:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    507a:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    507c:	4b11      	ldr	r3, [pc, #68]	; (50c4 <udd_sleep_mode+0xa0>)
    507e:	781b      	ldrb	r3, [r3, #0]
    5080:	2b00      	cmp	r3, #0
    5082:	d01a      	beq.n	50ba <udd_sleep_mode+0x96>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    5084:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    5086:	5cd2      	ldrb	r2, [r2, r3]
    5088:	4b0f      	ldr	r3, [pc, #60]	; (50c8 <udd_sleep_mode+0xa4>)
    508a:	5c9b      	ldrb	r3, [r3, r2]
    508c:	2b00      	cmp	r3, #0
    508e:	d100      	bne.n	5092 <udd_sleep_mode+0x6e>
    5090:	e7fe      	b.n	5090 <udd_sleep_mode+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5092:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    5096:	b672      	cpsid	i
    5098:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    509c:	2400      	movs	r4, #0
    509e:	490b      	ldr	r1, [pc, #44]	; (50cc <udd_sleep_mode+0xa8>)
    50a0:	700c      	strb	r4, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    50a2:	4c09      	ldr	r4, [pc, #36]	; (50c8 <udd_sleep_mode+0xa4>)
    50a4:	5ca1      	ldrb	r1, [r4, r2]
    50a6:	3901      	subs	r1, #1
    50a8:	54a1      	strb	r1, [r4, r2]
	if (cpu_irq_is_enabled_flags(flags))
    50aa:	2b00      	cmp	r3, #0
    50ac:	d105      	bne.n	50ba <udd_sleep_mode+0x96>
		cpu_irq_enable();
    50ae:	2201      	movs	r2, #1
    50b0:	4b06      	ldr	r3, [pc, #24]	; (50cc <udd_sleep_mode+0xa8>)
    50b2:	701a      	strb	r2, [r3, #0]
    50b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    50b8:	b662      	cpsie	i
	}
	udd_state = new_state;
    50ba:	4b02      	ldr	r3, [pc, #8]	; (50c4 <udd_sleep_mode+0xa0>)
    50bc:	7018      	strb	r0, [r3, #0]
}
    50be:	b002      	add	sp, #8
    50c0:	bd10      	pop	{r4, pc}
    50c2:	46c0      	nop			; (mov r8, r8)
    50c4:	20000394 	.word	0x20000394
    50c8:	20000630 	.word	0x20000630
    50cc:	20000122 	.word	0x20000122

000050d0 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    50d0:	230f      	movs	r3, #15
    50d2:	4003      	ands	r3, r0
    50d4:	005b      	lsls	r3, r3, #1
    50d6:	09c0      	lsrs	r0, r0, #7
    50d8:	1818      	adds	r0, r3, r0
    50da:	3802      	subs	r0, #2
    50dc:	0083      	lsls	r3, r0, #2
    50de:	1818      	adds	r0, r3, r0
    50e0:	0080      	lsls	r0, r0, #2
    50e2:	4b01      	ldr	r3, [pc, #4]	; (50e8 <udd_ep_get_job+0x18>)
    50e4:	1818      	adds	r0, r3, r0
}
    50e6:	4770      	bx	lr
    50e8:	20000344 	.word	0x20000344

000050ec <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    50ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ee:	46d6      	mov	lr, sl
    50f0:	464f      	mov	r7, r9
    50f2:	4646      	mov	r6, r8
    50f4:	b5c0      	push	{r6, r7, lr}
    50f6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    50f8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    50fa:	b26b      	sxtb	r3, r5
    50fc:	2b00      	cmp	r3, #0
    50fe:	db26      	blt.n	514e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    5100:	0028      	movs	r0, r5
    5102:	4b5e      	ldr	r3, [pc, #376]	; (527c <udd_ep_transfer_process+0x190>)
    5104:	4798      	blx	r3
    5106:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    5108:	270f      	movs	r7, #15
    510a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    510c:	8a03      	ldrh	r3, [r0, #16]
    510e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    5110:	464b      	mov	r3, r9
    5112:	881b      	ldrh	r3, [r3, #0]
    5114:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    5116:	7c83      	ldrb	r3, [r0, #18]
    5118:	075b      	lsls	r3, r3, #29
    511a:	d46a      	bmi.n	51f2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    511c:	68e3      	ldr	r3, [r4, #12]
    511e:	4453      	add	r3, sl
    5120:	001e      	movs	r6, r3
    5122:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    5124:	68a3      	ldr	r3, [r4, #8]
    5126:	429e      	cmp	r6, r3
    5128:	d800      	bhi.n	512c <udd_ep_transfer_process+0x40>
    512a:	e074      	b.n	5216 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    512c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    512e:	7ca3      	ldrb	r3, [r4, #18]
    5130:	2201      	movs	r2, #1
    5132:	4393      	bics	r3, r2
    5134:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    5136:	6823      	ldr	r3, [r4, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	d003      	beq.n	5144 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    513c:	68e1      	ldr	r1, [r4, #12]
    513e:	002a      	movs	r2, r5
    5140:	2000      	movs	r0, #0
    5142:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    5144:	bc1c      	pop	{r2, r3, r4}
    5146:	4690      	mov	r8, r2
    5148:	4699      	mov	r9, r3
    514a:	46a2      	mov	sl, r4
    514c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    514e:	0028      	movs	r0, r5
    5150:	4b4a      	ldr	r3, [pc, #296]	; (527c <udd_ep_transfer_process+0x190>)
    5152:	4798      	blx	r3
    5154:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    5156:	270f      	movs	r7, #15
    5158:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    515a:	8a03      	ldrh	r3, [r0, #16]
    515c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    515e:	464b      	mov	r3, r9
    5160:	885e      	ldrh	r6, [r3, #2]
    5162:	68c3      	ldr	r3, [r0, #12]
    5164:	469c      	mov	ip, r3
    5166:	4466      	add	r6, ip
    5168:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    516a:	6881      	ldr	r1, [r0, #8]
    516c:	428e      	cmp	r6, r1
    516e:	d025      	beq.n	51bc <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5170:	1b8d      	subs	r5, r1, r6
    5172:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5174:	4b42      	ldr	r3, [pc, #264]	; (5280 <udd_ep_transfer_process+0x194>)
    5176:	429d      	cmp	r5, r3
    5178:	d906      	bls.n	5188 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    517a:	001d      	movs	r5, r3
    517c:	4641      	mov	r1, r8
    517e:	0018      	movs	r0, r3
    5180:	4b40      	ldr	r3, [pc, #256]	; (5284 <udd_ep_transfer_process+0x198>)
    5182:	4798      	blx	r3
    5184:	1a6d      	subs	r5, r5, r1
    5186:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    5188:	7ca2      	ldrb	r2, [r4, #18]
    518a:	2300      	movs	r3, #0
    518c:	0792      	lsls	r2, r2, #30
    518e:	d507      	bpl.n	51a0 <udd_ep_transfer_process+0xb4>
    5190:	4641      	mov	r1, r8
    5192:	0028      	movs	r0, r5
    5194:	4b3c      	ldr	r3, [pc, #240]	; (5288 <udd_ep_transfer_process+0x19c>)
    5196:	4798      	blx	r3
    5198:	b289      	uxth	r1, r1
    519a:	424b      	negs	r3, r1
    519c:	414b      	adcs	r3, r1
    519e:	b2db      	uxtb	r3, r3
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	7ca2      	ldrb	r2, [r4, #18]
    51a4:	2102      	movs	r1, #2
    51a6:	438a      	bics	r2, r1
    51a8:	4313      	orrs	r3, r2
    51aa:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    51ac:	6862      	ldr	r2, [r4, #4]
    51ae:	1992      	adds	r2, r2, r6
    51b0:	002b      	movs	r3, r5
    51b2:	0039      	movs	r1, r7
    51b4:	4835      	ldr	r0, [pc, #212]	; (528c <udd_ep_transfer_process+0x1a0>)
    51b6:	4c36      	ldr	r4, [pc, #216]	; (5290 <udd_ep_transfer_process+0x1a4>)
    51b8:	47a0      	blx	r4
    51ba:	e7c3      	b.n	5144 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    51bc:	7c83      	ldrb	r3, [r0, #18]
    51be:	079b      	lsls	r3, r3, #30
    51c0:	d40b      	bmi.n	51da <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    51c2:	7c83      	ldrb	r3, [r0, #18]
    51c4:	2201      	movs	r2, #1
    51c6:	4393      	bics	r3, r2
    51c8:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    51ca:	6803      	ldr	r3, [r0, #0]
    51cc:	2b00      	cmp	r3, #0
    51ce:	d0b9      	beq.n	5144 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    51d0:	002a      	movs	r2, r5
    51d2:	0031      	movs	r1, r6
    51d4:	2000      	movs	r0, #0
    51d6:	4798      	blx	r3
    51d8:	e7b4      	b.n	5144 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    51da:	7c83      	ldrb	r3, [r0, #18]
    51dc:	2202      	movs	r2, #2
    51de:	4393      	bics	r3, r2
    51e0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    51e2:	6842      	ldr	r2, [r0, #4]
    51e4:	1992      	adds	r2, r2, r6
    51e6:	2300      	movs	r3, #0
    51e8:	0039      	movs	r1, r7
    51ea:	4828      	ldr	r0, [pc, #160]	; (528c <udd_ep_transfer_process+0x1a0>)
    51ec:	4c28      	ldr	r4, [pc, #160]	; (5290 <udd_ep_transfer_process+0x1a4>)
    51ee:	47a0      	blx	r4
    51f0:	e7a8      	b.n	5144 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    51f2:	6843      	ldr	r3, [r0, #4]
    51f4:	68c2      	ldr	r2, [r0, #12]
    51f6:	4694      	mov	ip, r2
    51f8:	4463      	add	r3, ip
    51fa:	001e      	movs	r6, r3
    51fc:	4641      	mov	r1, r8
    51fe:	6880      	ldr	r0, [r0, #8]
    5200:	4b21      	ldr	r3, [pc, #132]	; (5288 <udd_ep_transfer_process+0x19c>)
    5202:	4798      	blx	r3
    5204:	000a      	movs	r2, r1
    5206:	1e7b      	subs	r3, r7, #1
    5208:	019b      	lsls	r3, r3, #6
    520a:	4922      	ldr	r1, [pc, #136]	; (5294 <udd_ep_transfer_process+0x1a8>)
    520c:	1859      	adds	r1, r3, r1
    520e:	0030      	movs	r0, r6
    5210:	4b21      	ldr	r3, [pc, #132]	; (5298 <udd_ep_transfer_process+0x1ac>)
    5212:	4798      	blx	r3
    5214:	e782      	b.n	511c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    5216:	464a      	mov	r2, r9
    5218:	8892      	ldrh	r2, [r2, #4]
    521a:	4552      	cmp	r2, sl
    521c:	d000      	beq.n	5220 <udd_ep_transfer_process+0x134>
    521e:	e786      	b.n	512e <udd_ep_transfer_process+0x42>
    5220:	429e      	cmp	r6, r3
    5222:	d100      	bne.n	5226 <udd_ep_transfer_process+0x13a>
    5224:	e783      	b.n	512e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    5226:	1b9b      	subs	r3, r3, r6
    5228:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    522a:	4b15      	ldr	r3, [pc, #84]	; (5280 <udd_ep_transfer_process+0x194>)
    522c:	429d      	cmp	r5, r3
    522e:	d916      	bls.n	525e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    5230:	001d      	movs	r5, r3
    5232:	4641      	mov	r1, r8
    5234:	0018      	movs	r0, r3
    5236:	4b13      	ldr	r3, [pc, #76]	; (5284 <udd_ep_transfer_process+0x198>)
    5238:	4798      	blx	r3
    523a:	1a6b      	subs	r3, r5, r1
    523c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    523e:	4598      	cmp	r8, r3
    5240:	d914      	bls.n	526c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    5242:	7ca3      	ldrb	r3, [r4, #18]
    5244:	2204      	movs	r2, #4
    5246:	4313      	orrs	r3, r2
    5248:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    524a:	1e7a      	subs	r2, r7, #1
    524c:	0192      	lsls	r2, r2, #6
    524e:	4b11      	ldr	r3, [pc, #68]	; (5294 <udd_ep_transfer_process+0x1a8>)
    5250:	18d2      	adds	r2, r2, r3
    5252:	4643      	mov	r3, r8
    5254:	0039      	movs	r1, r7
    5256:	480d      	ldr	r0, [pc, #52]	; (528c <udd_ep_transfer_process+0x1a0>)
    5258:	4c10      	ldr	r4, [pc, #64]	; (529c <udd_ep_transfer_process+0x1b0>)
    525a:	47a0      	blx	r4
    525c:	e772      	b.n	5144 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    525e:	4641      	mov	r1, r8
    5260:	0028      	movs	r0, r5
    5262:	4b09      	ldr	r3, [pc, #36]	; (5288 <udd_ep_transfer_process+0x19c>)
    5264:	4798      	blx	r3
    5266:	1a6b      	subs	r3, r5, r1
    5268:	b29b      	uxth	r3, r3
    526a:	e7e8      	b.n	523e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    526c:	6862      	ldr	r2, [r4, #4]
    526e:	1992      	adds	r2, r2, r6
    5270:	0039      	movs	r1, r7
    5272:	4806      	ldr	r0, [pc, #24]	; (528c <udd_ep_transfer_process+0x1a0>)
    5274:	4c09      	ldr	r4, [pc, #36]	; (529c <udd_ep_transfer_process+0x1b0>)
    5276:	47a0      	blx	r4
    5278:	e764      	b.n	5144 <udd_ep_transfer_process+0x58>
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	000050d1 	.word	0x000050d1
    5280:	00001fff 	.word	0x00001fff
    5284:	00009009 	.word	0x00009009
    5288:	00008e35 	.word	0x00008e35
    528c:	20000728 	.word	0x20000728
    5290:	0000627d 	.word	0x0000627d
    5294:	200006a8 	.word	0x200006a8
    5298:	0000bcdd 	.word	0x0000bcdd
    529c:	000062d1 	.word	0x000062d1

000052a0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    52a0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    52a2:	2205      	movs	r2, #5
    52a4:	4b05      	ldr	r3, [pc, #20]	; (52bc <udd_ctrl_stall_data+0x1c>)
    52a6:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    52a8:	4c05      	ldr	r4, [pc, #20]	; (52c0 <udd_ctrl_stall_data+0x20>)
    52aa:	2180      	movs	r1, #128	; 0x80
    52ac:	0020      	movs	r0, r4
    52ae:	4b05      	ldr	r3, [pc, #20]	; (52c4 <udd_ctrl_stall_data+0x24>)
    52b0:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    52b2:	2100      	movs	r1, #0
    52b4:	0020      	movs	r0, r4
    52b6:	4b04      	ldr	r3, [pc, #16]	; (52c8 <udd_ctrl_stall_data+0x28>)
    52b8:	4798      	blx	r3
}
    52ba:	bd10      	pop	{r4, pc}
    52bc:	20000342 	.word	0x20000342
    52c0:	20000728 	.word	0x20000728
    52c4:	000061d1 	.word	0x000061d1
    52c8:	000061f7 	.word	0x000061f7

000052cc <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    52cc:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    52ce:	4c08      	ldr	r4, [pc, #32]	; (52f0 <_usb_device_lpm_suspend+0x24>)
    52d0:	2106      	movs	r1, #6
    52d2:	0020      	movs	r0, r4
    52d4:	4d07      	ldr	r5, [pc, #28]	; (52f4 <_usb_device_lpm_suspend+0x28>)
    52d6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    52d8:	2104      	movs	r1, #4
    52da:	0020      	movs	r0, r4
    52dc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    52de:	2102      	movs	r1, #2
    52e0:	0020      	movs	r0, r4
    52e2:	4b05      	ldr	r3, [pc, #20]	; (52f8 <_usb_device_lpm_suspend+0x2c>)
    52e4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    52e6:	2002      	movs	r0, #2
    52e8:	4b04      	ldr	r3, [pc, #16]	; (52fc <_usb_device_lpm_suspend+0x30>)
    52ea:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    52ec:	bd70      	pop	{r4, r5, r6, pc}
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	20000728 	.word	0x20000728
    52f4:	00005d11 	.word	0x00005d11
    52f8:	00005cf1 	.word	0x00005cf1
    52fc:	00005025 	.word	0x00005025

00005300 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    5300:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5302:	4b13      	ldr	r3, [pc, #76]	; (5350 <_usb_on_wakeup+0x50>)
    5304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5306:	069b      	lsls	r3, r3, #26
    5308:	d41c      	bmi.n	5344 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    530a:	4911      	ldr	r1, [pc, #68]	; (5350 <_usb_on_wakeup+0x50>)
    530c:	22d0      	movs	r2, #208	; 0xd0
    530e:	68cb      	ldr	r3, [r1, #12]
    5310:	4013      	ands	r3, r2
    5312:	2bd0      	cmp	r3, #208	; 0xd0
    5314:	d1fb      	bne.n	530e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5316:	4c0f      	ldr	r4, [pc, #60]	; (5354 <_usb_on_wakeup+0x54>)
    5318:	2102      	movs	r1, #2
    531a:	0020      	movs	r0, r4
    531c:	4b0e      	ldr	r3, [pc, #56]	; (5358 <_usb_on_wakeup+0x58>)
    531e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5320:	2104      	movs	r1, #4
    5322:	0020      	movs	r0, r4
    5324:	4d0d      	ldr	r5, [pc, #52]	; (535c <_usb_on_wakeup+0x5c>)
    5326:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5328:	4a0d      	ldr	r2, [pc, #52]	; (5360 <_usb_on_wakeup+0x60>)
    532a:	2106      	movs	r1, #6
    532c:	0020      	movs	r0, r4
    532e:	4b0d      	ldr	r3, [pc, #52]	; (5364 <_usb_on_wakeup+0x64>)
    5330:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5332:	2106      	movs	r1, #6
    5334:	0020      	movs	r0, r4
    5336:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    5338:	2003      	movs	r0, #3
    533a:	4b0b      	ldr	r3, [pc, #44]	; (5368 <_usb_on_wakeup+0x68>)
    533c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    533e:	4b0b      	ldr	r3, [pc, #44]	; (536c <_usb_on_wakeup+0x6c>)
    5340:	4798      	blx	r3
#endif
}
    5342:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5344:	4902      	ldr	r1, [pc, #8]	; (5350 <_usb_on_wakeup+0x50>)
    5346:	2210      	movs	r2, #16
    5348:	68cb      	ldr	r3, [r1, #12]
    534a:	421a      	tst	r2, r3
    534c:	d0fc      	beq.n	5348 <_usb_on_wakeup+0x48>
    534e:	e7e2      	b.n	5316 <_usb_on_wakeup+0x16>
    5350:	40000800 	.word	0x40000800
    5354:	20000728 	.word	0x20000728
    5358:	00005d11 	.word	0x00005d11
    535c:	00005cf1 	.word	0x00005cf1
    5360:	000052cd 	.word	0x000052cd
    5364:	00005ccd 	.word	0x00005ccd
    5368:	00005025 	.word	0x00005025
    536c:	0000795d 	.word	0x0000795d

00005370 <_usb_on_bus_reset>:
{
    5370:	b570      	push	{r4, r5, r6, lr}
    5372:	b082      	sub	sp, #8
    5374:	0004      	movs	r4, r0
	udc_reset();
    5376:	4b1e      	ldr	r3, [pc, #120]	; (53f0 <_usb_on_bus_reset+0x80>)
    5378:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    537a:	2380      	movs	r3, #128	; 0x80
    537c:	6822      	ldr	r2, [r4, #0]
    537e:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    5380:	ad01      	add	r5, sp, #4
    5382:	0028      	movs	r0, r5
    5384:	4b1b      	ldr	r3, [pc, #108]	; (53f4 <_usb_on_bus_reset+0x84>)
    5386:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    5388:	2600      	movs	r6, #0
    538a:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    538c:	0029      	movs	r1, r5
    538e:	0020      	movs	r0, r4
    5390:	4b19      	ldr	r3, [pc, #100]	; (53f8 <_usb_on_bus_reset+0x88>)
    5392:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    5394:	4919      	ldr	r1, [pc, #100]	; (53fc <_usb_on_bus_reset+0x8c>)
    5396:	0020      	movs	r0, r4
    5398:	4b19      	ldr	r3, [pc, #100]	; (5400 <_usb_on_bus_reset+0x90>)
    539a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    539c:	4b19      	ldr	r3, [pc, #100]	; (5404 <_usb_on_bus_reset+0x94>)
    539e:	2202      	movs	r2, #2
    53a0:	2100      	movs	r1, #0
    53a2:	0020      	movs	r0, r4
    53a4:	4d18      	ldr	r5, [pc, #96]	; (5408 <_usb_on_bus_reset+0x98>)
    53a6:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    53a8:	4b18      	ldr	r3, [pc, #96]	; (540c <_usb_on_bus_reset+0x9c>)
    53aa:	2200      	movs	r2, #0
    53ac:	2100      	movs	r1, #0
    53ae:	0020      	movs	r0, r4
    53b0:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    53b2:	4b17      	ldr	r3, [pc, #92]	; (5410 <_usb_on_bus_reset+0xa0>)
    53b4:	2201      	movs	r2, #1
    53b6:	2100      	movs	r1, #0
    53b8:	0020      	movs	r0, r4
    53ba:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    53bc:	2202      	movs	r2, #2
    53be:	2100      	movs	r1, #0
    53c0:	0020      	movs	r0, r4
    53c2:	4d14      	ldr	r5, [pc, #80]	; (5414 <_usb_on_bus_reset+0xa4>)
    53c4:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    53c6:	2200      	movs	r2, #0
    53c8:	2100      	movs	r1, #0
    53ca:	0020      	movs	r0, r4
    53cc:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    53ce:	2201      	movs	r2, #1
    53d0:	2100      	movs	r1, #0
    53d2:	0020      	movs	r0, r4
    53d4:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    53d6:	6821      	ldr	r1, [r4, #0]
    53d8:	890b      	ldrh	r3, [r1, #8]
    53da:	4a0f      	ldr	r2, [pc, #60]	; (5418 <_usb_on_bus_reset+0xa8>)
    53dc:	401a      	ands	r2, r3
    53de:	2380      	movs	r3, #128	; 0x80
    53e0:	00db      	lsls	r3, r3, #3
    53e2:	4313      	orrs	r3, r2
    53e4:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    53e6:	4b0d      	ldr	r3, [pc, #52]	; (541c <_usb_on_bus_reset+0xac>)
    53e8:	701e      	strb	r6, [r3, #0]
}
    53ea:	b002      	add	sp, #8
    53ec:	bd70      	pop	{r4, r5, r6, pc}
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	00002911 	.word	0x00002911
    53f4:	00005f1d 	.word	0x00005f1d
    53f8:	00005f2d 	.word	0x00005f2d
    53fc:	200008a8 	.word	0x200008a8
    5400:	00006321 	.word	0x00006321
    5404:	00005559 	.word	0x00005559
    5408:	00005d2d 	.word	0x00005d2d
    540c:	00005875 	.word	0x00005875
    5410:	0000545d 	.word	0x0000545d
    5414:	00005d7d 	.word	0x00005d7d
    5418:	fffff3ff 	.word	0xfffff3ff
    541c:	20000342 	.word	0x20000342

00005420 <udd_ctrl_send_zlp_in>:
{
    5420:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    5422:	2203      	movs	r2, #3
    5424:	4b07      	ldr	r3, [pc, #28]	; (5444 <udd_ctrl_send_zlp_in+0x24>)
    5426:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5428:	4c07      	ldr	r4, [pc, #28]	; (5448 <udd_ctrl_send_zlp_in+0x28>)
    542a:	4908      	ldr	r1, [pc, #32]	; (544c <udd_ctrl_send_zlp_in+0x2c>)
    542c:	0020      	movs	r0, r4
    542e:	4b08      	ldr	r3, [pc, #32]	; (5450 <udd_ctrl_send_zlp_in+0x30>)
    5430:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    5432:	4b08      	ldr	r3, [pc, #32]	; (5454 <udd_ctrl_send_zlp_in+0x34>)
    5434:	689a      	ldr	r2, [r3, #8]
    5436:	2300      	movs	r3, #0
    5438:	2100      	movs	r1, #0
    543a:	0020      	movs	r0, r4
    543c:	4c06      	ldr	r4, [pc, #24]	; (5458 <udd_ctrl_send_zlp_in+0x38>)
    543e:	47a0      	blx	r4
}
    5440:	bd10      	pop	{r4, pc}
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	20000342 	.word	0x20000342
    5448:	20000728 	.word	0x20000728
    544c:	200008a8 	.word	0x200008a8
    5450:	00006321 	.word	0x00006321
    5454:	20000890 	.word	0x20000890
    5458:	0000627d 	.word	0x0000627d

0000545c <_usb_ep0_on_tansfer_fail>:
{
    545c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    545e:	7989      	ldrb	r1, [r1, #6]
    5460:	b24b      	sxtb	r3, r1
    5462:	2b00      	cmp	r3, #0
    5464:	db06      	blt.n	5474 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5466:	4b0e      	ldr	r3, [pc, #56]	; (54a0 <_usb_ep0_on_tansfer_fail+0x44>)
    5468:	781b      	ldrb	r3, [r3, #0]
    546a:	2b02      	cmp	r3, #2
    546c:	d00f      	beq.n	548e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    546e:	2b03      	cmp	r3, #3
    5470:	d011      	beq.n	5496 <_usb_ep0_on_tansfer_fail+0x3a>
}
    5472:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5474:	4b0a      	ldr	r3, [pc, #40]	; (54a0 <_usb_ep0_on_tansfer_fail+0x44>)
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	2b01      	cmp	r3, #1
    547a:	d005      	beq.n	5488 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    547c:	2b04      	cmp	r3, #4
    547e:	d1f8      	bne.n	5472 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    5480:	4808      	ldr	r0, [pc, #32]	; (54a4 <_usb_ep0_on_tansfer_fail+0x48>)
    5482:	4b09      	ldr	r3, [pc, #36]	; (54a8 <_usb_ep0_on_tansfer_fail+0x4c>)
    5484:	4798      	blx	r3
    5486:	e7f4      	b.n	5472 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    5488:	4b08      	ldr	r3, [pc, #32]	; (54ac <_usb_ep0_on_tansfer_fail+0x50>)
    548a:	4798      	blx	r3
    548c:	e7f1      	b.n	5472 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    548e:	2204      	movs	r2, #4
    5490:	4b03      	ldr	r3, [pc, #12]	; (54a0 <_usb_ep0_on_tansfer_fail+0x44>)
    5492:	701a      	strb	r2, [r3, #0]
    5494:	e7ed      	b.n	5472 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    5496:	4803      	ldr	r0, [pc, #12]	; (54a4 <_usb_ep0_on_tansfer_fail+0x48>)
    5498:	4b03      	ldr	r3, [pc, #12]	; (54a8 <_usb_ep0_on_tansfer_fail+0x4c>)
    549a:	4798      	blx	r3
}
    549c:	e7e9      	b.n	5472 <_usb_ep0_on_tansfer_fail+0x16>
    549e:	46c0      	nop			; (mov r8, r8)
    54a0:	20000342 	.word	0x20000342
    54a4:	20000728 	.word	0x20000728
    54a8:	000061d1 	.word	0x000061d1
    54ac:	00005421 	.word	0x00005421

000054b0 <udd_ctrl_in_sent>:
{
    54b0:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    54b2:	4b20      	ldr	r3, [pc, #128]	; (5534 <udd_ctrl_in_sent+0x84>)
    54b4:	881b      	ldrh	r3, [r3, #0]
    54b6:	4a20      	ldr	r2, [pc, #128]	; (5538 <udd_ctrl_in_sent+0x88>)
    54b8:	8994      	ldrh	r4, [r2, #12]
    54ba:	1ae4      	subs	r4, r4, r3
    54bc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    54be:	2c00      	cmp	r4, #0
    54c0:	d118      	bne.n	54f4 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    54c2:	4a1e      	ldr	r2, [pc, #120]	; (553c <udd_ctrl_in_sent+0x8c>)
    54c4:	8811      	ldrh	r1, [r2, #0]
    54c6:	185b      	adds	r3, r3, r1
    54c8:	b29b      	uxth	r3, r3
    54ca:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    54cc:	4a1a      	ldr	r2, [pc, #104]	; (5538 <udd_ctrl_in_sent+0x88>)
    54ce:	88d2      	ldrh	r2, [r2, #6]
    54d0:	429a      	cmp	r2, r3
    54d2:	d023      	beq.n	551c <udd_ctrl_in_sent+0x6c>
    54d4:	4b1a      	ldr	r3, [pc, #104]	; (5540 <udd_ctrl_in_sent+0x90>)
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	2b00      	cmp	r3, #0
    54da:	d11f      	bne.n	551c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    54dc:	4b16      	ldr	r3, [pc, #88]	; (5538 <udd_ctrl_in_sent+0x88>)
    54de:	695b      	ldr	r3, [r3, #20]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d023      	beq.n	552c <udd_ctrl_in_sent+0x7c>
    54e4:	4798      	blx	r3
    54e6:	2800      	cmp	r0, #0
    54e8:	d020      	beq.n	552c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    54ea:	2200      	movs	r2, #0
    54ec:	4b11      	ldr	r3, [pc, #68]	; (5534 <udd_ctrl_in_sent+0x84>)
    54ee:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    54f0:	4b11      	ldr	r3, [pc, #68]	; (5538 <udd_ctrl_in_sent+0x88>)
    54f2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    54f4:	2c07      	cmp	r4, #7
    54f6:	d919      	bls.n	552c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    54f8:	2200      	movs	r2, #0
    54fa:	4b11      	ldr	r3, [pc, #68]	; (5540 <udd_ctrl_in_sent+0x90>)
    54fc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    54fe:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    5500:	4d0c      	ldr	r5, [pc, #48]	; (5534 <udd_ctrl_in_sent+0x84>)
    5502:	882b      	ldrh	r3, [r5, #0]
    5504:	4a0c      	ldr	r2, [pc, #48]	; (5538 <udd_ctrl_in_sent+0x88>)
    5506:	6892      	ldr	r2, [r2, #8]
    5508:	18d2      	adds	r2, r2, r3
    550a:	0023      	movs	r3, r4
    550c:	2100      	movs	r1, #0
    550e:	480d      	ldr	r0, [pc, #52]	; (5544 <udd_ctrl_in_sent+0x94>)
    5510:	4e0d      	ldr	r6, [pc, #52]	; (5548 <udd_ctrl_in_sent+0x98>)
    5512:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    5514:	882b      	ldrh	r3, [r5, #0]
    5516:	18e4      	adds	r4, r4, r3
    5518:	802c      	strh	r4, [r5, #0]
}
    551a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    551c:	2204      	movs	r2, #4
    551e:	4b0b      	ldr	r3, [pc, #44]	; (554c <udd_ctrl_in_sent+0x9c>)
    5520:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    5522:	490b      	ldr	r1, [pc, #44]	; (5550 <udd_ctrl_in_sent+0xa0>)
    5524:	4807      	ldr	r0, [pc, #28]	; (5544 <udd_ctrl_in_sent+0x94>)
    5526:	4b0b      	ldr	r3, [pc, #44]	; (5554 <udd_ctrl_in_sent+0xa4>)
    5528:	4798      	blx	r3
			return;
    552a:	e7f6      	b.n	551a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    552c:	2201      	movs	r2, #1
    552e:	4b04      	ldr	r3, [pc, #16]	; (5540 <udd_ctrl_in_sent+0x90>)
    5530:	701a      	strb	r2, [r3, #0]
    5532:	e7e5      	b.n	5500 <udd_ctrl_in_sent+0x50>
    5534:	2000033e 	.word	0x2000033e
    5538:	20000890 	.word	0x20000890
    553c:	20000340 	.word	0x20000340
    5540:	2000033c 	.word	0x2000033c
    5544:	20000728 	.word	0x20000728
    5548:	0000627d 	.word	0x0000627d
    554c:	20000342 	.word	0x20000342
    5550:	200008a8 	.word	0x200008a8
    5554:	00006321 	.word	0x00006321

00005558 <_usb_ep0_on_setup>:
{
    5558:	b510      	push	{r4, lr}
    555a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    555c:	4b2c      	ldr	r3, [pc, #176]	; (5610 <_usb_ep0_on_setup+0xb8>)
    555e:	781b      	ldrb	r3, [r3, #0]
    5560:	2b00      	cmp	r3, #0
    5562:	d007      	beq.n	5574 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    5564:	4b2b      	ldr	r3, [pc, #172]	; (5614 <_usb_ep0_on_setup+0xbc>)
    5566:	691b      	ldr	r3, [r3, #16]
    5568:	2b00      	cmp	r3, #0
    556a:	d000      	beq.n	556e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    556c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    556e:	2200      	movs	r2, #0
    5570:	4b27      	ldr	r3, [pc, #156]	; (5610 <_usb_ep0_on_setup+0xb8>)
    5572:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    5574:	8823      	ldrh	r3, [r4, #0]
    5576:	2b08      	cmp	r3, #8
    5578:	d002      	beq.n	5580 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    557a:	4b27      	ldr	r3, [pc, #156]	; (5618 <_usb_ep0_on_setup+0xc0>)
    557c:	4798      	blx	r3
}
    557e:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    5580:	4a24      	ldr	r2, [pc, #144]	; (5614 <_usb_ep0_on_setup+0xbc>)
    5582:	4b26      	ldr	r3, [pc, #152]	; (561c <_usb_ep0_on_setup+0xc4>)
    5584:	7819      	ldrb	r1, [r3, #0]
    5586:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    5588:	7859      	ldrb	r1, [r3, #1]
    558a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    558c:	78d8      	ldrb	r0, [r3, #3]
    558e:	0200      	lsls	r0, r0, #8
    5590:	7899      	ldrb	r1, [r3, #2]
    5592:	1809      	adds	r1, r1, r0
    5594:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    5596:	7958      	ldrb	r0, [r3, #5]
    5598:	0200      	lsls	r0, r0, #8
    559a:	7919      	ldrb	r1, [r3, #4]
    559c:	1809      	adds	r1, r1, r0
    559e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    55a0:	79d9      	ldrb	r1, [r3, #7]
    55a2:	0209      	lsls	r1, r1, #8
    55a4:	799b      	ldrb	r3, [r3, #6]
    55a6:	185b      	adds	r3, r3, r1
    55a8:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    55aa:	4b1d      	ldr	r3, [pc, #116]	; (5620 <_usb_ep0_on_setup+0xc8>)
    55ac:	4798      	blx	r3
    55ae:	2800      	cmp	r0, #0
    55b0:	d016      	beq.n	55e0 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    55b2:	4b18      	ldr	r3, [pc, #96]	; (5614 <_usb_ep0_on_setup+0xbc>)
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	2b7f      	cmp	r3, #127	; 0x7f
    55b8:	d815      	bhi.n	55e6 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    55ba:	4b16      	ldr	r3, [pc, #88]	; (5614 <_usb_ep0_on_setup+0xbc>)
    55bc:	88db      	ldrh	r3, [r3, #6]
    55be:	2b00      	cmp	r3, #0
    55c0:	d022      	beq.n	5608 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    55c2:	2300      	movs	r3, #0
    55c4:	4a17      	ldr	r2, [pc, #92]	; (5624 <_usb_ep0_on_setup+0xcc>)
    55c6:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    55c8:	4a17      	ldr	r2, [pc, #92]	; (5628 <_usb_ep0_on_setup+0xd0>)
    55ca:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    55cc:	2201      	movs	r2, #1
    55ce:	4b10      	ldr	r3, [pc, #64]	; (5610 <_usb_ep0_on_setup+0xb8>)
    55d0:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    55d2:	2308      	movs	r3, #8
    55d4:	4a11      	ldr	r2, [pc, #68]	; (561c <_usb_ep0_on_setup+0xc4>)
    55d6:	2100      	movs	r1, #0
    55d8:	4814      	ldr	r0, [pc, #80]	; (562c <_usb_ep0_on_setup+0xd4>)
    55da:	4c15      	ldr	r4, [pc, #84]	; (5630 <_usb_ep0_on_setup+0xd8>)
    55dc:	47a0      	blx	r4
    55de:	e7ce      	b.n	557e <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    55e0:	4b0d      	ldr	r3, [pc, #52]	; (5618 <_usb_ep0_on_setup+0xc0>)
    55e2:	4798      	blx	r3
			return;
    55e4:	e7cb      	b.n	557e <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    55e6:	2300      	movs	r3, #0
    55e8:	4a0e      	ldr	r2, [pc, #56]	; (5624 <_usb_ep0_on_setup+0xcc>)
    55ea:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    55ec:	4a0e      	ldr	r2, [pc, #56]	; (5628 <_usb_ep0_on_setup+0xd0>)
    55ee:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    55f0:	2202      	movs	r2, #2
    55f2:	4b07      	ldr	r3, [pc, #28]	; (5610 <_usb_ep0_on_setup+0xb8>)
    55f4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    55f6:	2308      	movs	r3, #8
    55f8:	4a08      	ldr	r2, [pc, #32]	; (561c <_usb_ep0_on_setup+0xc4>)
    55fa:	2100      	movs	r1, #0
    55fc:	480b      	ldr	r0, [pc, #44]	; (562c <_usb_ep0_on_setup+0xd4>)
    55fe:	4c0c      	ldr	r4, [pc, #48]	; (5630 <_usb_ep0_on_setup+0xd8>)
    5600:	47a0      	blx	r4
			udd_ctrl_in_sent();
    5602:	4b0c      	ldr	r3, [pc, #48]	; (5634 <_usb_ep0_on_setup+0xdc>)
    5604:	4798      	blx	r3
    5606:	e7ba      	b.n	557e <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    5608:	4b0b      	ldr	r3, [pc, #44]	; (5638 <_usb_ep0_on_setup+0xe0>)
    560a:	4798      	blx	r3
				return;
    560c:	e7b7      	b.n	557e <_usb_ep0_on_setup+0x26>
    560e:	46c0      	nop			; (mov r8, r8)
    5610:	20000342 	.word	0x20000342
    5614:	20000890 	.word	0x20000890
    5618:	000052a1 	.word	0x000052a1
    561c:	200008a8 	.word	0x200008a8
    5620:	000029b5 	.word	0x000029b5
    5624:	20000340 	.word	0x20000340
    5628:	2000033e 	.word	0x2000033e
    562c:	20000728 	.word	0x20000728
    5630:	000062d1 	.word	0x000062d1
    5634:	000054b1 	.word	0x000054b1
    5638:	00005421 	.word	0x00005421

0000563c <_usb_on_sof_notify>:
{
    563c:	b510      	push	{r4, lr}
	udc_sof_notify();
    563e:	4b02      	ldr	r3, [pc, #8]	; (5648 <_usb_on_sof_notify+0xc>)
    5640:	4798      	blx	r3
	UDC_SOF_EVENT();
    5642:	4b02      	ldr	r3, [pc, #8]	; (564c <_usb_on_sof_notify+0x10>)
    5644:	4798      	blx	r3
}
    5646:	bd10      	pop	{r4, pc}
    5648:	00002971 	.word	0x00002971
    564c:	00007969 	.word	0x00007969

00005650 <_usb_on_suspend>:
{
    5650:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5652:	4c07      	ldr	r4, [pc, #28]	; (5670 <_usb_on_suspend+0x20>)
    5654:	2104      	movs	r1, #4
    5656:	0020      	movs	r0, r4
    5658:	4b06      	ldr	r3, [pc, #24]	; (5674 <_usb_on_suspend+0x24>)
    565a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    565c:	2102      	movs	r1, #2
    565e:	0020      	movs	r0, r4
    5660:	4b05      	ldr	r3, [pc, #20]	; (5678 <_usb_on_suspend+0x28>)
    5662:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    5664:	2001      	movs	r0, #1
    5666:	4b05      	ldr	r3, [pc, #20]	; (567c <_usb_on_suspend+0x2c>)
    5668:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    566a:	4b05      	ldr	r3, [pc, #20]	; (5680 <_usb_on_suspend+0x30>)
    566c:	4798      	blx	r3
}
    566e:	bd10      	pop	{r4, pc}
    5670:	20000728 	.word	0x20000728
    5674:	00005d11 	.word	0x00005d11
    5678:	00005cf1 	.word	0x00005cf1
    567c:	00005025 	.word	0x00005025
    5680:	00007951 	.word	0x00007951

00005684 <udd_ep_abort>:
{
    5684:	b510      	push	{r4, lr}
    5686:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    5688:	0001      	movs	r1, r0
    568a:	480a      	ldr	r0, [pc, #40]	; (56b4 <udd_ep_abort+0x30>)
    568c:	4b0a      	ldr	r3, [pc, #40]	; (56b8 <udd_ep_abort+0x34>)
    568e:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    5690:	0020      	movs	r0, r4
    5692:	4b0a      	ldr	r3, [pc, #40]	; (56bc <udd_ep_abort+0x38>)
    5694:	4798      	blx	r3
	if (!ptr_job->busy) {
    5696:	7c83      	ldrb	r3, [r0, #18]
    5698:	07db      	lsls	r3, r3, #31
    569a:	d50a      	bpl.n	56b2 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    569c:	7c83      	ldrb	r3, [r0, #18]
    569e:	2201      	movs	r2, #1
    56a0:	4393      	bics	r3, r2
    56a2:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    56a4:	6803      	ldr	r3, [r0, #0]
    56a6:	2b00      	cmp	r3, #0
    56a8:	d003      	beq.n	56b2 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    56aa:	68c1      	ldr	r1, [r0, #12]
    56ac:	0022      	movs	r2, r4
    56ae:	2001      	movs	r0, #1
    56b0:	4798      	blx	r3
}
    56b2:	bd10      	pop	{r4, pc}
    56b4:	20000728 	.word	0x20000728
    56b8:	00006171 	.word	0x00006171
    56bc:	000050d1 	.word	0x000050d1

000056c0 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    56c0:	4b02      	ldr	r3, [pc, #8]	; (56cc <udd_get_frame_number+0xc>)
    56c2:	681b      	ldr	r3, [r3, #0]
    56c4:	8a18      	ldrh	r0, [r3, #16]
    56c6:	0480      	lsls	r0, r0, #18
    56c8:	0d40      	lsrs	r0, r0, #21
}
    56ca:	4770      	bx	lr
    56cc:	20000728 	.word	0x20000728

000056d0 <udd_ep_free>:
{
    56d0:	b570      	push	{r4, r5, r6, lr}
    56d2:	b082      	sub	sp, #8
    56d4:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    56d6:	ad01      	add	r5, sp, #4
    56d8:	0028      	movs	r0, r5
    56da:	4b0d      	ldr	r3, [pc, #52]	; (5710 <udd_ep_free+0x40>)
    56dc:	4798      	blx	r3
	udd_ep_abort(ep);
    56de:	0020      	movs	r0, r4
    56e0:	4b0c      	ldr	r3, [pc, #48]	; (5714 <udd_ep_free+0x44>)
    56e2:	4798      	blx	r3
	config_ep.ep_address = ep;
    56e4:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    56e6:	2300      	movs	r3, #0
    56e8:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    56ea:	4e0b      	ldr	r6, [pc, #44]	; (5718 <udd_ep_free+0x48>)
    56ec:	0029      	movs	r1, r5
    56ee:	0030      	movs	r0, r6
    56f0:	4b0a      	ldr	r3, [pc, #40]	; (571c <udd_ep_free+0x4c>)
    56f2:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    56f4:	210f      	movs	r1, #15
    56f6:	4021      	ands	r1, r4
    56f8:	2200      	movs	r2, #0
    56fa:	0030      	movs	r0, r6
    56fc:	4b08      	ldr	r3, [pc, #32]	; (5720 <udd_ep_free+0x50>)
    56fe:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    5700:	2200      	movs	r2, #0
    5702:	0021      	movs	r1, r4
    5704:	0030      	movs	r0, r6
    5706:	4b07      	ldr	r3, [pc, #28]	; (5724 <udd_ep_free+0x54>)
    5708:	4798      	blx	r3
}
    570a:	b002      	add	sp, #8
    570c:	bd70      	pop	{r4, r5, r6, pc}
    570e:	46c0      	nop			; (mov r8, r8)
    5710:	00005f1d 	.word	0x00005f1d
    5714:	00005685 	.word	0x00005685
    5718:	20000728 	.word	0x20000728
    571c:	00005f2d 	.word	0x00005f2d
    5720:	00005d55 	.word	0x00005d55
    5724:	00005e4d 	.word	0x00005e4d

00005728 <udd_ep_alloc>:
{
    5728:	b5f0      	push	{r4, r5, r6, r7, lr}
    572a:	b083      	sub	sp, #12
    572c:	0005      	movs	r5, r0
    572e:	000f      	movs	r7, r1
    5730:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    5732:	ae01      	add	r6, sp, #4
    5734:	0030      	movs	r0, r6
    5736:	4b36      	ldr	r3, [pc, #216]	; (5810 <udd_ep_alloc+0xe8>)
    5738:	4798      	blx	r3
	config_ep.ep_address = ep;
    573a:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    573c:	2c08      	cmp	r4, #8
    573e:	d813      	bhi.n	5768 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    5740:	2200      	movs	r2, #0
    5742:	ab01      	add	r3, sp, #4
    5744:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    5746:	0028      	movs	r0, r5
    5748:	4b32      	ldr	r3, [pc, #200]	; (5814 <udd_ep_alloc+0xec>)
    574a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    574c:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    574e:	2103      	movs	r1, #3
    5750:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    5752:	2901      	cmp	r1, #1
    5754:	d038      	beq.n	57c8 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    5756:	2902      	cmp	r1, #2
    5758:	d043      	beq.n	57e2 <udd_ep_alloc+0xba>
		return false;
    575a:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    575c:	2903      	cmp	r1, #3
    575e:	d13d      	bne.n	57dc <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    5760:	2204      	movs	r2, #4
    5762:	ab01      	add	r3, sp, #4
    5764:	70da      	strb	r2, [r3, #3]
    5766:	e032      	b.n	57ce <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    5768:	2c10      	cmp	r4, #16
    576a:	d803      	bhi.n	5774 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    576c:	2201      	movs	r2, #1
    576e:	ab01      	add	r3, sp, #4
    5770:	705a      	strb	r2, [r3, #1]
    5772:	e7e8      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    5774:	2c20      	cmp	r4, #32
    5776:	d803      	bhi.n	5780 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    5778:	2202      	movs	r2, #2
    577a:	ab01      	add	r3, sp, #4
    577c:	705a      	strb	r2, [r3, #1]
    577e:	e7e2      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    5780:	2c40      	cmp	r4, #64	; 0x40
    5782:	d803      	bhi.n	578c <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    5784:	2203      	movs	r2, #3
    5786:	ab01      	add	r3, sp, #4
    5788:	705a      	strb	r2, [r3, #1]
    578a:	e7dc      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    578c:	2c80      	cmp	r4, #128	; 0x80
    578e:	d803      	bhi.n	5798 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    5790:	2204      	movs	r2, #4
    5792:	ab01      	add	r3, sp, #4
    5794:	705a      	strb	r2, [r3, #1]
    5796:	e7d6      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    5798:	2380      	movs	r3, #128	; 0x80
    579a:	005b      	lsls	r3, r3, #1
    579c:	429c      	cmp	r4, r3
    579e:	d803      	bhi.n	57a8 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    57a0:	2205      	movs	r2, #5
    57a2:	ab01      	add	r3, sp, #4
    57a4:	705a      	strb	r2, [r3, #1]
    57a6:	e7ce      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    57a8:	2380      	movs	r3, #128	; 0x80
    57aa:	009b      	lsls	r3, r3, #2
    57ac:	429c      	cmp	r4, r3
    57ae:	d803      	bhi.n	57b8 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    57b0:	2206      	movs	r2, #6
    57b2:	ab01      	add	r3, sp, #4
    57b4:	705a      	strb	r2, [r3, #1]
    57b6:	e7c6      	b.n	5746 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    57b8:	4a17      	ldr	r2, [pc, #92]	; (5818 <udd_ep_alloc+0xf0>)
		return false;
    57ba:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    57bc:	4294      	cmp	r4, r2
    57be:	d80d      	bhi.n	57dc <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    57c0:	2207      	movs	r2, #7
    57c2:	ab01      	add	r3, sp, #4
    57c4:	705a      	strb	r2, [r3, #1]
    57c6:	e7be      	b.n	5746 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    57c8:	2202      	movs	r2, #2
    57ca:	ab01      	add	r3, sp, #4
    57cc:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    57ce:	a901      	add	r1, sp, #4
    57d0:	4812      	ldr	r0, [pc, #72]	; (581c <udd_ep_alloc+0xf4>)
    57d2:	4b13      	ldr	r3, [pc, #76]	; (5820 <udd_ep_alloc+0xf8>)
    57d4:	4798      	blx	r3
		return false;
    57d6:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    57d8:	2800      	cmp	r0, #0
    57da:	d006      	beq.n	57ea <udd_ep_alloc+0xc2>
}
    57dc:	0018      	movs	r0, r3
    57de:	b003      	add	sp, #12
    57e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    57e2:	2203      	movs	r2, #3
    57e4:	ab01      	add	r3, sp, #4
    57e6:	70da      	strb	r2, [r3, #3]
    57e8:	e7f1      	b.n	57ce <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    57ea:	210f      	movs	r1, #15
    57ec:	4029      	ands	r1, r5
    57ee:	4c0b      	ldr	r4, [pc, #44]	; (581c <udd_ep_alloc+0xf4>)
    57f0:	4b0c      	ldr	r3, [pc, #48]	; (5824 <udd_ep_alloc+0xfc>)
    57f2:	2200      	movs	r2, #0
    57f4:	0020      	movs	r0, r4
    57f6:	4e0c      	ldr	r6, [pc, #48]	; (5828 <udd_ep_alloc+0x100>)
    57f8:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    57fa:	2200      	movs	r2, #0
    57fc:	0029      	movs	r1, r5
    57fe:	0020      	movs	r0, r4
    5800:	4e0a      	ldr	r6, [pc, #40]	; (582c <udd_ep_alloc+0x104>)
    5802:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    5804:	2201      	movs	r2, #1
    5806:	0029      	movs	r1, r5
    5808:	0020      	movs	r0, r4
    580a:	47b0      	blx	r6
	return true;
    580c:	2301      	movs	r3, #1
    580e:	e7e5      	b.n	57dc <udd_ep_alloc+0xb4>
    5810:	00005f1d 	.word	0x00005f1d
    5814:	000050d1 	.word	0x000050d1
    5818:	000003ff 	.word	0x000003ff
    581c:	20000728 	.word	0x20000728
    5820:	00005f2d 	.word	0x00005f2d
    5824:	000050ed 	.word	0x000050ed
    5828:	00005d2d 	.word	0x00005d2d
    582c:	00005d7d 	.word	0x00005d7d

00005830 <udd_ep_is_halted>:
{
    5830:	b510      	push	{r4, lr}
    5832:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    5834:	4801      	ldr	r0, [pc, #4]	; (583c <udd_ep_is_halted+0xc>)
    5836:	4b02      	ldr	r3, [pc, #8]	; (5840 <udd_ep_is_halted+0x10>)
    5838:	4798      	blx	r3
}
    583a:	bd10      	pop	{r4, pc}
    583c:	20000728 	.word	0x20000728
    5840:	000061a7 	.word	0x000061a7

00005844 <udd_ep_set_halt>:
{
    5844:	b510      	push	{r4, lr}
    5846:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5848:	230f      	movs	r3, #15
    584a:	4003      	ands	r3, r0
		return false;
    584c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    584e:	2b02      	cmp	r3, #2
    5850:	d900      	bls.n	5854 <udd_ep_set_halt+0x10>
}
    5852:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    5854:	0021      	movs	r1, r4
    5856:	4804      	ldr	r0, [pc, #16]	; (5868 <udd_ep_set_halt+0x24>)
    5858:	4b04      	ldr	r3, [pc, #16]	; (586c <udd_ep_set_halt+0x28>)
    585a:	4798      	blx	r3
	udd_ep_abort(ep);
    585c:	0020      	movs	r0, r4
    585e:	4b04      	ldr	r3, [pc, #16]	; (5870 <udd_ep_set_halt+0x2c>)
    5860:	4798      	blx	r3
	return true;
    5862:	2001      	movs	r0, #1
    5864:	e7f5      	b.n	5852 <udd_ep_set_halt+0xe>
    5866:	46c0      	nop			; (mov r8, r8)
    5868:	20000728 	.word	0x20000728
    586c:	000061d1 	.word	0x000061d1
    5870:	00005685 	.word	0x00005685

00005874 <_usb_ep0_on_tansfer_ok>:
{
    5874:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    5876:	4b34      	ldr	r3, [pc, #208]	; (5948 <_usb_ep0_on_tansfer_ok+0xd4>)
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	2b01      	cmp	r3, #1
    587c:	d00a      	beq.n	5894 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    587e:	2b02      	cmp	r3, #2
    5880:	d05f      	beq.n	5942 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    5882:	4b32      	ldr	r3, [pc, #200]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    5884:	691b      	ldr	r3, [r3, #16]
    5886:	2b00      	cmp	r3, #0
    5888:	d000      	beq.n	588c <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    588a:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    588c:	2200      	movs	r2, #0
    588e:	4b2e      	ldr	r3, [pc, #184]	; (5948 <_usb_ep0_on_tansfer_ok+0xd4>)
    5890:	701a      	strb	r2, [r3, #0]
}
    5892:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    5894:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5896:	4b2d      	ldr	r3, [pc, #180]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    5898:	899b      	ldrh	r3, [r3, #12]
    589a:	4a2d      	ldr	r2, [pc, #180]	; (5950 <_usb_ep0_on_tansfer_ok+0xdc>)
    589c:	8814      	ldrh	r4, [r2, #0]
    589e:	1962      	adds	r2, r4, r5
    58a0:	4293      	cmp	r3, r2
    58a2:	da01      	bge.n	58a8 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    58a4:	1b1d      	subs	r5, r3, r4
    58a6:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    58a8:	4b28      	ldr	r3, [pc, #160]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    58aa:	6898      	ldr	r0, [r3, #8]
    58ac:	1900      	adds	r0, r0, r4
    58ae:	002a      	movs	r2, r5
    58b0:	4928      	ldr	r1, [pc, #160]	; (5954 <_usb_ep0_on_tansfer_ok+0xe0>)
    58b2:	4b29      	ldr	r3, [pc, #164]	; (5958 <_usb_ep0_on_tansfer_ok+0xe4>)
    58b4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    58b6:	1964      	adds	r4, r4, r5
    58b8:	b2a4      	uxth	r4, r4
    58ba:	4b25      	ldr	r3, [pc, #148]	; (5950 <_usb_ep0_on_tansfer_ok+0xdc>)
    58bc:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    58be:	2d08      	cmp	r5, #8
    58c0:	d00a      	beq.n	58d8 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    58c2:	4b22      	ldr	r3, [pc, #136]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    58c4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    58c6:	695b      	ldr	r3, [r3, #20]
    58c8:	2b00      	cmp	r3, #0
    58ca:	d002      	beq.n	58d2 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    58cc:	4798      	blx	r3
    58ce:	2800      	cmp	r0, #0
    58d0:	d014      	beq.n	58fc <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    58d2:	4b22      	ldr	r3, [pc, #136]	; (595c <_usb_ep0_on_tansfer_ok+0xe8>)
    58d4:	4798      	blx	r3
    58d6:	e7dc      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    58d8:	4b1c      	ldr	r3, [pc, #112]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    58da:	88da      	ldrh	r2, [r3, #6]
    58dc:	4b20      	ldr	r3, [pc, #128]	; (5960 <_usb_ep0_on_tansfer_ok+0xec>)
    58de:	881b      	ldrh	r3, [r3, #0]
    58e0:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    58e2:	429a      	cmp	r2, r3
    58e4:	dded      	ble.n	58c2 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    58e6:	4b19      	ldr	r3, [pc, #100]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    58e8:	899b      	ldrh	r3, [r3, #12]
    58ea:	42a3      	cmp	r3, r4
    58ec:	d00c      	beq.n	5908 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    58ee:	2308      	movs	r3, #8
    58f0:	4a18      	ldr	r2, [pc, #96]	; (5954 <_usb_ep0_on_tansfer_ok+0xe0>)
    58f2:	2100      	movs	r1, #0
    58f4:	481b      	ldr	r0, [pc, #108]	; (5964 <_usb_ep0_on_tansfer_ok+0xf0>)
    58f6:	4c1c      	ldr	r4, [pc, #112]	; (5968 <_usb_ep0_on_tansfer_ok+0xf4>)
    58f8:	47a0      	blx	r4
    58fa:	e7ca      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    58fc:	2205      	movs	r2, #5
    58fe:	4b12      	ldr	r3, [pc, #72]	; (5948 <_usb_ep0_on_tansfer_ok+0xd4>)
    5900:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    5902:	4b1a      	ldr	r3, [pc, #104]	; (596c <_usb_ep0_on_tansfer_ok+0xf8>)
    5904:	4798      	blx	r3
    5906:	e7c4      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    5908:	4b10      	ldr	r3, [pc, #64]	; (594c <_usb_ep0_on_tansfer_ok+0xd8>)
    590a:	695b      	ldr	r3, [r3, #20]
    590c:	2b00      	cmp	r3, #0
    590e:	d00b      	beq.n	5928 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    5910:	4798      	blx	r3
    5912:	2800      	cmp	r0, #0
    5914:	d00f      	beq.n	5936 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5916:	4912      	ldr	r1, [pc, #72]	; (5960 <_usb_ep0_on_tansfer_ok+0xec>)
    5918:	4a0d      	ldr	r2, [pc, #52]	; (5950 <_usb_ep0_on_tansfer_ok+0xdc>)
    591a:	880b      	ldrh	r3, [r1, #0]
    591c:	8810      	ldrh	r0, [r2, #0]
    591e:	181b      	adds	r3, r3, r0
    5920:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    5922:	2300      	movs	r3, #0
    5924:	8013      	strh	r3, [r2, #0]
    5926:	e7e2      	b.n	58ee <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5928:	2205      	movs	r2, #5
    592a:	4b07      	ldr	r3, [pc, #28]	; (5948 <_usb_ep0_on_tansfer_ok+0xd4>)
    592c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    592e:	2000      	movs	r0, #0
    5930:	4b0e      	ldr	r3, [pc, #56]	; (596c <_usb_ep0_on_tansfer_ok+0xf8>)
    5932:	4798      	blx	r3
    5934:	e7ad      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    5936:	2205      	movs	r2, #5
    5938:	4b03      	ldr	r3, [pc, #12]	; (5948 <_usb_ep0_on_tansfer_ok+0xd4>)
    593a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    593c:	4b0b      	ldr	r3, [pc, #44]	; (596c <_usb_ep0_on_tansfer_ok+0xf8>)
    593e:	4798      	blx	r3
    5940:	e7a7      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    5942:	4b0b      	ldr	r3, [pc, #44]	; (5970 <_usb_ep0_on_tansfer_ok+0xfc>)
    5944:	4798      	blx	r3
    5946:	e7a4      	b.n	5892 <_usb_ep0_on_tansfer_ok+0x1e>
    5948:	20000342 	.word	0x20000342
    594c:	20000890 	.word	0x20000890
    5950:	2000033e 	.word	0x2000033e
    5954:	200008a8 	.word	0x200008a8
    5958:	0000bcdd 	.word	0x0000bcdd
    595c:	00005421 	.word	0x00005421
    5960:	20000340 	.word	0x20000340
    5964:	20000728 	.word	0x20000728
    5968:	000062d1 	.word	0x000062d1
    596c:	00005845 	.word	0x00005845
    5970:	000054b1 	.word	0x000054b1

00005974 <udd_ep_clear_halt>:
{
    5974:	b570      	push	{r4, r5, r6, lr}
    5976:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    5978:	230f      	movs	r3, #15
    597a:	4003      	ands	r3, r0
		return false;
    597c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    597e:	2b02      	cmp	r3, #2
    5980:	d900      	bls.n	5984 <udd_ep_clear_halt+0x10>
}
    5982:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    5984:	0020      	movs	r0, r4
    5986:	4b09      	ldr	r3, [pc, #36]	; (59ac <udd_ep_clear_halt+0x38>)
    5988:	4798      	blx	r3
    598a:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    598c:	0021      	movs	r1, r4
    598e:	4808      	ldr	r0, [pc, #32]	; (59b0 <udd_ep_clear_halt+0x3c>)
    5990:	4b08      	ldr	r3, [pc, #32]	; (59b4 <udd_ep_clear_halt+0x40>)
    5992:	4798      	blx	r3
	if (ptr_job->busy == true) {
    5994:	7cab      	ldrb	r3, [r5, #18]
	return true;
    5996:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    5998:	07db      	lsls	r3, r3, #31
    599a:	d5f2      	bpl.n	5982 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    599c:	7cab      	ldrb	r3, [r5, #18]
    599e:	2201      	movs	r2, #1
    59a0:	4393      	bics	r3, r2
    59a2:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    59a4:	682b      	ldr	r3, [r5, #0]
    59a6:	4798      	blx	r3
	return true;
    59a8:	2001      	movs	r0, #1
    59aa:	e7ea      	b.n	5982 <udd_ep_clear_halt+0xe>
    59ac:	000050d1 	.word	0x000050d1
    59b0:	20000728 	.word	0x20000728
    59b4:	000061f7 	.word	0x000061f7

000059b8 <udd_ep_run>:
{
    59b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ba:	b085      	sub	sp, #20
    59bc:	0005      	movs	r5, r0
    59be:	9103      	str	r1, [sp, #12]
    59c0:	9202      	str	r2, [sp, #8]
    59c2:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    59c4:	260f      	movs	r6, #15
    59c6:	4006      	ands	r6, r0
		return false;
    59c8:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    59ca:	2e02      	cmp	r6, #2
    59cc:	d902      	bls.n	59d4 <udd_ep_run+0x1c>
}
    59ce:	0020      	movs	r0, r4
    59d0:	b005      	add	sp, #20
    59d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    59d4:	4b62      	ldr	r3, [pc, #392]	; (5b60 <udd_ep_run+0x1a8>)
    59d6:	4798      	blx	r3
    59d8:	1e04      	subs	r4, r0, #0
    59da:	d000      	beq.n	59de <udd_ep_run+0x26>
    59dc:	e0b9      	b.n	5b52 <udd_ep_run+0x19a>
	ptr_job = udd_ep_get_job(ep);
    59de:	0028      	movs	r0, r5
    59e0:	4b60      	ldr	r3, [pc, #384]	; (5b64 <udd_ep_run+0x1ac>)
    59e2:	4798      	blx	r3
    59e4:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    59e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    59ea:	b672      	cpsid	i
    59ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    59f0:	2200      	movs	r2, #0
    59f2:	4b5d      	ldr	r3, [pc, #372]	; (5b68 <udd_ep_run+0x1b0>)
    59f4:	701a      	strb	r2, [r3, #0]
	if (ptr_job->busy == true) {
    59f6:	7c83      	ldrb	r3, [r0, #18]
    59f8:	07db      	lsls	r3, r3, #31
    59fa:	d508      	bpl.n	5a0e <udd_ep_run+0x56>
	if (cpu_irq_is_enabled_flags(flags))
    59fc:	2900      	cmp	r1, #0
    59fe:	d1e6      	bne.n	59ce <udd_ep_run+0x16>
		cpu_irq_enable();
    5a00:	3201      	adds	r2, #1
    5a02:	4b59      	ldr	r3, [pc, #356]	; (5b68 <udd_ep_run+0x1b0>)
    5a04:	701a      	strb	r2, [r3, #0]
    5a06:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a0a:	b662      	cpsie	i
    5a0c:	e7df      	b.n	59ce <udd_ep_run+0x16>
	ptr_job->busy = true;
    5a0e:	7c83      	ldrb	r3, [r0, #18]
    5a10:	2201      	movs	r2, #1
    5a12:	4313      	orrs	r3, r2
    5a14:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    5a16:	2900      	cmp	r1, #0
    5a18:	d105      	bne.n	5a26 <udd_ep_run+0x6e>
		cpu_irq_enable();
    5a1a:	2201      	movs	r2, #1
    5a1c:	4b52      	ldr	r3, [pc, #328]	; (5b68 <udd_ep_run+0x1b0>)
    5a1e:	701a      	strb	r2, [r3, #0]
    5a20:	f3bf 8f5f 	dmb	sy
    5a24:	b662      	cpsie	i
	ptr_job->buf = buf;
    5a26:	9b02      	ldr	r3, [sp, #8]
    5a28:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    5a2a:	9b01      	ldr	r3, [sp, #4]
    5a2c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    5a2e:	2300      	movs	r3, #0
    5a30:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    5a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5a34:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    5a36:	2301      	movs	r3, #1
    5a38:	9a03      	ldr	r2, [sp, #12]
    5a3a:	4013      	ands	r3, r2
    5a3c:	005a      	lsls	r2, r3, #1
    5a3e:	7cbb      	ldrb	r3, [r7, #18]
    5a40:	2102      	movs	r1, #2
    5a42:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    5a44:	4313      	orrs	r3, r2
    5a46:	2204      	movs	r2, #4
    5a48:	4393      	bics	r3, r2
    5a4a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    5a4c:	b26b      	sxtb	r3, r5
    5a4e:	2b00      	cmp	r3, #0
    5a50:	db20      	blt.n	5a94 <udd_ep_run+0xdc>
		if (0 != ptr_job->buf_size) {
    5a52:	9b01      	ldr	r3, [sp, #4]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d06f      	beq.n	5b38 <udd_ep_run+0x180>
			next_trans = ptr_job->buf_size;
    5a58:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5a5a:	4b44      	ldr	r3, [pc, #272]	; (5b6c <udd_ep_run+0x1b4>)
    5a5c:	429c      	cmp	r4, r3
    5a5e:	d95a      	bls.n	5b16 <udd_ep_run+0x15e>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5a60:	8a39      	ldrh	r1, [r7, #16]
    5a62:	001c      	movs	r4, r3
    5a64:	0018      	movs	r0, r3
    5a66:	4b42      	ldr	r3, [pc, #264]	; (5b70 <udd_ep_run+0x1b8>)
    5a68:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5a6a:	1a63      	subs	r3, r4, r1
    5a6c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    5a6e:	8a3b      	ldrh	r3, [r7, #16]
    5a70:	429a      	cmp	r2, r3
    5a72:	d257      	bcs.n	5b24 <udd_ep_run+0x16c>
				ptr_job->b_use_out_cache_buffer = true;
    5a74:	7cba      	ldrb	r2, [r7, #18]
    5a76:	2104      	movs	r1, #4
    5a78:	430a      	orrs	r2, r1
    5a7a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    5a7c:	1e72      	subs	r2, r6, #1
    5a7e:	0192      	lsls	r2, r2, #6
    5a80:	493c      	ldr	r1, [pc, #240]	; (5b74 <udd_ep_run+0x1bc>)
    5a82:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5a84:	0031      	movs	r1, r6
    5a86:	483c      	ldr	r0, [pc, #240]	; (5b78 <udd_ep_run+0x1c0>)
    5a88:	4c3c      	ldr	r4, [pc, #240]	; (5b7c <udd_ep_run+0x1c4>)
    5a8a:	47a0      	blx	r4
				return (STATUS_OK ==
    5a8c:	4244      	negs	r4, r0
    5a8e:	4144      	adcs	r4, r0
    5a90:	b2e4      	uxtb	r4, r4
    5a92:	e79c      	b.n	59ce <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d027      	beq.n	5aea <udd_ep_run+0x132>
			next_trans = ptr_job->buf_size;
    5a9a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    5a9c:	4b33      	ldr	r3, [pc, #204]	; (5b6c <udd_ep_run+0x1b4>)
    5a9e:	429d      	cmp	r5, r3
    5aa0:	d906      	bls.n	5ab0 <udd_ep_run+0xf8>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    5aa2:	8a39      	ldrh	r1, [r7, #16]
    5aa4:	001d      	movs	r5, r3
    5aa6:	0018      	movs	r0, r3
    5aa8:	4b31      	ldr	r3, [pc, #196]	; (5b70 <udd_ep_run+0x1b8>)
    5aaa:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    5aac:	1a6b      	subs	r3, r5, r1
    5aae:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5ab0:	7cbb      	ldrb	r3, [r7, #18]
    5ab2:	079b      	lsls	r3, r3, #30
    5ab4:	d507      	bpl.n	5ac6 <udd_ep_run+0x10e>
					(0 == (next_trans % ptr_job->ep_size));
    5ab6:	8a39      	ldrh	r1, [r7, #16]
    5ab8:	0028      	movs	r0, r5
    5aba:	4b31      	ldr	r3, [pc, #196]	; (5b80 <udd_ep_run+0x1c8>)
    5abc:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    5abe:	b289      	uxth	r1, r1
    5ac0:	424c      	negs	r4, r1
    5ac2:	414c      	adcs	r4, r1
    5ac4:	b2e4      	uxtb	r4, r4
    5ac6:	2001      	movs	r0, #1
    5ac8:	4020      	ands	r0, r4
    5aca:	0040      	lsls	r0, r0, #1
    5acc:	7cbc      	ldrb	r4, [r7, #18]
    5ace:	2302      	movs	r3, #2
    5ad0:	439c      	bics	r4, r3
    5ad2:	4304      	orrs	r4, r0
    5ad4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    5ad6:	002b      	movs	r3, r5
    5ad8:	9a02      	ldr	r2, [sp, #8]
    5ada:	0031      	movs	r1, r6
    5adc:	4826      	ldr	r0, [pc, #152]	; (5b78 <udd_ep_run+0x1c0>)
    5ade:	4c29      	ldr	r4, [pc, #164]	; (5b84 <udd_ep_run+0x1cc>)
    5ae0:	47a0      	blx	r4
		return (STATUS_OK ==
    5ae2:	4244      	negs	r4, r0
    5ae4:	4144      	adcs	r4, r0
    5ae6:	b2e4      	uxtb	r4, r4
    5ae8:	e771      	b.n	59ce <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    5aea:	7cbb      	ldrb	r3, [r7, #18]
    5aec:	079b      	lsls	r3, r3, #30
    5aee:	d505      	bpl.n	5afc <udd_ep_run+0x144>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    5af0:	7cbb      	ldrb	r3, [r7, #18]
    5af2:	2202      	movs	r2, #2
    5af4:	4393      	bics	r3, r2
    5af6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    5af8:	2500      	movs	r5, #0
    5afa:	e7ec      	b.n	5ad6 <udd_ep_run+0x11e>
			ptr_job->busy = false;
    5afc:	7cbb      	ldrb	r3, [r7, #18]
    5afe:	2201      	movs	r2, #1
    5b00:	4393      	bics	r3, r2
    5b02:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b06:	2b00      	cmp	r3, #0
    5b08:	d025      	beq.n	5b56 <udd_ep_run+0x19e>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5b0a:	002a      	movs	r2, r5
    5b0c:	2100      	movs	r1, #0
    5b0e:	2000      	movs	r0, #0
    5b10:	4798      	blx	r3
			return true;
    5b12:	2401      	movs	r4, #1
    5b14:	e75b      	b.n	59ce <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    5b16:	8a39      	ldrh	r1, [r7, #16]
    5b18:	0020      	movs	r0, r4
    5b1a:	4b19      	ldr	r3, [pc, #100]	; (5b80 <udd_ep_run+0x1c8>)
    5b1c:	4798      	blx	r3
    5b1e:	1a63      	subs	r3, r4, r1
    5b20:	b29a      	uxth	r2, r3
    5b22:	e7a4      	b.n	5a6e <udd_ep_run+0xb6>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    5b24:	0013      	movs	r3, r2
    5b26:	9a02      	ldr	r2, [sp, #8]
    5b28:	0031      	movs	r1, r6
    5b2a:	4813      	ldr	r0, [pc, #76]	; (5b78 <udd_ep_run+0x1c0>)
    5b2c:	4c13      	ldr	r4, [pc, #76]	; (5b7c <udd_ep_run+0x1c4>)
    5b2e:	47a0      	blx	r4
				return (STATUS_OK ==
    5b30:	4244      	negs	r4, r0
    5b32:	4144      	adcs	r4, r0
    5b34:	b2e4      	uxtb	r4, r4
    5b36:	e74a      	b.n	59ce <udd_ep_run+0x16>
			ptr_job->busy = false;
    5b38:	7cbb      	ldrb	r3, [r7, #18]
    5b3a:	2201      	movs	r2, #1
    5b3c:	4393      	bics	r3, r2
    5b3e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    5b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b42:	2b00      	cmp	r3, #0
    5b44:	d009      	beq.n	5b5a <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    5b46:	002a      	movs	r2, r5
    5b48:	2100      	movs	r1, #0
    5b4a:	2000      	movs	r0, #0
    5b4c:	4798      	blx	r3
			return true;
    5b4e:	2401      	movs	r4, #1
    5b50:	e73d      	b.n	59ce <udd_ep_run+0x16>
		return false;
    5b52:	2400      	movs	r4, #0
    5b54:	e73b      	b.n	59ce <udd_ep_run+0x16>
			return true;
    5b56:	2401      	movs	r4, #1
    5b58:	e739      	b.n	59ce <udd_ep_run+0x16>
			return true;
    5b5a:	2401      	movs	r4, #1
    5b5c:	e737      	b.n	59ce <udd_ep_run+0x16>
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	00005831 	.word	0x00005831
    5b64:	000050d1 	.word	0x000050d1
    5b68:	20000122 	.word	0x20000122
    5b6c:	00001fff 	.word	0x00001fff
    5b70:	00009009 	.word	0x00009009
    5b74:	200006a8 	.word	0x200006a8
    5b78:	20000728 	.word	0x20000728
    5b7c:	000062d1 	.word	0x000062d1
    5b80:	00008e35 	.word	0x00008e35
    5b84:	0000627d 	.word	0x0000627d

00005b88 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    5b88:	4b02      	ldr	r3, [pc, #8]	; (5b94 <udd_set_address+0xc>)
    5b8a:	681b      	ldr	r3, [r3, #0]
    5b8c:	2280      	movs	r2, #128	; 0x80
    5b8e:	4310      	orrs	r0, r2
    5b90:	7298      	strb	r0, [r3, #10]
}
    5b92:	4770      	bx	lr
    5b94:	20000728 	.word	0x20000728

00005b98 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    5b98:	4b02      	ldr	r3, [pc, #8]	; (5ba4 <udd_getaddress+0xc>)
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	7a98      	ldrb	r0, [r3, #10]
    5b9e:	0640      	lsls	r0, r0, #25
    5ba0:	0e40      	lsrs	r0, r0, #25
}
    5ba2:	4770      	bx	lr
    5ba4:	20000728 	.word	0x20000728

00005ba8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    5ba8:	4b01      	ldr	r3, [pc, #4]	; (5bb0 <udd_set_setup_payload+0x8>)
    5baa:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    5bac:	8199      	strh	r1, [r3, #12]
}
    5bae:	4770      	bx	lr
    5bb0:	20000890 	.word	0x20000890

00005bb4 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    5bb4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    5bb6:	2003      	movs	r0, #3
    5bb8:	4b16      	ldr	r3, [pc, #88]	; (5c14 <udd_attach+0x60>)
    5bba:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    5bbc:	4c16      	ldr	r4, [pc, #88]	; (5c18 <udd_attach+0x64>)
    5bbe:	6822      	ldr	r2, [r4, #0]
    5bc0:	8913      	ldrh	r3, [r2, #8]
    5bc2:	2101      	movs	r1, #1
    5bc4:	438b      	bics	r3, r1
    5bc6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    5bc8:	4a14      	ldr	r2, [pc, #80]	; (5c1c <udd_attach+0x68>)
    5bca:	3103      	adds	r1, #3
    5bcc:	0020      	movs	r0, r4
    5bce:	4e14      	ldr	r6, [pc, #80]	; (5c20 <udd_attach+0x6c>)
    5bd0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    5bd2:	4a14      	ldr	r2, [pc, #80]	; (5c24 <udd_attach+0x70>)
    5bd4:	2100      	movs	r1, #0
    5bd6:	0020      	movs	r0, r4
    5bd8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    5bda:	4a13      	ldr	r2, [pc, #76]	; (5c28 <udd_attach+0x74>)
    5bdc:	2101      	movs	r1, #1
    5bde:	0020      	movs	r0, r4
    5be0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    5be2:	4a12      	ldr	r2, [pc, #72]	; (5c2c <udd_attach+0x78>)
    5be4:	2102      	movs	r1, #2
    5be6:	0020      	movs	r0, r4
    5be8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    5bea:	2104      	movs	r1, #4
    5bec:	0020      	movs	r0, r4
    5bee:	4d10      	ldr	r5, [pc, #64]	; (5c30 <udd_attach+0x7c>)
    5bf0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    5bf2:	2100      	movs	r1, #0
    5bf4:	0020      	movs	r0, r4
    5bf6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    5bf8:	2101      	movs	r1, #1
    5bfa:	0020      	movs	r0, r4
    5bfc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    5bfe:	2102      	movs	r1, #2
    5c00:	0020      	movs	r0, r4
    5c02:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    5c04:	4a0b      	ldr	r2, [pc, #44]	; (5c34 <udd_attach+0x80>)
    5c06:	2106      	movs	r1, #6
    5c08:	0020      	movs	r0, r4
    5c0a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    5c0c:	2106      	movs	r1, #6
    5c0e:	0020      	movs	r0, r4
    5c10:	47a8      	blx	r5
#endif
}
    5c12:	bd70      	pop	{r4, r5, r6, pc}
    5c14:	00005025 	.word	0x00005025
    5c18:	20000728 	.word	0x20000728
    5c1c:	00005651 	.word	0x00005651
    5c20:	00005ccd 	.word	0x00005ccd
    5c24:	0000563d 	.word	0x0000563d
    5c28:	00005371 	.word	0x00005371
    5c2c:	00005301 	.word	0x00005301
    5c30:	00005cf1 	.word	0x00005cf1
    5c34:	000052cd 	.word	0x000052cd

00005c38 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5c3c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    5c40:	b672      	cpsid	i
    5c42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5c46:	2600      	movs	r6, #0
    5c48:	4b17      	ldr	r3, [pc, #92]	; (5ca8 <udd_enable+0x70>)
    5c4a:	701e      	strb	r6, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    5c4c:	ad01      	add	r5, sp, #4
    5c4e:	0028      	movs	r0, r5
    5c50:	4b16      	ldr	r3, [pc, #88]	; (5cac <udd_enable+0x74>)
    5c52:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    5c54:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    5c56:	4e16      	ldr	r6, [pc, #88]	; (5cb0 <udd_enable+0x78>)
    5c58:	002a      	movs	r2, r5
    5c5a:	4916      	ldr	r1, [pc, #88]	; (5cb4 <udd_enable+0x7c>)
    5c5c:	0030      	movs	r0, r6
    5c5e:	4b16      	ldr	r3, [pc, #88]	; (5cb8 <udd_enable+0x80>)
    5c60:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    5c62:	0030      	movs	r0, r6
    5c64:	4b15      	ldr	r3, [pc, #84]	; (5cbc <udd_enable+0x84>)
    5c66:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    5c68:	4b15      	ldr	r3, [pc, #84]	; (5cc0 <udd_enable+0x88>)
    5c6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    5c6c:	069b      	lsls	r3, r3, #26
    5c6e:	d414      	bmi.n	5c9a <udd_enable+0x62>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    5c70:	4913      	ldr	r1, [pc, #76]	; (5cc0 <udd_enable+0x88>)
    5c72:	22d0      	movs	r2, #208	; 0xd0
    5c74:	68cb      	ldr	r3, [r1, #12]
    5c76:	4013      	ands	r3, r2
    5c78:	2bd0      	cmp	r3, #208	; 0xd0
    5c7a:	d1fb      	bne.n	5c74 <udd_enable+0x3c>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    5c7c:	2001      	movs	r0, #1
    5c7e:	4b11      	ldr	r3, [pc, #68]	; (5cc4 <udd_enable+0x8c>)
    5c80:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    5c82:	4b11      	ldr	r3, [pc, #68]	; (5cc8 <udd_enable+0x90>)
    5c84:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    5c86:	2c00      	cmp	r4, #0
    5c88:	d105      	bne.n	5c96 <udd_enable+0x5e>
		cpu_irq_enable();
    5c8a:	2201      	movs	r2, #1
    5c8c:	4b06      	ldr	r3, [pc, #24]	; (5ca8 <udd_enable+0x70>)
    5c8e:	701a      	strb	r2, [r3, #0]
    5c90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5c94:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    5c96:	b002      	add	sp, #8
    5c98:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    5c9a:	4909      	ldr	r1, [pc, #36]	; (5cc0 <udd_enable+0x88>)
    5c9c:	2210      	movs	r2, #16
    5c9e:	68cb      	ldr	r3, [r1, #12]
    5ca0:	421a      	tst	r2, r3
    5ca2:	d0fc      	beq.n	5c9e <udd_enable+0x66>
    5ca4:	e7ea      	b.n	5c7c <udd_enable+0x44>
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	20000122 	.word	0x20000122
    5cac:	00006925 	.word	0x00006925
    5cb0:	20000728 	.word	0x20000728
    5cb4:	41005000 	.word	0x41005000
    5cb8:	00006935 	.word	0x00006935
    5cbc:	00006351 	.word	0x00006351
    5cc0:	40000800 	.word	0x40000800
    5cc4:	00005025 	.word	0x00005025
    5cc8:	00005bb5 	.word	0x00005bb5

00005ccc <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    5ccc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    5cce:	000b      	movs	r3, r1
    5cd0:	332e      	adds	r3, #46	; 0x2e
    5cd2:	009b      	lsls	r3, r3, #2
    5cd4:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    5cd6:	22aa      	movs	r2, #170	; 0xaa
    5cd8:	0052      	lsls	r2, r2, #1
    5cda:	0049      	lsls	r1, r1, #1
    5cdc:	5a83      	ldrh	r3, [r0, r2]
    5cde:	4c03      	ldr	r4, [pc, #12]	; (5cec <usb_device_register_callback+0x20>)
    5ce0:	5b09      	ldrh	r1, [r1, r4]
    5ce2:	430b      	orrs	r3, r1
    5ce4:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    5ce6:	2000      	movs	r0, #0
    5ce8:	bd10      	pop	{r4, pc}
    5cea:	46c0      	nop			; (mov r8, r8)
    5cec:	0000c0b4 	.word	0x0000c0b4

00005cf0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    5cf0:	0049      	lsls	r1, r1, #1
    5cf2:	4b06      	ldr	r3, [pc, #24]	; (5d0c <usb_device_enable_callback+0x1c>)
    5cf4:	5acb      	ldrh	r3, [r1, r3]
    5cf6:	6802      	ldr	r2, [r0, #0]
    5cf8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    5cfa:	21ab      	movs	r1, #171	; 0xab
    5cfc:	0049      	lsls	r1, r1, #1
    5cfe:	5a42      	ldrh	r2, [r0, r1]
    5d00:	431a      	orrs	r2, r3
    5d02:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    5d04:	6802      	ldr	r2, [r0, #0]
    5d06:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    5d08:	2000      	movs	r0, #0
    5d0a:	4770      	bx	lr
    5d0c:	0000c0b4 	.word	0x0000c0b4

00005d10 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    5d10:	0049      	lsls	r1, r1, #1
    5d12:	4b05      	ldr	r3, [pc, #20]	; (5d28 <usb_device_disable_callback+0x18>)
    5d14:	5aca      	ldrh	r2, [r1, r3]
    5d16:	21ab      	movs	r1, #171	; 0xab
    5d18:	0049      	lsls	r1, r1, #1
    5d1a:	5a43      	ldrh	r3, [r0, r1]
    5d1c:	4393      	bics	r3, r2
    5d1e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    5d20:	6803      	ldr	r3, [r0, #0]
    5d22:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    5d24:	2000      	movs	r0, #0
    5d26:	4770      	bx	lr
    5d28:	0000c0b4 	.word	0x0000c0b4

00005d2c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    5d2c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    5d2e:	008c      	lsls	r4, r1, #2
    5d30:	18a4      	adds	r4, r4, r2
    5d32:	3434      	adds	r4, #52	; 0x34
    5d34:	00a4      	lsls	r4, r4, #2
    5d36:	1904      	adds	r4, r0, r4
    5d38:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5d3a:	1840      	adds	r0, r0, r1
    5d3c:	3059      	adds	r0, #89	; 0x59
    5d3e:	30ff      	adds	r0, #255	; 0xff
    5d40:	7803      	ldrb	r3, [r0, #0]
    5d42:	4903      	ldr	r1, [pc, #12]	; (5d50 <usb_device_endpoint_register_callback+0x24>)
    5d44:	5c8a      	ldrb	r2, [r1, r2]
    5d46:	4313      	orrs	r3, r2
    5d48:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    5d4a:	2000      	movs	r0, #0
    5d4c:	bd10      	pop	{r4, pc}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	0000c0c4 	.word	0x0000c0c4

00005d54 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    5d54:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    5d56:	008b      	lsls	r3, r1, #2
    5d58:	189b      	adds	r3, r3, r2
    5d5a:	3334      	adds	r3, #52	; 0x34
    5d5c:	009b      	lsls	r3, r3, #2
    5d5e:	18c3      	adds	r3, r0, r3
    5d60:	2400      	movs	r4, #0
    5d62:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5d64:	1840      	adds	r0, r0, r1
    5d66:	3059      	adds	r0, #89	; 0x59
    5d68:	30ff      	adds	r0, #255	; 0xff
    5d6a:	4b03      	ldr	r3, [pc, #12]	; (5d78 <usb_device_endpoint_unregister_callback+0x24>)
    5d6c:	5c9a      	ldrb	r2, [r3, r2]
    5d6e:	7803      	ldrb	r3, [r0, #0]
    5d70:	4393      	bics	r3, r2
    5d72:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    5d74:	2000      	movs	r0, #0
    5d76:	bd10      	pop	{r4, pc}
    5d78:	0000c0c4 	.word	0x0000c0c4

00005d7c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5d7c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5d7e:	230f      	movs	r3, #15
    5d80:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    5d82:	18c4      	adds	r4, r0, r3
    5d84:	3461      	adds	r4, #97	; 0x61
    5d86:	34ff      	adds	r4, #255	; 0xff
    5d88:	7825      	ldrb	r5, [r4, #0]
    5d8a:	4e2f      	ldr	r6, [pc, #188]	; (5e48 <usb_device_endpoint_enable_callback+0xcc>)
    5d8c:	5cb6      	ldrb	r6, [r6, r2]
    5d8e:	4335      	orrs	r5, r6
    5d90:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5d92:	2a00      	cmp	r2, #0
    5d94:	d129      	bne.n	5dea <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    5d96:	2b00      	cmp	r3, #0
    5d98:	d112      	bne.n	5dc0 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    5d9a:	2503      	movs	r5, #3
    5d9c:	240a      	movs	r4, #10
    5d9e:	34ff      	adds	r4, #255	; 0xff
    5da0:	6806      	ldr	r6, [r0, #0]
    5da2:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5da4:	2a03      	cmp	r2, #3
    5da6:	d109      	bne.n	5dbc <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    5da8:	b249      	sxtb	r1, r1
    5daa:	2900      	cmp	r1, #0
    5dac:	db44      	blt.n	5e38 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    5dae:	6802      	ldr	r2, [r0, #0]
    5db0:	015b      	lsls	r3, r3, #5
    5db2:	18d3      	adds	r3, r2, r3
    5db4:	330a      	adds	r3, #10
    5db6:	33ff      	adds	r3, #255	; 0xff
    5db8:	2220      	movs	r2, #32
    5dba:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    5dbc:	2000      	movs	r0, #0
    5dbe:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    5dc0:	b24c      	sxtb	r4, r1
    5dc2:	2c00      	cmp	r4, #0
    5dc4:	db08      	blt.n	5dd8 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    5dc6:	015c      	lsls	r4, r3, #5
    5dc8:	6805      	ldr	r5, [r0, #0]
    5dca:	46ac      	mov	ip, r5
    5dcc:	4464      	add	r4, ip
    5dce:	340a      	adds	r4, #10
    5dd0:	34ff      	adds	r4, #255	; 0xff
    5dd2:	2501      	movs	r5, #1
    5dd4:	7025      	strb	r5, [r4, #0]
    5dd6:	e7e5      	b.n	5da4 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    5dd8:	015c      	lsls	r4, r3, #5
    5dda:	6805      	ldr	r5, [r0, #0]
    5ddc:	46ac      	mov	ip, r5
    5dde:	4464      	add	r4, ip
    5de0:	340a      	adds	r4, #10
    5de2:	34ff      	adds	r4, #255	; 0xff
    5de4:	2502      	movs	r5, #2
    5de6:	7025      	strb	r5, [r4, #0]
    5de8:	e7dc      	b.n	5da4 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    5dea:	2a01      	cmp	r2, #1
    5dec:	d11a      	bne.n	5e24 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    5dee:	2b00      	cmp	r3, #0
    5df0:	d105      	bne.n	5dfe <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    5df2:	6802      	ldr	r2, [r0, #0]
    5df4:	210c      	movs	r1, #12
    5df6:	230a      	movs	r3, #10
    5df8:	33ff      	adds	r3, #255	; 0xff
    5dfa:	54d1      	strb	r1, [r2, r3]
    5dfc:	e7de      	b.n	5dbc <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    5dfe:	b249      	sxtb	r1, r1
    5e00:	2900      	cmp	r1, #0
    5e02:	db07      	blt.n	5e14 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    5e04:	6802      	ldr	r2, [r0, #0]
    5e06:	015b      	lsls	r3, r3, #5
    5e08:	18d3      	adds	r3, r2, r3
    5e0a:	330a      	adds	r3, #10
    5e0c:	33ff      	adds	r3, #255	; 0xff
    5e0e:	2204      	movs	r2, #4
    5e10:	701a      	strb	r2, [r3, #0]
    5e12:	e7d3      	b.n	5dbc <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    5e14:	6802      	ldr	r2, [r0, #0]
    5e16:	015b      	lsls	r3, r3, #5
    5e18:	18d3      	adds	r3, r2, r3
    5e1a:	330a      	adds	r3, #10
    5e1c:	33ff      	adds	r3, #255	; 0xff
    5e1e:	2208      	movs	r2, #8
    5e20:	701a      	strb	r2, [r3, #0]
    5e22:	e7cb      	b.n	5dbc <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    5e24:	2a02      	cmp	r2, #2
    5e26:	d1bd      	bne.n	5da4 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    5e28:	6802      	ldr	r2, [r0, #0]
    5e2a:	015b      	lsls	r3, r3, #5
    5e2c:	18d3      	adds	r3, r2, r3
    5e2e:	330a      	adds	r3, #10
    5e30:	33ff      	adds	r3, #255	; 0xff
    5e32:	2210      	movs	r2, #16
    5e34:	701a      	strb	r2, [r3, #0]
    5e36:	e7c1      	b.n	5dbc <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    5e38:	6802      	ldr	r2, [r0, #0]
    5e3a:	015b      	lsls	r3, r3, #5
    5e3c:	18d3      	adds	r3, r2, r3
    5e3e:	330a      	adds	r3, #10
    5e40:	33ff      	adds	r3, #255	; 0xff
    5e42:	2240      	movs	r2, #64	; 0x40
    5e44:	701a      	strb	r2, [r3, #0]
    5e46:	e7b9      	b.n	5dbc <usb_device_endpoint_enable_callback+0x40>
    5e48:	0000c0c4 	.word	0x0000c0c4

00005e4c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    5e4c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    5e4e:	230f      	movs	r3, #15
    5e50:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    5e52:	18c4      	adds	r4, r0, r3
    5e54:	3461      	adds	r4, #97	; 0x61
    5e56:	34ff      	adds	r4, #255	; 0xff
    5e58:	4d2f      	ldr	r5, [pc, #188]	; (5f18 <usb_device_endpoint_disable_callback+0xcc>)
    5e5a:	5cae      	ldrb	r6, [r5, r2]
    5e5c:	7825      	ldrb	r5, [r4, #0]
    5e5e:	43b5      	bics	r5, r6
    5e60:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    5e62:	2a00      	cmp	r2, #0
    5e64:	d129      	bne.n	5eba <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    5e66:	2b00      	cmp	r3, #0
    5e68:	d112      	bne.n	5e90 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    5e6a:	2503      	movs	r5, #3
    5e6c:	2484      	movs	r4, #132	; 0x84
    5e6e:	0064      	lsls	r4, r4, #1
    5e70:	6806      	ldr	r6, [r0, #0]
    5e72:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    5e74:	2a03      	cmp	r2, #3
    5e76:	d109      	bne.n	5e8c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    5e78:	b249      	sxtb	r1, r1
    5e7a:	2900      	cmp	r1, #0
    5e7c:	db44      	blt.n	5f08 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    5e7e:	6802      	ldr	r2, [r0, #0]
    5e80:	015b      	lsls	r3, r3, #5
    5e82:	18d3      	adds	r3, r2, r3
    5e84:	3309      	adds	r3, #9
    5e86:	33ff      	adds	r3, #255	; 0xff
    5e88:	2220      	movs	r2, #32
    5e8a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    5e8c:	2000      	movs	r0, #0
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    5e90:	b24c      	sxtb	r4, r1
    5e92:	2c00      	cmp	r4, #0
    5e94:	db08      	blt.n	5ea8 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    5e96:	015c      	lsls	r4, r3, #5
    5e98:	6805      	ldr	r5, [r0, #0]
    5e9a:	46ac      	mov	ip, r5
    5e9c:	4464      	add	r4, ip
    5e9e:	3409      	adds	r4, #9
    5ea0:	34ff      	adds	r4, #255	; 0xff
    5ea2:	2501      	movs	r5, #1
    5ea4:	7025      	strb	r5, [r4, #0]
    5ea6:	e7e5      	b.n	5e74 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    5ea8:	015c      	lsls	r4, r3, #5
    5eaa:	6805      	ldr	r5, [r0, #0]
    5eac:	46ac      	mov	ip, r5
    5eae:	4464      	add	r4, ip
    5eb0:	3409      	adds	r4, #9
    5eb2:	34ff      	adds	r4, #255	; 0xff
    5eb4:	2502      	movs	r5, #2
    5eb6:	7025      	strb	r5, [r4, #0]
    5eb8:	e7dc      	b.n	5e74 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    5eba:	2a01      	cmp	r2, #1
    5ebc:	d11a      	bne.n	5ef4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d105      	bne.n	5ece <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    5ec2:	6802      	ldr	r2, [r0, #0]
    5ec4:	210c      	movs	r1, #12
    5ec6:	3309      	adds	r3, #9
    5ec8:	33ff      	adds	r3, #255	; 0xff
    5eca:	54d1      	strb	r1, [r2, r3]
    5ecc:	e7de      	b.n	5e8c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    5ece:	b249      	sxtb	r1, r1
    5ed0:	2900      	cmp	r1, #0
    5ed2:	db07      	blt.n	5ee4 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    5ed4:	6802      	ldr	r2, [r0, #0]
    5ed6:	015b      	lsls	r3, r3, #5
    5ed8:	18d3      	adds	r3, r2, r3
    5eda:	3309      	adds	r3, #9
    5edc:	33ff      	adds	r3, #255	; 0xff
    5ede:	2204      	movs	r2, #4
    5ee0:	701a      	strb	r2, [r3, #0]
    5ee2:	e7d3      	b.n	5e8c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    5ee4:	6802      	ldr	r2, [r0, #0]
    5ee6:	015b      	lsls	r3, r3, #5
    5ee8:	18d3      	adds	r3, r2, r3
    5eea:	3309      	adds	r3, #9
    5eec:	33ff      	adds	r3, #255	; 0xff
    5eee:	2208      	movs	r2, #8
    5ef0:	701a      	strb	r2, [r3, #0]
    5ef2:	e7cb      	b.n	5e8c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    5ef4:	2a02      	cmp	r2, #2
    5ef6:	d1bd      	bne.n	5e74 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    5ef8:	6802      	ldr	r2, [r0, #0]
    5efa:	015b      	lsls	r3, r3, #5
    5efc:	18d3      	adds	r3, r2, r3
    5efe:	3309      	adds	r3, #9
    5f00:	33ff      	adds	r3, #255	; 0xff
    5f02:	2210      	movs	r2, #16
    5f04:	701a      	strb	r2, [r3, #0]
    5f06:	e7c1      	b.n	5e8c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    5f08:	6802      	ldr	r2, [r0, #0]
    5f0a:	015b      	lsls	r3, r3, #5
    5f0c:	18d3      	adds	r3, r2, r3
    5f0e:	3309      	adds	r3, #9
    5f10:	33ff      	adds	r3, #255	; 0xff
    5f12:	2240      	movs	r2, #64	; 0x40
    5f14:	701a      	strb	r2, [r3, #0]
    5f16:	e7b9      	b.n	5e8c <usb_device_endpoint_disable_callback+0x40>
    5f18:	0000c0c4 	.word	0x0000c0c4

00005f1c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    5f1c:	2300      	movs	r3, #0
    5f1e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    5f20:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    5f22:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    5f24:	3301      	adds	r3, #1
    5f26:	70c3      	strb	r3, [r0, #3]
}
    5f28:	4770      	bx	lr
	...

00005f2c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    5f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    5f2e:	780c      	ldrb	r4, [r1, #0]
    5f30:	230f      	movs	r3, #15
    5f32:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    5f34:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    5f36:	78ca      	ldrb	r2, [r1, #3]
    5f38:	2a04      	cmp	r2, #4
    5f3a:	d870      	bhi.n	601e <usb_device_endpoint_set_config+0xf2>
    5f3c:	0092      	lsls	r2, r2, #2
    5f3e:	4d89      	ldr	r5, [pc, #548]	; (6164 <usb_device_endpoint_set_config+0x238>)
    5f40:	58aa      	ldr	r2, [r5, r2]
    5f42:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    5f44:	6802      	ldr	r2, [r0, #0]
    5f46:	3308      	adds	r3, #8
    5f48:	015b      	lsls	r3, r3, #5
    5f4a:	2100      	movs	r1, #0
    5f4c:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    5f4e:	2200      	movs	r2, #0
    5f50:	e082      	b.n	6058 <usb_device_endpoint_set_config+0x12c>
    5f52:	015c      	lsls	r4, r3, #5
    5f54:	6802      	ldr	r2, [r0, #0]
    5f56:	4694      	mov	ip, r2
    5f58:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5f5a:	2280      	movs	r2, #128	; 0x80
    5f5c:	0052      	lsls	r2, r2, #1
    5f5e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    5f60:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5f62:	076d      	lsls	r5, r5, #29
    5f64:	d178      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    5f66:	32e4      	adds	r2, #228	; 0xe4
    5f68:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5f6a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    5f6c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    5f6e:	422e      	tst	r6, r5
    5f70:	d172      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    5f72:	3d5f      	subs	r5, #95	; 0x5f
    5f74:	32e4      	adds	r2, #228	; 0xe4
    5f76:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    5f78:	001a      	movs	r2, r3
    5f7a:	3208      	adds	r2, #8
    5f7c:	0152      	lsls	r2, r2, #5
    5f7e:	6804      	ldr	r4, [r0, #0]
    5f80:	18a4      	adds	r4, r4, r2
    5f82:	352f      	adds	r5, #47	; 0x2f
    5f84:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    5f86:	6800      	ldr	r0, [r0, #0]
    5f88:	1882      	adds	r2, r0, r2
    5f8a:	2080      	movs	r0, #128	; 0x80
    5f8c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    5f8e:	788a      	ldrb	r2, [r1, #2]
    5f90:	2a00      	cmp	r2, #0
    5f92:	d01f      	beq.n	5fd4 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5f94:	0158      	lsls	r0, r3, #5
    5f96:	4a74      	ldr	r2, [pc, #464]	; (6168 <usb_device_endpoint_set_config+0x23c>)
    5f98:	1812      	adds	r2, r2, r0
    5f9a:	6854      	ldr	r4, [r2, #4]
    5f9c:	2080      	movs	r0, #128	; 0x80
    5f9e:	0600      	lsls	r0, r0, #24
    5fa0:	4304      	orrs	r4, r0
    5fa2:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5fa4:	6954      	ldr	r4, [r2, #20]
    5fa6:	4320      	orrs	r0, r4
    5fa8:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    5faa:	2507      	movs	r5, #7
    5fac:	784c      	ldrb	r4, [r1, #1]
    5fae:	015a      	lsls	r2, r3, #5
    5fb0:	4b6d      	ldr	r3, [pc, #436]	; (6168 <usb_device_endpoint_set_config+0x23c>)
    5fb2:	189b      	adds	r3, r3, r2
    5fb4:	6858      	ldr	r0, [r3, #4]
    5fb6:	402c      	ands	r4, r5
    5fb8:	0724      	lsls	r4, r4, #28
    5fba:	4e6c      	ldr	r6, [pc, #432]	; (616c <usb_device_endpoint_set_config+0x240>)
    5fbc:	4030      	ands	r0, r6
    5fbe:	4320      	orrs	r0, r4
    5fc0:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    5fc2:	7849      	ldrb	r1, [r1, #1]
    5fc4:	695a      	ldr	r2, [r3, #20]
    5fc6:	4029      	ands	r1, r5
    5fc8:	0709      	lsls	r1, r1, #28
    5fca:	4032      	ands	r2, r6
    5fcc:	430a      	orrs	r2, r1
    5fce:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    5fd0:	2200      	movs	r2, #0
    5fd2:	e041      	b.n	6058 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5fd4:	0158      	lsls	r0, r3, #5
    5fd6:	4a64      	ldr	r2, [pc, #400]	; (6168 <usb_device_endpoint_set_config+0x23c>)
    5fd8:	1812      	adds	r2, r2, r0
    5fda:	6850      	ldr	r0, [r2, #4]
    5fdc:	0040      	lsls	r0, r0, #1
    5fde:	0840      	lsrs	r0, r0, #1
    5fe0:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    5fe2:	6950      	ldr	r0, [r2, #20]
    5fe4:	0040      	lsls	r0, r0, #1
    5fe6:	0840      	lsrs	r0, r0, #1
    5fe8:	6150      	str	r0, [r2, #20]
    5fea:	e7de      	b.n	5faa <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    5fec:	2c00      	cmp	r4, #0
    5fee:	db35      	blt.n	605c <usb_device_endpoint_set_config+0x130>
    5ff0:	015d      	lsls	r5, r3, #5
    5ff2:	6802      	ldr	r2, [r0, #0]
    5ff4:	4694      	mov	ip, r2
    5ff6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    5ff8:	2280      	movs	r2, #128	; 0x80
    5ffa:	0052      	lsls	r2, r2, #1
    5ffc:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    5ffe:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6000:	0776      	lsls	r6, r6, #29
    6002:	d129      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6004:	2680      	movs	r6, #128	; 0x80
    6006:	0076      	lsls	r6, r6, #1
    6008:	5daa      	ldrb	r2, [r5, r6]
    600a:	2702      	movs	r7, #2
    600c:	433a      	orrs	r2, r7
    600e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6010:	6802      	ldr	r2, [r0, #0]
    6012:	0018      	movs	r0, r3
    6014:	3008      	adds	r0, #8
    6016:	0140      	lsls	r0, r0, #5
    6018:	1812      	adds	r2, r2, r0
    601a:	2040      	movs	r0, #64	; 0x40
    601c:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    601e:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6020:	784f      	ldrb	r7, [r1, #1]
    6022:	005d      	lsls	r5, r3, #1
    6024:	18ad      	adds	r5, r5, r2
    6026:	012d      	lsls	r5, r5, #4
    6028:	4e4f      	ldr	r6, [pc, #316]	; (6168 <usb_device_endpoint_set_config+0x23c>)
    602a:	1975      	adds	r5, r6, r5
    602c:	6868      	ldr	r0, [r5, #4]
    602e:	2407      	movs	r4, #7
    6030:	403c      	ands	r4, r7
    6032:	0724      	lsls	r4, r4, #28
    6034:	4e4d      	ldr	r6, [pc, #308]	; (616c <usb_device_endpoint_set_config+0x240>)
    6036:	4030      	ands	r0, r6
    6038:	4320      	orrs	r0, r4
    603a:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    603c:	7889      	ldrb	r1, [r1, #2]
    603e:	2900      	cmp	r1, #0
    6040:	d000      	beq.n	6044 <usb_device_endpoint_set_config+0x118>
    6042:	e088      	b.n	6156 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6044:	005b      	lsls	r3, r3, #1
    6046:	189b      	adds	r3, r3, r2
    6048:	011b      	lsls	r3, r3, #4
    604a:	4a47      	ldr	r2, [pc, #284]	; (6168 <usb_device_endpoint_set_config+0x23c>)
    604c:	18d3      	adds	r3, r2, r3
    604e:	685a      	ldr	r2, [r3, #4]
    6050:	0052      	lsls	r2, r2, #1
    6052:	0852      	lsrs	r2, r2, #1
    6054:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6056:	2200      	movs	r2, #0
}
    6058:	0010      	movs	r0, r2
    605a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    605c:	015d      	lsls	r5, r3, #5
    605e:	6802      	ldr	r2, [r0, #0]
    6060:	4694      	mov	ip, r2
    6062:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6064:	2280      	movs	r2, #128	; 0x80
    6066:	0052      	lsls	r2, r2, #1
    6068:	5caf      	ldrb	r7, [r5, r2]
    606a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    606c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    606e:	4237      	tst	r7, r6
    6070:	d1f2      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6072:	3690      	adds	r6, #144	; 0x90
    6074:	5daa      	ldrb	r2, [r5, r6]
    6076:	2720      	movs	r7, #32
    6078:	433a      	orrs	r2, r7
    607a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    607c:	6802      	ldr	r2, [r0, #0]
    607e:	0018      	movs	r0, r3
    6080:	3008      	adds	r0, #8
    6082:	0140      	lsls	r0, r0, #5
    6084:	1812      	adds	r2, r2, r0
    6086:	2080      	movs	r0, #128	; 0x80
    6088:	7110      	strb	r0, [r2, #4]
    608a:	e7c8      	b.n	601e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    608c:	2c00      	cmp	r4, #0
    608e:	db17      	blt.n	60c0 <usb_device_endpoint_set_config+0x194>
    6090:	015d      	lsls	r5, r3, #5
    6092:	6802      	ldr	r2, [r0, #0]
    6094:	4694      	mov	ip, r2
    6096:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6098:	2280      	movs	r2, #128	; 0x80
    609a:	0052      	lsls	r2, r2, #1
    609c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    609e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    60a0:	0776      	lsls	r6, r6, #29
    60a2:	d1d9      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    60a4:	2680      	movs	r6, #128	; 0x80
    60a6:	0076      	lsls	r6, r6, #1
    60a8:	5daa      	ldrb	r2, [r5, r6]
    60aa:	2703      	movs	r7, #3
    60ac:	433a      	orrs	r2, r7
    60ae:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    60b0:	6802      	ldr	r2, [r0, #0]
    60b2:	0018      	movs	r0, r3
    60b4:	3008      	adds	r0, #8
    60b6:	0140      	lsls	r0, r0, #5
    60b8:	1812      	adds	r2, r2, r0
    60ba:	2040      	movs	r0, #64	; 0x40
    60bc:	7150      	strb	r0, [r2, #5]
    60be:	e7ae      	b.n	601e <usb_device_endpoint_set_config+0xf2>
    60c0:	015d      	lsls	r5, r3, #5
    60c2:	6802      	ldr	r2, [r0, #0]
    60c4:	4694      	mov	ip, r2
    60c6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    60c8:	2280      	movs	r2, #128	; 0x80
    60ca:	0052      	lsls	r2, r2, #1
    60cc:	5caf      	ldrb	r7, [r5, r2]
    60ce:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    60d0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    60d2:	4237      	tst	r7, r6
    60d4:	d1c0      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    60d6:	3690      	adds	r6, #144	; 0x90
    60d8:	5daa      	ldrb	r2, [r5, r6]
    60da:	2730      	movs	r7, #48	; 0x30
    60dc:	433a      	orrs	r2, r7
    60de:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    60e0:	6802      	ldr	r2, [r0, #0]
    60e2:	0018      	movs	r0, r3
    60e4:	3008      	adds	r0, #8
    60e6:	0140      	lsls	r0, r0, #5
    60e8:	1812      	adds	r2, r2, r0
    60ea:	2080      	movs	r0, #128	; 0x80
    60ec:	7110      	strb	r0, [r2, #4]
    60ee:	e796      	b.n	601e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    60f0:	2c00      	cmp	r4, #0
    60f2:	db17      	blt.n	6124 <usb_device_endpoint_set_config+0x1f8>
    60f4:	015d      	lsls	r5, r3, #5
    60f6:	6802      	ldr	r2, [r0, #0]
    60f8:	4694      	mov	ip, r2
    60fa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    60fc:	2280      	movs	r2, #128	; 0x80
    60fe:	0052      	lsls	r2, r2, #1
    6100:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6102:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6104:	0776      	lsls	r6, r6, #29
    6106:	d1a7      	bne.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6108:	2680      	movs	r6, #128	; 0x80
    610a:	0076      	lsls	r6, r6, #1
    610c:	5daa      	ldrb	r2, [r5, r6]
    610e:	2704      	movs	r7, #4
    6110:	433a      	orrs	r2, r7
    6112:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6114:	6802      	ldr	r2, [r0, #0]
    6116:	0018      	movs	r0, r3
    6118:	3008      	adds	r0, #8
    611a:	0140      	lsls	r0, r0, #5
    611c:	1812      	adds	r2, r2, r0
    611e:	2040      	movs	r0, #64	; 0x40
    6120:	7150      	strb	r0, [r2, #5]
    6122:	e77c      	b.n	601e <usb_device_endpoint_set_config+0xf2>
    6124:	015d      	lsls	r5, r3, #5
    6126:	6802      	ldr	r2, [r0, #0]
    6128:	4694      	mov	ip, r2
    612a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    612c:	2280      	movs	r2, #128	; 0x80
    612e:	0052      	lsls	r2, r2, #1
    6130:	5caf      	ldrb	r7, [r5, r2]
    6132:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6134:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6136:	4237      	tst	r7, r6
    6138:	d000      	beq.n	613c <usb_device_endpoint_set_config+0x210>
    613a:	e78d      	b.n	6058 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    613c:	3690      	adds	r6, #144	; 0x90
    613e:	5daa      	ldrb	r2, [r5, r6]
    6140:	2740      	movs	r7, #64	; 0x40
    6142:	433a      	orrs	r2, r7
    6144:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6146:	6802      	ldr	r2, [r0, #0]
    6148:	0018      	movs	r0, r3
    614a:	3008      	adds	r0, #8
    614c:	0140      	lsls	r0, r0, #5
    614e:	1812      	adds	r2, r2, r0
    6150:	2080      	movs	r0, #128	; 0x80
    6152:	7110      	strb	r0, [r2, #4]
    6154:	e763      	b.n	601e <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6156:	6869      	ldr	r1, [r5, #4]
    6158:	2380      	movs	r3, #128	; 0x80
    615a:	061b      	lsls	r3, r3, #24
    615c:	430b      	orrs	r3, r1
    615e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6160:	2200      	movs	r2, #0
    6162:	e779      	b.n	6058 <usb_device_endpoint_set_config+0x12c>
    6164:	0000c0a0 	.word	0x0000c0a0
    6168:	200008b0 	.word	0x200008b0
    616c:	8fffffff 	.word	0x8fffffff

00006170 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    6170:	230f      	movs	r3, #15
    6172:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6174:	b249      	sxtb	r1, r1
    6176:	2900      	cmp	r1, #0
    6178:	db0a      	blt.n	6190 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    617a:	3308      	adds	r3, #8
    617c:	015b      	lsls	r3, r3, #5
    617e:	6802      	ldr	r2, [r0, #0]
    6180:	18d2      	adds	r2, r2, r3
    6182:	2140      	movs	r1, #64	; 0x40
    6184:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6186:	6802      	ldr	r2, [r0, #0]
    6188:	18d3      	adds	r3, r2, r3
    618a:	2201      	movs	r2, #1
    618c:	71da      	strb	r2, [r3, #7]
	}
}
    618e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6190:	3308      	adds	r3, #8
    6192:	015b      	lsls	r3, r3, #5
    6194:	6802      	ldr	r2, [r0, #0]
    6196:	18d2      	adds	r2, r2, r3
    6198:	2180      	movs	r1, #128	; 0x80
    619a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    619c:	6802      	ldr	r2, [r0, #0]
    619e:	18d3      	adds	r3, r2, r3
    61a0:	2202      	movs	r2, #2
    61a2:	71da      	strb	r2, [r3, #7]
    61a4:	e7f3      	b.n	618e <usb_device_endpoint_abort_job+0x1e>

000061a6 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    61a6:	230f      	movs	r3, #15
    61a8:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    61aa:	b249      	sxtb	r1, r1
    61ac:	2900      	cmp	r1, #0
    61ae:	db07      	blt.n	61c0 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    61b0:	6802      	ldr	r2, [r0, #0]
    61b2:	3308      	adds	r3, #8
    61b4:	015b      	lsls	r3, r3, #5
    61b6:	18d3      	adds	r3, r2, r3
    61b8:	7998      	ldrb	r0, [r3, #6]
    61ba:	06c0      	lsls	r0, r0, #27
    61bc:	0fc0      	lsrs	r0, r0, #31
	}
}
    61be:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    61c0:	6802      	ldr	r2, [r0, #0]
    61c2:	3308      	adds	r3, #8
    61c4:	015b      	lsls	r3, r3, #5
    61c6:	18d3      	adds	r3, r2, r3
    61c8:	7998      	ldrb	r0, [r3, #6]
    61ca:	0680      	lsls	r0, r0, #26
    61cc:	0fc0      	lsrs	r0, r0, #31
    61ce:	e7f6      	b.n	61be <usb_device_endpoint_is_halted+0x18>

000061d0 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    61d0:	230f      	movs	r3, #15
    61d2:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    61d4:	b249      	sxtb	r1, r1
    61d6:	2900      	cmp	r1, #0
    61d8:	db06      	blt.n	61e8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    61da:	6802      	ldr	r2, [r0, #0]
    61dc:	3308      	adds	r3, #8
    61de:	015b      	lsls	r3, r3, #5
    61e0:	18d3      	adds	r3, r2, r3
    61e2:	2210      	movs	r2, #16
    61e4:	715a      	strb	r2, [r3, #5]
	}
}
    61e6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    61e8:	6802      	ldr	r2, [r0, #0]
    61ea:	3308      	adds	r3, #8
    61ec:	015b      	lsls	r3, r3, #5
    61ee:	18d3      	adds	r3, r2, r3
    61f0:	2220      	movs	r2, #32
    61f2:	715a      	strb	r2, [r3, #5]
    61f4:	e7f7      	b.n	61e6 <usb_device_endpoint_set_halt+0x16>

000061f6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    61f6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    61f8:	230f      	movs	r3, #15
    61fa:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    61fc:	b249      	sxtb	r1, r1
    61fe:	2900      	cmp	r1, #0
    6200:	db1d      	blt.n	623e <usb_device_endpoint_clear_halt+0x48>
    6202:	0159      	lsls	r1, r3, #5
    6204:	6802      	ldr	r2, [r0, #0]
    6206:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    6208:	2483      	movs	r4, #131	; 0x83
    620a:	0064      	lsls	r4, r4, #1
    620c:	5d14      	ldrb	r4, [r2, r4]
    620e:	06e4      	lsls	r4, r4, #27
    6210:	d514      	bpl.n	623c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6212:	2510      	movs	r5, #16
    6214:	2482      	movs	r4, #130	; 0x82
    6216:	0064      	lsls	r4, r4, #1
    6218:	5515      	strb	r5, [r2, r4]
    621a:	6802      	ldr	r2, [r0, #0]
    621c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    621e:	2108      	movs	r1, #8
    6220:	31ff      	adds	r1, #255	; 0xff
    6222:	5c51      	ldrb	r1, [r2, r1]
    6224:	0689      	lsls	r1, r1, #26
    6226:	d509      	bpl.n	623c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6228:	3ce4      	subs	r4, #228	; 0xe4
    622a:	2108      	movs	r1, #8
    622c:	31ff      	adds	r1, #255	; 0xff
    622e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    6230:	6802      	ldr	r2, [r0, #0]
    6232:	3308      	adds	r3, #8
    6234:	015b      	lsls	r3, r3, #5
    6236:	18d3      	adds	r3, r2, r3
    6238:	2201      	movs	r2, #1
    623a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    623c:	bd30      	pop	{r4, r5, pc}
    623e:	0159      	lsls	r1, r3, #5
    6240:	6802      	ldr	r2, [r0, #0]
    6242:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6244:	2483      	movs	r4, #131	; 0x83
    6246:	0064      	lsls	r4, r4, #1
    6248:	5d14      	ldrb	r4, [r2, r4]
    624a:	06a4      	lsls	r4, r4, #26
    624c:	d5f6      	bpl.n	623c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    624e:	2520      	movs	r5, #32
    6250:	2482      	movs	r4, #130	; 0x82
    6252:	0064      	lsls	r4, r4, #1
    6254:	5515      	strb	r5, [r2, r4]
    6256:	6802      	ldr	r2, [r0, #0]
    6258:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    625a:	2108      	movs	r1, #8
    625c:	31ff      	adds	r1, #255	; 0xff
    625e:	5c51      	ldrb	r1, [r2, r1]
    6260:	0649      	lsls	r1, r1, #25
    6262:	d5eb      	bpl.n	623c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6264:	3cc4      	subs	r4, #196	; 0xc4
    6266:	2108      	movs	r1, #8
    6268:	31ff      	adds	r1, #255	; 0xff
    626a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    626c:	6802      	ldr	r2, [r0, #0]
    626e:	3308      	adds	r3, #8
    6270:	015b      	lsls	r3, r3, #5
    6272:	18d3      	adds	r3, r2, r3
    6274:	2202      	movs	r2, #2
    6276:	711a      	strb	r2, [r3, #4]
    6278:	e7e0      	b.n	623c <usb_device_endpoint_clear_halt+0x46>
	...

0000627c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    627c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    627e:	000c      	movs	r4, r1
    6280:	3408      	adds	r4, #8
    6282:	0164      	lsls	r4, r4, #5
    6284:	6805      	ldr	r5, [r0, #0]
    6286:	5d64      	ldrb	r4, [r4, r5]
    6288:	0664      	lsls	r4, r4, #25
    628a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    628c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    628e:	2c00      	cmp	r4, #0
    6290:	d101      	bne.n	6296 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6292:	0028      	movs	r0, r5
    6294:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6296:	014c      	lsls	r4, r1, #5
    6298:	4d0b      	ldr	r5, [pc, #44]	; (62c8 <usb_device_endpoint_write_buffer_job+0x4c>)
    629a:	192d      	adds	r5, r5, r4
    629c:	002c      	movs	r4, r5
    629e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    62a0:	696a      	ldr	r2, [r5, #20]
    62a2:	4d0a      	ldr	r5, [pc, #40]	; (62cc <usb_device_endpoint_write_buffer_job+0x50>)
    62a4:	402a      	ands	r2, r5
    62a6:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    62a8:	6962      	ldr	r2, [r4, #20]
    62aa:	049b      	lsls	r3, r3, #18
    62ac:	0c9b      	lsrs	r3, r3, #18
    62ae:	0b92      	lsrs	r2, r2, #14
    62b0:	0392      	lsls	r2, r2, #14
    62b2:	4313      	orrs	r3, r2
    62b4:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    62b6:	6803      	ldr	r3, [r0, #0]
    62b8:	3108      	adds	r1, #8
    62ba:	0149      	lsls	r1, r1, #5
    62bc:	1859      	adds	r1, r3, r1
    62be:	2380      	movs	r3, #128	; 0x80
    62c0:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    62c2:	2500      	movs	r5, #0
    62c4:	e7e5      	b.n	6292 <usb_device_endpoint_write_buffer_job+0x16>
    62c6:	46c0      	nop			; (mov r8, r8)
    62c8:	200008b0 	.word	0x200008b0
    62cc:	f0003fff 	.word	0xf0003fff

000062d0 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    62d0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    62d2:	000c      	movs	r4, r1
    62d4:	3408      	adds	r4, #8
    62d6:	0164      	lsls	r4, r4, #5
    62d8:	6805      	ldr	r5, [r0, #0]
    62da:	5d64      	ldrb	r4, [r4, r5]
    62dc:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    62de:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    62e0:	2c00      	cmp	r4, #0
    62e2:	d101      	bne.n	62e8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    62e4:	0028      	movs	r0, r5
    62e6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    62e8:	4c0b      	ldr	r4, [pc, #44]	; (6318 <usb_device_endpoint_read_buffer_job+0x48>)
    62ea:	014d      	lsls	r5, r1, #5
    62ec:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    62ee:	1962      	adds	r2, r4, r5
    62f0:	6854      	ldr	r4, [r2, #4]
    62f2:	049b      	lsls	r3, r3, #18
    62f4:	091b      	lsrs	r3, r3, #4
    62f6:	4d09      	ldr	r5, [pc, #36]	; (631c <usb_device_endpoint_read_buffer_job+0x4c>)
    62f8:	402c      	ands	r4, r5
    62fa:	4323      	orrs	r3, r4
    62fc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    62fe:	6853      	ldr	r3, [r2, #4]
    6300:	0b9b      	lsrs	r3, r3, #14
    6302:	039b      	lsls	r3, r3, #14
    6304:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6306:	6803      	ldr	r3, [r0, #0]
    6308:	3108      	adds	r1, #8
    630a:	0149      	lsls	r1, r1, #5
    630c:	1859      	adds	r1, r3, r1
    630e:	2340      	movs	r3, #64	; 0x40
    6310:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6312:	2500      	movs	r5, #0
    6314:	e7e6      	b.n	62e4 <usb_device_endpoint_read_buffer_job+0x14>
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	200008b0 	.word	0x200008b0
    631c:	f0003fff 	.word	0xf0003fff

00006320 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6320:	4b09      	ldr	r3, [pc, #36]	; (6348 <usb_device_endpoint_setup_buffer_job+0x28>)
    6322:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6324:	685a      	ldr	r2, [r3, #4]
    6326:	4909      	ldr	r1, [pc, #36]	; (634c <usb_device_endpoint_setup_buffer_job+0x2c>)
    6328:	4011      	ands	r1, r2
    632a:	2280      	movs	r2, #128	; 0x80
    632c:	0292      	lsls	r2, r2, #10
    632e:	430a      	orrs	r2, r1
    6330:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6332:	685a      	ldr	r2, [r3, #4]
    6334:	0b92      	lsrs	r2, r2, #14
    6336:	0392      	lsls	r2, r2, #14
    6338:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    633a:	6802      	ldr	r2, [r0, #0]
    633c:	2140      	movs	r1, #64	; 0x40
    633e:	2382      	movs	r3, #130	; 0x82
    6340:	005b      	lsls	r3, r3, #1
    6342:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    6344:	2000      	movs	r0, #0
    6346:	4770      	bx	lr
    6348:	200008b0 	.word	0x200008b0
    634c:	f0003fff 	.word	0xf0003fff

00006350 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6350:	6802      	ldr	r2, [r0, #0]
    6352:	7813      	ldrb	r3, [r2, #0]
    6354:	2102      	movs	r1, #2
    6356:	430b      	orrs	r3, r1
    6358:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    635a:	6802      	ldr	r2, [r0, #0]
    635c:	7893      	ldrb	r3, [r2, #2]
    635e:	2b02      	cmp	r3, #2
    6360:	d0fc      	beq.n	635c <usb_enable+0xc>
}
    6362:	4770      	bx	lr

00006364 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6364:	b5f0      	push	{r4, r5, r6, r7, lr}
    6366:	46de      	mov	lr, fp
    6368:	4657      	mov	r7, sl
    636a:	464e      	mov	r6, r9
    636c:	4645      	mov	r5, r8
    636e:	b5e0      	push	{r5, r6, r7, lr}
    6370:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    6372:	4bc0      	ldr	r3, [pc, #768]	; (6674 <USB_Handler+0x310>)
    6374:	681f      	ldr	r7, [r3, #0]
    6376:	683d      	ldr	r5, [r7, #0]
    6378:	782b      	ldrb	r3, [r5, #0]
    637a:	09db      	lsrs	r3, r3, #7
    637c:	d114      	bne.n	63a8 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    637e:	8c2e      	ldrh	r6, [r5, #32]
    6380:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    6382:	2e00      	cmp	r6, #0
    6384:	d000      	beq.n	6388 <USB_Handler+0x24>
    6386:	e1a5      	b.n	66d4 <USB_Handler+0x370>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    6388:	8bae      	ldrh	r6, [r5, #28]
    638a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    638c:	23ab      	movs	r3, #171	; 0xab
    638e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6390:	5afb      	ldrh	r3, [r7, r3]
    6392:	22aa      	movs	r2, #170	; 0xaa
    6394:	0052      	lsls	r2, r2, #1
    6396:	5abd      	ldrh	r5, [r7, r2]
    6398:	401d      	ands	r5, r3
    639a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    639c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    639e:	4fb6      	ldr	r7, [pc, #728]	; (6678 <USB_Handler+0x314>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    63a0:	4bb4      	ldr	r3, [pc, #720]	; (6674 <USB_Handler+0x310>)
    63a2:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    63a4:	4698      	mov	r8, r3
    63a6:	e180      	b.n	66aa <USB_Handler+0x346>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    63a8:	8c28      	ldrh	r0, [r5, #32]
    63aa:	b280      	uxth	r0, r0
    63ac:	4bb3      	ldr	r3, [pc, #716]	; (667c <USB_Handler+0x318>)
    63ae:	4798      	blx	r3
    63b0:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    63b2:	281f      	cmp	r0, #31
    63b4:	d900      	bls.n	63b8 <USB_Handler+0x54>
    63b6:	e0d6      	b.n	6566 <USB_Handler+0x202>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    63b8:	0003      	movs	r3, r0
    63ba:	3308      	adds	r3, #8
    63bc:	015b      	lsls	r3, r3, #5
    63be:	18ed      	adds	r5, r5, r3
    63c0:	79ed      	ldrb	r5, [r5, #7]
    63c2:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    63c4:	07ab      	lsls	r3, r5, #30
    63c6:	d041      	beq.n	644c <USB_Handler+0xe8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    63c8:	4aad      	ldr	r2, [pc, #692]	; (6680 <USB_Handler+0x31c>)
    63ca:	2301      	movs	r3, #1
    63cc:	4083      	lsls	r3, r0
    63ce:	6811      	ldr	r1, [r2, #0]
    63d0:	4399      	bics	r1, r3
    63d2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    63d4:	0003      	movs	r3, r0
    63d6:	3308      	adds	r3, #8
    63d8:	015b      	lsls	r3, r3, #5
    63da:	683a      	ldr	r2, [r7, #0]
    63dc:	4694      	mov	ip, r2
    63de:	4463      	add	r3, ip
    63e0:	2203      	movs	r2, #3
    63e2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    63e4:	183b      	adds	r3, r7, r0
    63e6:	33ae      	adds	r3, #174	; 0xae
    63e8:	781b      	ldrb	r3, [r3, #0]
    63ea:	07db      	lsls	r3, r3, #31
    63ec:	d52e      	bpl.n	644c <USB_Handler+0xe8>
				pipe_callback_para.pipe_num = pipe_int;
    63ee:	4ba5      	ldr	r3, [pc, #660]	; (6684 <USB_Handler+0x320>)
    63f0:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    63f2:	683a      	ldr	r2, [r7, #0]
    63f4:	0003      	movs	r3, r0
    63f6:	3308      	adds	r3, #8
    63f8:	015b      	lsls	r3, r3, #5
    63fa:	5c9b      	ldrb	r3, [r3, r2]
    63fc:	079b      	lsls	r3, r3, #30
    63fe:	0f9b      	lsrs	r3, r3, #30
    6400:	2b01      	cmp	r3, #1
    6402:	d100      	bne.n	6406 <USB_Handler+0xa2>
    6404:	e081      	b.n	650a <USB_Handler+0x1a6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6406:	0142      	lsls	r2, r0, #5
    6408:	4b9f      	ldr	r3, [pc, #636]	; (6688 <USB_Handler+0x324>)
    640a:	189b      	adds	r3, r3, r2
    640c:	685a      	ldr	r2, [r3, #4]
    640e:	0112      	lsls	r2, r2, #4
    6410:	0c92      	lsrs	r2, r2, #18
    6412:	b290      	uxth	r0, r2
    6414:	499b      	ldr	r1, [pc, #620]	; (6684 <USB_Handler+0x320>)
    6416:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6418:	685a      	ldr	r2, [r3, #4]
    641a:	0492      	lsls	r2, r2, #18
    641c:	0c92      	lsrs	r2, r2, #18
    641e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6420:	685a      	ldr	r2, [r3, #4]
    6422:	499a      	ldr	r1, [pc, #616]	; (668c <USB_Handler+0x328>)
    6424:	400a      	ands	r2, r1
    6426:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6428:	2800      	cmp	r0, #0
    642a:	d107      	bne.n	643c <USB_Handler+0xd8>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    642c:	0162      	lsls	r2, r4, #5
    642e:	4b96      	ldr	r3, [pc, #600]	; (6688 <USB_Handler+0x324>)
    6430:	189b      	adds	r3, r3, r2
    6432:	685b      	ldr	r3, [r3, #4]
    6434:	049b      	lsls	r3, r3, #18
    6436:	0c9b      	lsrs	r3, r3, #18
    6438:	4a92      	ldr	r2, [pc, #584]	; (6684 <USB_Handler+0x320>)
    643a:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    643c:	4b8d      	ldr	r3, [pc, #564]	; (6674 <USB_Handler+0x310>)
    643e:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6440:	1ca3      	adds	r3, r4, #2
    6442:	011b      	lsls	r3, r3, #4
    6444:	18c3      	adds	r3, r0, r3
    6446:	685b      	ldr	r3, [r3, #4]
    6448:	498e      	ldr	r1, [pc, #568]	; (6684 <USB_Handler+0x320>)
    644a:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    644c:	076b      	lsls	r3, r5, #29
    644e:	d50e      	bpl.n	646e <USB_Handler+0x10a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6450:	4a8b      	ldr	r2, [pc, #556]	; (6680 <USB_Handler+0x31c>)
    6452:	2301      	movs	r3, #1
    6454:	40a3      	lsls	r3, r4
    6456:	6811      	ldr	r1, [r2, #0]
    6458:	4399      	bics	r1, r3
    645a:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    645c:	4b85      	ldr	r3, [pc, #532]	; (6674 <USB_Handler+0x310>)
    645e:	681b      	ldr	r3, [r3, #0]
    6460:	681b      	ldr	r3, [r3, #0]
    6462:	0022      	movs	r2, r4
    6464:	3208      	adds	r2, #8
    6466:	0152      	lsls	r2, r2, #5
    6468:	189b      	adds	r3, r3, r2
    646a:	2204      	movs	r2, #4
    646c:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    646e:	072b      	lsls	r3, r5, #28
    6470:	d514      	bpl.n	649c <USB_Handler+0x138>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6472:	4a83      	ldr	r2, [pc, #524]	; (6680 <USB_Handler+0x31c>)
    6474:	2301      	movs	r3, #1
    6476:	40a3      	lsls	r3, r4
    6478:	6811      	ldr	r1, [r2, #0]
    647a:	4399      	bics	r1, r3
    647c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    647e:	4b7d      	ldr	r3, [pc, #500]	; (6674 <USB_Handler+0x310>)
    6480:	6818      	ldr	r0, [r3, #0]
    6482:	0023      	movs	r3, r4
    6484:	3308      	adds	r3, #8
    6486:	015b      	lsls	r3, r3, #5
    6488:	6802      	ldr	r2, [r0, #0]
    648a:	4694      	mov	ip, r2
    648c:	4463      	add	r3, ip
    648e:	2208      	movs	r2, #8
    6490:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6492:	1903      	adds	r3, r0, r4
    6494:	33ae      	adds	r3, #174	; 0xae
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	079b      	lsls	r3, r3, #30
    649a:	d447      	bmi.n	652c <USB_Handler+0x1c8>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    649c:	06eb      	lsls	r3, r5, #27
    649e:	d514      	bpl.n	64ca <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    64a0:	4a77      	ldr	r2, [pc, #476]	; (6680 <USB_Handler+0x31c>)
    64a2:	2301      	movs	r3, #1
    64a4:	40a3      	lsls	r3, r4
    64a6:	6811      	ldr	r1, [r2, #0]
    64a8:	4399      	bics	r1, r3
    64aa:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    64ac:	4b71      	ldr	r3, [pc, #452]	; (6674 <USB_Handler+0x310>)
    64ae:	6818      	ldr	r0, [r3, #0]
    64b0:	0023      	movs	r3, r4
    64b2:	3308      	adds	r3, #8
    64b4:	015b      	lsls	r3, r3, #5
    64b6:	6802      	ldr	r2, [r0, #0]
    64b8:	4694      	mov	ip, r2
    64ba:	4463      	add	r3, ip
    64bc:	2210      	movs	r2, #16
    64be:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    64c0:	1903      	adds	r3, r0, r4
    64c2:	33ae      	adds	r3, #174	; 0xae
    64c4:	781b      	ldrb	r3, [r3, #0]
    64c6:	075b      	lsls	r3, r3, #29
    64c8:	d43e      	bmi.n	6548 <USB_Handler+0x1e4>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    64ca:	06ab      	lsls	r3, r5, #26
    64cc:	d400      	bmi.n	64d0 <USB_Handler+0x16c>
    64ce:	e0b0      	b.n	6632 <USB_Handler+0x2ce>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    64d0:	4a6b      	ldr	r2, [pc, #428]	; (6680 <USB_Handler+0x31c>)
    64d2:	2301      	movs	r3, #1
    64d4:	40a3      	lsls	r3, r4
    64d6:	6811      	ldr	r1, [r2, #0]
    64d8:	4399      	bics	r1, r3
    64da:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    64dc:	4b65      	ldr	r3, [pc, #404]	; (6674 <USB_Handler+0x310>)
    64de:	6818      	ldr	r0, [r3, #0]
    64e0:	0023      	movs	r3, r4
    64e2:	3308      	adds	r3, #8
    64e4:	015b      	lsls	r3, r3, #5
    64e6:	6802      	ldr	r2, [r0, #0]
    64e8:	4694      	mov	ip, r2
    64ea:	4463      	add	r3, ip
    64ec:	2220      	movs	r2, #32
    64ee:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    64f0:	1903      	adds	r3, r0, r4
    64f2:	33ae      	adds	r3, #174	; 0xae
    64f4:	781b      	ldrb	r3, [r3, #0]
    64f6:	071b      	lsls	r3, r3, #28
    64f8:	d400      	bmi.n	64fc <USB_Handler+0x198>
    64fa:	e09a      	b.n	6632 <USB_Handler+0x2ce>
				pipe_callback_para.pipe_num = pipe_int;
    64fc:	4961      	ldr	r1, [pc, #388]	; (6684 <USB_Handler+0x320>)
    64fe:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6500:	0124      	lsls	r4, r4, #4
    6502:	1904      	adds	r4, r0, r4
    6504:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6506:	4798      	blx	r3
    6508:	e093      	b.n	6632 <USB_Handler+0x2ce>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    650a:	0142      	lsls	r2, r0, #5
    650c:	4b5e      	ldr	r3, [pc, #376]	; (6688 <USB_Handler+0x324>)
    650e:	189b      	adds	r3, r3, r2
    6510:	685a      	ldr	r2, [r3, #4]
    6512:	0492      	lsls	r2, r2, #18
    6514:	0c92      	lsrs	r2, r2, #18
    6516:	495b      	ldr	r1, [pc, #364]	; (6684 <USB_Handler+0x320>)
    6518:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    651a:	685a      	ldr	r2, [r3, #4]
    651c:	0112      	lsls	r2, r2, #4
    651e:	0c92      	lsrs	r2, r2, #18
    6520:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6522:	685a      	ldr	r2, [r3, #4]
    6524:	0b92      	lsrs	r2, r2, #14
    6526:	0392      	lsls	r2, r2, #14
    6528:	605a      	str	r2, [r3, #4]
    652a:	e787      	b.n	643c <USB_Handler+0xd8>
				pipe_callback_para.pipe_num = pipe_int;
    652c:	4955      	ldr	r1, [pc, #340]	; (6684 <USB_Handler+0x320>)
    652e:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6530:	0162      	lsls	r2, r4, #5
    6532:	4b55      	ldr	r3, [pc, #340]	; (6688 <USB_Handler+0x324>)
    6534:	189b      	adds	r3, r3, r2
    6536:	89db      	ldrh	r3, [r3, #14]
    6538:	221f      	movs	r2, #31
    653a:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    653c:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    653e:	0123      	lsls	r3, r4, #4
    6540:	18c3      	adds	r3, r0, r3
    6542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6544:	4798      	blx	r3
    6546:	e7a9      	b.n	649c <USB_Handler+0x138>
				pipe_callback_para.pipe_num = pipe_int;
    6548:	494e      	ldr	r1, [pc, #312]	; (6684 <USB_Handler+0x320>)
    654a:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    654c:	0162      	lsls	r2, r4, #5
    654e:	4b4e      	ldr	r3, [pc, #312]	; (6688 <USB_Handler+0x324>)
    6550:	189b      	adds	r3, r3, r2
    6552:	685b      	ldr	r3, [r3, #4]
    6554:	011b      	lsls	r3, r3, #4
    6556:	0c9b      	lsrs	r3, r3, #18
    6558:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    655a:	0123      	lsls	r3, r4, #4
    655c:	18c3      	adds	r3, r0, r3
    655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6560:	2100      	movs	r1, #0
    6562:	4798      	blx	r3
    6564:	e7b1      	b.n	64ca <USB_Handler+0x166>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6566:	8bac      	ldrh	r4, [r5, #28]
    6568:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    656a:	0763      	lsls	r3, r4, #29
    656c:	d505      	bpl.n	657a <USB_Handler+0x216>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    656e:	2304      	movs	r3, #4
    6570:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6572:	33a1      	adds	r3, #161	; 0xa1
    6574:	5cfb      	ldrb	r3, [r7, r3]
    6576:	07db      	lsls	r3, r3, #31
    6578:	d462      	bmi.n	6640 <USB_Handler+0x2dc>
		if (flags & USB_HOST_INTFLAG_RST) {
    657a:	0723      	lsls	r3, r4, #28
    657c:	d50b      	bpl.n	6596 <USB_Handler+0x232>
			host_pipe_job_busy_status = 0;
    657e:	2200      	movs	r2, #0
    6580:	4b3f      	ldr	r3, [pc, #252]	; (6680 <USB_Handler+0x31c>)
    6582:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6584:	4b3b      	ldr	r3, [pc, #236]	; (6674 <USB_Handler+0x310>)
    6586:	6818      	ldr	r0, [r3, #0]
    6588:	2308      	movs	r3, #8
    658a:	6802      	ldr	r2, [r0, #0]
    658c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    658e:	339d      	adds	r3, #157	; 0x9d
    6590:	5cc3      	ldrb	r3, [r0, r3]
    6592:	079b      	lsls	r3, r3, #30
    6594:	d458      	bmi.n	6648 <USB_Handler+0x2e4>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6596:	0663      	lsls	r3, r4, #25
    6598:	d508      	bpl.n	65ac <USB_Handler+0x248>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    659a:	4b36      	ldr	r3, [pc, #216]	; (6674 <USB_Handler+0x310>)
    659c:	6818      	ldr	r0, [r3, #0]
    659e:	2340      	movs	r3, #64	; 0x40
    65a0:	6802      	ldr	r2, [r0, #0]
    65a2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    65a4:	3365      	adds	r3, #101	; 0x65
    65a6:	5cc3      	ldrb	r3, [r0, r3]
    65a8:	06db      	lsls	r3, r3, #27
    65aa:	d450      	bmi.n	664e <USB_Handler+0x2ea>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    65ac:	06a3      	lsls	r3, r4, #26
    65ae:	d508      	bpl.n	65c2 <USB_Handler+0x25e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    65b0:	4b30      	ldr	r3, [pc, #192]	; (6674 <USB_Handler+0x310>)
    65b2:	6818      	ldr	r0, [r3, #0]
    65b4:	2320      	movs	r3, #32
    65b6:	6802      	ldr	r2, [r0, #0]
    65b8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    65ba:	3385      	adds	r3, #133	; 0x85
    65bc:	5cc3      	ldrb	r3, [r0, r3]
    65be:	071b      	lsls	r3, r3, #28
    65c0:	d448      	bmi.n	6654 <USB_Handler+0x2f0>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    65c2:	06e3      	lsls	r3, r4, #27
    65c4:	d508      	bpl.n	65d8 <USB_Handler+0x274>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    65c6:	4b2b      	ldr	r3, [pc, #172]	; (6674 <USB_Handler+0x310>)
    65c8:	6818      	ldr	r0, [r3, #0]
    65ca:	2310      	movs	r3, #16
    65cc:	6802      	ldr	r2, [r0, #0]
    65ce:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    65d0:	3395      	adds	r3, #149	; 0x95
    65d2:	5cc3      	ldrb	r3, [r0, r3]
    65d4:	075b      	lsls	r3, r3, #29
    65d6:	d440      	bmi.n	665a <USB_Handler+0x2f6>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    65d8:	0623      	lsls	r3, r4, #24
    65da:	d50b      	bpl.n	65f4 <USB_Handler+0x290>
			host_pipe_job_busy_status = 0;
    65dc:	2200      	movs	r2, #0
    65de:	4b28      	ldr	r3, [pc, #160]	; (6680 <USB_Handler+0x31c>)
    65e0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    65e2:	4b24      	ldr	r3, [pc, #144]	; (6674 <USB_Handler+0x310>)
    65e4:	6818      	ldr	r0, [r3, #0]
    65e6:	2380      	movs	r3, #128	; 0x80
    65e8:	6802      	ldr	r2, [r0, #0]
    65ea:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    65ec:	3325      	adds	r3, #37	; 0x25
    65ee:	5cc3      	ldrb	r3, [r0, r3]
    65f0:	069b      	lsls	r3, r3, #26
    65f2:	d435      	bmi.n	6660 <USB_Handler+0x2fc>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    65f4:	05e3      	lsls	r3, r4, #23
    65f6:	d50c      	bpl.n	6612 <USB_Handler+0x2ae>
			host_pipe_job_busy_status = 0;
    65f8:	2200      	movs	r2, #0
    65fa:	4b21      	ldr	r3, [pc, #132]	; (6680 <USB_Handler+0x31c>)
    65fc:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    65fe:	4b1d      	ldr	r3, [pc, #116]	; (6674 <USB_Handler+0x310>)
    6600:	6818      	ldr	r0, [r3, #0]
    6602:	2380      	movs	r3, #128	; 0x80
    6604:	005b      	lsls	r3, r3, #1
    6606:	6802      	ldr	r2, [r0, #0]
    6608:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    660a:	3b5b      	subs	r3, #91	; 0x5b
    660c:	5cc3      	ldrb	r3, [r0, r3]
    660e:	065b      	lsls	r3, r3, #25
    6610:	d429      	bmi.n	6666 <USB_Handler+0x302>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6612:	05a3      	lsls	r3, r4, #22
    6614:	d50d      	bpl.n	6632 <USB_Handler+0x2ce>
			host_pipe_job_busy_status = 0;
    6616:	2200      	movs	r2, #0
    6618:	4b19      	ldr	r3, [pc, #100]	; (6680 <USB_Handler+0x31c>)
    661a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    661c:	4b15      	ldr	r3, [pc, #84]	; (6674 <USB_Handler+0x310>)
    661e:	6818      	ldr	r0, [r3, #0]
    6620:	2380      	movs	r3, #128	; 0x80
    6622:	009b      	lsls	r3, r3, #2
    6624:	6802      	ldr	r2, [r0, #0]
    6626:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6628:	3b5c      	subs	r3, #92	; 0x5c
    662a:	3bff      	subs	r3, #255	; 0xff
    662c:	5cc3      	ldrb	r3, [r0, r3]
    662e:	2b7f      	cmp	r3, #127	; 0x7f
    6630:	d81c      	bhi.n	666c <USB_Handler+0x308>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6632:	b003      	add	sp, #12
    6634:	bc3c      	pop	{r2, r3, r4, r5}
    6636:	4690      	mov	r8, r2
    6638:	4699      	mov	r9, r3
    663a:	46a2      	mov	sl, r4
    663c:	46ab      	mov	fp, r5
    663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6640:	687b      	ldr	r3, [r7, #4]
    6642:	0038      	movs	r0, r7
    6644:	4798      	blx	r3
    6646:	e798      	b.n	657a <USB_Handler+0x216>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6648:	6883      	ldr	r3, [r0, #8]
    664a:	4798      	blx	r3
    664c:	e7a3      	b.n	6596 <USB_Handler+0x232>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    664e:	6943      	ldr	r3, [r0, #20]
    6650:	4798      	blx	r3
    6652:	e7ab      	b.n	65ac <USB_Handler+0x248>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6654:	6903      	ldr	r3, [r0, #16]
    6656:	4798      	blx	r3
    6658:	e7b3      	b.n	65c2 <USB_Handler+0x25e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    665a:	68c3      	ldr	r3, [r0, #12]
    665c:	4798      	blx	r3
    665e:	e7bb      	b.n	65d8 <USB_Handler+0x274>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6660:	6983      	ldr	r3, [r0, #24]
    6662:	4798      	blx	r3
    6664:	e7c6      	b.n	65f4 <USB_Handler+0x290>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6666:	69c3      	ldr	r3, [r0, #28]
    6668:	4798      	blx	r3
    666a:	e7d2      	b.n	6612 <USB_Handler+0x2ae>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    666c:	6a03      	ldr	r3, [r0, #32]
    666e:	4798      	blx	r3
    6670:	e7df      	b.n	6632 <USB_Handler+0x2ce>
    6672:	46c0      	nop			; (mov r8, r8)
    6674:	20000398 	.word	0x20000398
    6678:	0000c0b4 	.word	0x0000c0b4
    667c:	000090cd 	.word	0x000090cd
    6680:	200003a8 	.word	0x200003a8
    6684:	200003ac 	.word	0x200003ac
    6688:	200008b0 	.word	0x200008b0
    668c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6690:	0023      	movs	r3, r4
    6692:	332e      	adds	r3, #46	; 0x2e
    6694:	009b      	lsls	r3, r3, #2
    6696:	4642      	mov	r2, r8
    6698:	6812      	ldr	r2, [r2, #0]
    669a:	589b      	ldr	r3, [r3, r2]
    669c:	499e      	ldr	r1, [pc, #632]	; (6918 <USB_Handler+0x5b4>)
    669e:	4642      	mov	r2, r8
    66a0:	6810      	ldr	r0, [r2, #0]
    66a2:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    66a4:	3401      	adds	r4, #1
    66a6:	2c07      	cmp	r4, #7
    66a8:	d0c3      	beq.n	6632 <USB_Handler+0x2ce>
			if (flags & _usb_device_irq_bits[i]) {
    66aa:	0063      	lsls	r3, r4, #1
    66ac:	5bdb      	ldrh	r3, [r3, r7]
    66ae:	4233      	tst	r3, r6
    66b0:	d003      	beq.n	66ba <USB_Handler+0x356>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    66b2:	464a      	mov	r2, r9
    66b4:	6812      	ldr	r2, [r2, #0]
    66b6:	6812      	ldr	r2, [r2, #0]
    66b8:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    66ba:	422b      	tst	r3, r5
    66bc:	d0f2      	beq.n	66a4 <USB_Handler+0x340>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    66be:	2c06      	cmp	r4, #6
    66c0:	d1e6      	bne.n	6690 <USB_Handler+0x32c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    66c2:	4b96      	ldr	r3, [pc, #600]	; (691c <USB_Handler+0x5b8>)
    66c4:	891b      	ldrh	r3, [r3, #8]
    66c6:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    66c8:	2280      	movs	r2, #128	; 0x80
    66ca:	0052      	lsls	r2, r2, #1
    66cc:	4013      	ands	r3, r2
    66ce:	4a92      	ldr	r2, [pc, #584]	; (6918 <USB_Handler+0x5b4>)
    66d0:	6013      	str	r3, [r2, #0]
    66d2:	e7dd      	b.n	6690 <USB_Handler+0x32c>
    66d4:	003c      	movs	r4, r7
    66d6:	3459      	adds	r4, #89	; 0x59
    66d8:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    66da:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    66dc:	2201      	movs	r2, #1
    66de:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    66e0:	325f      	adds	r2, #95	; 0x5f
    66e2:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    66e4:	3a50      	subs	r2, #80	; 0x50
    66e6:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    66e8:	3a0d      	subs	r2, #13
    66ea:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    66ec:	46b8      	mov	r8, r7
    66ee:	002f      	movs	r7, r5
    66f0:	e0b9      	b.n	6866 <USB_Handler+0x502>
    66f2:	002a      	movs	r2, r5
    66f4:	003d      	movs	r5, r7
    66f6:	4647      	mov	r7, r8
    66f8:	4690      	mov	r8, r2
    66fa:	015b      	lsls	r3, r3, #5
    66fc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    66fe:	2308      	movs	r3, #8
    6700:	33ff      	adds	r3, #255	; 0xff
    6702:	5ceb      	ldrb	r3, [r5, r3]
    6704:	065b      	lsls	r3, r3, #25
    6706:	d516      	bpl.n	6736 <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6708:	2240      	movs	r2, #64	; 0x40
    670a:	2308      	movs	r3, #8
    670c:	33ff      	adds	r3, #255	; 0xff
    670e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6710:	3b88      	subs	r3, #136	; 0x88
    6712:	3bff      	subs	r3, #255	; 0xff
    6714:	4642      	mov	r2, r8
    6716:	4313      	orrs	r3, r2
    6718:	4a81      	ldr	r2, [pc, #516]	; (6920 <USB_Handler+0x5bc>)
    671a:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    671c:	2360      	movs	r3, #96	; 0x60
    671e:	420b      	tst	r3, r1
    6720:	d100      	bne.n	6724 <USB_Handler+0x3c0>
    6722:	e786      	b.n	6632 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	011b      	lsls	r3, r3, #4
    6728:	18fb      	adds	r3, r7, r3
    672a:	33e0      	adds	r3, #224	; 0xe0
    672c:	681b      	ldr	r3, [r3, #0]
    672e:	497c      	ldr	r1, [pc, #496]	; (6920 <USB_Handler+0x5bc>)
    6730:	0038      	movs	r0, r7
    6732:	4798      	blx	r3
    6734:	e77d      	b.n	6632 <USB_Handler+0x2ce>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6736:	2308      	movs	r3, #8
    6738:	33ff      	adds	r3, #255	; 0xff
    673a:	5ceb      	ldrb	r3, [r5, r3]
    673c:	069b      	lsls	r3, r3, #26
    673e:	d5ed      	bpl.n	671c <USB_Handler+0x3b8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6740:	2220      	movs	r2, #32
    6742:	2308      	movs	r3, #8
    6744:	33ff      	adds	r3, #255	; 0xff
    6746:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6748:	4b75      	ldr	r3, [pc, #468]	; (6920 <USB_Handler+0x5bc>)
    674a:	4642      	mov	r2, r8
    674c:	719a      	strb	r2, [r3, #6]
    674e:	e7e5      	b.n	671c <USB_Handler+0x3b8>
    6750:	003d      	movs	r5, r7
    6752:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6754:	9a01      	ldr	r2, [sp, #4]
    6756:	0013      	movs	r3, r2
    6758:	3308      	adds	r3, #8
    675a:	015b      	lsls	r3, r3, #5
    675c:	18ed      	adds	r5, r5, r3
    675e:	2310      	movs	r3, #16
    6760:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6762:	18bb      	adds	r3, r7, r2
    6764:	3361      	adds	r3, #97	; 0x61
    6766:	33ff      	adds	r3, #255	; 0xff
    6768:	781b      	ldrb	r3, [r3, #0]
    676a:	06db      	lsls	r3, r3, #27
    676c:	d400      	bmi.n	6770 <USB_Handler+0x40c>
    676e:	e760      	b.n	6632 <USB_Handler+0x2ce>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6770:	0010      	movs	r0, r2
    6772:	0152      	lsls	r2, r2, #5
    6774:	4b69      	ldr	r3, [pc, #420]	; (691c <USB_Handler+0x5b8>)
    6776:	189b      	adds	r3, r3, r2
    6778:	685b      	ldr	r3, [r3, #4]
    677a:	049b      	lsls	r3, r3, #18
    677c:	0c9b      	lsrs	r3, r3, #18
    677e:	4968      	ldr	r1, [pc, #416]	; (6920 <USB_Handler+0x5bc>)
    6780:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6782:	0103      	lsls	r3, r0, #4
    6784:	18fb      	adds	r3, r7, r3
    6786:	33dc      	adds	r3, #220	; 0xdc
    6788:	681b      	ldr	r3, [r3, #0]
    678a:	4640      	mov	r0, r8
    678c:	4798      	blx	r3
    678e:	e750      	b.n	6632 <USB_Handler+0x2ce>
    6790:	002a      	movs	r2, r5
    6792:	003d      	movs	r5, r7
    6794:	4647      	mov	r7, r8
    6796:	4690      	mov	r8, r2
    6798:	015b      	lsls	r3, r3, #5
    679a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    679c:	2308      	movs	r3, #8
    679e:	33ff      	adds	r3, #255	; 0xff
    67a0:	5ceb      	ldrb	r3, [r5, r3]
    67a2:	079b      	lsls	r3, r3, #30
    67a4:	d51e      	bpl.n	67e4 <USB_Handler+0x480>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    67a6:	2202      	movs	r2, #2
    67a8:	2308      	movs	r3, #8
    67aa:	33ff      	adds	r3, #255	; 0xff
    67ac:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    67ae:	485c      	ldr	r0, [pc, #368]	; (6920 <USB_Handler+0x5bc>)
    67b0:	3b88      	subs	r3, #136	; 0x88
    67b2:	3bff      	subs	r3, #255	; 0xff
    67b4:	4642      	mov	r2, r8
    67b6:	4313      	orrs	r3, r2
    67b8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    67ba:	9b01      	ldr	r3, [sp, #4]
    67bc:	015a      	lsls	r2, r3, #5
    67be:	4b57      	ldr	r3, [pc, #348]	; (691c <USB_Handler+0x5b8>)
    67c0:	189b      	adds	r3, r3, r2
    67c2:	3310      	adds	r3, #16
    67c4:	685b      	ldr	r3, [r3, #4]
    67c6:	049b      	lsls	r3, r3, #18
    67c8:	0c9b      	lsrs	r3, r3, #18
    67ca:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    67cc:	078b      	lsls	r3, r1, #30
    67ce:	d100      	bne.n	67d2 <USB_Handler+0x46e>
    67d0:	e72f      	b.n	6632 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    67d2:	9b01      	ldr	r3, [sp, #4]
    67d4:	330d      	adds	r3, #13
    67d6:	011b      	lsls	r3, r3, #4
    67d8:	18fb      	adds	r3, r7, r3
    67da:	685b      	ldr	r3, [r3, #4]
    67dc:	4950      	ldr	r1, [pc, #320]	; (6920 <USB_Handler+0x5bc>)
    67de:	0038      	movs	r0, r7
    67e0:	4798      	blx	r3
    67e2:	e726      	b.n	6632 <USB_Handler+0x2ce>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    67e4:	2308      	movs	r3, #8
    67e6:	33ff      	adds	r3, #255	; 0xff
    67e8:	5ceb      	ldrb	r3, [r5, r3]
    67ea:	07db      	lsls	r3, r3, #31
    67ec:	d5ee      	bpl.n	67cc <USB_Handler+0x468>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    67ee:	2201      	movs	r2, #1
    67f0:	2308      	movs	r3, #8
    67f2:	33ff      	adds	r3, #255	; 0xff
    67f4:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    67f6:	484a      	ldr	r0, [pc, #296]	; (6920 <USB_Handler+0x5bc>)
    67f8:	4643      	mov	r3, r8
    67fa:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	015b      	lsls	r3, r3, #5
    6800:	4a46      	ldr	r2, [pc, #280]	; (691c <USB_Handler+0x5b8>)
    6802:	18d2      	adds	r2, r2, r3
    6804:	6853      	ldr	r3, [r2, #4]
    6806:	049b      	lsls	r3, r3, #18
    6808:	0c9b      	lsrs	r3, r3, #18
    680a:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    680c:	6853      	ldr	r3, [r2, #4]
    680e:	011b      	lsls	r3, r3, #4
    6810:	0c9b      	lsrs	r3, r3, #18
    6812:	8083      	strh	r3, [r0, #4]
    6814:	e7da      	b.n	67cc <USB_Handler+0x468>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6816:	2208      	movs	r2, #8
    6818:	32ff      	adds	r2, #255	; 0xff
    681a:	5c9a      	ldrb	r2, [r3, r2]
    681c:	0752      	lsls	r2, r2, #29
    681e:	d56e      	bpl.n	68fe <USB_Handler+0x59a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6820:	2004      	movs	r0, #4
    6822:	2208      	movs	r2, #8
    6824:	32ff      	adds	r2, #255	; 0xff
    6826:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6828:	9801      	ldr	r0, [sp, #4]
    682a:	0142      	lsls	r2, r0, #5
    682c:	4b3b      	ldr	r3, [pc, #236]	; (691c <USB_Handler+0x5b8>)
    682e:	189b      	adds	r3, r3, r2
    6830:	7a9b      	ldrb	r3, [r3, #10]
    6832:	079b      	lsls	r3, r3, #30
    6834:	d505      	bpl.n	6842 <USB_Handler+0x4de>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6836:	4b39      	ldr	r3, [pc, #228]	; (691c <USB_Handler+0x5b8>)
    6838:	189b      	adds	r3, r3, r2
    683a:	7a9a      	ldrb	r2, [r3, #10]
    683c:	2002      	movs	r0, #2
    683e:	4382      	bics	r2, r0
    6840:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6842:	4b37      	ldr	r3, [pc, #220]	; (6920 <USB_Handler+0x5bc>)
    6844:	4642      	mov	r2, r8
    6846:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6848:	9b01      	ldr	r3, [sp, #4]
    684a:	3308      	adds	r3, #8
    684c:	015b      	lsls	r3, r3, #5
    684e:	683a      	ldr	r2, [r7, #0]
    6850:	4694      	mov	ip, r2
    6852:	4463      	add	r3, ip
    6854:	79db      	ldrb	r3, [r3, #7]
    6856:	07db      	lsls	r3, r3, #31
    6858:	d551      	bpl.n	68fe <USB_Handler+0x59a>
    685a:	e6ea      	b.n	6632 <USB_Handler+0x2ce>
    685c:	3301      	adds	r3, #1
    685e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6860:	2b08      	cmp	r3, #8
    6862:	d100      	bne.n	6866 <USB_Handler+0x502>
    6864:	e6e5      	b.n	6632 <USB_Handler+0x2ce>
    6866:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    6868:	9301      	str	r3, [sp, #4]
    686a:	0032      	movs	r2, r6
    686c:	411a      	asrs	r2, r3
    686e:	4661      	mov	r1, ip
    6870:	4211      	tst	r1, r2
    6872:	d0f3      	beq.n	685c <USB_Handler+0x4f8>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    6874:	001a      	movs	r2, r3
    6876:	3208      	adds	r2, #8
    6878:	0152      	lsls	r2, r2, #5
    687a:	18ba      	adds	r2, r7, r2
    687c:	79d2      	ldrb	r2, [r2, #7]
    687e:	b2d2      	uxtb	r2, r2
    6880:	7a21      	ldrb	r1, [r4, #8]
    6882:	4011      	ands	r1, r2
    6884:	7820      	ldrb	r0, [r4, #0]
    6886:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6888:	4648      	mov	r0, r9
    688a:	4210      	tst	r0, r2
    688c:	d000      	beq.n	6890 <USB_Handler+0x52c>
    688e:	e730      	b.n	66f2 <USB_Handler+0x38e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6890:	4650      	mov	r0, sl
    6892:	4210      	tst	r0, r2
    6894:	d000      	beq.n	6898 <USB_Handler+0x534>
    6896:	e75b      	b.n	6750 <USB_Handler+0x3ec>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6898:	4658      	mov	r0, fp
    689a:	4210      	tst	r0, r2
    689c:	d000      	beq.n	68a0 <USB_Handler+0x53c>
    689e:	e777      	b.n	6790 <USB_Handler+0x42c>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    68a0:	200c      	movs	r0, #12
    68a2:	4210      	tst	r0, r2
    68a4:	d0da      	beq.n	685c <USB_Handler+0x4f8>
    68a6:	002a      	movs	r2, r5
    68a8:	003d      	movs	r5, r7
    68aa:	4647      	mov	r7, r8
    68ac:	4690      	mov	r8, r2
    68ae:	015b      	lsls	r3, r3, #5
    68b0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    68b2:	2208      	movs	r2, #8
    68b4:	32ff      	adds	r2, #255	; 0xff
    68b6:	5c9a      	ldrb	r2, [r3, r2]
    68b8:	0712      	lsls	r2, r2, #28
    68ba:	d5ac      	bpl.n	6816 <USB_Handler+0x4b2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    68bc:	3804      	subs	r0, #4
    68be:	2208      	movs	r2, #8
    68c0:	32ff      	adds	r2, #255	; 0xff
    68c2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    68c4:	9801      	ldr	r0, [sp, #4]
    68c6:	0142      	lsls	r2, r0, #5
    68c8:	4b14      	ldr	r3, [pc, #80]	; (691c <USB_Handler+0x5b8>)
    68ca:	189b      	adds	r3, r3, r2
    68cc:	7e9b      	ldrb	r3, [r3, #26]
    68ce:	079b      	lsls	r3, r3, #30
    68d0:	d505      	bpl.n	68de <USB_Handler+0x57a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    68d2:	4b12      	ldr	r3, [pc, #72]	; (691c <USB_Handler+0x5b8>)
    68d4:	189b      	adds	r3, r3, r2
    68d6:	7e9a      	ldrb	r2, [r3, #26]
    68d8:	2002      	movs	r0, #2
    68da:	4382      	bics	r2, r0
    68dc:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    68de:	2380      	movs	r3, #128	; 0x80
    68e0:	425b      	negs	r3, r3
    68e2:	4642      	mov	r2, r8
    68e4:	4313      	orrs	r3, r2
    68e6:	4a0e      	ldr	r2, [pc, #56]	; (6920 <USB_Handler+0x5bc>)
    68e8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    68ea:	9b01      	ldr	r3, [sp, #4]
    68ec:	3308      	adds	r3, #8
    68ee:	015b      	lsls	r3, r3, #5
    68f0:	683a      	ldr	r2, [r7, #0]
    68f2:	4694      	mov	ip, r2
    68f4:	4463      	add	r3, ip
    68f6:	79db      	ldrb	r3, [r3, #7]
    68f8:	079b      	lsls	r3, r3, #30
    68fa:	d500      	bpl.n	68fe <USB_Handler+0x59a>
    68fc:	e699      	b.n	6632 <USB_Handler+0x2ce>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    68fe:	230c      	movs	r3, #12
    6900:	420b      	tst	r3, r1
    6902:	d100      	bne.n	6906 <USB_Handler+0x5a2>
    6904:	e695      	b.n	6632 <USB_Handler+0x2ce>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	011b      	lsls	r3, r3, #4
    690a:	18fb      	adds	r3, r7, r3
    690c:	33d8      	adds	r3, #216	; 0xd8
    690e:	681b      	ldr	r3, [r3, #0]
    6910:	4903      	ldr	r1, [pc, #12]	; (6920 <USB_Handler+0x5bc>)
    6912:	0038      	movs	r0, r7
    6914:	4798      	blx	r3
    6916:	e68c      	b.n	6632 <USB_Handler+0x2ce>
    6918:	2000039c 	.word	0x2000039c
    691c:	200008b0 	.word	0x200008b0
    6920:	200003a0 	.word	0x200003a0

00006924 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6924:	2200      	movs	r2, #0
    6926:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6928:	2301      	movs	r3, #1
    692a:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    692c:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    692e:	70c3      	strb	r3, [r0, #3]
}
    6930:	4770      	bx	lr
	...

00006934 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6934:	b5f0      	push	{r4, r5, r6, r7, lr}
    6936:	46ce      	mov	lr, r9
    6938:	4647      	mov	r7, r8
    693a:	b580      	push	{r7, lr}
    693c:	b083      	sub	sp, #12
    693e:	0004      	movs	r4, r0
    6940:	000d      	movs	r5, r1
    6942:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6944:	2300      	movs	r3, #0
    6946:	4a6e      	ldr	r2, [pc, #440]	; (6b00 <usb_init+0x1cc>)
    6948:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    694a:	4a6e      	ldr	r2, [pc, #440]	; (6b04 <usb_init+0x1d0>)
    694c:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    694e:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    6950:	496d      	ldr	r1, [pc, #436]	; (6b08 <usb_init+0x1d4>)
    6952:	69ca      	ldr	r2, [r1, #28]
    6954:	2020      	movs	r0, #32
    6956:	4302      	orrs	r2, r0
    6958:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    695a:	af01      	add	r7, sp, #4
    695c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    695e:	2201      	movs	r2, #1
    6960:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    6962:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6964:	3306      	adds	r3, #6
    6966:	4699      	mov	r9, r3
    6968:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    696a:	0039      	movs	r1, r7
    696c:	3808      	subs	r0, #8
    696e:	4b67      	ldr	r3, [pc, #412]	; (6b0c <usb_init+0x1d8>)
    6970:	4698      	mov	r8, r3
    6972:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6974:	464b      	mov	r3, r9
    6976:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6978:	0039      	movs	r1, r7
    697a:	2019      	movs	r0, #25
    697c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    697e:	78b3      	ldrb	r3, [r6, #2]
    6980:	466a      	mov	r2, sp
    6982:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6984:	4669      	mov	r1, sp
    6986:	2006      	movs	r0, #6
    6988:	4b61      	ldr	r3, [pc, #388]	; (6b10 <usb_init+0x1dc>)
    698a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    698c:	2006      	movs	r0, #6
    698e:	4b61      	ldr	r3, [pc, #388]	; (6b14 <usb_init+0x1e0>)
    6990:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6992:	782b      	ldrb	r3, [r5, #0]
    6994:	2201      	movs	r2, #1
    6996:	4313      	orrs	r3, r2
    6998:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    699a:	78ab      	ldrb	r3, [r5, #2]
    699c:	07db      	lsls	r3, r3, #31
    699e:	d4fc      	bmi.n	699a <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    69a0:	4a5d      	ldr	r2, [pc, #372]	; (6b18 <usb_init+0x1e4>)
    69a2:	78d3      	ldrb	r3, [r2, #3]
    69a4:	2103      	movs	r1, #3
    69a6:	438b      	bics	r3, r1
    69a8:	2102      	movs	r1, #2
    69aa:	430b      	orrs	r3, r1
    69ac:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    69ae:	78d3      	ldrb	r3, [r2, #3]
    69b0:	210c      	movs	r1, #12
    69b2:	438b      	bics	r3, r1
    69b4:	2108      	movs	r1, #8
    69b6:	430b      	orrs	r3, r1
    69b8:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    69ba:	4b58      	ldr	r3, [pc, #352]	; (6b1c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    69bc:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    69be:	039b      	lsls	r3, r3, #14
    69c0:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    69c2:	2b1f      	cmp	r3, #31
    69c4:	d100      	bne.n	69c8 <usb_init+0x94>
    69c6:	e08f      	b.n	6ae8 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    69c8:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    69ca:	019b      	lsls	r3, r3, #6
    69cc:	4954      	ldr	r1, [pc, #336]	; (6b20 <usb_init+0x1ec>)
    69ce:	400a      	ands	r2, r1
    69d0:	4313      	orrs	r3, r2
    69d2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    69d4:	4b51      	ldr	r3, [pc, #324]	; (6b1c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    69d6:	681b      	ldr	r3, [r3, #0]
    69d8:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    69da:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    69dc:	2b1f      	cmp	r3, #31
    69de:	d100      	bne.n	69e2 <usb_init+0xae>
    69e0:	e084      	b.n	6aec <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    69e2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    69e4:	211f      	movs	r1, #31
    69e6:	438a      	bics	r2, r1
    69e8:	4313      	orrs	r3, r2
    69ea:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    69ec:	4b4b      	ldr	r3, [pc, #300]	; (6b1c <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    69ee:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    69f0:	019b      	lsls	r3, r3, #6
    69f2:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    69f4:	2b07      	cmp	r3, #7
    69f6:	d100      	bne.n	69fa <usb_init+0xc6>
    69f8:	e07a      	b.n	6af0 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    69fa:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    69fc:	031b      	lsls	r3, r3, #12
    69fe:	4949      	ldr	r1, [pc, #292]	; (6b24 <usb_init+0x1f0>)
    6a00:	400a      	ands	r2, r1
    6a02:	4313      	orrs	r3, r2
    6a04:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6a06:	7832      	ldrb	r2, [r6, #0]
    6a08:	7829      	ldrb	r1, [r5, #0]
    6a0a:	01d2      	lsls	r2, r2, #7
    6a0c:	237f      	movs	r3, #127	; 0x7f
    6a0e:	400b      	ands	r3, r1
    6a10:	4313      	orrs	r3, r2
    6a12:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6a14:	7871      	ldrb	r1, [r6, #1]
    6a16:	782b      	ldrb	r3, [r5, #0]
    6a18:	2201      	movs	r2, #1
    6a1a:	400a      	ands	r2, r1
    6a1c:	0092      	lsls	r2, r2, #2
    6a1e:	2104      	movs	r1, #4
    6a20:	438b      	bics	r3, r1
    6a22:	4313      	orrs	r3, r2
    6a24:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    6a26:	4b40      	ldr	r3, [pc, #256]	; (6b28 <usb_init+0x1f4>)
    6a28:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    6a2a:	78f3      	ldrb	r3, [r6, #3]
    6a2c:	2b01      	cmp	r3, #1
    6a2e:	d061      	beq.n	6af4 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    6a30:	2b00      	cmp	r3, #0
    6a32:	d106      	bne.n	6a42 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6a34:	6822      	ldr	r2, [r4, #0]
    6a36:	8913      	ldrh	r3, [r2, #8]
    6a38:	210c      	movs	r1, #12
    6a3a:	438b      	bics	r3, r1
    6a3c:	2104      	movs	r1, #4
    6a3e:	430b      	orrs	r3, r1
    6a40:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    6a42:	2280      	movs	r2, #128	; 0x80
    6a44:	0052      	lsls	r2, r2, #1
    6a46:	2100      	movs	r1, #0
    6a48:	4837      	ldr	r0, [pc, #220]	; (6b28 <usb_init+0x1f4>)
    6a4a:	4b38      	ldr	r3, [pc, #224]	; (6b2c <usb_init+0x1f8>)
    6a4c:	4798      	blx	r3
    6a4e:	1d23      	adds	r3, r4, #4
    6a50:	0021      	movs	r1, r4
    6a52:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    6a54:	2200      	movs	r2, #0
    6a56:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    6a58:	428b      	cmp	r3, r1
    6a5a:	d1fc      	bne.n	6a56 <usb_init+0x122>
    6a5c:	0021      	movs	r1, r4
    6a5e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    6a60:	2200      	movs	r2, #0
    6a62:	601a      	str	r2, [r3, #0]
    6a64:	605a      	str	r2, [r3, #4]
    6a66:	609a      	str	r2, [r3, #8]
    6a68:	60da      	str	r2, [r3, #12]
    6a6a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6a6c:	428b      	cmp	r3, r1
    6a6e:	d1f8      	bne.n	6a62 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    6a70:	2300      	movs	r3, #0
    6a72:	22a4      	movs	r2, #164	; 0xa4
    6a74:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    6a76:	3201      	adds	r2, #1
    6a78:	54a3      	strb	r3, [r4, r2]
    6a7a:	0023      	movs	r3, r4
    6a7c:	33a6      	adds	r3, #166	; 0xa6
    6a7e:	0021      	movs	r1, r4
    6a80:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    6a82:	2200      	movs	r2, #0
    6a84:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    6a86:	721a      	strb	r2, [r3, #8]
    6a88:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6a8a:	4299      	cmp	r1, r3
    6a8c:	d1fa      	bne.n	6a84 <usb_init+0x150>
    6a8e:	0023      	movs	r3, r4
    6a90:	33b8      	adds	r3, #184	; 0xb8
    6a92:	0021      	movs	r1, r4
    6a94:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    6a96:	2200      	movs	r2, #0
    6a98:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    6a9a:	428b      	cmp	r3, r1
    6a9c:	d1fc      	bne.n	6a98 <usb_init+0x164>
    6a9e:	0021      	movs	r1, r4
    6aa0:	3155      	adds	r1, #85	; 0x55
    6aa2:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    6aa4:	2200      	movs	r2, #0
    6aa6:	601a      	str	r2, [r3, #0]
    6aa8:	605a      	str	r2, [r3, #4]
    6aaa:	609a      	str	r2, [r3, #8]
    6aac:	60da      	str	r2, [r3, #12]
    6aae:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    6ab0:	428b      	cmp	r3, r1
    6ab2:	d1f8      	bne.n	6aa6 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    6ab4:	2300      	movs	r3, #0
    6ab6:	22aa      	movs	r2, #170	; 0xaa
    6ab8:	0052      	lsls	r2, r2, #1
    6aba:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    6abc:	3202      	adds	r2, #2
    6abe:	52a3      	strh	r3, [r4, r2]
    6ac0:	0023      	movs	r3, r4
    6ac2:	3359      	adds	r3, #89	; 0x59
    6ac4:	33ff      	adds	r3, #255	; 0xff
    6ac6:	3461      	adds	r4, #97	; 0x61
    6ac8:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    6aca:	2200      	movs	r2, #0
    6acc:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    6ace:	721a      	strb	r2, [r3, #8]
    6ad0:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    6ad2:	42a3      	cmp	r3, r4
    6ad4:	d1fa      	bne.n	6acc <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ad6:	2280      	movs	r2, #128	; 0x80
    6ad8:	4b15      	ldr	r3, [pc, #84]	; (6b30 <usb_init+0x1fc>)
    6ada:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    6adc:	2000      	movs	r0, #0
    6ade:	b003      	add	sp, #12
    6ae0:	bc0c      	pop	{r2, r3}
    6ae2:	4690      	mov	r8, r2
    6ae4:	4699      	mov	r9, r3
    6ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    6ae8:	3b1a      	subs	r3, #26
    6aea:	e76d      	b.n	69c8 <usb_init+0x94>
		pad_transp = 29;
    6aec:	3b02      	subs	r3, #2
    6aee:	e778      	b.n	69e2 <usb_init+0xae>
		pad_trim = 3;
    6af0:	3b04      	subs	r3, #4
    6af2:	e782      	b.n	69fa <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    6af4:	6822      	ldr	r2, [r4, #0]
    6af6:	8913      	ldrh	r3, [r2, #8]
    6af8:	3108      	adds	r1, #8
    6afa:	438b      	bics	r3, r1
    6afc:	8113      	strh	r3, [r2, #8]
    6afe:	e7a0      	b.n	6a42 <usb_init+0x10e>
    6b00:	200003a8 	.word	0x200003a8
    6b04:	20000398 	.word	0x20000398
    6b08:	40000400 	.word	0x40000400
    6b0c:	0000452d 	.word	0x0000452d
    6b10:	00004435 	.word	0x00004435
    6b14:	000043a9 	.word	0x000043a9
    6b18:	41005000 	.word	0x41005000
    6b1c:	00806024 	.word	0x00806024
    6b20:	fffff83f 	.word	0xfffff83f
    6b24:	ffff8fff 	.word	0xffff8fff
    6b28:	200008b0 	.word	0x200008b0
    6b2c:	0000bcef 	.word	0x0000bcef
    6b30:	e000e100 	.word	0xe000e100

00006b34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6b34:	e7fe      	b.n	6b34 <Dummy_Handler>
	...

00006b38 <Reset_Handler>:
{
    6b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6b3a:	4a2a      	ldr	r2, [pc, #168]	; (6be4 <Reset_Handler+0xac>)
    6b3c:	4b2a      	ldr	r3, [pc, #168]	; (6be8 <Reset_Handler+0xb0>)
    6b3e:	429a      	cmp	r2, r3
    6b40:	d011      	beq.n	6b66 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6b42:	001a      	movs	r2, r3
    6b44:	4b29      	ldr	r3, [pc, #164]	; (6bec <Reset_Handler+0xb4>)
    6b46:	429a      	cmp	r2, r3
    6b48:	d20d      	bcs.n	6b66 <Reset_Handler+0x2e>
    6b4a:	4a29      	ldr	r2, [pc, #164]	; (6bf0 <Reset_Handler+0xb8>)
    6b4c:	3303      	adds	r3, #3
    6b4e:	1a9b      	subs	r3, r3, r2
    6b50:	089b      	lsrs	r3, r3, #2
    6b52:	3301      	adds	r3, #1
    6b54:	009b      	lsls	r3, r3, #2
    6b56:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6b58:	4823      	ldr	r0, [pc, #140]	; (6be8 <Reset_Handler+0xb0>)
    6b5a:	4922      	ldr	r1, [pc, #136]	; (6be4 <Reset_Handler+0xac>)
    6b5c:	588c      	ldr	r4, [r1, r2]
    6b5e:	5084      	str	r4, [r0, r2]
    6b60:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6b62:	429a      	cmp	r2, r3
    6b64:	d1fa      	bne.n	6b5c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6b66:	4a23      	ldr	r2, [pc, #140]	; (6bf4 <Reset_Handler+0xbc>)
    6b68:	4b23      	ldr	r3, [pc, #140]	; (6bf8 <Reset_Handler+0xc0>)
    6b6a:	429a      	cmp	r2, r3
    6b6c:	d20a      	bcs.n	6b84 <Reset_Handler+0x4c>
    6b6e:	43d3      	mvns	r3, r2
    6b70:	4921      	ldr	r1, [pc, #132]	; (6bf8 <Reset_Handler+0xc0>)
    6b72:	185b      	adds	r3, r3, r1
    6b74:	2103      	movs	r1, #3
    6b76:	438b      	bics	r3, r1
    6b78:	3304      	adds	r3, #4
    6b7a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6b7c:	2100      	movs	r1, #0
    6b7e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6b80:	4293      	cmp	r3, r2
    6b82:	d1fc      	bne.n	6b7e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6b84:	4a1d      	ldr	r2, [pc, #116]	; (6bfc <Reset_Handler+0xc4>)
    6b86:	21ff      	movs	r1, #255	; 0xff
    6b88:	4b1d      	ldr	r3, [pc, #116]	; (6c00 <Reset_Handler+0xc8>)
    6b8a:	438b      	bics	r3, r1
    6b8c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6b8e:	39fd      	subs	r1, #253	; 0xfd
    6b90:	2390      	movs	r3, #144	; 0x90
    6b92:	005b      	lsls	r3, r3, #1
    6b94:	4a1b      	ldr	r2, [pc, #108]	; (6c04 <Reset_Handler+0xcc>)
    6b96:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6b98:	4a1b      	ldr	r2, [pc, #108]	; (6c08 <Reset_Handler+0xd0>)
    6b9a:	78d3      	ldrb	r3, [r2, #3]
    6b9c:	2503      	movs	r5, #3
    6b9e:	43ab      	bics	r3, r5
    6ba0:	2402      	movs	r4, #2
    6ba2:	4323      	orrs	r3, r4
    6ba4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6ba6:	78d3      	ldrb	r3, [r2, #3]
    6ba8:	270c      	movs	r7, #12
    6baa:	43bb      	bics	r3, r7
    6bac:	2608      	movs	r6, #8
    6bae:	4333      	orrs	r3, r6
    6bb0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6bb2:	4b16      	ldr	r3, [pc, #88]	; (6c0c <Reset_Handler+0xd4>)
    6bb4:	7b98      	ldrb	r0, [r3, #14]
    6bb6:	2230      	movs	r2, #48	; 0x30
    6bb8:	4390      	bics	r0, r2
    6bba:	2220      	movs	r2, #32
    6bbc:	4310      	orrs	r0, r2
    6bbe:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6bc0:	7b99      	ldrb	r1, [r3, #14]
    6bc2:	43b9      	bics	r1, r7
    6bc4:	4331      	orrs	r1, r6
    6bc6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6bc8:	7b9a      	ldrb	r2, [r3, #14]
    6bca:	43aa      	bics	r2, r5
    6bcc:	4322      	orrs	r2, r4
    6bce:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6bd0:	4a0f      	ldr	r2, [pc, #60]	; (6c10 <Reset_Handler+0xd8>)
    6bd2:	6853      	ldr	r3, [r2, #4]
    6bd4:	2180      	movs	r1, #128	; 0x80
    6bd6:	430b      	orrs	r3, r1
    6bd8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6bda:	4b0e      	ldr	r3, [pc, #56]	; (6c14 <Reset_Handler+0xdc>)
    6bdc:	4798      	blx	r3
        main();
    6bde:	4b0e      	ldr	r3, [pc, #56]	; (6c18 <Reset_Handler+0xe0>)
    6be0:	4798      	blx	r3
    6be2:	e7fe      	b.n	6be2 <Reset_Handler+0xaa>
    6be4:	0000c550 	.word	0x0000c550
    6be8:	20000000 	.word	0x20000000
    6bec:	20000188 	.word	0x20000188
    6bf0:	20000004 	.word	0x20000004
    6bf4:	20000190 	.word	0x20000190
    6bf8:	20000ae4 	.word	0x20000ae4
    6bfc:	e000ed00 	.word	0xe000ed00
    6c00:	00000000 	.word	0x00000000
    6c04:	41007000 	.word	0x41007000
    6c08:	41005000 	.word	0x41005000
    6c0c:	41004800 	.word	0x41004800
    6c10:	41004000 	.word	0x41004000
    6c14:	0000bc81 	.word	0x0000bc81
    6c18:	00007849 	.word	0x00007849

00006c1c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6c1c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6c1e:	4a06      	ldr	r2, [pc, #24]	; (6c38 <_sbrk+0x1c>)
    6c20:	6812      	ldr	r2, [r2, #0]
    6c22:	2a00      	cmp	r2, #0
    6c24:	d004      	beq.n	6c30 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6c26:	4a04      	ldr	r2, [pc, #16]	; (6c38 <_sbrk+0x1c>)
    6c28:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6c2a:	18c3      	adds	r3, r0, r3
    6c2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6c2e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6c30:	4902      	ldr	r1, [pc, #8]	; (6c3c <_sbrk+0x20>)
    6c32:	4a01      	ldr	r2, [pc, #4]	; (6c38 <_sbrk+0x1c>)
    6c34:	6011      	str	r1, [r2, #0]
    6c36:	e7f6      	b.n	6c26 <_sbrk+0xa>
    6c38:	200003b4 	.word	0x200003b4
    6c3c:	20002ae8 	.word	0x20002ae8

00006c40 <configure_adc>:

float VADCR;	   /* Room Temperature ADC voltage - VADCR */
float VADCH;	   /* Hot Temperature ADC voltage - VADCH */

void configure_adc()
{
    6c40:	b510      	push	{r4, lr}
    6c42:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    6c44:	4668      	mov	r0, sp
    6c46:	4b14      	ldr	r3, [pc, #80]	; (6c98 <configure_adc+0x58>)
    6c48:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference			= ADC_REFERENCE_INTVCC0;
    6c4a:	2301      	movs	r3, #1
    6c4c:	466a      	mov	r2, sp
    6c4e:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV8;
    6c50:	2280      	movs	r2, #128	; 0x80
    6c52:	0052      	lsls	r2, r2, #1
    6c54:	4669      	mov	r1, sp
    6c56:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= LEFT_LIGHT;
    6c58:	3af5      	subs	r2, #245	; 0xf5
    6c5a:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    6c5c:	22c0      	movs	r2, #192	; 0xc0
    6c5e:	0152      	lsls	r2, r2, #5
    6c60:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    6c62:	2230      	movs	r2, #48	; 0x30
    6c64:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    6c66:	466a      	mov	r2, sp
    6c68:	748b      	strb	r3, [r1, #18]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    6c6a:	4c0c      	ldr	r4, [pc, #48]	; (6c9c <configure_adc+0x5c>)
    6c6c:	490c      	ldr	r1, [pc, #48]	; (6ca0 <configure_adc+0x60>)
    6c6e:	0020      	movs	r0, r4
    6c70:	4b0c      	ldr	r3, [pc, #48]	; (6ca4 <configure_adc+0x64>)
    6c72:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6c74:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6c76:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6c78:	b25b      	sxtb	r3, r3
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	dbfb      	blt.n	6c76 <configure_adc+0x36>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6c7e:	7813      	ldrb	r3, [r2, #0]
    6c80:	2102      	movs	r1, #2
    6c82:	430b      	orrs	r3, r1
    6c84:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6c86:	4b05      	ldr	r3, [pc, #20]	; (6c9c <configure_adc+0x5c>)
    6c88:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6c8a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    6c8c:	b25b      	sxtb	r3, r3
    6c8e:	2b00      	cmp	r3, #0
    6c90:	dbfb      	blt.n	6c8a <configure_adc+0x4a>
	adc_enable(&adc_instance);
}
    6c92:	b00c      	add	sp, #48	; 0x30
    6c94:	bd10      	pop	{r4, pc}
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	00002e95 	.word	0x00002e95
    6c9c:	200009d4 	.word	0x200009d4
    6ca0:	42004000 	.word	0x42004000
    6ca4:	00002edd 	.word	0x00002edd

00006ca8 <adc_start_read_result>:


uint8_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    6ca8:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    6caa:	4b2a      	ldr	r3, [pc, #168]	; (6d54 <adc_start_read_result+0xac>)
    6cac:	6819      	ldr	r1, [r3, #0]
    6cae:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    6cb0:	b25b      	sxtb	r3, r3
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	dbfb      	blt.n	6cae <adc_start_read_result+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    6cb6:	690b      	ldr	r3, [r1, #16]
    6cb8:	221f      	movs	r2, #31
    6cba:	4393      	bics	r3, r2
    6cbc:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    6cbe:	6108      	str	r0, [r1, #16]
    6cc0:	7e4b      	ldrb	r3, [r1, #25]
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    6cc2:	b25b      	sxtb	r3, r3
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	dbfb      	blt.n	6cc0 <adc_start_read_result+0x18>
    6cc8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6cca:	b25b      	sxtb	r3, r3
    6ccc:	2b00      	cmp	r3, #0
    6cce:	dbfb      	blt.n	6cc8 <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6cd0:	7b0b      	ldrb	r3, [r1, #12]
    6cd2:	2202      	movs	r2, #2
    6cd4:	4313      	orrs	r3, r2
    6cd6:	730b      	strb	r3, [r1, #12]
    6cd8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6cda:	b25b      	sxtb	r3, r3
    6cdc:	2b00      	cmp	r3, #0
    6cde:	dbfb      	blt.n	6cd8 <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6ce0:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    6ce2:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    6ce4:	2402      	movs	r4, #2
    6ce6:	e001      	b.n	6cec <adc_start_read_result+0x44>
	uint16_t adc_result = 0;
	//configure_adc(analogPin);
	adc_set_positive_input(&adc_instance, analogPin);
	
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    6ce8:	4210      	tst	r0, r2
    6cea:	d10a      	bne.n	6d02 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6cec:	7e0b      	ldrb	r3, [r1, #24]
    6cee:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6cf0:	0002      	movs	r2, r0
    6cf2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    6cf4:	421d      	tst	r5, r3
    6cf6:	d000      	beq.n	6cfa <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    6cf8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6cfa:	421c      	tst	r4, r3
    6cfc:	d0f4      	beq.n	6ce8 <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    6cfe:	432a      	orrs	r2, r5
    6d00:	e7f2      	b.n	6ce8 <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6d02:	7e0a      	ldrb	r2, [r1, #24]
    6d04:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6d06:	2301      	movs	r3, #1
    6d08:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6d0a:	0750      	lsls	r0, r2, #29
    6d0c:	d501      	bpl.n	6d12 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    6d0e:	2002      	movs	r0, #2
    6d10:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6d12:	0792      	lsls	r2, r2, #30
    6d14:	d501      	bpl.n	6d1a <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    6d16:	2204      	movs	r2, #4
    6d18:	4313      	orrs	r3, r2
	uint16_t adc_result = 0;
    6d1a:	2000      	movs	r0, #0
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    6d1c:	07db      	lsls	r3, r3, #31
    6d1e:	d401      	bmi.n	6d24 <adc_start_read_result+0x7c>
	
	adc_read(&adc_instance, &adc_result);
	
	return adc_result;
    6d20:	b2c0      	uxtb	r0, r0
}
    6d22:	bd30      	pop	{r4, r5, pc}
    6d24:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6d26:	b25b      	sxtb	r3, r3
    6d28:	2b00      	cmp	r3, #0
    6d2a:	dbfb      	blt.n	6d24 <adc_start_read_result+0x7c>
	*result = adc_module->RESULT.reg;
    6d2c:	8b48      	ldrh	r0, [r1, #26]
    6d2e:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    6d30:	2301      	movs	r3, #1
    6d32:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    6d34:	7e0a      	ldrb	r2, [r1, #24]
    6d36:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    6d38:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    6d3a:	0754      	lsls	r4, r2, #29
    6d3c:	d501      	bpl.n	6d42 <adc_start_read_result+0x9a>
		status_flags |= ADC_STATUS_WINDOW;
    6d3e:	2402      	movs	r4, #2
    6d40:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    6d42:	0792      	lsls	r2, r2, #30
    6d44:	d501      	bpl.n	6d4a <adc_start_read_result+0xa2>
		status_flags |= ADC_STATUS_OVERRUN;
    6d46:	2204      	movs	r2, #4
    6d48:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    6d4a:	075b      	lsls	r3, r3, #29
    6d4c:	d5e8      	bpl.n	6d20 <adc_start_read_result+0x78>
	adc_module->INTFLAG.reg = int_flags;
    6d4e:	2302      	movs	r3, #2
    6d50:	760b      	strb	r3, [r1, #24]
    6d52:	e7e5      	b.n	6d20 <adc_start_read_result+0x78>
    6d54:	200009d4 	.word	0x200009d4

00006d58 <configure_adc_temp>:
* of Electrical Characteristics.
*
*/

void configure_adc_temp(void)
{
    6d58:	b530      	push	{r4, r5, lr}
    6d5a:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    6d5c:	4668      	mov	r0, sp
    6d5e:	4b14      	ldr	r3, [pc, #80]	; (6db0 <configure_adc_temp+0x58>)
    6d60:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    6d62:	2380      	movs	r3, #128	; 0x80
    6d64:	009b      	lsls	r3, r3, #2
    6d66:	466a      	mov	r2, sp
    6d68:	8053      	strh	r3, [r2, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
    6d6a:	2300      	movs	r3, #0
    6d6c:	7053      	strb	r3, [r2, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    6d6e:	3318      	adds	r3, #24
    6d70:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    6d72:	23c0      	movs	r3, #192	; 0xc0
    6d74:	015b      	lsls	r3, r3, #5
    6d76:	81d3      	strh	r3, [r2, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    6d78:	2304      	movs	r3, #4
    6d7a:	75d3      	strb	r3, [r2, #23]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    6d7c:	4d0d      	ldr	r5, [pc, #52]	; (6db4 <configure_adc_temp+0x5c>)
    6d7e:	4c0e      	ldr	r4, [pc, #56]	; (6db8 <configure_adc_temp+0x60>)
    6d80:	0029      	movs	r1, r5
    6d82:	0020      	movs	r0, r4
    6d84:	4b0d      	ldr	r3, [pc, #52]	; (6dbc <configure_adc_temp+0x64>)
    6d86:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    6d88:	2322      	movs	r3, #34	; 0x22
    6d8a:	70ab      	strb	r3, [r5, #2]
	Adc *const adc_module = module_inst->hw;
    6d8c:	6822      	ldr	r2, [r4, #0]
    6d8e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    6d90:	b25b      	sxtb	r3, r3
    6d92:	2b00      	cmp	r3, #0
    6d94:	dbfb      	blt.n	6d8e <configure_adc_temp+0x36>
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    6d96:	7813      	ldrb	r3, [r2, #0]
    6d98:	2102      	movs	r1, #2
    6d9a:	430b      	orrs	r3, r1
    6d9c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    6d9e:	4b06      	ldr	r3, [pc, #24]	; (6db8 <configure_adc_temp+0x60>)
    6da0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6da2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    6da4:	b25b      	sxtb	r3, r3
    6da6:	2b00      	cmp	r3, #0
    6da8:	dbfb      	blt.n	6da2 <configure_adc_temp+0x4a>
	
	adc_enable(&adc_instance);
}
    6daa:	b00d      	add	sp, #52	; 0x34
    6dac:	bd30      	pop	{r4, r5, pc}
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	00002e95 	.word	0x00002e95
    6db4:	42004000 	.word	0x42004000
    6db8:	200009d4 	.word	0x200009d4
    6dbc:	00002edd 	.word	0x00002edd

00006dc0 <calculate_temperature>:

float calculate_temperature(uint16_t raw_code)
{
    6dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dc2:	46d6      	mov	lr, sl
    6dc4:	b500      	push	{lr}
    6dc6:	b088      	sub	sp, #32
	uint8_t result;
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    6dc8:	4f28      	ldr	r7, [pc, #160]	; (6e6c <calculate_temperature+0xac>)
    6dca:	47b8      	blx	r7
    6dcc:	9001      	str	r0, [sp, #4]
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    6dce:	4b28      	ldr	r3, [pc, #160]	; (6e70 <calculate_temperature+0xb0>)
    6dd0:	681b      	ldr	r3, [r3, #0]
    6dd2:	4c28      	ldr	r4, [pc, #160]	; (6e74 <calculate_temperature+0xb4>)
    6dd4:	9300      	str	r3, [sp, #0]
    6dd6:	1c19      	adds	r1, r3, #0
    6dd8:	4b27      	ldr	r3, [pc, #156]	; (6e78 <calculate_temperature+0xb8>)
    6dda:	6818      	ldr	r0, [r3, #0]
    6ddc:	47a0      	blx	r4
    6dde:	1c06      	adds	r6, r0, #0
    6de0:	4b26      	ldr	r3, [pc, #152]	; (6e7c <calculate_temperature+0xbc>)
    6de2:	681a      	ldr	r2, [r3, #0]
    6de4:	1c15      	adds	r5, r2, #0
    6de6:	1c11      	adds	r1, r2, #0
    6de8:	4b25      	ldr	r3, [pc, #148]	; (6e80 <calculate_temperature+0xc0>)
    6dea:	6818      	ldr	r0, [r3, #0]
    6dec:	47a0      	blx	r4
    6dee:	1c01      	adds	r1, r0, #0
    6df0:	4a24      	ldr	r2, [pc, #144]	; (6e84 <calculate_temperature+0xc4>)
    6df2:	4692      	mov	sl, r2
    6df4:	9604      	str	r6, [sp, #16]
    6df6:	1c30      	adds	r0, r6, #0
    6df8:	4790      	blx	r2
    6dfa:	1c06      	adds	r6, r0, #0
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    6dfc:	4922      	ldr	r1, [pc, #136]	; (6e88 <calculate_temperature+0xc8>)
    6dfe:	9801      	ldr	r0, [sp, #4]
    6e00:	47d0      	blx	sl
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    6e02:	9502      	str	r5, [sp, #8]
    6e04:	1c29      	adds	r1, r5, #0
    6e06:	47a0      	blx	r4
    6e08:	4d20      	ldr	r5, [pc, #128]	; (6e8c <calculate_temperature+0xcc>)
    6e0a:	9605      	str	r6, [sp, #20]
    6e0c:	1c31      	adds	r1, r6, #0
    6e0e:	47a8      	blx	r5
    6e10:	4e1f      	ldr	r6, [pc, #124]	; (6e90 <calculate_temperature+0xd0>)
    6e12:	9900      	ldr	r1, [sp, #0]
    6e14:	47b0      	blx	r6
    6e16:	4b1f      	ldr	r3, [pc, #124]	; (6e94 <calculate_temperature+0xd4>)
    6e18:	9006      	str	r0, [sp, #24]
    6e1a:	6018      	str	r0, [r3, #0]
	
	/* Calculation to find the real INT1V value during the ADC conversion */
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
    6e1c:	4b1e      	ldr	r3, [pc, #120]	; (6e98 <calculate_temperature+0xd8>)
    6e1e:	681b      	ldr	r3, [r3, #0]
    6e20:	9303      	str	r3, [sp, #12]
    6e22:	1c19      	adds	r1, r3, #0
    6e24:	4b1d      	ldr	r3, [pc, #116]	; (6e9c <calculate_temperature+0xdc>)
    6e26:	6818      	ldr	r0, [r3, #0]
    6e28:	47a0      	blx	r4
    6e2a:	9007      	str	r0, [sp, #28]
    6e2c:	9900      	ldr	r1, [sp, #0]
    6e2e:	9806      	ldr	r0, [sp, #24]
    6e30:	47a0      	blx	r4
    6e32:	1c01      	adds	r1, r0, #0
    6e34:	9807      	ldr	r0, [sp, #28]
    6e36:	47a8      	blx	r5
    6e38:	9904      	ldr	r1, [sp, #16]
    6e3a:	47d0      	blx	sl
    6e3c:	9903      	ldr	r1, [sp, #12]
    6e3e:	47b0      	blx	r6
	
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    6e40:	9901      	ldr	r1, [sp, #4]
    6e42:	47a8      	blx	r5
    6e44:	4910      	ldr	r1, [pc, #64]	; (6e88 <calculate_temperature+0xc8>)
    6e46:	47d0      	blx	sl
	
	/* Fine Temp Calculation by replace INT1V=1V by INT1V = INT1Vm for ADC conversion */
	result = 128 + (tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR)));
    6e48:	9902      	ldr	r1, [sp, #8]
    6e4a:	47a0      	blx	r4
    6e4c:	9905      	ldr	r1, [sp, #20]
    6e4e:	47a8      	blx	r5
    6e50:	9900      	ldr	r1, [sp, #0]
    6e52:	47b0      	blx	r6
    6e54:	2186      	movs	r1, #134	; 0x86
    6e56:	05c9      	lsls	r1, r1, #23
    6e58:	47b0      	blx	r6
    6e5a:	4b11      	ldr	r3, [pc, #68]	; (6ea0 <calculate_temperature+0xe0>)
    6e5c:	4798      	blx	r3
	
	return result;
    6e5e:	b2c0      	uxtb	r0, r0
    6e60:	47b8      	blx	r7
}
    6e62:	b008      	add	sp, #32
    6e64:	bc04      	pop	{r2}
    6e66:	4692      	mov	sl, r2
    6e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	00009dd9 	.word	0x00009dd9
    6e70:	200009cc 	.word	0x200009cc
    6e74:	000099c1 	.word	0x000099c1
    6e78:	200009dc 	.word	0x200009dc
    6e7c:	200009b0 	.word	0x200009b0
    6e80:	200009d0 	.word	0x200009d0
    6e84:	000094f1 	.word	0x000094f1
    6e88:	457ff000 	.word	0x457ff000
    6e8c:	00009781 	.word	0x00009781
    6e90:	000091cd 	.word	0x000091cd
    6e94:	200009bc 	.word	0x200009bc
    6e98:	200009c0 	.word	0x200009c0
    6e9c:	200009b4 	.word	0x200009b4
    6ea0:	00009161 	.word	0x00009161

00006ea4 <convert_dec_to_frac>:
* \brief Decimal to Fraction Conversation.
* This function converts the decimal value into fractional
* and return the fractional value for temperature calculation
*/
float convert_dec_to_frac(uint8_t val)
{
    6ea4:	b510      	push	{r4, lr}
	if (val < 10)
    6ea6:	2809      	cmp	r0, #9
    6ea8:	d907      	bls.n	6eba <convert_dec_to_frac+0x16>
	{
		return ((float)val/10.0);
	}
	
	else if (val <100)
    6eaa:	2863      	cmp	r0, #99	; 0x63
    6eac:	d90b      	bls.n	6ec6 <convert_dec_to_frac+0x22>
		return ((float)val/100.0);
	}
	
	else
	{
		return ((float)val/1000.0);
    6eae:	4b09      	ldr	r3, [pc, #36]	; (6ed4 <convert_dec_to_frac+0x30>)
    6eb0:	4798      	blx	r3
    6eb2:	4909      	ldr	r1, [pc, #36]	; (6ed8 <convert_dec_to_frac+0x34>)
    6eb4:	4b09      	ldr	r3, [pc, #36]	; (6edc <convert_dec_to_frac+0x38>)
    6eb6:	4798      	blx	r3
    6eb8:	e004      	b.n	6ec4 <convert_dec_to_frac+0x20>
		return ((float)val/10.0);
    6eba:	4b06      	ldr	r3, [pc, #24]	; (6ed4 <convert_dec_to_frac+0x30>)
    6ebc:	4798      	blx	r3
    6ebe:	4908      	ldr	r1, [pc, #32]	; (6ee0 <convert_dec_to_frac+0x3c>)
    6ec0:	4b06      	ldr	r3, [pc, #24]	; (6edc <convert_dec_to_frac+0x38>)
    6ec2:	4798      	blx	r3
	}
    6ec4:	bd10      	pop	{r4, pc}
		return ((float)val/100.0);
    6ec6:	4b03      	ldr	r3, [pc, #12]	; (6ed4 <convert_dec_to_frac+0x30>)
    6ec8:	4798      	blx	r3
    6eca:	4906      	ldr	r1, [pc, #24]	; (6ee4 <convert_dec_to_frac+0x40>)
    6ecc:	4b03      	ldr	r3, [pc, #12]	; (6edc <convert_dec_to_frac+0x38>)
    6ece:	4798      	blx	r3
    6ed0:	e7f8      	b.n	6ec4 <convert_dec_to_frac+0x20>
    6ed2:	46c0      	nop			; (mov r8, r8)
    6ed4:	00009dd9 	.word	0x00009dd9
    6ed8:	447a0000 	.word	0x447a0000
    6edc:	000094f1 	.word	0x000094f1
    6ee0:	41200000 	.word	0x41200000
    6ee4:	42c80000 	.word	0x42c80000

00006ee8 <load_calibration_data>:
{
    6ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eea:	46de      	mov	lr, fp
    6eec:	4657      	mov	r7, sl
    6eee:	464e      	mov	r6, r9
    6ef0:	4645      	mov	r5, r8
    6ef2:	b5e0      	push	{r5, r6, r7, lr}
    6ef4:	b087      	sub	sp, #28
	val1 = *temp_log_row_ptr;
    6ef6:	4b3e      	ldr	r3, [pc, #248]	; (6ff0 <load_calibration_data+0x108>)
    6ef8:	681b      	ldr	r3, [r3, #0]
    6efa:	9305      	str	r3, [sp, #20]
	val2 = *temp_log_row_ptr;
    6efc:	4b3d      	ldr	r3, [pc, #244]	; (6ff4 <load_calibration_data+0x10c>)
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	9304      	str	r3, [sp, #16]
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
    6f02:	9e05      	ldr	r6, [sp, #20]
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    6f04:	9805      	ldr	r0, [sp, #20]
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    6f06:	9b05      	ldr	r3, [sp, #20]
    6f08:	9300      	str	r3, [sp, #0]
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    6f0a:	9a05      	ldr	r2, [sp, #20]
    6f0c:	4691      	mov	r9, r2
	room_int1v_val = (int8_t)((val1 & NVMCTRL_FUSES_ROOM_INT1V_VAL_Msk) >> NVMCTRL_FUSES_ROOM_INT1V_VAL_Pos);
    6f0e:	9a05      	ldr	r2, [sp, #20]
    6f10:	9201      	str	r2, [sp, #4]
	hot_int1v_val = (int8_t)((val2 & NVMCTRL_FUSES_HOT_INT1V_VAL_Msk) >> NVMCTRL_FUSES_HOT_INT1V_VAL_Pos);
    6f12:	9904      	ldr	r1, [sp, #16]
    6f14:	9102      	str	r1, [sp, #8]
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
    6f16:	9c04      	ldr	r4, [sp, #16]
    6f18:	0324      	lsls	r4, r4, #12
    6f1a:	0d24      	lsrs	r4, r4, #20
    6f1c:	4b36      	ldr	r3, [pc, #216]	; (6ff8 <load_calibration_data+0x110>)
    6f1e:	801c      	strh	r4, [r3, #0]
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
    6f20:	9d04      	ldr	r5, [sp, #16]
    6f22:	0d2d      	lsrs	r5, r5, #20
    6f24:	4b35      	ldr	r3, [pc, #212]	; (6ffc <load_calibration_data+0x114>)
    6f26:	801d      	strh	r5, [r3, #0]
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    6f28:	0a00      	lsrs	r0, r0, #8
    6f2a:	270f      	movs	r7, #15
    6f2c:	46b8      	mov	r8, r7
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
    6f2e:	4038      	ands	r0, r7
    6f30:	4f33      	ldr	r7, [pc, #204]	; (7000 <load_calibration_data+0x118>)
    6f32:	46bb      	mov	fp, r7
    6f34:	47b8      	blx	r7
    6f36:	9003      	str	r0, [sp, #12]
    6f38:	27ff      	movs	r7, #255	; 0xff
    6f3a:	403e      	ands	r6, r7
    6f3c:	0030      	movs	r0, r6
    6f3e:	4e31      	ldr	r6, [pc, #196]	; (7004 <load_calibration_data+0x11c>)
    6f40:	47b0      	blx	r6
    6f42:	4b31      	ldr	r3, [pc, #196]	; (7008 <load_calibration_data+0x120>)
    6f44:	469a      	mov	sl, r3
    6f46:	9903      	ldr	r1, [sp, #12]
    6f48:	4798      	blx	r3
    6f4a:	4b30      	ldr	r3, [pc, #192]	; (700c <load_calibration_data+0x124>)
    6f4c:	6018      	str	r0, [r3, #0]
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    6f4e:	4648      	mov	r0, r9
    6f50:	0d00      	lsrs	r0, r0, #20
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    6f52:	4641      	mov	r1, r8
    6f54:	4008      	ands	r0, r1
    6f56:	47d8      	blx	fp
    6f58:	9003      	str	r0, [sp, #12]
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    6f5a:	9b00      	ldr	r3, [sp, #0]
    6f5c:	0b18      	lsrs	r0, r3, #12
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    6f5e:	4038      	ands	r0, r7
    6f60:	47b0      	blx	r6
    6f62:	9903      	ldr	r1, [sp, #12]
    6f64:	47d0      	blx	sl
    6f66:	4b2a      	ldr	r3, [pc, #168]	; (7010 <load_calibration_data+0x128>)
    6f68:	6018      	str	r0, [r3, #0]
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
    6f6a:	9a01      	ldr	r2, [sp, #4]
    6f6c:	1610      	asrs	r0, r2, #24
    6f6e:	47b0      	blx	r6
    6f70:	4b28      	ldr	r3, [pc, #160]	; (7014 <load_calibration_data+0x12c>)
    6f72:	469b      	mov	fp, r3
    6f74:	4798      	blx	r3
    6f76:	4b28      	ldr	r3, [pc, #160]	; (7018 <load_calibration_data+0x130>)
    6f78:	469a      	mov	sl, r3
    6f7a:	2200      	movs	r2, #0
    6f7c:	4b27      	ldr	r3, [pc, #156]	; (701c <load_calibration_data+0x134>)
    6f7e:	47d0      	blx	sl
    6f80:	0002      	movs	r2, r0
    6f82:	000b      	movs	r3, r1
    6f84:	4826      	ldr	r0, [pc, #152]	; (7020 <load_calibration_data+0x138>)
    6f86:	4681      	mov	r9, r0
    6f88:	2000      	movs	r0, #0
    6f8a:	4926      	ldr	r1, [pc, #152]	; (7024 <load_calibration_data+0x13c>)
    6f8c:	47c8      	blx	r9
    6f8e:	4f26      	ldr	r7, [pc, #152]	; (7028 <load_calibration_data+0x140>)
    6f90:	47b8      	blx	r7
    6f92:	4b26      	ldr	r3, [pc, #152]	; (702c <load_calibration_data+0x144>)
    6f94:	9000      	str	r0, [sp, #0]
    6f96:	6018      	str	r0, [r3, #0]
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
    6f98:	466b      	mov	r3, sp
    6f9a:	2008      	movs	r0, #8
    6f9c:	5618      	ldrsb	r0, [r3, r0]
    6f9e:	47b0      	blx	r6
    6fa0:	47d8      	blx	fp
    6fa2:	2200      	movs	r2, #0
    6fa4:	4b1d      	ldr	r3, [pc, #116]	; (701c <load_calibration_data+0x134>)
    6fa6:	47d0      	blx	sl
    6fa8:	0002      	movs	r2, r0
    6faa:	000b      	movs	r3, r1
    6fac:	2000      	movs	r0, #0
    6fae:	491d      	ldr	r1, [pc, #116]	; (7024 <load_calibration_data+0x13c>)
    6fb0:	47c8      	blx	r9
    6fb2:	47b8      	blx	r7
    6fb4:	4b1e      	ldr	r3, [pc, #120]	; (7030 <load_calibration_data+0x148>)
    6fb6:	9001      	str	r0, [sp, #4]
    6fb8:	6018      	str	r0, [r3, #0]
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    6fba:	4f1e      	ldr	r7, [pc, #120]	; (7034 <load_calibration_data+0x14c>)
    6fbc:	0020      	movs	r0, r4
    6fbe:	47b8      	blx	r7
    6fc0:	4e1d      	ldr	r6, [pc, #116]	; (7038 <load_calibration_data+0x150>)
    6fc2:	9900      	ldr	r1, [sp, #0]
    6fc4:	47b0      	blx	r6
    6fc6:	4c1d      	ldr	r4, [pc, #116]	; (703c <load_calibration_data+0x154>)
    6fc8:	491d      	ldr	r1, [pc, #116]	; (7040 <load_calibration_data+0x158>)
    6fca:	47a0      	blx	r4
    6fcc:	4b1d      	ldr	r3, [pc, #116]	; (7044 <load_calibration_data+0x15c>)
    6fce:	6018      	str	r0, [r3, #0]
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    6fd0:	0028      	movs	r0, r5
    6fd2:	47b8      	blx	r7
    6fd4:	9901      	ldr	r1, [sp, #4]
    6fd6:	47b0      	blx	r6
    6fd8:	4919      	ldr	r1, [pc, #100]	; (7040 <load_calibration_data+0x158>)
    6fda:	47a0      	blx	r4
    6fdc:	4b1a      	ldr	r3, [pc, #104]	; (7048 <load_calibration_data+0x160>)
    6fde:	6018      	str	r0, [r3, #0]
}
    6fe0:	b007      	add	sp, #28
    6fe2:	bc3c      	pop	{r2, r3, r4, r5}
    6fe4:	4690      	mov	r8, r2
    6fe6:	4699      	mov	r9, r3
    6fe8:	46a2      	mov	sl, r4
    6fea:	46ab      	mov	fp, r5
    6fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	00806030 	.word	0x00806030
    6ff4:	00806034 	.word	0x00806034
    6ff8:	200009c4 	.word	0x200009c4
    6ffc:	200009b8 	.word	0x200009b8
    7000:	00006ea5 	.word	0x00006ea5
    7004:	00009d39 	.word	0x00009d39
    7008:	000091cd 	.word	0x000091cd
    700c:	200009cc 	.word	0x200009cc
    7010:	200009dc 	.word	0x200009dc
    7014:	0000b905 	.word	0x0000b905
    7018:	0000a485 	.word	0x0000a485
    701c:	408f4000 	.word	0x408f4000
    7020:	0000b1ed 	.word	0x0000b1ed
    7024:	3ff00000 	.word	0x3ff00000
    7028:	0000b9a9 	.word	0x0000b9a9
    702c:	200009c0 	.word	0x200009c0
    7030:	200009b4 	.word	0x200009b4
    7034:	00009dd9 	.word	0x00009dd9
    7038:	00009781 	.word	0x00009781
    703c:	000094f1 	.word	0x000094f1
    7040:	457ff000 	.word	0x457ff000
    7044:	200009b0 	.word	0x200009b0
    7048:	200009d0 	.word	0x200009d0

0000704c <config_test_pins>:

#define  ALL_SET_LEN 14
/*! \brief Main function. Execution starts here.*/

void config_test_pins()
{
    704c:	b500      	push	{lr}
    704e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7050:	a901      	add	r1, sp, #4
    7052:	2301      	movs	r3, #1
    7054:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7056:	2200      	movs	r2, #0
    7058:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    705a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA08, &config_port_pin);
    705c:	2008      	movs	r0, #8
    705e:	4b02      	ldr	r3, [pc, #8]	; (7068 <config_test_pins+0x1c>)
    7060:	4798      	blx	r3
}
    7062:	b003      	add	sp, #12
    7064:	bd00      	pop	{pc}
    7066:	46c0      	nop			; (mov r8, r8)
    7068:	000035bd 	.word	0x000035bd

0000706c <serial_receive_bytes>:

void serial_receive_bytes(uint8_t count_receive ,uint8_t* receive_data)
{
    706c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    706e:	4d10      	ldr	r5, [pc, #64]	; (70b0 <serial_receive_bytes+0x44>)
    7070:	4c10      	ldr	r4, [pc, #64]	; (70b4 <serial_receive_bytes+0x48>)
	{
		if(serial_timeout)
    7072:	4e11      	ldr	r6, [pc, #68]	; (70b8 <serial_receive_bytes+0x4c>)
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    7074:	782b      	ldrb	r3, [r5, #0]
    7076:	7822      	ldrb	r2, [r4, #0]
    7078:	1a9b      	subs	r3, r3, r2
    707a:	4283      	cmp	r3, r0
    707c:	da06      	bge.n	708c <serial_receive_bytes+0x20>
		if(serial_timeout)
    707e:	7833      	ldrb	r3, [r6, #0]
    7080:	2b00      	cmp	r3, #0
    7082:	d0f7      	beq.n	7074 <serial_receive_bytes+0x8>
		{
			serial_timeout = false;
    7084:	2200      	movs	r2, #0
    7086:	4b0c      	ldr	r3, [pc, #48]	; (70b8 <serial_receive_bytes+0x4c>)
    7088:	701a      	strb	r2, [r3, #0]
	for(i=1;i<=count_receive;i++)
	{
		receive_data[i] = ring_buffer[tail_ring_buffer];
		tail_ring_buffer++;
	}
}
    708a:	bd70      	pop	{r4, r5, r6, pc}
	for(i=1;i<=count_receive;i++)
    708c:	2800      	cmp	r0, #0
    708e:	d0fc      	beq.n	708a <serial_receive_bytes+0x1e>
    7090:	2301      	movs	r3, #1
		receive_data[i] = ring_buffer[tail_ring_buffer];
    7092:	4c08      	ldr	r4, [pc, #32]	; (70b4 <serial_receive_bytes+0x48>)
    7094:	4d09      	ldr	r5, [pc, #36]	; (70bc <serial_receive_bytes+0x50>)
    7096:	7822      	ldrb	r2, [r4, #0]
    7098:	b2d2      	uxtb	r2, r2
    709a:	5caa      	ldrb	r2, [r5, r2]
    709c:	54ca      	strb	r2, [r1, r3]
		tail_ring_buffer++;
    709e:	7822      	ldrb	r2, [r4, #0]
    70a0:	3201      	adds	r2, #1
    70a2:	b2d2      	uxtb	r2, r2
    70a4:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=count_receive;i++)
    70a6:	3301      	adds	r3, #1
    70a8:	b2db      	uxtb	r3, r3
    70aa:	4298      	cmp	r0, r3
    70ac:	d2f3      	bcs.n	7096 <serial_receive_bytes+0x2a>
    70ae:	e7ec      	b.n	708a <serial_receive_bytes+0x1e>
    70b0:	200003ca 	.word	0x200003ca
    70b4:	200003e4 	.word	0x200003e4
    70b8:	200003e2 	.word	0x200003e2
    70bc:	200009e0 	.word	0x200009e0

000070c0 <check>:




void check()
{
    70c0:	b570      	push	{r4, r5, r6, lr}
    70c2:	b08c      	sub	sp, #48	; 0x30
	volatile uint8_t received_value[MAX_REC_BYTE];
	volatile static uint8_t prev_rec_value[MAX_REC_BYTE];
	volatile uint8_t transmit_value[MAX_TRANSMIT_VALUE];
	volatile static uint8_t echo_prev[2];
	volatile static uint8_t echo_current[2];
	volatile int temp=0;
    70c4:	2300      	movs	r3, #0
    70c6:	9301      	str	r3, [sp, #4]
	static volatile bool broadcast= false;

	volatile static char* echo_distance;
	//usart_read_job(&usart_instance ,)
	uint8_t i =0;
	if(head_ring_buffer != tail_ring_buffer)
    70c8:	4bc7      	ldr	r3, [pc, #796]	; (73e8 <check+0x328>)
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	4ac7      	ldr	r2, [pc, #796]	; (73ec <check+0x32c>)
    70ce:	7812      	ldrb	r2, [r2, #0]
    70d0:	b2db      	uxtb	r3, r3
    70d2:	4293      	cmp	r3, r2
    70d4:	d100      	bne.n	70d8 <check+0x18>
    70d6:	e119      	b.n	730c <check+0x24c>
	{
		received_value[0] = ring_buffer[tail_ring_buffer];
    70d8:	4ac4      	ldr	r2, [pc, #784]	; (73ec <check+0x32c>)
    70da:	7813      	ldrb	r3, [r2, #0]
    70dc:	b2db      	uxtb	r3, r3
    70de:	49c4      	ldr	r1, [pc, #784]	; (73f0 <check+0x330>)
    70e0:	5ccb      	ldrb	r3, [r1, r3]
    70e2:	b2db      	uxtb	r3, r3
    70e4:	a907      	add	r1, sp, #28
    70e6:	700b      	strb	r3, [r1, #0]
		tail_ring_buffer++;
    70e8:	7813      	ldrb	r3, [r2, #0]
    70ea:	3301      	adds	r3, #1
    70ec:	b2db      	uxtb	r3, r3
    70ee:	7013      	strb	r3, [r2, #0]
		switch(received_value[0])
    70f0:	780b      	ldrb	r3, [r1, #0]
    70f2:	3b41      	subs	r3, #65	; 0x41
    70f4:	b2da      	uxtb	r2, r3
    70f6:	2a35      	cmp	r2, #53	; 0x35
    70f8:	d900      	bls.n	70fc <check+0x3c>
    70fa:	e359      	b.n	77b0 <check+0x6f0>
    70fc:	0093      	lsls	r3, r2, #2
    70fe:	4abd      	ldr	r2, [pc, #756]	; (73f4 <check+0x334>)
    7100:	58d3      	ldr	r3, [r2, r3]
    7102:	469f      	mov	pc, r3
		{
			//Set all the sensors values
			case 'u':
				serial_timeout_count = 0;
    7104:	2300      	movs	r3, #0
    7106:	4abc      	ldr	r2, [pc, #752]	; (73f8 <check+0x338>)
    7108:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    710a:	4cbc      	ldr	r4, [pc, #752]	; (73fc <check+0x33c>)
    710c:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ALL_SET_LEN,received_value);
    710e:	a907      	add	r1, sp, #28
    7110:	200e      	movs	r0, #14
    7112:	4bbb      	ldr	r3, [pc, #748]	; (7400 <check+0x340>)
    7114:	4798      	blx	r3
				if(serial_timeout == false)
    7116:	7823      	ldrb	r3, [r4, #0]
    7118:	2b00      	cmp	r3, #0
    711a:	d000      	beq.n	711e <check+0x5e>
    711c:	e0e2      	b.n	72e4 <check+0x224>
				{
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
    711e:	ab07      	add	r3, sp, #28
    7120:	785b      	ldrb	r3, [r3, #1]
    7122:	4ab8      	ldr	r2, [pc, #736]	; (7404 <check+0x344>)
    7124:	7852      	ldrb	r2, [r2, #1]
    7126:	b2db      	uxtb	r3, r3
    7128:	4293      	cmp	r3, r2
    712a:	d04e      	beq.n	71ca <check+0x10a>
					{
						set_led_left_new(received_value[1], received_value[2], received_value[3]);
    712c:	ac07      	add	r4, sp, #28
    712e:	7860      	ldrb	r0, [r4, #1]
    7130:	b2c0      	uxtb	r0, r0
    7132:	78a1      	ldrb	r1, [r4, #2]
    7134:	b2c9      	uxtb	r1, r1
    7136:	78e2      	ldrb	r2, [r4, #3]
    7138:	b2d2      	uxtb	r2, r2
    713a:	4bb3      	ldr	r3, [pc, #716]	; (7408 <check+0x348>)
    713c:	4798      	blx	r3
						set_led_right_new(received_value[4], received_value[5], received_value[6]);
    713e:	7920      	ldrb	r0, [r4, #4]
    7140:	b2c0      	uxtb	r0, r0
    7142:	7961      	ldrb	r1, [r4, #5]
    7144:	b2c9      	uxtb	r1, r1
    7146:	79a2      	ldrb	r2, [r4, #6]
    7148:	b2d2      	uxtb	r2, r2
    714a:	4bb0      	ldr	r3, [pc, #704]	; (740c <check+0x34c>)
    714c:	4798      	blx	r3
					}
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
    714e:	ab07      	add	r3, sp, #28
    7150:	79db      	ldrb	r3, [r3, #7]
    7152:	4aac      	ldr	r2, [pc, #688]	; (7404 <check+0x344>)
    7154:	79d2      	ldrb	r2, [r2, #7]
    7156:	b2db      	uxtb	r3, r3
    7158:	4293      	cmp	r3, r2
    715a:	d05a      	beq.n	7212 <check+0x152>
					{
						if(received_value[8] == 0 && received_value[9] == 0)
    715c:	ab07      	add	r3, sp, #28
    715e:	7a1b      	ldrb	r3, [r3, #8]
    7160:	2b00      	cmp	r3, #0
    7162:	d103      	bne.n	716c <check+0xac>
    7164:	ab07      	add	r3, sp, #28
    7166:	7a5b      	ldrb	r3, [r3, #9]
    7168:	2b00      	cmp	r3, #0
    716a:	d068      	beq.n	723e <check+0x17e>
						{
							turn_off_motors();
						}
						set_motor_left(received_value[7], received_value[8]); // directions and speed are inputs
    716c:	ac07      	add	r4, sp, #28
    716e:	79e0      	ldrb	r0, [r4, #7]
    7170:	b2c0      	uxtb	r0, r0
    7172:	7a21      	ldrb	r1, [r4, #8]
    7174:	b2c9      	uxtb	r1, r1
    7176:	4ba6      	ldr	r3, [pc, #664]	; (7410 <check+0x350>)
    7178:	4798      	blx	r3
						set_motor_right(received_value[9], received_value[10]);
    717a:	7a60      	ldrb	r0, [r4, #9]
    717c:	b2c0      	uxtb	r0, r0
    717e:	7aa1      	ldrb	r1, [r4, #10]
    7180:	b2c9      	uxtb	r1, r1
    7182:	4ba4      	ldr	r3, [pc, #656]	; (7414 <check+0x354>)
    7184:	4798      	blx	r3
					}
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[14]^prev_rec_value[14]) )
    7186:	ab07      	add	r3, sp, #28
    7188:	7adb      	ldrb	r3, [r3, #11]
    718a:	4a9e      	ldr	r2, [pc, #632]	; (7404 <check+0x344>)
    718c:	7ad2      	ldrb	r2, [r2, #11]
    718e:	b2db      	uxtb	r3, r3
    7190:	4293      	cmp	r3, r2
    7192:	d057      	beq.n	7244 <check+0x184>
					{
						buzz_type =  received_value[11];
    7194:	aa07      	add	r2, sp, #28
    7196:	7ad3      	ldrb	r3, [r2, #11]
    7198:	b2db      	uxtb	r3, r3
    719a:	499f      	ldr	r1, [pc, #636]	; (7418 <check+0x358>)
    719c:	700b      	strb	r3, [r1, #0]
						buzz_frequency =  (received_value[12]<<8) + received_value[13];
    719e:	7b11      	ldrb	r1, [r2, #12]
    71a0:	7b53      	ldrb	r3, [r2, #13]
    71a2:	0209      	lsls	r1, r1, #8
    71a4:	185b      	adds	r3, r3, r1
    71a6:	b29b      	uxth	r3, r3
    71a8:	499c      	ldr	r1, [pc, #624]	; (741c <check+0x35c>)
    71aa:	800b      	strh	r3, [r1, #0]
						buzz_volume    =  received_value[14];
    71ac:	7b93      	ldrb	r3, [r2, #14]
    71ae:	4a9c      	ldr	r2, [pc, #624]	; (7420 <check+0x360>)
    71b0:	8013      	strh	r3, [r2, #0]
						speaker_update();
    71b2:	4b9c      	ldr	r3, [pc, #624]	; (7424 <check+0x364>)
    71b4:	4798      	blx	r3
{
    71b6:	2301      	movs	r3, #1
					}
					for(i=1;i<=ALL_SET_LEN;i++)
					{
						prev_rec_value[i] = received_value[i];
    71b8:	a807      	add	r0, sp, #28
    71ba:	4992      	ldr	r1, [pc, #584]	; (7404 <check+0x344>)
    71bc:	5cc2      	ldrb	r2, [r0, r3]
    71be:	b2d2      	uxtb	r2, r2
    71c0:	54ca      	strb	r2, [r1, r3]
    71c2:	3301      	adds	r3, #1
					for(i=1;i<=ALL_SET_LEN;i++)
    71c4:	2b0f      	cmp	r3, #15
    71c6:	d1f9      	bne.n	71bc <check+0xfc>
    71c8:	e08c      	b.n	72e4 <check+0x224>
					if((received_value[1]^prev_rec_value[1]) || (received_value[2]^prev_rec_value[2]) || (received_value[3]^prev_rec_value[3]) || (received_value[4]^prev_rec_value[4]) || (received_value[5]^prev_rec_value[5]) || (received_value[6]^prev_rec_value[6]))
    71ca:	ab07      	add	r3, sp, #28
    71cc:	789b      	ldrb	r3, [r3, #2]
    71ce:	4a8d      	ldr	r2, [pc, #564]	; (7404 <check+0x344>)
    71d0:	7892      	ldrb	r2, [r2, #2]
    71d2:	b2db      	uxtb	r3, r3
    71d4:	4293      	cmp	r3, r2
    71d6:	d1a9      	bne.n	712c <check+0x6c>
    71d8:	ab07      	add	r3, sp, #28
    71da:	78db      	ldrb	r3, [r3, #3]
    71dc:	4a89      	ldr	r2, [pc, #548]	; (7404 <check+0x344>)
    71de:	78d2      	ldrb	r2, [r2, #3]
    71e0:	b2db      	uxtb	r3, r3
    71e2:	4293      	cmp	r3, r2
    71e4:	d1a2      	bne.n	712c <check+0x6c>
    71e6:	ab07      	add	r3, sp, #28
    71e8:	791b      	ldrb	r3, [r3, #4]
    71ea:	4a86      	ldr	r2, [pc, #536]	; (7404 <check+0x344>)
    71ec:	7912      	ldrb	r2, [r2, #4]
    71ee:	b2db      	uxtb	r3, r3
    71f0:	4293      	cmp	r3, r2
    71f2:	d19b      	bne.n	712c <check+0x6c>
    71f4:	ab07      	add	r3, sp, #28
    71f6:	795b      	ldrb	r3, [r3, #5]
    71f8:	4a82      	ldr	r2, [pc, #520]	; (7404 <check+0x344>)
    71fa:	7952      	ldrb	r2, [r2, #5]
    71fc:	b2db      	uxtb	r3, r3
    71fe:	4293      	cmp	r3, r2
    7200:	d194      	bne.n	712c <check+0x6c>
    7202:	ab07      	add	r3, sp, #28
    7204:	799b      	ldrb	r3, [r3, #6]
    7206:	4a7f      	ldr	r2, [pc, #508]	; (7404 <check+0x344>)
    7208:	7992      	ldrb	r2, [r2, #6]
    720a:	b2db      	uxtb	r3, r3
    720c:	4293      	cmp	r3, r2
    720e:	d18d      	bne.n	712c <check+0x6c>
    7210:	e79d      	b.n	714e <check+0x8e>
					if((received_value[7]^prev_rec_value[7]) || (received_value[8]^prev_rec_value[8]) || (received_value[9]^prev_rec_value[9]) || (received_value[10]^prev_rec_value[10]) )
    7212:	ab07      	add	r3, sp, #28
    7214:	7a1b      	ldrb	r3, [r3, #8]
    7216:	4a7b      	ldr	r2, [pc, #492]	; (7404 <check+0x344>)
    7218:	7a12      	ldrb	r2, [r2, #8]
    721a:	b2db      	uxtb	r3, r3
    721c:	4293      	cmp	r3, r2
    721e:	d19d      	bne.n	715c <check+0x9c>
    7220:	ab07      	add	r3, sp, #28
    7222:	7a5b      	ldrb	r3, [r3, #9]
    7224:	4a77      	ldr	r2, [pc, #476]	; (7404 <check+0x344>)
    7226:	7a52      	ldrb	r2, [r2, #9]
    7228:	b2db      	uxtb	r3, r3
    722a:	4293      	cmp	r3, r2
    722c:	d196      	bne.n	715c <check+0x9c>
    722e:	ab07      	add	r3, sp, #28
    7230:	7a9b      	ldrb	r3, [r3, #10]
    7232:	4a74      	ldr	r2, [pc, #464]	; (7404 <check+0x344>)
    7234:	7a92      	ldrb	r2, [r2, #10]
    7236:	b2db      	uxtb	r3, r3
    7238:	4293      	cmp	r3, r2
    723a:	d18f      	bne.n	715c <check+0x9c>
    723c:	e7a3      	b.n	7186 <check+0xc6>
							turn_off_motors();
    723e:	4b7a      	ldr	r3, [pc, #488]	; (7428 <check+0x368>)
    7240:	4798      	blx	r3
    7242:	e793      	b.n	716c <check+0xac>
					if((received_value[11]^prev_rec_value[11]) || (received_value[12]^prev_rec_value[12]) || (received_value[13]^prev_rec_value[13]) || (received_value[14]^prev_rec_value[14]) )
    7244:	ab07      	add	r3, sp, #28
    7246:	7b1b      	ldrb	r3, [r3, #12]
    7248:	4a6e      	ldr	r2, [pc, #440]	; (7404 <check+0x344>)
    724a:	7b12      	ldrb	r2, [r2, #12]
    724c:	b2db      	uxtb	r3, r3
    724e:	4293      	cmp	r3, r2
    7250:	d1a0      	bne.n	7194 <check+0xd4>
    7252:	ab07      	add	r3, sp, #28
    7254:	7b5b      	ldrb	r3, [r3, #13]
    7256:	4a6b      	ldr	r2, [pc, #428]	; (7404 <check+0x344>)
    7258:	7b52      	ldrb	r2, [r2, #13]
    725a:	b2db      	uxtb	r3, r3
    725c:	4293      	cmp	r3, r2
    725e:	d199      	bne.n	7194 <check+0xd4>
    7260:	ab07      	add	r3, sp, #28
    7262:	7b9b      	ldrb	r3, [r3, #14]
    7264:	4a67      	ldr	r2, [pc, #412]	; (7404 <check+0x344>)
    7266:	7b92      	ldrb	r2, [r2, #14]
    7268:	b2db      	uxtb	r3, r3
    726a:	4293      	cmp	r3, r2
    726c:	d192      	bne.n	7194 <check+0xd4>
    726e:	e7a2      	b.n	71b6 <check+0xf6>
				}
				break;
			//Get all the sensors values
			case 'v':
				//Transmit LDR values
				transmit_value[0] = SENSORS_TRANSMIT_LENGTH-1; // legacy reasons
    7270:	ac02      	add	r4, sp, #8
    7272:	230a      	movs	r3, #10
    7274:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    7276:	200b      	movs	r0, #11
    7278:	4d6c      	ldr	r5, [pc, #432]	; (742c <check+0x36c>)
    727a:	47a8      	blx	r5
    727c:	7060      	strb	r0, [r4, #1]
				transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    727e:	2003      	movs	r0, #3
    7280:	47a8      	blx	r5
    7282:	70a0      	strb	r0, [r4, #2]
				
				//accelerometer
				get_accel_data();
    7284:	4b6a      	ldr	r3, [pc, #424]	; (7430 <check+0x370>)
    7286:	4798      	blx	r3
				// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7288:	4a6a      	ldr	r2, [pc, #424]	; (7434 <check+0x374>)
    728a:	7813      	ldrb	r3, [r2, #0]
    728c:	7851      	ldrb	r1, [r2, #1]
    728e:	430b      	orrs	r3, r1
    7290:	7891      	ldrb	r1, [r2, #2]
    7292:	430b      	orrs	r3, r1
    7294:	78d2      	ldrb	r2, [r2, #3]
    7296:	4313      	orrs	r3, r2
    7298:	065b      	lsls	r3, r3, #25
    729a:	d50c      	bpl.n	72b6 <check+0x1f6>
					get_accel_data();
    729c:	4e64      	ldr	r6, [pc, #400]	; (7430 <check+0x370>)
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    729e:	4c65      	ldr	r4, [pc, #404]	; (7434 <check+0x374>)
    72a0:	2540      	movs	r5, #64	; 0x40
					get_accel_data();
    72a2:	47b0      	blx	r6
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    72a4:	7823      	ldrb	r3, [r4, #0]
    72a6:	7862      	ldrb	r2, [r4, #1]
    72a8:	4313      	orrs	r3, r2
    72aa:	78a2      	ldrb	r2, [r4, #2]
    72ac:	4313      	orrs	r3, r2
    72ae:	78e2      	ldrb	r2, [r4, #3]
    72b0:	4313      	orrs	r3, r2
    72b2:	421d      	tst	r5, r3
    72b4:	d1f5      	bne.n	72a2 <check+0x1e2>
				}
				 
				for(i = 3; i < ACCL_TRANSMIT_LENGTH; i++) {
					transmit_value[i] = bufferReceive[i-1];
    72b6:	4b5f      	ldr	r3, [pc, #380]	; (7434 <check+0x374>)
    72b8:	789a      	ldrb	r2, [r3, #2]
    72ba:	ac02      	add	r4, sp, #8
    72bc:	70e2      	strb	r2, [r4, #3]
    72be:	78db      	ldrb	r3, [r3, #3]
    72c0:	7123      	strb	r3, [r4, #4]
					
				}
				
				//Line Follower
				transmit_value[7] = adc_start_read_result(LINE_FOLLOWER);
    72c2:	2002      	movs	r0, #2
    72c4:	4b59      	ldr	r3, [pc, #356]	; (742c <check+0x36c>)
    72c6:	4798      	blx	r3
    72c8:	71e0      	strb	r0, [r4, #7]
				
				//Ultrasound
				echo_distance = get_ultrasound_distance();
    72ca:	4b5b      	ldr	r3, [pc, #364]	; (7438 <check+0x378>)
    72cc:	4798      	blx	r3
				transmit_value[9] = *echo_distance++;
    72ce:	7803      	ldrb	r3, [r0, #0]
    72d0:	b2db      	uxtb	r3, r3
    72d2:	7263      	strb	r3, [r4, #9]
				transmit_value[8] = *echo_distance;				
    72d4:	7843      	ldrb	r3, [r0, #1]
    72d6:	b2db      	uxtb	r3, r3
    72d8:	7223      	strb	r3, [r4, #8]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
    72da:	220b      	movs	r2, #11
    72dc:	0021      	movs	r1, r4
    72de:	4857      	ldr	r0, [pc, #348]	; (743c <check+0x37c>)
    72e0:	4b57      	ldr	r3, [pc, #348]	; (7440 <check+0x380>)
    72e2:	4798      	blx	r3
				head_ring_buffer = 0;
				tail_ring_buffer = 0;
				break;
		}
		
		if((head_ring_buffer == tail_ring_buffer) || (head_ring_buffer > MAX_LIMIT_RING_BUFFER) || (tail_ring_buffer > MAX_LIMIT_RING_BUFFER) || (serial_timeout == true))
    72e4:	4b40      	ldr	r3, [pc, #256]	; (73e8 <check+0x328>)
    72e6:	781b      	ldrb	r3, [r3, #0]
    72e8:	4a40      	ldr	r2, [pc, #256]	; (73ec <check+0x32c>)
    72ea:	7812      	ldrb	r2, [r2, #0]
    72ec:	b2db      	uxtb	r3, r3
    72ee:	4293      	cmp	r3, r2
    72f0:	d007      	beq.n	7302 <check+0x242>
    72f2:	4b3d      	ldr	r3, [pc, #244]	; (73e8 <check+0x328>)
    72f4:	781b      	ldrb	r3, [r3, #0]
    72f6:	4b3d      	ldr	r3, [pc, #244]	; (73ec <check+0x32c>)
    72f8:	781b      	ldrb	r3, [r3, #0]
    72fa:	4b40      	ldr	r3, [pc, #256]	; (73fc <check+0x33c>)
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	2b00      	cmp	r3, #0
    7300:	d004      	beq.n	730c <check+0x24c>
		{
			head_ring_buffer = 0;
    7302:	2300      	movs	r3, #0
    7304:	4a38      	ldr	r2, [pc, #224]	; (73e8 <check+0x328>)
    7306:	7013      	strb	r3, [r2, #0]
			tail_ring_buffer = 0;
    7308:	4a38      	ldr	r2, [pc, #224]	; (73ec <check+0x32c>)
    730a:	7013      	strb	r3, [r2, #0]
		}
	 }		//received_data_updated = false;	
	
	 if(broadcast == true)
    730c:	4b4d      	ldr	r3, [pc, #308]	; (7444 <check+0x384>)
    730e:	781b      	ldrb	r3, [r3, #0]
    7310:	2b00      	cmp	r3, #0
    7312:	d066      	beq.n	73e2 <check+0x322>
	 {
		if(count_broadcast > MAX_COUNT_BROADCAST)
    7314:	4b4c      	ldr	r3, [pc, #304]	; (7448 <check+0x388>)
    7316:	781b      	ldrb	r3, [r3, #0]
    7318:	b2db      	uxtb	r3, r3
    731a:	2b01      	cmp	r3, #1
    731c:	d961      	bls.n	73e2 <check+0x322>
		{
			count_broadcast = 0;
    731e:	2200      	movs	r2, #0
    7320:	4b49      	ldr	r3, [pc, #292]	; (7448 <check+0x388>)
    7322:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    7324:	3201      	adds	r2, #1
    7326:	32ff      	adds	r2, #255	; 0xff
    7328:	4b48      	ldr	r3, [pc, #288]	; (744c <check+0x38c>)
    732a:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA08, true);
			//Transmit LDR values
			transmit_value[0] = SENSORS_TRANSMIT_LENGTH-1; // legacy reasons
    732c:	ac02      	add	r4, sp, #8
    732e:	230a      	movs	r3, #10
    7330:	7023      	strb	r3, [r4, #0]
			transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    7332:	200b      	movs	r0, #11
    7334:	4d3d      	ldr	r5, [pc, #244]	; (742c <check+0x36c>)
    7336:	47a8      	blx	r5
    7338:	7060      	strb	r0, [r4, #1]
			transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    733a:	2003      	movs	r0, #3
    733c:	47a8      	blx	r5
    733e:	70a0      	strb	r0, [r4, #2]
			
			//accelerometer
			get_accel_data();
    7340:	4b3b      	ldr	r3, [pc, #236]	; (7430 <check+0x370>)
    7342:	4798      	blx	r3
			// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    7344:	4a3b      	ldr	r2, [pc, #236]	; (7434 <check+0x374>)
    7346:	7813      	ldrb	r3, [r2, #0]
    7348:	7851      	ldrb	r1, [r2, #1]
    734a:	430b      	orrs	r3, r1
    734c:	7891      	ldrb	r1, [r2, #2]
    734e:	430b      	orrs	r3, r1
    7350:	78d2      	ldrb	r2, [r2, #3]
    7352:	4313      	orrs	r3, r2
    7354:	065b      	lsls	r3, r3, #25
    7356:	d50c      	bpl.n	7372 <check+0x2b2>
			{
				get_accel_data();
    7358:	4e35      	ldr	r6, [pc, #212]	; (7430 <check+0x370>)
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    735a:	4c36      	ldr	r4, [pc, #216]	; (7434 <check+0x374>)
    735c:	2540      	movs	r5, #64	; 0x40
				get_accel_data();
    735e:	47b0      	blx	r6
			while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) 
    7360:	7823      	ldrb	r3, [r4, #0]
    7362:	7862      	ldrb	r2, [r4, #1]
    7364:	4313      	orrs	r3, r2
    7366:	78a2      	ldrb	r2, [r4, #2]
    7368:	4313      	orrs	r3, r2
    736a:	78e2      	ldrb	r2, [r4, #3]
    736c:	4313      	orrs	r3, r2
    736e:	421d      	tst	r5, r3
    7370:	d1f5      	bne.n	735e <check+0x29e>
			}
			
			for(i = 3; i < ACCL_TRANSMIT_LENGTH; i++)
			{
				transmit_value[i] = bufferReceive[i-1];	
    7372:	4b30      	ldr	r3, [pc, #192]	; (7434 <check+0x374>)
    7374:	789a      	ldrb	r2, [r3, #2]
    7376:	ac02      	add	r4, sp, #8
    7378:	70e2      	strb	r2, [r4, #3]
    737a:	78db      	ldrb	r3, [r3, #3]
    737c:	7123      	strb	r3, [r4, #4]
			}
			
			//Line Follower
			transmit_value[7] = adc_start_read_result(LINE_FOLLOWER);
    737e:	2002      	movs	r0, #2
    7380:	4b2a      	ldr	r3, [pc, #168]	; (742c <check+0x36c>)
    7382:	4798      	blx	r3
    7384:	71e0      	strb	r0, [r4, #7]
			
			//Ultrasound
			echo_distance = get_ultrasound_distance();
    7386:	4b2c      	ldr	r3, [pc, #176]	; (7438 <check+0x378>)
    7388:	4798      	blx	r3
			echo_current[0]	= *echo_distance++;
    738a:	7803      	ldrb	r3, [r0, #0]
    738c:	b2db      	uxtb	r3, r3
    738e:	4a30      	ldr	r2, [pc, #192]	; (7450 <check+0x390>)
    7390:	7013      	strb	r3, [r2, #0]
			echo_current[1]	= *echo_distance;
    7392:	7843      	ldrb	r3, [r0, #1]
    7394:	b2db      	uxtb	r3, r3
    7396:	7053      	strb	r3, [r2, #1]
			if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    7398:	4b2e      	ldr	r3, [pc, #184]	; (7454 <check+0x394>)
    739a:	781b      	ldrb	r3, [r3, #0]
    739c:	2b00      	cmp	r3, #0
    739e:	d104      	bne.n	73aa <check+0x2ea>
    73a0:	7853      	ldrb	r3, [r2, #1]
    73a2:	b2db      	uxtb	r3, r3
    73a4:	2b75      	cmp	r3, #117	; 0x75
    73a6:	d800      	bhi.n	73aa <check+0x2ea>
    73a8:	e208      	b.n	77bc <check+0x6fc>
			{
				transmit_value[9] = echo_prev[0];
    73aa:	492b      	ldr	r1, [pc, #172]	; (7458 <check+0x398>)
    73ac:	780b      	ldrb	r3, [r1, #0]
    73ae:	b2db      	uxtb	r3, r3
    73b0:	aa02      	add	r2, sp, #8
    73b2:	7253      	strb	r3, [r2, #9]
				transmit_value[8] = echo_prev[1];
    73b4:	784b      	ldrb	r3, [r1, #1]
    73b6:	b2db      	uxtb	r3, r3
    73b8:	7213      	strb	r3, [r2, #8]
				transmit_value[8] = echo_current[1];
				echo_prev[0]	  = echo_current[0];
				echo_prev[1]	  = echo_current[1];
					
			}
			temp_batt_level = adc_start_read_result(BATT_MTR);
    73ba:	200a      	movs	r0, #10
    73bc:	4b1b      	ldr	r3, [pc, #108]	; (742c <check+0x36c>)
    73be:	4798      	blx	r3
	return (port_base->OUT.reg & pin_mask);
    73c0:	4c22      	ldr	r4, [pc, #136]	; (744c <check+0x38c>)
    73c2:	6922      	ldr	r2, [r4, #16]
    73c4:	0312      	lsls	r2, r2, #12
			temp_batt_level = temp_batt_level >> 1; 
			temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    73c6:	0fd2      	lsrs	r2, r2, #31
			temp_batt_level = temp_batt_level >> 1; 
    73c8:	0843      	lsrs	r3, r0, #1
			temp_batt_status = temp_batt_status << 7;
    73ca:	01d2      	lsls	r2, r2, #7
			transmit_value[10] = temp_batt_status | temp_batt_level;
    73cc:	4313      	orrs	r3, r2
    73ce:	b2db      	uxtb	r3, r3
    73d0:	a902      	add	r1, sp, #8
    73d2:	728b      	strb	r3, [r1, #10]
			//Pin High
			
			usart_write_buffer_wait(&usart_ble_instance, transmit_value, SENSORS_TRANSMIT_LENGTH);
    73d4:	220b      	movs	r2, #11
    73d6:	4819      	ldr	r0, [pc, #100]	; (743c <check+0x37c>)
    73d8:	4b19      	ldr	r3, [pc, #100]	; (7440 <check+0x380>)
    73da:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    73dc:	2380      	movs	r3, #128	; 0x80
    73de:	005b      	lsls	r3, r3, #1
    73e0:	6163      	str	r3, [r4, #20]
			port_pin_set_output_level(PIN_PA08, false);
			//Pin Low
		}
	 }	 
}
    73e2:	b00c      	add	sp, #48	; 0x30
    73e4:	bd70      	pop	{r4, r5, r6, pc}
    73e6:	46c0      	nop			; (mov r8, r8)
    73e8:	200003ca 	.word	0x200003ca
    73ec:	200003e4 	.word	0x200003e4
    73f0:	200009e0 	.word	0x200009e0
    73f4:	0000c0c8 	.word	0x0000c0c8
    73f8:	200003e3 	.word	0x200003e3
    73fc:	200003e2 	.word	0x200003e2
    7400:	0000706d 	.word	0x0000706d
    7404:	200003cc 	.word	0x200003cc
    7408:	00001145 	.word	0x00001145
    740c:	00001159 	.word	0x00001159
    7410:	00001ac1 	.word	0x00001ac1
    7414:	00001b65 	.word	0x00001b65
    7418:	200003bc 	.word	0x200003bc
    741c:	200003ba 	.word	0x200003ba
    7420:	200003be 	.word	0x200003be
    7424:	000021c5 	.word	0x000021c5
    7428:	00001c09 	.word	0x00001c09
    742c:	00006ca9 	.word	0x00006ca9
    7430:	00001951 	.word	0x00001951
    7434:	200005a8 	.word	0x200005a8
    7438:	00001721 	.word	0x00001721
    743c:	20000574 	.word	0x20000574
    7440:	000007e9 	.word	0x000007e9
    7444:	200003b8 	.word	0x200003b8
    7448:	200003c0 	.word	0x200003c0
    744c:	41004400 	.word	0x41004400
    7450:	200003c4 	.word	0x200003c4
    7454:	200003e1 	.word	0x200003e1
    7458:	200003c8 	.word	0x200003c8
				serial_timeout_count = 0;
    745c:	2400      	movs	r4, #0
    745e:	4bdf      	ldr	r3, [pc, #892]	; (77dc <check+0x71c>)
    7460:	701c      	strb	r4, [r3, #0]
				serial_timeout = false;
    7462:	4bdf      	ldr	r3, [pc, #892]	; (77e0 <check+0x720>)
    7464:	701c      	strb	r4, [r3, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
    7466:	ad07      	add	r5, sp, #28
    7468:	0029      	movs	r1, r5
    746a:	2001      	movs	r0, #1
    746c:	4bdd      	ldr	r3, [pc, #884]	; (77e4 <check+0x724>)
    746e:	4798      	blx	r3
				count_broadcast = 0;
    7470:	4bdd      	ldr	r3, [pc, #884]	; (77e8 <check+0x728>)
    7472:	701c      	strb	r4, [r3, #0]
				switch(received_value[1])
    7474:	786b      	ldrb	r3, [r5, #1]
    7476:	b2db      	uxtb	r3, r3
    7478:	2b67      	cmp	r3, #103	; 0x67
    747a:	d007      	beq.n	748c <check+0x3cc>
    747c:	2b73      	cmp	r3, #115	; 0x73
    747e:	d009      	beq.n	7494 <check+0x3d4>
						head_ring_buffer = 0;
    7480:	2300      	movs	r3, #0
    7482:	4ada      	ldr	r2, [pc, #872]	; (77ec <check+0x72c>)
    7484:	7013      	strb	r3, [r2, #0]
						tail_ring_buffer = 0;
    7486:	4ada      	ldr	r2, [pc, #872]	; (77f0 <check+0x730>)
    7488:	7013      	strb	r3, [r2, #0]
						break;
    748a:	e72b      	b.n	72e4 <check+0x224>
						broadcast = true;
    748c:	2201      	movs	r2, #1
    748e:	4bd9      	ldr	r3, [pc, #868]	; (77f4 <check+0x734>)
    7490:	701a      	strb	r2, [r3, #0]
						break;	
    7492:	e727      	b.n	72e4 <check+0x224>
						broadcast = false;
    7494:	2200      	movs	r2, #0
    7496:	4bd7      	ldr	r3, [pc, #860]	; (77f4 <check+0x734>)
    7498:	701a      	strb	r2, [r3, #0]
						break;
    749a:	e723      	b.n	72e4 <check+0x224>
				serial_timeout_count = 0;
    749c:	2300      	movs	r3, #0
    749e:	4acf      	ldr	r2, [pc, #828]	; (77dc <check+0x71c>)
    74a0:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    74a2:	4ccf      	ldr	r4, [pc, #828]	; (77e0 <check+0x720>)
    74a4:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(LEDS_SET_LEN_TEST,received_value);
    74a6:	a907      	add	r1, sp, #28
    74a8:	2004      	movs	r0, #4
    74aa:	4bce      	ldr	r3, [pc, #824]	; (77e4 <check+0x724>)
    74ac:	4798      	blx	r3
				if(serial_timeout == false)
    74ae:	7823      	ldrb	r3, [r4, #0]
    74b0:	2b00      	cmp	r3, #0
    74b2:	d000      	beq.n	74b6 <check+0x3f6>
    74b4:	e716      	b.n	72e4 <check+0x224>
					set_led_left_new(received_value[2], received_value[3], received_value[4]);
    74b6:	ac07      	add	r4, sp, #28
    74b8:	78a0      	ldrb	r0, [r4, #2]
    74ba:	b2c0      	uxtb	r0, r0
    74bc:	78e1      	ldrb	r1, [r4, #3]
    74be:	b2c9      	uxtb	r1, r1
    74c0:	7922      	ldrb	r2, [r4, #4]
    74c2:	b2d2      	uxtb	r2, r2
    74c4:	4bcc      	ldr	r3, [pc, #816]	; (77f8 <check+0x738>)
    74c6:	4798      	blx	r3
					set_led_right_new(received_value[2], received_value[3], received_value[4]);
    74c8:	78a0      	ldrb	r0, [r4, #2]
    74ca:	b2c0      	uxtb	r0, r0
    74cc:	78e1      	ldrb	r1, [r4, #3]
    74ce:	b2c9      	uxtb	r1, r1
    74d0:	7922      	ldrb	r2, [r4, #4]
    74d2:	b2d2      	uxtb	r2, r2
    74d4:	4bc9      	ldr	r3, [pc, #804]	; (77fc <check+0x73c>)
    74d6:	4798      	blx	r3
    74d8:	e704      	b.n	72e4 <check+0x224>
				serial_timeout_count = 0;
    74da:	2300      	movs	r3, #0
    74dc:	4abf      	ldr	r2, [pc, #764]	; (77dc <check+0x71c>)
    74de:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    74e0:	4cbf      	ldr	r4, [pc, #764]	; (77e0 <check+0x720>)
    74e2:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(MOTORS_SET_LEN,received_value);
    74e4:	a907      	add	r1, sp, #28
    74e6:	2004      	movs	r0, #4
    74e8:	4bbe      	ldr	r3, [pc, #760]	; (77e4 <check+0x724>)
    74ea:	4798      	blx	r3
				if(serial_timeout == false)
    74ec:	7823      	ldrb	r3, [r4, #0]
    74ee:	2b00      	cmp	r3, #0
    74f0:	d000      	beq.n	74f4 <check+0x434>
    74f2:	e6f7      	b.n	72e4 <check+0x224>
					if(received_value[2] == 0 && received_value[4] == 0)
    74f4:	ab07      	add	r3, sp, #28
    74f6:	789b      	ldrb	r3, [r3, #2]
    74f8:	2b00      	cmp	r3, #0
    74fa:	d103      	bne.n	7504 <check+0x444>
    74fc:	ab07      	add	r3, sp, #28
    74fe:	791b      	ldrb	r3, [r3, #4]
    7500:	2b00      	cmp	r3, #0
    7502:	d00d      	beq.n	7520 <check+0x460>
					set_motor_left(received_value[1], received_value[2]); // directions and speed are inputs
    7504:	ac07      	add	r4, sp, #28
    7506:	7860      	ldrb	r0, [r4, #1]
    7508:	b2c0      	uxtb	r0, r0
    750a:	78a1      	ldrb	r1, [r4, #2]
    750c:	b2c9      	uxtb	r1, r1
    750e:	4bbc      	ldr	r3, [pc, #752]	; (7800 <check+0x740>)
    7510:	4798      	blx	r3
					set_motor_right(received_value[3], received_value[4]);
    7512:	78e0      	ldrb	r0, [r4, #3]
    7514:	b2c0      	uxtb	r0, r0
    7516:	7921      	ldrb	r1, [r4, #4]
    7518:	b2c9      	uxtb	r1, r1
    751a:	4bba      	ldr	r3, [pc, #744]	; (7804 <check+0x744>)
    751c:	4798      	blx	r3
    751e:	e6e1      	b.n	72e4 <check+0x224>
						turn_off_motors();
    7520:	4bb9      	ldr	r3, [pc, #740]	; (7808 <check+0x748>)
    7522:	4798      	blx	r3
    7524:	e7ee      	b.n	7504 <check+0x444>
				get_accel_data();
    7526:	4bb9      	ldr	r3, [pc, #740]	; (780c <check+0x74c>)
    7528:	4798      	blx	r3
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    752a:	4ab9      	ldr	r2, [pc, #740]	; (7810 <check+0x750>)
    752c:	7813      	ldrb	r3, [r2, #0]
    752e:	7851      	ldrb	r1, [r2, #1]
    7530:	430b      	orrs	r3, r1
    7532:	7891      	ldrb	r1, [r2, #2]
    7534:	430b      	orrs	r3, r1
    7536:	78d2      	ldrb	r2, [r2, #3]
    7538:	4313      	orrs	r3, r2
    753a:	065b      	lsls	r3, r3, #25
    753c:	d50c      	bpl.n	7558 <check+0x498>
					get_accel_data();
    753e:	4eb3      	ldr	r6, [pc, #716]	; (780c <check+0x74c>)
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7540:	4cb3      	ldr	r4, [pc, #716]	; (7810 <check+0x750>)
    7542:	2540      	movs	r5, #64	; 0x40
					get_accel_data();
    7544:	47b0      	blx	r6
				while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    7546:	7823      	ldrb	r3, [r4, #0]
    7548:	7862      	ldrb	r2, [r4, #1]
    754a:	4313      	orrs	r3, r2
    754c:	78a2      	ldrb	r2, [r4, #2]
    754e:	4313      	orrs	r3, r2
    7550:	78e2      	ldrb	r2, [r4, #3]
    7552:	4313      	orrs	r3, r2
    7554:	421d      	tst	r5, r3
    7556:	d1f5      	bne.n	7544 <check+0x484>
				transmit_value[0] = ACCL_TRANSMIT_LENGTH-1; // legacy reasons 
    7558:	a902      	add	r1, sp, #8
    755a:	2304      	movs	r3, #4
    755c:	700b      	strb	r3, [r1, #0]
					transmit_value[i] = bufferReceive[i-1];
    755e:	4bac      	ldr	r3, [pc, #688]	; (7810 <check+0x750>)
    7560:	781a      	ldrb	r2, [r3, #0]
    7562:	704a      	strb	r2, [r1, #1]
    7564:	785a      	ldrb	r2, [r3, #1]
    7566:	708a      	strb	r2, [r1, #2]
    7568:	789a      	ldrb	r2, [r3, #2]
    756a:	70ca      	strb	r2, [r1, #3]
    756c:	78db      	ldrb	r3, [r3, #3]
    756e:	710b      	strb	r3, [r1, #4]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, ACCL_TRANSMIT_LENGTH);
    7570:	2205      	movs	r2, #5
    7572:	48a8      	ldr	r0, [pc, #672]	; (7814 <check+0x754>)
    7574:	4ba8      	ldr	r3, [pc, #672]	; (7818 <check+0x758>)
    7576:	4798      	blx	r3
				break;
    7578:	e6b4      	b.n	72e4 <check+0x224>
				transmit_value[0] = L_TRANSMIT_LENGTH-1;
    757a:	ac02      	add	r4, sp, #8
    757c:	2302      	movs	r3, #2
    757e:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    7580:	200b      	movs	r0, #11
    7582:	4da6      	ldr	r5, [pc, #664]	; (781c <check+0x75c>)
    7584:	47a8      	blx	r5
    7586:	7060      	strb	r0, [r4, #1]
				transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    7588:	2003      	movs	r0, #3
    758a:	47a8      	blx	r5
    758c:	70a0      	strb	r0, [r4, #2]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, L_TRANSMIT_LENGTH);
    758e:	2203      	movs	r2, #3
    7590:	0021      	movs	r1, r4
    7592:	48a0      	ldr	r0, [pc, #640]	; (7814 <check+0x754>)
    7594:	4ba0      	ldr	r3, [pc, #640]	; (7818 <check+0x758>)
    7596:	4798      	blx	r3
				break;
    7598:	e6a4      	b.n	72e4 <check+0x224>
				transmit_value[0] = LF_TRANSMIT_LENGTH-1;
    759a:	ac02      	add	r4, sp, #8
    759c:	2301      	movs	r3, #1
    759e:	7023      	strb	r3, [r4, #0]
				transmit_value[1] = adc_start_read_result(LINE_FOLLOWER);
    75a0:	2002      	movs	r0, #2
    75a2:	4b9e      	ldr	r3, [pc, #632]	; (781c <check+0x75c>)
    75a4:	4798      	blx	r3
    75a6:	7060      	strb	r0, [r4, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, LF_TRANSMIT_LENGTH);
    75a8:	2202      	movs	r2, #2
    75aa:	0021      	movs	r1, r4
    75ac:	4899      	ldr	r0, [pc, #612]	; (7814 <check+0x754>)
    75ae:	4b9a      	ldr	r3, [pc, #616]	; (7818 <check+0x758>)
    75b0:	4798      	blx	r3
				break;
    75b2:	e697      	b.n	72e4 <check+0x224>
				echo_distance = get_ultrasound_distance();
    75b4:	4b9a      	ldr	r3, [pc, #616]	; (7820 <check+0x760>)
    75b6:	4798      	blx	r3
				echo_current[0]	= *echo_distance++;
    75b8:	7803      	ldrb	r3, [r0, #0]
    75ba:	b2db      	uxtb	r3, r3
    75bc:	4a99      	ldr	r2, [pc, #612]	; (7824 <check+0x764>)
    75be:	7013      	strb	r3, [r2, #0]
				echo_current[1]	= *echo_distance;
    75c0:	7843      	ldrb	r3, [r0, #1]
    75c2:	b2db      	uxtb	r3, r3
    75c4:	7053      	strb	r3, [r2, #1]
				if((resource_distance_lock == 1) || (echo_current[1] > 0x75))
    75c6:	4b98      	ldr	r3, [pc, #608]	; (7828 <check+0x768>)
    75c8:	781b      	ldrb	r3, [r3, #0]
    75ca:	2b00      	cmp	r3, #0
    75cc:	d103      	bne.n	75d6 <check+0x516>
    75ce:	7853      	ldrb	r3, [r2, #1]
    75d0:	b2db      	uxtb	r3, r3
    75d2:	2b75      	cmp	r3, #117	; 0x75
    75d4:	d90f      	bls.n	75f6 <check+0x536>
					transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    75d6:	ab02      	add	r3, sp, #8
    75d8:	2202      	movs	r2, #2
    75da:	701a      	strb	r2, [r3, #0]
					transmit_value[2] = echo_prev[0];
    75dc:	4993      	ldr	r1, [pc, #588]	; (782c <check+0x76c>)
    75de:	780a      	ldrb	r2, [r1, #0]
    75e0:	b2d2      	uxtb	r2, r2
    75e2:	709a      	strb	r2, [r3, #2]
					transmit_value[1] = echo_prev[1];
    75e4:	784a      	ldrb	r2, [r1, #1]
    75e6:	b2d2      	uxtb	r2, r2
    75e8:	705a      	strb	r2, [r3, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, ULTRA_TRANSMIT_LENGTH);
    75ea:	2203      	movs	r2, #3
    75ec:	a902      	add	r1, sp, #8
    75ee:	4889      	ldr	r0, [pc, #548]	; (7814 <check+0x754>)
    75f0:	4b89      	ldr	r3, [pc, #548]	; (7818 <check+0x758>)
    75f2:	4798      	blx	r3
				break;
    75f4:	e676      	b.n	72e4 <check+0x224>
					transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    75f6:	aa02      	add	r2, sp, #8
    75f8:	2302      	movs	r3, #2
    75fa:	7013      	strb	r3, [r2, #0]
					transmit_value[2] = echo_current[0];
    75fc:	4b89      	ldr	r3, [pc, #548]	; (7824 <check+0x764>)
    75fe:	7819      	ldrb	r1, [r3, #0]
    7600:	b2c9      	uxtb	r1, r1
    7602:	7091      	strb	r1, [r2, #2]
					transmit_value[1] = echo_current[1];
    7604:	7859      	ldrb	r1, [r3, #1]
    7606:	b2c9      	uxtb	r1, r1
    7608:	7051      	strb	r1, [r2, #1]
					echo_prev[0]	  = echo_current[0];
    760a:	781a      	ldrb	r2, [r3, #0]
    760c:	b2d2      	uxtb	r2, r2
    760e:	4987      	ldr	r1, [pc, #540]	; (782c <check+0x76c>)
    7610:	700a      	strb	r2, [r1, #0]
					echo_prev[1]	  = echo_current[1];
    7612:	785b      	ldrb	r3, [r3, #1]
    7614:	b2db      	uxtb	r3, r3
    7616:	704b      	strb	r3, [r1, #1]
    7618:	e7e7      	b.n	75ea <check+0x52a>
				serial_timeout_count = 0;
    761a:	2300      	movs	r3, #0
    761c:	4a6f      	ldr	r2, [pc, #444]	; (77dc <check+0x71c>)
    761e:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    7620:	4c6f      	ldr	r4, [pc, #444]	; (77e0 <check+0x720>)
    7622:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ULTRASOUND_SET_LEN,received_value);
    7624:	a907      	add	r1, sp, #28
    7626:	2004      	movs	r0, #4
    7628:	4b6e      	ldr	r3, [pc, #440]	; (77e4 <check+0x724>)
    762a:	4798      	blx	r3
				if(serial_timeout == false)
    762c:	7823      	ldrb	r3, [r4, #0]
    762e:	2b00      	cmp	r3, #0
    7630:	d000      	beq.n	7634 <check+0x574>
    7632:	e657      	b.n	72e4 <check+0x224>
					buzz_type =  received_value[1];
    7634:	aa07      	add	r2, sp, #28
    7636:	7853      	ldrb	r3, [r2, #1]
    7638:	b2db      	uxtb	r3, r3
    763a:	497d      	ldr	r1, [pc, #500]	; (7830 <check+0x770>)
    763c:	700b      	strb	r3, [r1, #0]
					buzz_frequency =  (received_value[2]<<8) + received_value[3];
    763e:	7891      	ldrb	r1, [r2, #2]
    7640:	78d3      	ldrb	r3, [r2, #3]
    7642:	0209      	lsls	r1, r1, #8
    7644:	185b      	adds	r3, r3, r1
    7646:	b29b      	uxth	r3, r3
    7648:	497a      	ldr	r1, [pc, #488]	; (7834 <check+0x774>)
    764a:	800b      	strh	r3, [r1, #0]
					buzz_volume    =  received_value[4];
    764c:	7913      	ldrb	r3, [r2, #4]
    764e:	4a7a      	ldr	r2, [pc, #488]	; (7838 <check+0x778>)
    7650:	8013      	strh	r3, [r2, #0]
					speaker_update();
    7652:	4b7a      	ldr	r3, [pc, #488]	; (783c <check+0x77c>)
    7654:	4798      	blx	r3
    7656:	e645      	b.n	72e4 <check+0x224>
				serial_timeout_count = 0;
    7658:	2300      	movs	r3, #0
    765a:	4a60      	ldr	r2, [pc, #384]	; (77dc <check+0x71c>)
    765c:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    765e:	4c60      	ldr	r4, [pc, #384]	; (77e0 <check+0x720>)
    7660:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(SENSORS_GET_LEN,received_value);
    7662:	a907      	add	r1, sp, #28
    7664:	2001      	movs	r0, #1
    7666:	4b5f      	ldr	r3, [pc, #380]	; (77e4 <check+0x724>)
    7668:	4798      	blx	r3
				if(serial_timeout == false)
    766a:	7823      	ldrb	r3, [r4, #0]
    766c:	2b00      	cmp	r3, #0
    766e:	d000      	beq.n	7672 <check+0x5b2>
    7670:	e638      	b.n	72e4 <check+0x224>
					switch(received_value[1])
    7672:	ab07      	add	r3, sp, #28
    7674:	785b      	ldrb	r3, [r3, #1]
    7676:	3b31      	subs	r3, #49	; 0x31
    7678:	b2da      	uxtb	r2, r3
    767a:	2a05      	cmp	r2, #5
    767c:	d87d      	bhi.n	777a <check+0x6ba>
    767e:	0093      	lsls	r3, r2, #2
    7680:	4a6f      	ldr	r2, [pc, #444]	; (7840 <check+0x780>)
    7682:	58d3      	ldr	r3, [r2, r3]
    7684:	469f      	mov	pc, r3
							transmit_value[0] = L_TRANSMIT_LENGTH-1;
    7686:	ac02      	add	r4, sp, #8
    7688:	2302      	movs	r3, #2
    768a:	7023      	strb	r3, [r4, #0]
							transmit_value[1] = adc_start_read_result(LEFT_LIGHT);
    768c:	200b      	movs	r0, #11
    768e:	4d63      	ldr	r5, [pc, #396]	; (781c <check+0x75c>)
    7690:	47a8      	blx	r5
    7692:	7060      	strb	r0, [r4, #1]
							transmit_value[2] = adc_start_read_result(RIGHT_LIGHT);
    7694:	2003      	movs	r0, #3
    7696:	47a8      	blx	r5
    7698:	70a0      	strb	r0, [r4, #2]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, L_TRANSMIT_LENGTH);
    769a:	2203      	movs	r2, #3
    769c:	0021      	movs	r1, r4
    769e:	485d      	ldr	r0, [pc, #372]	; (7814 <check+0x754>)
    76a0:	4b5d      	ldr	r3, [pc, #372]	; (7818 <check+0x758>)
    76a2:	4798      	blx	r3
							break;
    76a4:	e61e      	b.n	72e4 <check+0x224>
							get_accel_data();
    76a6:	4b59      	ldr	r3, [pc, #356]	; (780c <check+0x74c>)
    76a8:	4798      	blx	r3
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    76aa:	4a59      	ldr	r2, [pc, #356]	; (7810 <check+0x750>)
    76ac:	7813      	ldrb	r3, [r2, #0]
    76ae:	7851      	ldrb	r1, [r2, #1]
    76b0:	430b      	orrs	r3, r1
    76b2:	7891      	ldrb	r1, [r2, #2]
    76b4:	430b      	orrs	r3, r1
    76b6:	78d2      	ldrb	r2, [r2, #3]
    76b8:	4313      	orrs	r3, r2
    76ba:	065b      	lsls	r3, r3, #25
    76bc:	d50c      	bpl.n	76d8 <check+0x618>
								get_accel_data();
    76be:	4e53      	ldr	r6, [pc, #332]	; (780c <check+0x74c>)
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    76c0:	4c53      	ldr	r4, [pc, #332]	; (7810 <check+0x750>)
    76c2:	2540      	movs	r5, #64	; 0x40
								get_accel_data();
    76c4:	47b0      	blx	r6
							while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
    76c6:	7823      	ldrb	r3, [r4, #0]
    76c8:	7862      	ldrb	r2, [r4, #1]
    76ca:	4313      	orrs	r3, r2
    76cc:	78a2      	ldrb	r2, [r4, #2]
    76ce:	4313      	orrs	r3, r2
    76d0:	78e2      	ldrb	r2, [r4, #3]
    76d2:	4313      	orrs	r3, r2
    76d4:	421d      	tst	r5, r3
    76d6:	d1f5      	bne.n	76c4 <check+0x604>
							transmit_value[0] = ACCL_TRANSMIT_LENGTH-1; // legacy reasons
    76d8:	a902      	add	r1, sp, #8
    76da:	2304      	movs	r3, #4
    76dc:	700b      	strb	r3, [r1, #0]
								transmit_value[i] = bufferReceive[i-1];
    76de:	4b4c      	ldr	r3, [pc, #304]	; (7810 <check+0x750>)
    76e0:	781a      	ldrb	r2, [r3, #0]
    76e2:	704a      	strb	r2, [r1, #1]
    76e4:	785a      	ldrb	r2, [r3, #1]
    76e6:	708a      	strb	r2, [r1, #2]
    76e8:	789a      	ldrb	r2, [r3, #2]
    76ea:	70ca      	strb	r2, [r1, #3]
    76ec:	78db      	ldrb	r3, [r3, #3]
    76ee:	710b      	strb	r3, [r1, #4]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, ACCL_TRANSMIT_LENGTH);
    76f0:	2205      	movs	r2, #5
    76f2:	4848      	ldr	r0, [pc, #288]	; (7814 <check+0x754>)
    76f4:	4b48      	ldr	r3, [pc, #288]	; (7818 <check+0x758>)
    76f6:	4798      	blx	r3
							break;
    76f8:	e5f4      	b.n	72e4 <check+0x224>
							transmit_value[0] = LF_TRANSMIT_LENGTH-1;
    76fa:	ac02      	add	r4, sp, #8
    76fc:	2301      	movs	r3, #1
    76fe:	7023      	strb	r3, [r4, #0]
							transmit_value[1] = adc_start_read_result(LINE_FOLLOWER);
    7700:	2002      	movs	r0, #2
    7702:	4b46      	ldr	r3, [pc, #280]	; (781c <check+0x75c>)
    7704:	4798      	blx	r3
    7706:	7060      	strb	r0, [r4, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, LF_TRANSMIT_LENGTH);
    7708:	2202      	movs	r2, #2
    770a:	0021      	movs	r1, r4
    770c:	4841      	ldr	r0, [pc, #260]	; (7814 <check+0x754>)
    770e:	4b42      	ldr	r3, [pc, #264]	; (7818 <check+0x758>)
    7710:	4798      	blx	r3
							break;
    7712:	e5e7      	b.n	72e4 <check+0x224>
							echo_distance = get_ultrasound_distance();
    7714:	4b42      	ldr	r3, [pc, #264]	; (7820 <check+0x760>)
    7716:	4798      	blx	r3
							transmit_value[0] = ULTRA_TRANSMIT_LENGTH-1;
    7718:	a902      	add	r1, sp, #8
    771a:	2302      	movs	r3, #2
    771c:	700b      	strb	r3, [r1, #0]
							transmit_value[2] = *echo_distance++;
    771e:	7803      	ldrb	r3, [r0, #0]
    7720:	b2db      	uxtb	r3, r3
    7722:	708b      	strb	r3, [r1, #2]
							transmit_value[1] = *echo_distance;
    7724:	7843      	ldrb	r3, [r0, #1]
    7726:	b2db      	uxtb	r3, r3
    7728:	704b      	strb	r3, [r1, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, ULTRA_TRANSMIT_LENGTH);
    772a:	2203      	movs	r2, #3
    772c:	4839      	ldr	r0, [pc, #228]	; (7814 <check+0x754>)
    772e:	4b3a      	ldr	r3, [pc, #232]	; (7818 <check+0x758>)
    7730:	4798      	blx	r3
							break;
    7732:	e5d7      	b.n	72e4 <check+0x224>
							transmit_value[0] = BATTERY_TRANSMIT_LENGTH-1;
    7734:	ac02      	add	r4, sp, #8
    7736:	2301      	movs	r3, #1
    7738:	7023      	strb	r3, [r4, #0]
							temp_batt_level = adc_start_read_result(BATT_MTR);
    773a:	200a      	movs	r0, #10
    773c:	4b37      	ldr	r3, [pc, #220]	; (781c <check+0x75c>)
    773e:	4798      	blx	r3
	return (port_base->OUT.reg & pin_mask);
    7740:	4a40      	ldr	r2, [pc, #256]	; (7844 <check+0x784>)
    7742:	6912      	ldr	r2, [r2, #16]
    7744:	0312      	lsls	r2, r2, #12
							temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    7746:	0fd2      	lsrs	r2, r2, #31
							temp_batt_level = temp_batt_level >> 1;
    7748:	0843      	lsrs	r3, r0, #1
							temp_batt_status = temp_batt_status << 7;
    774a:	01d2      	lsls	r2, r2, #7
							transmit_value[1] = temp_batt_status | temp_batt_level;
    774c:	4313      	orrs	r3, r2
    774e:	b2db      	uxtb	r3, r3
    7750:	7063      	strb	r3, [r4, #1]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, BATTERY_TRANSMIT_LENGTH);
    7752:	2202      	movs	r2, #2
    7754:	0021      	movs	r1, r4
    7756:	482f      	ldr	r0, [pc, #188]	; (7814 <check+0x754>)
    7758:	4b2f      	ldr	r3, [pc, #188]	; (7818 <check+0x758>)
    775a:	4798      	blx	r3
							break;
    775c:	e5c2      	b.n	72e4 <check+0x224>
							transmit_value[0] = VERSION_TRANSMIT_LENGTH-1;
    775e:	a902      	add	r1, sp, #8
    7760:	2304      	movs	r3, #4
    7762:	700b      	strb	r3, [r1, #0]
							transmit_value[1] = FW_VERSION_MSB;
    7764:	2200      	movs	r2, #0
    7766:	704a      	strb	r2, [r1, #1]
							transmit_value[2] = FW_VERSION_LSB;
    7768:	3b03      	subs	r3, #3
    776a:	708b      	strb	r3, [r1, #2]
							transmit_value[3] = HW_VERSION_MSB;
    776c:	70ca      	strb	r2, [r1, #3]
							transmit_value[4] = HW_VERSION_LSB;
    776e:	710b      	strb	r3, [r1, #4]
							usart_write_buffer_wait(&usart_ble_instance, transmit_value, VERSION_TRANSMIT_LENGTH);
    7770:	3205      	adds	r2, #5
    7772:	4828      	ldr	r0, [pc, #160]	; (7814 <check+0x754>)
    7774:	4b28      	ldr	r3, [pc, #160]	; (7818 <check+0x758>)
    7776:	4798      	blx	r3
							break;
    7778:	e5b4      	b.n	72e4 <check+0x224>
							head_ring_buffer = 0;
    777a:	2300      	movs	r3, #0
    777c:	4a1b      	ldr	r2, [pc, #108]	; (77ec <check+0x72c>)
    777e:	7013      	strb	r3, [r2, #0]
							tail_ring_buffer = 0;
    7780:	4a1b      	ldr	r2, [pc, #108]	; (77f0 <check+0x730>)
    7782:	7013      	strb	r3, [r2, #0]
							break;
    7784:	e5ae      	b.n	72e4 <check+0x224>
				transmit_value[0] = BATTERY_TRANSMIT_LENGTH-1;
    7786:	ac02      	add	r4, sp, #8
    7788:	2301      	movs	r3, #1
    778a:	7023      	strb	r3, [r4, #0]
				temp_batt_level = adc_start_read_result(BATT_MTR);
    778c:	200a      	movs	r0, #10
    778e:	4b23      	ldr	r3, [pc, #140]	; (781c <check+0x75c>)
    7790:	4798      	blx	r3
    7792:	4b2c      	ldr	r3, [pc, #176]	; (7844 <check+0x784>)
    7794:	691b      	ldr	r3, [r3, #16]
    7796:	031b      	lsls	r3, r3, #12
				temp_batt_status = port_pin_get_output_level(BATT_STATUS);
    7798:	0fdb      	lsrs	r3, r3, #31
				temp_batt_level = temp_batt_level >> 1;
    779a:	0840      	lsrs	r0, r0, #1
				temp_batt_status = temp_batt_status << 7;
    779c:	01db      	lsls	r3, r3, #7
				transmit_value[1] = temp_batt_status | temp_batt_level;
    779e:	4318      	orrs	r0, r3
    77a0:	b2c0      	uxtb	r0, r0
    77a2:	7060      	strb	r0, [r4, #1]
				usart_write_buffer_wait(&usart_ble_instance, transmit_value, BATTERY_TRANSMIT_LENGTH);
    77a4:	2202      	movs	r2, #2
    77a6:	0021      	movs	r1, r4
    77a8:	481a      	ldr	r0, [pc, #104]	; (7814 <check+0x754>)
    77aa:	4b1b      	ldr	r3, [pc, #108]	; (7818 <check+0x758>)
    77ac:	4798      	blx	r3
				break;
    77ae:	e599      	b.n	72e4 <check+0x224>
				head_ring_buffer = 0;
    77b0:	2300      	movs	r3, #0
    77b2:	4a0e      	ldr	r2, [pc, #56]	; (77ec <check+0x72c>)
    77b4:	7013      	strb	r3, [r2, #0]
				tail_ring_buffer = 0;
    77b6:	4a0e      	ldr	r2, [pc, #56]	; (77f0 <check+0x730>)
    77b8:	7013      	strb	r3, [r2, #0]
				break;
    77ba:	e593      	b.n	72e4 <check+0x224>
				transmit_value[9] = echo_current[0];
    77bc:	4b19      	ldr	r3, [pc, #100]	; (7824 <check+0x764>)
    77be:	781a      	ldrb	r2, [r3, #0]
    77c0:	b2d2      	uxtb	r2, r2
    77c2:	a902      	add	r1, sp, #8
    77c4:	724a      	strb	r2, [r1, #9]
				transmit_value[8] = echo_current[1];
    77c6:	785a      	ldrb	r2, [r3, #1]
    77c8:	b2d2      	uxtb	r2, r2
    77ca:	720a      	strb	r2, [r1, #8]
				echo_prev[0]	  = echo_current[0];
    77cc:	781a      	ldrb	r2, [r3, #0]
    77ce:	b2d2      	uxtb	r2, r2
    77d0:	4916      	ldr	r1, [pc, #88]	; (782c <check+0x76c>)
    77d2:	700a      	strb	r2, [r1, #0]
				echo_prev[1]	  = echo_current[1];
    77d4:	785b      	ldrb	r3, [r3, #1]
    77d6:	b2db      	uxtb	r3, r3
    77d8:	704b      	strb	r3, [r1, #1]
    77da:	e5ee      	b.n	73ba <check+0x2fa>
    77dc:	200003e3 	.word	0x200003e3
    77e0:	200003e2 	.word	0x200003e2
    77e4:	0000706d 	.word	0x0000706d
    77e8:	200003c0 	.word	0x200003c0
    77ec:	200003ca 	.word	0x200003ca
    77f0:	200003e4 	.word	0x200003e4
    77f4:	200003b8 	.word	0x200003b8
    77f8:	00001145 	.word	0x00001145
    77fc:	00001159 	.word	0x00001159
    7800:	00001ac1 	.word	0x00001ac1
    7804:	00001b65 	.word	0x00001b65
    7808:	00001c09 	.word	0x00001c09
    780c:	00001951 	.word	0x00001951
    7810:	200005a8 	.word	0x200005a8
    7814:	20000574 	.word	0x20000574
    7818:	000007e9 	.word	0x000007e9
    781c:	00006ca9 	.word	0x00006ca9
    7820:	00001721 	.word	0x00001721
    7824:	200003c4 	.word	0x200003c4
    7828:	200003e1 	.word	0x200003e1
    782c:	200003c8 	.word	0x200003c8
    7830:	200003bc 	.word	0x200003bc
    7834:	200003ba 	.word	0x200003ba
    7838:	200003be 	.word	0x200003be
    783c:	000021c5 	.word	0x000021c5
    7840:	0000c1a0 	.word	0x0000c1a0
    7844:	41004400 	.word	0x41004400

00007848 <main>:
int main(void)
{
    7848:	b570      	push	{r4, r5, r6, lr}
	static uint16_t i =0;
	uint8_t received_value[MAX_REC_BYTE];
	
	configure_power_enable_pins();
    784a:	4b24      	ldr	r3, [pc, #144]	; (78dc <main+0x94>)
    784c:	4798      	blx	r3
	enable_power_ic();
    784e:	4b24      	ldr	r3, [pc, #144]	; (78e0 <main+0x98>)
    7850:	4798      	blx	r3
	
	board_init(); //Predefined
    7852:	4b24      	ldr	r3, [pc, #144]	; (78e4 <main+0x9c>)
    7854:	4798      	blx	r3
	system_init(); //Predefined
    7856:	4b24      	ldr	r3, [pc, #144]	; (78e8 <main+0xa0>)
    7858:	4798      	blx	r3
	
	irq_initialize_vectors();
	cpu_irq_enable();
    785a:	4e24      	ldr	r6, [pc, #144]	; (78ec <main+0xa4>)
    785c:	2501      	movs	r5, #1
    785e:	7035      	strb	r5, [r6, #0]
    7860:	f3bf 8f5f 	dmb	sy
    7864:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    7866:	4b22      	ldr	r3, [pc, #136]	; (78f0 <main+0xa8>)
    7868:	2400      	movs	r4, #0
    786a:	701c      	strb	r4, [r3, #0]
    786c:	705c      	strb	r4, [r3, #1]
    786e:	709c      	strb	r4, [r3, #2]
    7870:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    7872:	711d      	strb	r5, [r3, #4]
	//Initialize the sleep manager
	sleepmgr_init();

	delay_init();
    7874:	4b1f      	ldr	r3, [pc, #124]	; (78f4 <main+0xac>)
    7876:	4798      	blx	r3
	config_test_pins();
    7878:	4b1f      	ldr	r3, [pc, #124]	; (78f8 <main+0xb0>)
    787a:	4798      	blx	r3

	ui_init();
    787c:	4b1f      	ldr	r3, [pc, #124]	; (78fc <main+0xb4>)
    787e:	4798      	blx	r3
	ui_powerdown();
    7880:	4b1f      	ldr	r3, [pc, #124]	; (7900 <main+0xb8>)
    7882:	4798      	blx	r3
	
	configure_rgb_led();
    7884:	4b1f      	ldr	r3, [pc, #124]	; (7904 <main+0xbc>)
    7886:	4798      	blx	r3
	configure_tc_callbacks();
    7888:	4b1f      	ldr	r3, [pc, #124]	; (7908 <main+0xc0>)
    788a:	4798      	blx	r3
	
	configure_adc();
    788c:	4b1f      	ldr	r3, [pc, #124]	; (790c <main+0xc4>)
    788e:	4798      	blx	r3
	config_motors();
    7890:	4b1f      	ldr	r3, [pc, #124]	; (7910 <main+0xc8>)
    7892:	4798      	blx	r3
	
	configure_batt_status();
    7894:	4b1f      	ldr	r3, [pc, #124]	; (7914 <main+0xcc>)
    7896:	4798      	blx	r3
	check_batterylevel_initial();
    7898:	4b1f      	ldr	r3, [pc, #124]	; (7918 <main+0xd0>)
    789a:	4798      	blx	r3
//configure_dac();
//configure_dac_channel();
//config_ir();
//configure_tcc_callbacks();

	configure_buzzer();	
    789c:	4b1f      	ldr	r3, [pc, #124]	; (791c <main+0xd4>)
    789e:	4798      	blx	r3
	config_accel(); // Need to do this before USB to get I2C working while allowing USB to use the other two pins of SERCOM3
    78a0:	4b1f      	ldr	r3, [pc, #124]	; (7920 <main+0xd8>)
    78a2:	4798      	blx	r3

	configure_ultrasound();
    78a4:	4b1f      	ldr	r3, [pc, #124]	; (7924 <main+0xdc>)
    78a6:	4798      	blx	r3
	setup_ultrasound();
    78a8:	4b1f      	ldr	r3, [pc, #124]	; (7928 <main+0xe0>)
    78aa:	4798      	blx	r3
//configure_tc3();
	
	configure_encoders();
    78ac:	4b1f      	ldr	r3, [pc, #124]	; (792c <main+0xe4>)
    78ae:	4798      	blx	r3
	//while(1)
	//{
		//read_encoders();
	//}
	calc_baud = (uint8_t)(system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + 1)/10000000);
    78b0:	2015      	movs	r0, #21
    78b2:	4b1f      	ldr	r3, [pc, #124]	; (7930 <main+0xe8>)
    78b4:	4798      	blx	r3
    78b6:	491f      	ldr	r1, [pc, #124]	; (7934 <main+0xec>)
    78b8:	4b1f      	ldr	r3, [pc, #124]	; (7938 <main+0xf0>)
    78ba:	4798      	blx	r3
    78bc:	4b1f      	ldr	r3, [pc, #124]	; (793c <main+0xf4>)
    78be:	7018      	strb	r0, [r3, #0]
	// Start USB stack to authorize VBus monitoring
	serial_ble_configure();
    78c0:	4b1f      	ldr	r3, [pc, #124]	; (7940 <main+0xf8>)
    78c2:	4798      	blx	r3
	
	udc_start();
    78c4:	4b1f      	ldr	r3, [pc, #124]	; (7944 <main+0xfc>)
    78c6:	4798      	blx	r3
	cpu_irq_enable();
    78c8:	7035      	strb	r5, [r6, #0]
    78ca:	f3bf 8f5f 	dmb	sy
    78ce:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	count_broadcast = 0;
    78d0:	4b1d      	ldr	r3, [pc, #116]	; (7948 <main+0x100>)
    78d2:	701c      	strb	r4, [r3, #0]
	
	while (true) 
	{
		check();
    78d4:	4c1d      	ldr	r4, [pc, #116]	; (794c <main+0x104>)
    78d6:	47a0      	blx	r4
    78d8:	e7fd      	b.n	78d6 <main+0x8e>
    78da:	46c0      	nop			; (mov r8, r8)
    78dc:	000013f9 	.word	0x000013f9
    78e0:	000013e5 	.word	0x000013e5
    78e4:	00000b91 	.word	0x00000b91
    78e8:	0000455d 	.word	0x0000455d
    78ec:	20000122 	.word	0x20000122
    78f0:	20000630 	.word	0x20000630
    78f4:	0000198d 	.word	0x0000198d
    78f8:	0000704d 	.word	0x0000704d
    78fc:	000022e1 	.word	0x000022e1
    7900:	000022e3 	.word	0x000022e3
    7904:	000012cd 	.word	0x000012cd
    7908:	00001361 	.word	0x00001361
    790c:	00006c41 	.word	0x00006c41
    7910:	00001a45 	.word	0x00001a45
    7914:	00000b85 	.word	0x00000b85
    7918:	00000ab5 	.word	0x00000ab5
    791c:	000022c5 	.word	0x000022c5
    7920:	00001815 	.word	0x00001815
    7924:	000017c1 	.word	0x000017c1
    7928:	000016e9 	.word	0x000016e9
    792c:	00000ee9 	.word	0x00000ee9
    7930:	00004451 	.word	0x00004451
    7934:	00989680 	.word	0x00989680
    7938:	00008d29 	.word	0x00008d29
    793c:	200005d5 	.word	0x200005d5
    7940:	00001555 	.word	0x00001555
    7944:	00002905 	.word	0x00002905
    7948:	200003c0 	.word	0x200003c0
    794c:	000070c1 	.word	0x000070c1

00007950 <main_suspend_action>:
	
	}
}

void main_suspend_action(void)
{
    7950:	b510      	push	{r4, lr}
	ui_powerdown();
    7952:	4b01      	ldr	r3, [pc, #4]	; (7958 <main_suspend_action+0x8>)
    7954:	4798      	blx	r3
}
    7956:	bd10      	pop	{r4, pc}
    7958:	000022e3 	.word	0x000022e3

0000795c <main_resume_action>:

void main_resume_action(void)
{
    795c:	b510      	push	{r4, lr}
	ui_wakeup();
    795e:	4b01      	ldr	r3, [pc, #4]	; (7964 <main_resume_action+0x8>)
    7960:	4798      	blx	r3
}
    7962:	bd10      	pop	{r4, pc}
    7964:	000022e9 	.word	0x000022e9

00007968 <main_sof_action>:

void main_sof_action(void)
{
    7968:	b510      	push	{r4, lr}
	if (!main_b_generic_enable)
    796a:	4b05      	ldr	r3, [pc, #20]	; (7980 <main_sof_action+0x18>)
    796c:	781b      	ldrb	r3, [r3, #0]
    796e:	2b00      	cmp	r3, #0
    7970:	d100      	bne.n	7974 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    7972:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    7974:	4b03      	ldr	r3, [pc, #12]	; (7984 <main_sof_action+0x1c>)
    7976:	4798      	blx	r3
    7978:	4b03      	ldr	r3, [pc, #12]	; (7988 <main_sof_action+0x20>)
    797a:	4798      	blx	r3
    797c:	e7f9      	b.n	7972 <main_sof_action+0xa>
    797e:	46c0      	nop			; (mov r8, r8)
    7980:	200003cb 	.word	0x200003cb
    7984:	000056c1 	.word	0x000056c1
    7988:	000022eb 	.word	0x000022eb

0000798c <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    798c:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    798e:	4b01      	ldr	r3, [pc, #4]	; (7994 <main_remotewakeup_enable+0x8>)
    7990:	4798      	blx	r3
}
    7992:	bd10      	pop	{r4, pc}
    7994:	000022e5 	.word	0x000022e5

00007998 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    7998:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    799a:	4b01      	ldr	r3, [pc, #4]	; (79a0 <main_remotewakeup_disable+0x8>)
    799c:	4798      	blx	r3
}
    799e:	bd10      	pop	{r4, pc}
    79a0:	000022e7 	.word	0x000022e7

000079a4 <main_generic_enable>:

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    79a4:	2201      	movs	r2, #1
    79a6:	4b02      	ldr	r3, [pc, #8]	; (79b0 <main_generic_enable+0xc>)
    79a8:	701a      	strb	r2, [r3, #0]
	return true;
}
    79aa:	2001      	movs	r0, #1
    79ac:	4770      	bx	lr
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	200003cb 	.word	0x200003cb

000079b4 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    79b4:	2200      	movs	r2, #0
    79b6:	4b01      	ldr	r3, [pc, #4]	; (79bc <main_generic_disable+0x8>)
    79b8:	701a      	strb	r2, [r3, #0]
}
    79ba:	4770      	bx	lr
    79bc:	200003cb 	.word	0x200003cb

000079c0 <main_hid_set_feature>:
			&& report[2] == 0xAA && report[3] == 0x55) {
		// Disconnect USB Device
		udc_stop();
		ui_powerdown();
	}*/
}
    79c0:	4770      	bx	lr
	...

000079c4 <sin>:
    79c4:	b530      	push	{r4, r5, lr}
    79c6:	4a21      	ldr	r2, [pc, #132]	; (7a4c <sin+0x88>)
    79c8:	004b      	lsls	r3, r1, #1
    79ca:	b087      	sub	sp, #28
    79cc:	085b      	lsrs	r3, r3, #1
    79ce:	4293      	cmp	r3, r2
    79d0:	dd1e      	ble.n	7a10 <sin+0x4c>
    79d2:	4a1f      	ldr	r2, [pc, #124]	; (7a50 <sin+0x8c>)
    79d4:	4293      	cmp	r3, r2
    79d6:	dd05      	ble.n	79e4 <sin+0x20>
    79d8:	0002      	movs	r2, r0
    79da:	000b      	movs	r3, r1
    79dc:	f003 fc06 	bl	b1ec <__aeabi_dsub>
    79e0:	b007      	add	sp, #28
    79e2:	bd30      	pop	{r4, r5, pc}
    79e4:	aa02      	add	r2, sp, #8
    79e6:	f000 f835 	bl	7a54 <__ieee754_rem_pio2>
    79ea:	2303      	movs	r3, #3
    79ec:	4018      	ands	r0, r3
    79ee:	9a04      	ldr	r2, [sp, #16]
    79f0:	9b05      	ldr	r3, [sp, #20]
    79f2:	2801      	cmp	r0, #1
    79f4:	d01e      	beq.n	7a34 <sin+0x70>
    79f6:	2802      	cmp	r0, #2
    79f8:	d011      	beq.n	7a1e <sin+0x5a>
    79fa:	2800      	cmp	r0, #0
    79fc:	d01f      	beq.n	7a3e <sin+0x7a>
    79fe:	9802      	ldr	r0, [sp, #8]
    7a00:	9903      	ldr	r1, [sp, #12]
    7a02:	f000 fa3f 	bl	7e84 <__kernel_cos>
    7a06:	2380      	movs	r3, #128	; 0x80
    7a08:	061b      	lsls	r3, r3, #24
    7a0a:	469c      	mov	ip, r3
    7a0c:	4461      	add	r1, ip
    7a0e:	e7e7      	b.n	79e0 <sin+0x1c>
    7a10:	2300      	movs	r3, #0
    7a12:	2200      	movs	r2, #0
    7a14:	9300      	str	r3, [sp, #0]
    7a16:	2300      	movs	r3, #0
    7a18:	f000 ffca 	bl	89b0 <__kernel_sin>
    7a1c:	e7e0      	b.n	79e0 <sin+0x1c>
    7a1e:	2401      	movs	r4, #1
    7a20:	9802      	ldr	r0, [sp, #8]
    7a22:	9903      	ldr	r1, [sp, #12]
    7a24:	9400      	str	r4, [sp, #0]
    7a26:	f000 ffc3 	bl	89b0 <__kernel_sin>
    7a2a:	2380      	movs	r3, #128	; 0x80
    7a2c:	061b      	lsls	r3, r3, #24
    7a2e:	469c      	mov	ip, r3
    7a30:	4461      	add	r1, ip
    7a32:	e7d5      	b.n	79e0 <sin+0x1c>
    7a34:	9802      	ldr	r0, [sp, #8]
    7a36:	9903      	ldr	r1, [sp, #12]
    7a38:	f000 fa24 	bl	7e84 <__kernel_cos>
    7a3c:	e7d0      	b.n	79e0 <sin+0x1c>
    7a3e:	2401      	movs	r4, #1
    7a40:	9802      	ldr	r0, [sp, #8]
    7a42:	9903      	ldr	r1, [sp, #12]
    7a44:	9400      	str	r4, [sp, #0]
    7a46:	f000 ffb3 	bl	89b0 <__kernel_sin>
    7a4a:	e7c9      	b.n	79e0 <sin+0x1c>
    7a4c:	3fe921fb 	.word	0x3fe921fb
    7a50:	7fefffff 	.word	0x7fefffff

00007a54 <__ieee754_rem_pio2>:
    7a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a56:	464e      	mov	r6, r9
    7a58:	4645      	mov	r5, r8
    7a5a:	46de      	mov	lr, fp
    7a5c:	4657      	mov	r7, sl
    7a5e:	b5e0      	push	{r5, r6, r7, lr}
    7a60:	4bd4      	ldr	r3, [pc, #848]	; (7db4 <__ieee754_rem_pio2+0x360>)
    7a62:	004c      	lsls	r4, r1, #1
    7a64:	b08f      	sub	sp, #60	; 0x3c
    7a66:	4690      	mov	r8, r2
    7a68:	4689      	mov	r9, r1
    7a6a:	0864      	lsrs	r4, r4, #1
    7a6c:	429c      	cmp	r4, r3
    7a6e:	dc00      	bgt.n	7a72 <__ieee754_rem_pio2+0x1e>
    7a70:	e087      	b.n	7b82 <__ieee754_rem_pio2+0x12e>
    7a72:	4bd1      	ldr	r3, [pc, #836]	; (7db8 <__ieee754_rem_pio2+0x364>)
    7a74:	429c      	cmp	r4, r3
    7a76:	dc22      	bgt.n	7abe <__ieee754_rem_pio2+0x6a>
    7a78:	4ad0      	ldr	r2, [pc, #832]	; (7dbc <__ieee754_rem_pio2+0x368>)
    7a7a:	2900      	cmp	r1, #0
    7a7c:	dc00      	bgt.n	7a80 <__ieee754_rem_pio2+0x2c>
    7a7e:	e1bf      	b.n	7e00 <__ieee754_rem_pio2+0x3ac>
    7a80:	4bcf      	ldr	r3, [pc, #828]	; (7dc0 <__ieee754_rem_pio2+0x36c>)
    7a82:	f003 fbb3 	bl	b1ec <__aeabi_dsub>
    7a86:	4bce      	ldr	r3, [pc, #824]	; (7dc0 <__ieee754_rem_pio2+0x36c>)
    7a88:	0006      	movs	r6, r0
    7a8a:	000f      	movs	r7, r1
    7a8c:	429c      	cmp	r4, r3
    7a8e:	d100      	bne.n	7a92 <__ieee754_rem_pio2+0x3e>
    7a90:	e094      	b.n	7bbc <__ieee754_rem_pio2+0x168>
    7a92:	4acc      	ldr	r2, [pc, #816]	; (7dc4 <__ieee754_rem_pio2+0x370>)
    7a94:	4bcc      	ldr	r3, [pc, #816]	; (7dc8 <__ieee754_rem_pio2+0x374>)
    7a96:	f003 fba9 	bl	b1ec <__aeabi_dsub>
    7a9a:	0002      	movs	r2, r0
    7a9c:	000b      	movs	r3, r1
    7a9e:	4641      	mov	r1, r8
    7aa0:	0030      	movs	r0, r6
    7aa2:	600a      	str	r2, [r1, #0]
    7aa4:	604b      	str	r3, [r1, #4]
    7aa6:	0039      	movs	r1, r7
    7aa8:	f003 fba0 	bl	b1ec <__aeabi_dsub>
    7aac:	4bc6      	ldr	r3, [pc, #792]	; (7dc8 <__ieee754_rem_pio2+0x374>)
    7aae:	4ac5      	ldr	r2, [pc, #788]	; (7dc4 <__ieee754_rem_pio2+0x370>)
    7ab0:	f003 fb9c 	bl	b1ec <__aeabi_dsub>
    7ab4:	4643      	mov	r3, r8
    7ab6:	2501      	movs	r5, #1
    7ab8:	6098      	str	r0, [r3, #8]
    7aba:	60d9      	str	r1, [r3, #12]
    7abc:	e06b      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7abe:	4bc3      	ldr	r3, [pc, #780]	; (7dcc <__ieee754_rem_pio2+0x378>)
    7ac0:	429c      	cmp	r4, r3
    7ac2:	dc00      	bgt.n	7ac6 <__ieee754_rem_pio2+0x72>
    7ac4:	e097      	b.n	7bf6 <__ieee754_rem_pio2+0x1a2>
    7ac6:	4bc2      	ldr	r3, [pc, #776]	; (7dd0 <__ieee754_rem_pio2+0x37c>)
    7ac8:	429c      	cmp	r4, r3
    7aca:	dc6c      	bgt.n	7ba6 <__ieee754_rem_pio2+0x152>
    7acc:	4ac1      	ldr	r2, [pc, #772]	; (7dd4 <__ieee754_rem_pio2+0x380>)
    7ace:	1523      	asrs	r3, r4, #20
    7ad0:	4692      	mov	sl, r2
    7ad2:	449a      	add	sl, r3
    7ad4:	4651      	mov	r1, sl
    7ad6:	0509      	lsls	r1, r1, #20
    7ad8:	1a63      	subs	r3, r4, r1
    7ada:	0019      	movs	r1, r3
    7adc:	001d      	movs	r5, r3
    7ade:	0004      	movs	r4, r0
    7ae0:	f003 fe9a 	bl	b818 <__aeabi_d2iz>
    7ae4:	f003 fecc 	bl	b880 <__aeabi_i2d>
    7ae8:	0002      	movs	r2, r0
    7aea:	000b      	movs	r3, r1
    7aec:	0020      	movs	r0, r4
    7aee:	0029      	movs	r1, r5
    7af0:	9208      	str	r2, [sp, #32]
    7af2:	9309      	str	r3, [sp, #36]	; 0x24
    7af4:	f003 fb7a 	bl	b1ec <__aeabi_dsub>
    7af8:	2200      	movs	r2, #0
    7afa:	4bb7      	ldr	r3, [pc, #732]	; (7dd8 <__ieee754_rem_pio2+0x384>)
    7afc:	f003 f8f6 	bl	acec <__aeabi_dmul>
    7b00:	000f      	movs	r7, r1
    7b02:	0006      	movs	r6, r0
    7b04:	f003 fe88 	bl	b818 <__aeabi_d2iz>
    7b08:	f003 feba 	bl	b880 <__aeabi_i2d>
    7b0c:	0004      	movs	r4, r0
    7b0e:	000d      	movs	r5, r1
    7b10:	0002      	movs	r2, r0
    7b12:	000b      	movs	r3, r1
    7b14:	0030      	movs	r0, r6
    7b16:	0039      	movs	r1, r7
    7b18:	940a      	str	r4, [sp, #40]	; 0x28
    7b1a:	950b      	str	r5, [sp, #44]	; 0x2c
    7b1c:	f003 fb66 	bl	b1ec <__aeabi_dsub>
    7b20:	2200      	movs	r2, #0
    7b22:	4bad      	ldr	r3, [pc, #692]	; (7dd8 <__ieee754_rem_pio2+0x384>)
    7b24:	f003 f8e2 	bl	acec <__aeabi_dmul>
    7b28:	2200      	movs	r2, #0
    7b2a:	2300      	movs	r3, #0
    7b2c:	900c      	str	r0, [sp, #48]	; 0x30
    7b2e:	910d      	str	r1, [sp, #52]	; 0x34
    7b30:	f001 fa80 	bl	9034 <__aeabi_dcmpeq>
    7b34:	2800      	cmp	r0, #0
    7b36:	d100      	bne.n	7b3a <__ieee754_rem_pio2+0xe6>
    7b38:	e181      	b.n	7e3e <__ieee754_rem_pio2+0x3ea>
    7b3a:	2300      	movs	r3, #0
    7b3c:	2200      	movs	r2, #0
    7b3e:	0020      	movs	r0, r4
    7b40:	0029      	movs	r1, r5
    7b42:	f001 fa77 	bl	9034 <__aeabi_dcmpeq>
    7b46:	4243      	negs	r3, r0
    7b48:	4143      	adcs	r3, r0
    7b4a:	3301      	adds	r3, #1
    7b4c:	4aa3      	ldr	r2, [pc, #652]	; (7ddc <__ieee754_rem_pio2+0x388>)
    7b4e:	4641      	mov	r1, r8
    7b50:	9201      	str	r2, [sp, #4]
    7b52:	2202      	movs	r2, #2
    7b54:	a808      	add	r0, sp, #32
    7b56:	9200      	str	r2, [sp, #0]
    7b58:	4652      	mov	r2, sl
    7b5a:	f000 faad 	bl	80b8 <__kernel_rem_pio2>
    7b5e:	464b      	mov	r3, r9
    7b60:	0005      	movs	r5, r0
    7b62:	2b00      	cmp	r3, #0
    7b64:	da17      	bge.n	7b96 <__ieee754_rem_pio2+0x142>
    7b66:	2280      	movs	r2, #128	; 0x80
    7b68:	4643      	mov	r3, r8
    7b6a:	0612      	lsls	r2, r2, #24
    7b6c:	4694      	mov	ip, r2
    7b6e:	4642      	mov	r2, r8
    7b70:	685b      	ldr	r3, [r3, #4]
    7b72:	4245      	negs	r5, r0
    7b74:	4463      	add	r3, ip
    7b76:	6053      	str	r3, [r2, #4]
    7b78:	68d3      	ldr	r3, [r2, #12]
    7b7a:	4642      	mov	r2, r8
    7b7c:	4463      	add	r3, ip
    7b7e:	60d3      	str	r3, [r2, #12]
    7b80:	e009      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7b82:	000b      	movs	r3, r1
    7b84:	0002      	movs	r2, r0
    7b86:	4641      	mov	r1, r8
    7b88:	600a      	str	r2, [r1, #0]
    7b8a:	604b      	str	r3, [r1, #4]
    7b8c:	2200      	movs	r2, #0
    7b8e:	2300      	movs	r3, #0
    7b90:	2500      	movs	r5, #0
    7b92:	608a      	str	r2, [r1, #8]
    7b94:	60cb      	str	r3, [r1, #12]
    7b96:	0028      	movs	r0, r5
    7b98:	b00f      	add	sp, #60	; 0x3c
    7b9a:	bc3c      	pop	{r2, r3, r4, r5}
    7b9c:	4690      	mov	r8, r2
    7b9e:	4699      	mov	r9, r3
    7ba0:	46a2      	mov	sl, r4
    7ba2:	46ab      	mov	fp, r5
    7ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ba6:	000b      	movs	r3, r1
    7ba8:	0002      	movs	r2, r0
    7baa:	f003 fb1f 	bl	b1ec <__aeabi_dsub>
    7bae:	4643      	mov	r3, r8
    7bb0:	2500      	movs	r5, #0
    7bb2:	6098      	str	r0, [r3, #8]
    7bb4:	60d9      	str	r1, [r3, #12]
    7bb6:	6018      	str	r0, [r3, #0]
    7bb8:	6059      	str	r1, [r3, #4]
    7bba:	e7ec      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7bbc:	22d3      	movs	r2, #211	; 0xd3
    7bbe:	4b82      	ldr	r3, [pc, #520]	; (7dc8 <__ieee754_rem_pio2+0x374>)
    7bc0:	0552      	lsls	r2, r2, #21
    7bc2:	f003 fb13 	bl	b1ec <__aeabi_dsub>
    7bc6:	4a86      	ldr	r2, [pc, #536]	; (7de0 <__ieee754_rem_pio2+0x38c>)
    7bc8:	4b86      	ldr	r3, [pc, #536]	; (7de4 <__ieee754_rem_pio2+0x390>)
    7bca:	000d      	movs	r5, r1
    7bcc:	0004      	movs	r4, r0
    7bce:	f003 fb0d 	bl	b1ec <__aeabi_dsub>
    7bd2:	0002      	movs	r2, r0
    7bd4:	000b      	movs	r3, r1
    7bd6:	4641      	mov	r1, r8
    7bd8:	0020      	movs	r0, r4
    7bda:	600a      	str	r2, [r1, #0]
    7bdc:	604b      	str	r3, [r1, #4]
    7bde:	0029      	movs	r1, r5
    7be0:	f003 fb04 	bl	b1ec <__aeabi_dsub>
    7be4:	4b7f      	ldr	r3, [pc, #508]	; (7de4 <__ieee754_rem_pio2+0x390>)
    7be6:	4a7e      	ldr	r2, [pc, #504]	; (7de0 <__ieee754_rem_pio2+0x38c>)
    7be8:	f003 fb00 	bl	b1ec <__aeabi_dsub>
    7bec:	4643      	mov	r3, r8
    7bee:	2501      	movs	r5, #1
    7bf0:	6098      	str	r0, [r3, #8]
    7bf2:	60d9      	str	r1, [r3, #12]
    7bf4:	e7cf      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7bf6:	f000 ff8b 	bl	8b10 <fabs>
    7bfa:	4a7b      	ldr	r2, [pc, #492]	; (7de8 <__ieee754_rem_pio2+0x394>)
    7bfc:	4b7b      	ldr	r3, [pc, #492]	; (7dec <__ieee754_rem_pio2+0x398>)
    7bfe:	0006      	movs	r6, r0
    7c00:	000f      	movs	r7, r1
    7c02:	f003 f873 	bl	acec <__aeabi_dmul>
    7c06:	2200      	movs	r2, #0
    7c08:	4b79      	ldr	r3, [pc, #484]	; (7df0 <__ieee754_rem_pio2+0x39c>)
    7c0a:	f002 f92b 	bl	9e64 <__aeabi_dadd>
    7c0e:	f003 fe03 	bl	b818 <__aeabi_d2iz>
    7c12:	0005      	movs	r5, r0
    7c14:	f003 fe34 	bl	b880 <__aeabi_i2d>
    7c18:	4a68      	ldr	r2, [pc, #416]	; (7dbc <__ieee754_rem_pio2+0x368>)
    7c1a:	4b69      	ldr	r3, [pc, #420]	; (7dc0 <__ieee754_rem_pio2+0x36c>)
    7c1c:	9004      	str	r0, [sp, #16]
    7c1e:	9105      	str	r1, [sp, #20]
    7c20:	f003 f864 	bl	acec <__aeabi_dmul>
    7c24:	0002      	movs	r2, r0
    7c26:	000b      	movs	r3, r1
    7c28:	0030      	movs	r0, r6
    7c2a:	0039      	movs	r1, r7
    7c2c:	f003 fade 	bl	b1ec <__aeabi_dsub>
    7c30:	4a64      	ldr	r2, [pc, #400]	; (7dc4 <__ieee754_rem_pio2+0x370>)
    7c32:	0006      	movs	r6, r0
    7c34:	000f      	movs	r7, r1
    7c36:	9804      	ldr	r0, [sp, #16]
    7c38:	9905      	ldr	r1, [sp, #20]
    7c3a:	4b63      	ldr	r3, [pc, #396]	; (7dc8 <__ieee754_rem_pio2+0x374>)
    7c3c:	f003 f856 	bl	acec <__aeabi_dmul>
    7c40:	9002      	str	r0, [sp, #8]
    7c42:	9103      	str	r1, [sp, #12]
    7c44:	2d1f      	cmp	r5, #31
    7c46:	dc33      	bgt.n	7cb0 <__ieee754_rem_pio2+0x25c>
    7c48:	1e6b      	subs	r3, r5, #1
    7c4a:	4a6a      	ldr	r2, [pc, #424]	; (7df4 <__ieee754_rem_pio2+0x3a0>)
    7c4c:	009b      	lsls	r3, r3, #2
    7c4e:	589b      	ldr	r3, [r3, r2]
    7c50:	429c      	cmp	r4, r3
    7c52:	d02d      	beq.n	7cb0 <__ieee754_rem_pio2+0x25c>
    7c54:	0002      	movs	r2, r0
    7c56:	000b      	movs	r3, r1
    7c58:	0030      	movs	r0, r6
    7c5a:	0039      	movs	r1, r7
    7c5c:	f003 fac6 	bl	b1ec <__aeabi_dsub>
    7c60:	000b      	movs	r3, r1
    7c62:	468a      	mov	sl, r1
    7c64:	0002      	movs	r2, r0
    7c66:	4641      	mov	r1, r8
    7c68:	4683      	mov	fp, r0
    7c6a:	600a      	str	r2, [r1, #0]
    7c6c:	604b      	str	r3, [r1, #4]
    7c6e:	465a      	mov	r2, fp
    7c70:	4653      	mov	r3, sl
    7c72:	0030      	movs	r0, r6
    7c74:	0039      	movs	r1, r7
    7c76:	f003 fab9 	bl	b1ec <__aeabi_dsub>
    7c7a:	9a02      	ldr	r2, [sp, #8]
    7c7c:	9b03      	ldr	r3, [sp, #12]
    7c7e:	f003 fab5 	bl	b1ec <__aeabi_dsub>
    7c82:	4644      	mov	r4, r8
    7c84:	000b      	movs	r3, r1
    7c86:	0002      	movs	r2, r0
    7c88:	60a2      	str	r2, [r4, #8]
    7c8a:	60e3      	str	r3, [r4, #12]
    7c8c:	464b      	mov	r3, r9
    7c8e:	2b00      	cmp	r3, #0
    7c90:	db00      	blt.n	7c94 <__ieee754_rem_pio2+0x240>
    7c92:	e780      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7c94:	465b      	mov	r3, fp
    7c96:	6023      	str	r3, [r4, #0]
    7c98:	2380      	movs	r3, #128	; 0x80
    7c9a:	061b      	lsls	r3, r3, #24
    7c9c:	4453      	add	r3, sl
    7c9e:	6063      	str	r3, [r4, #4]
    7ca0:	2380      	movs	r3, #128	; 0x80
    7ca2:	061b      	lsls	r3, r3, #24
    7ca4:	469c      	mov	ip, r3
    7ca6:	4461      	add	r1, ip
    7ca8:	60a0      	str	r0, [r4, #8]
    7caa:	60e1      	str	r1, [r4, #12]
    7cac:	426d      	negs	r5, r5
    7cae:	e772      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7cb0:	9a02      	ldr	r2, [sp, #8]
    7cb2:	9b03      	ldr	r3, [sp, #12]
    7cb4:	0030      	movs	r0, r6
    7cb6:	0039      	movs	r1, r7
    7cb8:	f003 fa98 	bl	b1ec <__aeabi_dsub>
    7cbc:	000b      	movs	r3, r1
    7cbe:	468a      	mov	sl, r1
    7cc0:	0002      	movs	r2, r0
    7cc2:	4641      	mov	r1, r8
    7cc4:	600a      	str	r2, [r1, #0]
    7cc6:	604b      	str	r3, [r1, #4]
    7cc8:	4653      	mov	r3, sl
    7cca:	005b      	lsls	r3, r3, #1
    7ccc:	1524      	asrs	r4, r4, #20
    7cce:	0d5b      	lsrs	r3, r3, #21
    7cd0:	4683      	mov	fp, r0
    7cd2:	1ae3      	subs	r3, r4, r3
    7cd4:	2b10      	cmp	r3, #16
    7cd6:	ddca      	ble.n	7c6e <__ieee754_rem_pio2+0x21a>
    7cd8:	9804      	ldr	r0, [sp, #16]
    7cda:	9905      	ldr	r1, [sp, #20]
    7cdc:	22d3      	movs	r2, #211	; 0xd3
    7cde:	4b3a      	ldr	r3, [pc, #232]	; (7dc8 <__ieee754_rem_pio2+0x374>)
    7ce0:	0552      	lsls	r2, r2, #21
    7ce2:	f003 f803 	bl	acec <__aeabi_dmul>
    7ce6:	9002      	str	r0, [sp, #8]
    7ce8:	9103      	str	r1, [sp, #12]
    7cea:	0002      	movs	r2, r0
    7cec:	000b      	movs	r3, r1
    7cee:	0030      	movs	r0, r6
    7cf0:	0039      	movs	r1, r7
    7cf2:	f003 fa7b 	bl	b1ec <__aeabi_dsub>
    7cf6:	9006      	str	r0, [sp, #24]
    7cf8:	9107      	str	r1, [sp, #28]
    7cfa:	0002      	movs	r2, r0
    7cfc:	000b      	movs	r3, r1
    7cfe:	0030      	movs	r0, r6
    7d00:	0039      	movs	r1, r7
    7d02:	f003 fa73 	bl	b1ec <__aeabi_dsub>
    7d06:	9a02      	ldr	r2, [sp, #8]
    7d08:	9b03      	ldr	r3, [sp, #12]
    7d0a:	f003 fa6f 	bl	b1ec <__aeabi_dsub>
    7d0e:	0006      	movs	r6, r0
    7d10:	000f      	movs	r7, r1
    7d12:	9804      	ldr	r0, [sp, #16]
    7d14:	9905      	ldr	r1, [sp, #20]
    7d16:	4a32      	ldr	r2, [pc, #200]	; (7de0 <__ieee754_rem_pio2+0x38c>)
    7d18:	4b32      	ldr	r3, [pc, #200]	; (7de4 <__ieee754_rem_pio2+0x390>)
    7d1a:	f002 ffe7 	bl	acec <__aeabi_dmul>
    7d1e:	0032      	movs	r2, r6
    7d20:	003b      	movs	r3, r7
    7d22:	f003 fa63 	bl	b1ec <__aeabi_dsub>
    7d26:	9e06      	ldr	r6, [sp, #24]
    7d28:	9f07      	ldr	r7, [sp, #28]
    7d2a:	0002      	movs	r2, r0
    7d2c:	000b      	movs	r3, r1
    7d2e:	0030      	movs	r0, r6
    7d30:	0039      	movs	r1, r7
    7d32:	9202      	str	r2, [sp, #8]
    7d34:	9303      	str	r3, [sp, #12]
    7d36:	f003 fa59 	bl	b1ec <__aeabi_dsub>
    7d3a:	000b      	movs	r3, r1
    7d3c:	468a      	mov	sl, r1
    7d3e:	0002      	movs	r2, r0
    7d40:	4641      	mov	r1, r8
    7d42:	600a      	str	r2, [r1, #0]
    7d44:	604b      	str	r3, [r1, #4]
    7d46:	4653      	mov	r3, sl
    7d48:	005b      	lsls	r3, r3, #1
    7d4a:	0d5b      	lsrs	r3, r3, #21
    7d4c:	4683      	mov	fp, r0
    7d4e:	1ae4      	subs	r4, r4, r3
    7d50:	9606      	str	r6, [sp, #24]
    7d52:	9707      	str	r7, [sp, #28]
    7d54:	2c31      	cmp	r4, #49	; 0x31
    7d56:	dd8a      	ble.n	7c6e <__ieee754_rem_pio2+0x21a>
    7d58:	9804      	ldr	r0, [sp, #16]
    7d5a:	9905      	ldr	r1, [sp, #20]
    7d5c:	22b8      	movs	r2, #184	; 0xb8
    7d5e:	4b21      	ldr	r3, [pc, #132]	; (7de4 <__ieee754_rem_pio2+0x390>)
    7d60:	0592      	lsls	r2, r2, #22
    7d62:	f002 ffc3 	bl	acec <__aeabi_dmul>
    7d66:	0003      	movs	r3, r0
    7d68:	000c      	movs	r4, r1
    7d6a:	0002      	movs	r2, r0
    7d6c:	9302      	str	r3, [sp, #8]
    7d6e:	9403      	str	r4, [sp, #12]
    7d70:	0030      	movs	r0, r6
    7d72:	000b      	movs	r3, r1
    7d74:	0039      	movs	r1, r7
    7d76:	f003 fa39 	bl	b1ec <__aeabi_dsub>
    7d7a:	0002      	movs	r2, r0
    7d7c:	000b      	movs	r3, r1
    7d7e:	0006      	movs	r6, r0
    7d80:	000f      	movs	r7, r1
    7d82:	9806      	ldr	r0, [sp, #24]
    7d84:	9907      	ldr	r1, [sp, #28]
    7d86:	f003 fa31 	bl	b1ec <__aeabi_dsub>
    7d8a:	9a02      	ldr	r2, [sp, #8]
    7d8c:	9b03      	ldr	r3, [sp, #12]
    7d8e:	f003 fa2d 	bl	b1ec <__aeabi_dsub>
    7d92:	4a19      	ldr	r2, [pc, #100]	; (7df8 <__ieee754_rem_pio2+0x3a4>)
    7d94:	9002      	str	r0, [sp, #8]
    7d96:	9103      	str	r1, [sp, #12]
    7d98:	9804      	ldr	r0, [sp, #16]
    7d9a:	9905      	ldr	r1, [sp, #20]
    7d9c:	4b17      	ldr	r3, [pc, #92]	; (7dfc <__ieee754_rem_pio2+0x3a8>)
    7d9e:	f002 ffa5 	bl	acec <__aeabi_dmul>
    7da2:	9a02      	ldr	r2, [sp, #8]
    7da4:	9b03      	ldr	r3, [sp, #12]
    7da6:	f003 fa21 	bl	b1ec <__aeabi_dsub>
    7daa:	0002      	movs	r2, r0
    7dac:	000b      	movs	r3, r1
    7dae:	9202      	str	r2, [sp, #8]
    7db0:	9303      	str	r3, [sp, #12]
    7db2:	e751      	b.n	7c58 <__ieee754_rem_pio2+0x204>
    7db4:	3fe921fb 	.word	0x3fe921fb
    7db8:	4002d97b 	.word	0x4002d97b
    7dbc:	54400000 	.word	0x54400000
    7dc0:	3ff921fb 	.word	0x3ff921fb
    7dc4:	1a626331 	.word	0x1a626331
    7dc8:	3dd0b461 	.word	0x3dd0b461
    7dcc:	413921fb 	.word	0x413921fb
    7dd0:	7fefffff 	.word	0x7fefffff
    7dd4:	fffffbea 	.word	0xfffffbea
    7dd8:	41700000 	.word	0x41700000
    7ddc:	0000c238 	.word	0x0000c238
    7de0:	2e037073 	.word	0x2e037073
    7de4:	3ba3198a 	.word	0x3ba3198a
    7de8:	6dc9c883 	.word	0x6dc9c883
    7dec:	3fe45f30 	.word	0x3fe45f30
    7df0:	3fe00000 	.word	0x3fe00000
    7df4:	0000c1b8 	.word	0x0000c1b8
    7df8:	252049c1 	.word	0x252049c1
    7dfc:	397b839a 	.word	0x397b839a
    7e00:	4b1b      	ldr	r3, [pc, #108]	; (7e70 <__ieee754_rem_pio2+0x41c>)
    7e02:	f002 f82f 	bl	9e64 <__aeabi_dadd>
    7e06:	4b1a      	ldr	r3, [pc, #104]	; (7e70 <__ieee754_rem_pio2+0x41c>)
    7e08:	0006      	movs	r6, r0
    7e0a:	000f      	movs	r7, r1
    7e0c:	429c      	cmp	r4, r3
    7e0e:	d018      	beq.n	7e42 <__ieee754_rem_pio2+0x3ee>
    7e10:	4a18      	ldr	r2, [pc, #96]	; (7e74 <__ieee754_rem_pio2+0x420>)
    7e12:	4b19      	ldr	r3, [pc, #100]	; (7e78 <__ieee754_rem_pio2+0x424>)
    7e14:	f002 f826 	bl	9e64 <__aeabi_dadd>
    7e18:	0002      	movs	r2, r0
    7e1a:	000b      	movs	r3, r1
    7e1c:	4641      	mov	r1, r8
    7e1e:	0030      	movs	r0, r6
    7e20:	600a      	str	r2, [r1, #0]
    7e22:	604b      	str	r3, [r1, #4]
    7e24:	0039      	movs	r1, r7
    7e26:	f003 f9e1 	bl	b1ec <__aeabi_dsub>
    7e2a:	4a12      	ldr	r2, [pc, #72]	; (7e74 <__ieee754_rem_pio2+0x420>)
    7e2c:	4b12      	ldr	r3, [pc, #72]	; (7e78 <__ieee754_rem_pio2+0x424>)
    7e2e:	f002 f819 	bl	9e64 <__aeabi_dadd>
    7e32:	2501      	movs	r5, #1
    7e34:	4643      	mov	r3, r8
    7e36:	426d      	negs	r5, r5
    7e38:	6098      	str	r0, [r3, #8]
    7e3a:	60d9      	str	r1, [r3, #12]
    7e3c:	e6ab      	b.n	7b96 <__ieee754_rem_pio2+0x142>
    7e3e:	2303      	movs	r3, #3
    7e40:	e684      	b.n	7b4c <__ieee754_rem_pio2+0xf8>
    7e42:	22d3      	movs	r2, #211	; 0xd3
    7e44:	4b0c      	ldr	r3, [pc, #48]	; (7e78 <__ieee754_rem_pio2+0x424>)
    7e46:	0552      	lsls	r2, r2, #21
    7e48:	f002 f80c 	bl	9e64 <__aeabi_dadd>
    7e4c:	4a0b      	ldr	r2, [pc, #44]	; (7e7c <__ieee754_rem_pio2+0x428>)
    7e4e:	4b0c      	ldr	r3, [pc, #48]	; (7e80 <__ieee754_rem_pio2+0x42c>)
    7e50:	0004      	movs	r4, r0
    7e52:	000d      	movs	r5, r1
    7e54:	f002 f806 	bl	9e64 <__aeabi_dadd>
    7e58:	0002      	movs	r2, r0
    7e5a:	000b      	movs	r3, r1
    7e5c:	4641      	mov	r1, r8
    7e5e:	0020      	movs	r0, r4
    7e60:	600a      	str	r2, [r1, #0]
    7e62:	604b      	str	r3, [r1, #4]
    7e64:	0029      	movs	r1, r5
    7e66:	f003 f9c1 	bl	b1ec <__aeabi_dsub>
    7e6a:	4a04      	ldr	r2, [pc, #16]	; (7e7c <__ieee754_rem_pio2+0x428>)
    7e6c:	4b04      	ldr	r3, [pc, #16]	; (7e80 <__ieee754_rem_pio2+0x42c>)
    7e6e:	e7de      	b.n	7e2e <__ieee754_rem_pio2+0x3da>
    7e70:	3ff921fb 	.word	0x3ff921fb
    7e74:	1a626331 	.word	0x1a626331
    7e78:	3dd0b461 	.word	0x3dd0b461
    7e7c:	2e037073 	.word	0x2e037073
    7e80:	3ba3198a 	.word	0x3ba3198a

00007e84 <__kernel_cos>:
    7e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e86:	4647      	mov	r7, r8
    7e88:	46ce      	mov	lr, r9
    7e8a:	b580      	push	{r7, lr}
    7e8c:	b087      	sub	sp, #28
    7e8e:	9200      	str	r2, [sp, #0]
    7e90:	9301      	str	r3, [sp, #4]
    7e92:	4b75      	ldr	r3, [pc, #468]	; (8068 <__kernel_cos+0x1e4>)
    7e94:	004f      	lsls	r7, r1, #1
    7e96:	4681      	mov	r9, r0
    7e98:	4688      	mov	r8, r1
    7e9a:	087f      	lsrs	r7, r7, #1
    7e9c:	429f      	cmp	r7, r3
    7e9e:	dc63      	bgt.n	7f68 <__kernel_cos+0xe4>
    7ea0:	f003 fcba 	bl	b818 <__aeabi_d2iz>
    7ea4:	2800      	cmp	r0, #0
    7ea6:	d100      	bne.n	7eaa <__kernel_cos+0x26>
    7ea8:	e0da      	b.n	8060 <__kernel_cos+0x1dc>
    7eaa:	464a      	mov	r2, r9
    7eac:	4643      	mov	r3, r8
    7eae:	4648      	mov	r0, r9
    7eb0:	4641      	mov	r1, r8
    7eb2:	f002 ff1b 	bl	acec <__aeabi_dmul>
    7eb6:	0004      	movs	r4, r0
    7eb8:	000d      	movs	r5, r1
    7eba:	4a6c      	ldr	r2, [pc, #432]	; (806c <__kernel_cos+0x1e8>)
    7ebc:	4b6c      	ldr	r3, [pc, #432]	; (8070 <__kernel_cos+0x1ec>)
    7ebe:	f002 ff15 	bl	acec <__aeabi_dmul>
    7ec2:	4a6c      	ldr	r2, [pc, #432]	; (8074 <__kernel_cos+0x1f0>)
    7ec4:	4b6c      	ldr	r3, [pc, #432]	; (8078 <__kernel_cos+0x1f4>)
    7ec6:	f001 ffcd 	bl	9e64 <__aeabi_dadd>
    7eca:	0022      	movs	r2, r4
    7ecc:	002b      	movs	r3, r5
    7ece:	f002 ff0d 	bl	acec <__aeabi_dmul>
    7ed2:	4a6a      	ldr	r2, [pc, #424]	; (807c <__kernel_cos+0x1f8>)
    7ed4:	4b6a      	ldr	r3, [pc, #424]	; (8080 <__kernel_cos+0x1fc>)
    7ed6:	f003 f989 	bl	b1ec <__aeabi_dsub>
    7eda:	0022      	movs	r2, r4
    7edc:	002b      	movs	r3, r5
    7ede:	f002 ff05 	bl	acec <__aeabi_dmul>
    7ee2:	4a68      	ldr	r2, [pc, #416]	; (8084 <__kernel_cos+0x200>)
    7ee4:	4b68      	ldr	r3, [pc, #416]	; (8088 <__kernel_cos+0x204>)
    7ee6:	f001 ffbd 	bl	9e64 <__aeabi_dadd>
    7eea:	0022      	movs	r2, r4
    7eec:	002b      	movs	r3, r5
    7eee:	f002 fefd 	bl	acec <__aeabi_dmul>
    7ef2:	4a66      	ldr	r2, [pc, #408]	; (808c <__kernel_cos+0x208>)
    7ef4:	4b66      	ldr	r3, [pc, #408]	; (8090 <__kernel_cos+0x20c>)
    7ef6:	f003 f979 	bl	b1ec <__aeabi_dsub>
    7efa:	0022      	movs	r2, r4
    7efc:	002b      	movs	r3, r5
    7efe:	f002 fef5 	bl	acec <__aeabi_dmul>
    7f02:	4a64      	ldr	r2, [pc, #400]	; (8094 <__kernel_cos+0x210>)
    7f04:	4b64      	ldr	r3, [pc, #400]	; (8098 <__kernel_cos+0x214>)
    7f06:	f001 ffad 	bl	9e64 <__aeabi_dadd>
    7f0a:	0022      	movs	r2, r4
    7f0c:	002b      	movs	r3, r5
    7f0e:	f002 feed 	bl	acec <__aeabi_dmul>
    7f12:	9002      	str	r0, [sp, #8]
    7f14:	9103      	str	r1, [sp, #12]
    7f16:	2200      	movs	r2, #0
    7f18:	4b60      	ldr	r3, [pc, #384]	; (809c <__kernel_cos+0x218>)
    7f1a:	0020      	movs	r0, r4
    7f1c:	0029      	movs	r1, r5
    7f1e:	f002 fee5 	bl	acec <__aeabi_dmul>
    7f22:	9a02      	ldr	r2, [sp, #8]
    7f24:	9b03      	ldr	r3, [sp, #12]
    7f26:	0006      	movs	r6, r0
    7f28:	000f      	movs	r7, r1
    7f2a:	0020      	movs	r0, r4
    7f2c:	0029      	movs	r1, r5
    7f2e:	f002 fedd 	bl	acec <__aeabi_dmul>
    7f32:	9a00      	ldr	r2, [sp, #0]
    7f34:	9b01      	ldr	r3, [sp, #4]
    7f36:	0004      	movs	r4, r0
    7f38:	000d      	movs	r5, r1
    7f3a:	4648      	mov	r0, r9
    7f3c:	4641      	mov	r1, r8
    7f3e:	f002 fed5 	bl	acec <__aeabi_dmul>
    7f42:	0002      	movs	r2, r0
    7f44:	000b      	movs	r3, r1
    7f46:	0020      	movs	r0, r4
    7f48:	0029      	movs	r1, r5
    7f4a:	f003 f94f 	bl	b1ec <__aeabi_dsub>
    7f4e:	0002      	movs	r2, r0
    7f50:	000b      	movs	r3, r1
    7f52:	0030      	movs	r0, r6
    7f54:	0039      	movs	r1, r7
    7f56:	f003 f949 	bl	b1ec <__aeabi_dsub>
    7f5a:	0002      	movs	r2, r0
    7f5c:	000b      	movs	r3, r1
    7f5e:	2000      	movs	r0, #0
    7f60:	494f      	ldr	r1, [pc, #316]	; (80a0 <__kernel_cos+0x21c>)
    7f62:	f003 f943 	bl	b1ec <__aeabi_dsub>
    7f66:	e070      	b.n	804a <__kernel_cos+0x1c6>
    7f68:	0002      	movs	r2, r0
    7f6a:	000b      	movs	r3, r1
    7f6c:	f002 febe 	bl	acec <__aeabi_dmul>
    7f70:	0004      	movs	r4, r0
    7f72:	000d      	movs	r5, r1
    7f74:	4a3d      	ldr	r2, [pc, #244]	; (806c <__kernel_cos+0x1e8>)
    7f76:	4b3e      	ldr	r3, [pc, #248]	; (8070 <__kernel_cos+0x1ec>)
    7f78:	f002 feb8 	bl	acec <__aeabi_dmul>
    7f7c:	4a3d      	ldr	r2, [pc, #244]	; (8074 <__kernel_cos+0x1f0>)
    7f7e:	4b3e      	ldr	r3, [pc, #248]	; (8078 <__kernel_cos+0x1f4>)
    7f80:	f001 ff70 	bl	9e64 <__aeabi_dadd>
    7f84:	0022      	movs	r2, r4
    7f86:	002b      	movs	r3, r5
    7f88:	f002 feb0 	bl	acec <__aeabi_dmul>
    7f8c:	4a3b      	ldr	r2, [pc, #236]	; (807c <__kernel_cos+0x1f8>)
    7f8e:	4b3c      	ldr	r3, [pc, #240]	; (8080 <__kernel_cos+0x1fc>)
    7f90:	f003 f92c 	bl	b1ec <__aeabi_dsub>
    7f94:	0022      	movs	r2, r4
    7f96:	002b      	movs	r3, r5
    7f98:	f002 fea8 	bl	acec <__aeabi_dmul>
    7f9c:	4a39      	ldr	r2, [pc, #228]	; (8084 <__kernel_cos+0x200>)
    7f9e:	4b3a      	ldr	r3, [pc, #232]	; (8088 <__kernel_cos+0x204>)
    7fa0:	f001 ff60 	bl	9e64 <__aeabi_dadd>
    7fa4:	0022      	movs	r2, r4
    7fa6:	002b      	movs	r3, r5
    7fa8:	f002 fea0 	bl	acec <__aeabi_dmul>
    7fac:	4a37      	ldr	r2, [pc, #220]	; (808c <__kernel_cos+0x208>)
    7fae:	4b38      	ldr	r3, [pc, #224]	; (8090 <__kernel_cos+0x20c>)
    7fb0:	f003 f91c 	bl	b1ec <__aeabi_dsub>
    7fb4:	0022      	movs	r2, r4
    7fb6:	002b      	movs	r3, r5
    7fb8:	f002 fe98 	bl	acec <__aeabi_dmul>
    7fbc:	4a35      	ldr	r2, [pc, #212]	; (8094 <__kernel_cos+0x210>)
    7fbe:	4b36      	ldr	r3, [pc, #216]	; (8098 <__kernel_cos+0x214>)
    7fc0:	f001 ff50 	bl	9e64 <__aeabi_dadd>
    7fc4:	002b      	movs	r3, r5
    7fc6:	0022      	movs	r2, r4
    7fc8:	f002 fe90 	bl	acec <__aeabi_dmul>
    7fcc:	4b35      	ldr	r3, [pc, #212]	; (80a4 <__kernel_cos+0x220>)
    7fce:	9002      	str	r0, [sp, #8]
    7fd0:	9103      	str	r1, [sp, #12]
    7fd2:	429f      	cmp	r7, r3
    7fd4:	dd9f      	ble.n	7f16 <__kernel_cos+0x92>
    7fd6:	4b34      	ldr	r3, [pc, #208]	; (80a8 <__kernel_cos+0x224>)
    7fd8:	2200      	movs	r2, #0
    7fda:	429f      	cmp	r7, r3
    7fdc:	dc3a      	bgt.n	8054 <__kernel_cos+0x1d0>
    7fde:	4933      	ldr	r1, [pc, #204]	; (80ac <__kernel_cos+0x228>)
    7fe0:	2000      	movs	r0, #0
    7fe2:	187b      	adds	r3, r7, r1
    7fe4:	492e      	ldr	r1, [pc, #184]	; (80a0 <__kernel_cos+0x21c>)
    7fe6:	0016      	movs	r6, r2
    7fe8:	001f      	movs	r7, r3
    7fea:	f003 f8ff 	bl	b1ec <__aeabi_dsub>
    7fee:	9004      	str	r0, [sp, #16]
    7ff0:	9105      	str	r1, [sp, #20]
    7ff2:	2200      	movs	r2, #0
    7ff4:	4b29      	ldr	r3, [pc, #164]	; (809c <__kernel_cos+0x218>)
    7ff6:	0020      	movs	r0, r4
    7ff8:	0029      	movs	r1, r5
    7ffa:	f002 fe77 	bl	acec <__aeabi_dmul>
    7ffe:	0032      	movs	r2, r6
    8000:	003b      	movs	r3, r7
    8002:	f003 f8f3 	bl	b1ec <__aeabi_dsub>
    8006:	9a02      	ldr	r2, [sp, #8]
    8008:	9b03      	ldr	r3, [sp, #12]
    800a:	0006      	movs	r6, r0
    800c:	000f      	movs	r7, r1
    800e:	0020      	movs	r0, r4
    8010:	0029      	movs	r1, r5
    8012:	f002 fe6b 	bl	acec <__aeabi_dmul>
    8016:	9a00      	ldr	r2, [sp, #0]
    8018:	9b01      	ldr	r3, [sp, #4]
    801a:	0004      	movs	r4, r0
    801c:	000d      	movs	r5, r1
    801e:	4648      	mov	r0, r9
    8020:	4641      	mov	r1, r8
    8022:	f002 fe63 	bl	acec <__aeabi_dmul>
    8026:	0002      	movs	r2, r0
    8028:	000b      	movs	r3, r1
    802a:	0020      	movs	r0, r4
    802c:	0029      	movs	r1, r5
    802e:	f003 f8dd 	bl	b1ec <__aeabi_dsub>
    8032:	0002      	movs	r2, r0
    8034:	000b      	movs	r3, r1
    8036:	0030      	movs	r0, r6
    8038:	0039      	movs	r1, r7
    803a:	f003 f8d7 	bl	b1ec <__aeabi_dsub>
    803e:	0002      	movs	r2, r0
    8040:	000b      	movs	r3, r1
    8042:	9804      	ldr	r0, [sp, #16]
    8044:	9905      	ldr	r1, [sp, #20]
    8046:	f003 f8d1 	bl	b1ec <__aeabi_dsub>
    804a:	b007      	add	sp, #28
    804c:	bc0c      	pop	{r2, r3}
    804e:	4690      	mov	r8, r2
    8050:	4699      	mov	r9, r3
    8052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8054:	4b16      	ldr	r3, [pc, #88]	; (80b0 <__kernel_cos+0x22c>)
    8056:	2600      	movs	r6, #0
    8058:	9204      	str	r2, [sp, #16]
    805a:	9305      	str	r3, [sp, #20]
    805c:	4f15      	ldr	r7, [pc, #84]	; (80b4 <__kernel_cos+0x230>)
    805e:	e7c8      	b.n	7ff2 <__kernel_cos+0x16e>
    8060:	2000      	movs	r0, #0
    8062:	490f      	ldr	r1, [pc, #60]	; (80a0 <__kernel_cos+0x21c>)
    8064:	e7f1      	b.n	804a <__kernel_cos+0x1c6>
    8066:	46c0      	nop			; (mov r8, r8)
    8068:	3e3fffff 	.word	0x3e3fffff
    806c:	be8838d4 	.word	0xbe8838d4
    8070:	bda8fae9 	.word	0xbda8fae9
    8074:	bdb4b1c4 	.word	0xbdb4b1c4
    8078:	3e21ee9e 	.word	0x3e21ee9e
    807c:	809c52ad 	.word	0x809c52ad
    8080:	3e927e4f 	.word	0x3e927e4f
    8084:	19cb1590 	.word	0x19cb1590
    8088:	3efa01a0 	.word	0x3efa01a0
    808c:	16c15177 	.word	0x16c15177
    8090:	3f56c16c 	.word	0x3f56c16c
    8094:	5555554c 	.word	0x5555554c
    8098:	3fa55555 	.word	0x3fa55555
    809c:	3fe00000 	.word	0x3fe00000
    80a0:	3ff00000 	.word	0x3ff00000
    80a4:	3fd33332 	.word	0x3fd33332
    80a8:	3fe90000 	.word	0x3fe90000
    80ac:	ffe00000 	.word	0xffe00000
    80b0:	3fe70000 	.word	0x3fe70000
    80b4:	3fd20000 	.word	0x3fd20000

000080b8 <__kernel_rem_pio2>:
    80b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ba:	46de      	mov	lr, fp
    80bc:	464e      	mov	r6, r9
    80be:	4645      	mov	r5, r8
    80c0:	4657      	mov	r7, sl
    80c2:	b5e0      	push	{r5, r6, r7, lr}
    80c4:	4ca3      	ldr	r4, [pc, #652]	; (8354 <__kernel_rem_pio2+0x29c>)
    80c6:	44a5      	add	sp, r4
    80c8:	9107      	str	r1, [sp, #28]
    80ca:	0019      	movs	r1, r3
    80cc:	0014      	movs	r4, r2
    80ce:	9aa4      	ldr	r2, [sp, #656]	; 0x290
    80d0:	9309      	str	r3, [sp, #36]	; 0x24
    80d2:	4ba1      	ldr	r3, [pc, #644]	; (8358 <__kernel_rem_pio2+0x2a0>)
    80d4:	0092      	lsls	r2, r2, #2
    80d6:	58d2      	ldr	r2, [r2, r3]
    80d8:	000b      	movs	r3, r1
    80da:	9003      	str	r0, [sp, #12]
    80dc:	3b01      	subs	r3, #1
    80de:	1ee0      	subs	r0, r4, #3
    80e0:	2118      	movs	r1, #24
    80e2:	001d      	movs	r5, r3
    80e4:	0016      	movs	r6, r2
    80e6:	9206      	str	r2, [sp, #24]
    80e8:	9302      	str	r3, [sp, #8]
    80ea:	f000 fea7 	bl	8e3c <__divsi3>
    80ee:	43c3      	mvns	r3, r0
    80f0:	0002      	movs	r2, r0
    80f2:	17db      	asrs	r3, r3, #31
    80f4:	401a      	ands	r2, r3
    80f6:	0013      	movs	r3, r2
    80f8:	0011      	movs	r1, r2
    80fa:	3301      	adds	r3, #1
    80fc:	920b      	str	r2, [sp, #44]	; 0x2c
    80fe:	009a      	lsls	r2, r3, #2
    8100:	1a9b      	subs	r3, r3, r2
    8102:	00db      	lsls	r3, r3, #3
    8104:	191b      	adds	r3, r3, r4
    8106:	9304      	str	r3, [sp, #16]
    8108:	1b4c      	subs	r4, r1, r5
    810a:	1976      	adds	r6, r6, r5
    810c:	d418      	bmi.n	8140 <__kernel_rem_pio2+0x88>
    810e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
    8110:	00a5      	lsls	r5, r4, #2
    8112:	469c      	mov	ip, r3
    8114:	1936      	adds	r6, r6, r4
    8116:	af22      	add	r7, sp, #136	; 0x88
    8118:	4465      	add	r5, ip
    811a:	3601      	adds	r6, #1
    811c:	e007      	b.n	812e <__kernel_rem_pio2+0x76>
    811e:	6828      	ldr	r0, [r5, #0]
    8120:	f003 fbae 	bl	b880 <__aeabi_i2d>
    8124:	3401      	adds	r4, #1
    8126:	c703      	stmia	r7!, {r0, r1}
    8128:	3504      	adds	r5, #4
    812a:	42b4      	cmp	r4, r6
    812c:	d008      	beq.n	8140 <__kernel_rem_pio2+0x88>
    812e:	2c00      	cmp	r4, #0
    8130:	daf5      	bge.n	811e <__kernel_rem_pio2+0x66>
    8132:	2000      	movs	r0, #0
    8134:	2100      	movs	r1, #0
    8136:	3401      	adds	r4, #1
    8138:	c703      	stmia	r7!, {r0, r1}
    813a:	3504      	adds	r5, #4
    813c:	42b4      	cmp	r4, r6
    813e:	d1f6      	bne.n	812e <__kernel_rem_pio2+0x76>
    8140:	9b06      	ldr	r3, [sp, #24]
    8142:	2b00      	cmp	r3, #0
    8144:	da01      	bge.n	814a <__kernel_rem_pio2+0x92>
    8146:	f000 fc01 	bl	894c <__kernel_rem_pio2+0x894>
    814a:	ab72      	add	r3, sp, #456	; 0x1c8
    814c:	0019      	movs	r1, r3
    814e:	468b      	mov	fp, r1
    8150:	aa22      	add	r2, sp, #136	; 0x88
    8152:	4691      	mov	r9, r2
    8154:	9a06      	ldr	r2, [sp, #24]
    8156:	9308      	str	r3, [sp, #32]
    8158:	3201      	adds	r2, #1
    815a:	00d2      	lsls	r2, r2, #3
    815c:	4493      	add	fp, r2
    815e:	9a03      	ldr	r2, [sp, #12]
    8160:	469a      	mov	sl, r3
    8162:	4690      	mov	r8, r2
    8164:	9b02      	ldr	r3, [sp, #8]
    8166:	00db      	lsls	r3, r3, #3
    8168:	4499      	add	r9, r3
    816a:	3308      	adds	r3, #8
    816c:	4498      	add	r8, r3
    816e:	9b02      	ldr	r3, [sp, #8]
    8170:	2b00      	cmp	r3, #0
    8172:	da00      	bge.n	8176 <__kernel_rem_pio2+0xbe>
    8174:	e28d      	b.n	8692 <__kernel_rem_pio2+0x5da>
    8176:	464c      	mov	r4, r9
    8178:	2600      	movs	r6, #0
    817a:	2700      	movs	r7, #0
    817c:	9d03      	ldr	r5, [sp, #12]
    817e:	6822      	ldr	r2, [r4, #0]
    8180:	6863      	ldr	r3, [r4, #4]
    8182:	cd03      	ldmia	r5!, {r0, r1}
    8184:	f002 fdb2 	bl	acec <__aeabi_dmul>
    8188:	0002      	movs	r2, r0
    818a:	000b      	movs	r3, r1
    818c:	0030      	movs	r0, r6
    818e:	0039      	movs	r1, r7
    8190:	f001 fe68 	bl	9e64 <__aeabi_dadd>
    8194:	3c08      	subs	r4, #8
    8196:	0006      	movs	r6, r0
    8198:	000f      	movs	r7, r1
    819a:	4545      	cmp	r5, r8
    819c:	d1ef      	bne.n	817e <__kernel_rem_pio2+0xc6>
    819e:	4653      	mov	r3, sl
    81a0:	c3c0      	stmia	r3!, {r6, r7}
    81a2:	469a      	mov	sl, r3
    81a4:	2308      	movs	r3, #8
    81a6:	469c      	mov	ip, r3
    81a8:	44e1      	add	r9, ip
    81aa:	45da      	cmp	sl, fp
    81ac:	d1df      	bne.n	816e <__kernel_rem_pio2+0xb6>
    81ae:	9a06      	ldr	r2, [sp, #24]
    81b0:	496a      	ldr	r1, [pc, #424]	; (835c <__kernel_rem_pio2+0x2a4>)
    81b2:	0013      	movs	r3, r2
    81b4:	468c      	mov	ip, r1
    81b6:	4463      	add	r3, ip
    81b8:	009b      	lsls	r3, r3, #2
    81ba:	a80e      	add	r0, sp, #56	; 0x38
    81bc:	0019      	movs	r1, r3
    81be:	4684      	mov	ip, r0
    81c0:	4461      	add	r1, ip
    81c2:	910d      	str	r1, [sp, #52]	; 0x34
    81c4:	9903      	ldr	r1, [sp, #12]
    81c6:	3b04      	subs	r3, #4
    81c8:	468b      	mov	fp, r1
    81ca:	4463      	add	r3, ip
    81cc:	930c      	str	r3, [sp, #48]	; 0x30
    81ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81d0:	9200      	str	r2, [sp, #0]
    81d2:	00db      	lsls	r3, r3, #3
    81d4:	449b      	add	fp, r3
    81d6:	9a00      	ldr	r2, [sp, #0]
    81d8:	9808      	ldr	r0, [sp, #32]
    81da:	00d3      	lsls	r3, r2, #3
    81dc:	0019      	movs	r1, r3
    81de:	930a      	str	r3, [sp, #40]	; 0x28
    81e0:	468c      	mov	ip, r1
    81e2:	0003      	movs	r3, r0
    81e4:	4463      	add	r3, ip
    81e6:	681e      	ldr	r6, [r3, #0]
    81e8:	685f      	ldr	r7, [r3, #4]
    81ea:	2a00      	cmp	r2, #0
    81ec:	dd34      	ble.n	8258 <__kernel_rem_pio2+0x1a0>
    81ee:	ab0e      	add	r3, sp, #56	; 0x38
    81f0:	4699      	mov	r9, r3
    81f2:	0013      	movs	r3, r2
    81f4:	4a5a      	ldr	r2, [pc, #360]	; (8360 <__kernel_rem_pio2+0x2a8>)
    81f6:	4680      	mov	r8, r0
    81f8:	4694      	mov	ip, r2
    81fa:	4463      	add	r3, ip
    81fc:	00db      	lsls	r3, r3, #3
    81fe:	4498      	add	r8, r3
    8200:	ab70      	add	r3, sp, #448	; 0x1c0
    8202:	469a      	mov	sl, r3
    8204:	2200      	movs	r2, #0
    8206:	4b57      	ldr	r3, [pc, #348]	; (8364 <__kernel_rem_pio2+0x2ac>)
    8208:	0030      	movs	r0, r6
    820a:	0039      	movs	r1, r7
    820c:	f002 fd6e 	bl	acec <__aeabi_dmul>
    8210:	f003 fb02 	bl	b818 <__aeabi_d2iz>
    8214:	f003 fb34 	bl	b880 <__aeabi_i2d>
    8218:	2200      	movs	r2, #0
    821a:	4b53      	ldr	r3, [pc, #332]	; (8368 <__kernel_rem_pio2+0x2b0>)
    821c:	0004      	movs	r4, r0
    821e:	000d      	movs	r5, r1
    8220:	f002 fd64 	bl	acec <__aeabi_dmul>
    8224:	0002      	movs	r2, r0
    8226:	000b      	movs	r3, r1
    8228:	0030      	movs	r0, r6
    822a:	0039      	movs	r1, r7
    822c:	f002 ffde 	bl	b1ec <__aeabi_dsub>
    8230:	f003 faf2 	bl	b818 <__aeabi_d2iz>
    8234:	464b      	mov	r3, r9
    8236:	c301      	stmia	r3!, {r0}
    8238:	4699      	mov	r9, r3
    823a:	4643      	mov	r3, r8
    823c:	0020      	movs	r0, r4
    823e:	681a      	ldr	r2, [r3, #0]
    8240:	685b      	ldr	r3, [r3, #4]
    8242:	0029      	movs	r1, r5
    8244:	f001 fe0e 	bl	9e64 <__aeabi_dadd>
    8248:	2308      	movs	r3, #8
    824a:	425b      	negs	r3, r3
    824c:	469c      	mov	ip, r3
    824e:	44e0      	add	r8, ip
    8250:	0006      	movs	r6, r0
    8252:	000f      	movs	r7, r1
    8254:	45d0      	cmp	r8, sl
    8256:	d1d5      	bne.n	8204 <__kernel_rem_pio2+0x14c>
    8258:	9b04      	ldr	r3, [sp, #16]
    825a:	0030      	movs	r0, r6
    825c:	001a      	movs	r2, r3
    825e:	0039      	movs	r1, r7
    8260:	4699      	mov	r9, r3
    8262:	f000 fcf1 	bl	8c48 <scalbn>
    8266:	23ff      	movs	r3, #255	; 0xff
    8268:	2200      	movs	r2, #0
    826a:	059b      	lsls	r3, r3, #22
    826c:	0004      	movs	r4, r0
    826e:	000d      	movs	r5, r1
    8270:	f002 fd3c 	bl	acec <__aeabi_dmul>
    8274:	f000 fc50 	bl	8b18 <floor>
    8278:	2200      	movs	r2, #0
    827a:	4b3c      	ldr	r3, [pc, #240]	; (836c <__kernel_rem_pio2+0x2b4>)
    827c:	f002 fd36 	bl	acec <__aeabi_dmul>
    8280:	0002      	movs	r2, r0
    8282:	000b      	movs	r3, r1
    8284:	0020      	movs	r0, r4
    8286:	0029      	movs	r1, r5
    8288:	f002 ffb0 	bl	b1ec <__aeabi_dsub>
    828c:	000d      	movs	r5, r1
    828e:	0004      	movs	r4, r0
    8290:	f003 fac2 	bl	b818 <__aeabi_d2iz>
    8294:	4680      	mov	r8, r0
    8296:	f003 faf3 	bl	b880 <__aeabi_i2d>
    829a:	0002      	movs	r2, r0
    829c:	000b      	movs	r3, r1
    829e:	0020      	movs	r0, r4
    82a0:	0029      	movs	r1, r5
    82a2:	f002 ffa3 	bl	b1ec <__aeabi_dsub>
    82a6:	000f      	movs	r7, r1
    82a8:	4649      	mov	r1, r9
    82aa:	0006      	movs	r6, r0
    82ac:	2900      	cmp	r1, #0
    82ae:	dc00      	bgt.n	82b2 <__kernel_rem_pio2+0x1fa>
    82b0:	e110      	b.n	84d4 <__kernel_rem_pio2+0x41c>
    82b2:	9b00      	ldr	r3, [sp, #0]
    82b4:	2018      	movs	r0, #24
    82b6:	1e5a      	subs	r2, r3, #1
    82b8:	0092      	lsls	r2, r2, #2
    82ba:	ab0e      	add	r3, sp, #56	; 0x38
    82bc:	589b      	ldr	r3, [r3, r2]
    82be:	1a40      	subs	r0, r0, r1
    82c0:	001d      	movs	r5, r3
    82c2:	4105      	asrs	r5, r0
    82c4:	44a8      	add	r8, r5
    82c6:	4085      	lsls	r5, r0
    82c8:	1b5d      	subs	r5, r3, r5
    82ca:	ab0e      	add	r3, sp, #56	; 0x38
    82cc:	509d      	str	r5, [r3, r2]
    82ce:	2217      	movs	r2, #23
    82d0:	1a52      	subs	r2, r2, r1
    82d2:	4115      	asrs	r5, r2
    82d4:	2d00      	cmp	r5, #0
    82d6:	dc00      	bgt.n	82da <__kernel_rem_pio2+0x222>
    82d8:	e07d      	b.n	83d6 <__kernel_rem_pio2+0x31e>
    82da:	2301      	movs	r3, #1
    82dc:	469c      	mov	ip, r3
    82de:	9b00      	ldr	r3, [sp, #0]
    82e0:	44e0      	add	r8, ip
    82e2:	2b00      	cmp	r3, #0
    82e4:	dd48      	ble.n	8378 <__kernel_rem_pio2+0x2c0>
    82e6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    82e8:	2c00      	cmp	r4, #0
    82ea:	d100      	bne.n	82ee <__kernel_rem_pio2+0x236>
    82ec:	e34b      	b.n	8986 <__kernel_rem_pio2+0x8ce>
    82ee:	2201      	movs	r2, #1
    82f0:	2300      	movs	r3, #0
    82f2:	2100      	movs	r1, #0
    82f4:	2080      	movs	r0, #128	; 0x80
    82f6:	0440      	lsls	r0, r0, #17
    82f8:	1b04      	subs	r4, r0, r4
    82fa:	a80e      	add	r0, sp, #56	; 0x38
    82fc:	5044      	str	r4, [r0, r1]
    82fe:	9900      	ldr	r1, [sp, #0]
    8300:	4291      	cmp	r1, r2
    8302:	dd18      	ble.n	8336 <__kernel_rem_pio2+0x27e>
    8304:	0092      	lsls	r2, r2, #2
    8306:	a90e      	add	r1, sp, #56	; 0x38
    8308:	5889      	ldr	r1, [r1, r2]
    830a:	ac0e      	add	r4, sp, #56	; 0x38
    830c:	9105      	str	r1, [sp, #20]
    830e:	9805      	ldr	r0, [sp, #20]
    8310:	4917      	ldr	r1, [pc, #92]	; (8370 <__kernel_rem_pio2+0x2b8>)
    8312:	3302      	adds	r3, #2
    8314:	1a08      	subs	r0, r1, r0
    8316:	50a0      	str	r0, [r4, r2]
    8318:	9a00      	ldr	r2, [sp, #0]
    831a:	429a      	cmp	r2, r3
    831c:	dd0b      	ble.n	8336 <__kernel_rem_pio2+0x27e>
    831e:	aa0e      	add	r2, sp, #56	; 0x38
    8320:	4694      	mov	ip, r2
    8322:	9a00      	ldr	r2, [sp, #0]
    8324:	009b      	lsls	r3, r3, #2
    8326:	0090      	lsls	r0, r2, #2
    8328:	4463      	add	r3, ip
    832a:	4460      	add	r0, ip
    832c:	681a      	ldr	r2, [r3, #0]
    832e:	1a8a      	subs	r2, r1, r2
    8330:	c304      	stmia	r3!, {r2}
    8332:	4283      	cmp	r3, r0
    8334:	d1fa      	bne.n	832c <__kernel_rem_pio2+0x274>
    8336:	9b04      	ldr	r3, [sp, #16]
    8338:	2401      	movs	r4, #1
    833a:	2b00      	cmp	r3, #0
    833c:	dc21      	bgt.n	8382 <__kernel_rem_pio2+0x2ca>
    833e:	2d02      	cmp	r5, #2
    8340:	d149      	bne.n	83d6 <__kernel_rem_pio2+0x31e>
    8342:	0032      	movs	r2, r6
    8344:	003b      	movs	r3, r7
    8346:	2000      	movs	r0, #0
    8348:	490a      	ldr	r1, [pc, #40]	; (8374 <__kernel_rem_pio2+0x2bc>)
    834a:	f002 ff4f 	bl	b1ec <__aeabi_dsub>
    834e:	0006      	movs	r6, r0
    8350:	000f      	movs	r7, r1
    8352:	e032      	b.n	83ba <__kernel_rem_pio2+0x302>
    8354:	fffffd94 	.word	0xfffffd94
    8358:	0000c380 	.word	0x0000c380
    835c:	3fffffff 	.word	0x3fffffff
    8360:	1fffffff 	.word	0x1fffffff
    8364:	3e700000 	.word	0x3e700000
    8368:	41700000 	.word	0x41700000
    836c:	40200000 	.word	0x40200000
    8370:	00ffffff 	.word	0x00ffffff
    8374:	3ff00000 	.word	0x3ff00000
    8378:	9b04      	ldr	r3, [sp, #16]
    837a:	2400      	movs	r4, #0
    837c:	2b00      	cmp	r3, #0
    837e:	dc00      	bgt.n	8382 <__kernel_rem_pio2+0x2ca>
    8380:	e292      	b.n	88a8 <__kernel_rem_pio2+0x7f0>
    8382:	9b04      	ldr	r3, [sp, #16]
    8384:	2b01      	cmp	r3, #1
    8386:	d100      	bne.n	838a <__kernel_rem_pio2+0x2d2>
    8388:	e27b      	b.n	8882 <__kernel_rem_pio2+0x7ca>
    838a:	2b02      	cmp	r3, #2
    838c:	d109      	bne.n	83a2 <__kernel_rem_pio2+0x2ea>
    838e:	9b00      	ldr	r3, [sp, #0]
    8390:	a90e      	add	r1, sp, #56	; 0x38
    8392:	1e5a      	subs	r2, r3, #1
    8394:	0092      	lsls	r2, r2, #2
    8396:	ab0e      	add	r3, sp, #56	; 0x38
    8398:	589b      	ldr	r3, [r3, r2]
    839a:	9305      	str	r3, [sp, #20]
    839c:	029b      	lsls	r3, r3, #10
    839e:	0a9b      	lsrs	r3, r3, #10
    83a0:	508b      	str	r3, [r1, r2]
    83a2:	2d02      	cmp	r5, #2
    83a4:	d117      	bne.n	83d6 <__kernel_rem_pio2+0x31e>
    83a6:	0032      	movs	r2, r6
    83a8:	003b      	movs	r3, r7
    83aa:	2000      	movs	r0, #0
    83ac:	49bf      	ldr	r1, [pc, #764]	; (86ac <__kernel_rem_pio2+0x5f4>)
    83ae:	f002 ff1d 	bl	b1ec <__aeabi_dsub>
    83b2:	0006      	movs	r6, r0
    83b4:	000f      	movs	r7, r1
    83b6:	2c00      	cmp	r4, #0
    83b8:	d00d      	beq.n	83d6 <__kernel_rem_pio2+0x31e>
    83ba:	9a04      	ldr	r2, [sp, #16]
    83bc:	2000      	movs	r0, #0
    83be:	49bb      	ldr	r1, [pc, #748]	; (86ac <__kernel_rem_pio2+0x5f4>)
    83c0:	f000 fc42 	bl	8c48 <scalbn>
    83c4:	0002      	movs	r2, r0
    83c6:	000b      	movs	r3, r1
    83c8:	0030      	movs	r0, r6
    83ca:	0039      	movs	r1, r7
    83cc:	f002 ff0e 	bl	b1ec <__aeabi_dsub>
    83d0:	2502      	movs	r5, #2
    83d2:	0006      	movs	r6, r0
    83d4:	000f      	movs	r7, r1
    83d6:	2300      	movs	r3, #0
    83d8:	2200      	movs	r2, #0
    83da:	0030      	movs	r0, r6
    83dc:	0039      	movs	r1, r7
    83de:	f000 fe29 	bl	9034 <__aeabi_dcmpeq>
    83e2:	9b00      	ldr	r3, [sp, #0]
    83e4:	2800      	cmp	r0, #0
    83e6:	d100      	bne.n	83ea <__kernel_rem_pio2+0x332>
    83e8:	e262      	b.n	88b0 <__kernel_rem_pio2+0x7f8>
    83ea:	9906      	ldr	r1, [sp, #24]
    83ec:	1e5a      	subs	r2, r3, #1
    83ee:	4291      	cmp	r1, r2
    83f0:	dc10      	bgt.n	8414 <__kernel_rem_pio2+0x35c>
    83f2:	49af      	ldr	r1, [pc, #700]	; (86b0 <__kernel_rem_pio2+0x5f8>)
    83f4:	980d      	ldr	r0, [sp, #52]	; 0x34
    83f6:	468c      	mov	ip, r1
    83f8:	a90e      	add	r1, sp, #56	; 0x38
    83fa:	4463      	add	r3, ip
    83fc:	468c      	mov	ip, r1
    83fe:	2100      	movs	r1, #0
    8400:	009b      	lsls	r3, r3, #2
    8402:	4463      	add	r3, ip
    8404:	681c      	ldr	r4, [r3, #0]
    8406:	3b04      	subs	r3, #4
    8408:	4321      	orrs	r1, r4
    840a:	4283      	cmp	r3, r0
    840c:	d1fa      	bne.n	8404 <__kernel_rem_pio2+0x34c>
    840e:	2900      	cmp	r1, #0
    8410:	d000      	beq.n	8414 <__kernel_rem_pio2+0x35c>
    8412:	e084      	b.n	851e <__kernel_rem_pio2+0x466>
    8414:	9b06      	ldr	r3, [sp, #24]
    8416:	aa0e      	add	r2, sp, #56	; 0x38
    8418:	3b01      	subs	r3, #1
    841a:	009b      	lsls	r3, r3, #2
    841c:	58d3      	ldr	r3, [r2, r3]
    841e:	2b00      	cmp	r3, #0
    8420:	d000      	beq.n	8424 <__kernel_rem_pio2+0x36c>
    8422:	e27c      	b.n	891e <__kernel_rem_pio2+0x866>
    8424:	2201      	movs	r2, #1
    8426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8428:	3b04      	subs	r3, #4
    842a:	6859      	ldr	r1, [r3, #4]
    842c:	3201      	adds	r2, #1
    842e:	2900      	cmp	r1, #0
    8430:	d0fa      	beq.n	8428 <__kernel_rem_pio2+0x370>
    8432:	9900      	ldr	r1, [sp, #0]
    8434:	000b      	movs	r3, r1
    8436:	468c      	mov	ip, r1
    8438:	3301      	adds	r3, #1
    843a:	4462      	add	r2, ip
    843c:	9205      	str	r2, [sp, #20]
    843e:	4293      	cmp	r3, r2
    8440:	dc42      	bgt.n	84c8 <__kernel_rem_pio2+0x410>
    8442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8444:	4694      	mov	ip, r2
    8446:	9aa5      	ldr	r2, [sp, #660]	; 0x294
    8448:	4463      	add	r3, ip
    844a:	4692      	mov	sl, r2
    844c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    844e:	009b      	lsls	r3, r3, #2
    8450:	4694      	mov	ip, r2
    8452:	aa22      	add	r2, sp, #136	; 0x88
    8454:	4690      	mov	r8, r2
    8456:	449a      	add	sl, r3
    8458:	9b00      	ldr	r3, [sp, #0]
    845a:	9a08      	ldr	r2, [sp, #32]
    845c:	4463      	add	r3, ip
    845e:	00db      	lsls	r3, r3, #3
    8460:	4498      	add	r8, r3
    8462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8464:	4694      	mov	ip, r2
    8466:	4699      	mov	r9, r3
    8468:	9b05      	ldr	r3, [sp, #20]
    846a:	44e1      	add	r9, ip
    846c:	00db      	lsls	r3, r3, #3
    846e:	4463      	add	r3, ip
    8470:	9300      	str	r3, [sp, #0]
    8472:	4653      	mov	r3, sl
    8474:	6818      	ldr	r0, [r3, #0]
    8476:	f003 fa03 	bl	b880 <__aeabi_i2d>
    847a:	4643      	mov	r3, r8
    847c:	6018      	str	r0, [r3, #0]
    847e:	6059      	str	r1, [r3, #4]
    8480:	9b02      	ldr	r3, [sp, #8]
    8482:	2b00      	cmp	r3, #0
    8484:	db23      	blt.n	84ce <__kernel_rem_pio2+0x416>
    8486:	4644      	mov	r4, r8
    8488:	2600      	movs	r6, #0
    848a:	2700      	movs	r7, #0
    848c:	9d03      	ldr	r5, [sp, #12]
    848e:	6822      	ldr	r2, [r4, #0]
    8490:	6863      	ldr	r3, [r4, #4]
    8492:	cd03      	ldmia	r5!, {r0, r1}
    8494:	f002 fc2a 	bl	acec <__aeabi_dmul>
    8498:	0002      	movs	r2, r0
    849a:	000b      	movs	r3, r1
    849c:	0030      	movs	r0, r6
    849e:	0039      	movs	r1, r7
    84a0:	f001 fce0 	bl	9e64 <__aeabi_dadd>
    84a4:	3c08      	subs	r4, #8
    84a6:	0006      	movs	r6, r0
    84a8:	000f      	movs	r7, r1
    84aa:	455d      	cmp	r5, fp
    84ac:	d1ef      	bne.n	848e <__kernel_rem_pio2+0x3d6>
    84ae:	464b      	mov	r3, r9
    84b0:	609e      	str	r6, [r3, #8]
    84b2:	60df      	str	r7, [r3, #12]
    84b4:	2304      	movs	r3, #4
    84b6:	469c      	mov	ip, r3
    84b8:	3304      	adds	r3, #4
    84ba:	44e2      	add	sl, ip
    84bc:	469c      	mov	ip, r3
    84be:	9b00      	ldr	r3, [sp, #0]
    84c0:	44e1      	add	r9, ip
    84c2:	44e0      	add	r8, ip
    84c4:	4599      	cmp	r9, r3
    84c6:	d1d4      	bne.n	8472 <__kernel_rem_pio2+0x3ba>
    84c8:	9b05      	ldr	r3, [sp, #20]
    84ca:	9300      	str	r3, [sp, #0]
    84cc:	e683      	b.n	81d6 <__kernel_rem_pio2+0x11e>
    84ce:	2600      	movs	r6, #0
    84d0:	2700      	movs	r7, #0
    84d2:	e7ec      	b.n	84ae <__kernel_rem_pio2+0x3f6>
    84d4:	9b04      	ldr	r3, [sp, #16]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d106      	bne.n	84e8 <__kernel_rem_pio2+0x430>
    84da:	9b00      	ldr	r3, [sp, #0]
    84dc:	aa0e      	add	r2, sp, #56	; 0x38
    84de:	3b01      	subs	r3, #1
    84e0:	009b      	lsls	r3, r3, #2
    84e2:	58d5      	ldr	r5, [r2, r3]
    84e4:	15ed      	asrs	r5, r5, #23
    84e6:	e6f5      	b.n	82d4 <__kernel_rem_pio2+0x21c>
    84e8:	2200      	movs	r2, #0
    84ea:	4b72      	ldr	r3, [pc, #456]	; (86b4 <__kernel_rem_pio2+0x5fc>)
    84ec:	0030      	movs	r0, r6
    84ee:	0039      	movs	r1, r7
    84f0:	f000 fdc4 	bl	907c <__aeabi_dcmpge>
    84f4:	2500      	movs	r5, #0
    84f6:	2800      	cmp	r0, #0
    84f8:	d100      	bne.n	84fc <__kernel_rem_pio2+0x444>
    84fa:	e76c      	b.n	83d6 <__kernel_rem_pio2+0x31e>
    84fc:	2301      	movs	r3, #1
    84fe:	469c      	mov	ip, r3
    8500:	9b00      	ldr	r3, [sp, #0]
    8502:	44e0      	add	r8, ip
    8504:	2502      	movs	r5, #2
    8506:	2b00      	cmp	r3, #0
    8508:	dd00      	ble.n	850c <__kernel_rem_pio2+0x454>
    850a:	e6ec      	b.n	82e6 <__kernel_rem_pio2+0x22e>
    850c:	0032      	movs	r2, r6
    850e:	003b      	movs	r3, r7
    8510:	2000      	movs	r0, #0
    8512:	4966      	ldr	r1, [pc, #408]	; (86ac <__kernel_rem_pio2+0x5f4>)
    8514:	f002 fe6a 	bl	b1ec <__aeabi_dsub>
    8518:	0006      	movs	r6, r0
    851a:	000f      	movs	r7, r1
    851c:	e75b      	b.n	83d6 <__kernel_rem_pio2+0x31e>
    851e:	4643      	mov	r3, r8
    8520:	9309      	str	r3, [sp, #36]	; 0x24
    8522:	9b04      	ldr	r3, [sp, #16]
    8524:	a80e      	add	r0, sp, #56	; 0x38
    8526:	3b18      	subs	r3, #24
    8528:	0019      	movs	r1, r3
    852a:	9304      	str	r3, [sp, #16]
    852c:	0093      	lsls	r3, r2, #2
    852e:	58c3      	ldr	r3, [r0, r3]
    8530:	9503      	str	r5, [sp, #12]
    8532:	9202      	str	r2, [sp, #8]
    8534:	2b00      	cmp	r3, #0
    8536:	d10f      	bne.n	8558 <__kernel_rem_pio2+0x4a0>
    8538:	485d      	ldr	r0, [pc, #372]	; (86b0 <__kernel_rem_pio2+0x5f8>)
    853a:	0013      	movs	r3, r2
    853c:	4684      	mov	ip, r0
    853e:	a80e      	add	r0, sp, #56	; 0x38
    8540:	4463      	add	r3, ip
    8542:	4684      	mov	ip, r0
    8544:	009b      	lsls	r3, r3, #2
    8546:	4463      	add	r3, ip
    8548:	3b04      	subs	r3, #4
    854a:	6858      	ldr	r0, [r3, #4]
    854c:	3a01      	subs	r2, #1
    854e:	3918      	subs	r1, #24
    8550:	2800      	cmp	r0, #0
    8552:	d0f9      	beq.n	8548 <__kernel_rem_pio2+0x490>
    8554:	9202      	str	r2, [sp, #8]
    8556:	9104      	str	r1, [sp, #16]
    8558:	9a04      	ldr	r2, [sp, #16]
    855a:	2000      	movs	r0, #0
    855c:	4953      	ldr	r1, [pc, #332]	; (86ac <__kernel_rem_pio2+0x5f4>)
    855e:	f000 fb73 	bl	8c48 <scalbn>
    8562:	9b02      	ldr	r3, [sp, #8]
    8564:	0004      	movs	r4, r0
    8566:	000d      	movs	r5, r1
    8568:	2b00      	cmp	r3, #0
    856a:	da00      	bge.n	856e <__kernel_rem_pio2+0x4b6>
    856c:	e1d9      	b.n	8922 <__kernel_rem_pio2+0x86a>
    856e:	aa0e      	add	r2, sp, #56	; 0x38
    8570:	4694      	mov	ip, r2
    8572:	009e      	lsls	r6, r3, #2
    8574:	00db      	lsls	r3, r3, #3
    8576:	4466      	add	r6, ip
    8578:	469c      	mov	ip, r3
    857a:	9a08      	ldr	r2, [sp, #32]
    857c:	46b0      	mov	r8, r6
    857e:	4462      	add	r2, ip
    8580:	0016      	movs	r6, r2
    8582:	9304      	str	r3, [sp, #16]
    8584:	9200      	str	r2, [sp, #0]
    8586:	af70      	add	r7, sp, #448	; 0x1c0
    8588:	4643      	mov	r3, r8
    858a:	6818      	ldr	r0, [r3, #0]
    858c:	f003 f978 	bl	b880 <__aeabi_i2d>
    8590:	0022      	movs	r2, r4
    8592:	002b      	movs	r3, r5
    8594:	f002 fbaa 	bl	acec <__aeabi_dmul>
    8598:	4b47      	ldr	r3, [pc, #284]	; (86b8 <__kernel_rem_pio2+0x600>)
    859a:	6030      	str	r0, [r6, #0]
    859c:	6071      	str	r1, [r6, #4]
    859e:	2200      	movs	r2, #0
    85a0:	0020      	movs	r0, r4
    85a2:	0029      	movs	r1, r5
    85a4:	f002 fba2 	bl	acec <__aeabi_dmul>
    85a8:	2304      	movs	r3, #4
    85aa:	425b      	negs	r3, r3
    85ac:	469c      	mov	ip, r3
    85ae:	3e08      	subs	r6, #8
    85b0:	0004      	movs	r4, r0
    85b2:	000d      	movs	r5, r1
    85b4:	44e0      	add	r8, ip
    85b6:	42be      	cmp	r6, r7
    85b8:	d1e6      	bne.n	8588 <__kernel_rem_pio2+0x4d0>
    85ba:	2300      	movs	r3, #0
    85bc:	469a      	mov	sl, r3
    85be:	ab4a      	add	r3, sp, #296	; 0x128
    85c0:	4699      	mov	r9, r3
    85c2:	9b06      	ldr	r3, [sp, #24]
    85c4:	9605      	str	r6, [sp, #20]
    85c6:	469b      	mov	fp, r3
    85c8:	465b      	mov	r3, fp
    85ca:	2600      	movs	r6, #0
    85cc:	2700      	movs	r7, #0
    85ce:	2b00      	cmp	r3, #0
    85d0:	db21      	blt.n	8616 <__kernel_rem_pio2+0x55e>
    85d2:	2080      	movs	r0, #128	; 0x80
    85d4:	4b39      	ldr	r3, [pc, #228]	; (86bc <__kernel_rem_pio2+0x604>)
    85d6:	9d00      	ldr	r5, [sp, #0]
    85d8:	4698      	mov	r8, r3
    85da:	05c0      	lsls	r0, r0, #23
    85dc:	4938      	ldr	r1, [pc, #224]	; (86c0 <__kernel_rem_pio2+0x608>)
    85de:	2600      	movs	r6, #0
    85e0:	2700      	movs	r7, #0
    85e2:	2400      	movs	r4, #0
    85e4:	e008      	b.n	85f8 <__kernel_rem_pio2+0x540>
    85e6:	2308      	movs	r3, #8
    85e8:	469c      	mov	ip, r3
    85ea:	3508      	adds	r5, #8
    85ec:	44e0      	add	r8, ip
    85ee:	4554      	cmp	r4, sl
    85f0:	dc11      	bgt.n	8616 <__kernel_rem_pio2+0x55e>
    85f2:	4643      	mov	r3, r8
    85f4:	6818      	ldr	r0, [r3, #0]
    85f6:	6859      	ldr	r1, [r3, #4]
    85f8:	682a      	ldr	r2, [r5, #0]
    85fa:	686b      	ldr	r3, [r5, #4]
    85fc:	f002 fb76 	bl	acec <__aeabi_dmul>
    8600:	0002      	movs	r2, r0
    8602:	000b      	movs	r3, r1
    8604:	0030      	movs	r0, r6
    8606:	0039      	movs	r1, r7
    8608:	f001 fc2c 	bl	9e64 <__aeabi_dadd>
    860c:	3401      	adds	r4, #1
    860e:	0006      	movs	r6, r0
    8610:	000f      	movs	r7, r1
    8612:	45a3      	cmp	fp, r4
    8614:	dae7      	bge.n	85e6 <__kernel_rem_pio2+0x52e>
    8616:	4653      	mov	r3, sl
    8618:	00db      	lsls	r3, r3, #3
    861a:	444b      	add	r3, r9
    861c:	601e      	str	r6, [r3, #0]
    861e:	605f      	str	r7, [r3, #4]
    8620:	2301      	movs	r3, #1
    8622:	469c      	mov	ip, r3
    8624:	9b00      	ldr	r3, [sp, #0]
    8626:	9a05      	ldr	r2, [sp, #20]
    8628:	3b08      	subs	r3, #8
    862a:	44e2      	add	sl, ip
    862c:	9300      	str	r3, [sp, #0]
    862e:	429a      	cmp	r2, r3
    8630:	d1ca      	bne.n	85c8 <__kernel_rem_pio2+0x510>
    8632:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    8634:	2b02      	cmp	r3, #2
    8636:	dd00      	ble.n	863a <__kernel_rem_pio2+0x582>
    8638:	e07a      	b.n	8730 <__kernel_rem_pio2+0x678>
    863a:	2b00      	cmp	r3, #0
    863c:	dc42      	bgt.n	86c4 <__kernel_rem_pio2+0x60c>
    863e:	d11c      	bne.n	867a <__kernel_rem_pio2+0x5c2>
    8640:	9b04      	ldr	r3, [sp, #16]
    8642:	2700      	movs	r7, #0
    8644:	444b      	add	r3, r9
    8646:	001e      	movs	r6, r3
    8648:	2400      	movs	r4, #0
    864a:	ad48      	add	r5, sp, #288	; 0x120
    864c:	6832      	ldr	r2, [r6, #0]
    864e:	6873      	ldr	r3, [r6, #4]
    8650:	0038      	movs	r0, r7
    8652:	0021      	movs	r1, r4
    8654:	f001 fc06 	bl	9e64 <__aeabi_dadd>
    8658:	3e08      	subs	r6, #8
    865a:	0007      	movs	r7, r0
    865c:	000c      	movs	r4, r1
    865e:	42b5      	cmp	r5, r6
    8660:	d1f4      	bne.n	864c <__kernel_rem_pio2+0x594>
    8662:	9b03      	ldr	r3, [sp, #12]
    8664:	2b00      	cmp	r3, #0
    8666:	d003      	beq.n	8670 <__kernel_rem_pio2+0x5b8>
    8668:	2380      	movs	r3, #128	; 0x80
    866a:	061b      	lsls	r3, r3, #24
    866c:	469c      	mov	ip, r3
    866e:	4464      	add	r4, ip
    8670:	003a      	movs	r2, r7
    8672:	0023      	movs	r3, r4
    8674:	9907      	ldr	r1, [sp, #28]
    8676:	600a      	str	r2, [r1, #0]
    8678:	604b      	str	r3, [r1, #4]
    867a:	2007      	movs	r0, #7
    867c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    867e:	4018      	ands	r0, r3
    8680:	239b      	movs	r3, #155	; 0x9b
    8682:	009b      	lsls	r3, r3, #2
    8684:	449d      	add	sp, r3
    8686:	bc3c      	pop	{r2, r3, r4, r5}
    8688:	4690      	mov	r8, r2
    868a:	4699      	mov	r9, r3
    868c:	46a2      	mov	sl, r4
    868e:	46ab      	mov	fp, r5
    8690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8692:	4653      	mov	r3, sl
    8694:	2600      	movs	r6, #0
    8696:	2700      	movs	r7, #0
    8698:	c3c0      	stmia	r3!, {r6, r7}
    869a:	469a      	mov	sl, r3
    869c:	2308      	movs	r3, #8
    869e:	469c      	mov	ip, r3
    86a0:	44e1      	add	r9, ip
    86a2:	45da      	cmp	sl, fp
    86a4:	d000      	beq.n	86a8 <__kernel_rem_pio2+0x5f0>
    86a6:	e562      	b.n	816e <__kernel_rem_pio2+0xb6>
    86a8:	e581      	b.n	81ae <__kernel_rem_pio2+0xf6>
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	3ff00000 	.word	0x3ff00000
    86b0:	3fffffff 	.word	0x3fffffff
    86b4:	3fe00000 	.word	0x3fe00000
    86b8:	3e700000 	.word	0x3e700000
    86bc:	0000c340 	.word	0x0000c340
    86c0:	3ff921fb 	.word	0x3ff921fb
    86c4:	9b04      	ldr	r3, [sp, #16]
    86c6:	2000      	movs	r0, #0
    86c8:	444b      	add	r3, r9
    86ca:	001e      	movs	r6, r3
    86cc:	2100      	movs	r1, #0
    86ce:	af48      	add	r7, sp, #288	; 0x120
    86d0:	6832      	ldr	r2, [r6, #0]
    86d2:	6873      	ldr	r3, [r6, #4]
    86d4:	3e08      	subs	r6, #8
    86d6:	f001 fbc5 	bl	9e64 <__aeabi_dadd>
    86da:	42be      	cmp	r6, r7
    86dc:	d1f8      	bne.n	86d0 <__kernel_rem_pio2+0x618>
    86de:	9b03      	ldr	r3, [sp, #12]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d100      	bne.n	86e6 <__kernel_rem_pio2+0x62e>
    86e4:	e0b8      	b.n	8858 <__kernel_rem_pio2+0x7a0>
    86e6:	2380      	movs	r3, #128	; 0x80
    86e8:	9a07      	ldr	r2, [sp, #28]
    86ea:	061b      	lsls	r3, r3, #24
    86ec:	18cb      	adds	r3, r1, r3
    86ee:	6010      	str	r0, [r2, #0]
    86f0:	6053      	str	r3, [r2, #4]
    86f2:	000b      	movs	r3, r1
    86f4:	0002      	movs	r2, r0
    86f6:	984a      	ldr	r0, [sp, #296]	; 0x128
    86f8:	994b      	ldr	r1, [sp, #300]	; 0x12c
    86fa:	f002 fd77 	bl	b1ec <__aeabi_dsub>
    86fe:	9b02      	ldr	r3, [sp, #8]
    8700:	2b00      	cmp	r3, #0
    8702:	dd0b      	ble.n	871c <__kernel_rem_pio2+0x664>
    8704:	2601      	movs	r6, #1
    8706:	af4c      	add	r7, sp, #304	; 0x130
    8708:	cf0c      	ldmia	r7!, {r2, r3}
    870a:	f001 fbab 	bl	9e64 <__aeabi_dadd>
    870e:	9b02      	ldr	r3, [sp, #8]
    8710:	3601      	adds	r6, #1
    8712:	42b3      	cmp	r3, r6
    8714:	daf8      	bge.n	8708 <__kernel_rem_pio2+0x650>
    8716:	9b03      	ldr	r3, [sp, #12]
    8718:	2b00      	cmp	r3, #0
    871a:	d003      	beq.n	8724 <__kernel_rem_pio2+0x66c>
    871c:	2380      	movs	r3, #128	; 0x80
    871e:	061b      	lsls	r3, r3, #24
    8720:	469c      	mov	ip, r3
    8722:	4461      	add	r1, ip
    8724:	000b      	movs	r3, r1
    8726:	0002      	movs	r2, r0
    8728:	9907      	ldr	r1, [sp, #28]
    872a:	608a      	str	r2, [r1, #8]
    872c:	60cb      	str	r3, [r1, #12]
    872e:	e7a4      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8730:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    8732:	2b03      	cmp	r3, #3
    8734:	d1a1      	bne.n	867a <__kernel_rem_pio2+0x5c2>
    8736:	9b02      	ldr	r3, [sp, #8]
    8738:	2b00      	cmp	r3, #0
    873a:	dc00      	bgt.n	873e <__kernel_rem_pio2+0x686>
    873c:	e120      	b.n	8980 <__kernel_rem_pio2+0x8c8>
    873e:	4a99      	ldr	r2, [pc, #612]	; (89a4 <__kernel_rem_pio2+0x8ec>)
    8740:	9b04      	ldr	r3, [sp, #16]
    8742:	4694      	mov	ip, r2
    8744:	444b      	add	r3, r9
    8746:	681e      	ldr	r6, [r3, #0]
    8748:	685f      	ldr	r7, [r3, #4]
    874a:	9b02      	ldr	r3, [sp, #8]
    874c:	4463      	add	r3, ip
    874e:	469b      	mov	fp, r3
    8750:	00db      	lsls	r3, r3, #3
    8752:	444b      	add	r3, r9
    8754:	4698      	mov	r8, r3
    8756:	ab48      	add	r3, sp, #288	; 0x120
    8758:	469a      	mov	sl, r3
    875a:	4643      	mov	r3, r8
    875c:	685c      	ldr	r4, [r3, #4]
    875e:	681b      	ldr	r3, [r3, #0]
    8760:	0018      	movs	r0, r3
    8762:	0021      	movs	r1, r4
    8764:	0032      	movs	r2, r6
    8766:	003b      	movs	r3, r7
    8768:	9000      	str	r0, [sp, #0]
    876a:	9101      	str	r1, [sp, #4]
    876c:	f001 fb7a 	bl	9e64 <__aeabi_dadd>
    8770:	0004      	movs	r4, r0
    8772:	000d      	movs	r5, r1
    8774:	0002      	movs	r2, r0
    8776:	000b      	movs	r3, r1
    8778:	9800      	ldr	r0, [sp, #0]
    877a:	9901      	ldr	r1, [sp, #4]
    877c:	f002 fd36 	bl	b1ec <__aeabi_dsub>
    8780:	003b      	movs	r3, r7
    8782:	0032      	movs	r2, r6
    8784:	f001 fb6e 	bl	9e64 <__aeabi_dadd>
    8788:	4643      	mov	r3, r8
    878a:	6098      	str	r0, [r3, #8]
    878c:	60d9      	str	r1, [r3, #12]
    878e:	601c      	str	r4, [r3, #0]
    8790:	605d      	str	r5, [r3, #4]
    8792:	2308      	movs	r3, #8
    8794:	425b      	negs	r3, r3
    8796:	469c      	mov	ip, r3
    8798:	44e0      	add	r8, ip
    879a:	0026      	movs	r6, r4
    879c:	002f      	movs	r7, r5
    879e:	45c2      	cmp	sl, r8
    87a0:	d1db      	bne.n	875a <__kernel_rem_pio2+0x6a2>
    87a2:	9b02      	ldr	r3, [sp, #8]
    87a4:	2b01      	cmp	r3, #1
    87a6:	dc00      	bgt.n	87aa <__kernel_rem_pio2+0x6f2>
    87a8:	e0ea      	b.n	8980 <__kernel_rem_pio2+0x8c8>
    87aa:	9b04      	ldr	r3, [sp, #16]
    87ac:	46c8      	mov	r8, r9
    87ae:	444b      	add	r3, r9
    87b0:	681e      	ldr	r6, [r3, #0]
    87b2:	685f      	ldr	r7, [r3, #4]
    87b4:	465b      	mov	r3, fp
    87b6:	00db      	lsls	r3, r3, #3
    87b8:	469b      	mov	fp, r3
    87ba:	44d8      	add	r8, fp
    87bc:	4643      	mov	r3, r8
    87be:	685c      	ldr	r4, [r3, #4]
    87c0:	681b      	ldr	r3, [r3, #0]
    87c2:	0018      	movs	r0, r3
    87c4:	0021      	movs	r1, r4
    87c6:	0032      	movs	r2, r6
    87c8:	003b      	movs	r3, r7
    87ca:	9000      	str	r0, [sp, #0]
    87cc:	9101      	str	r1, [sp, #4]
    87ce:	f001 fb49 	bl	9e64 <__aeabi_dadd>
    87d2:	0004      	movs	r4, r0
    87d4:	000d      	movs	r5, r1
    87d6:	0002      	movs	r2, r0
    87d8:	000b      	movs	r3, r1
    87da:	9800      	ldr	r0, [sp, #0]
    87dc:	9901      	ldr	r1, [sp, #4]
    87de:	f002 fd05 	bl	b1ec <__aeabi_dsub>
    87e2:	003b      	movs	r3, r7
    87e4:	0032      	movs	r2, r6
    87e6:	f001 fb3d 	bl	9e64 <__aeabi_dadd>
    87ea:	4643      	mov	r3, r8
    87ec:	6098      	str	r0, [r3, #8]
    87ee:	60d9      	str	r1, [r3, #12]
    87f0:	601c      	str	r4, [r3, #0]
    87f2:	605d      	str	r5, [r3, #4]
    87f4:	2308      	movs	r3, #8
    87f6:	425b      	negs	r3, r3
    87f8:	469c      	mov	ip, r3
    87fa:	44e0      	add	r8, ip
    87fc:	0026      	movs	r6, r4
    87fe:	002f      	movs	r7, r5
    8800:	45c1      	cmp	r9, r8
    8802:	d1db      	bne.n	87bc <__kernel_rem_pio2+0x704>
    8804:	465d      	mov	r5, fp
    8806:	2700      	movs	r7, #0
    8808:	2400      	movs	r4, #0
    880a:	3508      	adds	r5, #8
    880c:	444d      	add	r5, r9
    880e:	ae4c      	add	r6, sp, #304	; 0x130
    8810:	682a      	ldr	r2, [r5, #0]
    8812:	686b      	ldr	r3, [r5, #4]
    8814:	0038      	movs	r0, r7
    8816:	0021      	movs	r1, r4
    8818:	f001 fb24 	bl	9e64 <__aeabi_dadd>
    881c:	3d08      	subs	r5, #8
    881e:	0007      	movs	r7, r0
    8820:	000c      	movs	r4, r1
    8822:	42ae      	cmp	r6, r5
    8824:	d1f4      	bne.n	8810 <__kernel_rem_pio2+0x758>
    8826:	9b03      	ldr	r3, [sp, #12]
    8828:	2b00      	cmp	r3, #0
    882a:	d100      	bne.n	882e <__kernel_rem_pio2+0x776>
    882c:	e091      	b.n	8952 <__kernel_rem_pio2+0x89a>
    882e:	2180      	movs	r1, #128	; 0x80
    8830:	9a07      	ldr	r2, [sp, #28]
    8832:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8834:	0609      	lsls	r1, r1, #24
    8836:	6013      	str	r3, [r2, #0]
    8838:	464b      	mov	r3, r9
    883a:	468c      	mov	ip, r1
    883c:	685b      	ldr	r3, [r3, #4]
    883e:	4464      	add	r4, ip
    8840:	4463      	add	r3, ip
    8842:	6053      	str	r3, [r2, #4]
    8844:	464b      	mov	r3, r9
    8846:	689b      	ldr	r3, [r3, #8]
    8848:	6117      	str	r7, [r2, #16]
    884a:	6093      	str	r3, [r2, #8]
    884c:	464b      	mov	r3, r9
    884e:	68db      	ldr	r3, [r3, #12]
    8850:	6154      	str	r4, [r2, #20]
    8852:	4463      	add	r3, ip
    8854:	60d3      	str	r3, [r2, #12]
    8856:	e710      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8858:	0002      	movs	r2, r0
    885a:	000b      	movs	r3, r1
    885c:	9c07      	ldr	r4, [sp, #28]
    885e:	6022      	str	r2, [r4, #0]
    8860:	6063      	str	r3, [r4, #4]
    8862:	000b      	movs	r3, r1
    8864:	0002      	movs	r2, r0
    8866:	984a      	ldr	r0, [sp, #296]	; 0x128
    8868:	994b      	ldr	r1, [sp, #300]	; 0x12c
    886a:	f002 fcbf 	bl	b1ec <__aeabi_dsub>
    886e:	9b02      	ldr	r3, [sp, #8]
    8870:	2b00      	cmp	r3, #0
    8872:	dd00      	ble.n	8876 <__kernel_rem_pio2+0x7be>
    8874:	e746      	b.n	8704 <__kernel_rem_pio2+0x64c>
    8876:	000b      	movs	r3, r1
    8878:	0002      	movs	r2, r0
    887a:	9907      	ldr	r1, [sp, #28]
    887c:	608a      	str	r2, [r1, #8]
    887e:	60cb      	str	r3, [r1, #12]
    8880:	e6fb      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8882:	9b00      	ldr	r3, [sp, #0]
    8884:	a90e      	add	r1, sp, #56	; 0x38
    8886:	1e5a      	subs	r2, r3, #1
    8888:	0092      	lsls	r2, r2, #2
    888a:	ab0e      	add	r3, sp, #56	; 0x38
    888c:	589b      	ldr	r3, [r3, r2]
    888e:	9305      	str	r3, [sp, #20]
    8890:	025b      	lsls	r3, r3, #9
    8892:	0a5b      	lsrs	r3, r3, #9
    8894:	508b      	str	r3, [r1, r2]
    8896:	e584      	b.n	83a2 <__kernel_rem_pio2+0x2ea>
    8898:	9a00      	ldr	r2, [sp, #0]
    889a:	3301      	adds	r3, #1
    889c:	429a      	cmp	r2, r3
    889e:	d176      	bne.n	898e <__kernel_rem_pio2+0x8d6>
    88a0:	9b04      	ldr	r3, [sp, #16]
    88a2:	2b00      	cmp	r3, #0
    88a4:	dd00      	ble.n	88a8 <__kernel_rem_pio2+0x7f0>
    88a6:	e56c      	b.n	8382 <__kernel_rem_pio2+0x2ca>
    88a8:	2d02      	cmp	r5, #2
    88aa:	d000      	beq.n	88ae <__kernel_rem_pio2+0x7f6>
    88ac:	e593      	b.n	83d6 <__kernel_rem_pio2+0x31e>
    88ae:	e62d      	b.n	850c <__kernel_rem_pio2+0x454>
    88b0:	4699      	mov	r9, r3
    88b2:	4643      	mov	r3, r8
    88b4:	9309      	str	r3, [sp, #36]	; 0x24
    88b6:	9b04      	ldr	r3, [sp, #16]
    88b8:	0030      	movs	r0, r6
    88ba:	425a      	negs	r2, r3
    88bc:	0039      	movs	r1, r7
    88be:	9503      	str	r5, [sp, #12]
    88c0:	f000 f9c2 	bl	8c48 <scalbn>
    88c4:	2200      	movs	r2, #0
    88c6:	4b38      	ldr	r3, [pc, #224]	; (89a8 <__kernel_rem_pio2+0x8f0>)
    88c8:	0004      	movs	r4, r0
    88ca:	000d      	movs	r5, r1
    88cc:	f000 fbd6 	bl	907c <__aeabi_dcmpge>
    88d0:	2800      	cmp	r0, #0
    88d2:	d030      	beq.n	8936 <__kernel_rem_pio2+0x87e>
    88d4:	4b35      	ldr	r3, [pc, #212]	; (89ac <__kernel_rem_pio2+0x8f4>)
    88d6:	2200      	movs	r2, #0
    88d8:	0020      	movs	r0, r4
    88da:	0029      	movs	r1, r5
    88dc:	f002 fa06 	bl	acec <__aeabi_dmul>
    88e0:	f002 ff9a 	bl	b818 <__aeabi_d2iz>
    88e4:	464a      	mov	r2, r9
    88e6:	0006      	movs	r6, r0
    88e8:	0097      	lsls	r7, r2, #2
    88ea:	f002 ffc9 	bl	b880 <__aeabi_i2d>
    88ee:	2200      	movs	r2, #0
    88f0:	4b2d      	ldr	r3, [pc, #180]	; (89a8 <__kernel_rem_pio2+0x8f0>)
    88f2:	f002 f9fb 	bl	acec <__aeabi_dmul>
    88f6:	0002      	movs	r2, r0
    88f8:	000b      	movs	r3, r1
    88fa:	0020      	movs	r0, r4
    88fc:	0029      	movs	r1, r5
    88fe:	f002 fc75 	bl	b1ec <__aeabi_dsub>
    8902:	f002 ff89 	bl	b818 <__aeabi_d2iz>
    8906:	aa0e      	add	r2, sp, #56	; 0x38
    8908:	51d0      	str	r0, [r2, r7]
    890a:	464a      	mov	r2, r9
    890c:	9b04      	ldr	r3, [sp, #16]
    890e:	3201      	adds	r2, #1
    8910:	3318      	adds	r3, #24
    8912:	9202      	str	r2, [sp, #8]
    8914:	9304      	str	r3, [sp, #16]
    8916:	0093      	lsls	r3, r2, #2
    8918:	aa0e      	add	r2, sp, #56	; 0x38
    891a:	50d6      	str	r6, [r2, r3]
    891c:	e61c      	b.n	8558 <__kernel_rem_pio2+0x4a0>
    891e:	2201      	movs	r2, #1
    8920:	e587      	b.n	8432 <__kernel_rem_pio2+0x37a>
    8922:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    8924:	2b02      	cmp	r3, #2
    8926:	dc25      	bgt.n	8974 <__kernel_rem_pio2+0x8bc>
    8928:	2b00      	cmp	r3, #0
    892a:	dc38      	bgt.n	899e <__kernel_rem_pio2+0x8e6>
    892c:	d000      	beq.n	8930 <__kernel_rem_pio2+0x878>
    892e:	e6a4      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8930:	2700      	movs	r7, #0
    8932:	2400      	movs	r4, #0
    8934:	e695      	b.n	8662 <__kernel_rem_pio2+0x5aa>
    8936:	464b      	mov	r3, r9
    8938:	0020      	movs	r0, r4
    893a:	0029      	movs	r1, r5
    893c:	009e      	lsls	r6, r3, #2
    893e:	f002 ff6b 	bl	b818 <__aeabi_d2iz>
    8942:	ab0e      	add	r3, sp, #56	; 0x38
    8944:	5198      	str	r0, [r3, r6]
    8946:	464b      	mov	r3, r9
    8948:	9302      	str	r3, [sp, #8]
    894a:	e605      	b.n	8558 <__kernel_rem_pio2+0x4a0>
    894c:	ab72      	add	r3, sp, #456	; 0x1c8
    894e:	9308      	str	r3, [sp, #32]
    8950:	e42d      	b.n	81ae <__kernel_rem_pio2+0xf6>
    8952:	9907      	ldr	r1, [sp, #28]
    8954:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    8956:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    8958:	600a      	str	r2, [r1, #0]
    895a:	604b      	str	r3, [r1, #4]
    895c:	464b      	mov	r3, r9
    895e:	689a      	ldr	r2, [r3, #8]
    8960:	68db      	ldr	r3, [r3, #12]
    8962:	9200      	str	r2, [sp, #0]
    8964:	9301      	str	r3, [sp, #4]
    8966:	608a      	str	r2, [r1, #8]
    8968:	60cb      	str	r3, [r1, #12]
    896a:	003a      	movs	r2, r7
    896c:	0023      	movs	r3, r4
    896e:	610a      	str	r2, [r1, #16]
    8970:	614b      	str	r3, [r1, #20]
    8972:	e682      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8974:	ab4a      	add	r3, sp, #296	; 0x128
    8976:	4699      	mov	r9, r3
    8978:	9ba4      	ldr	r3, [sp, #656]	; 0x290
    897a:	2b03      	cmp	r3, #3
    897c:	d000      	beq.n	8980 <__kernel_rem_pio2+0x8c8>
    897e:	e67c      	b.n	867a <__kernel_rem_pio2+0x5c2>
    8980:	2700      	movs	r7, #0
    8982:	2400      	movs	r4, #0
    8984:	e74f      	b.n	8826 <__kernel_rem_pio2+0x76e>
    8986:	9a00      	ldr	r2, [sp, #0]
    8988:	2301      	movs	r3, #1
    898a:	2a01      	cmp	r2, #1
    898c:	dd88      	ble.n	88a0 <__kernel_rem_pio2+0x7e8>
    898e:	0099      	lsls	r1, r3, #2
    8990:	aa0e      	add	r2, sp, #56	; 0x38
    8992:	5854      	ldr	r4, [r2, r1]
    8994:	2c00      	cmp	r4, #0
    8996:	d100      	bne.n	899a <__kernel_rem_pio2+0x8e2>
    8998:	e77e      	b.n	8898 <__kernel_rem_pio2+0x7e0>
    899a:	1c5a      	adds	r2, r3, #1
    899c:	e4aa      	b.n	82f4 <__kernel_rem_pio2+0x23c>
    899e:	2000      	movs	r0, #0
    89a0:	2100      	movs	r1, #0
    89a2:	e69c      	b.n	86de <__kernel_rem_pio2+0x626>
    89a4:	1fffffff 	.word	0x1fffffff
    89a8:	41700000 	.word	0x41700000
    89ac:	3e700000 	.word	0x3e700000

000089b0 <__kernel_sin>:
    89b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    89b2:	46ce      	mov	lr, r9
    89b4:	4647      	mov	r7, r8
    89b6:	b580      	push	{r7, lr}
    89b8:	b087      	sub	sp, #28
    89ba:	9200      	str	r2, [sp, #0]
    89bc:	9301      	str	r3, [sp, #4]
    89be:	4a46      	ldr	r2, [pc, #280]	; (8ad8 <__kernel_sin+0x128>)
    89c0:	004b      	lsls	r3, r1, #1
    89c2:	4681      	mov	r9, r0
    89c4:	4688      	mov	r8, r1
    89c6:	085b      	lsrs	r3, r3, #1
    89c8:	4293      	cmp	r3, r2
    89ca:	dc05      	bgt.n	89d8 <__kernel_sin+0x28>
    89cc:	f002 ff24 	bl	b818 <__aeabi_d2iz>
    89d0:	4641      	mov	r1, r8
    89d2:	1e03      	subs	r3, r0, #0
    89d4:	4648      	mov	r0, r9
    89d6:	d066      	beq.n	8aa6 <__kernel_sin+0xf6>
    89d8:	464a      	mov	r2, r9
    89da:	4643      	mov	r3, r8
    89dc:	4648      	mov	r0, r9
    89de:	4641      	mov	r1, r8
    89e0:	f002 f984 	bl	acec <__aeabi_dmul>
    89e4:	0004      	movs	r4, r0
    89e6:	000d      	movs	r5, r1
    89e8:	0002      	movs	r2, r0
    89ea:	000b      	movs	r3, r1
    89ec:	4648      	mov	r0, r9
    89ee:	4641      	mov	r1, r8
    89f0:	f002 f97c 	bl	acec <__aeabi_dmul>
    89f4:	4a39      	ldr	r2, [pc, #228]	; (8adc <__kernel_sin+0x12c>)
    89f6:	4b3a      	ldr	r3, [pc, #232]	; (8ae0 <__kernel_sin+0x130>)
    89f8:	0006      	movs	r6, r0
    89fa:	000f      	movs	r7, r1
    89fc:	0020      	movs	r0, r4
    89fe:	0029      	movs	r1, r5
    8a00:	f002 f974 	bl	acec <__aeabi_dmul>
    8a04:	4a37      	ldr	r2, [pc, #220]	; (8ae4 <__kernel_sin+0x134>)
    8a06:	4b38      	ldr	r3, [pc, #224]	; (8ae8 <__kernel_sin+0x138>)
    8a08:	f002 fbf0 	bl	b1ec <__aeabi_dsub>
    8a0c:	0022      	movs	r2, r4
    8a0e:	002b      	movs	r3, r5
    8a10:	f002 f96c 	bl	acec <__aeabi_dmul>
    8a14:	4a35      	ldr	r2, [pc, #212]	; (8aec <__kernel_sin+0x13c>)
    8a16:	4b36      	ldr	r3, [pc, #216]	; (8af0 <__kernel_sin+0x140>)
    8a18:	f001 fa24 	bl	9e64 <__aeabi_dadd>
    8a1c:	0022      	movs	r2, r4
    8a1e:	002b      	movs	r3, r5
    8a20:	f002 f964 	bl	acec <__aeabi_dmul>
    8a24:	4a33      	ldr	r2, [pc, #204]	; (8af4 <__kernel_sin+0x144>)
    8a26:	4b34      	ldr	r3, [pc, #208]	; (8af8 <__kernel_sin+0x148>)
    8a28:	f002 fbe0 	bl	b1ec <__aeabi_dsub>
    8a2c:	0022      	movs	r2, r4
    8a2e:	002b      	movs	r3, r5
    8a30:	f002 f95c 	bl	acec <__aeabi_dmul>
    8a34:	4b31      	ldr	r3, [pc, #196]	; (8afc <__kernel_sin+0x14c>)
    8a36:	4a32      	ldr	r2, [pc, #200]	; (8b00 <__kernel_sin+0x150>)
    8a38:	f001 fa14 	bl	9e64 <__aeabi_dadd>
    8a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a3e:	9002      	str	r0, [sp, #8]
    8a40:	9103      	str	r1, [sp, #12]
    8a42:	2b00      	cmp	r3, #0
    8a44:	d034      	beq.n	8ab0 <__kernel_sin+0x100>
    8a46:	9800      	ldr	r0, [sp, #0]
    8a48:	9901      	ldr	r1, [sp, #4]
    8a4a:	2200      	movs	r2, #0
    8a4c:	4b2d      	ldr	r3, [pc, #180]	; (8b04 <__kernel_sin+0x154>)
    8a4e:	f002 f94d 	bl	acec <__aeabi_dmul>
    8a52:	9a02      	ldr	r2, [sp, #8]
    8a54:	9b03      	ldr	r3, [sp, #12]
    8a56:	9004      	str	r0, [sp, #16]
    8a58:	9105      	str	r1, [sp, #20]
    8a5a:	0030      	movs	r0, r6
    8a5c:	0039      	movs	r1, r7
    8a5e:	f002 f945 	bl	acec <__aeabi_dmul>
    8a62:	0002      	movs	r2, r0
    8a64:	000b      	movs	r3, r1
    8a66:	9804      	ldr	r0, [sp, #16]
    8a68:	9905      	ldr	r1, [sp, #20]
    8a6a:	f002 fbbf 	bl	b1ec <__aeabi_dsub>
    8a6e:	0022      	movs	r2, r4
    8a70:	002b      	movs	r3, r5
    8a72:	f002 f93b 	bl	acec <__aeabi_dmul>
    8a76:	9a00      	ldr	r2, [sp, #0]
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	f002 fbb7 	bl	b1ec <__aeabi_dsub>
    8a7e:	4a22      	ldr	r2, [pc, #136]	; (8b08 <__kernel_sin+0x158>)
    8a80:	0004      	movs	r4, r0
    8a82:	000d      	movs	r5, r1
    8a84:	4b21      	ldr	r3, [pc, #132]	; (8b0c <__kernel_sin+0x15c>)
    8a86:	0030      	movs	r0, r6
    8a88:	0039      	movs	r1, r7
    8a8a:	f002 f92f 	bl	acec <__aeabi_dmul>
    8a8e:	0002      	movs	r2, r0
    8a90:	000b      	movs	r3, r1
    8a92:	0020      	movs	r0, r4
    8a94:	0029      	movs	r1, r5
    8a96:	f001 f9e5 	bl	9e64 <__aeabi_dadd>
    8a9a:	0002      	movs	r2, r0
    8a9c:	000b      	movs	r3, r1
    8a9e:	4648      	mov	r0, r9
    8aa0:	4641      	mov	r1, r8
    8aa2:	f002 fba3 	bl	b1ec <__aeabi_dsub>
    8aa6:	b007      	add	sp, #28
    8aa8:	bc0c      	pop	{r2, r3}
    8aaa:	4690      	mov	r8, r2
    8aac:	4699      	mov	r9, r3
    8aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ab0:	0002      	movs	r2, r0
    8ab2:	000b      	movs	r3, r1
    8ab4:	0020      	movs	r0, r4
    8ab6:	0029      	movs	r1, r5
    8ab8:	f002 f918 	bl	acec <__aeabi_dmul>
    8abc:	4a12      	ldr	r2, [pc, #72]	; (8b08 <__kernel_sin+0x158>)
    8abe:	4b13      	ldr	r3, [pc, #76]	; (8b0c <__kernel_sin+0x15c>)
    8ac0:	f002 fb94 	bl	b1ec <__aeabi_dsub>
    8ac4:	0032      	movs	r2, r6
    8ac6:	003b      	movs	r3, r7
    8ac8:	f002 f910 	bl	acec <__aeabi_dmul>
    8acc:	464a      	mov	r2, r9
    8ace:	4643      	mov	r3, r8
    8ad0:	f001 f9c8 	bl	9e64 <__aeabi_dadd>
    8ad4:	e7e7      	b.n	8aa6 <__kernel_sin+0xf6>
    8ad6:	46c0      	nop			; (mov r8, r8)
    8ad8:	3e3fffff 	.word	0x3e3fffff
    8adc:	5acfd57c 	.word	0x5acfd57c
    8ae0:	3de5d93a 	.word	0x3de5d93a
    8ae4:	8a2b9ceb 	.word	0x8a2b9ceb
    8ae8:	3e5ae5e6 	.word	0x3e5ae5e6
    8aec:	57b1fe7d 	.word	0x57b1fe7d
    8af0:	3ec71de3 	.word	0x3ec71de3
    8af4:	19c161d5 	.word	0x19c161d5
    8af8:	3f2a01a0 	.word	0x3f2a01a0
    8afc:	3f811111 	.word	0x3f811111
    8b00:	1110f8a6 	.word	0x1110f8a6
    8b04:	3fe00000 	.word	0x3fe00000
    8b08:	55555549 	.word	0x55555549
    8b0c:	3fc55555 	.word	0x3fc55555

00008b10 <fabs>:
    8b10:	0049      	lsls	r1, r1, #1
    8b12:	084b      	lsrs	r3, r1, #1
    8b14:	0019      	movs	r1, r3
    8b16:	4770      	bx	lr

00008b18 <floor>:
    8b18:	4a45      	ldr	r2, [pc, #276]	; (8c30 <floor+0x118>)
    8b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b1c:	4657      	mov	r7, sl
    8b1e:	4692      	mov	sl, r2
    8b20:	004b      	lsls	r3, r1, #1
    8b22:	0d5b      	lsrs	r3, r3, #21
    8b24:	449a      	add	sl, r3
    8b26:	464e      	mov	r6, r9
    8b28:	4645      	mov	r5, r8
    8b2a:	46de      	mov	lr, fp
    8b2c:	4652      	mov	r2, sl
    8b2e:	b5e0      	push	{r5, r6, r7, lr}
    8b30:	000c      	movs	r4, r1
    8b32:	0005      	movs	r5, r0
    8b34:	000e      	movs	r6, r1
    8b36:	4689      	mov	r9, r1
    8b38:	0007      	movs	r7, r0
    8b3a:	2a13      	cmp	r2, #19
    8b3c:	dc22      	bgt.n	8b84 <floor+0x6c>
    8b3e:	2a00      	cmp	r2, #0
    8b40:	db47      	blt.n	8bd2 <floor+0xba>
    8b42:	4652      	mov	r2, sl
    8b44:	4b3b      	ldr	r3, [pc, #236]	; (8c34 <floor+0x11c>)
    8b46:	4113      	asrs	r3, r2
    8b48:	4698      	mov	r8, r3
    8b4a:	000b      	movs	r3, r1
    8b4c:	4642      	mov	r2, r8
    8b4e:	4013      	ands	r3, r2
    8b50:	4303      	orrs	r3, r0
    8b52:	d011      	beq.n	8b78 <floor+0x60>
    8b54:	4a38      	ldr	r2, [pc, #224]	; (8c38 <floor+0x120>)
    8b56:	4b39      	ldr	r3, [pc, #228]	; (8c3c <floor+0x124>)
    8b58:	f001 f984 	bl	9e64 <__aeabi_dadd>
    8b5c:	2200      	movs	r2, #0
    8b5e:	2300      	movs	r3, #0
    8b60:	f000 fa82 	bl	9068 <__aeabi_dcmpgt>
    8b64:	2800      	cmp	r0, #0
    8b66:	d005      	beq.n	8b74 <floor+0x5c>
    8b68:	2c00      	cmp	r4, #0
    8b6a:	db41      	blt.n	8bf0 <floor+0xd8>
    8b6c:	464e      	mov	r6, r9
    8b6e:	4643      	mov	r3, r8
    8b70:	2700      	movs	r7, #0
    8b72:	439e      	bics	r6, r3
    8b74:	0038      	movs	r0, r7
    8b76:	0031      	movs	r1, r6
    8b78:	bc3c      	pop	{r2, r3, r4, r5}
    8b7a:	4690      	mov	r8, r2
    8b7c:	4699      	mov	r9, r3
    8b7e:	46a2      	mov	sl, r4
    8b80:	46ab      	mov	fp, r5
    8b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b84:	4652      	mov	r2, sl
    8b86:	2a33      	cmp	r2, #51	; 0x33
    8b88:	dd08      	ble.n	8b9c <floor+0x84>
    8b8a:	2380      	movs	r3, #128	; 0x80
    8b8c:	00db      	lsls	r3, r3, #3
    8b8e:	459a      	cmp	sl, r3
    8b90:	d1f2      	bne.n	8b78 <floor+0x60>
    8b92:	0002      	movs	r2, r0
    8b94:	000b      	movs	r3, r1
    8b96:	f001 f965 	bl	9e64 <__aeabi_dadd>
    8b9a:	e7ed      	b.n	8b78 <floor+0x60>
    8b9c:	4a28      	ldr	r2, [pc, #160]	; (8c40 <floor+0x128>)
    8b9e:	4694      	mov	ip, r2
    8ba0:	2201      	movs	r2, #1
    8ba2:	4463      	add	r3, ip
    8ba4:	4252      	negs	r2, r2
    8ba6:	40da      	lsrs	r2, r3
    8ba8:	4693      	mov	fp, r2
    8baa:	4202      	tst	r2, r0
    8bac:	d0e4      	beq.n	8b78 <floor+0x60>
    8bae:	4a22      	ldr	r2, [pc, #136]	; (8c38 <floor+0x120>)
    8bb0:	4b22      	ldr	r3, [pc, #136]	; (8c3c <floor+0x124>)
    8bb2:	f001 f957 	bl	9e64 <__aeabi_dadd>
    8bb6:	2200      	movs	r2, #0
    8bb8:	2300      	movs	r3, #0
    8bba:	f000 fa55 	bl	9068 <__aeabi_dcmpgt>
    8bbe:	2800      	cmp	r0, #0
    8bc0:	d0d8      	beq.n	8b74 <floor+0x5c>
    8bc2:	2c00      	cmp	r4, #0
    8bc4:	db1a      	blt.n	8bfc <floor+0xe4>
    8bc6:	465b      	mov	r3, fp
    8bc8:	464e      	mov	r6, r9
    8bca:	439f      	bics	r7, r3
    8bcc:	0038      	movs	r0, r7
    8bce:	0031      	movs	r1, r6
    8bd0:	e7d2      	b.n	8b78 <floor+0x60>
    8bd2:	4a19      	ldr	r2, [pc, #100]	; (8c38 <floor+0x120>)
    8bd4:	4b19      	ldr	r3, [pc, #100]	; (8c3c <floor+0x124>)
    8bd6:	f001 f945 	bl	9e64 <__aeabi_dadd>
    8bda:	2200      	movs	r2, #0
    8bdc:	2300      	movs	r3, #0
    8bde:	f000 fa43 	bl	9068 <__aeabi_dcmpgt>
    8be2:	2800      	cmp	r0, #0
    8be4:	d0c6      	beq.n	8b74 <floor+0x5c>
    8be6:	2c00      	cmp	r4, #0
    8be8:	db16      	blt.n	8c18 <floor+0x100>
    8bea:	2700      	movs	r7, #0
    8bec:	2600      	movs	r6, #0
    8bee:	e7c1      	b.n	8b74 <floor+0x5c>
    8bf0:	2380      	movs	r3, #128	; 0x80
    8bf2:	4652      	mov	r2, sl
    8bf4:	035b      	lsls	r3, r3, #13
    8bf6:	4113      	asrs	r3, r2
    8bf8:	4499      	add	r9, r3
    8bfa:	e7b7      	b.n	8b6c <floor+0x54>
    8bfc:	4653      	mov	r3, sl
    8bfe:	2b14      	cmp	r3, #20
    8c00:	d012      	beq.n	8c28 <floor+0x110>
    8c02:	2334      	movs	r3, #52	; 0x34
    8c04:	4652      	mov	r2, sl
    8c06:	2701      	movs	r7, #1
    8c08:	1a9b      	subs	r3, r3, r2
    8c0a:	409f      	lsls	r7, r3
    8c0c:	197f      	adds	r7, r7, r5
    8c0e:	42af      	cmp	r7, r5
    8c10:	419b      	sbcs	r3, r3
    8c12:	425b      	negs	r3, r3
    8c14:	4499      	add	r9, r3
    8c16:	e7d6      	b.n	8bc6 <floor+0xae>
    8c18:	0064      	lsls	r4, r4, #1
    8c1a:	0864      	lsrs	r4, r4, #1
    8c1c:	4325      	orrs	r5, r4
    8c1e:	2700      	movs	r7, #0
    8c20:	2d00      	cmp	r5, #0
    8c22:	d0a7      	beq.n	8b74 <floor+0x5c>
    8c24:	4e07      	ldr	r6, [pc, #28]	; (8c44 <floor+0x12c>)
    8c26:	e7a5      	b.n	8b74 <floor+0x5c>
    8c28:	3b13      	subs	r3, #19
    8c2a:	469c      	mov	ip, r3
    8c2c:	44e1      	add	r9, ip
    8c2e:	e7ca      	b.n	8bc6 <floor+0xae>
    8c30:	fffffc01 	.word	0xfffffc01
    8c34:	000fffff 	.word	0x000fffff
    8c38:	8800759c 	.word	0x8800759c
    8c3c:	7e37e43c 	.word	0x7e37e43c
    8c40:	fffffbed 	.word	0xfffffbed
    8c44:	bff00000 	.word	0xbff00000

00008c48 <scalbn>:
    8c48:	004b      	lsls	r3, r1, #1
    8c4a:	b570      	push	{r4, r5, r6, lr}
    8c4c:	0d5b      	lsrs	r3, r3, #21
    8c4e:	0014      	movs	r4, r2
    8c50:	000a      	movs	r2, r1
    8c52:	2b00      	cmp	r3, #0
    8c54:	d11a      	bne.n	8c8c <scalbn+0x44>
    8c56:	004b      	lsls	r3, r1, #1
    8c58:	085b      	lsrs	r3, r3, #1
    8c5a:	4303      	orrs	r3, r0
    8c5c:	d015      	beq.n	8c8a <scalbn+0x42>
    8c5e:	2200      	movs	r2, #0
    8c60:	4b22      	ldr	r3, [pc, #136]	; (8cec <scalbn+0xa4>)
    8c62:	f002 f843 	bl	acec <__aeabi_dmul>
    8c66:	4b22      	ldr	r3, [pc, #136]	; (8cf0 <scalbn+0xa8>)
    8c68:	000a      	movs	r2, r1
    8c6a:	429c      	cmp	r4, r3
    8c6c:	db22      	blt.n	8cb4 <scalbn+0x6c>
    8c6e:	004b      	lsls	r3, r1, #1
    8c70:	0d5b      	lsrs	r3, r3, #21
    8c72:	3b36      	subs	r3, #54	; 0x36
    8c74:	4d1f      	ldr	r5, [pc, #124]	; (8cf4 <scalbn+0xac>)
    8c76:	18e3      	adds	r3, r4, r3
    8c78:	42ab      	cmp	r3, r5
    8c7a:	dc20      	bgt.n	8cbe <scalbn+0x76>
    8c7c:	2b00      	cmp	r3, #0
    8c7e:	dd0d      	ble.n	8c9c <scalbn+0x54>
    8c80:	4c1d      	ldr	r4, [pc, #116]	; (8cf8 <scalbn+0xb0>)
    8c82:	051b      	lsls	r3, r3, #20
    8c84:	4022      	ands	r2, r4
    8c86:	431a      	orrs	r2, r3
    8c88:	0011      	movs	r1, r2
    8c8a:	bd70      	pop	{r4, r5, r6, pc}
    8c8c:	4d1b      	ldr	r5, [pc, #108]	; (8cfc <scalbn+0xb4>)
    8c8e:	42ab      	cmp	r3, r5
    8c90:	d1f0      	bne.n	8c74 <scalbn+0x2c>
    8c92:	0002      	movs	r2, r0
    8c94:	000b      	movs	r3, r1
    8c96:	f001 f8e5 	bl	9e64 <__aeabi_dadd>
    8c9a:	e7f6      	b.n	8c8a <scalbn+0x42>
    8c9c:	001d      	movs	r5, r3
    8c9e:	3535      	adds	r5, #53	; 0x35
    8ca0:	da18      	bge.n	8cd4 <scalbn+0x8c>
    8ca2:	4b17      	ldr	r3, [pc, #92]	; (8d00 <scalbn+0xb8>)
    8ca4:	0002      	movs	r2, r0
    8ca6:	429c      	cmp	r4, r3
    8ca8:	dc0a      	bgt.n	8cc0 <scalbn+0x78>
    8caa:	000b      	movs	r3, r1
    8cac:	4815      	ldr	r0, [pc, #84]	; (8d04 <scalbn+0xbc>)
    8cae:	4916      	ldr	r1, [pc, #88]	; (8d08 <scalbn+0xc0>)
    8cb0:	f000 f832 	bl	8d18 <copysign>
    8cb4:	4a13      	ldr	r2, [pc, #76]	; (8d04 <scalbn+0xbc>)
    8cb6:	4b14      	ldr	r3, [pc, #80]	; (8d08 <scalbn+0xc0>)
    8cb8:	f002 f818 	bl	acec <__aeabi_dmul>
    8cbc:	e7e5      	b.n	8c8a <scalbn+0x42>
    8cbe:	0002      	movs	r2, r0
    8cc0:	000b      	movs	r3, r1
    8cc2:	4812      	ldr	r0, [pc, #72]	; (8d0c <scalbn+0xc4>)
    8cc4:	4912      	ldr	r1, [pc, #72]	; (8d10 <scalbn+0xc8>)
    8cc6:	f000 f827 	bl	8d18 <copysign>
    8cca:	4a10      	ldr	r2, [pc, #64]	; (8d0c <scalbn+0xc4>)
    8ccc:	4b10      	ldr	r3, [pc, #64]	; (8d10 <scalbn+0xc8>)
    8cce:	f002 f80d 	bl	acec <__aeabi_dmul>
    8cd2:	e7da      	b.n	8c8a <scalbn+0x42>
    8cd4:	4c08      	ldr	r4, [pc, #32]	; (8cf8 <scalbn+0xb0>)
    8cd6:	3336      	adds	r3, #54	; 0x36
    8cd8:	4022      	ands	r2, r4
    8cda:	051b      	lsls	r3, r3, #20
    8cdc:	4313      	orrs	r3, r2
    8cde:	0019      	movs	r1, r3
    8ce0:	2200      	movs	r2, #0
    8ce2:	4b0c      	ldr	r3, [pc, #48]	; (8d14 <scalbn+0xcc>)
    8ce4:	f002 f802 	bl	acec <__aeabi_dmul>
    8ce8:	e7cf      	b.n	8c8a <scalbn+0x42>
    8cea:	46c0      	nop			; (mov r8, r8)
    8cec:	43500000 	.word	0x43500000
    8cf0:	ffff3cb0 	.word	0xffff3cb0
    8cf4:	000007fe 	.word	0x000007fe
    8cf8:	800fffff 	.word	0x800fffff
    8cfc:	000007ff 	.word	0x000007ff
    8d00:	0000c350 	.word	0x0000c350
    8d04:	c2f8f359 	.word	0xc2f8f359
    8d08:	01a56e1f 	.word	0x01a56e1f
    8d0c:	8800759c 	.word	0x8800759c
    8d10:	7e37e43c 	.word	0x7e37e43c
    8d14:	3c900000 	.word	0x3c900000

00008d18 <copysign>:
    8d18:	b530      	push	{r4, r5, lr}
    8d1a:	004a      	lsls	r2, r1, #1
    8d1c:	0fdb      	lsrs	r3, r3, #31
    8d1e:	07db      	lsls	r3, r3, #31
    8d20:	0852      	lsrs	r2, r2, #1
    8d22:	431a      	orrs	r2, r3
    8d24:	0011      	movs	r1, r2
    8d26:	bd30      	pop	{r4, r5, pc}

00008d28 <__udivsi3>:
    8d28:	2200      	movs	r2, #0
    8d2a:	0843      	lsrs	r3, r0, #1
    8d2c:	428b      	cmp	r3, r1
    8d2e:	d374      	bcc.n	8e1a <__udivsi3+0xf2>
    8d30:	0903      	lsrs	r3, r0, #4
    8d32:	428b      	cmp	r3, r1
    8d34:	d35f      	bcc.n	8df6 <__udivsi3+0xce>
    8d36:	0a03      	lsrs	r3, r0, #8
    8d38:	428b      	cmp	r3, r1
    8d3a:	d344      	bcc.n	8dc6 <__udivsi3+0x9e>
    8d3c:	0b03      	lsrs	r3, r0, #12
    8d3e:	428b      	cmp	r3, r1
    8d40:	d328      	bcc.n	8d94 <__udivsi3+0x6c>
    8d42:	0c03      	lsrs	r3, r0, #16
    8d44:	428b      	cmp	r3, r1
    8d46:	d30d      	bcc.n	8d64 <__udivsi3+0x3c>
    8d48:	22ff      	movs	r2, #255	; 0xff
    8d4a:	0209      	lsls	r1, r1, #8
    8d4c:	ba12      	rev	r2, r2
    8d4e:	0c03      	lsrs	r3, r0, #16
    8d50:	428b      	cmp	r3, r1
    8d52:	d302      	bcc.n	8d5a <__udivsi3+0x32>
    8d54:	1212      	asrs	r2, r2, #8
    8d56:	0209      	lsls	r1, r1, #8
    8d58:	d065      	beq.n	8e26 <__udivsi3+0xfe>
    8d5a:	0b03      	lsrs	r3, r0, #12
    8d5c:	428b      	cmp	r3, r1
    8d5e:	d319      	bcc.n	8d94 <__udivsi3+0x6c>
    8d60:	e000      	b.n	8d64 <__udivsi3+0x3c>
    8d62:	0a09      	lsrs	r1, r1, #8
    8d64:	0bc3      	lsrs	r3, r0, #15
    8d66:	428b      	cmp	r3, r1
    8d68:	d301      	bcc.n	8d6e <__udivsi3+0x46>
    8d6a:	03cb      	lsls	r3, r1, #15
    8d6c:	1ac0      	subs	r0, r0, r3
    8d6e:	4152      	adcs	r2, r2
    8d70:	0b83      	lsrs	r3, r0, #14
    8d72:	428b      	cmp	r3, r1
    8d74:	d301      	bcc.n	8d7a <__udivsi3+0x52>
    8d76:	038b      	lsls	r3, r1, #14
    8d78:	1ac0      	subs	r0, r0, r3
    8d7a:	4152      	adcs	r2, r2
    8d7c:	0b43      	lsrs	r3, r0, #13
    8d7e:	428b      	cmp	r3, r1
    8d80:	d301      	bcc.n	8d86 <__udivsi3+0x5e>
    8d82:	034b      	lsls	r3, r1, #13
    8d84:	1ac0      	subs	r0, r0, r3
    8d86:	4152      	adcs	r2, r2
    8d88:	0b03      	lsrs	r3, r0, #12
    8d8a:	428b      	cmp	r3, r1
    8d8c:	d301      	bcc.n	8d92 <__udivsi3+0x6a>
    8d8e:	030b      	lsls	r3, r1, #12
    8d90:	1ac0      	subs	r0, r0, r3
    8d92:	4152      	adcs	r2, r2
    8d94:	0ac3      	lsrs	r3, r0, #11
    8d96:	428b      	cmp	r3, r1
    8d98:	d301      	bcc.n	8d9e <__udivsi3+0x76>
    8d9a:	02cb      	lsls	r3, r1, #11
    8d9c:	1ac0      	subs	r0, r0, r3
    8d9e:	4152      	adcs	r2, r2
    8da0:	0a83      	lsrs	r3, r0, #10
    8da2:	428b      	cmp	r3, r1
    8da4:	d301      	bcc.n	8daa <__udivsi3+0x82>
    8da6:	028b      	lsls	r3, r1, #10
    8da8:	1ac0      	subs	r0, r0, r3
    8daa:	4152      	adcs	r2, r2
    8dac:	0a43      	lsrs	r3, r0, #9
    8dae:	428b      	cmp	r3, r1
    8db0:	d301      	bcc.n	8db6 <__udivsi3+0x8e>
    8db2:	024b      	lsls	r3, r1, #9
    8db4:	1ac0      	subs	r0, r0, r3
    8db6:	4152      	adcs	r2, r2
    8db8:	0a03      	lsrs	r3, r0, #8
    8dba:	428b      	cmp	r3, r1
    8dbc:	d301      	bcc.n	8dc2 <__udivsi3+0x9a>
    8dbe:	020b      	lsls	r3, r1, #8
    8dc0:	1ac0      	subs	r0, r0, r3
    8dc2:	4152      	adcs	r2, r2
    8dc4:	d2cd      	bcs.n	8d62 <__udivsi3+0x3a>
    8dc6:	09c3      	lsrs	r3, r0, #7
    8dc8:	428b      	cmp	r3, r1
    8dca:	d301      	bcc.n	8dd0 <__udivsi3+0xa8>
    8dcc:	01cb      	lsls	r3, r1, #7
    8dce:	1ac0      	subs	r0, r0, r3
    8dd0:	4152      	adcs	r2, r2
    8dd2:	0983      	lsrs	r3, r0, #6
    8dd4:	428b      	cmp	r3, r1
    8dd6:	d301      	bcc.n	8ddc <__udivsi3+0xb4>
    8dd8:	018b      	lsls	r3, r1, #6
    8dda:	1ac0      	subs	r0, r0, r3
    8ddc:	4152      	adcs	r2, r2
    8dde:	0943      	lsrs	r3, r0, #5
    8de0:	428b      	cmp	r3, r1
    8de2:	d301      	bcc.n	8de8 <__udivsi3+0xc0>
    8de4:	014b      	lsls	r3, r1, #5
    8de6:	1ac0      	subs	r0, r0, r3
    8de8:	4152      	adcs	r2, r2
    8dea:	0903      	lsrs	r3, r0, #4
    8dec:	428b      	cmp	r3, r1
    8dee:	d301      	bcc.n	8df4 <__udivsi3+0xcc>
    8df0:	010b      	lsls	r3, r1, #4
    8df2:	1ac0      	subs	r0, r0, r3
    8df4:	4152      	adcs	r2, r2
    8df6:	08c3      	lsrs	r3, r0, #3
    8df8:	428b      	cmp	r3, r1
    8dfa:	d301      	bcc.n	8e00 <__udivsi3+0xd8>
    8dfc:	00cb      	lsls	r3, r1, #3
    8dfe:	1ac0      	subs	r0, r0, r3
    8e00:	4152      	adcs	r2, r2
    8e02:	0883      	lsrs	r3, r0, #2
    8e04:	428b      	cmp	r3, r1
    8e06:	d301      	bcc.n	8e0c <__udivsi3+0xe4>
    8e08:	008b      	lsls	r3, r1, #2
    8e0a:	1ac0      	subs	r0, r0, r3
    8e0c:	4152      	adcs	r2, r2
    8e0e:	0843      	lsrs	r3, r0, #1
    8e10:	428b      	cmp	r3, r1
    8e12:	d301      	bcc.n	8e18 <__udivsi3+0xf0>
    8e14:	004b      	lsls	r3, r1, #1
    8e16:	1ac0      	subs	r0, r0, r3
    8e18:	4152      	adcs	r2, r2
    8e1a:	1a41      	subs	r1, r0, r1
    8e1c:	d200      	bcs.n	8e20 <__udivsi3+0xf8>
    8e1e:	4601      	mov	r1, r0
    8e20:	4152      	adcs	r2, r2
    8e22:	4610      	mov	r0, r2
    8e24:	4770      	bx	lr
    8e26:	e7ff      	b.n	8e28 <__udivsi3+0x100>
    8e28:	b501      	push	{r0, lr}
    8e2a:	2000      	movs	r0, #0
    8e2c:	f000 f8f0 	bl	9010 <__aeabi_idiv0>
    8e30:	bd02      	pop	{r1, pc}
    8e32:	46c0      	nop			; (mov r8, r8)

00008e34 <__aeabi_uidivmod>:
    8e34:	2900      	cmp	r1, #0
    8e36:	d0f7      	beq.n	8e28 <__udivsi3+0x100>
    8e38:	e776      	b.n	8d28 <__udivsi3>
    8e3a:	4770      	bx	lr

00008e3c <__divsi3>:
    8e3c:	4603      	mov	r3, r0
    8e3e:	430b      	orrs	r3, r1
    8e40:	d47f      	bmi.n	8f42 <__divsi3+0x106>
    8e42:	2200      	movs	r2, #0
    8e44:	0843      	lsrs	r3, r0, #1
    8e46:	428b      	cmp	r3, r1
    8e48:	d374      	bcc.n	8f34 <__divsi3+0xf8>
    8e4a:	0903      	lsrs	r3, r0, #4
    8e4c:	428b      	cmp	r3, r1
    8e4e:	d35f      	bcc.n	8f10 <__divsi3+0xd4>
    8e50:	0a03      	lsrs	r3, r0, #8
    8e52:	428b      	cmp	r3, r1
    8e54:	d344      	bcc.n	8ee0 <__divsi3+0xa4>
    8e56:	0b03      	lsrs	r3, r0, #12
    8e58:	428b      	cmp	r3, r1
    8e5a:	d328      	bcc.n	8eae <__divsi3+0x72>
    8e5c:	0c03      	lsrs	r3, r0, #16
    8e5e:	428b      	cmp	r3, r1
    8e60:	d30d      	bcc.n	8e7e <__divsi3+0x42>
    8e62:	22ff      	movs	r2, #255	; 0xff
    8e64:	0209      	lsls	r1, r1, #8
    8e66:	ba12      	rev	r2, r2
    8e68:	0c03      	lsrs	r3, r0, #16
    8e6a:	428b      	cmp	r3, r1
    8e6c:	d302      	bcc.n	8e74 <__divsi3+0x38>
    8e6e:	1212      	asrs	r2, r2, #8
    8e70:	0209      	lsls	r1, r1, #8
    8e72:	d065      	beq.n	8f40 <__divsi3+0x104>
    8e74:	0b03      	lsrs	r3, r0, #12
    8e76:	428b      	cmp	r3, r1
    8e78:	d319      	bcc.n	8eae <__divsi3+0x72>
    8e7a:	e000      	b.n	8e7e <__divsi3+0x42>
    8e7c:	0a09      	lsrs	r1, r1, #8
    8e7e:	0bc3      	lsrs	r3, r0, #15
    8e80:	428b      	cmp	r3, r1
    8e82:	d301      	bcc.n	8e88 <__divsi3+0x4c>
    8e84:	03cb      	lsls	r3, r1, #15
    8e86:	1ac0      	subs	r0, r0, r3
    8e88:	4152      	adcs	r2, r2
    8e8a:	0b83      	lsrs	r3, r0, #14
    8e8c:	428b      	cmp	r3, r1
    8e8e:	d301      	bcc.n	8e94 <__divsi3+0x58>
    8e90:	038b      	lsls	r3, r1, #14
    8e92:	1ac0      	subs	r0, r0, r3
    8e94:	4152      	adcs	r2, r2
    8e96:	0b43      	lsrs	r3, r0, #13
    8e98:	428b      	cmp	r3, r1
    8e9a:	d301      	bcc.n	8ea0 <__divsi3+0x64>
    8e9c:	034b      	lsls	r3, r1, #13
    8e9e:	1ac0      	subs	r0, r0, r3
    8ea0:	4152      	adcs	r2, r2
    8ea2:	0b03      	lsrs	r3, r0, #12
    8ea4:	428b      	cmp	r3, r1
    8ea6:	d301      	bcc.n	8eac <__divsi3+0x70>
    8ea8:	030b      	lsls	r3, r1, #12
    8eaa:	1ac0      	subs	r0, r0, r3
    8eac:	4152      	adcs	r2, r2
    8eae:	0ac3      	lsrs	r3, r0, #11
    8eb0:	428b      	cmp	r3, r1
    8eb2:	d301      	bcc.n	8eb8 <__divsi3+0x7c>
    8eb4:	02cb      	lsls	r3, r1, #11
    8eb6:	1ac0      	subs	r0, r0, r3
    8eb8:	4152      	adcs	r2, r2
    8eba:	0a83      	lsrs	r3, r0, #10
    8ebc:	428b      	cmp	r3, r1
    8ebe:	d301      	bcc.n	8ec4 <__divsi3+0x88>
    8ec0:	028b      	lsls	r3, r1, #10
    8ec2:	1ac0      	subs	r0, r0, r3
    8ec4:	4152      	adcs	r2, r2
    8ec6:	0a43      	lsrs	r3, r0, #9
    8ec8:	428b      	cmp	r3, r1
    8eca:	d301      	bcc.n	8ed0 <__divsi3+0x94>
    8ecc:	024b      	lsls	r3, r1, #9
    8ece:	1ac0      	subs	r0, r0, r3
    8ed0:	4152      	adcs	r2, r2
    8ed2:	0a03      	lsrs	r3, r0, #8
    8ed4:	428b      	cmp	r3, r1
    8ed6:	d301      	bcc.n	8edc <__divsi3+0xa0>
    8ed8:	020b      	lsls	r3, r1, #8
    8eda:	1ac0      	subs	r0, r0, r3
    8edc:	4152      	adcs	r2, r2
    8ede:	d2cd      	bcs.n	8e7c <__divsi3+0x40>
    8ee0:	09c3      	lsrs	r3, r0, #7
    8ee2:	428b      	cmp	r3, r1
    8ee4:	d301      	bcc.n	8eea <__divsi3+0xae>
    8ee6:	01cb      	lsls	r3, r1, #7
    8ee8:	1ac0      	subs	r0, r0, r3
    8eea:	4152      	adcs	r2, r2
    8eec:	0983      	lsrs	r3, r0, #6
    8eee:	428b      	cmp	r3, r1
    8ef0:	d301      	bcc.n	8ef6 <__divsi3+0xba>
    8ef2:	018b      	lsls	r3, r1, #6
    8ef4:	1ac0      	subs	r0, r0, r3
    8ef6:	4152      	adcs	r2, r2
    8ef8:	0943      	lsrs	r3, r0, #5
    8efa:	428b      	cmp	r3, r1
    8efc:	d301      	bcc.n	8f02 <__divsi3+0xc6>
    8efe:	014b      	lsls	r3, r1, #5
    8f00:	1ac0      	subs	r0, r0, r3
    8f02:	4152      	adcs	r2, r2
    8f04:	0903      	lsrs	r3, r0, #4
    8f06:	428b      	cmp	r3, r1
    8f08:	d301      	bcc.n	8f0e <__divsi3+0xd2>
    8f0a:	010b      	lsls	r3, r1, #4
    8f0c:	1ac0      	subs	r0, r0, r3
    8f0e:	4152      	adcs	r2, r2
    8f10:	08c3      	lsrs	r3, r0, #3
    8f12:	428b      	cmp	r3, r1
    8f14:	d301      	bcc.n	8f1a <__divsi3+0xde>
    8f16:	00cb      	lsls	r3, r1, #3
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	4152      	adcs	r2, r2
    8f1c:	0883      	lsrs	r3, r0, #2
    8f1e:	428b      	cmp	r3, r1
    8f20:	d301      	bcc.n	8f26 <__divsi3+0xea>
    8f22:	008b      	lsls	r3, r1, #2
    8f24:	1ac0      	subs	r0, r0, r3
    8f26:	4152      	adcs	r2, r2
    8f28:	0843      	lsrs	r3, r0, #1
    8f2a:	428b      	cmp	r3, r1
    8f2c:	d301      	bcc.n	8f32 <__divsi3+0xf6>
    8f2e:	004b      	lsls	r3, r1, #1
    8f30:	1ac0      	subs	r0, r0, r3
    8f32:	4152      	adcs	r2, r2
    8f34:	1a41      	subs	r1, r0, r1
    8f36:	d200      	bcs.n	8f3a <__divsi3+0xfe>
    8f38:	4601      	mov	r1, r0
    8f3a:	4152      	adcs	r2, r2
    8f3c:	4610      	mov	r0, r2
    8f3e:	4770      	bx	lr
    8f40:	e05d      	b.n	8ffe <__divsi3+0x1c2>
    8f42:	0fca      	lsrs	r2, r1, #31
    8f44:	d000      	beq.n	8f48 <__divsi3+0x10c>
    8f46:	4249      	negs	r1, r1
    8f48:	1003      	asrs	r3, r0, #32
    8f4a:	d300      	bcc.n	8f4e <__divsi3+0x112>
    8f4c:	4240      	negs	r0, r0
    8f4e:	4053      	eors	r3, r2
    8f50:	2200      	movs	r2, #0
    8f52:	469c      	mov	ip, r3
    8f54:	0903      	lsrs	r3, r0, #4
    8f56:	428b      	cmp	r3, r1
    8f58:	d32d      	bcc.n	8fb6 <__divsi3+0x17a>
    8f5a:	0a03      	lsrs	r3, r0, #8
    8f5c:	428b      	cmp	r3, r1
    8f5e:	d312      	bcc.n	8f86 <__divsi3+0x14a>
    8f60:	22fc      	movs	r2, #252	; 0xfc
    8f62:	0189      	lsls	r1, r1, #6
    8f64:	ba12      	rev	r2, r2
    8f66:	0a03      	lsrs	r3, r0, #8
    8f68:	428b      	cmp	r3, r1
    8f6a:	d30c      	bcc.n	8f86 <__divsi3+0x14a>
    8f6c:	0189      	lsls	r1, r1, #6
    8f6e:	1192      	asrs	r2, r2, #6
    8f70:	428b      	cmp	r3, r1
    8f72:	d308      	bcc.n	8f86 <__divsi3+0x14a>
    8f74:	0189      	lsls	r1, r1, #6
    8f76:	1192      	asrs	r2, r2, #6
    8f78:	428b      	cmp	r3, r1
    8f7a:	d304      	bcc.n	8f86 <__divsi3+0x14a>
    8f7c:	0189      	lsls	r1, r1, #6
    8f7e:	d03a      	beq.n	8ff6 <__divsi3+0x1ba>
    8f80:	1192      	asrs	r2, r2, #6
    8f82:	e000      	b.n	8f86 <__divsi3+0x14a>
    8f84:	0989      	lsrs	r1, r1, #6
    8f86:	09c3      	lsrs	r3, r0, #7
    8f88:	428b      	cmp	r3, r1
    8f8a:	d301      	bcc.n	8f90 <__divsi3+0x154>
    8f8c:	01cb      	lsls	r3, r1, #7
    8f8e:	1ac0      	subs	r0, r0, r3
    8f90:	4152      	adcs	r2, r2
    8f92:	0983      	lsrs	r3, r0, #6
    8f94:	428b      	cmp	r3, r1
    8f96:	d301      	bcc.n	8f9c <__divsi3+0x160>
    8f98:	018b      	lsls	r3, r1, #6
    8f9a:	1ac0      	subs	r0, r0, r3
    8f9c:	4152      	adcs	r2, r2
    8f9e:	0943      	lsrs	r3, r0, #5
    8fa0:	428b      	cmp	r3, r1
    8fa2:	d301      	bcc.n	8fa8 <__divsi3+0x16c>
    8fa4:	014b      	lsls	r3, r1, #5
    8fa6:	1ac0      	subs	r0, r0, r3
    8fa8:	4152      	adcs	r2, r2
    8faa:	0903      	lsrs	r3, r0, #4
    8fac:	428b      	cmp	r3, r1
    8fae:	d301      	bcc.n	8fb4 <__divsi3+0x178>
    8fb0:	010b      	lsls	r3, r1, #4
    8fb2:	1ac0      	subs	r0, r0, r3
    8fb4:	4152      	adcs	r2, r2
    8fb6:	08c3      	lsrs	r3, r0, #3
    8fb8:	428b      	cmp	r3, r1
    8fba:	d301      	bcc.n	8fc0 <__divsi3+0x184>
    8fbc:	00cb      	lsls	r3, r1, #3
    8fbe:	1ac0      	subs	r0, r0, r3
    8fc0:	4152      	adcs	r2, r2
    8fc2:	0883      	lsrs	r3, r0, #2
    8fc4:	428b      	cmp	r3, r1
    8fc6:	d301      	bcc.n	8fcc <__divsi3+0x190>
    8fc8:	008b      	lsls	r3, r1, #2
    8fca:	1ac0      	subs	r0, r0, r3
    8fcc:	4152      	adcs	r2, r2
    8fce:	d2d9      	bcs.n	8f84 <__divsi3+0x148>
    8fd0:	0843      	lsrs	r3, r0, #1
    8fd2:	428b      	cmp	r3, r1
    8fd4:	d301      	bcc.n	8fda <__divsi3+0x19e>
    8fd6:	004b      	lsls	r3, r1, #1
    8fd8:	1ac0      	subs	r0, r0, r3
    8fda:	4152      	adcs	r2, r2
    8fdc:	1a41      	subs	r1, r0, r1
    8fde:	d200      	bcs.n	8fe2 <__divsi3+0x1a6>
    8fe0:	4601      	mov	r1, r0
    8fe2:	4663      	mov	r3, ip
    8fe4:	4152      	adcs	r2, r2
    8fe6:	105b      	asrs	r3, r3, #1
    8fe8:	4610      	mov	r0, r2
    8fea:	d301      	bcc.n	8ff0 <__divsi3+0x1b4>
    8fec:	4240      	negs	r0, r0
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d500      	bpl.n	8ff4 <__divsi3+0x1b8>
    8ff2:	4249      	negs	r1, r1
    8ff4:	4770      	bx	lr
    8ff6:	4663      	mov	r3, ip
    8ff8:	105b      	asrs	r3, r3, #1
    8ffa:	d300      	bcc.n	8ffe <__divsi3+0x1c2>
    8ffc:	4240      	negs	r0, r0
    8ffe:	b501      	push	{r0, lr}
    9000:	2000      	movs	r0, #0
    9002:	f000 f805 	bl	9010 <__aeabi_idiv0>
    9006:	bd02      	pop	{r1, pc}

00009008 <__aeabi_idivmod>:
    9008:	2900      	cmp	r1, #0
    900a:	d0f8      	beq.n	8ffe <__divsi3+0x1c2>
    900c:	e716      	b.n	8e3c <__divsi3>
    900e:	4770      	bx	lr

00009010 <__aeabi_idiv0>:
    9010:	4770      	bx	lr
    9012:	46c0      	nop			; (mov r8, r8)

00009014 <__aeabi_cdrcmple>:
    9014:	4684      	mov	ip, r0
    9016:	1c10      	adds	r0, r2, #0
    9018:	4662      	mov	r2, ip
    901a:	468c      	mov	ip, r1
    901c:	1c19      	adds	r1, r3, #0
    901e:	4663      	mov	r3, ip
    9020:	e000      	b.n	9024 <__aeabi_cdcmpeq>
    9022:	46c0      	nop			; (mov r8, r8)

00009024 <__aeabi_cdcmpeq>:
    9024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9026:	f001 fdff 	bl	ac28 <__ledf2>
    902a:	2800      	cmp	r0, #0
    902c:	d401      	bmi.n	9032 <__aeabi_cdcmpeq+0xe>
    902e:	2100      	movs	r1, #0
    9030:	42c8      	cmn	r0, r1
    9032:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009034 <__aeabi_dcmpeq>:
    9034:	b510      	push	{r4, lr}
    9036:	f001 fd59 	bl	aaec <__eqdf2>
    903a:	4240      	negs	r0, r0
    903c:	3001      	adds	r0, #1
    903e:	bd10      	pop	{r4, pc}

00009040 <__aeabi_dcmplt>:
    9040:	b510      	push	{r4, lr}
    9042:	f001 fdf1 	bl	ac28 <__ledf2>
    9046:	2800      	cmp	r0, #0
    9048:	db01      	blt.n	904e <__aeabi_dcmplt+0xe>
    904a:	2000      	movs	r0, #0
    904c:	bd10      	pop	{r4, pc}
    904e:	2001      	movs	r0, #1
    9050:	bd10      	pop	{r4, pc}
    9052:	46c0      	nop			; (mov r8, r8)

00009054 <__aeabi_dcmple>:
    9054:	b510      	push	{r4, lr}
    9056:	f001 fde7 	bl	ac28 <__ledf2>
    905a:	2800      	cmp	r0, #0
    905c:	dd01      	ble.n	9062 <__aeabi_dcmple+0xe>
    905e:	2000      	movs	r0, #0
    9060:	bd10      	pop	{r4, pc}
    9062:	2001      	movs	r0, #1
    9064:	bd10      	pop	{r4, pc}
    9066:	46c0      	nop			; (mov r8, r8)

00009068 <__aeabi_dcmpgt>:
    9068:	b510      	push	{r4, lr}
    906a:	f001 fd79 	bl	ab60 <__gedf2>
    906e:	2800      	cmp	r0, #0
    9070:	dc01      	bgt.n	9076 <__aeabi_dcmpgt+0xe>
    9072:	2000      	movs	r0, #0
    9074:	bd10      	pop	{r4, pc}
    9076:	2001      	movs	r0, #1
    9078:	bd10      	pop	{r4, pc}
    907a:	46c0      	nop			; (mov r8, r8)

0000907c <__aeabi_dcmpge>:
    907c:	b510      	push	{r4, lr}
    907e:	f001 fd6f 	bl	ab60 <__gedf2>
    9082:	2800      	cmp	r0, #0
    9084:	da01      	bge.n	908a <__aeabi_dcmpge+0xe>
    9086:	2000      	movs	r0, #0
    9088:	bd10      	pop	{r4, pc}
    908a:	2001      	movs	r0, #1
    908c:	bd10      	pop	{r4, pc}
    908e:	46c0      	nop			; (mov r8, r8)

00009090 <__clzsi2>:
    9090:	211c      	movs	r1, #28
    9092:	2301      	movs	r3, #1
    9094:	041b      	lsls	r3, r3, #16
    9096:	4298      	cmp	r0, r3
    9098:	d301      	bcc.n	909e <__clzsi2+0xe>
    909a:	0c00      	lsrs	r0, r0, #16
    909c:	3910      	subs	r1, #16
    909e:	0a1b      	lsrs	r3, r3, #8
    90a0:	4298      	cmp	r0, r3
    90a2:	d301      	bcc.n	90a8 <__clzsi2+0x18>
    90a4:	0a00      	lsrs	r0, r0, #8
    90a6:	3908      	subs	r1, #8
    90a8:	091b      	lsrs	r3, r3, #4
    90aa:	4298      	cmp	r0, r3
    90ac:	d301      	bcc.n	90b2 <__clzsi2+0x22>
    90ae:	0900      	lsrs	r0, r0, #4
    90b0:	3904      	subs	r1, #4
    90b2:	a202      	add	r2, pc, #8	; (adr r2, 90bc <__clzsi2+0x2c>)
    90b4:	5c10      	ldrb	r0, [r2, r0]
    90b6:	1840      	adds	r0, r0, r1
    90b8:	4770      	bx	lr
    90ba:	46c0      	nop			; (mov r8, r8)
    90bc:	02020304 	.word	0x02020304
    90c0:	01010101 	.word	0x01010101
	...

000090cc <__ctzsi2>:
    90cc:	4241      	negs	r1, r0
    90ce:	4008      	ands	r0, r1
    90d0:	211c      	movs	r1, #28
    90d2:	2301      	movs	r3, #1
    90d4:	041b      	lsls	r3, r3, #16
    90d6:	4298      	cmp	r0, r3
    90d8:	d301      	bcc.n	90de <__ctzsi2+0x12>
    90da:	0c00      	lsrs	r0, r0, #16
    90dc:	3910      	subs	r1, #16
    90de:	0a1b      	lsrs	r3, r3, #8
    90e0:	4298      	cmp	r0, r3
    90e2:	d301      	bcc.n	90e8 <__ctzsi2+0x1c>
    90e4:	0a00      	lsrs	r0, r0, #8
    90e6:	3908      	subs	r1, #8
    90e8:	091b      	lsrs	r3, r3, #4
    90ea:	4298      	cmp	r0, r3
    90ec:	d301      	bcc.n	90f2 <__ctzsi2+0x26>
    90ee:	0900      	lsrs	r0, r0, #4
    90f0:	3904      	subs	r1, #4
    90f2:	a202      	add	r2, pc, #8	; (adr r2, 90fc <__ctzsi2+0x30>)
    90f4:	5c10      	ldrb	r0, [r2, r0]
    90f6:	1a40      	subs	r0, r0, r1
    90f8:	4770      	bx	lr
    90fa:	46c0      	nop			; (mov r8, r8)
    90fc:	1d1d1c1b 	.word	0x1d1d1c1b
    9100:	1e1e1e1e 	.word	0x1e1e1e1e
    9104:	1f1f1f1f 	.word	0x1f1f1f1f
    9108:	1f1f1f1f 	.word	0x1f1f1f1f

0000910c <__aeabi_lmul>:
    910c:	b5f0      	push	{r4, r5, r6, r7, lr}
    910e:	46ce      	mov	lr, r9
    9110:	4647      	mov	r7, r8
    9112:	0415      	lsls	r5, r2, #16
    9114:	0c2d      	lsrs	r5, r5, #16
    9116:	002e      	movs	r6, r5
    9118:	b580      	push	{r7, lr}
    911a:	0407      	lsls	r7, r0, #16
    911c:	0c14      	lsrs	r4, r2, #16
    911e:	0c3f      	lsrs	r7, r7, #16
    9120:	4699      	mov	r9, r3
    9122:	0c03      	lsrs	r3, r0, #16
    9124:	437e      	muls	r6, r7
    9126:	435d      	muls	r5, r3
    9128:	4367      	muls	r7, r4
    912a:	4363      	muls	r3, r4
    912c:	197f      	adds	r7, r7, r5
    912e:	0c34      	lsrs	r4, r6, #16
    9130:	19e4      	adds	r4, r4, r7
    9132:	469c      	mov	ip, r3
    9134:	42a5      	cmp	r5, r4
    9136:	d903      	bls.n	9140 <__aeabi_lmul+0x34>
    9138:	2380      	movs	r3, #128	; 0x80
    913a:	025b      	lsls	r3, r3, #9
    913c:	4698      	mov	r8, r3
    913e:	44c4      	add	ip, r8
    9140:	464b      	mov	r3, r9
    9142:	4351      	muls	r1, r2
    9144:	4343      	muls	r3, r0
    9146:	0436      	lsls	r6, r6, #16
    9148:	0c36      	lsrs	r6, r6, #16
    914a:	0c25      	lsrs	r5, r4, #16
    914c:	0424      	lsls	r4, r4, #16
    914e:	4465      	add	r5, ip
    9150:	19a4      	adds	r4, r4, r6
    9152:	1859      	adds	r1, r3, r1
    9154:	1949      	adds	r1, r1, r5
    9156:	0020      	movs	r0, r4
    9158:	bc0c      	pop	{r2, r3}
    915a:	4690      	mov	r8, r2
    915c:	4699      	mov	r9, r3
    915e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009160 <__aeabi_f2uiz>:
    9160:	219e      	movs	r1, #158	; 0x9e
    9162:	b510      	push	{r4, lr}
    9164:	05c9      	lsls	r1, r1, #23
    9166:	1c04      	adds	r4, r0, #0
    9168:	f002 fcd8 	bl	bb1c <__aeabi_fcmpge>
    916c:	2800      	cmp	r0, #0
    916e:	d103      	bne.n	9178 <__aeabi_f2uiz+0x18>
    9170:	1c20      	adds	r0, r4, #0
    9172:	f000 fdc1 	bl	9cf8 <__aeabi_f2iz>
    9176:	bd10      	pop	{r4, pc}
    9178:	219e      	movs	r1, #158	; 0x9e
    917a:	1c20      	adds	r0, r4, #0
    917c:	05c9      	lsls	r1, r1, #23
    917e:	f000 fc1f 	bl	99c0 <__aeabi_fsub>
    9182:	f000 fdb9 	bl	9cf8 <__aeabi_f2iz>
    9186:	2380      	movs	r3, #128	; 0x80
    9188:	061b      	lsls	r3, r3, #24
    918a:	469c      	mov	ip, r3
    918c:	4460      	add	r0, ip
    918e:	e7f2      	b.n	9176 <__aeabi_f2uiz+0x16>

00009190 <__aeabi_d2uiz>:
    9190:	b570      	push	{r4, r5, r6, lr}
    9192:	2200      	movs	r2, #0
    9194:	4b0c      	ldr	r3, [pc, #48]	; (91c8 <__aeabi_d2uiz+0x38>)
    9196:	0004      	movs	r4, r0
    9198:	000d      	movs	r5, r1
    919a:	f7ff ff6f 	bl	907c <__aeabi_dcmpge>
    919e:	2800      	cmp	r0, #0
    91a0:	d104      	bne.n	91ac <__aeabi_d2uiz+0x1c>
    91a2:	0020      	movs	r0, r4
    91a4:	0029      	movs	r1, r5
    91a6:	f002 fb37 	bl	b818 <__aeabi_d2iz>
    91aa:	bd70      	pop	{r4, r5, r6, pc}
    91ac:	4b06      	ldr	r3, [pc, #24]	; (91c8 <__aeabi_d2uiz+0x38>)
    91ae:	2200      	movs	r2, #0
    91b0:	0020      	movs	r0, r4
    91b2:	0029      	movs	r1, r5
    91b4:	f002 f81a 	bl	b1ec <__aeabi_dsub>
    91b8:	f002 fb2e 	bl	b818 <__aeabi_d2iz>
    91bc:	2380      	movs	r3, #128	; 0x80
    91be:	061b      	lsls	r3, r3, #24
    91c0:	469c      	mov	ip, r3
    91c2:	4460      	add	r0, ip
    91c4:	e7f1      	b.n	91aa <__aeabi_d2uiz+0x1a>
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	41e00000 	.word	0x41e00000

000091cc <__aeabi_fadd>:
    91cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ce:	46c6      	mov	lr, r8
    91d0:	024e      	lsls	r6, r1, #9
    91d2:	0247      	lsls	r7, r0, #9
    91d4:	0a76      	lsrs	r6, r6, #9
    91d6:	0a7b      	lsrs	r3, r7, #9
    91d8:	0044      	lsls	r4, r0, #1
    91da:	0fc5      	lsrs	r5, r0, #31
    91dc:	00f7      	lsls	r7, r6, #3
    91de:	0048      	lsls	r0, r1, #1
    91e0:	4698      	mov	r8, r3
    91e2:	b500      	push	{lr}
    91e4:	0e24      	lsrs	r4, r4, #24
    91e6:	002a      	movs	r2, r5
    91e8:	00db      	lsls	r3, r3, #3
    91ea:	0e00      	lsrs	r0, r0, #24
    91ec:	0fc9      	lsrs	r1, r1, #31
    91ee:	46bc      	mov	ip, r7
    91f0:	428d      	cmp	r5, r1
    91f2:	d067      	beq.n	92c4 <__aeabi_fadd+0xf8>
    91f4:	1a22      	subs	r2, r4, r0
    91f6:	2a00      	cmp	r2, #0
    91f8:	dc00      	bgt.n	91fc <__aeabi_fadd+0x30>
    91fa:	e0a5      	b.n	9348 <__aeabi_fadd+0x17c>
    91fc:	2800      	cmp	r0, #0
    91fe:	d13a      	bne.n	9276 <__aeabi_fadd+0xaa>
    9200:	2f00      	cmp	r7, #0
    9202:	d100      	bne.n	9206 <__aeabi_fadd+0x3a>
    9204:	e093      	b.n	932e <__aeabi_fadd+0x162>
    9206:	1e51      	subs	r1, r2, #1
    9208:	2900      	cmp	r1, #0
    920a:	d000      	beq.n	920e <__aeabi_fadd+0x42>
    920c:	e0bc      	b.n	9388 <__aeabi_fadd+0x1bc>
    920e:	2401      	movs	r4, #1
    9210:	1bdb      	subs	r3, r3, r7
    9212:	015a      	lsls	r2, r3, #5
    9214:	d546      	bpl.n	92a4 <__aeabi_fadd+0xd8>
    9216:	019b      	lsls	r3, r3, #6
    9218:	099e      	lsrs	r6, r3, #6
    921a:	0030      	movs	r0, r6
    921c:	f7ff ff38 	bl	9090 <__clzsi2>
    9220:	3805      	subs	r0, #5
    9222:	4086      	lsls	r6, r0
    9224:	4284      	cmp	r4, r0
    9226:	dd00      	ble.n	922a <__aeabi_fadd+0x5e>
    9228:	e09d      	b.n	9366 <__aeabi_fadd+0x19a>
    922a:	1b04      	subs	r4, r0, r4
    922c:	0032      	movs	r2, r6
    922e:	2020      	movs	r0, #32
    9230:	3401      	adds	r4, #1
    9232:	40e2      	lsrs	r2, r4
    9234:	1b04      	subs	r4, r0, r4
    9236:	40a6      	lsls	r6, r4
    9238:	0033      	movs	r3, r6
    923a:	1e5e      	subs	r6, r3, #1
    923c:	41b3      	sbcs	r3, r6
    923e:	2400      	movs	r4, #0
    9240:	4313      	orrs	r3, r2
    9242:	075a      	lsls	r2, r3, #29
    9244:	d004      	beq.n	9250 <__aeabi_fadd+0x84>
    9246:	220f      	movs	r2, #15
    9248:	401a      	ands	r2, r3
    924a:	2a04      	cmp	r2, #4
    924c:	d000      	beq.n	9250 <__aeabi_fadd+0x84>
    924e:	3304      	adds	r3, #4
    9250:	015a      	lsls	r2, r3, #5
    9252:	d529      	bpl.n	92a8 <__aeabi_fadd+0xdc>
    9254:	3401      	adds	r4, #1
    9256:	2cff      	cmp	r4, #255	; 0xff
    9258:	d100      	bne.n	925c <__aeabi_fadd+0x90>
    925a:	e081      	b.n	9360 <__aeabi_fadd+0x194>
    925c:	002a      	movs	r2, r5
    925e:	019b      	lsls	r3, r3, #6
    9260:	0a5b      	lsrs	r3, r3, #9
    9262:	b2e4      	uxtb	r4, r4
    9264:	025b      	lsls	r3, r3, #9
    9266:	05e4      	lsls	r4, r4, #23
    9268:	0a58      	lsrs	r0, r3, #9
    926a:	07d2      	lsls	r2, r2, #31
    926c:	4320      	orrs	r0, r4
    926e:	4310      	orrs	r0, r2
    9270:	bc04      	pop	{r2}
    9272:	4690      	mov	r8, r2
    9274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9276:	2cff      	cmp	r4, #255	; 0xff
    9278:	d0e3      	beq.n	9242 <__aeabi_fadd+0x76>
    927a:	2180      	movs	r1, #128	; 0x80
    927c:	0038      	movs	r0, r7
    927e:	04c9      	lsls	r1, r1, #19
    9280:	4308      	orrs	r0, r1
    9282:	4684      	mov	ip, r0
    9284:	2a1b      	cmp	r2, #27
    9286:	dd00      	ble.n	928a <__aeabi_fadd+0xbe>
    9288:	e082      	b.n	9390 <__aeabi_fadd+0x1c4>
    928a:	2020      	movs	r0, #32
    928c:	4661      	mov	r1, ip
    928e:	40d1      	lsrs	r1, r2
    9290:	1a82      	subs	r2, r0, r2
    9292:	4660      	mov	r0, ip
    9294:	4090      	lsls	r0, r2
    9296:	0002      	movs	r2, r0
    9298:	1e50      	subs	r0, r2, #1
    929a:	4182      	sbcs	r2, r0
    929c:	430a      	orrs	r2, r1
    929e:	1a9b      	subs	r3, r3, r2
    92a0:	015a      	lsls	r2, r3, #5
    92a2:	d4b8      	bmi.n	9216 <__aeabi_fadd+0x4a>
    92a4:	075a      	lsls	r2, r3, #29
    92a6:	d1ce      	bne.n	9246 <__aeabi_fadd+0x7a>
    92a8:	08de      	lsrs	r6, r3, #3
    92aa:	002a      	movs	r2, r5
    92ac:	2cff      	cmp	r4, #255	; 0xff
    92ae:	d13a      	bne.n	9326 <__aeabi_fadd+0x15a>
    92b0:	2e00      	cmp	r6, #0
    92b2:	d100      	bne.n	92b6 <__aeabi_fadd+0xea>
    92b4:	e0ae      	b.n	9414 <__aeabi_fadd+0x248>
    92b6:	2380      	movs	r3, #128	; 0x80
    92b8:	03db      	lsls	r3, r3, #15
    92ba:	4333      	orrs	r3, r6
    92bc:	025b      	lsls	r3, r3, #9
    92be:	0a5b      	lsrs	r3, r3, #9
    92c0:	24ff      	movs	r4, #255	; 0xff
    92c2:	e7cf      	b.n	9264 <__aeabi_fadd+0x98>
    92c4:	1a21      	subs	r1, r4, r0
    92c6:	2900      	cmp	r1, #0
    92c8:	dd52      	ble.n	9370 <__aeabi_fadd+0x1a4>
    92ca:	2800      	cmp	r0, #0
    92cc:	d031      	beq.n	9332 <__aeabi_fadd+0x166>
    92ce:	2cff      	cmp	r4, #255	; 0xff
    92d0:	d0b7      	beq.n	9242 <__aeabi_fadd+0x76>
    92d2:	2080      	movs	r0, #128	; 0x80
    92d4:	003e      	movs	r6, r7
    92d6:	04c0      	lsls	r0, r0, #19
    92d8:	4306      	orrs	r6, r0
    92da:	46b4      	mov	ip, r6
    92dc:	291b      	cmp	r1, #27
    92de:	dd00      	ble.n	92e2 <__aeabi_fadd+0x116>
    92e0:	e0aa      	b.n	9438 <__aeabi_fadd+0x26c>
    92e2:	2620      	movs	r6, #32
    92e4:	4660      	mov	r0, ip
    92e6:	40c8      	lsrs	r0, r1
    92e8:	1a71      	subs	r1, r6, r1
    92ea:	4666      	mov	r6, ip
    92ec:	408e      	lsls	r6, r1
    92ee:	0031      	movs	r1, r6
    92f0:	1e4e      	subs	r6, r1, #1
    92f2:	41b1      	sbcs	r1, r6
    92f4:	4301      	orrs	r1, r0
    92f6:	185b      	adds	r3, r3, r1
    92f8:	0159      	lsls	r1, r3, #5
    92fa:	d5d3      	bpl.n	92a4 <__aeabi_fadd+0xd8>
    92fc:	3401      	adds	r4, #1
    92fe:	2cff      	cmp	r4, #255	; 0xff
    9300:	d100      	bne.n	9304 <__aeabi_fadd+0x138>
    9302:	e087      	b.n	9414 <__aeabi_fadd+0x248>
    9304:	2201      	movs	r2, #1
    9306:	4978      	ldr	r1, [pc, #480]	; (94e8 <__aeabi_fadd+0x31c>)
    9308:	401a      	ands	r2, r3
    930a:	085b      	lsrs	r3, r3, #1
    930c:	400b      	ands	r3, r1
    930e:	4313      	orrs	r3, r2
    9310:	e797      	b.n	9242 <__aeabi_fadd+0x76>
    9312:	2c00      	cmp	r4, #0
    9314:	d000      	beq.n	9318 <__aeabi_fadd+0x14c>
    9316:	e0a7      	b.n	9468 <__aeabi_fadd+0x29c>
    9318:	2b00      	cmp	r3, #0
    931a:	d000      	beq.n	931e <__aeabi_fadd+0x152>
    931c:	e0b6      	b.n	948c <__aeabi_fadd+0x2c0>
    931e:	1e3b      	subs	r3, r7, #0
    9320:	d162      	bne.n	93e8 <__aeabi_fadd+0x21c>
    9322:	2600      	movs	r6, #0
    9324:	2200      	movs	r2, #0
    9326:	0273      	lsls	r3, r6, #9
    9328:	0a5b      	lsrs	r3, r3, #9
    932a:	b2e4      	uxtb	r4, r4
    932c:	e79a      	b.n	9264 <__aeabi_fadd+0x98>
    932e:	0014      	movs	r4, r2
    9330:	e787      	b.n	9242 <__aeabi_fadd+0x76>
    9332:	2f00      	cmp	r7, #0
    9334:	d04d      	beq.n	93d2 <__aeabi_fadd+0x206>
    9336:	1e48      	subs	r0, r1, #1
    9338:	2800      	cmp	r0, #0
    933a:	d157      	bne.n	93ec <__aeabi_fadd+0x220>
    933c:	4463      	add	r3, ip
    933e:	2401      	movs	r4, #1
    9340:	015a      	lsls	r2, r3, #5
    9342:	d5af      	bpl.n	92a4 <__aeabi_fadd+0xd8>
    9344:	2402      	movs	r4, #2
    9346:	e7dd      	b.n	9304 <__aeabi_fadd+0x138>
    9348:	2a00      	cmp	r2, #0
    934a:	d124      	bne.n	9396 <__aeabi_fadd+0x1ca>
    934c:	1c62      	adds	r2, r4, #1
    934e:	b2d2      	uxtb	r2, r2
    9350:	2a01      	cmp	r2, #1
    9352:	ddde      	ble.n	9312 <__aeabi_fadd+0x146>
    9354:	1bde      	subs	r6, r3, r7
    9356:	0172      	lsls	r2, r6, #5
    9358:	d535      	bpl.n	93c6 <__aeabi_fadd+0x1fa>
    935a:	1afe      	subs	r6, r7, r3
    935c:	000d      	movs	r5, r1
    935e:	e75c      	b.n	921a <__aeabi_fadd+0x4e>
    9360:	002a      	movs	r2, r5
    9362:	2300      	movs	r3, #0
    9364:	e77e      	b.n	9264 <__aeabi_fadd+0x98>
    9366:	0033      	movs	r3, r6
    9368:	4a60      	ldr	r2, [pc, #384]	; (94ec <__aeabi_fadd+0x320>)
    936a:	1a24      	subs	r4, r4, r0
    936c:	4013      	ands	r3, r2
    936e:	e768      	b.n	9242 <__aeabi_fadd+0x76>
    9370:	2900      	cmp	r1, #0
    9372:	d163      	bne.n	943c <__aeabi_fadd+0x270>
    9374:	1c61      	adds	r1, r4, #1
    9376:	b2c8      	uxtb	r0, r1
    9378:	2801      	cmp	r0, #1
    937a:	dd4e      	ble.n	941a <__aeabi_fadd+0x24e>
    937c:	29ff      	cmp	r1, #255	; 0xff
    937e:	d049      	beq.n	9414 <__aeabi_fadd+0x248>
    9380:	4463      	add	r3, ip
    9382:	085b      	lsrs	r3, r3, #1
    9384:	000c      	movs	r4, r1
    9386:	e75c      	b.n	9242 <__aeabi_fadd+0x76>
    9388:	2aff      	cmp	r2, #255	; 0xff
    938a:	d041      	beq.n	9410 <__aeabi_fadd+0x244>
    938c:	000a      	movs	r2, r1
    938e:	e779      	b.n	9284 <__aeabi_fadd+0xb8>
    9390:	2201      	movs	r2, #1
    9392:	1a9b      	subs	r3, r3, r2
    9394:	e784      	b.n	92a0 <__aeabi_fadd+0xd4>
    9396:	2c00      	cmp	r4, #0
    9398:	d01d      	beq.n	93d6 <__aeabi_fadd+0x20a>
    939a:	28ff      	cmp	r0, #255	; 0xff
    939c:	d022      	beq.n	93e4 <__aeabi_fadd+0x218>
    939e:	2480      	movs	r4, #128	; 0x80
    93a0:	04e4      	lsls	r4, r4, #19
    93a2:	4252      	negs	r2, r2
    93a4:	4323      	orrs	r3, r4
    93a6:	2a1b      	cmp	r2, #27
    93a8:	dd00      	ble.n	93ac <__aeabi_fadd+0x1e0>
    93aa:	e08a      	b.n	94c2 <__aeabi_fadd+0x2f6>
    93ac:	001c      	movs	r4, r3
    93ae:	2520      	movs	r5, #32
    93b0:	40d4      	lsrs	r4, r2
    93b2:	1aaa      	subs	r2, r5, r2
    93b4:	4093      	lsls	r3, r2
    93b6:	1e5a      	subs	r2, r3, #1
    93b8:	4193      	sbcs	r3, r2
    93ba:	4323      	orrs	r3, r4
    93bc:	4662      	mov	r2, ip
    93be:	0004      	movs	r4, r0
    93c0:	1ad3      	subs	r3, r2, r3
    93c2:	000d      	movs	r5, r1
    93c4:	e725      	b.n	9212 <__aeabi_fadd+0x46>
    93c6:	2e00      	cmp	r6, #0
    93c8:	d000      	beq.n	93cc <__aeabi_fadd+0x200>
    93ca:	e726      	b.n	921a <__aeabi_fadd+0x4e>
    93cc:	2200      	movs	r2, #0
    93ce:	2400      	movs	r4, #0
    93d0:	e7a9      	b.n	9326 <__aeabi_fadd+0x15a>
    93d2:	000c      	movs	r4, r1
    93d4:	e735      	b.n	9242 <__aeabi_fadd+0x76>
    93d6:	2b00      	cmp	r3, #0
    93d8:	d04d      	beq.n	9476 <__aeabi_fadd+0x2aa>
    93da:	43d2      	mvns	r2, r2
    93dc:	2a00      	cmp	r2, #0
    93de:	d0ed      	beq.n	93bc <__aeabi_fadd+0x1f0>
    93e0:	28ff      	cmp	r0, #255	; 0xff
    93e2:	d1e0      	bne.n	93a6 <__aeabi_fadd+0x1da>
    93e4:	4663      	mov	r3, ip
    93e6:	24ff      	movs	r4, #255	; 0xff
    93e8:	000d      	movs	r5, r1
    93ea:	e72a      	b.n	9242 <__aeabi_fadd+0x76>
    93ec:	29ff      	cmp	r1, #255	; 0xff
    93ee:	d00f      	beq.n	9410 <__aeabi_fadd+0x244>
    93f0:	0001      	movs	r1, r0
    93f2:	e773      	b.n	92dc <__aeabi_fadd+0x110>
    93f4:	2b00      	cmp	r3, #0
    93f6:	d061      	beq.n	94bc <__aeabi_fadd+0x2f0>
    93f8:	24ff      	movs	r4, #255	; 0xff
    93fa:	2f00      	cmp	r7, #0
    93fc:	d100      	bne.n	9400 <__aeabi_fadd+0x234>
    93fe:	e720      	b.n	9242 <__aeabi_fadd+0x76>
    9400:	2280      	movs	r2, #128	; 0x80
    9402:	4641      	mov	r1, r8
    9404:	03d2      	lsls	r2, r2, #15
    9406:	4211      	tst	r1, r2
    9408:	d002      	beq.n	9410 <__aeabi_fadd+0x244>
    940a:	4216      	tst	r6, r2
    940c:	d100      	bne.n	9410 <__aeabi_fadd+0x244>
    940e:	003b      	movs	r3, r7
    9410:	24ff      	movs	r4, #255	; 0xff
    9412:	e716      	b.n	9242 <__aeabi_fadd+0x76>
    9414:	24ff      	movs	r4, #255	; 0xff
    9416:	2300      	movs	r3, #0
    9418:	e724      	b.n	9264 <__aeabi_fadd+0x98>
    941a:	2c00      	cmp	r4, #0
    941c:	d1ea      	bne.n	93f4 <__aeabi_fadd+0x228>
    941e:	2b00      	cmp	r3, #0
    9420:	d058      	beq.n	94d4 <__aeabi_fadd+0x308>
    9422:	2f00      	cmp	r7, #0
    9424:	d100      	bne.n	9428 <__aeabi_fadd+0x25c>
    9426:	e70c      	b.n	9242 <__aeabi_fadd+0x76>
    9428:	4463      	add	r3, ip
    942a:	015a      	lsls	r2, r3, #5
    942c:	d400      	bmi.n	9430 <__aeabi_fadd+0x264>
    942e:	e739      	b.n	92a4 <__aeabi_fadd+0xd8>
    9430:	4a2e      	ldr	r2, [pc, #184]	; (94ec <__aeabi_fadd+0x320>)
    9432:	000c      	movs	r4, r1
    9434:	4013      	ands	r3, r2
    9436:	e704      	b.n	9242 <__aeabi_fadd+0x76>
    9438:	2101      	movs	r1, #1
    943a:	e75c      	b.n	92f6 <__aeabi_fadd+0x12a>
    943c:	2c00      	cmp	r4, #0
    943e:	d11e      	bne.n	947e <__aeabi_fadd+0x2b2>
    9440:	2b00      	cmp	r3, #0
    9442:	d040      	beq.n	94c6 <__aeabi_fadd+0x2fa>
    9444:	43c9      	mvns	r1, r1
    9446:	2900      	cmp	r1, #0
    9448:	d00b      	beq.n	9462 <__aeabi_fadd+0x296>
    944a:	28ff      	cmp	r0, #255	; 0xff
    944c:	d036      	beq.n	94bc <__aeabi_fadd+0x2f0>
    944e:	291b      	cmp	r1, #27
    9450:	dc47      	bgt.n	94e2 <__aeabi_fadd+0x316>
    9452:	001c      	movs	r4, r3
    9454:	2620      	movs	r6, #32
    9456:	40cc      	lsrs	r4, r1
    9458:	1a71      	subs	r1, r6, r1
    945a:	408b      	lsls	r3, r1
    945c:	1e59      	subs	r1, r3, #1
    945e:	418b      	sbcs	r3, r1
    9460:	4323      	orrs	r3, r4
    9462:	4463      	add	r3, ip
    9464:	0004      	movs	r4, r0
    9466:	e747      	b.n	92f8 <__aeabi_fadd+0x12c>
    9468:	2b00      	cmp	r3, #0
    946a:	d118      	bne.n	949e <__aeabi_fadd+0x2d2>
    946c:	1e3b      	subs	r3, r7, #0
    946e:	d02d      	beq.n	94cc <__aeabi_fadd+0x300>
    9470:	000d      	movs	r5, r1
    9472:	24ff      	movs	r4, #255	; 0xff
    9474:	e6e5      	b.n	9242 <__aeabi_fadd+0x76>
    9476:	003b      	movs	r3, r7
    9478:	0004      	movs	r4, r0
    947a:	000d      	movs	r5, r1
    947c:	e6e1      	b.n	9242 <__aeabi_fadd+0x76>
    947e:	28ff      	cmp	r0, #255	; 0xff
    9480:	d01c      	beq.n	94bc <__aeabi_fadd+0x2f0>
    9482:	2480      	movs	r4, #128	; 0x80
    9484:	04e4      	lsls	r4, r4, #19
    9486:	4249      	negs	r1, r1
    9488:	4323      	orrs	r3, r4
    948a:	e7e0      	b.n	944e <__aeabi_fadd+0x282>
    948c:	2f00      	cmp	r7, #0
    948e:	d100      	bne.n	9492 <__aeabi_fadd+0x2c6>
    9490:	e6d7      	b.n	9242 <__aeabi_fadd+0x76>
    9492:	1bde      	subs	r6, r3, r7
    9494:	0172      	lsls	r2, r6, #5
    9496:	d51f      	bpl.n	94d8 <__aeabi_fadd+0x30c>
    9498:	1afb      	subs	r3, r7, r3
    949a:	000d      	movs	r5, r1
    949c:	e6d1      	b.n	9242 <__aeabi_fadd+0x76>
    949e:	24ff      	movs	r4, #255	; 0xff
    94a0:	2f00      	cmp	r7, #0
    94a2:	d100      	bne.n	94a6 <__aeabi_fadd+0x2da>
    94a4:	e6cd      	b.n	9242 <__aeabi_fadd+0x76>
    94a6:	2280      	movs	r2, #128	; 0x80
    94a8:	4640      	mov	r0, r8
    94aa:	03d2      	lsls	r2, r2, #15
    94ac:	4210      	tst	r0, r2
    94ae:	d0af      	beq.n	9410 <__aeabi_fadd+0x244>
    94b0:	4216      	tst	r6, r2
    94b2:	d1ad      	bne.n	9410 <__aeabi_fadd+0x244>
    94b4:	003b      	movs	r3, r7
    94b6:	000d      	movs	r5, r1
    94b8:	24ff      	movs	r4, #255	; 0xff
    94ba:	e6c2      	b.n	9242 <__aeabi_fadd+0x76>
    94bc:	4663      	mov	r3, ip
    94be:	24ff      	movs	r4, #255	; 0xff
    94c0:	e6bf      	b.n	9242 <__aeabi_fadd+0x76>
    94c2:	2301      	movs	r3, #1
    94c4:	e77a      	b.n	93bc <__aeabi_fadd+0x1f0>
    94c6:	003b      	movs	r3, r7
    94c8:	0004      	movs	r4, r0
    94ca:	e6ba      	b.n	9242 <__aeabi_fadd+0x76>
    94cc:	2680      	movs	r6, #128	; 0x80
    94ce:	2200      	movs	r2, #0
    94d0:	03f6      	lsls	r6, r6, #15
    94d2:	e6f0      	b.n	92b6 <__aeabi_fadd+0xea>
    94d4:	003b      	movs	r3, r7
    94d6:	e6b4      	b.n	9242 <__aeabi_fadd+0x76>
    94d8:	1e33      	subs	r3, r6, #0
    94da:	d000      	beq.n	94de <__aeabi_fadd+0x312>
    94dc:	e6e2      	b.n	92a4 <__aeabi_fadd+0xd8>
    94de:	2200      	movs	r2, #0
    94e0:	e721      	b.n	9326 <__aeabi_fadd+0x15a>
    94e2:	2301      	movs	r3, #1
    94e4:	e7bd      	b.n	9462 <__aeabi_fadd+0x296>
    94e6:	46c0      	nop			; (mov r8, r8)
    94e8:	7dffffff 	.word	0x7dffffff
    94ec:	fbffffff 	.word	0xfbffffff

000094f0 <__aeabi_fdiv>:
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94f2:	4657      	mov	r7, sl
    94f4:	464e      	mov	r6, r9
    94f6:	46de      	mov	lr, fp
    94f8:	4645      	mov	r5, r8
    94fa:	b5e0      	push	{r5, r6, r7, lr}
    94fc:	0244      	lsls	r4, r0, #9
    94fe:	0043      	lsls	r3, r0, #1
    9500:	0fc6      	lsrs	r6, r0, #31
    9502:	b083      	sub	sp, #12
    9504:	1c0f      	adds	r7, r1, #0
    9506:	0a64      	lsrs	r4, r4, #9
    9508:	0e1b      	lsrs	r3, r3, #24
    950a:	46b2      	mov	sl, r6
    950c:	d053      	beq.n	95b6 <__aeabi_fdiv+0xc6>
    950e:	2bff      	cmp	r3, #255	; 0xff
    9510:	d027      	beq.n	9562 <__aeabi_fdiv+0x72>
    9512:	2280      	movs	r2, #128	; 0x80
    9514:	00e4      	lsls	r4, r4, #3
    9516:	04d2      	lsls	r2, r2, #19
    9518:	4314      	orrs	r4, r2
    951a:	227f      	movs	r2, #127	; 0x7f
    951c:	4252      	negs	r2, r2
    951e:	4690      	mov	r8, r2
    9520:	4498      	add	r8, r3
    9522:	2300      	movs	r3, #0
    9524:	4699      	mov	r9, r3
    9526:	469b      	mov	fp, r3
    9528:	027d      	lsls	r5, r7, #9
    952a:	0078      	lsls	r0, r7, #1
    952c:	0ffb      	lsrs	r3, r7, #31
    952e:	0a6d      	lsrs	r5, r5, #9
    9530:	0e00      	lsrs	r0, r0, #24
    9532:	9300      	str	r3, [sp, #0]
    9534:	d024      	beq.n	9580 <__aeabi_fdiv+0x90>
    9536:	28ff      	cmp	r0, #255	; 0xff
    9538:	d046      	beq.n	95c8 <__aeabi_fdiv+0xd8>
    953a:	2380      	movs	r3, #128	; 0x80
    953c:	2100      	movs	r1, #0
    953e:	00ed      	lsls	r5, r5, #3
    9540:	04db      	lsls	r3, r3, #19
    9542:	431d      	orrs	r5, r3
    9544:	387f      	subs	r0, #127	; 0x7f
    9546:	4647      	mov	r7, r8
    9548:	1a38      	subs	r0, r7, r0
    954a:	464f      	mov	r7, r9
    954c:	430f      	orrs	r7, r1
    954e:	00bf      	lsls	r7, r7, #2
    9550:	46b9      	mov	r9, r7
    9552:	0033      	movs	r3, r6
    9554:	9a00      	ldr	r2, [sp, #0]
    9556:	4f87      	ldr	r7, [pc, #540]	; (9774 <__aeabi_fdiv+0x284>)
    9558:	4053      	eors	r3, r2
    955a:	464a      	mov	r2, r9
    955c:	58ba      	ldr	r2, [r7, r2]
    955e:	9301      	str	r3, [sp, #4]
    9560:	4697      	mov	pc, r2
    9562:	2c00      	cmp	r4, #0
    9564:	d14e      	bne.n	9604 <__aeabi_fdiv+0x114>
    9566:	2308      	movs	r3, #8
    9568:	4699      	mov	r9, r3
    956a:	33f7      	adds	r3, #247	; 0xf7
    956c:	4698      	mov	r8, r3
    956e:	3bfd      	subs	r3, #253	; 0xfd
    9570:	469b      	mov	fp, r3
    9572:	027d      	lsls	r5, r7, #9
    9574:	0078      	lsls	r0, r7, #1
    9576:	0ffb      	lsrs	r3, r7, #31
    9578:	0a6d      	lsrs	r5, r5, #9
    957a:	0e00      	lsrs	r0, r0, #24
    957c:	9300      	str	r3, [sp, #0]
    957e:	d1da      	bne.n	9536 <__aeabi_fdiv+0x46>
    9580:	2d00      	cmp	r5, #0
    9582:	d126      	bne.n	95d2 <__aeabi_fdiv+0xe2>
    9584:	2000      	movs	r0, #0
    9586:	2101      	movs	r1, #1
    9588:	0033      	movs	r3, r6
    958a:	9a00      	ldr	r2, [sp, #0]
    958c:	4f7a      	ldr	r7, [pc, #488]	; (9778 <__aeabi_fdiv+0x288>)
    958e:	4053      	eors	r3, r2
    9590:	4642      	mov	r2, r8
    9592:	1a10      	subs	r0, r2, r0
    9594:	464a      	mov	r2, r9
    9596:	430a      	orrs	r2, r1
    9598:	0092      	lsls	r2, r2, #2
    959a:	58ba      	ldr	r2, [r7, r2]
    959c:	001d      	movs	r5, r3
    959e:	4697      	mov	pc, r2
    95a0:	9b00      	ldr	r3, [sp, #0]
    95a2:	002c      	movs	r4, r5
    95a4:	469a      	mov	sl, r3
    95a6:	468b      	mov	fp, r1
    95a8:	465b      	mov	r3, fp
    95aa:	2b02      	cmp	r3, #2
    95ac:	d131      	bne.n	9612 <__aeabi_fdiv+0x122>
    95ae:	4653      	mov	r3, sl
    95b0:	21ff      	movs	r1, #255	; 0xff
    95b2:	2400      	movs	r4, #0
    95b4:	e038      	b.n	9628 <__aeabi_fdiv+0x138>
    95b6:	2c00      	cmp	r4, #0
    95b8:	d117      	bne.n	95ea <__aeabi_fdiv+0xfa>
    95ba:	2304      	movs	r3, #4
    95bc:	4699      	mov	r9, r3
    95be:	2300      	movs	r3, #0
    95c0:	4698      	mov	r8, r3
    95c2:	3301      	adds	r3, #1
    95c4:	469b      	mov	fp, r3
    95c6:	e7af      	b.n	9528 <__aeabi_fdiv+0x38>
    95c8:	20ff      	movs	r0, #255	; 0xff
    95ca:	2d00      	cmp	r5, #0
    95cc:	d10b      	bne.n	95e6 <__aeabi_fdiv+0xf6>
    95ce:	2102      	movs	r1, #2
    95d0:	e7da      	b.n	9588 <__aeabi_fdiv+0x98>
    95d2:	0028      	movs	r0, r5
    95d4:	f7ff fd5c 	bl	9090 <__clzsi2>
    95d8:	1f43      	subs	r3, r0, #5
    95da:	409d      	lsls	r5, r3
    95dc:	2376      	movs	r3, #118	; 0x76
    95de:	425b      	negs	r3, r3
    95e0:	1a18      	subs	r0, r3, r0
    95e2:	2100      	movs	r1, #0
    95e4:	e7af      	b.n	9546 <__aeabi_fdiv+0x56>
    95e6:	2103      	movs	r1, #3
    95e8:	e7ad      	b.n	9546 <__aeabi_fdiv+0x56>
    95ea:	0020      	movs	r0, r4
    95ec:	f7ff fd50 	bl	9090 <__clzsi2>
    95f0:	1f43      	subs	r3, r0, #5
    95f2:	409c      	lsls	r4, r3
    95f4:	2376      	movs	r3, #118	; 0x76
    95f6:	425b      	negs	r3, r3
    95f8:	1a1b      	subs	r3, r3, r0
    95fa:	4698      	mov	r8, r3
    95fc:	2300      	movs	r3, #0
    95fe:	4699      	mov	r9, r3
    9600:	469b      	mov	fp, r3
    9602:	e791      	b.n	9528 <__aeabi_fdiv+0x38>
    9604:	230c      	movs	r3, #12
    9606:	4699      	mov	r9, r3
    9608:	33f3      	adds	r3, #243	; 0xf3
    960a:	4698      	mov	r8, r3
    960c:	3bfc      	subs	r3, #252	; 0xfc
    960e:	469b      	mov	fp, r3
    9610:	e78a      	b.n	9528 <__aeabi_fdiv+0x38>
    9612:	2b03      	cmp	r3, #3
    9614:	d100      	bne.n	9618 <__aeabi_fdiv+0x128>
    9616:	e0a5      	b.n	9764 <__aeabi_fdiv+0x274>
    9618:	4655      	mov	r5, sl
    961a:	2b01      	cmp	r3, #1
    961c:	d000      	beq.n	9620 <__aeabi_fdiv+0x130>
    961e:	e081      	b.n	9724 <__aeabi_fdiv+0x234>
    9620:	2301      	movs	r3, #1
    9622:	2100      	movs	r1, #0
    9624:	2400      	movs	r4, #0
    9626:	402b      	ands	r3, r5
    9628:	0264      	lsls	r4, r4, #9
    962a:	05c9      	lsls	r1, r1, #23
    962c:	0a60      	lsrs	r0, r4, #9
    962e:	07db      	lsls	r3, r3, #31
    9630:	4308      	orrs	r0, r1
    9632:	4318      	orrs	r0, r3
    9634:	b003      	add	sp, #12
    9636:	bc3c      	pop	{r2, r3, r4, r5}
    9638:	4690      	mov	r8, r2
    963a:	4699      	mov	r9, r3
    963c:	46a2      	mov	sl, r4
    963e:	46ab      	mov	fp, r5
    9640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9642:	2480      	movs	r4, #128	; 0x80
    9644:	2300      	movs	r3, #0
    9646:	03e4      	lsls	r4, r4, #15
    9648:	21ff      	movs	r1, #255	; 0xff
    964a:	e7ed      	b.n	9628 <__aeabi_fdiv+0x138>
    964c:	21ff      	movs	r1, #255	; 0xff
    964e:	2400      	movs	r4, #0
    9650:	e7ea      	b.n	9628 <__aeabi_fdiv+0x138>
    9652:	2301      	movs	r3, #1
    9654:	1a59      	subs	r1, r3, r1
    9656:	291b      	cmp	r1, #27
    9658:	dd66      	ble.n	9728 <__aeabi_fdiv+0x238>
    965a:	9a01      	ldr	r2, [sp, #4]
    965c:	4013      	ands	r3, r2
    965e:	2100      	movs	r1, #0
    9660:	2400      	movs	r4, #0
    9662:	e7e1      	b.n	9628 <__aeabi_fdiv+0x138>
    9664:	2380      	movs	r3, #128	; 0x80
    9666:	03db      	lsls	r3, r3, #15
    9668:	421c      	tst	r4, r3
    966a:	d038      	beq.n	96de <__aeabi_fdiv+0x1ee>
    966c:	421d      	tst	r5, r3
    966e:	d051      	beq.n	9714 <__aeabi_fdiv+0x224>
    9670:	431c      	orrs	r4, r3
    9672:	0264      	lsls	r4, r4, #9
    9674:	0a64      	lsrs	r4, r4, #9
    9676:	0033      	movs	r3, r6
    9678:	21ff      	movs	r1, #255	; 0xff
    967a:	e7d5      	b.n	9628 <__aeabi_fdiv+0x138>
    967c:	0163      	lsls	r3, r4, #5
    967e:	016c      	lsls	r4, r5, #5
    9680:	42a3      	cmp	r3, r4
    9682:	d23b      	bcs.n	96fc <__aeabi_fdiv+0x20c>
    9684:	261b      	movs	r6, #27
    9686:	2100      	movs	r1, #0
    9688:	3801      	subs	r0, #1
    968a:	2501      	movs	r5, #1
    968c:	001f      	movs	r7, r3
    968e:	0049      	lsls	r1, r1, #1
    9690:	005b      	lsls	r3, r3, #1
    9692:	2f00      	cmp	r7, #0
    9694:	db01      	blt.n	969a <__aeabi_fdiv+0x1aa>
    9696:	429c      	cmp	r4, r3
    9698:	d801      	bhi.n	969e <__aeabi_fdiv+0x1ae>
    969a:	1b1b      	subs	r3, r3, r4
    969c:	4329      	orrs	r1, r5
    969e:	3e01      	subs	r6, #1
    96a0:	2e00      	cmp	r6, #0
    96a2:	d1f3      	bne.n	968c <__aeabi_fdiv+0x19c>
    96a4:	001c      	movs	r4, r3
    96a6:	1e63      	subs	r3, r4, #1
    96a8:	419c      	sbcs	r4, r3
    96aa:	430c      	orrs	r4, r1
    96ac:	0001      	movs	r1, r0
    96ae:	317f      	adds	r1, #127	; 0x7f
    96b0:	2900      	cmp	r1, #0
    96b2:	ddce      	ble.n	9652 <__aeabi_fdiv+0x162>
    96b4:	0763      	lsls	r3, r4, #29
    96b6:	d004      	beq.n	96c2 <__aeabi_fdiv+0x1d2>
    96b8:	230f      	movs	r3, #15
    96ba:	4023      	ands	r3, r4
    96bc:	2b04      	cmp	r3, #4
    96be:	d000      	beq.n	96c2 <__aeabi_fdiv+0x1d2>
    96c0:	3404      	adds	r4, #4
    96c2:	0123      	lsls	r3, r4, #4
    96c4:	d503      	bpl.n	96ce <__aeabi_fdiv+0x1de>
    96c6:	0001      	movs	r1, r0
    96c8:	4b2c      	ldr	r3, [pc, #176]	; (977c <__aeabi_fdiv+0x28c>)
    96ca:	3180      	adds	r1, #128	; 0x80
    96cc:	401c      	ands	r4, r3
    96ce:	29fe      	cmp	r1, #254	; 0xfe
    96d0:	dd0d      	ble.n	96ee <__aeabi_fdiv+0x1fe>
    96d2:	2301      	movs	r3, #1
    96d4:	9a01      	ldr	r2, [sp, #4]
    96d6:	21ff      	movs	r1, #255	; 0xff
    96d8:	4013      	ands	r3, r2
    96da:	2400      	movs	r4, #0
    96dc:	e7a4      	b.n	9628 <__aeabi_fdiv+0x138>
    96de:	2380      	movs	r3, #128	; 0x80
    96e0:	03db      	lsls	r3, r3, #15
    96e2:	431c      	orrs	r4, r3
    96e4:	0264      	lsls	r4, r4, #9
    96e6:	0a64      	lsrs	r4, r4, #9
    96e8:	0033      	movs	r3, r6
    96ea:	21ff      	movs	r1, #255	; 0xff
    96ec:	e79c      	b.n	9628 <__aeabi_fdiv+0x138>
    96ee:	2301      	movs	r3, #1
    96f0:	9a01      	ldr	r2, [sp, #4]
    96f2:	01a4      	lsls	r4, r4, #6
    96f4:	0a64      	lsrs	r4, r4, #9
    96f6:	b2c9      	uxtb	r1, r1
    96f8:	4013      	ands	r3, r2
    96fa:	e795      	b.n	9628 <__aeabi_fdiv+0x138>
    96fc:	1b1b      	subs	r3, r3, r4
    96fe:	261a      	movs	r6, #26
    9700:	2101      	movs	r1, #1
    9702:	e7c2      	b.n	968a <__aeabi_fdiv+0x19a>
    9704:	9b00      	ldr	r3, [sp, #0]
    9706:	468b      	mov	fp, r1
    9708:	469a      	mov	sl, r3
    970a:	2400      	movs	r4, #0
    970c:	e74c      	b.n	95a8 <__aeabi_fdiv+0xb8>
    970e:	0263      	lsls	r3, r4, #9
    9710:	d5e5      	bpl.n	96de <__aeabi_fdiv+0x1ee>
    9712:	2500      	movs	r5, #0
    9714:	2480      	movs	r4, #128	; 0x80
    9716:	03e4      	lsls	r4, r4, #15
    9718:	432c      	orrs	r4, r5
    971a:	0264      	lsls	r4, r4, #9
    971c:	0a64      	lsrs	r4, r4, #9
    971e:	9b00      	ldr	r3, [sp, #0]
    9720:	21ff      	movs	r1, #255	; 0xff
    9722:	e781      	b.n	9628 <__aeabi_fdiv+0x138>
    9724:	9501      	str	r5, [sp, #4]
    9726:	e7c1      	b.n	96ac <__aeabi_fdiv+0x1bc>
    9728:	0023      	movs	r3, r4
    972a:	2020      	movs	r0, #32
    972c:	40cb      	lsrs	r3, r1
    972e:	1a41      	subs	r1, r0, r1
    9730:	408c      	lsls	r4, r1
    9732:	1e61      	subs	r1, r4, #1
    9734:	418c      	sbcs	r4, r1
    9736:	431c      	orrs	r4, r3
    9738:	0763      	lsls	r3, r4, #29
    973a:	d004      	beq.n	9746 <__aeabi_fdiv+0x256>
    973c:	230f      	movs	r3, #15
    973e:	4023      	ands	r3, r4
    9740:	2b04      	cmp	r3, #4
    9742:	d000      	beq.n	9746 <__aeabi_fdiv+0x256>
    9744:	3404      	adds	r4, #4
    9746:	0163      	lsls	r3, r4, #5
    9748:	d505      	bpl.n	9756 <__aeabi_fdiv+0x266>
    974a:	2301      	movs	r3, #1
    974c:	9a01      	ldr	r2, [sp, #4]
    974e:	2101      	movs	r1, #1
    9750:	4013      	ands	r3, r2
    9752:	2400      	movs	r4, #0
    9754:	e768      	b.n	9628 <__aeabi_fdiv+0x138>
    9756:	2301      	movs	r3, #1
    9758:	9a01      	ldr	r2, [sp, #4]
    975a:	01a4      	lsls	r4, r4, #6
    975c:	0a64      	lsrs	r4, r4, #9
    975e:	4013      	ands	r3, r2
    9760:	2100      	movs	r1, #0
    9762:	e761      	b.n	9628 <__aeabi_fdiv+0x138>
    9764:	2380      	movs	r3, #128	; 0x80
    9766:	03db      	lsls	r3, r3, #15
    9768:	431c      	orrs	r4, r3
    976a:	0264      	lsls	r4, r4, #9
    976c:	0a64      	lsrs	r4, r4, #9
    976e:	4653      	mov	r3, sl
    9770:	21ff      	movs	r1, #255	; 0xff
    9772:	e759      	b.n	9628 <__aeabi_fdiv+0x138>
    9774:	0000c390 	.word	0x0000c390
    9778:	0000c3d0 	.word	0x0000c3d0
    977c:	f7ffffff 	.word	0xf7ffffff

00009780 <__aeabi_fmul>:
    9780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9782:	4657      	mov	r7, sl
    9784:	464e      	mov	r6, r9
    9786:	4645      	mov	r5, r8
    9788:	46de      	mov	lr, fp
    978a:	b5e0      	push	{r5, r6, r7, lr}
    978c:	0247      	lsls	r7, r0, #9
    978e:	0046      	lsls	r6, r0, #1
    9790:	4688      	mov	r8, r1
    9792:	0a7f      	lsrs	r7, r7, #9
    9794:	0e36      	lsrs	r6, r6, #24
    9796:	0fc4      	lsrs	r4, r0, #31
    9798:	2e00      	cmp	r6, #0
    979a:	d047      	beq.n	982c <__aeabi_fmul+0xac>
    979c:	2eff      	cmp	r6, #255	; 0xff
    979e:	d024      	beq.n	97ea <__aeabi_fmul+0x6a>
    97a0:	00fb      	lsls	r3, r7, #3
    97a2:	2780      	movs	r7, #128	; 0x80
    97a4:	04ff      	lsls	r7, r7, #19
    97a6:	431f      	orrs	r7, r3
    97a8:	2300      	movs	r3, #0
    97aa:	4699      	mov	r9, r3
    97ac:	469a      	mov	sl, r3
    97ae:	3e7f      	subs	r6, #127	; 0x7f
    97b0:	4643      	mov	r3, r8
    97b2:	025d      	lsls	r5, r3, #9
    97b4:	0058      	lsls	r0, r3, #1
    97b6:	0fdb      	lsrs	r3, r3, #31
    97b8:	0a6d      	lsrs	r5, r5, #9
    97ba:	0e00      	lsrs	r0, r0, #24
    97bc:	4698      	mov	r8, r3
    97be:	d043      	beq.n	9848 <__aeabi_fmul+0xc8>
    97c0:	28ff      	cmp	r0, #255	; 0xff
    97c2:	d03b      	beq.n	983c <__aeabi_fmul+0xbc>
    97c4:	00eb      	lsls	r3, r5, #3
    97c6:	2580      	movs	r5, #128	; 0x80
    97c8:	2200      	movs	r2, #0
    97ca:	04ed      	lsls	r5, r5, #19
    97cc:	431d      	orrs	r5, r3
    97ce:	387f      	subs	r0, #127	; 0x7f
    97d0:	1836      	adds	r6, r6, r0
    97d2:	1c73      	adds	r3, r6, #1
    97d4:	4641      	mov	r1, r8
    97d6:	469b      	mov	fp, r3
    97d8:	464b      	mov	r3, r9
    97da:	4061      	eors	r1, r4
    97dc:	4313      	orrs	r3, r2
    97de:	2b0f      	cmp	r3, #15
    97e0:	d864      	bhi.n	98ac <__aeabi_fmul+0x12c>
    97e2:	4875      	ldr	r0, [pc, #468]	; (99b8 <__aeabi_fmul+0x238>)
    97e4:	009b      	lsls	r3, r3, #2
    97e6:	58c3      	ldr	r3, [r0, r3]
    97e8:	469f      	mov	pc, r3
    97ea:	2f00      	cmp	r7, #0
    97ec:	d142      	bne.n	9874 <__aeabi_fmul+0xf4>
    97ee:	2308      	movs	r3, #8
    97f0:	4699      	mov	r9, r3
    97f2:	3b06      	subs	r3, #6
    97f4:	26ff      	movs	r6, #255	; 0xff
    97f6:	469a      	mov	sl, r3
    97f8:	e7da      	b.n	97b0 <__aeabi_fmul+0x30>
    97fa:	4641      	mov	r1, r8
    97fc:	2a02      	cmp	r2, #2
    97fe:	d028      	beq.n	9852 <__aeabi_fmul+0xd2>
    9800:	2a03      	cmp	r2, #3
    9802:	d100      	bne.n	9806 <__aeabi_fmul+0x86>
    9804:	e0ce      	b.n	99a4 <__aeabi_fmul+0x224>
    9806:	2a01      	cmp	r2, #1
    9808:	d000      	beq.n	980c <__aeabi_fmul+0x8c>
    980a:	e0ac      	b.n	9966 <__aeabi_fmul+0x1e6>
    980c:	4011      	ands	r1, r2
    980e:	2000      	movs	r0, #0
    9810:	2200      	movs	r2, #0
    9812:	b2cc      	uxtb	r4, r1
    9814:	0240      	lsls	r0, r0, #9
    9816:	05d2      	lsls	r2, r2, #23
    9818:	0a40      	lsrs	r0, r0, #9
    981a:	07e4      	lsls	r4, r4, #31
    981c:	4310      	orrs	r0, r2
    981e:	4320      	orrs	r0, r4
    9820:	bc3c      	pop	{r2, r3, r4, r5}
    9822:	4690      	mov	r8, r2
    9824:	4699      	mov	r9, r3
    9826:	46a2      	mov	sl, r4
    9828:	46ab      	mov	fp, r5
    982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    982c:	2f00      	cmp	r7, #0
    982e:	d115      	bne.n	985c <__aeabi_fmul+0xdc>
    9830:	2304      	movs	r3, #4
    9832:	4699      	mov	r9, r3
    9834:	3b03      	subs	r3, #3
    9836:	2600      	movs	r6, #0
    9838:	469a      	mov	sl, r3
    983a:	e7b9      	b.n	97b0 <__aeabi_fmul+0x30>
    983c:	20ff      	movs	r0, #255	; 0xff
    983e:	2202      	movs	r2, #2
    9840:	2d00      	cmp	r5, #0
    9842:	d0c5      	beq.n	97d0 <__aeabi_fmul+0x50>
    9844:	2203      	movs	r2, #3
    9846:	e7c3      	b.n	97d0 <__aeabi_fmul+0x50>
    9848:	2d00      	cmp	r5, #0
    984a:	d119      	bne.n	9880 <__aeabi_fmul+0x100>
    984c:	2000      	movs	r0, #0
    984e:	2201      	movs	r2, #1
    9850:	e7be      	b.n	97d0 <__aeabi_fmul+0x50>
    9852:	2401      	movs	r4, #1
    9854:	22ff      	movs	r2, #255	; 0xff
    9856:	400c      	ands	r4, r1
    9858:	2000      	movs	r0, #0
    985a:	e7db      	b.n	9814 <__aeabi_fmul+0x94>
    985c:	0038      	movs	r0, r7
    985e:	f7ff fc17 	bl	9090 <__clzsi2>
    9862:	2676      	movs	r6, #118	; 0x76
    9864:	1f43      	subs	r3, r0, #5
    9866:	409f      	lsls	r7, r3
    9868:	2300      	movs	r3, #0
    986a:	4276      	negs	r6, r6
    986c:	1a36      	subs	r6, r6, r0
    986e:	4699      	mov	r9, r3
    9870:	469a      	mov	sl, r3
    9872:	e79d      	b.n	97b0 <__aeabi_fmul+0x30>
    9874:	230c      	movs	r3, #12
    9876:	4699      	mov	r9, r3
    9878:	3b09      	subs	r3, #9
    987a:	26ff      	movs	r6, #255	; 0xff
    987c:	469a      	mov	sl, r3
    987e:	e797      	b.n	97b0 <__aeabi_fmul+0x30>
    9880:	0028      	movs	r0, r5
    9882:	f7ff fc05 	bl	9090 <__clzsi2>
    9886:	1f43      	subs	r3, r0, #5
    9888:	409d      	lsls	r5, r3
    988a:	2376      	movs	r3, #118	; 0x76
    988c:	425b      	negs	r3, r3
    988e:	1a18      	subs	r0, r3, r0
    9890:	2200      	movs	r2, #0
    9892:	e79d      	b.n	97d0 <__aeabi_fmul+0x50>
    9894:	2080      	movs	r0, #128	; 0x80
    9896:	2400      	movs	r4, #0
    9898:	03c0      	lsls	r0, r0, #15
    989a:	22ff      	movs	r2, #255	; 0xff
    989c:	e7ba      	b.n	9814 <__aeabi_fmul+0x94>
    989e:	003d      	movs	r5, r7
    98a0:	4652      	mov	r2, sl
    98a2:	e7ab      	b.n	97fc <__aeabi_fmul+0x7c>
    98a4:	003d      	movs	r5, r7
    98a6:	0021      	movs	r1, r4
    98a8:	4652      	mov	r2, sl
    98aa:	e7a7      	b.n	97fc <__aeabi_fmul+0x7c>
    98ac:	0c3b      	lsrs	r3, r7, #16
    98ae:	469c      	mov	ip, r3
    98b0:	042a      	lsls	r2, r5, #16
    98b2:	0c12      	lsrs	r2, r2, #16
    98b4:	0c2b      	lsrs	r3, r5, #16
    98b6:	0014      	movs	r4, r2
    98b8:	4660      	mov	r0, ip
    98ba:	4665      	mov	r5, ip
    98bc:	043f      	lsls	r7, r7, #16
    98be:	0c3f      	lsrs	r7, r7, #16
    98c0:	437c      	muls	r4, r7
    98c2:	4342      	muls	r2, r0
    98c4:	435d      	muls	r5, r3
    98c6:	437b      	muls	r3, r7
    98c8:	0c27      	lsrs	r7, r4, #16
    98ca:	189b      	adds	r3, r3, r2
    98cc:	18ff      	adds	r7, r7, r3
    98ce:	42ba      	cmp	r2, r7
    98d0:	d903      	bls.n	98da <__aeabi_fmul+0x15a>
    98d2:	2380      	movs	r3, #128	; 0x80
    98d4:	025b      	lsls	r3, r3, #9
    98d6:	469c      	mov	ip, r3
    98d8:	4465      	add	r5, ip
    98da:	0424      	lsls	r4, r4, #16
    98dc:	043a      	lsls	r2, r7, #16
    98de:	0c24      	lsrs	r4, r4, #16
    98e0:	1912      	adds	r2, r2, r4
    98e2:	0193      	lsls	r3, r2, #6
    98e4:	1e5c      	subs	r4, r3, #1
    98e6:	41a3      	sbcs	r3, r4
    98e8:	0c3f      	lsrs	r7, r7, #16
    98ea:	0e92      	lsrs	r2, r2, #26
    98ec:	197d      	adds	r5, r7, r5
    98ee:	431a      	orrs	r2, r3
    98f0:	01ad      	lsls	r5, r5, #6
    98f2:	4315      	orrs	r5, r2
    98f4:	012b      	lsls	r3, r5, #4
    98f6:	d504      	bpl.n	9902 <__aeabi_fmul+0x182>
    98f8:	2301      	movs	r3, #1
    98fa:	465e      	mov	r6, fp
    98fc:	086a      	lsrs	r2, r5, #1
    98fe:	401d      	ands	r5, r3
    9900:	4315      	orrs	r5, r2
    9902:	0032      	movs	r2, r6
    9904:	327f      	adds	r2, #127	; 0x7f
    9906:	2a00      	cmp	r2, #0
    9908:	dd25      	ble.n	9956 <__aeabi_fmul+0x1d6>
    990a:	076b      	lsls	r3, r5, #29
    990c:	d004      	beq.n	9918 <__aeabi_fmul+0x198>
    990e:	230f      	movs	r3, #15
    9910:	402b      	ands	r3, r5
    9912:	2b04      	cmp	r3, #4
    9914:	d000      	beq.n	9918 <__aeabi_fmul+0x198>
    9916:	3504      	adds	r5, #4
    9918:	012b      	lsls	r3, r5, #4
    991a:	d503      	bpl.n	9924 <__aeabi_fmul+0x1a4>
    991c:	0032      	movs	r2, r6
    991e:	4b27      	ldr	r3, [pc, #156]	; (99bc <__aeabi_fmul+0x23c>)
    9920:	3280      	adds	r2, #128	; 0x80
    9922:	401d      	ands	r5, r3
    9924:	2afe      	cmp	r2, #254	; 0xfe
    9926:	dc94      	bgt.n	9852 <__aeabi_fmul+0xd2>
    9928:	2401      	movs	r4, #1
    992a:	01a8      	lsls	r0, r5, #6
    992c:	0a40      	lsrs	r0, r0, #9
    992e:	b2d2      	uxtb	r2, r2
    9930:	400c      	ands	r4, r1
    9932:	e76f      	b.n	9814 <__aeabi_fmul+0x94>
    9934:	2080      	movs	r0, #128	; 0x80
    9936:	03c0      	lsls	r0, r0, #15
    9938:	4207      	tst	r7, r0
    993a:	d007      	beq.n	994c <__aeabi_fmul+0x1cc>
    993c:	4205      	tst	r5, r0
    993e:	d105      	bne.n	994c <__aeabi_fmul+0x1cc>
    9940:	4328      	orrs	r0, r5
    9942:	0240      	lsls	r0, r0, #9
    9944:	0a40      	lsrs	r0, r0, #9
    9946:	4644      	mov	r4, r8
    9948:	22ff      	movs	r2, #255	; 0xff
    994a:	e763      	b.n	9814 <__aeabi_fmul+0x94>
    994c:	4338      	orrs	r0, r7
    994e:	0240      	lsls	r0, r0, #9
    9950:	0a40      	lsrs	r0, r0, #9
    9952:	22ff      	movs	r2, #255	; 0xff
    9954:	e75e      	b.n	9814 <__aeabi_fmul+0x94>
    9956:	2401      	movs	r4, #1
    9958:	1aa3      	subs	r3, r4, r2
    995a:	2b1b      	cmp	r3, #27
    995c:	dd05      	ble.n	996a <__aeabi_fmul+0x1ea>
    995e:	400c      	ands	r4, r1
    9960:	2200      	movs	r2, #0
    9962:	2000      	movs	r0, #0
    9964:	e756      	b.n	9814 <__aeabi_fmul+0x94>
    9966:	465e      	mov	r6, fp
    9968:	e7cb      	b.n	9902 <__aeabi_fmul+0x182>
    996a:	002a      	movs	r2, r5
    996c:	2020      	movs	r0, #32
    996e:	40da      	lsrs	r2, r3
    9970:	1ac3      	subs	r3, r0, r3
    9972:	409d      	lsls	r5, r3
    9974:	002b      	movs	r3, r5
    9976:	1e5d      	subs	r5, r3, #1
    9978:	41ab      	sbcs	r3, r5
    997a:	4313      	orrs	r3, r2
    997c:	075a      	lsls	r2, r3, #29
    997e:	d004      	beq.n	998a <__aeabi_fmul+0x20a>
    9980:	220f      	movs	r2, #15
    9982:	401a      	ands	r2, r3
    9984:	2a04      	cmp	r2, #4
    9986:	d000      	beq.n	998a <__aeabi_fmul+0x20a>
    9988:	3304      	adds	r3, #4
    998a:	015a      	lsls	r2, r3, #5
    998c:	d504      	bpl.n	9998 <__aeabi_fmul+0x218>
    998e:	2401      	movs	r4, #1
    9990:	2201      	movs	r2, #1
    9992:	400c      	ands	r4, r1
    9994:	2000      	movs	r0, #0
    9996:	e73d      	b.n	9814 <__aeabi_fmul+0x94>
    9998:	2401      	movs	r4, #1
    999a:	019b      	lsls	r3, r3, #6
    999c:	0a58      	lsrs	r0, r3, #9
    999e:	400c      	ands	r4, r1
    99a0:	2200      	movs	r2, #0
    99a2:	e737      	b.n	9814 <__aeabi_fmul+0x94>
    99a4:	2080      	movs	r0, #128	; 0x80
    99a6:	2401      	movs	r4, #1
    99a8:	03c0      	lsls	r0, r0, #15
    99aa:	4328      	orrs	r0, r5
    99ac:	0240      	lsls	r0, r0, #9
    99ae:	0a40      	lsrs	r0, r0, #9
    99b0:	400c      	ands	r4, r1
    99b2:	22ff      	movs	r2, #255	; 0xff
    99b4:	e72e      	b.n	9814 <__aeabi_fmul+0x94>
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	0000c410 	.word	0x0000c410
    99bc:	f7ffffff 	.word	0xf7ffffff

000099c0 <__aeabi_fsub>:
    99c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99c2:	464f      	mov	r7, r9
    99c4:	46d6      	mov	lr, sl
    99c6:	4646      	mov	r6, r8
    99c8:	0044      	lsls	r4, r0, #1
    99ca:	b5c0      	push	{r6, r7, lr}
    99cc:	0fc2      	lsrs	r2, r0, #31
    99ce:	0247      	lsls	r7, r0, #9
    99d0:	0248      	lsls	r0, r1, #9
    99d2:	0a40      	lsrs	r0, r0, #9
    99d4:	4684      	mov	ip, r0
    99d6:	4666      	mov	r6, ip
    99d8:	0a7b      	lsrs	r3, r7, #9
    99da:	0048      	lsls	r0, r1, #1
    99dc:	0fc9      	lsrs	r1, r1, #31
    99de:	469a      	mov	sl, r3
    99e0:	0e24      	lsrs	r4, r4, #24
    99e2:	0015      	movs	r5, r2
    99e4:	00db      	lsls	r3, r3, #3
    99e6:	0e00      	lsrs	r0, r0, #24
    99e8:	4689      	mov	r9, r1
    99ea:	00f6      	lsls	r6, r6, #3
    99ec:	28ff      	cmp	r0, #255	; 0xff
    99ee:	d100      	bne.n	99f2 <__aeabi_fsub+0x32>
    99f0:	e08f      	b.n	9b12 <__aeabi_fsub+0x152>
    99f2:	2101      	movs	r1, #1
    99f4:	464f      	mov	r7, r9
    99f6:	404f      	eors	r7, r1
    99f8:	0039      	movs	r1, r7
    99fa:	4291      	cmp	r1, r2
    99fc:	d066      	beq.n	9acc <__aeabi_fsub+0x10c>
    99fe:	1a22      	subs	r2, r4, r0
    9a00:	2a00      	cmp	r2, #0
    9a02:	dc00      	bgt.n	9a06 <__aeabi_fsub+0x46>
    9a04:	e09d      	b.n	9b42 <__aeabi_fsub+0x182>
    9a06:	2800      	cmp	r0, #0
    9a08:	d13d      	bne.n	9a86 <__aeabi_fsub+0xc6>
    9a0a:	2e00      	cmp	r6, #0
    9a0c:	d100      	bne.n	9a10 <__aeabi_fsub+0x50>
    9a0e:	e08b      	b.n	9b28 <__aeabi_fsub+0x168>
    9a10:	1e51      	subs	r1, r2, #1
    9a12:	2900      	cmp	r1, #0
    9a14:	d000      	beq.n	9a18 <__aeabi_fsub+0x58>
    9a16:	e0b5      	b.n	9b84 <__aeabi_fsub+0x1c4>
    9a18:	2401      	movs	r4, #1
    9a1a:	1b9b      	subs	r3, r3, r6
    9a1c:	015a      	lsls	r2, r3, #5
    9a1e:	d544      	bpl.n	9aaa <__aeabi_fsub+0xea>
    9a20:	019b      	lsls	r3, r3, #6
    9a22:	099f      	lsrs	r7, r3, #6
    9a24:	0038      	movs	r0, r7
    9a26:	f7ff fb33 	bl	9090 <__clzsi2>
    9a2a:	3805      	subs	r0, #5
    9a2c:	4087      	lsls	r7, r0
    9a2e:	4284      	cmp	r4, r0
    9a30:	dd00      	ble.n	9a34 <__aeabi_fsub+0x74>
    9a32:	e096      	b.n	9b62 <__aeabi_fsub+0x1a2>
    9a34:	1b04      	subs	r4, r0, r4
    9a36:	003a      	movs	r2, r7
    9a38:	2020      	movs	r0, #32
    9a3a:	3401      	adds	r4, #1
    9a3c:	40e2      	lsrs	r2, r4
    9a3e:	1b04      	subs	r4, r0, r4
    9a40:	40a7      	lsls	r7, r4
    9a42:	003b      	movs	r3, r7
    9a44:	1e5f      	subs	r7, r3, #1
    9a46:	41bb      	sbcs	r3, r7
    9a48:	2400      	movs	r4, #0
    9a4a:	4313      	orrs	r3, r2
    9a4c:	075a      	lsls	r2, r3, #29
    9a4e:	d004      	beq.n	9a5a <__aeabi_fsub+0x9a>
    9a50:	220f      	movs	r2, #15
    9a52:	401a      	ands	r2, r3
    9a54:	2a04      	cmp	r2, #4
    9a56:	d000      	beq.n	9a5a <__aeabi_fsub+0x9a>
    9a58:	3304      	adds	r3, #4
    9a5a:	015a      	lsls	r2, r3, #5
    9a5c:	d527      	bpl.n	9aae <__aeabi_fsub+0xee>
    9a5e:	3401      	adds	r4, #1
    9a60:	2cff      	cmp	r4, #255	; 0xff
    9a62:	d100      	bne.n	9a66 <__aeabi_fsub+0xa6>
    9a64:	e079      	b.n	9b5a <__aeabi_fsub+0x19a>
    9a66:	2201      	movs	r2, #1
    9a68:	019b      	lsls	r3, r3, #6
    9a6a:	0a5b      	lsrs	r3, r3, #9
    9a6c:	b2e4      	uxtb	r4, r4
    9a6e:	402a      	ands	r2, r5
    9a70:	025b      	lsls	r3, r3, #9
    9a72:	05e4      	lsls	r4, r4, #23
    9a74:	0a58      	lsrs	r0, r3, #9
    9a76:	07d2      	lsls	r2, r2, #31
    9a78:	4320      	orrs	r0, r4
    9a7a:	4310      	orrs	r0, r2
    9a7c:	bc1c      	pop	{r2, r3, r4}
    9a7e:	4690      	mov	r8, r2
    9a80:	4699      	mov	r9, r3
    9a82:	46a2      	mov	sl, r4
    9a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a86:	2cff      	cmp	r4, #255	; 0xff
    9a88:	d0e0      	beq.n	9a4c <__aeabi_fsub+0x8c>
    9a8a:	2180      	movs	r1, #128	; 0x80
    9a8c:	04c9      	lsls	r1, r1, #19
    9a8e:	430e      	orrs	r6, r1
    9a90:	2a1b      	cmp	r2, #27
    9a92:	dc7b      	bgt.n	9b8c <__aeabi_fsub+0x1cc>
    9a94:	0031      	movs	r1, r6
    9a96:	2020      	movs	r0, #32
    9a98:	40d1      	lsrs	r1, r2
    9a9a:	1a82      	subs	r2, r0, r2
    9a9c:	4096      	lsls	r6, r2
    9a9e:	1e72      	subs	r2, r6, #1
    9aa0:	4196      	sbcs	r6, r2
    9aa2:	430e      	orrs	r6, r1
    9aa4:	1b9b      	subs	r3, r3, r6
    9aa6:	015a      	lsls	r2, r3, #5
    9aa8:	d4ba      	bmi.n	9a20 <__aeabi_fsub+0x60>
    9aaa:	075a      	lsls	r2, r3, #29
    9aac:	d1d0      	bne.n	9a50 <__aeabi_fsub+0x90>
    9aae:	2201      	movs	r2, #1
    9ab0:	08df      	lsrs	r7, r3, #3
    9ab2:	402a      	ands	r2, r5
    9ab4:	2cff      	cmp	r4, #255	; 0xff
    9ab6:	d133      	bne.n	9b20 <__aeabi_fsub+0x160>
    9ab8:	2f00      	cmp	r7, #0
    9aba:	d100      	bne.n	9abe <__aeabi_fsub+0xfe>
    9abc:	e0a8      	b.n	9c10 <__aeabi_fsub+0x250>
    9abe:	2380      	movs	r3, #128	; 0x80
    9ac0:	03db      	lsls	r3, r3, #15
    9ac2:	433b      	orrs	r3, r7
    9ac4:	025b      	lsls	r3, r3, #9
    9ac6:	0a5b      	lsrs	r3, r3, #9
    9ac8:	24ff      	movs	r4, #255	; 0xff
    9aca:	e7d1      	b.n	9a70 <__aeabi_fsub+0xb0>
    9acc:	1a21      	subs	r1, r4, r0
    9ace:	2900      	cmp	r1, #0
    9ad0:	dd4c      	ble.n	9b6c <__aeabi_fsub+0x1ac>
    9ad2:	2800      	cmp	r0, #0
    9ad4:	d02a      	beq.n	9b2c <__aeabi_fsub+0x16c>
    9ad6:	2cff      	cmp	r4, #255	; 0xff
    9ad8:	d0b8      	beq.n	9a4c <__aeabi_fsub+0x8c>
    9ada:	2080      	movs	r0, #128	; 0x80
    9adc:	04c0      	lsls	r0, r0, #19
    9ade:	4306      	orrs	r6, r0
    9ae0:	291b      	cmp	r1, #27
    9ae2:	dd00      	ble.n	9ae6 <__aeabi_fsub+0x126>
    9ae4:	e0af      	b.n	9c46 <__aeabi_fsub+0x286>
    9ae6:	0030      	movs	r0, r6
    9ae8:	2720      	movs	r7, #32
    9aea:	40c8      	lsrs	r0, r1
    9aec:	1a79      	subs	r1, r7, r1
    9aee:	408e      	lsls	r6, r1
    9af0:	1e71      	subs	r1, r6, #1
    9af2:	418e      	sbcs	r6, r1
    9af4:	4306      	orrs	r6, r0
    9af6:	199b      	adds	r3, r3, r6
    9af8:	0159      	lsls	r1, r3, #5
    9afa:	d5d6      	bpl.n	9aaa <__aeabi_fsub+0xea>
    9afc:	3401      	adds	r4, #1
    9afe:	2cff      	cmp	r4, #255	; 0xff
    9b00:	d100      	bne.n	9b04 <__aeabi_fsub+0x144>
    9b02:	e085      	b.n	9c10 <__aeabi_fsub+0x250>
    9b04:	2201      	movs	r2, #1
    9b06:	497a      	ldr	r1, [pc, #488]	; (9cf0 <__aeabi_fsub+0x330>)
    9b08:	401a      	ands	r2, r3
    9b0a:	085b      	lsrs	r3, r3, #1
    9b0c:	400b      	ands	r3, r1
    9b0e:	4313      	orrs	r3, r2
    9b10:	e79c      	b.n	9a4c <__aeabi_fsub+0x8c>
    9b12:	2e00      	cmp	r6, #0
    9b14:	d000      	beq.n	9b18 <__aeabi_fsub+0x158>
    9b16:	e770      	b.n	99fa <__aeabi_fsub+0x3a>
    9b18:	e76b      	b.n	99f2 <__aeabi_fsub+0x32>
    9b1a:	1e3b      	subs	r3, r7, #0
    9b1c:	d1c5      	bne.n	9aaa <__aeabi_fsub+0xea>
    9b1e:	2200      	movs	r2, #0
    9b20:	027b      	lsls	r3, r7, #9
    9b22:	0a5b      	lsrs	r3, r3, #9
    9b24:	b2e4      	uxtb	r4, r4
    9b26:	e7a3      	b.n	9a70 <__aeabi_fsub+0xb0>
    9b28:	0014      	movs	r4, r2
    9b2a:	e78f      	b.n	9a4c <__aeabi_fsub+0x8c>
    9b2c:	2e00      	cmp	r6, #0
    9b2e:	d04d      	beq.n	9bcc <__aeabi_fsub+0x20c>
    9b30:	1e48      	subs	r0, r1, #1
    9b32:	2800      	cmp	r0, #0
    9b34:	d157      	bne.n	9be6 <__aeabi_fsub+0x226>
    9b36:	199b      	adds	r3, r3, r6
    9b38:	2401      	movs	r4, #1
    9b3a:	015a      	lsls	r2, r3, #5
    9b3c:	d5b5      	bpl.n	9aaa <__aeabi_fsub+0xea>
    9b3e:	2402      	movs	r4, #2
    9b40:	e7e0      	b.n	9b04 <__aeabi_fsub+0x144>
    9b42:	2a00      	cmp	r2, #0
    9b44:	d125      	bne.n	9b92 <__aeabi_fsub+0x1d2>
    9b46:	1c62      	adds	r2, r4, #1
    9b48:	b2d2      	uxtb	r2, r2
    9b4a:	2a01      	cmp	r2, #1
    9b4c:	dd72      	ble.n	9c34 <__aeabi_fsub+0x274>
    9b4e:	1b9f      	subs	r7, r3, r6
    9b50:	017a      	lsls	r2, r7, #5
    9b52:	d535      	bpl.n	9bc0 <__aeabi_fsub+0x200>
    9b54:	1af7      	subs	r7, r6, r3
    9b56:	000d      	movs	r5, r1
    9b58:	e764      	b.n	9a24 <__aeabi_fsub+0x64>
    9b5a:	2201      	movs	r2, #1
    9b5c:	2300      	movs	r3, #0
    9b5e:	402a      	ands	r2, r5
    9b60:	e786      	b.n	9a70 <__aeabi_fsub+0xb0>
    9b62:	003b      	movs	r3, r7
    9b64:	4a63      	ldr	r2, [pc, #396]	; (9cf4 <__aeabi_fsub+0x334>)
    9b66:	1a24      	subs	r4, r4, r0
    9b68:	4013      	ands	r3, r2
    9b6a:	e76f      	b.n	9a4c <__aeabi_fsub+0x8c>
    9b6c:	2900      	cmp	r1, #0
    9b6e:	d16c      	bne.n	9c4a <__aeabi_fsub+0x28a>
    9b70:	1c61      	adds	r1, r4, #1
    9b72:	b2c8      	uxtb	r0, r1
    9b74:	2801      	cmp	r0, #1
    9b76:	dd4e      	ble.n	9c16 <__aeabi_fsub+0x256>
    9b78:	29ff      	cmp	r1, #255	; 0xff
    9b7a:	d049      	beq.n	9c10 <__aeabi_fsub+0x250>
    9b7c:	199b      	adds	r3, r3, r6
    9b7e:	085b      	lsrs	r3, r3, #1
    9b80:	000c      	movs	r4, r1
    9b82:	e763      	b.n	9a4c <__aeabi_fsub+0x8c>
    9b84:	2aff      	cmp	r2, #255	; 0xff
    9b86:	d041      	beq.n	9c0c <__aeabi_fsub+0x24c>
    9b88:	000a      	movs	r2, r1
    9b8a:	e781      	b.n	9a90 <__aeabi_fsub+0xd0>
    9b8c:	2601      	movs	r6, #1
    9b8e:	1b9b      	subs	r3, r3, r6
    9b90:	e789      	b.n	9aa6 <__aeabi_fsub+0xe6>
    9b92:	2c00      	cmp	r4, #0
    9b94:	d01c      	beq.n	9bd0 <__aeabi_fsub+0x210>
    9b96:	28ff      	cmp	r0, #255	; 0xff
    9b98:	d021      	beq.n	9bde <__aeabi_fsub+0x21e>
    9b9a:	2480      	movs	r4, #128	; 0x80
    9b9c:	04e4      	lsls	r4, r4, #19
    9b9e:	4252      	negs	r2, r2
    9ba0:	4323      	orrs	r3, r4
    9ba2:	2a1b      	cmp	r2, #27
    9ba4:	dd00      	ble.n	9ba8 <__aeabi_fsub+0x1e8>
    9ba6:	e096      	b.n	9cd6 <__aeabi_fsub+0x316>
    9ba8:	001c      	movs	r4, r3
    9baa:	2520      	movs	r5, #32
    9bac:	40d4      	lsrs	r4, r2
    9bae:	1aaa      	subs	r2, r5, r2
    9bb0:	4093      	lsls	r3, r2
    9bb2:	1e5a      	subs	r2, r3, #1
    9bb4:	4193      	sbcs	r3, r2
    9bb6:	4323      	orrs	r3, r4
    9bb8:	1af3      	subs	r3, r6, r3
    9bba:	0004      	movs	r4, r0
    9bbc:	000d      	movs	r5, r1
    9bbe:	e72d      	b.n	9a1c <__aeabi_fsub+0x5c>
    9bc0:	2f00      	cmp	r7, #0
    9bc2:	d000      	beq.n	9bc6 <__aeabi_fsub+0x206>
    9bc4:	e72e      	b.n	9a24 <__aeabi_fsub+0x64>
    9bc6:	2200      	movs	r2, #0
    9bc8:	2400      	movs	r4, #0
    9bca:	e7a9      	b.n	9b20 <__aeabi_fsub+0x160>
    9bcc:	000c      	movs	r4, r1
    9bce:	e73d      	b.n	9a4c <__aeabi_fsub+0x8c>
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d058      	beq.n	9c86 <__aeabi_fsub+0x2c6>
    9bd4:	43d2      	mvns	r2, r2
    9bd6:	2a00      	cmp	r2, #0
    9bd8:	d0ee      	beq.n	9bb8 <__aeabi_fsub+0x1f8>
    9bda:	28ff      	cmp	r0, #255	; 0xff
    9bdc:	d1e1      	bne.n	9ba2 <__aeabi_fsub+0x1e2>
    9bde:	0033      	movs	r3, r6
    9be0:	24ff      	movs	r4, #255	; 0xff
    9be2:	000d      	movs	r5, r1
    9be4:	e732      	b.n	9a4c <__aeabi_fsub+0x8c>
    9be6:	29ff      	cmp	r1, #255	; 0xff
    9be8:	d010      	beq.n	9c0c <__aeabi_fsub+0x24c>
    9bea:	0001      	movs	r1, r0
    9bec:	e778      	b.n	9ae0 <__aeabi_fsub+0x120>
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d06e      	beq.n	9cd0 <__aeabi_fsub+0x310>
    9bf2:	24ff      	movs	r4, #255	; 0xff
    9bf4:	2e00      	cmp	r6, #0
    9bf6:	d100      	bne.n	9bfa <__aeabi_fsub+0x23a>
    9bf8:	e728      	b.n	9a4c <__aeabi_fsub+0x8c>
    9bfa:	2280      	movs	r2, #128	; 0x80
    9bfc:	4651      	mov	r1, sl
    9bfe:	03d2      	lsls	r2, r2, #15
    9c00:	4211      	tst	r1, r2
    9c02:	d003      	beq.n	9c0c <__aeabi_fsub+0x24c>
    9c04:	4661      	mov	r1, ip
    9c06:	4211      	tst	r1, r2
    9c08:	d100      	bne.n	9c0c <__aeabi_fsub+0x24c>
    9c0a:	0033      	movs	r3, r6
    9c0c:	24ff      	movs	r4, #255	; 0xff
    9c0e:	e71d      	b.n	9a4c <__aeabi_fsub+0x8c>
    9c10:	24ff      	movs	r4, #255	; 0xff
    9c12:	2300      	movs	r3, #0
    9c14:	e72c      	b.n	9a70 <__aeabi_fsub+0xb0>
    9c16:	2c00      	cmp	r4, #0
    9c18:	d1e9      	bne.n	9bee <__aeabi_fsub+0x22e>
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d063      	beq.n	9ce6 <__aeabi_fsub+0x326>
    9c1e:	2e00      	cmp	r6, #0
    9c20:	d100      	bne.n	9c24 <__aeabi_fsub+0x264>
    9c22:	e713      	b.n	9a4c <__aeabi_fsub+0x8c>
    9c24:	199b      	adds	r3, r3, r6
    9c26:	015a      	lsls	r2, r3, #5
    9c28:	d400      	bmi.n	9c2c <__aeabi_fsub+0x26c>
    9c2a:	e73e      	b.n	9aaa <__aeabi_fsub+0xea>
    9c2c:	4a31      	ldr	r2, [pc, #196]	; (9cf4 <__aeabi_fsub+0x334>)
    9c2e:	000c      	movs	r4, r1
    9c30:	4013      	ands	r3, r2
    9c32:	e70b      	b.n	9a4c <__aeabi_fsub+0x8c>
    9c34:	2c00      	cmp	r4, #0
    9c36:	d11e      	bne.n	9c76 <__aeabi_fsub+0x2b6>
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d12f      	bne.n	9c9c <__aeabi_fsub+0x2dc>
    9c3c:	2e00      	cmp	r6, #0
    9c3e:	d04f      	beq.n	9ce0 <__aeabi_fsub+0x320>
    9c40:	0033      	movs	r3, r6
    9c42:	000d      	movs	r5, r1
    9c44:	e702      	b.n	9a4c <__aeabi_fsub+0x8c>
    9c46:	2601      	movs	r6, #1
    9c48:	e755      	b.n	9af6 <__aeabi_fsub+0x136>
    9c4a:	2c00      	cmp	r4, #0
    9c4c:	d11f      	bne.n	9c8e <__aeabi_fsub+0x2ce>
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d043      	beq.n	9cda <__aeabi_fsub+0x31a>
    9c52:	43c9      	mvns	r1, r1
    9c54:	2900      	cmp	r1, #0
    9c56:	d00b      	beq.n	9c70 <__aeabi_fsub+0x2b0>
    9c58:	28ff      	cmp	r0, #255	; 0xff
    9c5a:	d039      	beq.n	9cd0 <__aeabi_fsub+0x310>
    9c5c:	291b      	cmp	r1, #27
    9c5e:	dc44      	bgt.n	9cea <__aeabi_fsub+0x32a>
    9c60:	001c      	movs	r4, r3
    9c62:	2720      	movs	r7, #32
    9c64:	40cc      	lsrs	r4, r1
    9c66:	1a79      	subs	r1, r7, r1
    9c68:	408b      	lsls	r3, r1
    9c6a:	1e59      	subs	r1, r3, #1
    9c6c:	418b      	sbcs	r3, r1
    9c6e:	4323      	orrs	r3, r4
    9c70:	199b      	adds	r3, r3, r6
    9c72:	0004      	movs	r4, r0
    9c74:	e740      	b.n	9af8 <__aeabi_fsub+0x138>
    9c76:	2b00      	cmp	r3, #0
    9c78:	d11a      	bne.n	9cb0 <__aeabi_fsub+0x2f0>
    9c7a:	2e00      	cmp	r6, #0
    9c7c:	d124      	bne.n	9cc8 <__aeabi_fsub+0x308>
    9c7e:	2780      	movs	r7, #128	; 0x80
    9c80:	2200      	movs	r2, #0
    9c82:	03ff      	lsls	r7, r7, #15
    9c84:	e71b      	b.n	9abe <__aeabi_fsub+0xfe>
    9c86:	0033      	movs	r3, r6
    9c88:	0004      	movs	r4, r0
    9c8a:	000d      	movs	r5, r1
    9c8c:	e6de      	b.n	9a4c <__aeabi_fsub+0x8c>
    9c8e:	28ff      	cmp	r0, #255	; 0xff
    9c90:	d01e      	beq.n	9cd0 <__aeabi_fsub+0x310>
    9c92:	2480      	movs	r4, #128	; 0x80
    9c94:	04e4      	lsls	r4, r4, #19
    9c96:	4249      	negs	r1, r1
    9c98:	4323      	orrs	r3, r4
    9c9a:	e7df      	b.n	9c5c <__aeabi_fsub+0x29c>
    9c9c:	2e00      	cmp	r6, #0
    9c9e:	d100      	bne.n	9ca2 <__aeabi_fsub+0x2e2>
    9ca0:	e6d4      	b.n	9a4c <__aeabi_fsub+0x8c>
    9ca2:	1b9f      	subs	r7, r3, r6
    9ca4:	017a      	lsls	r2, r7, #5
    9ca6:	d400      	bmi.n	9caa <__aeabi_fsub+0x2ea>
    9ca8:	e737      	b.n	9b1a <__aeabi_fsub+0x15a>
    9caa:	1af3      	subs	r3, r6, r3
    9cac:	000d      	movs	r5, r1
    9cae:	e6cd      	b.n	9a4c <__aeabi_fsub+0x8c>
    9cb0:	24ff      	movs	r4, #255	; 0xff
    9cb2:	2e00      	cmp	r6, #0
    9cb4:	d100      	bne.n	9cb8 <__aeabi_fsub+0x2f8>
    9cb6:	e6c9      	b.n	9a4c <__aeabi_fsub+0x8c>
    9cb8:	2280      	movs	r2, #128	; 0x80
    9cba:	4650      	mov	r0, sl
    9cbc:	03d2      	lsls	r2, r2, #15
    9cbe:	4210      	tst	r0, r2
    9cc0:	d0a4      	beq.n	9c0c <__aeabi_fsub+0x24c>
    9cc2:	4660      	mov	r0, ip
    9cc4:	4210      	tst	r0, r2
    9cc6:	d1a1      	bne.n	9c0c <__aeabi_fsub+0x24c>
    9cc8:	0033      	movs	r3, r6
    9cca:	000d      	movs	r5, r1
    9ccc:	24ff      	movs	r4, #255	; 0xff
    9cce:	e6bd      	b.n	9a4c <__aeabi_fsub+0x8c>
    9cd0:	0033      	movs	r3, r6
    9cd2:	24ff      	movs	r4, #255	; 0xff
    9cd4:	e6ba      	b.n	9a4c <__aeabi_fsub+0x8c>
    9cd6:	2301      	movs	r3, #1
    9cd8:	e76e      	b.n	9bb8 <__aeabi_fsub+0x1f8>
    9cda:	0033      	movs	r3, r6
    9cdc:	0004      	movs	r4, r0
    9cde:	e6b5      	b.n	9a4c <__aeabi_fsub+0x8c>
    9ce0:	2700      	movs	r7, #0
    9ce2:	2200      	movs	r2, #0
    9ce4:	e71c      	b.n	9b20 <__aeabi_fsub+0x160>
    9ce6:	0033      	movs	r3, r6
    9ce8:	e6b0      	b.n	9a4c <__aeabi_fsub+0x8c>
    9cea:	2301      	movs	r3, #1
    9cec:	e7c0      	b.n	9c70 <__aeabi_fsub+0x2b0>
    9cee:	46c0      	nop			; (mov r8, r8)
    9cf0:	7dffffff 	.word	0x7dffffff
    9cf4:	fbffffff 	.word	0xfbffffff

00009cf8 <__aeabi_f2iz>:
    9cf8:	0241      	lsls	r1, r0, #9
    9cfa:	0043      	lsls	r3, r0, #1
    9cfc:	0fc2      	lsrs	r2, r0, #31
    9cfe:	0a49      	lsrs	r1, r1, #9
    9d00:	0e1b      	lsrs	r3, r3, #24
    9d02:	2000      	movs	r0, #0
    9d04:	2b7e      	cmp	r3, #126	; 0x7e
    9d06:	dd0d      	ble.n	9d24 <__aeabi_f2iz+0x2c>
    9d08:	2b9d      	cmp	r3, #157	; 0x9d
    9d0a:	dc0c      	bgt.n	9d26 <__aeabi_f2iz+0x2e>
    9d0c:	2080      	movs	r0, #128	; 0x80
    9d0e:	0400      	lsls	r0, r0, #16
    9d10:	4301      	orrs	r1, r0
    9d12:	2b95      	cmp	r3, #149	; 0x95
    9d14:	dc0a      	bgt.n	9d2c <__aeabi_f2iz+0x34>
    9d16:	2096      	movs	r0, #150	; 0x96
    9d18:	1ac3      	subs	r3, r0, r3
    9d1a:	40d9      	lsrs	r1, r3
    9d1c:	4248      	negs	r0, r1
    9d1e:	2a00      	cmp	r2, #0
    9d20:	d100      	bne.n	9d24 <__aeabi_f2iz+0x2c>
    9d22:	0008      	movs	r0, r1
    9d24:	4770      	bx	lr
    9d26:	4b03      	ldr	r3, [pc, #12]	; (9d34 <__aeabi_f2iz+0x3c>)
    9d28:	18d0      	adds	r0, r2, r3
    9d2a:	e7fb      	b.n	9d24 <__aeabi_f2iz+0x2c>
    9d2c:	3b96      	subs	r3, #150	; 0x96
    9d2e:	4099      	lsls	r1, r3
    9d30:	e7f4      	b.n	9d1c <__aeabi_f2iz+0x24>
    9d32:	46c0      	nop			; (mov r8, r8)
    9d34:	7fffffff 	.word	0x7fffffff

00009d38 <__aeabi_i2f>:
    9d38:	b570      	push	{r4, r5, r6, lr}
    9d3a:	2800      	cmp	r0, #0
    9d3c:	d030      	beq.n	9da0 <__aeabi_i2f+0x68>
    9d3e:	17c3      	asrs	r3, r0, #31
    9d40:	18c4      	adds	r4, r0, r3
    9d42:	405c      	eors	r4, r3
    9d44:	0fc5      	lsrs	r5, r0, #31
    9d46:	0020      	movs	r0, r4
    9d48:	f7ff f9a2 	bl	9090 <__clzsi2>
    9d4c:	239e      	movs	r3, #158	; 0x9e
    9d4e:	1a1b      	subs	r3, r3, r0
    9d50:	2b96      	cmp	r3, #150	; 0x96
    9d52:	dc0d      	bgt.n	9d70 <__aeabi_i2f+0x38>
    9d54:	2296      	movs	r2, #150	; 0x96
    9d56:	1ad2      	subs	r2, r2, r3
    9d58:	4094      	lsls	r4, r2
    9d5a:	002a      	movs	r2, r5
    9d5c:	0264      	lsls	r4, r4, #9
    9d5e:	0a64      	lsrs	r4, r4, #9
    9d60:	b2db      	uxtb	r3, r3
    9d62:	0264      	lsls	r4, r4, #9
    9d64:	05db      	lsls	r3, r3, #23
    9d66:	0a60      	lsrs	r0, r4, #9
    9d68:	07d2      	lsls	r2, r2, #31
    9d6a:	4318      	orrs	r0, r3
    9d6c:	4310      	orrs	r0, r2
    9d6e:	bd70      	pop	{r4, r5, r6, pc}
    9d70:	2b99      	cmp	r3, #153	; 0x99
    9d72:	dc19      	bgt.n	9da8 <__aeabi_i2f+0x70>
    9d74:	2299      	movs	r2, #153	; 0x99
    9d76:	1ad2      	subs	r2, r2, r3
    9d78:	2a00      	cmp	r2, #0
    9d7a:	dd29      	ble.n	9dd0 <__aeabi_i2f+0x98>
    9d7c:	4094      	lsls	r4, r2
    9d7e:	0022      	movs	r2, r4
    9d80:	4c14      	ldr	r4, [pc, #80]	; (9dd4 <__aeabi_i2f+0x9c>)
    9d82:	4014      	ands	r4, r2
    9d84:	0751      	lsls	r1, r2, #29
    9d86:	d004      	beq.n	9d92 <__aeabi_i2f+0x5a>
    9d88:	210f      	movs	r1, #15
    9d8a:	400a      	ands	r2, r1
    9d8c:	2a04      	cmp	r2, #4
    9d8e:	d000      	beq.n	9d92 <__aeabi_i2f+0x5a>
    9d90:	3404      	adds	r4, #4
    9d92:	0162      	lsls	r2, r4, #5
    9d94:	d413      	bmi.n	9dbe <__aeabi_i2f+0x86>
    9d96:	01a4      	lsls	r4, r4, #6
    9d98:	0a64      	lsrs	r4, r4, #9
    9d9a:	b2db      	uxtb	r3, r3
    9d9c:	002a      	movs	r2, r5
    9d9e:	e7e0      	b.n	9d62 <__aeabi_i2f+0x2a>
    9da0:	2200      	movs	r2, #0
    9da2:	2300      	movs	r3, #0
    9da4:	2400      	movs	r4, #0
    9da6:	e7dc      	b.n	9d62 <__aeabi_i2f+0x2a>
    9da8:	2205      	movs	r2, #5
    9daa:	0021      	movs	r1, r4
    9dac:	1a12      	subs	r2, r2, r0
    9dae:	40d1      	lsrs	r1, r2
    9db0:	22b9      	movs	r2, #185	; 0xb9
    9db2:	1ad2      	subs	r2, r2, r3
    9db4:	4094      	lsls	r4, r2
    9db6:	1e62      	subs	r2, r4, #1
    9db8:	4194      	sbcs	r4, r2
    9dba:	430c      	orrs	r4, r1
    9dbc:	e7da      	b.n	9d74 <__aeabi_i2f+0x3c>
    9dbe:	4b05      	ldr	r3, [pc, #20]	; (9dd4 <__aeabi_i2f+0x9c>)
    9dc0:	002a      	movs	r2, r5
    9dc2:	401c      	ands	r4, r3
    9dc4:	239f      	movs	r3, #159	; 0x9f
    9dc6:	01a4      	lsls	r4, r4, #6
    9dc8:	1a1b      	subs	r3, r3, r0
    9dca:	0a64      	lsrs	r4, r4, #9
    9dcc:	b2db      	uxtb	r3, r3
    9dce:	e7c8      	b.n	9d62 <__aeabi_i2f+0x2a>
    9dd0:	0022      	movs	r2, r4
    9dd2:	e7d5      	b.n	9d80 <__aeabi_i2f+0x48>
    9dd4:	fbffffff 	.word	0xfbffffff

00009dd8 <__aeabi_ui2f>:
    9dd8:	b510      	push	{r4, lr}
    9dda:	1e04      	subs	r4, r0, #0
    9ddc:	d027      	beq.n	9e2e <__aeabi_ui2f+0x56>
    9dde:	f7ff f957 	bl	9090 <__clzsi2>
    9de2:	239e      	movs	r3, #158	; 0x9e
    9de4:	1a1b      	subs	r3, r3, r0
    9de6:	2b96      	cmp	r3, #150	; 0x96
    9de8:	dc0a      	bgt.n	9e00 <__aeabi_ui2f+0x28>
    9dea:	2296      	movs	r2, #150	; 0x96
    9dec:	1ad2      	subs	r2, r2, r3
    9dee:	4094      	lsls	r4, r2
    9df0:	0264      	lsls	r4, r4, #9
    9df2:	0a64      	lsrs	r4, r4, #9
    9df4:	b2db      	uxtb	r3, r3
    9df6:	0264      	lsls	r4, r4, #9
    9df8:	05db      	lsls	r3, r3, #23
    9dfa:	0a60      	lsrs	r0, r4, #9
    9dfc:	4318      	orrs	r0, r3
    9dfe:	bd10      	pop	{r4, pc}
    9e00:	2b99      	cmp	r3, #153	; 0x99
    9e02:	dc17      	bgt.n	9e34 <__aeabi_ui2f+0x5c>
    9e04:	2299      	movs	r2, #153	; 0x99
    9e06:	1ad2      	subs	r2, r2, r3
    9e08:	2a00      	cmp	r2, #0
    9e0a:	dd27      	ble.n	9e5c <__aeabi_ui2f+0x84>
    9e0c:	4094      	lsls	r4, r2
    9e0e:	0022      	movs	r2, r4
    9e10:	4c13      	ldr	r4, [pc, #76]	; (9e60 <__aeabi_ui2f+0x88>)
    9e12:	4014      	ands	r4, r2
    9e14:	0751      	lsls	r1, r2, #29
    9e16:	d004      	beq.n	9e22 <__aeabi_ui2f+0x4a>
    9e18:	210f      	movs	r1, #15
    9e1a:	400a      	ands	r2, r1
    9e1c:	2a04      	cmp	r2, #4
    9e1e:	d000      	beq.n	9e22 <__aeabi_ui2f+0x4a>
    9e20:	3404      	adds	r4, #4
    9e22:	0162      	lsls	r2, r4, #5
    9e24:	d412      	bmi.n	9e4c <__aeabi_ui2f+0x74>
    9e26:	01a4      	lsls	r4, r4, #6
    9e28:	0a64      	lsrs	r4, r4, #9
    9e2a:	b2db      	uxtb	r3, r3
    9e2c:	e7e3      	b.n	9df6 <__aeabi_ui2f+0x1e>
    9e2e:	2300      	movs	r3, #0
    9e30:	2400      	movs	r4, #0
    9e32:	e7e0      	b.n	9df6 <__aeabi_ui2f+0x1e>
    9e34:	22b9      	movs	r2, #185	; 0xb9
    9e36:	0021      	movs	r1, r4
    9e38:	1ad2      	subs	r2, r2, r3
    9e3a:	4091      	lsls	r1, r2
    9e3c:	000a      	movs	r2, r1
    9e3e:	1e51      	subs	r1, r2, #1
    9e40:	418a      	sbcs	r2, r1
    9e42:	2105      	movs	r1, #5
    9e44:	1a09      	subs	r1, r1, r0
    9e46:	40cc      	lsrs	r4, r1
    9e48:	4314      	orrs	r4, r2
    9e4a:	e7db      	b.n	9e04 <__aeabi_ui2f+0x2c>
    9e4c:	4b04      	ldr	r3, [pc, #16]	; (9e60 <__aeabi_ui2f+0x88>)
    9e4e:	401c      	ands	r4, r3
    9e50:	239f      	movs	r3, #159	; 0x9f
    9e52:	01a4      	lsls	r4, r4, #6
    9e54:	1a1b      	subs	r3, r3, r0
    9e56:	0a64      	lsrs	r4, r4, #9
    9e58:	b2db      	uxtb	r3, r3
    9e5a:	e7cc      	b.n	9df6 <__aeabi_ui2f+0x1e>
    9e5c:	0022      	movs	r2, r4
    9e5e:	e7d7      	b.n	9e10 <__aeabi_ui2f+0x38>
    9e60:	fbffffff 	.word	0xfbffffff

00009e64 <__aeabi_dadd>:
    9e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e66:	4645      	mov	r5, r8
    9e68:	46de      	mov	lr, fp
    9e6a:	4657      	mov	r7, sl
    9e6c:	464e      	mov	r6, r9
    9e6e:	030c      	lsls	r4, r1, #12
    9e70:	b5e0      	push	{r5, r6, r7, lr}
    9e72:	004e      	lsls	r6, r1, #1
    9e74:	0fc9      	lsrs	r1, r1, #31
    9e76:	4688      	mov	r8, r1
    9e78:	000d      	movs	r5, r1
    9e7a:	0a61      	lsrs	r1, r4, #9
    9e7c:	0f44      	lsrs	r4, r0, #29
    9e7e:	430c      	orrs	r4, r1
    9e80:	00c7      	lsls	r7, r0, #3
    9e82:	0319      	lsls	r1, r3, #12
    9e84:	0058      	lsls	r0, r3, #1
    9e86:	0fdb      	lsrs	r3, r3, #31
    9e88:	469b      	mov	fp, r3
    9e8a:	0a4b      	lsrs	r3, r1, #9
    9e8c:	0f51      	lsrs	r1, r2, #29
    9e8e:	430b      	orrs	r3, r1
    9e90:	0d76      	lsrs	r6, r6, #21
    9e92:	0d40      	lsrs	r0, r0, #21
    9e94:	0019      	movs	r1, r3
    9e96:	00d2      	lsls	r2, r2, #3
    9e98:	45d8      	cmp	r8, fp
    9e9a:	d100      	bne.n	9e9e <__aeabi_dadd+0x3a>
    9e9c:	e0ae      	b.n	9ffc <__aeabi_dadd+0x198>
    9e9e:	1a35      	subs	r5, r6, r0
    9ea0:	2d00      	cmp	r5, #0
    9ea2:	dc00      	bgt.n	9ea6 <__aeabi_dadd+0x42>
    9ea4:	e0f6      	b.n	a094 <__aeabi_dadd+0x230>
    9ea6:	2800      	cmp	r0, #0
    9ea8:	d10f      	bne.n	9eca <__aeabi_dadd+0x66>
    9eaa:	4313      	orrs	r3, r2
    9eac:	d100      	bne.n	9eb0 <__aeabi_dadd+0x4c>
    9eae:	e0db      	b.n	a068 <__aeabi_dadd+0x204>
    9eb0:	1e6b      	subs	r3, r5, #1
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	d000      	beq.n	9eb8 <__aeabi_dadd+0x54>
    9eb6:	e137      	b.n	a128 <__aeabi_dadd+0x2c4>
    9eb8:	1aba      	subs	r2, r7, r2
    9eba:	4297      	cmp	r7, r2
    9ebc:	41bf      	sbcs	r7, r7
    9ebe:	1a64      	subs	r4, r4, r1
    9ec0:	427f      	negs	r7, r7
    9ec2:	1be4      	subs	r4, r4, r7
    9ec4:	2601      	movs	r6, #1
    9ec6:	0017      	movs	r7, r2
    9ec8:	e024      	b.n	9f14 <__aeabi_dadd+0xb0>
    9eca:	4bc6      	ldr	r3, [pc, #792]	; (a1e4 <__aeabi_dadd+0x380>)
    9ecc:	429e      	cmp	r6, r3
    9ece:	d04d      	beq.n	9f6c <__aeabi_dadd+0x108>
    9ed0:	2380      	movs	r3, #128	; 0x80
    9ed2:	041b      	lsls	r3, r3, #16
    9ed4:	4319      	orrs	r1, r3
    9ed6:	2d38      	cmp	r5, #56	; 0x38
    9ed8:	dd00      	ble.n	9edc <__aeabi_dadd+0x78>
    9eda:	e107      	b.n	a0ec <__aeabi_dadd+0x288>
    9edc:	2d1f      	cmp	r5, #31
    9ede:	dd00      	ble.n	9ee2 <__aeabi_dadd+0x7e>
    9ee0:	e138      	b.n	a154 <__aeabi_dadd+0x2f0>
    9ee2:	2020      	movs	r0, #32
    9ee4:	1b43      	subs	r3, r0, r5
    9ee6:	469a      	mov	sl, r3
    9ee8:	000b      	movs	r3, r1
    9eea:	4650      	mov	r0, sl
    9eec:	4083      	lsls	r3, r0
    9eee:	4699      	mov	r9, r3
    9ef0:	0013      	movs	r3, r2
    9ef2:	4648      	mov	r0, r9
    9ef4:	40eb      	lsrs	r3, r5
    9ef6:	4318      	orrs	r0, r3
    9ef8:	0003      	movs	r3, r0
    9efa:	4650      	mov	r0, sl
    9efc:	4082      	lsls	r2, r0
    9efe:	1e50      	subs	r0, r2, #1
    9f00:	4182      	sbcs	r2, r0
    9f02:	40e9      	lsrs	r1, r5
    9f04:	431a      	orrs	r2, r3
    9f06:	1aba      	subs	r2, r7, r2
    9f08:	1a61      	subs	r1, r4, r1
    9f0a:	4297      	cmp	r7, r2
    9f0c:	41a4      	sbcs	r4, r4
    9f0e:	0017      	movs	r7, r2
    9f10:	4264      	negs	r4, r4
    9f12:	1b0c      	subs	r4, r1, r4
    9f14:	0223      	lsls	r3, r4, #8
    9f16:	d562      	bpl.n	9fde <__aeabi_dadd+0x17a>
    9f18:	0264      	lsls	r4, r4, #9
    9f1a:	0a65      	lsrs	r5, r4, #9
    9f1c:	2d00      	cmp	r5, #0
    9f1e:	d100      	bne.n	9f22 <__aeabi_dadd+0xbe>
    9f20:	e0df      	b.n	a0e2 <__aeabi_dadd+0x27e>
    9f22:	0028      	movs	r0, r5
    9f24:	f7ff f8b4 	bl	9090 <__clzsi2>
    9f28:	0003      	movs	r3, r0
    9f2a:	3b08      	subs	r3, #8
    9f2c:	2b1f      	cmp	r3, #31
    9f2e:	dd00      	ble.n	9f32 <__aeabi_dadd+0xce>
    9f30:	e0d2      	b.n	a0d8 <__aeabi_dadd+0x274>
    9f32:	2220      	movs	r2, #32
    9f34:	003c      	movs	r4, r7
    9f36:	1ad2      	subs	r2, r2, r3
    9f38:	409d      	lsls	r5, r3
    9f3a:	40d4      	lsrs	r4, r2
    9f3c:	409f      	lsls	r7, r3
    9f3e:	4325      	orrs	r5, r4
    9f40:	429e      	cmp	r6, r3
    9f42:	dd00      	ble.n	9f46 <__aeabi_dadd+0xe2>
    9f44:	e0c4      	b.n	a0d0 <__aeabi_dadd+0x26c>
    9f46:	1b9e      	subs	r6, r3, r6
    9f48:	1c73      	adds	r3, r6, #1
    9f4a:	2b1f      	cmp	r3, #31
    9f4c:	dd00      	ble.n	9f50 <__aeabi_dadd+0xec>
    9f4e:	e0f1      	b.n	a134 <__aeabi_dadd+0x2d0>
    9f50:	2220      	movs	r2, #32
    9f52:	0038      	movs	r0, r7
    9f54:	0029      	movs	r1, r5
    9f56:	1ad2      	subs	r2, r2, r3
    9f58:	40d8      	lsrs	r0, r3
    9f5a:	4091      	lsls	r1, r2
    9f5c:	4097      	lsls	r7, r2
    9f5e:	002c      	movs	r4, r5
    9f60:	4301      	orrs	r1, r0
    9f62:	1e78      	subs	r0, r7, #1
    9f64:	4187      	sbcs	r7, r0
    9f66:	40dc      	lsrs	r4, r3
    9f68:	2600      	movs	r6, #0
    9f6a:	430f      	orrs	r7, r1
    9f6c:	077b      	lsls	r3, r7, #29
    9f6e:	d009      	beq.n	9f84 <__aeabi_dadd+0x120>
    9f70:	230f      	movs	r3, #15
    9f72:	403b      	ands	r3, r7
    9f74:	2b04      	cmp	r3, #4
    9f76:	d005      	beq.n	9f84 <__aeabi_dadd+0x120>
    9f78:	1d3b      	adds	r3, r7, #4
    9f7a:	42bb      	cmp	r3, r7
    9f7c:	41bf      	sbcs	r7, r7
    9f7e:	427f      	negs	r7, r7
    9f80:	19e4      	adds	r4, r4, r7
    9f82:	001f      	movs	r7, r3
    9f84:	0223      	lsls	r3, r4, #8
    9f86:	d52c      	bpl.n	9fe2 <__aeabi_dadd+0x17e>
    9f88:	4b96      	ldr	r3, [pc, #600]	; (a1e4 <__aeabi_dadd+0x380>)
    9f8a:	3601      	adds	r6, #1
    9f8c:	429e      	cmp	r6, r3
    9f8e:	d100      	bne.n	9f92 <__aeabi_dadd+0x12e>
    9f90:	e09a      	b.n	a0c8 <__aeabi_dadd+0x264>
    9f92:	4645      	mov	r5, r8
    9f94:	4b94      	ldr	r3, [pc, #592]	; (a1e8 <__aeabi_dadd+0x384>)
    9f96:	08ff      	lsrs	r7, r7, #3
    9f98:	401c      	ands	r4, r3
    9f9a:	0760      	lsls	r0, r4, #29
    9f9c:	0576      	lsls	r6, r6, #21
    9f9e:	0264      	lsls	r4, r4, #9
    9fa0:	4307      	orrs	r7, r0
    9fa2:	0b24      	lsrs	r4, r4, #12
    9fa4:	0d76      	lsrs	r6, r6, #21
    9fa6:	2100      	movs	r1, #0
    9fa8:	0324      	lsls	r4, r4, #12
    9faa:	0b23      	lsrs	r3, r4, #12
    9fac:	0d0c      	lsrs	r4, r1, #20
    9fae:	4a8f      	ldr	r2, [pc, #572]	; (a1ec <__aeabi_dadd+0x388>)
    9fb0:	0524      	lsls	r4, r4, #20
    9fb2:	431c      	orrs	r4, r3
    9fb4:	4014      	ands	r4, r2
    9fb6:	0533      	lsls	r3, r6, #20
    9fb8:	4323      	orrs	r3, r4
    9fba:	005b      	lsls	r3, r3, #1
    9fbc:	07ed      	lsls	r5, r5, #31
    9fbe:	085b      	lsrs	r3, r3, #1
    9fc0:	432b      	orrs	r3, r5
    9fc2:	0038      	movs	r0, r7
    9fc4:	0019      	movs	r1, r3
    9fc6:	bc3c      	pop	{r2, r3, r4, r5}
    9fc8:	4690      	mov	r8, r2
    9fca:	4699      	mov	r9, r3
    9fcc:	46a2      	mov	sl, r4
    9fce:	46ab      	mov	fp, r5
    9fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fd2:	4664      	mov	r4, ip
    9fd4:	4304      	orrs	r4, r0
    9fd6:	d100      	bne.n	9fda <__aeabi_dadd+0x176>
    9fd8:	e211      	b.n	a3fe <__aeabi_dadd+0x59a>
    9fda:	0004      	movs	r4, r0
    9fdc:	4667      	mov	r7, ip
    9fde:	077b      	lsls	r3, r7, #29
    9fe0:	d1c6      	bne.n	9f70 <__aeabi_dadd+0x10c>
    9fe2:	4645      	mov	r5, r8
    9fe4:	0760      	lsls	r0, r4, #29
    9fe6:	08ff      	lsrs	r7, r7, #3
    9fe8:	4307      	orrs	r7, r0
    9fea:	08e4      	lsrs	r4, r4, #3
    9fec:	4b7d      	ldr	r3, [pc, #500]	; (a1e4 <__aeabi_dadd+0x380>)
    9fee:	429e      	cmp	r6, r3
    9ff0:	d030      	beq.n	a054 <__aeabi_dadd+0x1f0>
    9ff2:	0324      	lsls	r4, r4, #12
    9ff4:	0576      	lsls	r6, r6, #21
    9ff6:	0b24      	lsrs	r4, r4, #12
    9ff8:	0d76      	lsrs	r6, r6, #21
    9ffa:	e7d4      	b.n	9fa6 <__aeabi_dadd+0x142>
    9ffc:	1a33      	subs	r3, r6, r0
    9ffe:	469a      	mov	sl, r3
    a000:	2b00      	cmp	r3, #0
    a002:	dd78      	ble.n	a0f6 <__aeabi_dadd+0x292>
    a004:	2800      	cmp	r0, #0
    a006:	d031      	beq.n	a06c <__aeabi_dadd+0x208>
    a008:	4876      	ldr	r0, [pc, #472]	; (a1e4 <__aeabi_dadd+0x380>)
    a00a:	4286      	cmp	r6, r0
    a00c:	d0ae      	beq.n	9f6c <__aeabi_dadd+0x108>
    a00e:	2080      	movs	r0, #128	; 0x80
    a010:	0400      	lsls	r0, r0, #16
    a012:	4301      	orrs	r1, r0
    a014:	4653      	mov	r3, sl
    a016:	2b38      	cmp	r3, #56	; 0x38
    a018:	dc00      	bgt.n	a01c <__aeabi_dadd+0x1b8>
    a01a:	e0e9      	b.n	a1f0 <__aeabi_dadd+0x38c>
    a01c:	430a      	orrs	r2, r1
    a01e:	1e51      	subs	r1, r2, #1
    a020:	418a      	sbcs	r2, r1
    a022:	2100      	movs	r1, #0
    a024:	19d2      	adds	r2, r2, r7
    a026:	42ba      	cmp	r2, r7
    a028:	41bf      	sbcs	r7, r7
    a02a:	1909      	adds	r1, r1, r4
    a02c:	427c      	negs	r4, r7
    a02e:	0017      	movs	r7, r2
    a030:	190c      	adds	r4, r1, r4
    a032:	0223      	lsls	r3, r4, #8
    a034:	d5d3      	bpl.n	9fde <__aeabi_dadd+0x17a>
    a036:	4b6b      	ldr	r3, [pc, #428]	; (a1e4 <__aeabi_dadd+0x380>)
    a038:	3601      	adds	r6, #1
    a03a:	429e      	cmp	r6, r3
    a03c:	d100      	bne.n	a040 <__aeabi_dadd+0x1dc>
    a03e:	e13a      	b.n	a2b6 <__aeabi_dadd+0x452>
    a040:	2001      	movs	r0, #1
    a042:	4b69      	ldr	r3, [pc, #420]	; (a1e8 <__aeabi_dadd+0x384>)
    a044:	401c      	ands	r4, r3
    a046:	087b      	lsrs	r3, r7, #1
    a048:	4007      	ands	r7, r0
    a04a:	431f      	orrs	r7, r3
    a04c:	07e0      	lsls	r0, r4, #31
    a04e:	4307      	orrs	r7, r0
    a050:	0864      	lsrs	r4, r4, #1
    a052:	e78b      	b.n	9f6c <__aeabi_dadd+0x108>
    a054:	0023      	movs	r3, r4
    a056:	433b      	orrs	r3, r7
    a058:	d100      	bne.n	a05c <__aeabi_dadd+0x1f8>
    a05a:	e1cb      	b.n	a3f4 <__aeabi_dadd+0x590>
    a05c:	2280      	movs	r2, #128	; 0x80
    a05e:	0312      	lsls	r2, r2, #12
    a060:	4314      	orrs	r4, r2
    a062:	0324      	lsls	r4, r4, #12
    a064:	0b24      	lsrs	r4, r4, #12
    a066:	e79e      	b.n	9fa6 <__aeabi_dadd+0x142>
    a068:	002e      	movs	r6, r5
    a06a:	e77f      	b.n	9f6c <__aeabi_dadd+0x108>
    a06c:	0008      	movs	r0, r1
    a06e:	4310      	orrs	r0, r2
    a070:	d100      	bne.n	a074 <__aeabi_dadd+0x210>
    a072:	e0b4      	b.n	a1de <__aeabi_dadd+0x37a>
    a074:	1e58      	subs	r0, r3, #1
    a076:	2800      	cmp	r0, #0
    a078:	d000      	beq.n	a07c <__aeabi_dadd+0x218>
    a07a:	e0de      	b.n	a23a <__aeabi_dadd+0x3d6>
    a07c:	18ba      	adds	r2, r7, r2
    a07e:	42ba      	cmp	r2, r7
    a080:	419b      	sbcs	r3, r3
    a082:	1864      	adds	r4, r4, r1
    a084:	425b      	negs	r3, r3
    a086:	18e4      	adds	r4, r4, r3
    a088:	0017      	movs	r7, r2
    a08a:	2601      	movs	r6, #1
    a08c:	0223      	lsls	r3, r4, #8
    a08e:	d5a6      	bpl.n	9fde <__aeabi_dadd+0x17a>
    a090:	2602      	movs	r6, #2
    a092:	e7d5      	b.n	a040 <__aeabi_dadd+0x1dc>
    a094:	2d00      	cmp	r5, #0
    a096:	d16e      	bne.n	a176 <__aeabi_dadd+0x312>
    a098:	1c70      	adds	r0, r6, #1
    a09a:	0540      	lsls	r0, r0, #21
    a09c:	0d40      	lsrs	r0, r0, #21
    a09e:	2801      	cmp	r0, #1
    a0a0:	dc00      	bgt.n	a0a4 <__aeabi_dadd+0x240>
    a0a2:	e0f9      	b.n	a298 <__aeabi_dadd+0x434>
    a0a4:	1ab8      	subs	r0, r7, r2
    a0a6:	4684      	mov	ip, r0
    a0a8:	4287      	cmp	r7, r0
    a0aa:	4180      	sbcs	r0, r0
    a0ac:	1ae5      	subs	r5, r4, r3
    a0ae:	4240      	negs	r0, r0
    a0b0:	1a2d      	subs	r5, r5, r0
    a0b2:	0228      	lsls	r0, r5, #8
    a0b4:	d400      	bmi.n	a0b8 <__aeabi_dadd+0x254>
    a0b6:	e089      	b.n	a1cc <__aeabi_dadd+0x368>
    a0b8:	1bd7      	subs	r7, r2, r7
    a0ba:	42ba      	cmp	r2, r7
    a0bc:	4192      	sbcs	r2, r2
    a0be:	1b1c      	subs	r4, r3, r4
    a0c0:	4252      	negs	r2, r2
    a0c2:	1aa5      	subs	r5, r4, r2
    a0c4:	46d8      	mov	r8, fp
    a0c6:	e729      	b.n	9f1c <__aeabi_dadd+0xb8>
    a0c8:	4645      	mov	r5, r8
    a0ca:	2400      	movs	r4, #0
    a0cc:	2700      	movs	r7, #0
    a0ce:	e76a      	b.n	9fa6 <__aeabi_dadd+0x142>
    a0d0:	4c45      	ldr	r4, [pc, #276]	; (a1e8 <__aeabi_dadd+0x384>)
    a0d2:	1af6      	subs	r6, r6, r3
    a0d4:	402c      	ands	r4, r5
    a0d6:	e749      	b.n	9f6c <__aeabi_dadd+0x108>
    a0d8:	003d      	movs	r5, r7
    a0da:	3828      	subs	r0, #40	; 0x28
    a0dc:	4085      	lsls	r5, r0
    a0de:	2700      	movs	r7, #0
    a0e0:	e72e      	b.n	9f40 <__aeabi_dadd+0xdc>
    a0e2:	0038      	movs	r0, r7
    a0e4:	f7fe ffd4 	bl	9090 <__clzsi2>
    a0e8:	3020      	adds	r0, #32
    a0ea:	e71d      	b.n	9f28 <__aeabi_dadd+0xc4>
    a0ec:	430a      	orrs	r2, r1
    a0ee:	1e51      	subs	r1, r2, #1
    a0f0:	418a      	sbcs	r2, r1
    a0f2:	2100      	movs	r1, #0
    a0f4:	e707      	b.n	9f06 <__aeabi_dadd+0xa2>
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d000      	beq.n	a0fc <__aeabi_dadd+0x298>
    a0fa:	e0f3      	b.n	a2e4 <__aeabi_dadd+0x480>
    a0fc:	1c70      	adds	r0, r6, #1
    a0fe:	0543      	lsls	r3, r0, #21
    a100:	0d5b      	lsrs	r3, r3, #21
    a102:	2b01      	cmp	r3, #1
    a104:	dc00      	bgt.n	a108 <__aeabi_dadd+0x2a4>
    a106:	e0ad      	b.n	a264 <__aeabi_dadd+0x400>
    a108:	4b36      	ldr	r3, [pc, #216]	; (a1e4 <__aeabi_dadd+0x380>)
    a10a:	4298      	cmp	r0, r3
    a10c:	d100      	bne.n	a110 <__aeabi_dadd+0x2ac>
    a10e:	e0d1      	b.n	a2b4 <__aeabi_dadd+0x450>
    a110:	18ba      	adds	r2, r7, r2
    a112:	42ba      	cmp	r2, r7
    a114:	41bf      	sbcs	r7, r7
    a116:	1864      	adds	r4, r4, r1
    a118:	427f      	negs	r7, r7
    a11a:	19e4      	adds	r4, r4, r7
    a11c:	07e7      	lsls	r7, r4, #31
    a11e:	0852      	lsrs	r2, r2, #1
    a120:	4317      	orrs	r7, r2
    a122:	0864      	lsrs	r4, r4, #1
    a124:	0006      	movs	r6, r0
    a126:	e721      	b.n	9f6c <__aeabi_dadd+0x108>
    a128:	482e      	ldr	r0, [pc, #184]	; (a1e4 <__aeabi_dadd+0x380>)
    a12a:	4285      	cmp	r5, r0
    a12c:	d100      	bne.n	a130 <__aeabi_dadd+0x2cc>
    a12e:	e093      	b.n	a258 <__aeabi_dadd+0x3f4>
    a130:	001d      	movs	r5, r3
    a132:	e6d0      	b.n	9ed6 <__aeabi_dadd+0x72>
    a134:	0029      	movs	r1, r5
    a136:	3e1f      	subs	r6, #31
    a138:	40f1      	lsrs	r1, r6
    a13a:	2b20      	cmp	r3, #32
    a13c:	d100      	bne.n	a140 <__aeabi_dadd+0x2dc>
    a13e:	e08d      	b.n	a25c <__aeabi_dadd+0x3f8>
    a140:	2240      	movs	r2, #64	; 0x40
    a142:	1ad3      	subs	r3, r2, r3
    a144:	409d      	lsls	r5, r3
    a146:	432f      	orrs	r7, r5
    a148:	1e7d      	subs	r5, r7, #1
    a14a:	41af      	sbcs	r7, r5
    a14c:	2400      	movs	r4, #0
    a14e:	430f      	orrs	r7, r1
    a150:	2600      	movs	r6, #0
    a152:	e744      	b.n	9fde <__aeabi_dadd+0x17a>
    a154:	002b      	movs	r3, r5
    a156:	0008      	movs	r0, r1
    a158:	3b20      	subs	r3, #32
    a15a:	40d8      	lsrs	r0, r3
    a15c:	0003      	movs	r3, r0
    a15e:	2d20      	cmp	r5, #32
    a160:	d100      	bne.n	a164 <__aeabi_dadd+0x300>
    a162:	e07d      	b.n	a260 <__aeabi_dadd+0x3fc>
    a164:	2040      	movs	r0, #64	; 0x40
    a166:	1b45      	subs	r5, r0, r5
    a168:	40a9      	lsls	r1, r5
    a16a:	430a      	orrs	r2, r1
    a16c:	1e51      	subs	r1, r2, #1
    a16e:	418a      	sbcs	r2, r1
    a170:	2100      	movs	r1, #0
    a172:	431a      	orrs	r2, r3
    a174:	e6c7      	b.n	9f06 <__aeabi_dadd+0xa2>
    a176:	2e00      	cmp	r6, #0
    a178:	d050      	beq.n	a21c <__aeabi_dadd+0x3b8>
    a17a:	4e1a      	ldr	r6, [pc, #104]	; (a1e4 <__aeabi_dadd+0x380>)
    a17c:	42b0      	cmp	r0, r6
    a17e:	d057      	beq.n	a230 <__aeabi_dadd+0x3cc>
    a180:	2680      	movs	r6, #128	; 0x80
    a182:	426b      	negs	r3, r5
    a184:	4699      	mov	r9, r3
    a186:	0436      	lsls	r6, r6, #16
    a188:	4334      	orrs	r4, r6
    a18a:	464b      	mov	r3, r9
    a18c:	2b38      	cmp	r3, #56	; 0x38
    a18e:	dd00      	ble.n	a192 <__aeabi_dadd+0x32e>
    a190:	e0d6      	b.n	a340 <__aeabi_dadd+0x4dc>
    a192:	2b1f      	cmp	r3, #31
    a194:	dd00      	ble.n	a198 <__aeabi_dadd+0x334>
    a196:	e135      	b.n	a404 <__aeabi_dadd+0x5a0>
    a198:	2620      	movs	r6, #32
    a19a:	1af5      	subs	r5, r6, r3
    a19c:	0026      	movs	r6, r4
    a19e:	40ae      	lsls	r6, r5
    a1a0:	46b2      	mov	sl, r6
    a1a2:	003e      	movs	r6, r7
    a1a4:	40de      	lsrs	r6, r3
    a1a6:	46ac      	mov	ip, r5
    a1a8:	0035      	movs	r5, r6
    a1aa:	4656      	mov	r6, sl
    a1ac:	432e      	orrs	r6, r5
    a1ae:	4665      	mov	r5, ip
    a1b0:	40af      	lsls	r7, r5
    a1b2:	1e7d      	subs	r5, r7, #1
    a1b4:	41af      	sbcs	r7, r5
    a1b6:	40dc      	lsrs	r4, r3
    a1b8:	4337      	orrs	r7, r6
    a1ba:	1bd7      	subs	r7, r2, r7
    a1bc:	42ba      	cmp	r2, r7
    a1be:	4192      	sbcs	r2, r2
    a1c0:	1b0c      	subs	r4, r1, r4
    a1c2:	4252      	negs	r2, r2
    a1c4:	1aa4      	subs	r4, r4, r2
    a1c6:	0006      	movs	r6, r0
    a1c8:	46d8      	mov	r8, fp
    a1ca:	e6a3      	b.n	9f14 <__aeabi_dadd+0xb0>
    a1cc:	4664      	mov	r4, ip
    a1ce:	4667      	mov	r7, ip
    a1d0:	432c      	orrs	r4, r5
    a1d2:	d000      	beq.n	a1d6 <__aeabi_dadd+0x372>
    a1d4:	e6a2      	b.n	9f1c <__aeabi_dadd+0xb8>
    a1d6:	2500      	movs	r5, #0
    a1d8:	2600      	movs	r6, #0
    a1da:	2700      	movs	r7, #0
    a1dc:	e706      	b.n	9fec <__aeabi_dadd+0x188>
    a1de:	001e      	movs	r6, r3
    a1e0:	e6c4      	b.n	9f6c <__aeabi_dadd+0x108>
    a1e2:	46c0      	nop			; (mov r8, r8)
    a1e4:	000007ff 	.word	0x000007ff
    a1e8:	ff7fffff 	.word	0xff7fffff
    a1ec:	800fffff 	.word	0x800fffff
    a1f0:	2b1f      	cmp	r3, #31
    a1f2:	dc63      	bgt.n	a2bc <__aeabi_dadd+0x458>
    a1f4:	2020      	movs	r0, #32
    a1f6:	1ac3      	subs	r3, r0, r3
    a1f8:	0008      	movs	r0, r1
    a1fa:	4098      	lsls	r0, r3
    a1fc:	469c      	mov	ip, r3
    a1fe:	4683      	mov	fp, r0
    a200:	4653      	mov	r3, sl
    a202:	0010      	movs	r0, r2
    a204:	40d8      	lsrs	r0, r3
    a206:	0003      	movs	r3, r0
    a208:	4658      	mov	r0, fp
    a20a:	4318      	orrs	r0, r3
    a20c:	4663      	mov	r3, ip
    a20e:	409a      	lsls	r2, r3
    a210:	1e53      	subs	r3, r2, #1
    a212:	419a      	sbcs	r2, r3
    a214:	4653      	mov	r3, sl
    a216:	4302      	orrs	r2, r0
    a218:	40d9      	lsrs	r1, r3
    a21a:	e703      	b.n	a024 <__aeabi_dadd+0x1c0>
    a21c:	0026      	movs	r6, r4
    a21e:	433e      	orrs	r6, r7
    a220:	d006      	beq.n	a230 <__aeabi_dadd+0x3cc>
    a222:	43eb      	mvns	r3, r5
    a224:	4699      	mov	r9, r3
    a226:	2b00      	cmp	r3, #0
    a228:	d0c7      	beq.n	a1ba <__aeabi_dadd+0x356>
    a22a:	4e94      	ldr	r6, [pc, #592]	; (a47c <__aeabi_dadd+0x618>)
    a22c:	42b0      	cmp	r0, r6
    a22e:	d1ac      	bne.n	a18a <__aeabi_dadd+0x326>
    a230:	000c      	movs	r4, r1
    a232:	0017      	movs	r7, r2
    a234:	0006      	movs	r6, r0
    a236:	46d8      	mov	r8, fp
    a238:	e698      	b.n	9f6c <__aeabi_dadd+0x108>
    a23a:	4b90      	ldr	r3, [pc, #576]	; (a47c <__aeabi_dadd+0x618>)
    a23c:	459a      	cmp	sl, r3
    a23e:	d00b      	beq.n	a258 <__aeabi_dadd+0x3f4>
    a240:	4682      	mov	sl, r0
    a242:	e6e7      	b.n	a014 <__aeabi_dadd+0x1b0>
    a244:	2800      	cmp	r0, #0
    a246:	d000      	beq.n	a24a <__aeabi_dadd+0x3e6>
    a248:	e09e      	b.n	a388 <__aeabi_dadd+0x524>
    a24a:	0018      	movs	r0, r3
    a24c:	4310      	orrs	r0, r2
    a24e:	d100      	bne.n	a252 <__aeabi_dadd+0x3ee>
    a250:	e0e9      	b.n	a426 <__aeabi_dadd+0x5c2>
    a252:	001c      	movs	r4, r3
    a254:	0017      	movs	r7, r2
    a256:	46d8      	mov	r8, fp
    a258:	4e88      	ldr	r6, [pc, #544]	; (a47c <__aeabi_dadd+0x618>)
    a25a:	e687      	b.n	9f6c <__aeabi_dadd+0x108>
    a25c:	2500      	movs	r5, #0
    a25e:	e772      	b.n	a146 <__aeabi_dadd+0x2e2>
    a260:	2100      	movs	r1, #0
    a262:	e782      	b.n	a16a <__aeabi_dadd+0x306>
    a264:	0023      	movs	r3, r4
    a266:	433b      	orrs	r3, r7
    a268:	2e00      	cmp	r6, #0
    a26a:	d000      	beq.n	a26e <__aeabi_dadd+0x40a>
    a26c:	e0ab      	b.n	a3c6 <__aeabi_dadd+0x562>
    a26e:	2b00      	cmp	r3, #0
    a270:	d100      	bne.n	a274 <__aeabi_dadd+0x410>
    a272:	e0e7      	b.n	a444 <__aeabi_dadd+0x5e0>
    a274:	000b      	movs	r3, r1
    a276:	4313      	orrs	r3, r2
    a278:	d100      	bne.n	a27c <__aeabi_dadd+0x418>
    a27a:	e677      	b.n	9f6c <__aeabi_dadd+0x108>
    a27c:	18ba      	adds	r2, r7, r2
    a27e:	42ba      	cmp	r2, r7
    a280:	41bf      	sbcs	r7, r7
    a282:	1864      	adds	r4, r4, r1
    a284:	427f      	negs	r7, r7
    a286:	19e4      	adds	r4, r4, r7
    a288:	0223      	lsls	r3, r4, #8
    a28a:	d400      	bmi.n	a28e <__aeabi_dadd+0x42a>
    a28c:	e0f2      	b.n	a474 <__aeabi_dadd+0x610>
    a28e:	4b7c      	ldr	r3, [pc, #496]	; (a480 <__aeabi_dadd+0x61c>)
    a290:	0017      	movs	r7, r2
    a292:	401c      	ands	r4, r3
    a294:	0006      	movs	r6, r0
    a296:	e669      	b.n	9f6c <__aeabi_dadd+0x108>
    a298:	0020      	movs	r0, r4
    a29a:	4338      	orrs	r0, r7
    a29c:	2e00      	cmp	r6, #0
    a29e:	d1d1      	bne.n	a244 <__aeabi_dadd+0x3e0>
    a2a0:	2800      	cmp	r0, #0
    a2a2:	d15b      	bne.n	a35c <__aeabi_dadd+0x4f8>
    a2a4:	001c      	movs	r4, r3
    a2a6:	4314      	orrs	r4, r2
    a2a8:	d100      	bne.n	a2ac <__aeabi_dadd+0x448>
    a2aa:	e0a8      	b.n	a3fe <__aeabi_dadd+0x59a>
    a2ac:	001c      	movs	r4, r3
    a2ae:	0017      	movs	r7, r2
    a2b0:	46d8      	mov	r8, fp
    a2b2:	e65b      	b.n	9f6c <__aeabi_dadd+0x108>
    a2b4:	0006      	movs	r6, r0
    a2b6:	2400      	movs	r4, #0
    a2b8:	2700      	movs	r7, #0
    a2ba:	e697      	b.n	9fec <__aeabi_dadd+0x188>
    a2bc:	4650      	mov	r0, sl
    a2be:	000b      	movs	r3, r1
    a2c0:	3820      	subs	r0, #32
    a2c2:	40c3      	lsrs	r3, r0
    a2c4:	4699      	mov	r9, r3
    a2c6:	4653      	mov	r3, sl
    a2c8:	2b20      	cmp	r3, #32
    a2ca:	d100      	bne.n	a2ce <__aeabi_dadd+0x46a>
    a2cc:	e095      	b.n	a3fa <__aeabi_dadd+0x596>
    a2ce:	2340      	movs	r3, #64	; 0x40
    a2d0:	4650      	mov	r0, sl
    a2d2:	1a1b      	subs	r3, r3, r0
    a2d4:	4099      	lsls	r1, r3
    a2d6:	430a      	orrs	r2, r1
    a2d8:	1e51      	subs	r1, r2, #1
    a2da:	418a      	sbcs	r2, r1
    a2dc:	464b      	mov	r3, r9
    a2de:	2100      	movs	r1, #0
    a2e0:	431a      	orrs	r2, r3
    a2e2:	e69f      	b.n	a024 <__aeabi_dadd+0x1c0>
    a2e4:	2e00      	cmp	r6, #0
    a2e6:	d130      	bne.n	a34a <__aeabi_dadd+0x4e6>
    a2e8:	0026      	movs	r6, r4
    a2ea:	433e      	orrs	r6, r7
    a2ec:	d067      	beq.n	a3be <__aeabi_dadd+0x55a>
    a2ee:	43db      	mvns	r3, r3
    a2f0:	469a      	mov	sl, r3
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d01c      	beq.n	a330 <__aeabi_dadd+0x4cc>
    a2f6:	4e61      	ldr	r6, [pc, #388]	; (a47c <__aeabi_dadd+0x618>)
    a2f8:	42b0      	cmp	r0, r6
    a2fa:	d060      	beq.n	a3be <__aeabi_dadd+0x55a>
    a2fc:	4653      	mov	r3, sl
    a2fe:	2b38      	cmp	r3, #56	; 0x38
    a300:	dd00      	ble.n	a304 <__aeabi_dadd+0x4a0>
    a302:	e096      	b.n	a432 <__aeabi_dadd+0x5ce>
    a304:	2b1f      	cmp	r3, #31
    a306:	dd00      	ble.n	a30a <__aeabi_dadd+0x4a6>
    a308:	e09f      	b.n	a44a <__aeabi_dadd+0x5e6>
    a30a:	2620      	movs	r6, #32
    a30c:	1af3      	subs	r3, r6, r3
    a30e:	0026      	movs	r6, r4
    a310:	409e      	lsls	r6, r3
    a312:	469c      	mov	ip, r3
    a314:	46b3      	mov	fp, r6
    a316:	4653      	mov	r3, sl
    a318:	003e      	movs	r6, r7
    a31a:	40de      	lsrs	r6, r3
    a31c:	0033      	movs	r3, r6
    a31e:	465e      	mov	r6, fp
    a320:	431e      	orrs	r6, r3
    a322:	4663      	mov	r3, ip
    a324:	409f      	lsls	r7, r3
    a326:	1e7b      	subs	r3, r7, #1
    a328:	419f      	sbcs	r7, r3
    a32a:	4653      	mov	r3, sl
    a32c:	40dc      	lsrs	r4, r3
    a32e:	4337      	orrs	r7, r6
    a330:	18bf      	adds	r7, r7, r2
    a332:	4297      	cmp	r7, r2
    a334:	4192      	sbcs	r2, r2
    a336:	1864      	adds	r4, r4, r1
    a338:	4252      	negs	r2, r2
    a33a:	18a4      	adds	r4, r4, r2
    a33c:	0006      	movs	r6, r0
    a33e:	e678      	b.n	a032 <__aeabi_dadd+0x1ce>
    a340:	4327      	orrs	r7, r4
    a342:	1e7c      	subs	r4, r7, #1
    a344:	41a7      	sbcs	r7, r4
    a346:	2400      	movs	r4, #0
    a348:	e737      	b.n	a1ba <__aeabi_dadd+0x356>
    a34a:	4e4c      	ldr	r6, [pc, #304]	; (a47c <__aeabi_dadd+0x618>)
    a34c:	42b0      	cmp	r0, r6
    a34e:	d036      	beq.n	a3be <__aeabi_dadd+0x55a>
    a350:	2680      	movs	r6, #128	; 0x80
    a352:	425b      	negs	r3, r3
    a354:	0436      	lsls	r6, r6, #16
    a356:	469a      	mov	sl, r3
    a358:	4334      	orrs	r4, r6
    a35a:	e7cf      	b.n	a2fc <__aeabi_dadd+0x498>
    a35c:	0018      	movs	r0, r3
    a35e:	4310      	orrs	r0, r2
    a360:	d100      	bne.n	a364 <__aeabi_dadd+0x500>
    a362:	e603      	b.n	9f6c <__aeabi_dadd+0x108>
    a364:	1ab8      	subs	r0, r7, r2
    a366:	4684      	mov	ip, r0
    a368:	4567      	cmp	r7, ip
    a36a:	41ad      	sbcs	r5, r5
    a36c:	1ae0      	subs	r0, r4, r3
    a36e:	426d      	negs	r5, r5
    a370:	1b40      	subs	r0, r0, r5
    a372:	0205      	lsls	r5, r0, #8
    a374:	d400      	bmi.n	a378 <__aeabi_dadd+0x514>
    a376:	e62c      	b.n	9fd2 <__aeabi_dadd+0x16e>
    a378:	1bd7      	subs	r7, r2, r7
    a37a:	42ba      	cmp	r2, r7
    a37c:	4192      	sbcs	r2, r2
    a37e:	1b1c      	subs	r4, r3, r4
    a380:	4252      	negs	r2, r2
    a382:	1aa4      	subs	r4, r4, r2
    a384:	46d8      	mov	r8, fp
    a386:	e5f1      	b.n	9f6c <__aeabi_dadd+0x108>
    a388:	0018      	movs	r0, r3
    a38a:	4310      	orrs	r0, r2
    a38c:	d100      	bne.n	a390 <__aeabi_dadd+0x52c>
    a38e:	e763      	b.n	a258 <__aeabi_dadd+0x3f4>
    a390:	08f8      	lsrs	r0, r7, #3
    a392:	0767      	lsls	r7, r4, #29
    a394:	4307      	orrs	r7, r0
    a396:	2080      	movs	r0, #128	; 0x80
    a398:	08e4      	lsrs	r4, r4, #3
    a39a:	0300      	lsls	r0, r0, #12
    a39c:	4204      	tst	r4, r0
    a39e:	d008      	beq.n	a3b2 <__aeabi_dadd+0x54e>
    a3a0:	08dd      	lsrs	r5, r3, #3
    a3a2:	4205      	tst	r5, r0
    a3a4:	d105      	bne.n	a3b2 <__aeabi_dadd+0x54e>
    a3a6:	08d2      	lsrs	r2, r2, #3
    a3a8:	0759      	lsls	r1, r3, #29
    a3aa:	4311      	orrs	r1, r2
    a3ac:	000f      	movs	r7, r1
    a3ae:	002c      	movs	r4, r5
    a3b0:	46d8      	mov	r8, fp
    a3b2:	0f7b      	lsrs	r3, r7, #29
    a3b4:	00e4      	lsls	r4, r4, #3
    a3b6:	431c      	orrs	r4, r3
    a3b8:	00ff      	lsls	r7, r7, #3
    a3ba:	4e30      	ldr	r6, [pc, #192]	; (a47c <__aeabi_dadd+0x618>)
    a3bc:	e5d6      	b.n	9f6c <__aeabi_dadd+0x108>
    a3be:	000c      	movs	r4, r1
    a3c0:	0017      	movs	r7, r2
    a3c2:	0006      	movs	r6, r0
    a3c4:	e5d2      	b.n	9f6c <__aeabi_dadd+0x108>
    a3c6:	2b00      	cmp	r3, #0
    a3c8:	d038      	beq.n	a43c <__aeabi_dadd+0x5d8>
    a3ca:	000b      	movs	r3, r1
    a3cc:	4313      	orrs	r3, r2
    a3ce:	d100      	bne.n	a3d2 <__aeabi_dadd+0x56e>
    a3d0:	e742      	b.n	a258 <__aeabi_dadd+0x3f4>
    a3d2:	08f8      	lsrs	r0, r7, #3
    a3d4:	0767      	lsls	r7, r4, #29
    a3d6:	4307      	orrs	r7, r0
    a3d8:	2080      	movs	r0, #128	; 0x80
    a3da:	08e4      	lsrs	r4, r4, #3
    a3dc:	0300      	lsls	r0, r0, #12
    a3de:	4204      	tst	r4, r0
    a3e0:	d0e7      	beq.n	a3b2 <__aeabi_dadd+0x54e>
    a3e2:	08cb      	lsrs	r3, r1, #3
    a3e4:	4203      	tst	r3, r0
    a3e6:	d1e4      	bne.n	a3b2 <__aeabi_dadd+0x54e>
    a3e8:	08d2      	lsrs	r2, r2, #3
    a3ea:	0749      	lsls	r1, r1, #29
    a3ec:	4311      	orrs	r1, r2
    a3ee:	000f      	movs	r7, r1
    a3f0:	001c      	movs	r4, r3
    a3f2:	e7de      	b.n	a3b2 <__aeabi_dadd+0x54e>
    a3f4:	2700      	movs	r7, #0
    a3f6:	2400      	movs	r4, #0
    a3f8:	e5d5      	b.n	9fa6 <__aeabi_dadd+0x142>
    a3fa:	2100      	movs	r1, #0
    a3fc:	e76b      	b.n	a2d6 <__aeabi_dadd+0x472>
    a3fe:	2500      	movs	r5, #0
    a400:	2700      	movs	r7, #0
    a402:	e5f3      	b.n	9fec <__aeabi_dadd+0x188>
    a404:	464e      	mov	r6, r9
    a406:	0025      	movs	r5, r4
    a408:	3e20      	subs	r6, #32
    a40a:	40f5      	lsrs	r5, r6
    a40c:	464b      	mov	r3, r9
    a40e:	002e      	movs	r6, r5
    a410:	2b20      	cmp	r3, #32
    a412:	d02d      	beq.n	a470 <__aeabi_dadd+0x60c>
    a414:	2540      	movs	r5, #64	; 0x40
    a416:	1aed      	subs	r5, r5, r3
    a418:	40ac      	lsls	r4, r5
    a41a:	4327      	orrs	r7, r4
    a41c:	1e7c      	subs	r4, r7, #1
    a41e:	41a7      	sbcs	r7, r4
    a420:	2400      	movs	r4, #0
    a422:	4337      	orrs	r7, r6
    a424:	e6c9      	b.n	a1ba <__aeabi_dadd+0x356>
    a426:	2480      	movs	r4, #128	; 0x80
    a428:	2500      	movs	r5, #0
    a42a:	0324      	lsls	r4, r4, #12
    a42c:	4e13      	ldr	r6, [pc, #76]	; (a47c <__aeabi_dadd+0x618>)
    a42e:	2700      	movs	r7, #0
    a430:	e5dc      	b.n	9fec <__aeabi_dadd+0x188>
    a432:	4327      	orrs	r7, r4
    a434:	1e7c      	subs	r4, r7, #1
    a436:	41a7      	sbcs	r7, r4
    a438:	2400      	movs	r4, #0
    a43a:	e779      	b.n	a330 <__aeabi_dadd+0x4cc>
    a43c:	000c      	movs	r4, r1
    a43e:	0017      	movs	r7, r2
    a440:	4e0e      	ldr	r6, [pc, #56]	; (a47c <__aeabi_dadd+0x618>)
    a442:	e593      	b.n	9f6c <__aeabi_dadd+0x108>
    a444:	000c      	movs	r4, r1
    a446:	0017      	movs	r7, r2
    a448:	e590      	b.n	9f6c <__aeabi_dadd+0x108>
    a44a:	4656      	mov	r6, sl
    a44c:	0023      	movs	r3, r4
    a44e:	3e20      	subs	r6, #32
    a450:	40f3      	lsrs	r3, r6
    a452:	4699      	mov	r9, r3
    a454:	4653      	mov	r3, sl
    a456:	2b20      	cmp	r3, #32
    a458:	d00e      	beq.n	a478 <__aeabi_dadd+0x614>
    a45a:	2340      	movs	r3, #64	; 0x40
    a45c:	4656      	mov	r6, sl
    a45e:	1b9b      	subs	r3, r3, r6
    a460:	409c      	lsls	r4, r3
    a462:	4327      	orrs	r7, r4
    a464:	1e7c      	subs	r4, r7, #1
    a466:	41a7      	sbcs	r7, r4
    a468:	464b      	mov	r3, r9
    a46a:	2400      	movs	r4, #0
    a46c:	431f      	orrs	r7, r3
    a46e:	e75f      	b.n	a330 <__aeabi_dadd+0x4cc>
    a470:	2400      	movs	r4, #0
    a472:	e7d2      	b.n	a41a <__aeabi_dadd+0x5b6>
    a474:	0017      	movs	r7, r2
    a476:	e5b2      	b.n	9fde <__aeabi_dadd+0x17a>
    a478:	2400      	movs	r4, #0
    a47a:	e7f2      	b.n	a462 <__aeabi_dadd+0x5fe>
    a47c:	000007ff 	.word	0x000007ff
    a480:	ff7fffff 	.word	0xff7fffff

0000a484 <__aeabi_ddiv>:
    a484:	b5f0      	push	{r4, r5, r6, r7, lr}
    a486:	4657      	mov	r7, sl
    a488:	4645      	mov	r5, r8
    a48a:	46de      	mov	lr, fp
    a48c:	464e      	mov	r6, r9
    a48e:	b5e0      	push	{r5, r6, r7, lr}
    a490:	004c      	lsls	r4, r1, #1
    a492:	030e      	lsls	r6, r1, #12
    a494:	b087      	sub	sp, #28
    a496:	4683      	mov	fp, r0
    a498:	4692      	mov	sl, r2
    a49a:	001d      	movs	r5, r3
    a49c:	4680      	mov	r8, r0
    a49e:	0b36      	lsrs	r6, r6, #12
    a4a0:	0d64      	lsrs	r4, r4, #21
    a4a2:	0fcf      	lsrs	r7, r1, #31
    a4a4:	2c00      	cmp	r4, #0
    a4a6:	d04f      	beq.n	a548 <__aeabi_ddiv+0xc4>
    a4a8:	4b6f      	ldr	r3, [pc, #444]	; (a668 <__aeabi_ddiv+0x1e4>)
    a4aa:	429c      	cmp	r4, r3
    a4ac:	d035      	beq.n	a51a <__aeabi_ddiv+0x96>
    a4ae:	2380      	movs	r3, #128	; 0x80
    a4b0:	0f42      	lsrs	r2, r0, #29
    a4b2:	041b      	lsls	r3, r3, #16
    a4b4:	00f6      	lsls	r6, r6, #3
    a4b6:	4313      	orrs	r3, r2
    a4b8:	4333      	orrs	r3, r6
    a4ba:	4699      	mov	r9, r3
    a4bc:	00c3      	lsls	r3, r0, #3
    a4be:	4698      	mov	r8, r3
    a4c0:	4b6a      	ldr	r3, [pc, #424]	; (a66c <__aeabi_ddiv+0x1e8>)
    a4c2:	2600      	movs	r6, #0
    a4c4:	469c      	mov	ip, r3
    a4c6:	2300      	movs	r3, #0
    a4c8:	4464      	add	r4, ip
    a4ca:	9303      	str	r3, [sp, #12]
    a4cc:	032b      	lsls	r3, r5, #12
    a4ce:	0b1b      	lsrs	r3, r3, #12
    a4d0:	469b      	mov	fp, r3
    a4d2:	006b      	lsls	r3, r5, #1
    a4d4:	0fed      	lsrs	r5, r5, #31
    a4d6:	4650      	mov	r0, sl
    a4d8:	0d5b      	lsrs	r3, r3, #21
    a4da:	9501      	str	r5, [sp, #4]
    a4dc:	d05e      	beq.n	a59c <__aeabi_ddiv+0x118>
    a4de:	4a62      	ldr	r2, [pc, #392]	; (a668 <__aeabi_ddiv+0x1e4>)
    a4e0:	4293      	cmp	r3, r2
    a4e2:	d053      	beq.n	a58c <__aeabi_ddiv+0x108>
    a4e4:	465a      	mov	r2, fp
    a4e6:	00d1      	lsls	r1, r2, #3
    a4e8:	2280      	movs	r2, #128	; 0x80
    a4ea:	0f40      	lsrs	r0, r0, #29
    a4ec:	0412      	lsls	r2, r2, #16
    a4ee:	4302      	orrs	r2, r0
    a4f0:	430a      	orrs	r2, r1
    a4f2:	4693      	mov	fp, r2
    a4f4:	4652      	mov	r2, sl
    a4f6:	00d1      	lsls	r1, r2, #3
    a4f8:	4a5c      	ldr	r2, [pc, #368]	; (a66c <__aeabi_ddiv+0x1e8>)
    a4fa:	4694      	mov	ip, r2
    a4fc:	2200      	movs	r2, #0
    a4fe:	4463      	add	r3, ip
    a500:	0038      	movs	r0, r7
    a502:	4068      	eors	r0, r5
    a504:	4684      	mov	ip, r0
    a506:	9002      	str	r0, [sp, #8]
    a508:	1ae4      	subs	r4, r4, r3
    a50a:	4316      	orrs	r6, r2
    a50c:	2e0f      	cmp	r6, #15
    a50e:	d900      	bls.n	a512 <__aeabi_ddiv+0x8e>
    a510:	e0b4      	b.n	a67c <__aeabi_ddiv+0x1f8>
    a512:	4b57      	ldr	r3, [pc, #348]	; (a670 <__aeabi_ddiv+0x1ec>)
    a514:	00b6      	lsls	r6, r6, #2
    a516:	599b      	ldr	r3, [r3, r6]
    a518:	469f      	mov	pc, r3
    a51a:	0003      	movs	r3, r0
    a51c:	4333      	orrs	r3, r6
    a51e:	4699      	mov	r9, r3
    a520:	d16c      	bne.n	a5fc <__aeabi_ddiv+0x178>
    a522:	2300      	movs	r3, #0
    a524:	4698      	mov	r8, r3
    a526:	3302      	adds	r3, #2
    a528:	2608      	movs	r6, #8
    a52a:	9303      	str	r3, [sp, #12]
    a52c:	e7ce      	b.n	a4cc <__aeabi_ddiv+0x48>
    a52e:	46cb      	mov	fp, r9
    a530:	4641      	mov	r1, r8
    a532:	9a03      	ldr	r2, [sp, #12]
    a534:	9701      	str	r7, [sp, #4]
    a536:	2a02      	cmp	r2, #2
    a538:	d165      	bne.n	a606 <__aeabi_ddiv+0x182>
    a53a:	9b01      	ldr	r3, [sp, #4]
    a53c:	4c4a      	ldr	r4, [pc, #296]	; (a668 <__aeabi_ddiv+0x1e4>)
    a53e:	469c      	mov	ip, r3
    a540:	2300      	movs	r3, #0
    a542:	2200      	movs	r2, #0
    a544:	4698      	mov	r8, r3
    a546:	e06b      	b.n	a620 <__aeabi_ddiv+0x19c>
    a548:	0003      	movs	r3, r0
    a54a:	4333      	orrs	r3, r6
    a54c:	4699      	mov	r9, r3
    a54e:	d04e      	beq.n	a5ee <__aeabi_ddiv+0x16a>
    a550:	2e00      	cmp	r6, #0
    a552:	d100      	bne.n	a556 <__aeabi_ddiv+0xd2>
    a554:	e1bc      	b.n	a8d0 <__aeabi_ddiv+0x44c>
    a556:	0030      	movs	r0, r6
    a558:	f7fe fd9a 	bl	9090 <__clzsi2>
    a55c:	0003      	movs	r3, r0
    a55e:	3b0b      	subs	r3, #11
    a560:	2b1c      	cmp	r3, #28
    a562:	dd00      	ble.n	a566 <__aeabi_ddiv+0xe2>
    a564:	e1ac      	b.n	a8c0 <__aeabi_ddiv+0x43c>
    a566:	221d      	movs	r2, #29
    a568:	1ad3      	subs	r3, r2, r3
    a56a:	465a      	mov	r2, fp
    a56c:	0001      	movs	r1, r0
    a56e:	40da      	lsrs	r2, r3
    a570:	3908      	subs	r1, #8
    a572:	408e      	lsls	r6, r1
    a574:	0013      	movs	r3, r2
    a576:	4333      	orrs	r3, r6
    a578:	4699      	mov	r9, r3
    a57a:	465b      	mov	r3, fp
    a57c:	408b      	lsls	r3, r1
    a57e:	4698      	mov	r8, r3
    a580:	2300      	movs	r3, #0
    a582:	4c3c      	ldr	r4, [pc, #240]	; (a674 <__aeabi_ddiv+0x1f0>)
    a584:	2600      	movs	r6, #0
    a586:	1a24      	subs	r4, r4, r0
    a588:	9303      	str	r3, [sp, #12]
    a58a:	e79f      	b.n	a4cc <__aeabi_ddiv+0x48>
    a58c:	4651      	mov	r1, sl
    a58e:	465a      	mov	r2, fp
    a590:	4311      	orrs	r1, r2
    a592:	d129      	bne.n	a5e8 <__aeabi_ddiv+0x164>
    a594:	2200      	movs	r2, #0
    a596:	4693      	mov	fp, r2
    a598:	3202      	adds	r2, #2
    a59a:	e7b1      	b.n	a500 <__aeabi_ddiv+0x7c>
    a59c:	4659      	mov	r1, fp
    a59e:	4301      	orrs	r1, r0
    a5a0:	d01e      	beq.n	a5e0 <__aeabi_ddiv+0x15c>
    a5a2:	465b      	mov	r3, fp
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d100      	bne.n	a5aa <__aeabi_ddiv+0x126>
    a5a8:	e19e      	b.n	a8e8 <__aeabi_ddiv+0x464>
    a5aa:	4658      	mov	r0, fp
    a5ac:	f7fe fd70 	bl	9090 <__clzsi2>
    a5b0:	0003      	movs	r3, r0
    a5b2:	3b0b      	subs	r3, #11
    a5b4:	2b1c      	cmp	r3, #28
    a5b6:	dd00      	ble.n	a5ba <__aeabi_ddiv+0x136>
    a5b8:	e18f      	b.n	a8da <__aeabi_ddiv+0x456>
    a5ba:	0002      	movs	r2, r0
    a5bc:	4659      	mov	r1, fp
    a5be:	3a08      	subs	r2, #8
    a5c0:	4091      	lsls	r1, r2
    a5c2:	468b      	mov	fp, r1
    a5c4:	211d      	movs	r1, #29
    a5c6:	1acb      	subs	r3, r1, r3
    a5c8:	4651      	mov	r1, sl
    a5ca:	40d9      	lsrs	r1, r3
    a5cc:	000b      	movs	r3, r1
    a5ce:	4659      	mov	r1, fp
    a5d0:	430b      	orrs	r3, r1
    a5d2:	4651      	mov	r1, sl
    a5d4:	469b      	mov	fp, r3
    a5d6:	4091      	lsls	r1, r2
    a5d8:	4b26      	ldr	r3, [pc, #152]	; (a674 <__aeabi_ddiv+0x1f0>)
    a5da:	2200      	movs	r2, #0
    a5dc:	1a1b      	subs	r3, r3, r0
    a5de:	e78f      	b.n	a500 <__aeabi_ddiv+0x7c>
    a5e0:	2300      	movs	r3, #0
    a5e2:	2201      	movs	r2, #1
    a5e4:	469b      	mov	fp, r3
    a5e6:	e78b      	b.n	a500 <__aeabi_ddiv+0x7c>
    a5e8:	4651      	mov	r1, sl
    a5ea:	2203      	movs	r2, #3
    a5ec:	e788      	b.n	a500 <__aeabi_ddiv+0x7c>
    a5ee:	2300      	movs	r3, #0
    a5f0:	4698      	mov	r8, r3
    a5f2:	3301      	adds	r3, #1
    a5f4:	2604      	movs	r6, #4
    a5f6:	2400      	movs	r4, #0
    a5f8:	9303      	str	r3, [sp, #12]
    a5fa:	e767      	b.n	a4cc <__aeabi_ddiv+0x48>
    a5fc:	2303      	movs	r3, #3
    a5fe:	46b1      	mov	r9, r6
    a600:	9303      	str	r3, [sp, #12]
    a602:	260c      	movs	r6, #12
    a604:	e762      	b.n	a4cc <__aeabi_ddiv+0x48>
    a606:	2a03      	cmp	r2, #3
    a608:	d100      	bne.n	a60c <__aeabi_ddiv+0x188>
    a60a:	e25c      	b.n	aac6 <__aeabi_ddiv+0x642>
    a60c:	9b01      	ldr	r3, [sp, #4]
    a60e:	2a01      	cmp	r2, #1
    a610:	d000      	beq.n	a614 <__aeabi_ddiv+0x190>
    a612:	e1e4      	b.n	a9de <__aeabi_ddiv+0x55a>
    a614:	4013      	ands	r3, r2
    a616:	469c      	mov	ip, r3
    a618:	2300      	movs	r3, #0
    a61a:	2400      	movs	r4, #0
    a61c:	2200      	movs	r2, #0
    a61e:	4698      	mov	r8, r3
    a620:	2100      	movs	r1, #0
    a622:	0312      	lsls	r2, r2, #12
    a624:	0b13      	lsrs	r3, r2, #12
    a626:	0d0a      	lsrs	r2, r1, #20
    a628:	0512      	lsls	r2, r2, #20
    a62a:	431a      	orrs	r2, r3
    a62c:	0523      	lsls	r3, r4, #20
    a62e:	4c12      	ldr	r4, [pc, #72]	; (a678 <__aeabi_ddiv+0x1f4>)
    a630:	4640      	mov	r0, r8
    a632:	4022      	ands	r2, r4
    a634:	4313      	orrs	r3, r2
    a636:	4662      	mov	r2, ip
    a638:	005b      	lsls	r3, r3, #1
    a63a:	07d2      	lsls	r2, r2, #31
    a63c:	085b      	lsrs	r3, r3, #1
    a63e:	4313      	orrs	r3, r2
    a640:	0019      	movs	r1, r3
    a642:	b007      	add	sp, #28
    a644:	bc3c      	pop	{r2, r3, r4, r5}
    a646:	4690      	mov	r8, r2
    a648:	4699      	mov	r9, r3
    a64a:	46a2      	mov	sl, r4
    a64c:	46ab      	mov	fp, r5
    a64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a650:	2300      	movs	r3, #0
    a652:	2280      	movs	r2, #128	; 0x80
    a654:	469c      	mov	ip, r3
    a656:	0312      	lsls	r2, r2, #12
    a658:	4698      	mov	r8, r3
    a65a:	4c03      	ldr	r4, [pc, #12]	; (a668 <__aeabi_ddiv+0x1e4>)
    a65c:	e7e0      	b.n	a620 <__aeabi_ddiv+0x19c>
    a65e:	2300      	movs	r3, #0
    a660:	4c01      	ldr	r4, [pc, #4]	; (a668 <__aeabi_ddiv+0x1e4>)
    a662:	2200      	movs	r2, #0
    a664:	4698      	mov	r8, r3
    a666:	e7db      	b.n	a620 <__aeabi_ddiv+0x19c>
    a668:	000007ff 	.word	0x000007ff
    a66c:	fffffc01 	.word	0xfffffc01
    a670:	0000c450 	.word	0x0000c450
    a674:	fffffc0d 	.word	0xfffffc0d
    a678:	800fffff 	.word	0x800fffff
    a67c:	45d9      	cmp	r9, fp
    a67e:	d900      	bls.n	a682 <__aeabi_ddiv+0x1fe>
    a680:	e139      	b.n	a8f6 <__aeabi_ddiv+0x472>
    a682:	d100      	bne.n	a686 <__aeabi_ddiv+0x202>
    a684:	e134      	b.n	a8f0 <__aeabi_ddiv+0x46c>
    a686:	2300      	movs	r3, #0
    a688:	4646      	mov	r6, r8
    a68a:	464d      	mov	r5, r9
    a68c:	469a      	mov	sl, r3
    a68e:	3c01      	subs	r4, #1
    a690:	465b      	mov	r3, fp
    a692:	0e0a      	lsrs	r2, r1, #24
    a694:	021b      	lsls	r3, r3, #8
    a696:	431a      	orrs	r2, r3
    a698:	020b      	lsls	r3, r1, #8
    a69a:	0c17      	lsrs	r7, r2, #16
    a69c:	9303      	str	r3, [sp, #12]
    a69e:	0413      	lsls	r3, r2, #16
    a6a0:	0c1b      	lsrs	r3, r3, #16
    a6a2:	0039      	movs	r1, r7
    a6a4:	0028      	movs	r0, r5
    a6a6:	4690      	mov	r8, r2
    a6a8:	9301      	str	r3, [sp, #4]
    a6aa:	f7fe fb3d 	bl	8d28 <__udivsi3>
    a6ae:	0002      	movs	r2, r0
    a6b0:	9b01      	ldr	r3, [sp, #4]
    a6b2:	4683      	mov	fp, r0
    a6b4:	435a      	muls	r2, r3
    a6b6:	0028      	movs	r0, r5
    a6b8:	0039      	movs	r1, r7
    a6ba:	4691      	mov	r9, r2
    a6bc:	f7fe fbba 	bl	8e34 <__aeabi_uidivmod>
    a6c0:	0c35      	lsrs	r5, r6, #16
    a6c2:	0409      	lsls	r1, r1, #16
    a6c4:	430d      	orrs	r5, r1
    a6c6:	45a9      	cmp	r9, r5
    a6c8:	d90d      	bls.n	a6e6 <__aeabi_ddiv+0x262>
    a6ca:	465b      	mov	r3, fp
    a6cc:	4445      	add	r5, r8
    a6ce:	3b01      	subs	r3, #1
    a6d0:	45a8      	cmp	r8, r5
    a6d2:	d900      	bls.n	a6d6 <__aeabi_ddiv+0x252>
    a6d4:	e13a      	b.n	a94c <__aeabi_ddiv+0x4c8>
    a6d6:	45a9      	cmp	r9, r5
    a6d8:	d800      	bhi.n	a6dc <__aeabi_ddiv+0x258>
    a6da:	e137      	b.n	a94c <__aeabi_ddiv+0x4c8>
    a6dc:	2302      	movs	r3, #2
    a6de:	425b      	negs	r3, r3
    a6e0:	469c      	mov	ip, r3
    a6e2:	4445      	add	r5, r8
    a6e4:	44e3      	add	fp, ip
    a6e6:	464b      	mov	r3, r9
    a6e8:	1aeb      	subs	r3, r5, r3
    a6ea:	0039      	movs	r1, r7
    a6ec:	0018      	movs	r0, r3
    a6ee:	9304      	str	r3, [sp, #16]
    a6f0:	f7fe fb1a 	bl	8d28 <__udivsi3>
    a6f4:	9b01      	ldr	r3, [sp, #4]
    a6f6:	0005      	movs	r5, r0
    a6f8:	4343      	muls	r3, r0
    a6fa:	0039      	movs	r1, r7
    a6fc:	9804      	ldr	r0, [sp, #16]
    a6fe:	4699      	mov	r9, r3
    a700:	f7fe fb98 	bl	8e34 <__aeabi_uidivmod>
    a704:	0433      	lsls	r3, r6, #16
    a706:	0409      	lsls	r1, r1, #16
    a708:	0c1b      	lsrs	r3, r3, #16
    a70a:	430b      	orrs	r3, r1
    a70c:	4599      	cmp	r9, r3
    a70e:	d909      	bls.n	a724 <__aeabi_ddiv+0x2a0>
    a710:	4443      	add	r3, r8
    a712:	1e6a      	subs	r2, r5, #1
    a714:	4598      	cmp	r8, r3
    a716:	d900      	bls.n	a71a <__aeabi_ddiv+0x296>
    a718:	e11a      	b.n	a950 <__aeabi_ddiv+0x4cc>
    a71a:	4599      	cmp	r9, r3
    a71c:	d800      	bhi.n	a720 <__aeabi_ddiv+0x29c>
    a71e:	e117      	b.n	a950 <__aeabi_ddiv+0x4cc>
    a720:	3d02      	subs	r5, #2
    a722:	4443      	add	r3, r8
    a724:	464a      	mov	r2, r9
    a726:	1a9b      	subs	r3, r3, r2
    a728:	465a      	mov	r2, fp
    a72a:	0412      	lsls	r2, r2, #16
    a72c:	432a      	orrs	r2, r5
    a72e:	9903      	ldr	r1, [sp, #12]
    a730:	4693      	mov	fp, r2
    a732:	0c10      	lsrs	r0, r2, #16
    a734:	0c0a      	lsrs	r2, r1, #16
    a736:	4691      	mov	r9, r2
    a738:	0409      	lsls	r1, r1, #16
    a73a:	465a      	mov	r2, fp
    a73c:	0c09      	lsrs	r1, r1, #16
    a73e:	464e      	mov	r6, r9
    a740:	000d      	movs	r5, r1
    a742:	0412      	lsls	r2, r2, #16
    a744:	0c12      	lsrs	r2, r2, #16
    a746:	4345      	muls	r5, r0
    a748:	9105      	str	r1, [sp, #20]
    a74a:	4351      	muls	r1, r2
    a74c:	4372      	muls	r2, r6
    a74e:	4370      	muls	r0, r6
    a750:	1952      	adds	r2, r2, r5
    a752:	0c0e      	lsrs	r6, r1, #16
    a754:	18b2      	adds	r2, r6, r2
    a756:	4295      	cmp	r5, r2
    a758:	d903      	bls.n	a762 <__aeabi_ddiv+0x2de>
    a75a:	2580      	movs	r5, #128	; 0x80
    a75c:	026d      	lsls	r5, r5, #9
    a75e:	46ac      	mov	ip, r5
    a760:	4460      	add	r0, ip
    a762:	0c15      	lsrs	r5, r2, #16
    a764:	0409      	lsls	r1, r1, #16
    a766:	0412      	lsls	r2, r2, #16
    a768:	0c09      	lsrs	r1, r1, #16
    a76a:	1828      	adds	r0, r5, r0
    a76c:	1852      	adds	r2, r2, r1
    a76e:	4283      	cmp	r3, r0
    a770:	d200      	bcs.n	a774 <__aeabi_ddiv+0x2f0>
    a772:	e0ce      	b.n	a912 <__aeabi_ddiv+0x48e>
    a774:	d100      	bne.n	a778 <__aeabi_ddiv+0x2f4>
    a776:	e0c8      	b.n	a90a <__aeabi_ddiv+0x486>
    a778:	1a1d      	subs	r5, r3, r0
    a77a:	4653      	mov	r3, sl
    a77c:	1a9e      	subs	r6, r3, r2
    a77e:	45b2      	cmp	sl, r6
    a780:	4192      	sbcs	r2, r2
    a782:	4252      	negs	r2, r2
    a784:	1aab      	subs	r3, r5, r2
    a786:	469a      	mov	sl, r3
    a788:	4598      	cmp	r8, r3
    a78a:	d100      	bne.n	a78e <__aeabi_ddiv+0x30a>
    a78c:	e117      	b.n	a9be <__aeabi_ddiv+0x53a>
    a78e:	0039      	movs	r1, r7
    a790:	0018      	movs	r0, r3
    a792:	f7fe fac9 	bl	8d28 <__udivsi3>
    a796:	9b01      	ldr	r3, [sp, #4]
    a798:	0005      	movs	r5, r0
    a79a:	4343      	muls	r3, r0
    a79c:	0039      	movs	r1, r7
    a79e:	4650      	mov	r0, sl
    a7a0:	9304      	str	r3, [sp, #16]
    a7a2:	f7fe fb47 	bl	8e34 <__aeabi_uidivmod>
    a7a6:	9804      	ldr	r0, [sp, #16]
    a7a8:	040b      	lsls	r3, r1, #16
    a7aa:	0c31      	lsrs	r1, r6, #16
    a7ac:	4319      	orrs	r1, r3
    a7ae:	4288      	cmp	r0, r1
    a7b0:	d909      	bls.n	a7c6 <__aeabi_ddiv+0x342>
    a7b2:	4441      	add	r1, r8
    a7b4:	1e6b      	subs	r3, r5, #1
    a7b6:	4588      	cmp	r8, r1
    a7b8:	d900      	bls.n	a7bc <__aeabi_ddiv+0x338>
    a7ba:	e107      	b.n	a9cc <__aeabi_ddiv+0x548>
    a7bc:	4288      	cmp	r0, r1
    a7be:	d800      	bhi.n	a7c2 <__aeabi_ddiv+0x33e>
    a7c0:	e104      	b.n	a9cc <__aeabi_ddiv+0x548>
    a7c2:	3d02      	subs	r5, #2
    a7c4:	4441      	add	r1, r8
    a7c6:	9b04      	ldr	r3, [sp, #16]
    a7c8:	1acb      	subs	r3, r1, r3
    a7ca:	0018      	movs	r0, r3
    a7cc:	0039      	movs	r1, r7
    a7ce:	9304      	str	r3, [sp, #16]
    a7d0:	f7fe faaa 	bl	8d28 <__udivsi3>
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	4682      	mov	sl, r0
    a7d8:	4343      	muls	r3, r0
    a7da:	0039      	movs	r1, r7
    a7dc:	9804      	ldr	r0, [sp, #16]
    a7de:	9301      	str	r3, [sp, #4]
    a7e0:	f7fe fb28 	bl	8e34 <__aeabi_uidivmod>
    a7e4:	9801      	ldr	r0, [sp, #4]
    a7e6:	040b      	lsls	r3, r1, #16
    a7e8:	0431      	lsls	r1, r6, #16
    a7ea:	0c09      	lsrs	r1, r1, #16
    a7ec:	4319      	orrs	r1, r3
    a7ee:	4288      	cmp	r0, r1
    a7f0:	d90d      	bls.n	a80e <__aeabi_ddiv+0x38a>
    a7f2:	4653      	mov	r3, sl
    a7f4:	4441      	add	r1, r8
    a7f6:	3b01      	subs	r3, #1
    a7f8:	4588      	cmp	r8, r1
    a7fa:	d900      	bls.n	a7fe <__aeabi_ddiv+0x37a>
    a7fc:	e0e8      	b.n	a9d0 <__aeabi_ddiv+0x54c>
    a7fe:	4288      	cmp	r0, r1
    a800:	d800      	bhi.n	a804 <__aeabi_ddiv+0x380>
    a802:	e0e5      	b.n	a9d0 <__aeabi_ddiv+0x54c>
    a804:	2302      	movs	r3, #2
    a806:	425b      	negs	r3, r3
    a808:	469c      	mov	ip, r3
    a80a:	4441      	add	r1, r8
    a80c:	44e2      	add	sl, ip
    a80e:	9b01      	ldr	r3, [sp, #4]
    a810:	042d      	lsls	r5, r5, #16
    a812:	1ace      	subs	r6, r1, r3
    a814:	4651      	mov	r1, sl
    a816:	4329      	orrs	r1, r5
    a818:	9d05      	ldr	r5, [sp, #20]
    a81a:	464f      	mov	r7, r9
    a81c:	002a      	movs	r2, r5
    a81e:	040b      	lsls	r3, r1, #16
    a820:	0c08      	lsrs	r0, r1, #16
    a822:	0c1b      	lsrs	r3, r3, #16
    a824:	435a      	muls	r2, r3
    a826:	4345      	muls	r5, r0
    a828:	437b      	muls	r3, r7
    a82a:	4378      	muls	r0, r7
    a82c:	195b      	adds	r3, r3, r5
    a82e:	0c17      	lsrs	r7, r2, #16
    a830:	18fb      	adds	r3, r7, r3
    a832:	429d      	cmp	r5, r3
    a834:	d903      	bls.n	a83e <__aeabi_ddiv+0x3ba>
    a836:	2580      	movs	r5, #128	; 0x80
    a838:	026d      	lsls	r5, r5, #9
    a83a:	46ac      	mov	ip, r5
    a83c:	4460      	add	r0, ip
    a83e:	0c1d      	lsrs	r5, r3, #16
    a840:	0412      	lsls	r2, r2, #16
    a842:	041b      	lsls	r3, r3, #16
    a844:	0c12      	lsrs	r2, r2, #16
    a846:	1828      	adds	r0, r5, r0
    a848:	189b      	adds	r3, r3, r2
    a84a:	4286      	cmp	r6, r0
    a84c:	d200      	bcs.n	a850 <__aeabi_ddiv+0x3cc>
    a84e:	e093      	b.n	a978 <__aeabi_ddiv+0x4f4>
    a850:	d100      	bne.n	a854 <__aeabi_ddiv+0x3d0>
    a852:	e08e      	b.n	a972 <__aeabi_ddiv+0x4ee>
    a854:	2301      	movs	r3, #1
    a856:	4319      	orrs	r1, r3
    a858:	4ba0      	ldr	r3, [pc, #640]	; (aadc <__aeabi_ddiv+0x658>)
    a85a:	18e3      	adds	r3, r4, r3
    a85c:	2b00      	cmp	r3, #0
    a85e:	dc00      	bgt.n	a862 <__aeabi_ddiv+0x3de>
    a860:	e099      	b.n	a996 <__aeabi_ddiv+0x512>
    a862:	074a      	lsls	r2, r1, #29
    a864:	d000      	beq.n	a868 <__aeabi_ddiv+0x3e4>
    a866:	e09e      	b.n	a9a6 <__aeabi_ddiv+0x522>
    a868:	465a      	mov	r2, fp
    a86a:	01d2      	lsls	r2, r2, #7
    a86c:	d506      	bpl.n	a87c <__aeabi_ddiv+0x3f8>
    a86e:	465a      	mov	r2, fp
    a870:	4b9b      	ldr	r3, [pc, #620]	; (aae0 <__aeabi_ddiv+0x65c>)
    a872:	401a      	ands	r2, r3
    a874:	2380      	movs	r3, #128	; 0x80
    a876:	4693      	mov	fp, r2
    a878:	00db      	lsls	r3, r3, #3
    a87a:	18e3      	adds	r3, r4, r3
    a87c:	4a99      	ldr	r2, [pc, #612]	; (aae4 <__aeabi_ddiv+0x660>)
    a87e:	4293      	cmp	r3, r2
    a880:	dd68      	ble.n	a954 <__aeabi_ddiv+0x4d0>
    a882:	2301      	movs	r3, #1
    a884:	9a02      	ldr	r2, [sp, #8]
    a886:	4c98      	ldr	r4, [pc, #608]	; (aae8 <__aeabi_ddiv+0x664>)
    a888:	401a      	ands	r2, r3
    a88a:	2300      	movs	r3, #0
    a88c:	4694      	mov	ip, r2
    a88e:	4698      	mov	r8, r3
    a890:	2200      	movs	r2, #0
    a892:	e6c5      	b.n	a620 <__aeabi_ddiv+0x19c>
    a894:	2280      	movs	r2, #128	; 0x80
    a896:	464b      	mov	r3, r9
    a898:	0312      	lsls	r2, r2, #12
    a89a:	4213      	tst	r3, r2
    a89c:	d00a      	beq.n	a8b4 <__aeabi_ddiv+0x430>
    a89e:	465b      	mov	r3, fp
    a8a0:	4213      	tst	r3, r2
    a8a2:	d106      	bne.n	a8b2 <__aeabi_ddiv+0x42e>
    a8a4:	431a      	orrs	r2, r3
    a8a6:	0312      	lsls	r2, r2, #12
    a8a8:	0b12      	lsrs	r2, r2, #12
    a8aa:	46ac      	mov	ip, r5
    a8ac:	4688      	mov	r8, r1
    a8ae:	4c8e      	ldr	r4, [pc, #568]	; (aae8 <__aeabi_ddiv+0x664>)
    a8b0:	e6b6      	b.n	a620 <__aeabi_ddiv+0x19c>
    a8b2:	464b      	mov	r3, r9
    a8b4:	431a      	orrs	r2, r3
    a8b6:	0312      	lsls	r2, r2, #12
    a8b8:	0b12      	lsrs	r2, r2, #12
    a8ba:	46bc      	mov	ip, r7
    a8bc:	4c8a      	ldr	r4, [pc, #552]	; (aae8 <__aeabi_ddiv+0x664>)
    a8be:	e6af      	b.n	a620 <__aeabi_ddiv+0x19c>
    a8c0:	0003      	movs	r3, r0
    a8c2:	465a      	mov	r2, fp
    a8c4:	3b28      	subs	r3, #40	; 0x28
    a8c6:	409a      	lsls	r2, r3
    a8c8:	2300      	movs	r3, #0
    a8ca:	4691      	mov	r9, r2
    a8cc:	4698      	mov	r8, r3
    a8ce:	e657      	b.n	a580 <__aeabi_ddiv+0xfc>
    a8d0:	4658      	mov	r0, fp
    a8d2:	f7fe fbdd 	bl	9090 <__clzsi2>
    a8d6:	3020      	adds	r0, #32
    a8d8:	e640      	b.n	a55c <__aeabi_ddiv+0xd8>
    a8da:	0003      	movs	r3, r0
    a8dc:	4652      	mov	r2, sl
    a8de:	3b28      	subs	r3, #40	; 0x28
    a8e0:	409a      	lsls	r2, r3
    a8e2:	2100      	movs	r1, #0
    a8e4:	4693      	mov	fp, r2
    a8e6:	e677      	b.n	a5d8 <__aeabi_ddiv+0x154>
    a8e8:	f7fe fbd2 	bl	9090 <__clzsi2>
    a8ec:	3020      	adds	r0, #32
    a8ee:	e65f      	b.n	a5b0 <__aeabi_ddiv+0x12c>
    a8f0:	4588      	cmp	r8, r1
    a8f2:	d200      	bcs.n	a8f6 <__aeabi_ddiv+0x472>
    a8f4:	e6c7      	b.n	a686 <__aeabi_ddiv+0x202>
    a8f6:	464b      	mov	r3, r9
    a8f8:	07de      	lsls	r6, r3, #31
    a8fa:	085d      	lsrs	r5, r3, #1
    a8fc:	4643      	mov	r3, r8
    a8fe:	085b      	lsrs	r3, r3, #1
    a900:	431e      	orrs	r6, r3
    a902:	4643      	mov	r3, r8
    a904:	07db      	lsls	r3, r3, #31
    a906:	469a      	mov	sl, r3
    a908:	e6c2      	b.n	a690 <__aeabi_ddiv+0x20c>
    a90a:	2500      	movs	r5, #0
    a90c:	4592      	cmp	sl, r2
    a90e:	d300      	bcc.n	a912 <__aeabi_ddiv+0x48e>
    a910:	e733      	b.n	a77a <__aeabi_ddiv+0x2f6>
    a912:	9e03      	ldr	r6, [sp, #12]
    a914:	4659      	mov	r1, fp
    a916:	46b4      	mov	ip, r6
    a918:	44e2      	add	sl, ip
    a91a:	45b2      	cmp	sl, r6
    a91c:	41ad      	sbcs	r5, r5
    a91e:	426d      	negs	r5, r5
    a920:	4445      	add	r5, r8
    a922:	18eb      	adds	r3, r5, r3
    a924:	3901      	subs	r1, #1
    a926:	4598      	cmp	r8, r3
    a928:	d207      	bcs.n	a93a <__aeabi_ddiv+0x4b6>
    a92a:	4298      	cmp	r0, r3
    a92c:	d900      	bls.n	a930 <__aeabi_ddiv+0x4ac>
    a92e:	e07f      	b.n	aa30 <__aeabi_ddiv+0x5ac>
    a930:	d100      	bne.n	a934 <__aeabi_ddiv+0x4b0>
    a932:	e0bc      	b.n	aaae <__aeabi_ddiv+0x62a>
    a934:	1a1d      	subs	r5, r3, r0
    a936:	468b      	mov	fp, r1
    a938:	e71f      	b.n	a77a <__aeabi_ddiv+0x2f6>
    a93a:	4598      	cmp	r8, r3
    a93c:	d1fa      	bne.n	a934 <__aeabi_ddiv+0x4b0>
    a93e:	9d03      	ldr	r5, [sp, #12]
    a940:	4555      	cmp	r5, sl
    a942:	d9f2      	bls.n	a92a <__aeabi_ddiv+0x4a6>
    a944:	4643      	mov	r3, r8
    a946:	468b      	mov	fp, r1
    a948:	1a1d      	subs	r5, r3, r0
    a94a:	e716      	b.n	a77a <__aeabi_ddiv+0x2f6>
    a94c:	469b      	mov	fp, r3
    a94e:	e6ca      	b.n	a6e6 <__aeabi_ddiv+0x262>
    a950:	0015      	movs	r5, r2
    a952:	e6e7      	b.n	a724 <__aeabi_ddiv+0x2a0>
    a954:	465a      	mov	r2, fp
    a956:	08c9      	lsrs	r1, r1, #3
    a958:	0752      	lsls	r2, r2, #29
    a95a:	430a      	orrs	r2, r1
    a95c:	055b      	lsls	r3, r3, #21
    a95e:	4690      	mov	r8, r2
    a960:	0d5c      	lsrs	r4, r3, #21
    a962:	465a      	mov	r2, fp
    a964:	2301      	movs	r3, #1
    a966:	9902      	ldr	r1, [sp, #8]
    a968:	0252      	lsls	r2, r2, #9
    a96a:	4019      	ands	r1, r3
    a96c:	0b12      	lsrs	r2, r2, #12
    a96e:	468c      	mov	ip, r1
    a970:	e656      	b.n	a620 <__aeabi_ddiv+0x19c>
    a972:	2b00      	cmp	r3, #0
    a974:	d100      	bne.n	a978 <__aeabi_ddiv+0x4f4>
    a976:	e76f      	b.n	a858 <__aeabi_ddiv+0x3d4>
    a978:	4446      	add	r6, r8
    a97a:	1e4a      	subs	r2, r1, #1
    a97c:	45b0      	cmp	r8, r6
    a97e:	d929      	bls.n	a9d4 <__aeabi_ddiv+0x550>
    a980:	0011      	movs	r1, r2
    a982:	4286      	cmp	r6, r0
    a984:	d000      	beq.n	a988 <__aeabi_ddiv+0x504>
    a986:	e765      	b.n	a854 <__aeabi_ddiv+0x3d0>
    a988:	9a03      	ldr	r2, [sp, #12]
    a98a:	4293      	cmp	r3, r2
    a98c:	d000      	beq.n	a990 <__aeabi_ddiv+0x50c>
    a98e:	e761      	b.n	a854 <__aeabi_ddiv+0x3d0>
    a990:	e762      	b.n	a858 <__aeabi_ddiv+0x3d4>
    a992:	2101      	movs	r1, #1
    a994:	4249      	negs	r1, r1
    a996:	2001      	movs	r0, #1
    a998:	1ac2      	subs	r2, r0, r3
    a99a:	2a38      	cmp	r2, #56	; 0x38
    a99c:	dd21      	ble.n	a9e2 <__aeabi_ddiv+0x55e>
    a99e:	9b02      	ldr	r3, [sp, #8]
    a9a0:	4003      	ands	r3, r0
    a9a2:	469c      	mov	ip, r3
    a9a4:	e638      	b.n	a618 <__aeabi_ddiv+0x194>
    a9a6:	220f      	movs	r2, #15
    a9a8:	400a      	ands	r2, r1
    a9aa:	2a04      	cmp	r2, #4
    a9ac:	d100      	bne.n	a9b0 <__aeabi_ddiv+0x52c>
    a9ae:	e75b      	b.n	a868 <__aeabi_ddiv+0x3e4>
    a9b0:	000a      	movs	r2, r1
    a9b2:	1d11      	adds	r1, r2, #4
    a9b4:	4291      	cmp	r1, r2
    a9b6:	4192      	sbcs	r2, r2
    a9b8:	4252      	negs	r2, r2
    a9ba:	4493      	add	fp, r2
    a9bc:	e754      	b.n	a868 <__aeabi_ddiv+0x3e4>
    a9be:	4b47      	ldr	r3, [pc, #284]	; (aadc <__aeabi_ddiv+0x658>)
    a9c0:	18e3      	adds	r3, r4, r3
    a9c2:	2b00      	cmp	r3, #0
    a9c4:	dde5      	ble.n	a992 <__aeabi_ddiv+0x50e>
    a9c6:	2201      	movs	r2, #1
    a9c8:	4252      	negs	r2, r2
    a9ca:	e7f2      	b.n	a9b2 <__aeabi_ddiv+0x52e>
    a9cc:	001d      	movs	r5, r3
    a9ce:	e6fa      	b.n	a7c6 <__aeabi_ddiv+0x342>
    a9d0:	469a      	mov	sl, r3
    a9d2:	e71c      	b.n	a80e <__aeabi_ddiv+0x38a>
    a9d4:	42b0      	cmp	r0, r6
    a9d6:	d839      	bhi.n	aa4c <__aeabi_ddiv+0x5c8>
    a9d8:	d06e      	beq.n	aab8 <__aeabi_ddiv+0x634>
    a9da:	0011      	movs	r1, r2
    a9dc:	e73a      	b.n	a854 <__aeabi_ddiv+0x3d0>
    a9de:	9302      	str	r3, [sp, #8]
    a9e0:	e73a      	b.n	a858 <__aeabi_ddiv+0x3d4>
    a9e2:	2a1f      	cmp	r2, #31
    a9e4:	dc3c      	bgt.n	aa60 <__aeabi_ddiv+0x5dc>
    a9e6:	2320      	movs	r3, #32
    a9e8:	1a9b      	subs	r3, r3, r2
    a9ea:	000c      	movs	r4, r1
    a9ec:	4658      	mov	r0, fp
    a9ee:	4099      	lsls	r1, r3
    a9f0:	4098      	lsls	r0, r3
    a9f2:	1e4b      	subs	r3, r1, #1
    a9f4:	4199      	sbcs	r1, r3
    a9f6:	465b      	mov	r3, fp
    a9f8:	40d4      	lsrs	r4, r2
    a9fa:	40d3      	lsrs	r3, r2
    a9fc:	4320      	orrs	r0, r4
    a9fe:	4308      	orrs	r0, r1
    aa00:	001a      	movs	r2, r3
    aa02:	0743      	lsls	r3, r0, #29
    aa04:	d009      	beq.n	aa1a <__aeabi_ddiv+0x596>
    aa06:	230f      	movs	r3, #15
    aa08:	4003      	ands	r3, r0
    aa0a:	2b04      	cmp	r3, #4
    aa0c:	d005      	beq.n	aa1a <__aeabi_ddiv+0x596>
    aa0e:	0001      	movs	r1, r0
    aa10:	1d08      	adds	r0, r1, #4
    aa12:	4288      	cmp	r0, r1
    aa14:	419b      	sbcs	r3, r3
    aa16:	425b      	negs	r3, r3
    aa18:	18d2      	adds	r2, r2, r3
    aa1a:	0213      	lsls	r3, r2, #8
    aa1c:	d53a      	bpl.n	aa94 <__aeabi_ddiv+0x610>
    aa1e:	2301      	movs	r3, #1
    aa20:	9a02      	ldr	r2, [sp, #8]
    aa22:	2401      	movs	r4, #1
    aa24:	401a      	ands	r2, r3
    aa26:	2300      	movs	r3, #0
    aa28:	4694      	mov	ip, r2
    aa2a:	4698      	mov	r8, r3
    aa2c:	2200      	movs	r2, #0
    aa2e:	e5f7      	b.n	a620 <__aeabi_ddiv+0x19c>
    aa30:	2102      	movs	r1, #2
    aa32:	4249      	negs	r1, r1
    aa34:	468c      	mov	ip, r1
    aa36:	9d03      	ldr	r5, [sp, #12]
    aa38:	44e3      	add	fp, ip
    aa3a:	46ac      	mov	ip, r5
    aa3c:	44e2      	add	sl, ip
    aa3e:	45aa      	cmp	sl, r5
    aa40:	41ad      	sbcs	r5, r5
    aa42:	426d      	negs	r5, r5
    aa44:	4445      	add	r5, r8
    aa46:	18ed      	adds	r5, r5, r3
    aa48:	1a2d      	subs	r5, r5, r0
    aa4a:	e696      	b.n	a77a <__aeabi_ddiv+0x2f6>
    aa4c:	1e8a      	subs	r2, r1, #2
    aa4e:	9903      	ldr	r1, [sp, #12]
    aa50:	004d      	lsls	r5, r1, #1
    aa52:	428d      	cmp	r5, r1
    aa54:	4189      	sbcs	r1, r1
    aa56:	4249      	negs	r1, r1
    aa58:	4441      	add	r1, r8
    aa5a:	1876      	adds	r6, r6, r1
    aa5c:	9503      	str	r5, [sp, #12]
    aa5e:	e78f      	b.n	a980 <__aeabi_ddiv+0x4fc>
    aa60:	201f      	movs	r0, #31
    aa62:	4240      	negs	r0, r0
    aa64:	1ac3      	subs	r3, r0, r3
    aa66:	4658      	mov	r0, fp
    aa68:	40d8      	lsrs	r0, r3
    aa6a:	0003      	movs	r3, r0
    aa6c:	2a20      	cmp	r2, #32
    aa6e:	d028      	beq.n	aac2 <__aeabi_ddiv+0x63e>
    aa70:	2040      	movs	r0, #64	; 0x40
    aa72:	465d      	mov	r5, fp
    aa74:	1a82      	subs	r2, r0, r2
    aa76:	4095      	lsls	r5, r2
    aa78:	4329      	orrs	r1, r5
    aa7a:	1e4a      	subs	r2, r1, #1
    aa7c:	4191      	sbcs	r1, r2
    aa7e:	4319      	orrs	r1, r3
    aa80:	2307      	movs	r3, #7
    aa82:	2200      	movs	r2, #0
    aa84:	400b      	ands	r3, r1
    aa86:	d009      	beq.n	aa9c <__aeabi_ddiv+0x618>
    aa88:	230f      	movs	r3, #15
    aa8a:	2200      	movs	r2, #0
    aa8c:	400b      	ands	r3, r1
    aa8e:	0008      	movs	r0, r1
    aa90:	2b04      	cmp	r3, #4
    aa92:	d1bd      	bne.n	aa10 <__aeabi_ddiv+0x58c>
    aa94:	0001      	movs	r1, r0
    aa96:	0753      	lsls	r3, r2, #29
    aa98:	0252      	lsls	r2, r2, #9
    aa9a:	0b12      	lsrs	r2, r2, #12
    aa9c:	08c9      	lsrs	r1, r1, #3
    aa9e:	4319      	orrs	r1, r3
    aaa0:	2301      	movs	r3, #1
    aaa2:	4688      	mov	r8, r1
    aaa4:	9902      	ldr	r1, [sp, #8]
    aaa6:	2400      	movs	r4, #0
    aaa8:	4019      	ands	r1, r3
    aaaa:	468c      	mov	ip, r1
    aaac:	e5b8      	b.n	a620 <__aeabi_ddiv+0x19c>
    aaae:	4552      	cmp	r2, sl
    aab0:	d8be      	bhi.n	aa30 <__aeabi_ddiv+0x5ac>
    aab2:	468b      	mov	fp, r1
    aab4:	2500      	movs	r5, #0
    aab6:	e660      	b.n	a77a <__aeabi_ddiv+0x2f6>
    aab8:	9d03      	ldr	r5, [sp, #12]
    aaba:	429d      	cmp	r5, r3
    aabc:	d3c6      	bcc.n	aa4c <__aeabi_ddiv+0x5c8>
    aabe:	0011      	movs	r1, r2
    aac0:	e762      	b.n	a988 <__aeabi_ddiv+0x504>
    aac2:	2500      	movs	r5, #0
    aac4:	e7d8      	b.n	aa78 <__aeabi_ddiv+0x5f4>
    aac6:	2280      	movs	r2, #128	; 0x80
    aac8:	465b      	mov	r3, fp
    aaca:	0312      	lsls	r2, r2, #12
    aacc:	431a      	orrs	r2, r3
    aace:	9b01      	ldr	r3, [sp, #4]
    aad0:	0312      	lsls	r2, r2, #12
    aad2:	0b12      	lsrs	r2, r2, #12
    aad4:	469c      	mov	ip, r3
    aad6:	4688      	mov	r8, r1
    aad8:	4c03      	ldr	r4, [pc, #12]	; (aae8 <__aeabi_ddiv+0x664>)
    aada:	e5a1      	b.n	a620 <__aeabi_ddiv+0x19c>
    aadc:	000003ff 	.word	0x000003ff
    aae0:	feffffff 	.word	0xfeffffff
    aae4:	000007fe 	.word	0x000007fe
    aae8:	000007ff 	.word	0x000007ff

0000aaec <__eqdf2>:
    aaec:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaee:	464f      	mov	r7, r9
    aaf0:	4646      	mov	r6, r8
    aaf2:	46d6      	mov	lr, sl
    aaf4:	005c      	lsls	r4, r3, #1
    aaf6:	b5c0      	push	{r6, r7, lr}
    aaf8:	031f      	lsls	r7, r3, #12
    aafa:	0fdb      	lsrs	r3, r3, #31
    aafc:	469a      	mov	sl, r3
    aafe:	4b17      	ldr	r3, [pc, #92]	; (ab5c <__eqdf2+0x70>)
    ab00:	030e      	lsls	r6, r1, #12
    ab02:	004d      	lsls	r5, r1, #1
    ab04:	4684      	mov	ip, r0
    ab06:	4680      	mov	r8, r0
    ab08:	0b36      	lsrs	r6, r6, #12
    ab0a:	0d6d      	lsrs	r5, r5, #21
    ab0c:	0fc9      	lsrs	r1, r1, #31
    ab0e:	4691      	mov	r9, r2
    ab10:	0b3f      	lsrs	r7, r7, #12
    ab12:	0d64      	lsrs	r4, r4, #21
    ab14:	2001      	movs	r0, #1
    ab16:	429d      	cmp	r5, r3
    ab18:	d008      	beq.n	ab2c <__eqdf2+0x40>
    ab1a:	429c      	cmp	r4, r3
    ab1c:	d001      	beq.n	ab22 <__eqdf2+0x36>
    ab1e:	42a5      	cmp	r5, r4
    ab20:	d00b      	beq.n	ab3a <__eqdf2+0x4e>
    ab22:	bc1c      	pop	{r2, r3, r4}
    ab24:	4690      	mov	r8, r2
    ab26:	4699      	mov	r9, r3
    ab28:	46a2      	mov	sl, r4
    ab2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab2c:	4663      	mov	r3, ip
    ab2e:	4333      	orrs	r3, r6
    ab30:	d1f7      	bne.n	ab22 <__eqdf2+0x36>
    ab32:	42ac      	cmp	r4, r5
    ab34:	d1f5      	bne.n	ab22 <__eqdf2+0x36>
    ab36:	433a      	orrs	r2, r7
    ab38:	d1f3      	bne.n	ab22 <__eqdf2+0x36>
    ab3a:	2001      	movs	r0, #1
    ab3c:	42be      	cmp	r6, r7
    ab3e:	d1f0      	bne.n	ab22 <__eqdf2+0x36>
    ab40:	45c8      	cmp	r8, r9
    ab42:	d1ee      	bne.n	ab22 <__eqdf2+0x36>
    ab44:	4551      	cmp	r1, sl
    ab46:	d007      	beq.n	ab58 <__eqdf2+0x6c>
    ab48:	2d00      	cmp	r5, #0
    ab4a:	d1ea      	bne.n	ab22 <__eqdf2+0x36>
    ab4c:	4663      	mov	r3, ip
    ab4e:	431e      	orrs	r6, r3
    ab50:	0030      	movs	r0, r6
    ab52:	1e46      	subs	r6, r0, #1
    ab54:	41b0      	sbcs	r0, r6
    ab56:	e7e4      	b.n	ab22 <__eqdf2+0x36>
    ab58:	2000      	movs	r0, #0
    ab5a:	e7e2      	b.n	ab22 <__eqdf2+0x36>
    ab5c:	000007ff 	.word	0x000007ff

0000ab60 <__gedf2>:
    ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab62:	4645      	mov	r5, r8
    ab64:	46de      	mov	lr, fp
    ab66:	4657      	mov	r7, sl
    ab68:	464e      	mov	r6, r9
    ab6a:	b5e0      	push	{r5, r6, r7, lr}
    ab6c:	031f      	lsls	r7, r3, #12
    ab6e:	0b3d      	lsrs	r5, r7, #12
    ab70:	4f2c      	ldr	r7, [pc, #176]	; (ac24 <__gedf2+0xc4>)
    ab72:	030e      	lsls	r6, r1, #12
    ab74:	004c      	lsls	r4, r1, #1
    ab76:	46ab      	mov	fp, r5
    ab78:	005d      	lsls	r5, r3, #1
    ab7a:	4684      	mov	ip, r0
    ab7c:	0b36      	lsrs	r6, r6, #12
    ab7e:	0d64      	lsrs	r4, r4, #21
    ab80:	0fc9      	lsrs	r1, r1, #31
    ab82:	4690      	mov	r8, r2
    ab84:	0d6d      	lsrs	r5, r5, #21
    ab86:	0fdb      	lsrs	r3, r3, #31
    ab88:	42bc      	cmp	r4, r7
    ab8a:	d02a      	beq.n	abe2 <__gedf2+0x82>
    ab8c:	4f25      	ldr	r7, [pc, #148]	; (ac24 <__gedf2+0xc4>)
    ab8e:	42bd      	cmp	r5, r7
    ab90:	d02d      	beq.n	abee <__gedf2+0x8e>
    ab92:	2c00      	cmp	r4, #0
    ab94:	d10f      	bne.n	abb6 <__gedf2+0x56>
    ab96:	4330      	orrs	r0, r6
    ab98:	0007      	movs	r7, r0
    ab9a:	4681      	mov	r9, r0
    ab9c:	4278      	negs	r0, r7
    ab9e:	4178      	adcs	r0, r7
    aba0:	b2c0      	uxtb	r0, r0
    aba2:	2d00      	cmp	r5, #0
    aba4:	d117      	bne.n	abd6 <__gedf2+0x76>
    aba6:	465f      	mov	r7, fp
    aba8:	433a      	orrs	r2, r7
    abaa:	d114      	bne.n	abd6 <__gedf2+0x76>
    abac:	464b      	mov	r3, r9
    abae:	2000      	movs	r0, #0
    abb0:	2b00      	cmp	r3, #0
    abb2:	d00a      	beq.n	abca <__gedf2+0x6a>
    abb4:	e006      	b.n	abc4 <__gedf2+0x64>
    abb6:	2d00      	cmp	r5, #0
    abb8:	d102      	bne.n	abc0 <__gedf2+0x60>
    abba:	4658      	mov	r0, fp
    abbc:	4302      	orrs	r2, r0
    abbe:	d001      	beq.n	abc4 <__gedf2+0x64>
    abc0:	4299      	cmp	r1, r3
    abc2:	d018      	beq.n	abf6 <__gedf2+0x96>
    abc4:	4248      	negs	r0, r1
    abc6:	2101      	movs	r1, #1
    abc8:	4308      	orrs	r0, r1
    abca:	bc3c      	pop	{r2, r3, r4, r5}
    abcc:	4690      	mov	r8, r2
    abce:	4699      	mov	r9, r3
    abd0:	46a2      	mov	sl, r4
    abd2:	46ab      	mov	fp, r5
    abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abd6:	2800      	cmp	r0, #0
    abd8:	d0f2      	beq.n	abc0 <__gedf2+0x60>
    abda:	2001      	movs	r0, #1
    abdc:	3b01      	subs	r3, #1
    abde:	4318      	orrs	r0, r3
    abe0:	e7f3      	b.n	abca <__gedf2+0x6a>
    abe2:	0037      	movs	r7, r6
    abe4:	4307      	orrs	r7, r0
    abe6:	d0d1      	beq.n	ab8c <__gedf2+0x2c>
    abe8:	2002      	movs	r0, #2
    abea:	4240      	negs	r0, r0
    abec:	e7ed      	b.n	abca <__gedf2+0x6a>
    abee:	465f      	mov	r7, fp
    abf0:	4317      	orrs	r7, r2
    abf2:	d0ce      	beq.n	ab92 <__gedf2+0x32>
    abf4:	e7f8      	b.n	abe8 <__gedf2+0x88>
    abf6:	42ac      	cmp	r4, r5
    abf8:	dce4      	bgt.n	abc4 <__gedf2+0x64>
    abfa:	da03      	bge.n	ac04 <__gedf2+0xa4>
    abfc:	1e48      	subs	r0, r1, #1
    abfe:	2101      	movs	r1, #1
    ac00:	4308      	orrs	r0, r1
    ac02:	e7e2      	b.n	abca <__gedf2+0x6a>
    ac04:	455e      	cmp	r6, fp
    ac06:	d8dd      	bhi.n	abc4 <__gedf2+0x64>
    ac08:	d006      	beq.n	ac18 <__gedf2+0xb8>
    ac0a:	2000      	movs	r0, #0
    ac0c:	455e      	cmp	r6, fp
    ac0e:	d2dc      	bcs.n	abca <__gedf2+0x6a>
    ac10:	2301      	movs	r3, #1
    ac12:	1e48      	subs	r0, r1, #1
    ac14:	4318      	orrs	r0, r3
    ac16:	e7d8      	b.n	abca <__gedf2+0x6a>
    ac18:	45c4      	cmp	ip, r8
    ac1a:	d8d3      	bhi.n	abc4 <__gedf2+0x64>
    ac1c:	2000      	movs	r0, #0
    ac1e:	45c4      	cmp	ip, r8
    ac20:	d3f6      	bcc.n	ac10 <__gedf2+0xb0>
    ac22:	e7d2      	b.n	abca <__gedf2+0x6a>
    ac24:	000007ff 	.word	0x000007ff

0000ac28 <__ledf2>:
    ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac2a:	464e      	mov	r6, r9
    ac2c:	4645      	mov	r5, r8
    ac2e:	46de      	mov	lr, fp
    ac30:	4657      	mov	r7, sl
    ac32:	005c      	lsls	r4, r3, #1
    ac34:	b5e0      	push	{r5, r6, r7, lr}
    ac36:	031f      	lsls	r7, r3, #12
    ac38:	0fdb      	lsrs	r3, r3, #31
    ac3a:	4699      	mov	r9, r3
    ac3c:	4b2a      	ldr	r3, [pc, #168]	; (ace8 <__ledf2+0xc0>)
    ac3e:	030e      	lsls	r6, r1, #12
    ac40:	004d      	lsls	r5, r1, #1
    ac42:	0fc9      	lsrs	r1, r1, #31
    ac44:	4684      	mov	ip, r0
    ac46:	0b36      	lsrs	r6, r6, #12
    ac48:	0d6d      	lsrs	r5, r5, #21
    ac4a:	468b      	mov	fp, r1
    ac4c:	4690      	mov	r8, r2
    ac4e:	0b3f      	lsrs	r7, r7, #12
    ac50:	0d64      	lsrs	r4, r4, #21
    ac52:	429d      	cmp	r5, r3
    ac54:	d020      	beq.n	ac98 <__ledf2+0x70>
    ac56:	4b24      	ldr	r3, [pc, #144]	; (ace8 <__ledf2+0xc0>)
    ac58:	429c      	cmp	r4, r3
    ac5a:	d022      	beq.n	aca2 <__ledf2+0x7a>
    ac5c:	2d00      	cmp	r5, #0
    ac5e:	d112      	bne.n	ac86 <__ledf2+0x5e>
    ac60:	4330      	orrs	r0, r6
    ac62:	4243      	negs	r3, r0
    ac64:	4143      	adcs	r3, r0
    ac66:	b2db      	uxtb	r3, r3
    ac68:	2c00      	cmp	r4, #0
    ac6a:	d01f      	beq.n	acac <__ledf2+0x84>
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d00c      	beq.n	ac8a <__ledf2+0x62>
    ac70:	464b      	mov	r3, r9
    ac72:	2001      	movs	r0, #1
    ac74:	3b01      	subs	r3, #1
    ac76:	4303      	orrs	r3, r0
    ac78:	0018      	movs	r0, r3
    ac7a:	bc3c      	pop	{r2, r3, r4, r5}
    ac7c:	4690      	mov	r8, r2
    ac7e:	4699      	mov	r9, r3
    ac80:	46a2      	mov	sl, r4
    ac82:	46ab      	mov	fp, r5
    ac84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac86:	2c00      	cmp	r4, #0
    ac88:	d016      	beq.n	acb8 <__ledf2+0x90>
    ac8a:	45cb      	cmp	fp, r9
    ac8c:	d017      	beq.n	acbe <__ledf2+0x96>
    ac8e:	465b      	mov	r3, fp
    ac90:	4259      	negs	r1, r3
    ac92:	2301      	movs	r3, #1
    ac94:	430b      	orrs	r3, r1
    ac96:	e7ef      	b.n	ac78 <__ledf2+0x50>
    ac98:	0031      	movs	r1, r6
    ac9a:	2302      	movs	r3, #2
    ac9c:	4301      	orrs	r1, r0
    ac9e:	d1eb      	bne.n	ac78 <__ledf2+0x50>
    aca0:	e7d9      	b.n	ac56 <__ledf2+0x2e>
    aca2:	0039      	movs	r1, r7
    aca4:	2302      	movs	r3, #2
    aca6:	4311      	orrs	r1, r2
    aca8:	d1e6      	bne.n	ac78 <__ledf2+0x50>
    acaa:	e7d7      	b.n	ac5c <__ledf2+0x34>
    acac:	433a      	orrs	r2, r7
    acae:	d1dd      	bne.n	ac6c <__ledf2+0x44>
    acb0:	2300      	movs	r3, #0
    acb2:	2800      	cmp	r0, #0
    acb4:	d0e0      	beq.n	ac78 <__ledf2+0x50>
    acb6:	e7ea      	b.n	ac8e <__ledf2+0x66>
    acb8:	433a      	orrs	r2, r7
    acba:	d1e6      	bne.n	ac8a <__ledf2+0x62>
    acbc:	e7e7      	b.n	ac8e <__ledf2+0x66>
    acbe:	42a5      	cmp	r5, r4
    acc0:	dce5      	bgt.n	ac8e <__ledf2+0x66>
    acc2:	db05      	blt.n	acd0 <__ledf2+0xa8>
    acc4:	42be      	cmp	r6, r7
    acc6:	d8e2      	bhi.n	ac8e <__ledf2+0x66>
    acc8:	d007      	beq.n	acda <__ledf2+0xb2>
    acca:	2300      	movs	r3, #0
    accc:	42be      	cmp	r6, r7
    acce:	d2d3      	bcs.n	ac78 <__ledf2+0x50>
    acd0:	4659      	mov	r1, fp
    acd2:	2301      	movs	r3, #1
    acd4:	3901      	subs	r1, #1
    acd6:	430b      	orrs	r3, r1
    acd8:	e7ce      	b.n	ac78 <__ledf2+0x50>
    acda:	45c4      	cmp	ip, r8
    acdc:	d8d7      	bhi.n	ac8e <__ledf2+0x66>
    acde:	2300      	movs	r3, #0
    ace0:	45c4      	cmp	ip, r8
    ace2:	d3f5      	bcc.n	acd0 <__ledf2+0xa8>
    ace4:	e7c8      	b.n	ac78 <__ledf2+0x50>
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	000007ff 	.word	0x000007ff

0000acec <__aeabi_dmul>:
    acec:	b5f0      	push	{r4, r5, r6, r7, lr}
    acee:	4657      	mov	r7, sl
    acf0:	4645      	mov	r5, r8
    acf2:	46de      	mov	lr, fp
    acf4:	464e      	mov	r6, r9
    acf6:	b5e0      	push	{r5, r6, r7, lr}
    acf8:	030c      	lsls	r4, r1, #12
    acfa:	4698      	mov	r8, r3
    acfc:	004e      	lsls	r6, r1, #1
    acfe:	0b23      	lsrs	r3, r4, #12
    ad00:	b087      	sub	sp, #28
    ad02:	0007      	movs	r7, r0
    ad04:	4692      	mov	sl, r2
    ad06:	469b      	mov	fp, r3
    ad08:	0d76      	lsrs	r6, r6, #21
    ad0a:	0fcd      	lsrs	r5, r1, #31
    ad0c:	2e00      	cmp	r6, #0
    ad0e:	d06b      	beq.n	ade8 <__aeabi_dmul+0xfc>
    ad10:	4b6d      	ldr	r3, [pc, #436]	; (aec8 <__aeabi_dmul+0x1dc>)
    ad12:	429e      	cmp	r6, r3
    ad14:	d035      	beq.n	ad82 <__aeabi_dmul+0x96>
    ad16:	2480      	movs	r4, #128	; 0x80
    ad18:	465b      	mov	r3, fp
    ad1a:	0f42      	lsrs	r2, r0, #29
    ad1c:	0424      	lsls	r4, r4, #16
    ad1e:	00db      	lsls	r3, r3, #3
    ad20:	4314      	orrs	r4, r2
    ad22:	431c      	orrs	r4, r3
    ad24:	00c3      	lsls	r3, r0, #3
    ad26:	4699      	mov	r9, r3
    ad28:	4b68      	ldr	r3, [pc, #416]	; (aecc <__aeabi_dmul+0x1e0>)
    ad2a:	46a3      	mov	fp, r4
    ad2c:	469c      	mov	ip, r3
    ad2e:	2300      	movs	r3, #0
    ad30:	2700      	movs	r7, #0
    ad32:	4466      	add	r6, ip
    ad34:	9302      	str	r3, [sp, #8]
    ad36:	4643      	mov	r3, r8
    ad38:	031c      	lsls	r4, r3, #12
    ad3a:	005a      	lsls	r2, r3, #1
    ad3c:	0fdb      	lsrs	r3, r3, #31
    ad3e:	4650      	mov	r0, sl
    ad40:	0b24      	lsrs	r4, r4, #12
    ad42:	0d52      	lsrs	r2, r2, #21
    ad44:	4698      	mov	r8, r3
    ad46:	d100      	bne.n	ad4a <__aeabi_dmul+0x5e>
    ad48:	e076      	b.n	ae38 <__aeabi_dmul+0x14c>
    ad4a:	4b5f      	ldr	r3, [pc, #380]	; (aec8 <__aeabi_dmul+0x1dc>)
    ad4c:	429a      	cmp	r2, r3
    ad4e:	d06d      	beq.n	ae2c <__aeabi_dmul+0x140>
    ad50:	2380      	movs	r3, #128	; 0x80
    ad52:	0f41      	lsrs	r1, r0, #29
    ad54:	041b      	lsls	r3, r3, #16
    ad56:	430b      	orrs	r3, r1
    ad58:	495c      	ldr	r1, [pc, #368]	; (aecc <__aeabi_dmul+0x1e0>)
    ad5a:	00e4      	lsls	r4, r4, #3
    ad5c:	468c      	mov	ip, r1
    ad5e:	431c      	orrs	r4, r3
    ad60:	00c3      	lsls	r3, r0, #3
    ad62:	2000      	movs	r0, #0
    ad64:	4462      	add	r2, ip
    ad66:	4641      	mov	r1, r8
    ad68:	18b6      	adds	r6, r6, r2
    ad6a:	4069      	eors	r1, r5
    ad6c:	1c72      	adds	r2, r6, #1
    ad6e:	9101      	str	r1, [sp, #4]
    ad70:	4694      	mov	ip, r2
    ad72:	4307      	orrs	r7, r0
    ad74:	2f0f      	cmp	r7, #15
    ad76:	d900      	bls.n	ad7a <__aeabi_dmul+0x8e>
    ad78:	e0b0      	b.n	aedc <__aeabi_dmul+0x1f0>
    ad7a:	4a55      	ldr	r2, [pc, #340]	; (aed0 <__aeabi_dmul+0x1e4>)
    ad7c:	00bf      	lsls	r7, r7, #2
    ad7e:	59d2      	ldr	r2, [r2, r7]
    ad80:	4697      	mov	pc, r2
    ad82:	465b      	mov	r3, fp
    ad84:	4303      	orrs	r3, r0
    ad86:	4699      	mov	r9, r3
    ad88:	d000      	beq.n	ad8c <__aeabi_dmul+0xa0>
    ad8a:	e087      	b.n	ae9c <__aeabi_dmul+0x1b0>
    ad8c:	2300      	movs	r3, #0
    ad8e:	469b      	mov	fp, r3
    ad90:	3302      	adds	r3, #2
    ad92:	2708      	movs	r7, #8
    ad94:	9302      	str	r3, [sp, #8]
    ad96:	e7ce      	b.n	ad36 <__aeabi_dmul+0x4a>
    ad98:	4642      	mov	r2, r8
    ad9a:	9201      	str	r2, [sp, #4]
    ad9c:	2802      	cmp	r0, #2
    ad9e:	d067      	beq.n	ae70 <__aeabi_dmul+0x184>
    ada0:	2803      	cmp	r0, #3
    ada2:	d100      	bne.n	ada6 <__aeabi_dmul+0xba>
    ada4:	e20e      	b.n	b1c4 <__aeabi_dmul+0x4d8>
    ada6:	2801      	cmp	r0, #1
    ada8:	d000      	beq.n	adac <__aeabi_dmul+0xc0>
    adaa:	e162      	b.n	b072 <__aeabi_dmul+0x386>
    adac:	2300      	movs	r3, #0
    adae:	2400      	movs	r4, #0
    adb0:	2200      	movs	r2, #0
    adb2:	4699      	mov	r9, r3
    adb4:	9901      	ldr	r1, [sp, #4]
    adb6:	4001      	ands	r1, r0
    adb8:	b2cd      	uxtb	r5, r1
    adba:	2100      	movs	r1, #0
    adbc:	0312      	lsls	r2, r2, #12
    adbe:	0d0b      	lsrs	r3, r1, #20
    adc0:	0b12      	lsrs	r2, r2, #12
    adc2:	051b      	lsls	r3, r3, #20
    adc4:	4313      	orrs	r3, r2
    adc6:	4a43      	ldr	r2, [pc, #268]	; (aed4 <__aeabi_dmul+0x1e8>)
    adc8:	0524      	lsls	r4, r4, #20
    adca:	4013      	ands	r3, r2
    adcc:	431c      	orrs	r4, r3
    adce:	0064      	lsls	r4, r4, #1
    add0:	07ed      	lsls	r5, r5, #31
    add2:	0864      	lsrs	r4, r4, #1
    add4:	432c      	orrs	r4, r5
    add6:	4648      	mov	r0, r9
    add8:	0021      	movs	r1, r4
    adda:	b007      	add	sp, #28
    addc:	bc3c      	pop	{r2, r3, r4, r5}
    adde:	4690      	mov	r8, r2
    ade0:	4699      	mov	r9, r3
    ade2:	46a2      	mov	sl, r4
    ade4:	46ab      	mov	fp, r5
    ade6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ade8:	4303      	orrs	r3, r0
    adea:	4699      	mov	r9, r3
    adec:	d04f      	beq.n	ae8e <__aeabi_dmul+0x1a2>
    adee:	465b      	mov	r3, fp
    adf0:	2b00      	cmp	r3, #0
    adf2:	d100      	bne.n	adf6 <__aeabi_dmul+0x10a>
    adf4:	e189      	b.n	b10a <__aeabi_dmul+0x41e>
    adf6:	4658      	mov	r0, fp
    adf8:	f7fe f94a 	bl	9090 <__clzsi2>
    adfc:	0003      	movs	r3, r0
    adfe:	3b0b      	subs	r3, #11
    ae00:	2b1c      	cmp	r3, #28
    ae02:	dd00      	ble.n	ae06 <__aeabi_dmul+0x11a>
    ae04:	e17a      	b.n	b0fc <__aeabi_dmul+0x410>
    ae06:	221d      	movs	r2, #29
    ae08:	1ad3      	subs	r3, r2, r3
    ae0a:	003a      	movs	r2, r7
    ae0c:	0001      	movs	r1, r0
    ae0e:	465c      	mov	r4, fp
    ae10:	40da      	lsrs	r2, r3
    ae12:	3908      	subs	r1, #8
    ae14:	408c      	lsls	r4, r1
    ae16:	0013      	movs	r3, r2
    ae18:	408f      	lsls	r7, r1
    ae1a:	4323      	orrs	r3, r4
    ae1c:	469b      	mov	fp, r3
    ae1e:	46b9      	mov	r9, r7
    ae20:	2300      	movs	r3, #0
    ae22:	4e2d      	ldr	r6, [pc, #180]	; (aed8 <__aeabi_dmul+0x1ec>)
    ae24:	2700      	movs	r7, #0
    ae26:	1a36      	subs	r6, r6, r0
    ae28:	9302      	str	r3, [sp, #8]
    ae2a:	e784      	b.n	ad36 <__aeabi_dmul+0x4a>
    ae2c:	4653      	mov	r3, sl
    ae2e:	4323      	orrs	r3, r4
    ae30:	d12a      	bne.n	ae88 <__aeabi_dmul+0x19c>
    ae32:	2400      	movs	r4, #0
    ae34:	2002      	movs	r0, #2
    ae36:	e796      	b.n	ad66 <__aeabi_dmul+0x7a>
    ae38:	4653      	mov	r3, sl
    ae3a:	4323      	orrs	r3, r4
    ae3c:	d020      	beq.n	ae80 <__aeabi_dmul+0x194>
    ae3e:	2c00      	cmp	r4, #0
    ae40:	d100      	bne.n	ae44 <__aeabi_dmul+0x158>
    ae42:	e157      	b.n	b0f4 <__aeabi_dmul+0x408>
    ae44:	0020      	movs	r0, r4
    ae46:	f7fe f923 	bl	9090 <__clzsi2>
    ae4a:	0003      	movs	r3, r0
    ae4c:	3b0b      	subs	r3, #11
    ae4e:	2b1c      	cmp	r3, #28
    ae50:	dd00      	ble.n	ae54 <__aeabi_dmul+0x168>
    ae52:	e149      	b.n	b0e8 <__aeabi_dmul+0x3fc>
    ae54:	211d      	movs	r1, #29
    ae56:	1acb      	subs	r3, r1, r3
    ae58:	4651      	mov	r1, sl
    ae5a:	0002      	movs	r2, r0
    ae5c:	40d9      	lsrs	r1, r3
    ae5e:	4653      	mov	r3, sl
    ae60:	3a08      	subs	r2, #8
    ae62:	4094      	lsls	r4, r2
    ae64:	4093      	lsls	r3, r2
    ae66:	430c      	orrs	r4, r1
    ae68:	4a1b      	ldr	r2, [pc, #108]	; (aed8 <__aeabi_dmul+0x1ec>)
    ae6a:	1a12      	subs	r2, r2, r0
    ae6c:	2000      	movs	r0, #0
    ae6e:	e77a      	b.n	ad66 <__aeabi_dmul+0x7a>
    ae70:	2501      	movs	r5, #1
    ae72:	9b01      	ldr	r3, [sp, #4]
    ae74:	4c14      	ldr	r4, [pc, #80]	; (aec8 <__aeabi_dmul+0x1dc>)
    ae76:	401d      	ands	r5, r3
    ae78:	2300      	movs	r3, #0
    ae7a:	2200      	movs	r2, #0
    ae7c:	4699      	mov	r9, r3
    ae7e:	e79c      	b.n	adba <__aeabi_dmul+0xce>
    ae80:	2400      	movs	r4, #0
    ae82:	2200      	movs	r2, #0
    ae84:	2001      	movs	r0, #1
    ae86:	e76e      	b.n	ad66 <__aeabi_dmul+0x7a>
    ae88:	4653      	mov	r3, sl
    ae8a:	2003      	movs	r0, #3
    ae8c:	e76b      	b.n	ad66 <__aeabi_dmul+0x7a>
    ae8e:	2300      	movs	r3, #0
    ae90:	469b      	mov	fp, r3
    ae92:	3301      	adds	r3, #1
    ae94:	2704      	movs	r7, #4
    ae96:	2600      	movs	r6, #0
    ae98:	9302      	str	r3, [sp, #8]
    ae9a:	e74c      	b.n	ad36 <__aeabi_dmul+0x4a>
    ae9c:	2303      	movs	r3, #3
    ae9e:	4681      	mov	r9, r0
    aea0:	270c      	movs	r7, #12
    aea2:	9302      	str	r3, [sp, #8]
    aea4:	e747      	b.n	ad36 <__aeabi_dmul+0x4a>
    aea6:	2280      	movs	r2, #128	; 0x80
    aea8:	2300      	movs	r3, #0
    aeaa:	2500      	movs	r5, #0
    aeac:	0312      	lsls	r2, r2, #12
    aeae:	4699      	mov	r9, r3
    aeb0:	4c05      	ldr	r4, [pc, #20]	; (aec8 <__aeabi_dmul+0x1dc>)
    aeb2:	e782      	b.n	adba <__aeabi_dmul+0xce>
    aeb4:	465c      	mov	r4, fp
    aeb6:	464b      	mov	r3, r9
    aeb8:	9802      	ldr	r0, [sp, #8]
    aeba:	e76f      	b.n	ad9c <__aeabi_dmul+0xb0>
    aebc:	465c      	mov	r4, fp
    aebe:	464b      	mov	r3, r9
    aec0:	9501      	str	r5, [sp, #4]
    aec2:	9802      	ldr	r0, [sp, #8]
    aec4:	e76a      	b.n	ad9c <__aeabi_dmul+0xb0>
    aec6:	46c0      	nop			; (mov r8, r8)
    aec8:	000007ff 	.word	0x000007ff
    aecc:	fffffc01 	.word	0xfffffc01
    aed0:	0000c490 	.word	0x0000c490
    aed4:	800fffff 	.word	0x800fffff
    aed8:	fffffc0d 	.word	0xfffffc0d
    aedc:	464a      	mov	r2, r9
    aede:	4649      	mov	r1, r9
    aee0:	0c17      	lsrs	r7, r2, #16
    aee2:	0c1a      	lsrs	r2, r3, #16
    aee4:	041b      	lsls	r3, r3, #16
    aee6:	0c1b      	lsrs	r3, r3, #16
    aee8:	0408      	lsls	r0, r1, #16
    aeea:	0019      	movs	r1, r3
    aeec:	0c00      	lsrs	r0, r0, #16
    aeee:	4341      	muls	r1, r0
    aef0:	0015      	movs	r5, r2
    aef2:	4688      	mov	r8, r1
    aef4:	0019      	movs	r1, r3
    aef6:	437d      	muls	r5, r7
    aef8:	4379      	muls	r1, r7
    aefa:	9503      	str	r5, [sp, #12]
    aefc:	4689      	mov	r9, r1
    aefe:	0029      	movs	r1, r5
    af00:	0015      	movs	r5, r2
    af02:	4345      	muls	r5, r0
    af04:	444d      	add	r5, r9
    af06:	9502      	str	r5, [sp, #8]
    af08:	4645      	mov	r5, r8
    af0a:	0c2d      	lsrs	r5, r5, #16
    af0c:	46aa      	mov	sl, r5
    af0e:	9d02      	ldr	r5, [sp, #8]
    af10:	4455      	add	r5, sl
    af12:	45a9      	cmp	r9, r5
    af14:	d906      	bls.n	af24 <__aeabi_dmul+0x238>
    af16:	468a      	mov	sl, r1
    af18:	2180      	movs	r1, #128	; 0x80
    af1a:	0249      	lsls	r1, r1, #9
    af1c:	4689      	mov	r9, r1
    af1e:	44ca      	add	sl, r9
    af20:	4651      	mov	r1, sl
    af22:	9103      	str	r1, [sp, #12]
    af24:	0c29      	lsrs	r1, r5, #16
    af26:	9104      	str	r1, [sp, #16]
    af28:	4641      	mov	r1, r8
    af2a:	0409      	lsls	r1, r1, #16
    af2c:	042d      	lsls	r5, r5, #16
    af2e:	0c09      	lsrs	r1, r1, #16
    af30:	4688      	mov	r8, r1
    af32:	0029      	movs	r1, r5
    af34:	0c25      	lsrs	r5, r4, #16
    af36:	0424      	lsls	r4, r4, #16
    af38:	4441      	add	r1, r8
    af3a:	0c24      	lsrs	r4, r4, #16
    af3c:	9105      	str	r1, [sp, #20]
    af3e:	0021      	movs	r1, r4
    af40:	4341      	muls	r1, r0
    af42:	4688      	mov	r8, r1
    af44:	0021      	movs	r1, r4
    af46:	4379      	muls	r1, r7
    af48:	468a      	mov	sl, r1
    af4a:	4368      	muls	r0, r5
    af4c:	4641      	mov	r1, r8
    af4e:	4450      	add	r0, sl
    af50:	4681      	mov	r9, r0
    af52:	0c08      	lsrs	r0, r1, #16
    af54:	4448      	add	r0, r9
    af56:	436f      	muls	r7, r5
    af58:	4582      	cmp	sl, r0
    af5a:	d903      	bls.n	af64 <__aeabi_dmul+0x278>
    af5c:	2180      	movs	r1, #128	; 0x80
    af5e:	0249      	lsls	r1, r1, #9
    af60:	4689      	mov	r9, r1
    af62:	444f      	add	r7, r9
    af64:	0c01      	lsrs	r1, r0, #16
    af66:	4689      	mov	r9, r1
    af68:	0039      	movs	r1, r7
    af6a:	4449      	add	r1, r9
    af6c:	9102      	str	r1, [sp, #8]
    af6e:	4641      	mov	r1, r8
    af70:	040f      	lsls	r7, r1, #16
    af72:	9904      	ldr	r1, [sp, #16]
    af74:	0c3f      	lsrs	r7, r7, #16
    af76:	4688      	mov	r8, r1
    af78:	0400      	lsls	r0, r0, #16
    af7a:	19c0      	adds	r0, r0, r7
    af7c:	4480      	add	r8, r0
    af7e:	4641      	mov	r1, r8
    af80:	9104      	str	r1, [sp, #16]
    af82:	4659      	mov	r1, fp
    af84:	0c0f      	lsrs	r7, r1, #16
    af86:	0409      	lsls	r1, r1, #16
    af88:	0c09      	lsrs	r1, r1, #16
    af8a:	4688      	mov	r8, r1
    af8c:	4359      	muls	r1, r3
    af8e:	468a      	mov	sl, r1
    af90:	0039      	movs	r1, r7
    af92:	4351      	muls	r1, r2
    af94:	4689      	mov	r9, r1
    af96:	4641      	mov	r1, r8
    af98:	434a      	muls	r2, r1
    af9a:	4651      	mov	r1, sl
    af9c:	0c09      	lsrs	r1, r1, #16
    af9e:	468b      	mov	fp, r1
    afa0:	437b      	muls	r3, r7
    afa2:	18d2      	adds	r2, r2, r3
    afa4:	445a      	add	r2, fp
    afa6:	4293      	cmp	r3, r2
    afa8:	d903      	bls.n	afb2 <__aeabi_dmul+0x2c6>
    afaa:	2380      	movs	r3, #128	; 0x80
    afac:	025b      	lsls	r3, r3, #9
    afae:	469b      	mov	fp, r3
    afb0:	44d9      	add	r9, fp
    afb2:	4651      	mov	r1, sl
    afb4:	0409      	lsls	r1, r1, #16
    afb6:	0c09      	lsrs	r1, r1, #16
    afb8:	468a      	mov	sl, r1
    afba:	4641      	mov	r1, r8
    afbc:	4361      	muls	r1, r4
    afbe:	437c      	muls	r4, r7
    afc0:	0c13      	lsrs	r3, r2, #16
    afc2:	0412      	lsls	r2, r2, #16
    afc4:	444b      	add	r3, r9
    afc6:	4452      	add	r2, sl
    afc8:	46a1      	mov	r9, r4
    afca:	468a      	mov	sl, r1
    afcc:	003c      	movs	r4, r7
    afce:	4641      	mov	r1, r8
    afd0:	436c      	muls	r4, r5
    afd2:	434d      	muls	r5, r1
    afd4:	4651      	mov	r1, sl
    afd6:	444d      	add	r5, r9
    afd8:	0c0f      	lsrs	r7, r1, #16
    afda:	197d      	adds	r5, r7, r5
    afdc:	45a9      	cmp	r9, r5
    afde:	d903      	bls.n	afe8 <__aeabi_dmul+0x2fc>
    afe0:	2180      	movs	r1, #128	; 0x80
    afe2:	0249      	lsls	r1, r1, #9
    afe4:	4688      	mov	r8, r1
    afe6:	4444      	add	r4, r8
    afe8:	9f04      	ldr	r7, [sp, #16]
    afea:	9903      	ldr	r1, [sp, #12]
    afec:	46b8      	mov	r8, r7
    afee:	4441      	add	r1, r8
    aff0:	468b      	mov	fp, r1
    aff2:	4583      	cmp	fp, r0
    aff4:	4180      	sbcs	r0, r0
    aff6:	4241      	negs	r1, r0
    aff8:	4688      	mov	r8, r1
    affa:	4651      	mov	r1, sl
    affc:	0408      	lsls	r0, r1, #16
    affe:	042f      	lsls	r7, r5, #16
    b000:	0c00      	lsrs	r0, r0, #16
    b002:	183f      	adds	r7, r7, r0
    b004:	4658      	mov	r0, fp
    b006:	9902      	ldr	r1, [sp, #8]
    b008:	1810      	adds	r0, r2, r0
    b00a:	4689      	mov	r9, r1
    b00c:	4290      	cmp	r0, r2
    b00e:	4192      	sbcs	r2, r2
    b010:	444f      	add	r7, r9
    b012:	46ba      	mov	sl, r7
    b014:	4252      	negs	r2, r2
    b016:	4699      	mov	r9, r3
    b018:	4693      	mov	fp, r2
    b01a:	44c2      	add	sl, r8
    b01c:	44d1      	add	r9, sl
    b01e:	44cb      	add	fp, r9
    b020:	428f      	cmp	r7, r1
    b022:	41bf      	sbcs	r7, r7
    b024:	45c2      	cmp	sl, r8
    b026:	4189      	sbcs	r1, r1
    b028:	4599      	cmp	r9, r3
    b02a:	419b      	sbcs	r3, r3
    b02c:	4593      	cmp	fp, r2
    b02e:	4192      	sbcs	r2, r2
    b030:	427f      	negs	r7, r7
    b032:	4249      	negs	r1, r1
    b034:	0c2d      	lsrs	r5, r5, #16
    b036:	4252      	negs	r2, r2
    b038:	430f      	orrs	r7, r1
    b03a:	425b      	negs	r3, r3
    b03c:	4313      	orrs	r3, r2
    b03e:	197f      	adds	r7, r7, r5
    b040:	18ff      	adds	r7, r7, r3
    b042:	465b      	mov	r3, fp
    b044:	193c      	adds	r4, r7, r4
    b046:	0ddb      	lsrs	r3, r3, #23
    b048:	9a05      	ldr	r2, [sp, #20]
    b04a:	0264      	lsls	r4, r4, #9
    b04c:	431c      	orrs	r4, r3
    b04e:	0243      	lsls	r3, r0, #9
    b050:	4313      	orrs	r3, r2
    b052:	1e5d      	subs	r5, r3, #1
    b054:	41ab      	sbcs	r3, r5
    b056:	465a      	mov	r2, fp
    b058:	0dc0      	lsrs	r0, r0, #23
    b05a:	4303      	orrs	r3, r0
    b05c:	0252      	lsls	r2, r2, #9
    b05e:	4313      	orrs	r3, r2
    b060:	01e2      	lsls	r2, r4, #7
    b062:	d556      	bpl.n	b112 <__aeabi_dmul+0x426>
    b064:	2001      	movs	r0, #1
    b066:	085a      	lsrs	r2, r3, #1
    b068:	4003      	ands	r3, r0
    b06a:	4313      	orrs	r3, r2
    b06c:	07e2      	lsls	r2, r4, #31
    b06e:	4313      	orrs	r3, r2
    b070:	0864      	lsrs	r4, r4, #1
    b072:	485a      	ldr	r0, [pc, #360]	; (b1dc <__aeabi_dmul+0x4f0>)
    b074:	4460      	add	r0, ip
    b076:	2800      	cmp	r0, #0
    b078:	dd4d      	ble.n	b116 <__aeabi_dmul+0x42a>
    b07a:	075a      	lsls	r2, r3, #29
    b07c:	d009      	beq.n	b092 <__aeabi_dmul+0x3a6>
    b07e:	220f      	movs	r2, #15
    b080:	401a      	ands	r2, r3
    b082:	2a04      	cmp	r2, #4
    b084:	d005      	beq.n	b092 <__aeabi_dmul+0x3a6>
    b086:	1d1a      	adds	r2, r3, #4
    b088:	429a      	cmp	r2, r3
    b08a:	419b      	sbcs	r3, r3
    b08c:	425b      	negs	r3, r3
    b08e:	18e4      	adds	r4, r4, r3
    b090:	0013      	movs	r3, r2
    b092:	01e2      	lsls	r2, r4, #7
    b094:	d504      	bpl.n	b0a0 <__aeabi_dmul+0x3b4>
    b096:	2080      	movs	r0, #128	; 0x80
    b098:	4a51      	ldr	r2, [pc, #324]	; (b1e0 <__aeabi_dmul+0x4f4>)
    b09a:	00c0      	lsls	r0, r0, #3
    b09c:	4014      	ands	r4, r2
    b09e:	4460      	add	r0, ip
    b0a0:	4a50      	ldr	r2, [pc, #320]	; (b1e4 <__aeabi_dmul+0x4f8>)
    b0a2:	4290      	cmp	r0, r2
    b0a4:	dd00      	ble.n	b0a8 <__aeabi_dmul+0x3bc>
    b0a6:	e6e3      	b.n	ae70 <__aeabi_dmul+0x184>
    b0a8:	2501      	movs	r5, #1
    b0aa:	08db      	lsrs	r3, r3, #3
    b0ac:	0762      	lsls	r2, r4, #29
    b0ae:	431a      	orrs	r2, r3
    b0b0:	0264      	lsls	r4, r4, #9
    b0b2:	9b01      	ldr	r3, [sp, #4]
    b0b4:	4691      	mov	r9, r2
    b0b6:	0b22      	lsrs	r2, r4, #12
    b0b8:	0544      	lsls	r4, r0, #21
    b0ba:	0d64      	lsrs	r4, r4, #21
    b0bc:	401d      	ands	r5, r3
    b0be:	e67c      	b.n	adba <__aeabi_dmul+0xce>
    b0c0:	2280      	movs	r2, #128	; 0x80
    b0c2:	4659      	mov	r1, fp
    b0c4:	0312      	lsls	r2, r2, #12
    b0c6:	4211      	tst	r1, r2
    b0c8:	d008      	beq.n	b0dc <__aeabi_dmul+0x3f0>
    b0ca:	4214      	tst	r4, r2
    b0cc:	d106      	bne.n	b0dc <__aeabi_dmul+0x3f0>
    b0ce:	4322      	orrs	r2, r4
    b0d0:	0312      	lsls	r2, r2, #12
    b0d2:	0b12      	lsrs	r2, r2, #12
    b0d4:	4645      	mov	r5, r8
    b0d6:	4699      	mov	r9, r3
    b0d8:	4c43      	ldr	r4, [pc, #268]	; (b1e8 <__aeabi_dmul+0x4fc>)
    b0da:	e66e      	b.n	adba <__aeabi_dmul+0xce>
    b0dc:	465b      	mov	r3, fp
    b0de:	431a      	orrs	r2, r3
    b0e0:	0312      	lsls	r2, r2, #12
    b0e2:	0b12      	lsrs	r2, r2, #12
    b0e4:	4c40      	ldr	r4, [pc, #256]	; (b1e8 <__aeabi_dmul+0x4fc>)
    b0e6:	e668      	b.n	adba <__aeabi_dmul+0xce>
    b0e8:	0003      	movs	r3, r0
    b0ea:	4654      	mov	r4, sl
    b0ec:	3b28      	subs	r3, #40	; 0x28
    b0ee:	409c      	lsls	r4, r3
    b0f0:	2300      	movs	r3, #0
    b0f2:	e6b9      	b.n	ae68 <__aeabi_dmul+0x17c>
    b0f4:	f7fd ffcc 	bl	9090 <__clzsi2>
    b0f8:	3020      	adds	r0, #32
    b0fa:	e6a6      	b.n	ae4a <__aeabi_dmul+0x15e>
    b0fc:	0003      	movs	r3, r0
    b0fe:	3b28      	subs	r3, #40	; 0x28
    b100:	409f      	lsls	r7, r3
    b102:	2300      	movs	r3, #0
    b104:	46bb      	mov	fp, r7
    b106:	4699      	mov	r9, r3
    b108:	e68a      	b.n	ae20 <__aeabi_dmul+0x134>
    b10a:	f7fd ffc1 	bl	9090 <__clzsi2>
    b10e:	3020      	adds	r0, #32
    b110:	e674      	b.n	adfc <__aeabi_dmul+0x110>
    b112:	46b4      	mov	ip, r6
    b114:	e7ad      	b.n	b072 <__aeabi_dmul+0x386>
    b116:	2501      	movs	r5, #1
    b118:	1a2a      	subs	r2, r5, r0
    b11a:	2a38      	cmp	r2, #56	; 0x38
    b11c:	dd06      	ble.n	b12c <__aeabi_dmul+0x440>
    b11e:	9b01      	ldr	r3, [sp, #4]
    b120:	2400      	movs	r4, #0
    b122:	401d      	ands	r5, r3
    b124:	2300      	movs	r3, #0
    b126:	2200      	movs	r2, #0
    b128:	4699      	mov	r9, r3
    b12a:	e646      	b.n	adba <__aeabi_dmul+0xce>
    b12c:	2a1f      	cmp	r2, #31
    b12e:	dc21      	bgt.n	b174 <__aeabi_dmul+0x488>
    b130:	2520      	movs	r5, #32
    b132:	0020      	movs	r0, r4
    b134:	1aad      	subs	r5, r5, r2
    b136:	001e      	movs	r6, r3
    b138:	40ab      	lsls	r3, r5
    b13a:	40a8      	lsls	r0, r5
    b13c:	40d6      	lsrs	r6, r2
    b13e:	1e5d      	subs	r5, r3, #1
    b140:	41ab      	sbcs	r3, r5
    b142:	4330      	orrs	r0, r6
    b144:	4318      	orrs	r0, r3
    b146:	40d4      	lsrs	r4, r2
    b148:	0743      	lsls	r3, r0, #29
    b14a:	d009      	beq.n	b160 <__aeabi_dmul+0x474>
    b14c:	230f      	movs	r3, #15
    b14e:	4003      	ands	r3, r0
    b150:	2b04      	cmp	r3, #4
    b152:	d005      	beq.n	b160 <__aeabi_dmul+0x474>
    b154:	0003      	movs	r3, r0
    b156:	1d18      	adds	r0, r3, #4
    b158:	4298      	cmp	r0, r3
    b15a:	419b      	sbcs	r3, r3
    b15c:	425b      	negs	r3, r3
    b15e:	18e4      	adds	r4, r4, r3
    b160:	0223      	lsls	r3, r4, #8
    b162:	d521      	bpl.n	b1a8 <__aeabi_dmul+0x4bc>
    b164:	2501      	movs	r5, #1
    b166:	9b01      	ldr	r3, [sp, #4]
    b168:	2401      	movs	r4, #1
    b16a:	401d      	ands	r5, r3
    b16c:	2300      	movs	r3, #0
    b16e:	2200      	movs	r2, #0
    b170:	4699      	mov	r9, r3
    b172:	e622      	b.n	adba <__aeabi_dmul+0xce>
    b174:	251f      	movs	r5, #31
    b176:	0021      	movs	r1, r4
    b178:	426d      	negs	r5, r5
    b17a:	1a28      	subs	r0, r5, r0
    b17c:	40c1      	lsrs	r1, r0
    b17e:	0008      	movs	r0, r1
    b180:	2a20      	cmp	r2, #32
    b182:	d01d      	beq.n	b1c0 <__aeabi_dmul+0x4d4>
    b184:	355f      	adds	r5, #95	; 0x5f
    b186:	1aaa      	subs	r2, r5, r2
    b188:	4094      	lsls	r4, r2
    b18a:	4323      	orrs	r3, r4
    b18c:	1e5c      	subs	r4, r3, #1
    b18e:	41a3      	sbcs	r3, r4
    b190:	2507      	movs	r5, #7
    b192:	4303      	orrs	r3, r0
    b194:	401d      	ands	r5, r3
    b196:	2200      	movs	r2, #0
    b198:	2d00      	cmp	r5, #0
    b19a:	d009      	beq.n	b1b0 <__aeabi_dmul+0x4c4>
    b19c:	220f      	movs	r2, #15
    b19e:	2400      	movs	r4, #0
    b1a0:	401a      	ands	r2, r3
    b1a2:	0018      	movs	r0, r3
    b1a4:	2a04      	cmp	r2, #4
    b1a6:	d1d6      	bne.n	b156 <__aeabi_dmul+0x46a>
    b1a8:	0003      	movs	r3, r0
    b1aa:	0765      	lsls	r5, r4, #29
    b1ac:	0264      	lsls	r4, r4, #9
    b1ae:	0b22      	lsrs	r2, r4, #12
    b1b0:	08db      	lsrs	r3, r3, #3
    b1b2:	432b      	orrs	r3, r5
    b1b4:	2501      	movs	r5, #1
    b1b6:	4699      	mov	r9, r3
    b1b8:	9b01      	ldr	r3, [sp, #4]
    b1ba:	2400      	movs	r4, #0
    b1bc:	401d      	ands	r5, r3
    b1be:	e5fc      	b.n	adba <__aeabi_dmul+0xce>
    b1c0:	2400      	movs	r4, #0
    b1c2:	e7e2      	b.n	b18a <__aeabi_dmul+0x49e>
    b1c4:	2280      	movs	r2, #128	; 0x80
    b1c6:	2501      	movs	r5, #1
    b1c8:	0312      	lsls	r2, r2, #12
    b1ca:	4322      	orrs	r2, r4
    b1cc:	9901      	ldr	r1, [sp, #4]
    b1ce:	0312      	lsls	r2, r2, #12
    b1d0:	0b12      	lsrs	r2, r2, #12
    b1d2:	400d      	ands	r5, r1
    b1d4:	4699      	mov	r9, r3
    b1d6:	4c04      	ldr	r4, [pc, #16]	; (b1e8 <__aeabi_dmul+0x4fc>)
    b1d8:	e5ef      	b.n	adba <__aeabi_dmul+0xce>
    b1da:	46c0      	nop			; (mov r8, r8)
    b1dc:	000003ff 	.word	0x000003ff
    b1e0:	feffffff 	.word	0xfeffffff
    b1e4:	000007fe 	.word	0x000007fe
    b1e8:	000007ff 	.word	0x000007ff

0000b1ec <__aeabi_dsub>:
    b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ee:	4646      	mov	r6, r8
    b1f0:	46d6      	mov	lr, sl
    b1f2:	464f      	mov	r7, r9
    b1f4:	030c      	lsls	r4, r1, #12
    b1f6:	b5c0      	push	{r6, r7, lr}
    b1f8:	0fcd      	lsrs	r5, r1, #31
    b1fa:	004e      	lsls	r6, r1, #1
    b1fc:	0a61      	lsrs	r1, r4, #9
    b1fe:	0f44      	lsrs	r4, r0, #29
    b200:	430c      	orrs	r4, r1
    b202:	00c1      	lsls	r1, r0, #3
    b204:	0058      	lsls	r0, r3, #1
    b206:	0d40      	lsrs	r0, r0, #21
    b208:	4684      	mov	ip, r0
    b20a:	468a      	mov	sl, r1
    b20c:	000f      	movs	r7, r1
    b20e:	0319      	lsls	r1, r3, #12
    b210:	0f50      	lsrs	r0, r2, #29
    b212:	0a49      	lsrs	r1, r1, #9
    b214:	4301      	orrs	r1, r0
    b216:	48c6      	ldr	r0, [pc, #792]	; (b530 <__aeabi_dsub+0x344>)
    b218:	0d76      	lsrs	r6, r6, #21
    b21a:	46a8      	mov	r8, r5
    b21c:	0fdb      	lsrs	r3, r3, #31
    b21e:	00d2      	lsls	r2, r2, #3
    b220:	4584      	cmp	ip, r0
    b222:	d100      	bne.n	b226 <__aeabi_dsub+0x3a>
    b224:	e0d8      	b.n	b3d8 <__aeabi_dsub+0x1ec>
    b226:	2001      	movs	r0, #1
    b228:	4043      	eors	r3, r0
    b22a:	42ab      	cmp	r3, r5
    b22c:	d100      	bne.n	b230 <__aeabi_dsub+0x44>
    b22e:	e0a6      	b.n	b37e <__aeabi_dsub+0x192>
    b230:	4660      	mov	r0, ip
    b232:	1a35      	subs	r5, r6, r0
    b234:	2d00      	cmp	r5, #0
    b236:	dc00      	bgt.n	b23a <__aeabi_dsub+0x4e>
    b238:	e105      	b.n	b446 <__aeabi_dsub+0x25a>
    b23a:	2800      	cmp	r0, #0
    b23c:	d110      	bne.n	b260 <__aeabi_dsub+0x74>
    b23e:	000b      	movs	r3, r1
    b240:	4313      	orrs	r3, r2
    b242:	d100      	bne.n	b246 <__aeabi_dsub+0x5a>
    b244:	e0d7      	b.n	b3f6 <__aeabi_dsub+0x20a>
    b246:	1e6b      	subs	r3, r5, #1
    b248:	2b00      	cmp	r3, #0
    b24a:	d000      	beq.n	b24e <__aeabi_dsub+0x62>
    b24c:	e14b      	b.n	b4e6 <__aeabi_dsub+0x2fa>
    b24e:	4653      	mov	r3, sl
    b250:	1a9f      	subs	r7, r3, r2
    b252:	45ba      	cmp	sl, r7
    b254:	4180      	sbcs	r0, r0
    b256:	1a64      	subs	r4, r4, r1
    b258:	4240      	negs	r0, r0
    b25a:	1a24      	subs	r4, r4, r0
    b25c:	2601      	movs	r6, #1
    b25e:	e01e      	b.n	b29e <__aeabi_dsub+0xb2>
    b260:	4bb3      	ldr	r3, [pc, #716]	; (b530 <__aeabi_dsub+0x344>)
    b262:	429e      	cmp	r6, r3
    b264:	d048      	beq.n	b2f8 <__aeabi_dsub+0x10c>
    b266:	2380      	movs	r3, #128	; 0x80
    b268:	041b      	lsls	r3, r3, #16
    b26a:	4319      	orrs	r1, r3
    b26c:	2d38      	cmp	r5, #56	; 0x38
    b26e:	dd00      	ble.n	b272 <__aeabi_dsub+0x86>
    b270:	e119      	b.n	b4a6 <__aeabi_dsub+0x2ba>
    b272:	2d1f      	cmp	r5, #31
    b274:	dd00      	ble.n	b278 <__aeabi_dsub+0x8c>
    b276:	e14c      	b.n	b512 <__aeabi_dsub+0x326>
    b278:	2320      	movs	r3, #32
    b27a:	000f      	movs	r7, r1
    b27c:	1b5b      	subs	r3, r3, r5
    b27e:	0010      	movs	r0, r2
    b280:	409a      	lsls	r2, r3
    b282:	409f      	lsls	r7, r3
    b284:	40e8      	lsrs	r0, r5
    b286:	1e53      	subs	r3, r2, #1
    b288:	419a      	sbcs	r2, r3
    b28a:	40e9      	lsrs	r1, r5
    b28c:	4307      	orrs	r7, r0
    b28e:	4317      	orrs	r7, r2
    b290:	4653      	mov	r3, sl
    b292:	1bdf      	subs	r7, r3, r7
    b294:	1a61      	subs	r1, r4, r1
    b296:	45ba      	cmp	sl, r7
    b298:	41a4      	sbcs	r4, r4
    b29a:	4264      	negs	r4, r4
    b29c:	1b0c      	subs	r4, r1, r4
    b29e:	0223      	lsls	r3, r4, #8
    b2a0:	d400      	bmi.n	b2a4 <__aeabi_dsub+0xb8>
    b2a2:	e0c5      	b.n	b430 <__aeabi_dsub+0x244>
    b2a4:	0264      	lsls	r4, r4, #9
    b2a6:	0a65      	lsrs	r5, r4, #9
    b2a8:	2d00      	cmp	r5, #0
    b2aa:	d100      	bne.n	b2ae <__aeabi_dsub+0xc2>
    b2ac:	e0f6      	b.n	b49c <__aeabi_dsub+0x2b0>
    b2ae:	0028      	movs	r0, r5
    b2b0:	f7fd feee 	bl	9090 <__clzsi2>
    b2b4:	0003      	movs	r3, r0
    b2b6:	3b08      	subs	r3, #8
    b2b8:	2b1f      	cmp	r3, #31
    b2ba:	dd00      	ble.n	b2be <__aeabi_dsub+0xd2>
    b2bc:	e0e9      	b.n	b492 <__aeabi_dsub+0x2a6>
    b2be:	2220      	movs	r2, #32
    b2c0:	003c      	movs	r4, r7
    b2c2:	1ad2      	subs	r2, r2, r3
    b2c4:	409d      	lsls	r5, r3
    b2c6:	40d4      	lsrs	r4, r2
    b2c8:	409f      	lsls	r7, r3
    b2ca:	4325      	orrs	r5, r4
    b2cc:	429e      	cmp	r6, r3
    b2ce:	dd00      	ble.n	b2d2 <__aeabi_dsub+0xe6>
    b2d0:	e0db      	b.n	b48a <__aeabi_dsub+0x29e>
    b2d2:	1b9e      	subs	r6, r3, r6
    b2d4:	1c73      	adds	r3, r6, #1
    b2d6:	2b1f      	cmp	r3, #31
    b2d8:	dd00      	ble.n	b2dc <__aeabi_dsub+0xf0>
    b2da:	e10a      	b.n	b4f2 <__aeabi_dsub+0x306>
    b2dc:	2220      	movs	r2, #32
    b2de:	0038      	movs	r0, r7
    b2e0:	1ad2      	subs	r2, r2, r3
    b2e2:	0029      	movs	r1, r5
    b2e4:	4097      	lsls	r7, r2
    b2e6:	002c      	movs	r4, r5
    b2e8:	4091      	lsls	r1, r2
    b2ea:	40d8      	lsrs	r0, r3
    b2ec:	1e7a      	subs	r2, r7, #1
    b2ee:	4197      	sbcs	r7, r2
    b2f0:	40dc      	lsrs	r4, r3
    b2f2:	2600      	movs	r6, #0
    b2f4:	4301      	orrs	r1, r0
    b2f6:	430f      	orrs	r7, r1
    b2f8:	077b      	lsls	r3, r7, #29
    b2fa:	d009      	beq.n	b310 <__aeabi_dsub+0x124>
    b2fc:	230f      	movs	r3, #15
    b2fe:	403b      	ands	r3, r7
    b300:	2b04      	cmp	r3, #4
    b302:	d005      	beq.n	b310 <__aeabi_dsub+0x124>
    b304:	1d3b      	adds	r3, r7, #4
    b306:	42bb      	cmp	r3, r7
    b308:	41bf      	sbcs	r7, r7
    b30a:	427f      	negs	r7, r7
    b30c:	19e4      	adds	r4, r4, r7
    b30e:	001f      	movs	r7, r3
    b310:	0223      	lsls	r3, r4, #8
    b312:	d525      	bpl.n	b360 <__aeabi_dsub+0x174>
    b314:	4b86      	ldr	r3, [pc, #536]	; (b530 <__aeabi_dsub+0x344>)
    b316:	3601      	adds	r6, #1
    b318:	429e      	cmp	r6, r3
    b31a:	d100      	bne.n	b31e <__aeabi_dsub+0x132>
    b31c:	e0af      	b.n	b47e <__aeabi_dsub+0x292>
    b31e:	4b85      	ldr	r3, [pc, #532]	; (b534 <__aeabi_dsub+0x348>)
    b320:	2501      	movs	r5, #1
    b322:	401c      	ands	r4, r3
    b324:	4643      	mov	r3, r8
    b326:	0762      	lsls	r2, r4, #29
    b328:	08ff      	lsrs	r7, r7, #3
    b32a:	0264      	lsls	r4, r4, #9
    b32c:	0576      	lsls	r6, r6, #21
    b32e:	4317      	orrs	r7, r2
    b330:	0b24      	lsrs	r4, r4, #12
    b332:	0d76      	lsrs	r6, r6, #21
    b334:	401d      	ands	r5, r3
    b336:	2100      	movs	r1, #0
    b338:	0324      	lsls	r4, r4, #12
    b33a:	0b23      	lsrs	r3, r4, #12
    b33c:	0d0c      	lsrs	r4, r1, #20
    b33e:	4a7e      	ldr	r2, [pc, #504]	; (b538 <__aeabi_dsub+0x34c>)
    b340:	0524      	lsls	r4, r4, #20
    b342:	431c      	orrs	r4, r3
    b344:	4014      	ands	r4, r2
    b346:	0533      	lsls	r3, r6, #20
    b348:	4323      	orrs	r3, r4
    b34a:	005b      	lsls	r3, r3, #1
    b34c:	07ed      	lsls	r5, r5, #31
    b34e:	085b      	lsrs	r3, r3, #1
    b350:	432b      	orrs	r3, r5
    b352:	0038      	movs	r0, r7
    b354:	0019      	movs	r1, r3
    b356:	bc1c      	pop	{r2, r3, r4}
    b358:	4690      	mov	r8, r2
    b35a:	4699      	mov	r9, r3
    b35c:	46a2      	mov	sl, r4
    b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b360:	2501      	movs	r5, #1
    b362:	4643      	mov	r3, r8
    b364:	0762      	lsls	r2, r4, #29
    b366:	08ff      	lsrs	r7, r7, #3
    b368:	4317      	orrs	r7, r2
    b36a:	08e4      	lsrs	r4, r4, #3
    b36c:	401d      	ands	r5, r3
    b36e:	4b70      	ldr	r3, [pc, #448]	; (b530 <__aeabi_dsub+0x344>)
    b370:	429e      	cmp	r6, r3
    b372:	d036      	beq.n	b3e2 <__aeabi_dsub+0x1f6>
    b374:	0324      	lsls	r4, r4, #12
    b376:	0576      	lsls	r6, r6, #21
    b378:	0b24      	lsrs	r4, r4, #12
    b37a:	0d76      	lsrs	r6, r6, #21
    b37c:	e7db      	b.n	b336 <__aeabi_dsub+0x14a>
    b37e:	4663      	mov	r3, ip
    b380:	1af3      	subs	r3, r6, r3
    b382:	2b00      	cmp	r3, #0
    b384:	dc00      	bgt.n	b388 <__aeabi_dsub+0x19c>
    b386:	e094      	b.n	b4b2 <__aeabi_dsub+0x2c6>
    b388:	4660      	mov	r0, ip
    b38a:	2800      	cmp	r0, #0
    b38c:	d035      	beq.n	b3fa <__aeabi_dsub+0x20e>
    b38e:	4868      	ldr	r0, [pc, #416]	; (b530 <__aeabi_dsub+0x344>)
    b390:	4286      	cmp	r6, r0
    b392:	d0b1      	beq.n	b2f8 <__aeabi_dsub+0x10c>
    b394:	2780      	movs	r7, #128	; 0x80
    b396:	043f      	lsls	r7, r7, #16
    b398:	4339      	orrs	r1, r7
    b39a:	2b38      	cmp	r3, #56	; 0x38
    b39c:	dc00      	bgt.n	b3a0 <__aeabi_dsub+0x1b4>
    b39e:	e0fd      	b.n	b59c <__aeabi_dsub+0x3b0>
    b3a0:	430a      	orrs	r2, r1
    b3a2:	0017      	movs	r7, r2
    b3a4:	2100      	movs	r1, #0
    b3a6:	1e7a      	subs	r2, r7, #1
    b3a8:	4197      	sbcs	r7, r2
    b3aa:	4457      	add	r7, sl
    b3ac:	4557      	cmp	r7, sl
    b3ae:	4180      	sbcs	r0, r0
    b3b0:	1909      	adds	r1, r1, r4
    b3b2:	4244      	negs	r4, r0
    b3b4:	190c      	adds	r4, r1, r4
    b3b6:	0223      	lsls	r3, r4, #8
    b3b8:	d53a      	bpl.n	b430 <__aeabi_dsub+0x244>
    b3ba:	4b5d      	ldr	r3, [pc, #372]	; (b530 <__aeabi_dsub+0x344>)
    b3bc:	3601      	adds	r6, #1
    b3be:	429e      	cmp	r6, r3
    b3c0:	d100      	bne.n	b3c4 <__aeabi_dsub+0x1d8>
    b3c2:	e14b      	b.n	b65c <__aeabi_dsub+0x470>
    b3c4:	2201      	movs	r2, #1
    b3c6:	4b5b      	ldr	r3, [pc, #364]	; (b534 <__aeabi_dsub+0x348>)
    b3c8:	401c      	ands	r4, r3
    b3ca:	087b      	lsrs	r3, r7, #1
    b3cc:	4017      	ands	r7, r2
    b3ce:	431f      	orrs	r7, r3
    b3d0:	07e2      	lsls	r2, r4, #31
    b3d2:	4317      	orrs	r7, r2
    b3d4:	0864      	lsrs	r4, r4, #1
    b3d6:	e78f      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b3d8:	0008      	movs	r0, r1
    b3da:	4310      	orrs	r0, r2
    b3dc:	d000      	beq.n	b3e0 <__aeabi_dsub+0x1f4>
    b3de:	e724      	b.n	b22a <__aeabi_dsub+0x3e>
    b3e0:	e721      	b.n	b226 <__aeabi_dsub+0x3a>
    b3e2:	0023      	movs	r3, r4
    b3e4:	433b      	orrs	r3, r7
    b3e6:	d100      	bne.n	b3ea <__aeabi_dsub+0x1fe>
    b3e8:	e1b9      	b.n	b75e <__aeabi_dsub+0x572>
    b3ea:	2280      	movs	r2, #128	; 0x80
    b3ec:	0312      	lsls	r2, r2, #12
    b3ee:	4314      	orrs	r4, r2
    b3f0:	0324      	lsls	r4, r4, #12
    b3f2:	0b24      	lsrs	r4, r4, #12
    b3f4:	e79f      	b.n	b336 <__aeabi_dsub+0x14a>
    b3f6:	002e      	movs	r6, r5
    b3f8:	e77e      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b3fa:	0008      	movs	r0, r1
    b3fc:	4310      	orrs	r0, r2
    b3fe:	d100      	bne.n	b402 <__aeabi_dsub+0x216>
    b400:	e0ca      	b.n	b598 <__aeabi_dsub+0x3ac>
    b402:	1e58      	subs	r0, r3, #1
    b404:	4684      	mov	ip, r0
    b406:	2800      	cmp	r0, #0
    b408:	d000      	beq.n	b40c <__aeabi_dsub+0x220>
    b40a:	e0e7      	b.n	b5dc <__aeabi_dsub+0x3f0>
    b40c:	4452      	add	r2, sl
    b40e:	4552      	cmp	r2, sl
    b410:	4180      	sbcs	r0, r0
    b412:	1864      	adds	r4, r4, r1
    b414:	4240      	negs	r0, r0
    b416:	1824      	adds	r4, r4, r0
    b418:	0017      	movs	r7, r2
    b41a:	2601      	movs	r6, #1
    b41c:	0223      	lsls	r3, r4, #8
    b41e:	d507      	bpl.n	b430 <__aeabi_dsub+0x244>
    b420:	2602      	movs	r6, #2
    b422:	e7cf      	b.n	b3c4 <__aeabi_dsub+0x1d8>
    b424:	4664      	mov	r4, ip
    b426:	432c      	orrs	r4, r5
    b428:	d100      	bne.n	b42c <__aeabi_dsub+0x240>
    b42a:	e1b3      	b.n	b794 <__aeabi_dsub+0x5a8>
    b42c:	002c      	movs	r4, r5
    b42e:	4667      	mov	r7, ip
    b430:	077b      	lsls	r3, r7, #29
    b432:	d000      	beq.n	b436 <__aeabi_dsub+0x24a>
    b434:	e762      	b.n	b2fc <__aeabi_dsub+0x110>
    b436:	0763      	lsls	r3, r4, #29
    b438:	08ff      	lsrs	r7, r7, #3
    b43a:	431f      	orrs	r7, r3
    b43c:	2501      	movs	r5, #1
    b43e:	4643      	mov	r3, r8
    b440:	08e4      	lsrs	r4, r4, #3
    b442:	401d      	ands	r5, r3
    b444:	e793      	b.n	b36e <__aeabi_dsub+0x182>
    b446:	2d00      	cmp	r5, #0
    b448:	d178      	bne.n	b53c <__aeabi_dsub+0x350>
    b44a:	1c75      	adds	r5, r6, #1
    b44c:	056d      	lsls	r5, r5, #21
    b44e:	0d6d      	lsrs	r5, r5, #21
    b450:	2d01      	cmp	r5, #1
    b452:	dc00      	bgt.n	b456 <__aeabi_dsub+0x26a>
    b454:	e0f2      	b.n	b63c <__aeabi_dsub+0x450>
    b456:	4650      	mov	r0, sl
    b458:	1a80      	subs	r0, r0, r2
    b45a:	4582      	cmp	sl, r0
    b45c:	41bf      	sbcs	r7, r7
    b45e:	1a65      	subs	r5, r4, r1
    b460:	427f      	negs	r7, r7
    b462:	1bed      	subs	r5, r5, r7
    b464:	4684      	mov	ip, r0
    b466:	0228      	lsls	r0, r5, #8
    b468:	d400      	bmi.n	b46c <__aeabi_dsub+0x280>
    b46a:	e08c      	b.n	b586 <__aeabi_dsub+0x39a>
    b46c:	4650      	mov	r0, sl
    b46e:	1a17      	subs	r7, r2, r0
    b470:	42ba      	cmp	r2, r7
    b472:	4192      	sbcs	r2, r2
    b474:	1b0c      	subs	r4, r1, r4
    b476:	4255      	negs	r5, r2
    b478:	1b65      	subs	r5, r4, r5
    b47a:	4698      	mov	r8, r3
    b47c:	e714      	b.n	b2a8 <__aeabi_dsub+0xbc>
    b47e:	2501      	movs	r5, #1
    b480:	4643      	mov	r3, r8
    b482:	2400      	movs	r4, #0
    b484:	401d      	ands	r5, r3
    b486:	2700      	movs	r7, #0
    b488:	e755      	b.n	b336 <__aeabi_dsub+0x14a>
    b48a:	4c2a      	ldr	r4, [pc, #168]	; (b534 <__aeabi_dsub+0x348>)
    b48c:	1af6      	subs	r6, r6, r3
    b48e:	402c      	ands	r4, r5
    b490:	e732      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b492:	003d      	movs	r5, r7
    b494:	3828      	subs	r0, #40	; 0x28
    b496:	4085      	lsls	r5, r0
    b498:	2700      	movs	r7, #0
    b49a:	e717      	b.n	b2cc <__aeabi_dsub+0xe0>
    b49c:	0038      	movs	r0, r7
    b49e:	f7fd fdf7 	bl	9090 <__clzsi2>
    b4a2:	3020      	adds	r0, #32
    b4a4:	e706      	b.n	b2b4 <__aeabi_dsub+0xc8>
    b4a6:	430a      	orrs	r2, r1
    b4a8:	0017      	movs	r7, r2
    b4aa:	2100      	movs	r1, #0
    b4ac:	1e7a      	subs	r2, r7, #1
    b4ae:	4197      	sbcs	r7, r2
    b4b0:	e6ee      	b.n	b290 <__aeabi_dsub+0xa4>
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d000      	beq.n	b4b8 <__aeabi_dsub+0x2cc>
    b4b6:	e0e5      	b.n	b684 <__aeabi_dsub+0x498>
    b4b8:	1c73      	adds	r3, r6, #1
    b4ba:	469c      	mov	ip, r3
    b4bc:	055b      	lsls	r3, r3, #21
    b4be:	0d5b      	lsrs	r3, r3, #21
    b4c0:	2b01      	cmp	r3, #1
    b4c2:	dc00      	bgt.n	b4c6 <__aeabi_dsub+0x2da>
    b4c4:	e09f      	b.n	b606 <__aeabi_dsub+0x41a>
    b4c6:	4b1a      	ldr	r3, [pc, #104]	; (b530 <__aeabi_dsub+0x344>)
    b4c8:	459c      	cmp	ip, r3
    b4ca:	d100      	bne.n	b4ce <__aeabi_dsub+0x2e2>
    b4cc:	e0c5      	b.n	b65a <__aeabi_dsub+0x46e>
    b4ce:	4452      	add	r2, sl
    b4d0:	4552      	cmp	r2, sl
    b4d2:	4180      	sbcs	r0, r0
    b4d4:	1864      	adds	r4, r4, r1
    b4d6:	4240      	negs	r0, r0
    b4d8:	1824      	adds	r4, r4, r0
    b4da:	07e7      	lsls	r7, r4, #31
    b4dc:	0852      	lsrs	r2, r2, #1
    b4de:	4317      	orrs	r7, r2
    b4e0:	0864      	lsrs	r4, r4, #1
    b4e2:	4666      	mov	r6, ip
    b4e4:	e708      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b4e6:	4812      	ldr	r0, [pc, #72]	; (b530 <__aeabi_dsub+0x344>)
    b4e8:	4285      	cmp	r5, r0
    b4ea:	d100      	bne.n	b4ee <__aeabi_dsub+0x302>
    b4ec:	e085      	b.n	b5fa <__aeabi_dsub+0x40e>
    b4ee:	001d      	movs	r5, r3
    b4f0:	e6bc      	b.n	b26c <__aeabi_dsub+0x80>
    b4f2:	0029      	movs	r1, r5
    b4f4:	3e1f      	subs	r6, #31
    b4f6:	40f1      	lsrs	r1, r6
    b4f8:	2b20      	cmp	r3, #32
    b4fa:	d100      	bne.n	b4fe <__aeabi_dsub+0x312>
    b4fc:	e07f      	b.n	b5fe <__aeabi_dsub+0x412>
    b4fe:	2240      	movs	r2, #64	; 0x40
    b500:	1ad3      	subs	r3, r2, r3
    b502:	409d      	lsls	r5, r3
    b504:	432f      	orrs	r7, r5
    b506:	1e7d      	subs	r5, r7, #1
    b508:	41af      	sbcs	r7, r5
    b50a:	2400      	movs	r4, #0
    b50c:	430f      	orrs	r7, r1
    b50e:	2600      	movs	r6, #0
    b510:	e78e      	b.n	b430 <__aeabi_dsub+0x244>
    b512:	002b      	movs	r3, r5
    b514:	000f      	movs	r7, r1
    b516:	3b20      	subs	r3, #32
    b518:	40df      	lsrs	r7, r3
    b51a:	2d20      	cmp	r5, #32
    b51c:	d071      	beq.n	b602 <__aeabi_dsub+0x416>
    b51e:	2340      	movs	r3, #64	; 0x40
    b520:	1b5d      	subs	r5, r3, r5
    b522:	40a9      	lsls	r1, r5
    b524:	430a      	orrs	r2, r1
    b526:	1e51      	subs	r1, r2, #1
    b528:	418a      	sbcs	r2, r1
    b52a:	2100      	movs	r1, #0
    b52c:	4317      	orrs	r7, r2
    b52e:	e6af      	b.n	b290 <__aeabi_dsub+0xa4>
    b530:	000007ff 	.word	0x000007ff
    b534:	ff7fffff 	.word	0xff7fffff
    b538:	800fffff 	.word	0x800fffff
    b53c:	2e00      	cmp	r6, #0
    b53e:	d03e      	beq.n	b5be <__aeabi_dsub+0x3d2>
    b540:	4eb3      	ldr	r6, [pc, #716]	; (b810 <__aeabi_dsub+0x624>)
    b542:	45b4      	cmp	ip, r6
    b544:	d045      	beq.n	b5d2 <__aeabi_dsub+0x3e6>
    b546:	2680      	movs	r6, #128	; 0x80
    b548:	0436      	lsls	r6, r6, #16
    b54a:	426d      	negs	r5, r5
    b54c:	4334      	orrs	r4, r6
    b54e:	2d38      	cmp	r5, #56	; 0x38
    b550:	dd00      	ble.n	b554 <__aeabi_dsub+0x368>
    b552:	e0a8      	b.n	b6a6 <__aeabi_dsub+0x4ba>
    b554:	2d1f      	cmp	r5, #31
    b556:	dd00      	ble.n	b55a <__aeabi_dsub+0x36e>
    b558:	e11f      	b.n	b79a <__aeabi_dsub+0x5ae>
    b55a:	2620      	movs	r6, #32
    b55c:	0027      	movs	r7, r4
    b55e:	4650      	mov	r0, sl
    b560:	1b76      	subs	r6, r6, r5
    b562:	40b7      	lsls	r7, r6
    b564:	40e8      	lsrs	r0, r5
    b566:	4307      	orrs	r7, r0
    b568:	4650      	mov	r0, sl
    b56a:	40b0      	lsls	r0, r6
    b56c:	1e46      	subs	r6, r0, #1
    b56e:	41b0      	sbcs	r0, r6
    b570:	40ec      	lsrs	r4, r5
    b572:	4338      	orrs	r0, r7
    b574:	1a17      	subs	r7, r2, r0
    b576:	42ba      	cmp	r2, r7
    b578:	4192      	sbcs	r2, r2
    b57a:	1b0c      	subs	r4, r1, r4
    b57c:	4252      	negs	r2, r2
    b57e:	1aa4      	subs	r4, r4, r2
    b580:	4666      	mov	r6, ip
    b582:	4698      	mov	r8, r3
    b584:	e68b      	b.n	b29e <__aeabi_dsub+0xb2>
    b586:	4664      	mov	r4, ip
    b588:	4667      	mov	r7, ip
    b58a:	432c      	orrs	r4, r5
    b58c:	d000      	beq.n	b590 <__aeabi_dsub+0x3a4>
    b58e:	e68b      	b.n	b2a8 <__aeabi_dsub+0xbc>
    b590:	2500      	movs	r5, #0
    b592:	2600      	movs	r6, #0
    b594:	2700      	movs	r7, #0
    b596:	e6ea      	b.n	b36e <__aeabi_dsub+0x182>
    b598:	001e      	movs	r6, r3
    b59a:	e6ad      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b59c:	2b1f      	cmp	r3, #31
    b59e:	dc60      	bgt.n	b662 <__aeabi_dsub+0x476>
    b5a0:	2720      	movs	r7, #32
    b5a2:	1af8      	subs	r0, r7, r3
    b5a4:	000f      	movs	r7, r1
    b5a6:	4684      	mov	ip, r0
    b5a8:	4087      	lsls	r7, r0
    b5aa:	0010      	movs	r0, r2
    b5ac:	40d8      	lsrs	r0, r3
    b5ae:	4307      	orrs	r7, r0
    b5b0:	4660      	mov	r0, ip
    b5b2:	4082      	lsls	r2, r0
    b5b4:	1e50      	subs	r0, r2, #1
    b5b6:	4182      	sbcs	r2, r0
    b5b8:	40d9      	lsrs	r1, r3
    b5ba:	4317      	orrs	r7, r2
    b5bc:	e6f5      	b.n	b3aa <__aeabi_dsub+0x1be>
    b5be:	0026      	movs	r6, r4
    b5c0:	4650      	mov	r0, sl
    b5c2:	4306      	orrs	r6, r0
    b5c4:	d005      	beq.n	b5d2 <__aeabi_dsub+0x3e6>
    b5c6:	43ed      	mvns	r5, r5
    b5c8:	2d00      	cmp	r5, #0
    b5ca:	d0d3      	beq.n	b574 <__aeabi_dsub+0x388>
    b5cc:	4e90      	ldr	r6, [pc, #576]	; (b810 <__aeabi_dsub+0x624>)
    b5ce:	45b4      	cmp	ip, r6
    b5d0:	d1bd      	bne.n	b54e <__aeabi_dsub+0x362>
    b5d2:	000c      	movs	r4, r1
    b5d4:	0017      	movs	r7, r2
    b5d6:	4666      	mov	r6, ip
    b5d8:	4698      	mov	r8, r3
    b5da:	e68d      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b5dc:	488c      	ldr	r0, [pc, #560]	; (b810 <__aeabi_dsub+0x624>)
    b5de:	4283      	cmp	r3, r0
    b5e0:	d00b      	beq.n	b5fa <__aeabi_dsub+0x40e>
    b5e2:	4663      	mov	r3, ip
    b5e4:	e6d9      	b.n	b39a <__aeabi_dsub+0x1ae>
    b5e6:	2d00      	cmp	r5, #0
    b5e8:	d000      	beq.n	b5ec <__aeabi_dsub+0x400>
    b5ea:	e096      	b.n	b71a <__aeabi_dsub+0x52e>
    b5ec:	0008      	movs	r0, r1
    b5ee:	4310      	orrs	r0, r2
    b5f0:	d100      	bne.n	b5f4 <__aeabi_dsub+0x408>
    b5f2:	e0e2      	b.n	b7ba <__aeabi_dsub+0x5ce>
    b5f4:	000c      	movs	r4, r1
    b5f6:	0017      	movs	r7, r2
    b5f8:	4698      	mov	r8, r3
    b5fa:	4e85      	ldr	r6, [pc, #532]	; (b810 <__aeabi_dsub+0x624>)
    b5fc:	e67c      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b5fe:	2500      	movs	r5, #0
    b600:	e780      	b.n	b504 <__aeabi_dsub+0x318>
    b602:	2100      	movs	r1, #0
    b604:	e78e      	b.n	b524 <__aeabi_dsub+0x338>
    b606:	0023      	movs	r3, r4
    b608:	4650      	mov	r0, sl
    b60a:	4303      	orrs	r3, r0
    b60c:	2e00      	cmp	r6, #0
    b60e:	d000      	beq.n	b612 <__aeabi_dsub+0x426>
    b610:	e0a8      	b.n	b764 <__aeabi_dsub+0x578>
    b612:	2b00      	cmp	r3, #0
    b614:	d100      	bne.n	b618 <__aeabi_dsub+0x42c>
    b616:	e0de      	b.n	b7d6 <__aeabi_dsub+0x5ea>
    b618:	000b      	movs	r3, r1
    b61a:	4313      	orrs	r3, r2
    b61c:	d100      	bne.n	b620 <__aeabi_dsub+0x434>
    b61e:	e66b      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b620:	4452      	add	r2, sl
    b622:	4552      	cmp	r2, sl
    b624:	4180      	sbcs	r0, r0
    b626:	1864      	adds	r4, r4, r1
    b628:	4240      	negs	r0, r0
    b62a:	1824      	adds	r4, r4, r0
    b62c:	0017      	movs	r7, r2
    b62e:	0223      	lsls	r3, r4, #8
    b630:	d400      	bmi.n	b634 <__aeabi_dsub+0x448>
    b632:	e6fd      	b.n	b430 <__aeabi_dsub+0x244>
    b634:	4b77      	ldr	r3, [pc, #476]	; (b814 <__aeabi_dsub+0x628>)
    b636:	4666      	mov	r6, ip
    b638:	401c      	ands	r4, r3
    b63a:	e65d      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b63c:	0025      	movs	r5, r4
    b63e:	4650      	mov	r0, sl
    b640:	4305      	orrs	r5, r0
    b642:	2e00      	cmp	r6, #0
    b644:	d1cf      	bne.n	b5e6 <__aeabi_dsub+0x3fa>
    b646:	2d00      	cmp	r5, #0
    b648:	d14f      	bne.n	b6ea <__aeabi_dsub+0x4fe>
    b64a:	000c      	movs	r4, r1
    b64c:	4314      	orrs	r4, r2
    b64e:	d100      	bne.n	b652 <__aeabi_dsub+0x466>
    b650:	e0a0      	b.n	b794 <__aeabi_dsub+0x5a8>
    b652:	000c      	movs	r4, r1
    b654:	0017      	movs	r7, r2
    b656:	4698      	mov	r8, r3
    b658:	e64e      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b65a:	4666      	mov	r6, ip
    b65c:	2400      	movs	r4, #0
    b65e:	2700      	movs	r7, #0
    b660:	e685      	b.n	b36e <__aeabi_dsub+0x182>
    b662:	001f      	movs	r7, r3
    b664:	0008      	movs	r0, r1
    b666:	3f20      	subs	r7, #32
    b668:	40f8      	lsrs	r0, r7
    b66a:	0007      	movs	r7, r0
    b66c:	2b20      	cmp	r3, #32
    b66e:	d100      	bne.n	b672 <__aeabi_dsub+0x486>
    b670:	e08e      	b.n	b790 <__aeabi_dsub+0x5a4>
    b672:	2040      	movs	r0, #64	; 0x40
    b674:	1ac3      	subs	r3, r0, r3
    b676:	4099      	lsls	r1, r3
    b678:	430a      	orrs	r2, r1
    b67a:	1e51      	subs	r1, r2, #1
    b67c:	418a      	sbcs	r2, r1
    b67e:	2100      	movs	r1, #0
    b680:	4317      	orrs	r7, r2
    b682:	e692      	b.n	b3aa <__aeabi_dsub+0x1be>
    b684:	2e00      	cmp	r6, #0
    b686:	d114      	bne.n	b6b2 <__aeabi_dsub+0x4c6>
    b688:	0026      	movs	r6, r4
    b68a:	4650      	mov	r0, sl
    b68c:	4306      	orrs	r6, r0
    b68e:	d062      	beq.n	b756 <__aeabi_dsub+0x56a>
    b690:	43db      	mvns	r3, r3
    b692:	2b00      	cmp	r3, #0
    b694:	d15c      	bne.n	b750 <__aeabi_dsub+0x564>
    b696:	1887      	adds	r7, r0, r2
    b698:	4297      	cmp	r7, r2
    b69a:	4192      	sbcs	r2, r2
    b69c:	1864      	adds	r4, r4, r1
    b69e:	4252      	negs	r2, r2
    b6a0:	18a4      	adds	r4, r4, r2
    b6a2:	4666      	mov	r6, ip
    b6a4:	e687      	b.n	b3b6 <__aeabi_dsub+0x1ca>
    b6a6:	4650      	mov	r0, sl
    b6a8:	4320      	orrs	r0, r4
    b6aa:	1e44      	subs	r4, r0, #1
    b6ac:	41a0      	sbcs	r0, r4
    b6ae:	2400      	movs	r4, #0
    b6b0:	e760      	b.n	b574 <__aeabi_dsub+0x388>
    b6b2:	4e57      	ldr	r6, [pc, #348]	; (b810 <__aeabi_dsub+0x624>)
    b6b4:	45b4      	cmp	ip, r6
    b6b6:	d04e      	beq.n	b756 <__aeabi_dsub+0x56a>
    b6b8:	2680      	movs	r6, #128	; 0x80
    b6ba:	0436      	lsls	r6, r6, #16
    b6bc:	425b      	negs	r3, r3
    b6be:	4334      	orrs	r4, r6
    b6c0:	2b38      	cmp	r3, #56	; 0x38
    b6c2:	dd00      	ble.n	b6c6 <__aeabi_dsub+0x4da>
    b6c4:	e07f      	b.n	b7c6 <__aeabi_dsub+0x5da>
    b6c6:	2b1f      	cmp	r3, #31
    b6c8:	dd00      	ble.n	b6cc <__aeabi_dsub+0x4e0>
    b6ca:	e08b      	b.n	b7e4 <__aeabi_dsub+0x5f8>
    b6cc:	2620      	movs	r6, #32
    b6ce:	0027      	movs	r7, r4
    b6d0:	4650      	mov	r0, sl
    b6d2:	1af6      	subs	r6, r6, r3
    b6d4:	40b7      	lsls	r7, r6
    b6d6:	40d8      	lsrs	r0, r3
    b6d8:	4307      	orrs	r7, r0
    b6da:	4650      	mov	r0, sl
    b6dc:	40b0      	lsls	r0, r6
    b6de:	1e46      	subs	r6, r0, #1
    b6e0:	41b0      	sbcs	r0, r6
    b6e2:	4307      	orrs	r7, r0
    b6e4:	40dc      	lsrs	r4, r3
    b6e6:	18bf      	adds	r7, r7, r2
    b6e8:	e7d6      	b.n	b698 <__aeabi_dsub+0x4ac>
    b6ea:	000d      	movs	r5, r1
    b6ec:	4315      	orrs	r5, r2
    b6ee:	d100      	bne.n	b6f2 <__aeabi_dsub+0x506>
    b6f0:	e602      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b6f2:	4650      	mov	r0, sl
    b6f4:	1a80      	subs	r0, r0, r2
    b6f6:	4582      	cmp	sl, r0
    b6f8:	41bf      	sbcs	r7, r7
    b6fa:	1a65      	subs	r5, r4, r1
    b6fc:	427f      	negs	r7, r7
    b6fe:	1bed      	subs	r5, r5, r7
    b700:	4684      	mov	ip, r0
    b702:	0228      	lsls	r0, r5, #8
    b704:	d400      	bmi.n	b708 <__aeabi_dsub+0x51c>
    b706:	e68d      	b.n	b424 <__aeabi_dsub+0x238>
    b708:	4650      	mov	r0, sl
    b70a:	1a17      	subs	r7, r2, r0
    b70c:	42ba      	cmp	r2, r7
    b70e:	4192      	sbcs	r2, r2
    b710:	1b0c      	subs	r4, r1, r4
    b712:	4252      	negs	r2, r2
    b714:	1aa4      	subs	r4, r4, r2
    b716:	4698      	mov	r8, r3
    b718:	e5ee      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b71a:	000d      	movs	r5, r1
    b71c:	4315      	orrs	r5, r2
    b71e:	d100      	bne.n	b722 <__aeabi_dsub+0x536>
    b720:	e76b      	b.n	b5fa <__aeabi_dsub+0x40e>
    b722:	4650      	mov	r0, sl
    b724:	0767      	lsls	r7, r4, #29
    b726:	08c0      	lsrs	r0, r0, #3
    b728:	4307      	orrs	r7, r0
    b72a:	2080      	movs	r0, #128	; 0x80
    b72c:	08e4      	lsrs	r4, r4, #3
    b72e:	0300      	lsls	r0, r0, #12
    b730:	4204      	tst	r4, r0
    b732:	d007      	beq.n	b744 <__aeabi_dsub+0x558>
    b734:	08cd      	lsrs	r5, r1, #3
    b736:	4205      	tst	r5, r0
    b738:	d104      	bne.n	b744 <__aeabi_dsub+0x558>
    b73a:	002c      	movs	r4, r5
    b73c:	4698      	mov	r8, r3
    b73e:	08d7      	lsrs	r7, r2, #3
    b740:	0749      	lsls	r1, r1, #29
    b742:	430f      	orrs	r7, r1
    b744:	0f7b      	lsrs	r3, r7, #29
    b746:	00e4      	lsls	r4, r4, #3
    b748:	431c      	orrs	r4, r3
    b74a:	00ff      	lsls	r7, r7, #3
    b74c:	4e30      	ldr	r6, [pc, #192]	; (b810 <__aeabi_dsub+0x624>)
    b74e:	e5d3      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b750:	4e2f      	ldr	r6, [pc, #188]	; (b810 <__aeabi_dsub+0x624>)
    b752:	45b4      	cmp	ip, r6
    b754:	d1b4      	bne.n	b6c0 <__aeabi_dsub+0x4d4>
    b756:	000c      	movs	r4, r1
    b758:	0017      	movs	r7, r2
    b75a:	4666      	mov	r6, ip
    b75c:	e5cc      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b75e:	2700      	movs	r7, #0
    b760:	2400      	movs	r4, #0
    b762:	e5e8      	b.n	b336 <__aeabi_dsub+0x14a>
    b764:	2b00      	cmp	r3, #0
    b766:	d039      	beq.n	b7dc <__aeabi_dsub+0x5f0>
    b768:	000b      	movs	r3, r1
    b76a:	4313      	orrs	r3, r2
    b76c:	d100      	bne.n	b770 <__aeabi_dsub+0x584>
    b76e:	e744      	b.n	b5fa <__aeabi_dsub+0x40e>
    b770:	08c0      	lsrs	r0, r0, #3
    b772:	0767      	lsls	r7, r4, #29
    b774:	4307      	orrs	r7, r0
    b776:	2080      	movs	r0, #128	; 0x80
    b778:	08e4      	lsrs	r4, r4, #3
    b77a:	0300      	lsls	r0, r0, #12
    b77c:	4204      	tst	r4, r0
    b77e:	d0e1      	beq.n	b744 <__aeabi_dsub+0x558>
    b780:	08cb      	lsrs	r3, r1, #3
    b782:	4203      	tst	r3, r0
    b784:	d1de      	bne.n	b744 <__aeabi_dsub+0x558>
    b786:	08d7      	lsrs	r7, r2, #3
    b788:	0749      	lsls	r1, r1, #29
    b78a:	430f      	orrs	r7, r1
    b78c:	001c      	movs	r4, r3
    b78e:	e7d9      	b.n	b744 <__aeabi_dsub+0x558>
    b790:	2100      	movs	r1, #0
    b792:	e771      	b.n	b678 <__aeabi_dsub+0x48c>
    b794:	2500      	movs	r5, #0
    b796:	2700      	movs	r7, #0
    b798:	e5e9      	b.n	b36e <__aeabi_dsub+0x182>
    b79a:	002e      	movs	r6, r5
    b79c:	0027      	movs	r7, r4
    b79e:	3e20      	subs	r6, #32
    b7a0:	40f7      	lsrs	r7, r6
    b7a2:	2d20      	cmp	r5, #32
    b7a4:	d02f      	beq.n	b806 <__aeabi_dsub+0x61a>
    b7a6:	2640      	movs	r6, #64	; 0x40
    b7a8:	1b75      	subs	r5, r6, r5
    b7aa:	40ac      	lsls	r4, r5
    b7ac:	4650      	mov	r0, sl
    b7ae:	4320      	orrs	r0, r4
    b7b0:	1e44      	subs	r4, r0, #1
    b7b2:	41a0      	sbcs	r0, r4
    b7b4:	2400      	movs	r4, #0
    b7b6:	4338      	orrs	r0, r7
    b7b8:	e6dc      	b.n	b574 <__aeabi_dsub+0x388>
    b7ba:	2480      	movs	r4, #128	; 0x80
    b7bc:	2500      	movs	r5, #0
    b7be:	0324      	lsls	r4, r4, #12
    b7c0:	4e13      	ldr	r6, [pc, #76]	; (b810 <__aeabi_dsub+0x624>)
    b7c2:	2700      	movs	r7, #0
    b7c4:	e5d3      	b.n	b36e <__aeabi_dsub+0x182>
    b7c6:	4650      	mov	r0, sl
    b7c8:	4320      	orrs	r0, r4
    b7ca:	0007      	movs	r7, r0
    b7cc:	1e78      	subs	r0, r7, #1
    b7ce:	4187      	sbcs	r7, r0
    b7d0:	2400      	movs	r4, #0
    b7d2:	18bf      	adds	r7, r7, r2
    b7d4:	e760      	b.n	b698 <__aeabi_dsub+0x4ac>
    b7d6:	000c      	movs	r4, r1
    b7d8:	0017      	movs	r7, r2
    b7da:	e58d      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b7dc:	000c      	movs	r4, r1
    b7de:	0017      	movs	r7, r2
    b7e0:	4e0b      	ldr	r6, [pc, #44]	; (b810 <__aeabi_dsub+0x624>)
    b7e2:	e589      	b.n	b2f8 <__aeabi_dsub+0x10c>
    b7e4:	001e      	movs	r6, r3
    b7e6:	0027      	movs	r7, r4
    b7e8:	3e20      	subs	r6, #32
    b7ea:	40f7      	lsrs	r7, r6
    b7ec:	2b20      	cmp	r3, #32
    b7ee:	d00c      	beq.n	b80a <__aeabi_dsub+0x61e>
    b7f0:	2640      	movs	r6, #64	; 0x40
    b7f2:	1af3      	subs	r3, r6, r3
    b7f4:	409c      	lsls	r4, r3
    b7f6:	4650      	mov	r0, sl
    b7f8:	4320      	orrs	r0, r4
    b7fa:	1e44      	subs	r4, r0, #1
    b7fc:	41a0      	sbcs	r0, r4
    b7fe:	4307      	orrs	r7, r0
    b800:	2400      	movs	r4, #0
    b802:	18bf      	adds	r7, r7, r2
    b804:	e748      	b.n	b698 <__aeabi_dsub+0x4ac>
    b806:	2400      	movs	r4, #0
    b808:	e7d0      	b.n	b7ac <__aeabi_dsub+0x5c0>
    b80a:	2400      	movs	r4, #0
    b80c:	e7f3      	b.n	b7f6 <__aeabi_dsub+0x60a>
    b80e:	46c0      	nop			; (mov r8, r8)
    b810:	000007ff 	.word	0x000007ff
    b814:	ff7fffff 	.word	0xff7fffff

0000b818 <__aeabi_d2iz>:
    b818:	b530      	push	{r4, r5, lr}
    b81a:	4d13      	ldr	r5, [pc, #76]	; (b868 <__aeabi_d2iz+0x50>)
    b81c:	030a      	lsls	r2, r1, #12
    b81e:	004b      	lsls	r3, r1, #1
    b820:	0b12      	lsrs	r2, r2, #12
    b822:	0d5b      	lsrs	r3, r3, #21
    b824:	0fc9      	lsrs	r1, r1, #31
    b826:	2400      	movs	r4, #0
    b828:	42ab      	cmp	r3, r5
    b82a:	dd10      	ble.n	b84e <__aeabi_d2iz+0x36>
    b82c:	4c0f      	ldr	r4, [pc, #60]	; (b86c <__aeabi_d2iz+0x54>)
    b82e:	42a3      	cmp	r3, r4
    b830:	dc0f      	bgt.n	b852 <__aeabi_d2iz+0x3a>
    b832:	2480      	movs	r4, #128	; 0x80
    b834:	4d0e      	ldr	r5, [pc, #56]	; (b870 <__aeabi_d2iz+0x58>)
    b836:	0364      	lsls	r4, r4, #13
    b838:	4322      	orrs	r2, r4
    b83a:	1aed      	subs	r5, r5, r3
    b83c:	2d1f      	cmp	r5, #31
    b83e:	dd0b      	ble.n	b858 <__aeabi_d2iz+0x40>
    b840:	480c      	ldr	r0, [pc, #48]	; (b874 <__aeabi_d2iz+0x5c>)
    b842:	1ac3      	subs	r3, r0, r3
    b844:	40da      	lsrs	r2, r3
    b846:	4254      	negs	r4, r2
    b848:	2900      	cmp	r1, #0
    b84a:	d100      	bne.n	b84e <__aeabi_d2iz+0x36>
    b84c:	0014      	movs	r4, r2
    b84e:	0020      	movs	r0, r4
    b850:	bd30      	pop	{r4, r5, pc}
    b852:	4b09      	ldr	r3, [pc, #36]	; (b878 <__aeabi_d2iz+0x60>)
    b854:	18cc      	adds	r4, r1, r3
    b856:	e7fa      	b.n	b84e <__aeabi_d2iz+0x36>
    b858:	4c08      	ldr	r4, [pc, #32]	; (b87c <__aeabi_d2iz+0x64>)
    b85a:	40e8      	lsrs	r0, r5
    b85c:	46a4      	mov	ip, r4
    b85e:	4463      	add	r3, ip
    b860:	409a      	lsls	r2, r3
    b862:	4302      	orrs	r2, r0
    b864:	e7ef      	b.n	b846 <__aeabi_d2iz+0x2e>
    b866:	46c0      	nop			; (mov r8, r8)
    b868:	000003fe 	.word	0x000003fe
    b86c:	0000041d 	.word	0x0000041d
    b870:	00000433 	.word	0x00000433
    b874:	00000413 	.word	0x00000413
    b878:	7fffffff 	.word	0x7fffffff
    b87c:	fffffbed 	.word	0xfffffbed

0000b880 <__aeabi_i2d>:
    b880:	b570      	push	{r4, r5, r6, lr}
    b882:	2800      	cmp	r0, #0
    b884:	d030      	beq.n	b8e8 <__aeabi_i2d+0x68>
    b886:	17c3      	asrs	r3, r0, #31
    b888:	18c4      	adds	r4, r0, r3
    b88a:	405c      	eors	r4, r3
    b88c:	0fc5      	lsrs	r5, r0, #31
    b88e:	0020      	movs	r0, r4
    b890:	f7fd fbfe 	bl	9090 <__clzsi2>
    b894:	4b17      	ldr	r3, [pc, #92]	; (b8f4 <__aeabi_i2d+0x74>)
    b896:	4a18      	ldr	r2, [pc, #96]	; (b8f8 <__aeabi_i2d+0x78>)
    b898:	1a1b      	subs	r3, r3, r0
    b89a:	1ad2      	subs	r2, r2, r3
    b89c:	2a1f      	cmp	r2, #31
    b89e:	dd18      	ble.n	b8d2 <__aeabi_i2d+0x52>
    b8a0:	4a16      	ldr	r2, [pc, #88]	; (b8fc <__aeabi_i2d+0x7c>)
    b8a2:	1ad2      	subs	r2, r2, r3
    b8a4:	4094      	lsls	r4, r2
    b8a6:	2200      	movs	r2, #0
    b8a8:	0324      	lsls	r4, r4, #12
    b8aa:	055b      	lsls	r3, r3, #21
    b8ac:	0b24      	lsrs	r4, r4, #12
    b8ae:	0d5b      	lsrs	r3, r3, #21
    b8b0:	2100      	movs	r1, #0
    b8b2:	0010      	movs	r0, r2
    b8b4:	0324      	lsls	r4, r4, #12
    b8b6:	0d0a      	lsrs	r2, r1, #20
    b8b8:	0b24      	lsrs	r4, r4, #12
    b8ba:	0512      	lsls	r2, r2, #20
    b8bc:	4322      	orrs	r2, r4
    b8be:	4c10      	ldr	r4, [pc, #64]	; (b900 <__aeabi_i2d+0x80>)
    b8c0:	051b      	lsls	r3, r3, #20
    b8c2:	4022      	ands	r2, r4
    b8c4:	4313      	orrs	r3, r2
    b8c6:	005b      	lsls	r3, r3, #1
    b8c8:	07ed      	lsls	r5, r5, #31
    b8ca:	085b      	lsrs	r3, r3, #1
    b8cc:	432b      	orrs	r3, r5
    b8ce:	0019      	movs	r1, r3
    b8d0:	bd70      	pop	{r4, r5, r6, pc}
    b8d2:	0021      	movs	r1, r4
    b8d4:	4091      	lsls	r1, r2
    b8d6:	000a      	movs	r2, r1
    b8d8:	210b      	movs	r1, #11
    b8da:	1a08      	subs	r0, r1, r0
    b8dc:	40c4      	lsrs	r4, r0
    b8de:	055b      	lsls	r3, r3, #21
    b8e0:	0324      	lsls	r4, r4, #12
    b8e2:	0b24      	lsrs	r4, r4, #12
    b8e4:	0d5b      	lsrs	r3, r3, #21
    b8e6:	e7e3      	b.n	b8b0 <__aeabi_i2d+0x30>
    b8e8:	2500      	movs	r5, #0
    b8ea:	2300      	movs	r3, #0
    b8ec:	2400      	movs	r4, #0
    b8ee:	2200      	movs	r2, #0
    b8f0:	e7de      	b.n	b8b0 <__aeabi_i2d+0x30>
    b8f2:	46c0      	nop			; (mov r8, r8)
    b8f4:	0000041e 	.word	0x0000041e
    b8f8:	00000433 	.word	0x00000433
    b8fc:	00000413 	.word	0x00000413
    b900:	800fffff 	.word	0x800fffff

0000b904 <__aeabi_f2d>:
    b904:	0041      	lsls	r1, r0, #1
    b906:	0e09      	lsrs	r1, r1, #24
    b908:	1c4b      	adds	r3, r1, #1
    b90a:	b570      	push	{r4, r5, r6, lr}
    b90c:	b2db      	uxtb	r3, r3
    b90e:	0246      	lsls	r6, r0, #9
    b910:	0a75      	lsrs	r5, r6, #9
    b912:	0fc4      	lsrs	r4, r0, #31
    b914:	2b01      	cmp	r3, #1
    b916:	dd14      	ble.n	b942 <__aeabi_f2d+0x3e>
    b918:	23e0      	movs	r3, #224	; 0xe0
    b91a:	009b      	lsls	r3, r3, #2
    b91c:	076d      	lsls	r5, r5, #29
    b91e:	0b36      	lsrs	r6, r6, #12
    b920:	18cb      	adds	r3, r1, r3
    b922:	2100      	movs	r1, #0
    b924:	0d0a      	lsrs	r2, r1, #20
    b926:	0028      	movs	r0, r5
    b928:	0512      	lsls	r2, r2, #20
    b92a:	4d1c      	ldr	r5, [pc, #112]	; (b99c <__aeabi_f2d+0x98>)
    b92c:	4332      	orrs	r2, r6
    b92e:	055b      	lsls	r3, r3, #21
    b930:	402a      	ands	r2, r5
    b932:	085b      	lsrs	r3, r3, #1
    b934:	4313      	orrs	r3, r2
    b936:	005b      	lsls	r3, r3, #1
    b938:	07e4      	lsls	r4, r4, #31
    b93a:	085b      	lsrs	r3, r3, #1
    b93c:	4323      	orrs	r3, r4
    b93e:	0019      	movs	r1, r3
    b940:	bd70      	pop	{r4, r5, r6, pc}
    b942:	2900      	cmp	r1, #0
    b944:	d114      	bne.n	b970 <__aeabi_f2d+0x6c>
    b946:	2d00      	cmp	r5, #0
    b948:	d01e      	beq.n	b988 <__aeabi_f2d+0x84>
    b94a:	0028      	movs	r0, r5
    b94c:	f7fd fba0 	bl	9090 <__clzsi2>
    b950:	280a      	cmp	r0, #10
    b952:	dc1c      	bgt.n	b98e <__aeabi_f2d+0x8a>
    b954:	230b      	movs	r3, #11
    b956:	002a      	movs	r2, r5
    b958:	1a1b      	subs	r3, r3, r0
    b95a:	40da      	lsrs	r2, r3
    b95c:	0003      	movs	r3, r0
    b95e:	3315      	adds	r3, #21
    b960:	409d      	lsls	r5, r3
    b962:	4b0f      	ldr	r3, [pc, #60]	; (b9a0 <__aeabi_f2d+0x9c>)
    b964:	0312      	lsls	r2, r2, #12
    b966:	1a1b      	subs	r3, r3, r0
    b968:	055b      	lsls	r3, r3, #21
    b96a:	0b16      	lsrs	r6, r2, #12
    b96c:	0d5b      	lsrs	r3, r3, #21
    b96e:	e7d8      	b.n	b922 <__aeabi_f2d+0x1e>
    b970:	2d00      	cmp	r5, #0
    b972:	d006      	beq.n	b982 <__aeabi_f2d+0x7e>
    b974:	0b32      	lsrs	r2, r6, #12
    b976:	2680      	movs	r6, #128	; 0x80
    b978:	0336      	lsls	r6, r6, #12
    b97a:	076d      	lsls	r5, r5, #29
    b97c:	4316      	orrs	r6, r2
    b97e:	4b09      	ldr	r3, [pc, #36]	; (b9a4 <__aeabi_f2d+0xa0>)
    b980:	e7cf      	b.n	b922 <__aeabi_f2d+0x1e>
    b982:	4b08      	ldr	r3, [pc, #32]	; (b9a4 <__aeabi_f2d+0xa0>)
    b984:	2600      	movs	r6, #0
    b986:	e7cc      	b.n	b922 <__aeabi_f2d+0x1e>
    b988:	2300      	movs	r3, #0
    b98a:	2600      	movs	r6, #0
    b98c:	e7c9      	b.n	b922 <__aeabi_f2d+0x1e>
    b98e:	0003      	movs	r3, r0
    b990:	002a      	movs	r2, r5
    b992:	3b0b      	subs	r3, #11
    b994:	409a      	lsls	r2, r3
    b996:	2500      	movs	r5, #0
    b998:	e7e3      	b.n	b962 <__aeabi_f2d+0x5e>
    b99a:	46c0      	nop			; (mov r8, r8)
    b99c:	800fffff 	.word	0x800fffff
    b9a0:	00000389 	.word	0x00000389
    b9a4:	000007ff 	.word	0x000007ff

0000b9a8 <__aeabi_d2f>:
    b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9aa:	004c      	lsls	r4, r1, #1
    b9ac:	0d64      	lsrs	r4, r4, #21
    b9ae:	030b      	lsls	r3, r1, #12
    b9b0:	1c62      	adds	r2, r4, #1
    b9b2:	0f45      	lsrs	r5, r0, #29
    b9b4:	0a5b      	lsrs	r3, r3, #9
    b9b6:	0552      	lsls	r2, r2, #21
    b9b8:	432b      	orrs	r3, r5
    b9ba:	0fc9      	lsrs	r1, r1, #31
    b9bc:	00c5      	lsls	r5, r0, #3
    b9be:	0d52      	lsrs	r2, r2, #21
    b9c0:	2a01      	cmp	r2, #1
    b9c2:	dd28      	ble.n	ba16 <__aeabi_d2f+0x6e>
    b9c4:	4a3a      	ldr	r2, [pc, #232]	; (bab0 <__aeabi_d2f+0x108>)
    b9c6:	18a6      	adds	r6, r4, r2
    b9c8:	2efe      	cmp	r6, #254	; 0xfe
    b9ca:	dc1b      	bgt.n	ba04 <__aeabi_d2f+0x5c>
    b9cc:	2e00      	cmp	r6, #0
    b9ce:	dd3e      	ble.n	ba4e <__aeabi_d2f+0xa6>
    b9d0:	0180      	lsls	r0, r0, #6
    b9d2:	0002      	movs	r2, r0
    b9d4:	1e50      	subs	r0, r2, #1
    b9d6:	4182      	sbcs	r2, r0
    b9d8:	0f6d      	lsrs	r5, r5, #29
    b9da:	432a      	orrs	r2, r5
    b9dc:	00db      	lsls	r3, r3, #3
    b9de:	4313      	orrs	r3, r2
    b9e0:	075a      	lsls	r2, r3, #29
    b9e2:	d004      	beq.n	b9ee <__aeabi_d2f+0x46>
    b9e4:	220f      	movs	r2, #15
    b9e6:	401a      	ands	r2, r3
    b9e8:	2a04      	cmp	r2, #4
    b9ea:	d000      	beq.n	b9ee <__aeabi_d2f+0x46>
    b9ec:	3304      	adds	r3, #4
    b9ee:	2280      	movs	r2, #128	; 0x80
    b9f0:	04d2      	lsls	r2, r2, #19
    b9f2:	401a      	ands	r2, r3
    b9f4:	d05a      	beq.n	baac <__aeabi_d2f+0x104>
    b9f6:	3601      	adds	r6, #1
    b9f8:	2eff      	cmp	r6, #255	; 0xff
    b9fa:	d003      	beq.n	ba04 <__aeabi_d2f+0x5c>
    b9fc:	019b      	lsls	r3, r3, #6
    b9fe:	0a5b      	lsrs	r3, r3, #9
    ba00:	b2f4      	uxtb	r4, r6
    ba02:	e001      	b.n	ba08 <__aeabi_d2f+0x60>
    ba04:	24ff      	movs	r4, #255	; 0xff
    ba06:	2300      	movs	r3, #0
    ba08:	0258      	lsls	r0, r3, #9
    ba0a:	05e4      	lsls	r4, r4, #23
    ba0c:	0a40      	lsrs	r0, r0, #9
    ba0e:	07c9      	lsls	r1, r1, #31
    ba10:	4320      	orrs	r0, r4
    ba12:	4308      	orrs	r0, r1
    ba14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba16:	2c00      	cmp	r4, #0
    ba18:	d007      	beq.n	ba2a <__aeabi_d2f+0x82>
    ba1a:	431d      	orrs	r5, r3
    ba1c:	d0f2      	beq.n	ba04 <__aeabi_d2f+0x5c>
    ba1e:	2080      	movs	r0, #128	; 0x80
    ba20:	00db      	lsls	r3, r3, #3
    ba22:	0480      	lsls	r0, r0, #18
    ba24:	4303      	orrs	r3, r0
    ba26:	26ff      	movs	r6, #255	; 0xff
    ba28:	e7da      	b.n	b9e0 <__aeabi_d2f+0x38>
    ba2a:	432b      	orrs	r3, r5
    ba2c:	d003      	beq.n	ba36 <__aeabi_d2f+0x8e>
    ba2e:	2305      	movs	r3, #5
    ba30:	08db      	lsrs	r3, r3, #3
    ba32:	2cff      	cmp	r4, #255	; 0xff
    ba34:	d003      	beq.n	ba3e <__aeabi_d2f+0x96>
    ba36:	025b      	lsls	r3, r3, #9
    ba38:	0a5b      	lsrs	r3, r3, #9
    ba3a:	b2e4      	uxtb	r4, r4
    ba3c:	e7e4      	b.n	ba08 <__aeabi_d2f+0x60>
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d032      	beq.n	baa8 <__aeabi_d2f+0x100>
    ba42:	2080      	movs	r0, #128	; 0x80
    ba44:	03c0      	lsls	r0, r0, #15
    ba46:	4303      	orrs	r3, r0
    ba48:	025b      	lsls	r3, r3, #9
    ba4a:	0a5b      	lsrs	r3, r3, #9
    ba4c:	e7dc      	b.n	ba08 <__aeabi_d2f+0x60>
    ba4e:	0032      	movs	r2, r6
    ba50:	3217      	adds	r2, #23
    ba52:	db14      	blt.n	ba7e <__aeabi_d2f+0xd6>
    ba54:	2280      	movs	r2, #128	; 0x80
    ba56:	271e      	movs	r7, #30
    ba58:	0412      	lsls	r2, r2, #16
    ba5a:	4313      	orrs	r3, r2
    ba5c:	1bbf      	subs	r7, r7, r6
    ba5e:	2f1f      	cmp	r7, #31
    ba60:	dc0f      	bgt.n	ba82 <__aeabi_d2f+0xda>
    ba62:	4a14      	ldr	r2, [pc, #80]	; (bab4 <__aeabi_d2f+0x10c>)
    ba64:	4694      	mov	ip, r2
    ba66:	4464      	add	r4, ip
    ba68:	002a      	movs	r2, r5
    ba6a:	40a5      	lsls	r5, r4
    ba6c:	002e      	movs	r6, r5
    ba6e:	40a3      	lsls	r3, r4
    ba70:	1e75      	subs	r5, r6, #1
    ba72:	41ae      	sbcs	r6, r5
    ba74:	40fa      	lsrs	r2, r7
    ba76:	4333      	orrs	r3, r6
    ba78:	4313      	orrs	r3, r2
    ba7a:	2600      	movs	r6, #0
    ba7c:	e7b0      	b.n	b9e0 <__aeabi_d2f+0x38>
    ba7e:	2400      	movs	r4, #0
    ba80:	e7d5      	b.n	ba2e <__aeabi_d2f+0x86>
    ba82:	2202      	movs	r2, #2
    ba84:	4252      	negs	r2, r2
    ba86:	1b96      	subs	r6, r2, r6
    ba88:	001a      	movs	r2, r3
    ba8a:	40f2      	lsrs	r2, r6
    ba8c:	2f20      	cmp	r7, #32
    ba8e:	d009      	beq.n	baa4 <__aeabi_d2f+0xfc>
    ba90:	4809      	ldr	r0, [pc, #36]	; (bab8 <__aeabi_d2f+0x110>)
    ba92:	4684      	mov	ip, r0
    ba94:	4464      	add	r4, ip
    ba96:	40a3      	lsls	r3, r4
    ba98:	432b      	orrs	r3, r5
    ba9a:	1e5d      	subs	r5, r3, #1
    ba9c:	41ab      	sbcs	r3, r5
    ba9e:	2600      	movs	r6, #0
    baa0:	4313      	orrs	r3, r2
    baa2:	e79d      	b.n	b9e0 <__aeabi_d2f+0x38>
    baa4:	2300      	movs	r3, #0
    baa6:	e7f7      	b.n	ba98 <__aeabi_d2f+0xf0>
    baa8:	2300      	movs	r3, #0
    baaa:	e7ad      	b.n	ba08 <__aeabi_d2f+0x60>
    baac:	0034      	movs	r4, r6
    baae:	e7bf      	b.n	ba30 <__aeabi_d2f+0x88>
    bab0:	fffffc80 	.word	0xfffffc80
    bab4:	fffffc82 	.word	0xfffffc82
    bab8:	fffffca2 	.word	0xfffffca2

0000babc <__aeabi_cfrcmple>:
    babc:	4684      	mov	ip, r0
    babe:	1c08      	adds	r0, r1, #0
    bac0:	4661      	mov	r1, ip
    bac2:	e7ff      	b.n	bac4 <__aeabi_cfcmpeq>

0000bac4 <__aeabi_cfcmpeq>:
    bac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bac6:	f000 f899 	bl	bbfc <__lesf2>
    baca:	2800      	cmp	r0, #0
    bacc:	d401      	bmi.n	bad2 <__aeabi_cfcmpeq+0xe>
    bace:	2100      	movs	r1, #0
    bad0:	42c8      	cmn	r0, r1
    bad2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000bad4 <__aeabi_fcmpeq>:
    bad4:	b510      	push	{r4, lr}
    bad6:	f000 f82b 	bl	bb30 <__eqsf2>
    bada:	4240      	negs	r0, r0
    badc:	3001      	adds	r0, #1
    bade:	bd10      	pop	{r4, pc}

0000bae0 <__aeabi_fcmplt>:
    bae0:	b510      	push	{r4, lr}
    bae2:	f000 f88b 	bl	bbfc <__lesf2>
    bae6:	2800      	cmp	r0, #0
    bae8:	db01      	blt.n	baee <__aeabi_fcmplt+0xe>
    baea:	2000      	movs	r0, #0
    baec:	bd10      	pop	{r4, pc}
    baee:	2001      	movs	r0, #1
    baf0:	bd10      	pop	{r4, pc}
    baf2:	46c0      	nop			; (mov r8, r8)

0000baf4 <__aeabi_fcmple>:
    baf4:	b510      	push	{r4, lr}
    baf6:	f000 f881 	bl	bbfc <__lesf2>
    bafa:	2800      	cmp	r0, #0
    bafc:	dd01      	ble.n	bb02 <__aeabi_fcmple+0xe>
    bafe:	2000      	movs	r0, #0
    bb00:	bd10      	pop	{r4, pc}
    bb02:	2001      	movs	r0, #1
    bb04:	bd10      	pop	{r4, pc}
    bb06:	46c0      	nop			; (mov r8, r8)

0000bb08 <__aeabi_fcmpgt>:
    bb08:	b510      	push	{r4, lr}
    bb0a:	f000 f837 	bl	bb7c <__gesf2>
    bb0e:	2800      	cmp	r0, #0
    bb10:	dc01      	bgt.n	bb16 <__aeabi_fcmpgt+0xe>
    bb12:	2000      	movs	r0, #0
    bb14:	bd10      	pop	{r4, pc}
    bb16:	2001      	movs	r0, #1
    bb18:	bd10      	pop	{r4, pc}
    bb1a:	46c0      	nop			; (mov r8, r8)

0000bb1c <__aeabi_fcmpge>:
    bb1c:	b510      	push	{r4, lr}
    bb1e:	f000 f82d 	bl	bb7c <__gesf2>
    bb22:	2800      	cmp	r0, #0
    bb24:	da01      	bge.n	bb2a <__aeabi_fcmpge+0xe>
    bb26:	2000      	movs	r0, #0
    bb28:	bd10      	pop	{r4, pc}
    bb2a:	2001      	movs	r0, #1
    bb2c:	bd10      	pop	{r4, pc}
    bb2e:	46c0      	nop			; (mov r8, r8)

0000bb30 <__eqsf2>:
    bb30:	b570      	push	{r4, r5, r6, lr}
    bb32:	0042      	lsls	r2, r0, #1
    bb34:	0245      	lsls	r5, r0, #9
    bb36:	024e      	lsls	r6, r1, #9
    bb38:	004c      	lsls	r4, r1, #1
    bb3a:	0fc3      	lsrs	r3, r0, #31
    bb3c:	0a6d      	lsrs	r5, r5, #9
    bb3e:	0e12      	lsrs	r2, r2, #24
    bb40:	0a76      	lsrs	r6, r6, #9
    bb42:	0e24      	lsrs	r4, r4, #24
    bb44:	0fc9      	lsrs	r1, r1, #31
    bb46:	2001      	movs	r0, #1
    bb48:	2aff      	cmp	r2, #255	; 0xff
    bb4a:	d006      	beq.n	bb5a <__eqsf2+0x2a>
    bb4c:	2cff      	cmp	r4, #255	; 0xff
    bb4e:	d003      	beq.n	bb58 <__eqsf2+0x28>
    bb50:	42a2      	cmp	r2, r4
    bb52:	d101      	bne.n	bb58 <__eqsf2+0x28>
    bb54:	42b5      	cmp	r5, r6
    bb56:	d006      	beq.n	bb66 <__eqsf2+0x36>
    bb58:	bd70      	pop	{r4, r5, r6, pc}
    bb5a:	2d00      	cmp	r5, #0
    bb5c:	d1fc      	bne.n	bb58 <__eqsf2+0x28>
    bb5e:	2cff      	cmp	r4, #255	; 0xff
    bb60:	d1fa      	bne.n	bb58 <__eqsf2+0x28>
    bb62:	2e00      	cmp	r6, #0
    bb64:	d1f8      	bne.n	bb58 <__eqsf2+0x28>
    bb66:	428b      	cmp	r3, r1
    bb68:	d006      	beq.n	bb78 <__eqsf2+0x48>
    bb6a:	2001      	movs	r0, #1
    bb6c:	2a00      	cmp	r2, #0
    bb6e:	d1f3      	bne.n	bb58 <__eqsf2+0x28>
    bb70:	0028      	movs	r0, r5
    bb72:	1e45      	subs	r5, r0, #1
    bb74:	41a8      	sbcs	r0, r5
    bb76:	e7ef      	b.n	bb58 <__eqsf2+0x28>
    bb78:	2000      	movs	r0, #0
    bb7a:	e7ed      	b.n	bb58 <__eqsf2+0x28>

0000bb7c <__gesf2>:
    bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7e:	0042      	lsls	r2, r0, #1
    bb80:	0245      	lsls	r5, r0, #9
    bb82:	024c      	lsls	r4, r1, #9
    bb84:	0fc3      	lsrs	r3, r0, #31
    bb86:	0048      	lsls	r0, r1, #1
    bb88:	0a6d      	lsrs	r5, r5, #9
    bb8a:	0e12      	lsrs	r2, r2, #24
    bb8c:	0a64      	lsrs	r4, r4, #9
    bb8e:	0e00      	lsrs	r0, r0, #24
    bb90:	0fc9      	lsrs	r1, r1, #31
    bb92:	2aff      	cmp	r2, #255	; 0xff
    bb94:	d01e      	beq.n	bbd4 <__gesf2+0x58>
    bb96:	28ff      	cmp	r0, #255	; 0xff
    bb98:	d021      	beq.n	bbde <__gesf2+0x62>
    bb9a:	2a00      	cmp	r2, #0
    bb9c:	d10a      	bne.n	bbb4 <__gesf2+0x38>
    bb9e:	426e      	negs	r6, r5
    bba0:	416e      	adcs	r6, r5
    bba2:	b2f6      	uxtb	r6, r6
    bba4:	2800      	cmp	r0, #0
    bba6:	d10f      	bne.n	bbc8 <__gesf2+0x4c>
    bba8:	2c00      	cmp	r4, #0
    bbaa:	d10d      	bne.n	bbc8 <__gesf2+0x4c>
    bbac:	2000      	movs	r0, #0
    bbae:	2d00      	cmp	r5, #0
    bbb0:	d009      	beq.n	bbc6 <__gesf2+0x4a>
    bbb2:	e005      	b.n	bbc0 <__gesf2+0x44>
    bbb4:	2800      	cmp	r0, #0
    bbb6:	d101      	bne.n	bbbc <__gesf2+0x40>
    bbb8:	2c00      	cmp	r4, #0
    bbba:	d001      	beq.n	bbc0 <__gesf2+0x44>
    bbbc:	428b      	cmp	r3, r1
    bbbe:	d011      	beq.n	bbe4 <__gesf2+0x68>
    bbc0:	2101      	movs	r1, #1
    bbc2:	4258      	negs	r0, r3
    bbc4:	4308      	orrs	r0, r1
    bbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbc8:	2e00      	cmp	r6, #0
    bbca:	d0f7      	beq.n	bbbc <__gesf2+0x40>
    bbcc:	2001      	movs	r0, #1
    bbce:	3901      	subs	r1, #1
    bbd0:	4308      	orrs	r0, r1
    bbd2:	e7f8      	b.n	bbc6 <__gesf2+0x4a>
    bbd4:	2d00      	cmp	r5, #0
    bbd6:	d0de      	beq.n	bb96 <__gesf2+0x1a>
    bbd8:	2002      	movs	r0, #2
    bbda:	4240      	negs	r0, r0
    bbdc:	e7f3      	b.n	bbc6 <__gesf2+0x4a>
    bbde:	2c00      	cmp	r4, #0
    bbe0:	d0db      	beq.n	bb9a <__gesf2+0x1e>
    bbe2:	e7f9      	b.n	bbd8 <__gesf2+0x5c>
    bbe4:	4282      	cmp	r2, r0
    bbe6:	dceb      	bgt.n	bbc0 <__gesf2+0x44>
    bbe8:	db04      	blt.n	bbf4 <__gesf2+0x78>
    bbea:	42a5      	cmp	r5, r4
    bbec:	d8e8      	bhi.n	bbc0 <__gesf2+0x44>
    bbee:	2000      	movs	r0, #0
    bbf0:	42a5      	cmp	r5, r4
    bbf2:	d2e8      	bcs.n	bbc6 <__gesf2+0x4a>
    bbf4:	2101      	movs	r1, #1
    bbf6:	1e58      	subs	r0, r3, #1
    bbf8:	4308      	orrs	r0, r1
    bbfa:	e7e4      	b.n	bbc6 <__gesf2+0x4a>

0000bbfc <__lesf2>:
    bbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbfe:	0042      	lsls	r2, r0, #1
    bc00:	024d      	lsls	r5, r1, #9
    bc02:	004c      	lsls	r4, r1, #1
    bc04:	0246      	lsls	r6, r0, #9
    bc06:	0a76      	lsrs	r6, r6, #9
    bc08:	0e12      	lsrs	r2, r2, #24
    bc0a:	0fc3      	lsrs	r3, r0, #31
    bc0c:	0a6d      	lsrs	r5, r5, #9
    bc0e:	0e24      	lsrs	r4, r4, #24
    bc10:	0fc9      	lsrs	r1, r1, #31
    bc12:	2aff      	cmp	r2, #255	; 0xff
    bc14:	d016      	beq.n	bc44 <__lesf2+0x48>
    bc16:	2cff      	cmp	r4, #255	; 0xff
    bc18:	d018      	beq.n	bc4c <__lesf2+0x50>
    bc1a:	2a00      	cmp	r2, #0
    bc1c:	d10a      	bne.n	bc34 <__lesf2+0x38>
    bc1e:	4270      	negs	r0, r6
    bc20:	4170      	adcs	r0, r6
    bc22:	b2c0      	uxtb	r0, r0
    bc24:	2c00      	cmp	r4, #0
    bc26:	d015      	beq.n	bc54 <__lesf2+0x58>
    bc28:	2800      	cmp	r0, #0
    bc2a:	d005      	beq.n	bc38 <__lesf2+0x3c>
    bc2c:	2001      	movs	r0, #1
    bc2e:	3901      	subs	r1, #1
    bc30:	4308      	orrs	r0, r1
    bc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc34:	2c00      	cmp	r4, #0
    bc36:	d013      	beq.n	bc60 <__lesf2+0x64>
    bc38:	4299      	cmp	r1, r3
    bc3a:	d014      	beq.n	bc66 <__lesf2+0x6a>
    bc3c:	2001      	movs	r0, #1
    bc3e:	425b      	negs	r3, r3
    bc40:	4318      	orrs	r0, r3
    bc42:	e7f6      	b.n	bc32 <__lesf2+0x36>
    bc44:	2002      	movs	r0, #2
    bc46:	2e00      	cmp	r6, #0
    bc48:	d1f3      	bne.n	bc32 <__lesf2+0x36>
    bc4a:	e7e4      	b.n	bc16 <__lesf2+0x1a>
    bc4c:	2002      	movs	r0, #2
    bc4e:	2d00      	cmp	r5, #0
    bc50:	d1ef      	bne.n	bc32 <__lesf2+0x36>
    bc52:	e7e2      	b.n	bc1a <__lesf2+0x1e>
    bc54:	2d00      	cmp	r5, #0
    bc56:	d1e7      	bne.n	bc28 <__lesf2+0x2c>
    bc58:	2000      	movs	r0, #0
    bc5a:	2e00      	cmp	r6, #0
    bc5c:	d0e9      	beq.n	bc32 <__lesf2+0x36>
    bc5e:	e7ed      	b.n	bc3c <__lesf2+0x40>
    bc60:	2d00      	cmp	r5, #0
    bc62:	d1e9      	bne.n	bc38 <__lesf2+0x3c>
    bc64:	e7ea      	b.n	bc3c <__lesf2+0x40>
    bc66:	42a2      	cmp	r2, r4
    bc68:	dc06      	bgt.n	bc78 <__lesf2+0x7c>
    bc6a:	dbdf      	blt.n	bc2c <__lesf2+0x30>
    bc6c:	42ae      	cmp	r6, r5
    bc6e:	d803      	bhi.n	bc78 <__lesf2+0x7c>
    bc70:	2000      	movs	r0, #0
    bc72:	42ae      	cmp	r6, r5
    bc74:	d3da      	bcc.n	bc2c <__lesf2+0x30>
    bc76:	e7dc      	b.n	bc32 <__lesf2+0x36>
    bc78:	2001      	movs	r0, #1
    bc7a:	4249      	negs	r1, r1
    bc7c:	4308      	orrs	r0, r1
    bc7e:	e7d8      	b.n	bc32 <__lesf2+0x36>

0000bc80 <__libc_init_array>:
    bc80:	b570      	push	{r4, r5, r6, lr}
    bc82:	2600      	movs	r6, #0
    bc84:	4d0c      	ldr	r5, [pc, #48]	; (bcb8 <__libc_init_array+0x38>)
    bc86:	4c0d      	ldr	r4, [pc, #52]	; (bcbc <__libc_init_array+0x3c>)
    bc88:	1b64      	subs	r4, r4, r5
    bc8a:	10a4      	asrs	r4, r4, #2
    bc8c:	42a6      	cmp	r6, r4
    bc8e:	d109      	bne.n	bca4 <__libc_init_array+0x24>
    bc90:	2600      	movs	r6, #0
    bc92:	f000 fc4d 	bl	c530 <_init>
    bc96:	4d0a      	ldr	r5, [pc, #40]	; (bcc0 <__libc_init_array+0x40>)
    bc98:	4c0a      	ldr	r4, [pc, #40]	; (bcc4 <__libc_init_array+0x44>)
    bc9a:	1b64      	subs	r4, r4, r5
    bc9c:	10a4      	asrs	r4, r4, #2
    bc9e:	42a6      	cmp	r6, r4
    bca0:	d105      	bne.n	bcae <__libc_init_array+0x2e>
    bca2:	bd70      	pop	{r4, r5, r6, pc}
    bca4:	00b3      	lsls	r3, r6, #2
    bca6:	58eb      	ldr	r3, [r5, r3]
    bca8:	4798      	blx	r3
    bcaa:	3601      	adds	r6, #1
    bcac:	e7ee      	b.n	bc8c <__libc_init_array+0xc>
    bcae:	00b3      	lsls	r3, r6, #2
    bcb0:	58eb      	ldr	r3, [r5, r3]
    bcb2:	4798      	blx	r3
    bcb4:	3601      	adds	r6, #1
    bcb6:	e7f2      	b.n	bc9e <__libc_init_array+0x1e>
    bcb8:	0000c53c 	.word	0x0000c53c
    bcbc:	0000c53c 	.word	0x0000c53c
    bcc0:	0000c53c 	.word	0x0000c53c
    bcc4:	0000c540 	.word	0x0000c540

0000bcc8 <malloc>:
    bcc8:	b510      	push	{r4, lr}
    bcca:	4b03      	ldr	r3, [pc, #12]	; (bcd8 <malloc+0x10>)
    bccc:	0001      	movs	r1, r0
    bcce:	6818      	ldr	r0, [r3, #0]
    bcd0:	f000 f816 	bl	bd00 <_malloc_r>
    bcd4:	bd10      	pop	{r4, pc}
    bcd6:	46c0      	nop			; (mov r8, r8)
    bcd8:	20000124 	.word	0x20000124

0000bcdc <memcpy>:
    bcdc:	2300      	movs	r3, #0
    bcde:	b510      	push	{r4, lr}
    bce0:	429a      	cmp	r2, r3
    bce2:	d100      	bne.n	bce6 <memcpy+0xa>
    bce4:	bd10      	pop	{r4, pc}
    bce6:	5ccc      	ldrb	r4, [r1, r3]
    bce8:	54c4      	strb	r4, [r0, r3]
    bcea:	3301      	adds	r3, #1
    bcec:	e7f8      	b.n	bce0 <memcpy+0x4>

0000bcee <memset>:
    bcee:	0003      	movs	r3, r0
    bcf0:	1882      	adds	r2, r0, r2
    bcf2:	4293      	cmp	r3, r2
    bcf4:	d100      	bne.n	bcf8 <memset+0xa>
    bcf6:	4770      	bx	lr
    bcf8:	7019      	strb	r1, [r3, #0]
    bcfa:	3301      	adds	r3, #1
    bcfc:	e7f9      	b.n	bcf2 <memset+0x4>
	...

0000bd00 <_malloc_r>:
    bd00:	2303      	movs	r3, #3
    bd02:	b570      	push	{r4, r5, r6, lr}
    bd04:	1ccd      	adds	r5, r1, #3
    bd06:	439d      	bics	r5, r3
    bd08:	3508      	adds	r5, #8
    bd0a:	0006      	movs	r6, r0
    bd0c:	2d0c      	cmp	r5, #12
    bd0e:	d21e      	bcs.n	bd4e <_malloc_r+0x4e>
    bd10:	250c      	movs	r5, #12
    bd12:	42a9      	cmp	r1, r5
    bd14:	d81d      	bhi.n	bd52 <_malloc_r+0x52>
    bd16:	0030      	movs	r0, r6
    bd18:	f000 f862 	bl	bde0 <__malloc_lock>
    bd1c:	4a25      	ldr	r2, [pc, #148]	; (bdb4 <_malloc_r+0xb4>)
    bd1e:	6814      	ldr	r4, [r2, #0]
    bd20:	0021      	movs	r1, r4
    bd22:	2900      	cmp	r1, #0
    bd24:	d119      	bne.n	bd5a <_malloc_r+0x5a>
    bd26:	4c24      	ldr	r4, [pc, #144]	; (bdb8 <_malloc_r+0xb8>)
    bd28:	6823      	ldr	r3, [r4, #0]
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d103      	bne.n	bd36 <_malloc_r+0x36>
    bd2e:	0030      	movs	r0, r6
    bd30:	f000 f844 	bl	bdbc <_sbrk_r>
    bd34:	6020      	str	r0, [r4, #0]
    bd36:	0029      	movs	r1, r5
    bd38:	0030      	movs	r0, r6
    bd3a:	f000 f83f 	bl	bdbc <_sbrk_r>
    bd3e:	1c43      	adds	r3, r0, #1
    bd40:	d12c      	bne.n	bd9c <_malloc_r+0x9c>
    bd42:	230c      	movs	r3, #12
    bd44:	0030      	movs	r0, r6
    bd46:	6033      	str	r3, [r6, #0]
    bd48:	f000 f84b 	bl	bde2 <__malloc_unlock>
    bd4c:	e003      	b.n	bd56 <_malloc_r+0x56>
    bd4e:	2d00      	cmp	r5, #0
    bd50:	dadf      	bge.n	bd12 <_malloc_r+0x12>
    bd52:	230c      	movs	r3, #12
    bd54:	6033      	str	r3, [r6, #0]
    bd56:	2000      	movs	r0, #0
    bd58:	bd70      	pop	{r4, r5, r6, pc}
    bd5a:	680b      	ldr	r3, [r1, #0]
    bd5c:	1b5b      	subs	r3, r3, r5
    bd5e:	d41a      	bmi.n	bd96 <_malloc_r+0x96>
    bd60:	2b0b      	cmp	r3, #11
    bd62:	d903      	bls.n	bd6c <_malloc_r+0x6c>
    bd64:	600b      	str	r3, [r1, #0]
    bd66:	18cc      	adds	r4, r1, r3
    bd68:	6025      	str	r5, [r4, #0]
    bd6a:	e003      	b.n	bd74 <_malloc_r+0x74>
    bd6c:	428c      	cmp	r4, r1
    bd6e:	d10e      	bne.n	bd8e <_malloc_r+0x8e>
    bd70:	6863      	ldr	r3, [r4, #4]
    bd72:	6013      	str	r3, [r2, #0]
    bd74:	0030      	movs	r0, r6
    bd76:	f000 f834 	bl	bde2 <__malloc_unlock>
    bd7a:	0020      	movs	r0, r4
    bd7c:	2207      	movs	r2, #7
    bd7e:	300b      	adds	r0, #11
    bd80:	1d23      	adds	r3, r4, #4
    bd82:	4390      	bics	r0, r2
    bd84:	1ac3      	subs	r3, r0, r3
    bd86:	d0e7      	beq.n	bd58 <_malloc_r+0x58>
    bd88:	425a      	negs	r2, r3
    bd8a:	50e2      	str	r2, [r4, r3]
    bd8c:	e7e4      	b.n	bd58 <_malloc_r+0x58>
    bd8e:	684b      	ldr	r3, [r1, #4]
    bd90:	6063      	str	r3, [r4, #4]
    bd92:	000c      	movs	r4, r1
    bd94:	e7ee      	b.n	bd74 <_malloc_r+0x74>
    bd96:	000c      	movs	r4, r1
    bd98:	6849      	ldr	r1, [r1, #4]
    bd9a:	e7c2      	b.n	bd22 <_malloc_r+0x22>
    bd9c:	2303      	movs	r3, #3
    bd9e:	1cc4      	adds	r4, r0, #3
    bda0:	439c      	bics	r4, r3
    bda2:	42a0      	cmp	r0, r4
    bda4:	d0e0      	beq.n	bd68 <_malloc_r+0x68>
    bda6:	1a21      	subs	r1, r4, r0
    bda8:	0030      	movs	r0, r6
    bdaa:	f000 f807 	bl	bdbc <_sbrk_r>
    bdae:	1c43      	adds	r3, r0, #1
    bdb0:	d1da      	bne.n	bd68 <_malloc_r+0x68>
    bdb2:	e7c6      	b.n	bd42 <_malloc_r+0x42>
    bdb4:	200003e8 	.word	0x200003e8
    bdb8:	200003ec 	.word	0x200003ec

0000bdbc <_sbrk_r>:
    bdbc:	2300      	movs	r3, #0
    bdbe:	b570      	push	{r4, r5, r6, lr}
    bdc0:	4c06      	ldr	r4, [pc, #24]	; (bddc <_sbrk_r+0x20>)
    bdc2:	0005      	movs	r5, r0
    bdc4:	0008      	movs	r0, r1
    bdc6:	6023      	str	r3, [r4, #0]
    bdc8:	f7fa ff28 	bl	6c1c <_sbrk>
    bdcc:	1c43      	adds	r3, r0, #1
    bdce:	d103      	bne.n	bdd8 <_sbrk_r+0x1c>
    bdd0:	6823      	ldr	r3, [r4, #0]
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d000      	beq.n	bdd8 <_sbrk_r+0x1c>
    bdd6:	602b      	str	r3, [r5, #0]
    bdd8:	bd70      	pop	{r4, r5, r6, pc}
    bdda:	46c0      	nop			; (mov r8, r8)
    bddc:	20000ae0 	.word	0x20000ae0

0000bde0 <__malloc_lock>:
    bde0:	4770      	bx	lr

0000bde2 <__malloc_unlock>:
    bde2:	4770      	bx	lr

0000bde4 <tc_interrupt_vectors.13546>:
    bde4:	1312 0014                                   ....

0000bde8 <tc_interrupt_vectors.13546>:
    bde8:	1312 0014 004c 0004 05a8 2000 0000 0000     ....L...... ....
    bdf8:	23c4 0000 23a4 0000 2332 0000 2332 0000     .#...#..2#..2#..
    be08:	2332 0000 2420 0000 2332 0000 2332 0000     2#.. $..2#..2#..
    be18:	2410 0000 2332 0000 2332 0000 2342 0000     .$..2#..2#..B#..
    be28:	2380 0000 2332 0000 2318 0000 2332 0000     .#..2#...#..2#..
    be38:	2332 0000 2332 0000 2332 0000 2354 0000     2#..2#..2#..T#..
    be48:	242c 0000 2332 0000 2332 0000 2332 0000     ,$..2#..2#..2#..
    be58:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    be68:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    be78:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    be88:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    be98:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    bea8:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    beb8:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    bec8:	2332 0000 2332 0000 2332 0000 2332 0000     2#..2#..2#..2#..
    bed8:	2332 0000 243c 0000 307a 0000 32c0 0000     2#..<$..z0...2..
    bee8:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bef8:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf08:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf18:	32c0 0000 32c0 0000 3062 0000 32c0 0000     .2...2..b0...2..
    bf28:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf38:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf48:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf58:	32c0 0000 32c0 0000 3072 0000 32c0 0000     .2...2..r0...2..
    bf68:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf78:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf88:	32c0 0000 32c0 0000 32c0 0000 32c0 0000     .2...2...2...2..
    bf98:	32c0 0000 32c0 0000 306a 0000 3082 0000     .2...2..j0...0..
    bfa8:	304a 0000 305a 0000 3052 0000 0002 0000     J0..Z0..R0......
    bfb8:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    bfc8:	0005 0000 0006 0000 0007 0000 ffff 0000     ................
    bfd8:	ffff 0000 0022 0000 0023 0000 ffff 0000     ...."...#.......
    bfe8:	ffff 0000 ffff 0000 ffff 0000 0008 0000     ................
    bff8:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    c008:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    c018:	1c00 4200 42aa 0000 42a6 0000 42a6 0000     ...B.B...B...B..
    c028:	42fe 0000 42fe 0000 42be 0000 42b0 0000     .B...B...B...B..
    c038:	42c4 0000 42ec 0000                         .B...B..

0000c040 <_tcc_apbcmasks>:
    c040:	0100 0000 0200 0000 0400 0000               ............

0000c04c <_tcc_cc_nums>:
    c04c:	0204 0002                                   ....

0000c050 <_tcc_gclk_ids>:
    c050:	1a1a 001b                                   ....

0000c054 <_tcc_maxs>:
    c054:	ffff 00ff ffff 00ff ffff 0000               ............

0000c060 <_tcc_ow_nums>:
    c060:	0408 0002                                   ....

0000c064 <_tcc_intflag>:
    c064:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    c074:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    c084:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    c094:	2c00 4200 3000 4200 3400 4200 5f44 0000     .,.B.0.B.4.BD_..
    c0a4:	5f52 0000 5fec 0000 608c 0000 60f0 0000     R_..._...`...`..

0000c0b4 <_usb_device_irq_bits>:
    c0b4:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

0000c0c4 <_usb_endpoint_irq_bits>:
    c0c4:	0c03 6010 7526 0000 761a 0000 77b0 0000     ...`&u...v...w..
    c0d4:	77b0 0000 7786 0000 759a 0000 77b0 0000     .w...w...u...w..
    c0e4:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c0f4:	757a 0000 74da 0000 77b0 0000 749c 0000     zu...t...w...t..
    c104:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c114:	77b0 0000 75b4 0000 77b0 0000 77b0 0000     .w...u...w...w..
    c124:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c134:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c144:	77b0 0000 77b0 0000 745c 0000 77b0 0000     .w...w..\t...w..
    c154:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c164:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c174:	77b0 0000 77b0 0000 77b0 0000 77b0 0000     .w...w...w...w..
    c184:	77b0 0000 77b0 0000 77b0 0000 7658 0000     .w...w...w..Xv..
    c194:	77b0 0000 7104 0000 7270 0000 7686 0000     .w...q..pr...v..
    c1a4:	76a6 0000 76fa 0000 7714 0000 7734 0000     .v...v...w..4w..
    c1b4:	775e 0000                                   ^w..

0000c1b8 <npio2_hw>:
    c1b8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
    c1c8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
    c1d8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
    c1e8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
    c1f8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
    c208:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
    c218:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
    c228:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

0000c238 <two_over_pi>:
    c238:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
    c248:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
    c258:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
    c268:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
    c278:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
    c288:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
    c298:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
    c2a8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
    c2b8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
    c2c8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
    c2d8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
    c2e8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
    c2f8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
    c308:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
    c318:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
    c328:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
    c338:	e27b 0060 8c6b 00c0                         {.`.k...

0000c340 <PIo2>:
    c340:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
    c350:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
    c360:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
    c370:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

0000c380 <init_jk>:
    c380:	0002 0000 0003 0000 0004 0000 0006 0000     ................
    c390:	967c 0000 964c 0000 965e 0000 95a0 0000     |...L...^.......
    c3a0:	965e 0000 9642 0000 965e 0000 95a0 0000     ^...B...^.......
    c3b0:	964c 0000 964c 0000 9642 0000 95a0 0000     L...L...B.......
    c3c0:	95a8 0000 95a8 0000 95a8 0000 9664 0000     ............d...
    c3d0:	964c 0000 964c 0000 9620 0000 9704 0000     L...L... .......
    c3e0:	9620 0000 9642 0000 9620 0000 9704 0000      ...B... .......
    c3f0:	964c 0000 964c 0000 9642 0000 9704 0000     L...L...B.......
    c400:	95a8 0000 95a8 0000 95a8 0000 970e 0000     ................
    c410:	98ac 0000 97fc 0000 97fc 0000 97fa 0000     ................
    c420:	989e 0000 989e 0000 9894 0000 97fa 0000     ................
    c430:	989e 0000 9894 0000 989e 0000 97fa 0000     ................
    c440:	98a4 0000 98a4 0000 98a4 0000 9934 0000     ............4...
    c450:	a67c 0000 a65e 0000 a618 0000 a536 0000     |...^.......6...
    c460:	a618 0000 a650 0000 a618 0000 a536 0000     ....P.......6...
    c470:	a65e 0000 a65e 0000 a650 0000 a536 0000     ^...^...P...6...
    c480:	a52e 0000 a52e 0000 a52e 0000 a894 0000     ................
    c490:	aedc 0000 ad9c 0000 ad9c 0000 ad98 0000     ................
    c4a0:	aeb4 0000 aeb4 0000 aea6 0000 ad98 0000     ................
    c4b0:	aeb4 0000 aea6 0000 aeb4 0000 ad98 0000     ................
    c4c0:	aebc 0000 aebc 0000 aebc 0000 b0c0 0000     ................

0000c4d0 <__sf_fake_stderr>:
	...

0000c4f0 <__sf_fake_stdin>:
	...

0000c510 <__sf_fake_stdout>:
	...

0000c530 <_init>:
    c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c532:	46c0      	nop			; (mov r8, r8)
    c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c536:	bc08      	pop	{r3}
    c538:	469e      	mov	lr, r3
    c53a:	4770      	bx	lr

0000c53c <__init_array_start>:
    c53c:	000000dd 	.word	0x000000dd

0000c540 <_fini>:
    c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c542:	46c0      	nop			; (mov r8, r8)
    c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c546:	bc08      	pop	{r3}
    c548:	469e      	mov	lr, r3
    c54a:	4770      	bx	lr

0000c54c <__fini_array_start>:
    c54c:	000000b5 	.word	0x000000b5
