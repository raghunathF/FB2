
USB_HID_START_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007b10  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000010c  20000000  00007b10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000059c  2000010c  00007c1c  0001010c  2**2
                  ALLOC
  3 .stack        00002000  200006a8  000081b8  0001010c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010134  2**0
                  CONTENTS, READONLY
  6 .debug_info   000510a5  00000000  00000000  0001018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006642  00000000  00000000  00061234  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000ce0  00000000  00000000  00067876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000ca0  00000000  00000000  00068556  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000303b9  00000000  00000000  000691f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001c270  00000000  00000000  000995af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0009cd00  00000000  00000000  000b581f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022b0  00000000  00000000  00152520  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b9be  00000000  00000000  001547d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200026a8 	.word	0x200026a8
       4:	00004fa9 	.word	0x00004fa9
       8:	00004fa5 	.word	0x00004fa5
       c:	00004fa5 	.word	0x00004fa5
	...
      2c:	00004fa5 	.word	0x00004fa5
	...
      38:	00004fa5 	.word	0x00004fa5
      3c:	00004fa5 	.word	0x00004fa5
      40:	00004fa5 	.word	0x00004fa5
      44:	00004fa5 	.word	0x00004fa5
      48:	00004fa5 	.word	0x00004fa5
      4c:	00004fa5 	.word	0x00004fa5
      50:	00001af1 	.word	0x00001af1
      54:	00004fa5 	.word	0x00004fa5
      58:	00004fa5 	.word	0x00004fa5
      5c:	000047fd 	.word	0x000047fd
      60:	00004fa5 	.word	0x00004fa5
      64:	000026d5 	.word	0x000026d5
      68:	000026e5 	.word	0x000026e5
      6c:	000026f5 	.word	0x000026f5
      70:	00002705 	.word	0x00002705
      74:	00002715 	.word	0x00002715
      78:	00002725 	.word	0x00002725
      7c:	00003091 	.word	0x00003091
      80:	000030a1 	.word	0x000030a1
      84:	000030b1 	.word	0x000030b1
      88:	00003151 	.word	0x00003151
      8c:	00003161 	.word	0x00003161
      90:	00003171 	.word	0x00003171
	...
      9c:	00004fa5 	.word	0x00004fa5
      a0:	00004fa5 	.word	0x00004fa5
      a4:	00004fa5 	.word	0x00004fa5
      a8:	00004fa5 	.word	0x00004fa5
      ac:	00004fa5 	.word	0x00004fa5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000010c 	.word	0x2000010c
      d4:	00000000 	.word	0x00000000
      d8:	00007b10 	.word	0x00007b10

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00007b10 	.word	0x00007b10
     108:	20000110 	.word	0x20000110
     10c:	00007b10 	.word	0x00007b10
     110:	00000000 	.word	0x00000000

00000114 <board_init>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void board_init(void)
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     114:	4940      	ldr	r1, [pc, #256]	; (218 <board_init+0x104>)
     116:	684b      	ldr	r3, [r1, #4]
     118:	221e      	movs	r2, #30
     11a:	4393      	bics	r3, r2
     11c:	3a1c      	subs	r2, #28
     11e:	4313      	orrs	r3, r2
     120:	604b      	str	r3, [r1, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     122:	4a3e      	ldr	r2, [pc, #248]	; (21c <board_init+0x108>)
     124:	6991      	ldr	r1, [r2, #24]
     126:	2308      	movs	r3, #8
     128:	430b      	orrs	r3, r1
     12a:	6193      	str	r3, [r2, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     12c:	4b3c      	ldr	r3, [pc, #240]	; (220 <board_init+0x10c>)
     12e:	4a3d      	ldr	r2, [pc, #244]	; (224 <board_init+0x110>)
     130:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K;
  SYSCTRL->XOSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     132:	8a99      	ldrh	r1, [r3, #20]
     134:	2202      	movs	r2, #2
     136:	430a      	orrs	r2, r1
     138:	829a      	strh	r2, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     13a:	1c19      	adds	r1, r3, #0
     13c:	2202      	movs	r2, #2
     13e:	68cb      	ldr	r3, [r1, #12]
     140:	421a      	tst	r2, r3
     142:	d0fc      	beq.n	13e <board_init+0x2a>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     144:	2201      	movs	r2, #1
     146:	4b38      	ldr	r3, [pc, #224]	; (228 <board_init+0x114>)
     148:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     14a:	1c1a      	adds	r2, r3, #0
     14c:	2101      	movs	r1, #1
     14e:	7813      	ldrb	r3, [r2, #0]
     150:	420b      	tst	r3, r1
     152:	d003      	beq.n	15c <board_init+0x48>
     154:	7853      	ldrb	r3, [r2, #1]
     156:	b25b      	sxtb	r3, r3
     158:	2b00      	cmp	r3, #0
     15a:	dbf8      	blt.n	14e <board_init+0x3a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ); // Generic Clock Generator 1
     15c:	2201      	movs	r2, #1
     15e:	4b32      	ldr	r3, [pc, #200]	; (228 <board_init+0x114>)
     160:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     162:	1c1a      	adds	r2, r3, #0
     164:	7853      	ldrb	r3, [r2, #1]
     166:	b25b      	sxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	dbfb      	blt.n	164 <board_init+0x50>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
     16c:	4a2f      	ldr	r2, [pc, #188]	; (22c <board_init+0x118>)
     16e:	4b2e      	ldr	r3, [pc, #184]	; (228 <board_init+0x114>)
     170:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     172:	1c1a      	adds	r2, r3, #0
     174:	7853      	ldrb	r3, [r2, #1]
     176:	b25b      	sxtb	r3, r3
     178:	2b00      	cmp	r3, #0
     17a:	dbfb      	blt.n	174 <board_init+0x60>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     17c:	2282      	movs	r2, #130	; 0x82
     17e:	01d2      	lsls	r2, r2, #7
     180:	4b29      	ldr	r3, [pc, #164]	; (228 <board_init+0x114>)
     182:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     184:	1c1a      	adds	r2, r3, #0
     186:	7853      	ldrb	r3, [r2, #1]
     188:	b25b      	sxtb	r3, r3
     18a:	2b00      	cmp	r3, #0
     18c:	dbfb      	blt.n	186 <board_init+0x72>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
     18e:	4a24      	ldr	r2, [pc, #144]	; (220 <board_init+0x10c>)
     190:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     192:	2180      	movs	r1, #128	; 0x80
     194:	438b      	bics	r3, r1
     196:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     198:	1c11      	adds	r1, r2, #0
     19a:	2210      	movs	r2, #16
     19c:	68cb      	ldr	r3, [r1, #12]
     19e:	421a      	tst	r2, r3
     1a0:	d0fc      	beq.n	19c <board_init+0x88>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     1a2:	4a23      	ldr	r2, [pc, #140]	; (230 <board_init+0x11c>)
     1a4:	4b1e      	ldr	r3, [pc, #120]	; (220 <board_init+0x10c>)
     1a6:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ); // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1a8:	1c19      	adds	r1, r3, #0
     1aa:	2210      	movs	r2, #16
     1ac:	68cb      	ldr	r3, [r1, #12]
     1ae:	421a      	tst	r2, r3
     1b0:	d0fc      	beq.n	1ac <board_init+0x98>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     1b2:	4a1b      	ldr	r2, [pc, #108]	; (220 <board_init+0x10c>)
     1b4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
     1b6:	4b1f      	ldr	r3, [pc, #124]	; (234 <board_init+0x120>)
     1b8:	430b      	orrs	r3, r1
     1ba:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1bc:	1c11      	adds	r1, r2, #0
     1be:	2210      	movs	r2, #16
     1c0:	68cb      	ldr	r3, [r1, #12]
     1c2:	421a      	tst	r2, r3
     1c4:	d0fc      	beq.n	1c0 <board_init+0xac>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE;
     1c6:	4a16      	ldr	r2, [pc, #88]	; (220 <board_init+0x10c>)
     1c8:	8c91      	ldrh	r1, [r2, #36]	; 0x24
     1ca:	2302      	movs	r3, #2
     1cc:	430b      	orrs	r3, r1
     1ce:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     1d0:	2180      	movs	r1, #128	; 0x80
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     1d2:	2040      	movs	r0, #64	; 0x40
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     1d4:	68d3      	ldr	r3, [r2, #12]
     1d6:	4219      	tst	r1, r3
     1d8:	d0fc      	beq.n	1d4 <board_init+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     1da:	68d3      	ldr	r3, [r2, #12]
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE;

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     1dc:	4218      	tst	r0, r3
     1de:	d0f9      	beq.n	1d4 <board_init+0xc0>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     1e0:	490f      	ldr	r1, [pc, #60]	; (220 <board_init+0x10c>)
     1e2:	2210      	movs	r2, #16
     1e4:	68cb      	ldr	r3, [r1, #12]
     1e6:	421a      	tst	r2, r3
     1e8:	d0fc      	beq.n	1e4 <board_init+0xd0>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ); // Generic Clock Generator 0
     1ea:	2200      	movs	r2, #0
     1ec:	4b0e      	ldr	r3, [pc, #56]	; (228 <board_init+0x114>)
     1ee:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     1f0:	1c1a      	adds	r2, r3, #0
     1f2:	7853      	ldrb	r3, [r2, #1]
     1f4:	b25b      	sxtb	r3, r3
     1f6:	2b00      	cmp	r3, #0
     1f8:	dbfb      	blt.n	1f2 <board_init+0xde>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     1fa:	4a0f      	ldr	r2, [pc, #60]	; (238 <board_init+0x124>)
     1fc:	4b0a      	ldr	r3, [pc, #40]	; (228 <board_init+0x114>)
     1fe:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     200:	1c1a      	adds	r2, r3, #0
     202:	7853      	ldrb	r3, [r2, #1]
     204:	b25b      	sxtb	r3, r3
     206:	2b00      	cmp	r3, #0
     208:	dbfb      	blt.n	202 <board_init+0xee>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * These values are normally the ones present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1;
     20a:	4b04      	ldr	r3, [pc, #16]	; (21c <board_init+0x108>)
     20c:	2200      	movs	r2, #0
     20e:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val;
     210:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val;
     212:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val;
     214:	72da      	strb	r2, [r3, #11]
}
     216:	4770      	bx	lr
     218:	41004000 	.word	0x41004000
     21c:	40000400 	.word	0x40000400
     220:	40000800 	.word	0x40000800
     224:	0000060c 	.word	0x0000060c
     228:	40000c00 	.word	0x40000c00
     22c:	00010501 	.word	0x00010501
     230:	7dff05b8 	.word	0x7dff05b8
     234:	00000a04 	.word	0x00000a04
     238:	00030700 	.word	0x00030700

0000023c <echo_detection_callback>:
	EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(ECHO_EIC_LINE,
	EXTINT_CALLBACK_TYPE_DETECT);
}
void echo_detection_callback(void)
{
     23c:	b508      	push	{r3, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     23e:	4b0a      	ldr	r3, [pc, #40]	; (268 <echo_detection_callback+0x2c>)
     240:	6a1b      	ldr	r3, [r3, #32]
	bool pin_state = port_pin_get_input_level(ECHO_PIN);
	if(pin_state)
     242:	041b      	lsls	r3, r3, #16
     244:	d506      	bpl.n	254 <echo_detection_callback+0x18>
	{
		rising_edge = tc_get_count_value(&tc_instance);
     246:	4809      	ldr	r0, [pc, #36]	; (26c <echo_detection_callback+0x30>)
     248:	4b09      	ldr	r3, [pc, #36]	; (270 <echo_detection_callback+0x34>)
     24a:	4798      	blx	r3
     24c:	b280      	uxth	r0, r0
     24e:	4b09      	ldr	r3, [pc, #36]	; (274 <echo_detection_callback+0x38>)
     250:	8018      	strh	r0, [r3, #0]
     252:	e008      	b.n	266 <echo_detection_callback+0x2a>
	}
	else
	{
		pulse_width = tc_get_count_value(&tc_instance) - rising_edge;
     254:	4805      	ldr	r0, [pc, #20]	; (26c <echo_detection_callback+0x30>)
     256:	4b06      	ldr	r3, [pc, #24]	; (270 <echo_detection_callback+0x34>)
     258:	4798      	blx	r3
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <echo_detection_callback+0x38>)
     25c:	881b      	ldrh	r3, [r3, #0]
     25e:	1ac0      	subs	r0, r0, r3
     260:	b280      	uxth	r0, r0
     262:	4b05      	ldr	r3, [pc, #20]	; (278 <echo_detection_callback+0x3c>)
     264:	8018      	strh	r0, [r3, #0]
	}
}
     266:	bd08      	pop	{r3, pc}
     268:	41004400 	.word	0x41004400
     26c:	20000224 	.word	0x20000224
     270:	00003469 	.word	0x00003469
     274:	20000222 	.word	0x20000222
     278:	20000220 	.word	0x20000220

0000027c <tc_callback_trig>:

void tc_callback_trig(
struct tc_module *const module_inst)
{
     27c:	b538      	push	{r3, r4, r5, lr}
	tc_set_count_value(&tc_instance, 18661);
     27e:	4806      	ldr	r0, [pc, #24]	; (298 <tc_callback_trig+0x1c>)
     280:	4906      	ldr	r1, [pc, #24]	; (29c <tc_callback_trig+0x20>)
     282:	4b07      	ldr	r3, [pc, #28]	; (2a0 <tc_callback_trig+0x24>)
     284:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     286:	4c07      	ldr	r4, [pc, #28]	; (2a4 <tc_callback_trig+0x28>)
     288:	2508      	movs	r5, #8
     28a:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(TRIG_PIN, true);
	delay_ms(80); //this should actually be a 10 us delay because delay function is mysteriously misconfigured
     28c:	2050      	movs	r0, #80	; 0x50
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <tc_callback_trig+0x2c>)
     290:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     292:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(TRIG_PIN, false);
}
     294:	bd38      	pop	{r3, r4, r5, pc}
     296:	46c0      	nop			; (mov r8, r8)
     298:	20000224 	.word	0x20000224
     29c:	000048e5 	.word	0x000048e5
     2a0:	00003431 	.word	0x00003431
     2a4:	41004400 	.word	0x41004400
     2a8:	000005e9 	.word	0x000005e9

000002ac <configure_echo_channel>:
	configure_extint_callbacks();
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
}

void configure_echo_channel(void)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
     2b0:	ac01      	add	r4, sp, #4
     2b2:	1c20      	adds	r0, r4, #0
     2b4:	4b08      	ldr	r3, [pc, #32]	; (2d8 <configure_echo_channel+0x2c>)
     2b6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = ECHO_PIN_EIC;
     2b8:	230f      	movs	r3, #15
     2ba:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = ECHO_PIN_MUX;
     2bc:	23f0      	movs	r3, #240	; 0xf0
     2be:	031b      	lsls	r3, r3, #12
     2c0:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
     2c2:	2302      	movs	r3, #2
     2c4:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     2c6:	3301      	adds	r3, #1
     2c8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(ECHO_EIC_LINE, &config_extint_chan);
     2ca:	200f      	movs	r0, #15
     2cc:	1c21      	adds	r1, r4, #0
     2ce:	4b03      	ldr	r3, [pc, #12]	; (2dc <configure_echo_channel+0x30>)
     2d0:	4798      	blx	r3
}
     2d2:	b004      	add	sp, #16
     2d4:	bd10      	pop	{r4, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	00001bdd 	.word	0x00001bdd
     2dc:	00001bf1 	.word	0x00001bf1

000002e0 <configure_extint_callbacks>:

void configure_extint_callbacks(void)
{
     2e0:	b508      	push	{r3, lr}
	extint_register_callback(echo_detection_callback,
     2e2:	4805      	ldr	r0, [pc, #20]	; (2f8 <configure_extint_callbacks+0x18>)
     2e4:	210f      	movs	r1, #15
     2e6:	2200      	movs	r2, #0
     2e8:	4b04      	ldr	r3, [pc, #16]	; (2fc <configure_extint_callbacks+0x1c>)
     2ea:	4798      	blx	r3
	ECHO_EIC_LINE,
	EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(ECHO_EIC_LINE,
     2ec:	200f      	movs	r0, #15
     2ee:	2100      	movs	r1, #0
     2f0:	4b03      	ldr	r3, [pc, #12]	; (300 <configure_extint_callbacks+0x20>)
     2f2:	4798      	blx	r3
	EXTINT_CALLBACK_TYPE_DETECT);
}
     2f4:	bd08      	pop	{r3, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	0000023d 	.word	0x0000023d
     2fc:	00001aa5 	.word	0x00001aa5
     300:	00001ad1 	.word	0x00001ad1

00000304 <configure_tc3>:

#include <asf.h>
#include "ultrasound.h"

void configure_tc3(void)
{
     304:	b5f0      	push	{r4, r5, r6, r7, lr}
     306:	b08f      	sub	sp, #60	; 0x3c
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     308:	ae0d      	add	r6, sp, #52	; 0x34
     30a:	2301      	movs	r3, #1
     30c:	7073      	strb	r3, [r6, #1]
	config->powersave  = false;
     30e:	2400      	movs	r4, #0
     310:	2500      	movs	r5, #0
     312:	70b4      	strb	r4, [r6, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	// Set trigger pin to output, echo pin to input
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     314:	7033      	strb	r3, [r6, #0]
	port_pin_set_config(TRIG_PIN, &config_port_pin);
     316:	2003      	movs	r0, #3
     318:	1c31      	adds	r1, r6, #0
     31a:	4f29      	ldr	r7, [pc, #164]	; (3c0 <configure_tc3+0xbc>)
     31c:	47b8      	blx	r7
	
	port_pin_set_config(PIN_PB03, &config_port_pin);
     31e:	2023      	movs	r0, #35	; 0x23
     320:	1c31      	adds	r1, r6, #0
     322:	47b8      	blx	r7

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     324:	2208      	movs	r2, #8
     326:	4b27      	ldr	r3, [pc, #156]	; (3c4 <configure_tc3+0xc0>)
     328:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(TRIG_PIN, false);
	
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
     32a:	7034      	strb	r4, [r6, #0]
	port_pin_set_config(ECHO_PIN, &config_port_pin);
     32c:	200f      	movs	r0, #15
     32e:	1c31      	adds	r1, r6, #0
     330:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     332:	466b      	mov	r3, sp
     334:	701c      	strb	r4, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     336:	709c      	strb	r4, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     338:	719c      	strb	r4, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     33a:	811c      	strh	r4, [r3, #8]
	config->run_in_standby             = false;
     33c:	2300      	movs	r3, #0
     33e:	466a      	mov	r2, sp
     340:	7053      	strb	r3, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     342:	7295      	strb	r5, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     344:	72d5      	strb	r5, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     346:	7315      	strb	r5, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     348:	7395      	strb	r5, [r2, #14]
	config->oneshot                    = false;
     34a:	7355      	strb	r5, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     34c:	7415      	strb	r5, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     34e:	9405      	str	r4, [sp, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     350:	9406      	str	r4, [sp, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     352:	7715      	strb	r5, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     354:	9408      	str	r4, [sp, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     356:	9409      	str	r4, [sp, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     358:	8554      	strh	r4, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     35a:	8594      	strh	r4, [r2, #44]	; 0x2c
	
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_16BIT; //16
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64; //64
     35c:	23a0      	movs	r3, #160	; 0xa0
     35e:	00db      	lsls	r3, r3, #3
     360:	8093      	strh	r3, [r2, #4]
	config_tc.counter_16_bit.value = 18661; // Overflows in 62.5ms
     362:	4b19      	ldr	r3, [pc, #100]	; (3c8 <configure_tc3+0xc4>)
     364:	8513      	strh	r3, [r2, #40]	; 0x28
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;

	tc_init(&tc_instance, TC3, &config_tc);
     366:	4c19      	ldr	r4, [pc, #100]	; (3cc <configure_tc3+0xc8>)
     368:	1c20      	adds	r0, r4, #0
     36a:	4919      	ldr	r1, [pc, #100]	; (3d0 <configure_tc3+0xcc>)
     36c:	4b19      	ldr	r3, [pc, #100]	; (3d4 <configure_tc3+0xd0>)
     36e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     370:	6822      	ldr	r2, [r4, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     372:	217f      	movs	r1, #127	; 0x7f
     374:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     376:	438b      	bics	r3, r1
     378:	d1fc      	bne.n	374 <configure_tc3+0x70>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     37a:	8811      	ldrh	r1, [r2, #0]
     37c:	3302      	adds	r3, #2
     37e:	430b      	orrs	r3, r1
     380:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance);
	tc_register_callback(&tc_instance, tc_callback_trig,
     382:	4c12      	ldr	r4, [pc, #72]	; (3cc <configure_tc3+0xc8>)
     384:	1c20      	adds	r0, r4, #0
     386:	4914      	ldr	r1, [pc, #80]	; (3d8 <configure_tc3+0xd4>)
     388:	2200      	movs	r2, #0
     38a:	4b14      	ldr	r3, [pc, #80]	; (3dc <configure_tc3+0xd8>)
     38c:	4798      	blx	r3
	TC_CALLBACK_OVERFLOW);
	
	configure_echo_channel();
     38e:	4b14      	ldr	r3, [pc, #80]	; (3e0 <configure_tc3+0xdc>)
     390:	4798      	blx	r3
	configure_extint_callbacks();
     392:	4b14      	ldr	r3, [pc, #80]	; (3e4 <configure_tc3+0xe0>)
     394:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     396:	6820      	ldr	r0, [r4, #0]
     398:	4b13      	ldr	r3, [pc, #76]	; (3e8 <configure_tc3+0xe4>)
     39a:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     39c:	4b13      	ldr	r3, [pc, #76]	; (3ec <configure_tc3+0xe8>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     39e:	5c1b      	ldrb	r3, [r3, r0]
     3a0:	221f      	movs	r2, #31
     3a2:	4013      	ands	r3, r2
     3a4:	3a1e      	subs	r2, #30
     3a6:	1c11      	adds	r1, r2, #0
     3a8:	4099      	lsls	r1, r3
     3aa:	1c0b      	adds	r3, r1, #0
     3ac:	4910      	ldr	r1, [pc, #64]	; (3f0 <configure_tc3+0xec>)
     3ae:	600b      	str	r3, [r1, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     3b0:	7e61      	ldrb	r1, [r4, #25]
     3b2:	2301      	movs	r3, #1
     3b4:	430b      	orrs	r3, r1
     3b6:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     3b8:	6823      	ldr	r3, [r4, #0]
     3ba:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
}
     3bc:	b00f      	add	sp, #60	; 0x3c
     3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c0:	00001c69 	.word	0x00001c69
     3c4:	41004400 	.word	0x41004400
     3c8:	000048e5 	.word	0x000048e5
     3cc:	20000224 	.word	0x20000224
     3d0:	42002c00 	.word	0x42002c00
     3d4:	000031b9 	.word	0x000031b9
     3d8:	0000027d 	.word	0x0000027d
     3dc:	000030c1 	.word	0x000030c1
     3e0:	000002ad 	.word	0x000002ad
     3e4:	000002e1 	.word	0x000002e1
     3e8:	00003181 	.word	0x00003181
     3ec:	000076f8 	.word	0x000076f8
     3f0:	e000e100 	.word	0xe000e100

000003f4 <write_data>:
	
}

// Helper function to just execute a simple write
void write_data(uint8_t *bufferSend, uint8_t length)
{
     3f4:	b570      	push	{r4, r5, r6, lr}
     3f6:	b084      	sub	sp, #16
	struct i2c_master_packet packet = {
     3f8:	ab01      	add	r3, sp, #4
     3fa:	224c      	movs	r2, #76	; 0x4c
     3fc:	801a      	strh	r2, [r3, #0]
     3fe:	8059      	strh	r1, [r3, #2]
     400:	9002      	str	r0, [sp, #8]
     402:	2200      	movs	r2, #0
     404:	721a      	strb	r2, [r3, #8]
     406:	725a      	strb	r2, [r3, #9]
     408:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		calc_baud = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
     40a:	4e05      	ldr	r6, [pc, #20]	; (420 <write_data+0x2c>)
     40c:	4d05      	ldr	r5, [pc, #20]	; (424 <write_data+0x30>)
     40e:	4c06      	ldr	r4, [pc, #24]	; (428 <write_data+0x34>)
     410:	1c30      	adds	r0, r6, #0
     412:	a901      	add	r1, sp, #4
     414:	47a8      	blx	r5
     416:	7020      	strb	r0, [r4, #0]
		
	}
	while (calc_baud != STATUS_OK);
     418:	2800      	cmp	r0, #0
     41a:	d1f9      	bne.n	410 <write_data+0x1c>
	
     41c:	b004      	add	sp, #16
     41e:	bd70      	pop	{r4, r5, r6, pc}
     420:	20000244 	.word	0x20000244
     424:	00002199 	.word	0x00002199
     428:	2000026d 	.word	0x2000026d

0000042c <config_accel>:
#include "accel.h"



void config_accel(void)
{
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     430:	ad0e      	add	r5, sp, #56	; 0x38
     432:	2400      	movs	r4, #0
     434:	702c      	strb	r4, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     436:	2301      	movs	r3, #1
     438:	706b      	strb	r3, [r5, #1]
	config->powersave  = false;
     43a:	70ac      	strb	r4, [r5, #2]
	
	// Make sure our accidental i2c port is turned off
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(PIN_PA23, &config_port_pin);
     43c:	2017      	movs	r0, #23
     43e:	1c29      	adds	r1, r5, #0
     440:	4e41      	ldr	r6, [pc, #260]	; (548 <config_accel+0x11c>)
     442:	47b0      	blx	r6
	port_pin_set_config(PIN_PA22, &config_port_pin);
     444:	2016      	movs	r0, #22
     446:	1c29      	adds	r1, r5, #0
     448:	47b0      	blx	r6
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     44a:	ab01      	add	r3, sp, #4
     44c:	4a3f      	ldr	r2, [pc, #252]	; (54c <config_accel+0x120>)
     44e:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     450:	9403      	str	r4, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     452:	731c      	strb	r4, [r3, #12]
	config->run_in_standby   = false;
     454:	761c      	strb	r4, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     456:	2201      	movs	r2, #1
     458:	4252      	negs	r2, r2
     45a:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     45c:	9408      	str	r4, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     45e:	9409      	str	r4, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
     460:	3225      	adds	r2, #37	; 0x25
     462:	549c      	strb	r4, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     464:	940b      	str	r4, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     466:	3208      	adds	r2, #8
     468:	549c      	strb	r4, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     46a:	3201      	adds	r2, #1
     46c:	549c      	strb	r4, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     46e:	3201      	adds	r2, #1
     470:	549c      	strb	r4, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     472:	32a9      	adds	r2, #169	; 0xa9
     474:	861a      	strh	r2, [r3, #48]	; 0x30
	
	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 40000;
     476:	4a36      	ldr	r2, [pc, #216]	; (550 <config_accel+0x124>)
     478:	82da      	strh	r2, [r3, #22]
	// Change to 400 KHz
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
     47a:	22c8      	movs	r2, #200	; 0xc8
     47c:	0052      	lsls	r2, r2, #1
     47e:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
     480:	22c0      	movs	r2, #192	; 0xc0
     482:	0392      	lsls	r2, r2, #14
     484:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do {
		value = i2c_master_init(&i2c_master_instance, SERCOM5, &config_i2c_master);
     486:	4e33      	ldr	r6, [pc, #204]	; (554 <config_accel+0x128>)
     488:	4d33      	ldr	r5, [pc, #204]	; (558 <config_accel+0x12c>)
     48a:	4c34      	ldr	r4, [pc, #208]	; (55c <config_accel+0x130>)
     48c:	1c30      	adds	r0, r6, #0
     48e:	4934      	ldr	r1, [pc, #208]	; (560 <config_accel+0x134>)
     490:	aa01      	add	r2, sp, #4
     492:	47a8      	blx	r5
     494:	7020      	strb	r0, [r4, #0]
	}
	while(value != STATUS_OK); 
     496:	2800      	cmp	r0, #0
     498:	d1f8      	bne.n	48c <config_accel+0x60>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     49a:	4b2e      	ldr	r3, [pc, #184]	; (554 <config_accel+0x128>)
     49c:	681c      	ldr	r4, [r3, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     49e:	2207      	movs	r2, #7
     4a0:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4a2:	421a      	tst	r2, r3
     4a4:	d1fc      	bne.n	4a0 <config_accel+0x74>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     4a6:	6822      	ldr	r2, [r4, #0]
     4a8:	2302      	movs	r3, #2
     4aa:	4313      	orrs	r3, r2
     4ac:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     4ae:	4d29      	ldr	r5, [pc, #164]	; (554 <config_accel+0x128>)
     4b0:	6828      	ldr	r0, [r5, #0]
     4b2:	4b2c      	ldr	r3, [pc, #176]	; (564 <config_accel+0x138>)
     4b4:	4798      	blx	r3
     4b6:	231f      	movs	r3, #31
     4b8:	4018      	ands	r0, r3
     4ba:	3b1e      	subs	r3, #30
     4bc:	4083      	lsls	r3, r0
     4be:	1c18      	adds	r0, r3, #0
     4c0:	4b29      	ldr	r3, [pc, #164]	; (568 <config_accel+0x13c>)
     4c2:	6018      	str	r0, [r3, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     4c4:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
     4c6:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     4c8:	2110      	movs	r1, #16
     4ca:	e005      	b.n	4d8 <config_accel+0xac>
		timeout_counter++;
     4cc:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     4ce:	4283      	cmp	r3, r0
     4d0:	d302      	bcc.n	4d8 <config_accel+0xac>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     4d2:	2310      	movs	r3, #16
     4d4:	8363      	strh	r3, [r4, #26]
     4d6:	e002      	b.n	4de <config_accel+0xb2>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     4d8:	8b62      	ldrh	r2, [r4, #26]
     4da:	420a      	tst	r2, r1
     4dc:	d0f6      	beq.n	4cc <config_accel+0xa0>
	
	i2c_master_enable(&i2c_master_instance);
	 	
	// Start by putting the accelerometer in standby mode
	bufferSend[0] = 0x07;
     4de:	ac0f      	add	r4, sp, #60	; 0x3c
     4e0:	2607      	movs	r6, #7
     4e2:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
     4e4:	2350      	movs	r3, #80	; 0x50
     4e6:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     4e8:	1c20      	adds	r0, r4, #0
     4ea:	2102      	movs	r1, #2
     4ec:	4d1f      	ldr	r5, [pc, #124]	; (56c <config_accel+0x140>)
     4ee:	47a8      	blx	r5
	 
	// Set sleep mode to off by setting sleep counter to 0
	bufferSend[0] = 0x05;
     4f0:	2305      	movs	r3, #5
     4f2:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00000000;
     4f4:	2300      	movs	r3, #0
     4f6:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     4f8:	1c20      	adds	r0, r4, #0
     4fa:	2102      	movs	r1, #2
     4fc:	47a8      	blx	r5
	 
	// Set interrupts for tap and shake detection
	bufferSend[0] = 0x06;
     4fe:	2306      	movs	r3, #6
     500:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
     502:	33de      	adds	r3, #222	; 0xde
     504:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     506:	1c20      	adds	r0, r4, #0
     508:	2102      	movs	r1, #2
     50a:	47a8      	blx	r5
	 
	// Set filter rate to 8 samples, set number of samples to 120 in waking state, 32 in sleeping (hopefully we avoid sleep)
	bufferSend[0] = 0x08;
     50c:	2308      	movs	r3, #8
     50e:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b11100000;
     510:	33d8      	adds	r3, #216	; 0xd8
     512:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     514:	1c20      	adds	r0, r4, #0
     516:	2102      	movs	r1, #2
     518:	47a8      	blx	r5
	 
	// Set tap detection thresholds - 8 counts, and only detect taps on z-axis
	bufferSend[0] = 0x09;
     51a:	2309      	movs	r3, #9
     51c:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b01101000;
     51e:	335f      	adds	r3, #95	; 0x5f
     520:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     522:	1c20      	adds	r0, r4, #0
     524:	2102      	movs	r1, #2
     526:	47a8      	blx	r5


	// Set tap debounce to 16 detections, roughly 8 ms
	bufferSend[0] = 0x0A;
     528:	230a      	movs	r3, #10
     52a:	7023      	strb	r3, [r4, #0]
	bufferSend[1] = 0b00010000;
     52c:	3306      	adds	r3, #6
     52e:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     530:	1c20      	adds	r0, r4, #0
     532:	2102      	movs	r1, #2
     534:	47a8      	blx	r5
	 
	// Change acclerometer mode to active waking state (enable it), enable push/pull on interrupt line
	bufferSend[0] = 0x07;
     536:	7026      	strb	r6, [r4, #0]
	bufferSend[1] = 0b01010001;
     538:	2351      	movs	r3, #81	; 0x51
     53a:	7063      	strb	r3, [r4, #1]
	write_data(bufferSend, 2);
     53c:	1c20      	adds	r0, r4, #0
     53e:	2102      	movs	r1, #2
     540:	47a8      	blx	r5
}
     542:	b010      	add	sp, #64	; 0x40
     544:	bd70      	pop	{r4, r5, r6, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	00001c69 	.word	0x00001c69
     54c:	00000d48 	.word	0x00000d48
     550:	ffff9c40 	.word	0xffff9c40
     554:	20000244 	.word	0x20000244
     558:	00001c99 	.word	0x00001c99
     55c:	2000026c 	.word	0x2000026c
     560:	42001c00 	.word	0x42001c00
     564:	000026a9 	.word	0x000026a9
     568:	e000e100 	.word	0xe000e100
     56c:	000003f5 	.word	0x000003f5

00000570 <get_accel_data>:

void get_accel_data(void)
{
     570:	b530      	push	{r4, r5, lr}
     572:	b085      	sub	sp, #20
	struct i2c_master_packet packet = {
     574:	aa01      	add	r2, sp, #4
     576:	4b09      	ldr	r3, [pc, #36]	; (59c <get_accel_data+0x2c>)
     578:	cb13      	ldmia	r3!, {r0, r1, r4}
     57a:	c213      	stmia	r2!, {r0, r1, r4}
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	
	unsigned char bufferSend[1];
	bufferSend[0] = 0x00;
     57c:	2300      	movs	r3, #0
     57e:	466a      	mov	r2, sp
     580:	7013      	strb	r3, [r2, #0]
	write_data(bufferSend, 1);
     582:	4668      	mov	r0, sp
     584:	2101      	movs	r1, #1
     586:	4b06      	ldr	r3, [pc, #24]	; (5a0 <get_accel_data+0x30>)
     588:	4798      	blx	r3
	
	// Read the resulting four bytes (x, y, z, and status)
	while(i2c_master_read_packet_wait_no_stop(&i2c_master_instance, &packet) !=
     58a:	4d06      	ldr	r5, [pc, #24]	; (5a4 <get_accel_data+0x34>)
     58c:	4c06      	ldr	r4, [pc, #24]	; (5a8 <get_accel_data+0x38>)
     58e:	1c28      	adds	r0, r5, #0
     590:	a901      	add	r1, sp, #4
     592:	47a0      	blx	r4
     594:	2800      	cmp	r0, #0
     596:	d1fa      	bne.n	58e <get_accel_data+0x1e>
	STATUS_OK);
	
}
     598:	b005      	add	sp, #20
     59a:	bd30      	pop	{r4, r5, pc}
     59c:	000076fc 	.word	0x000076fc
     5a0:	000003f5 	.word	0x000003f5
     5a4:	20000244 	.word	0x20000244
     5a8:	00002179 	.word	0x00002179

000005ac <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     5ac:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     5ae:	2000      	movs	r0, #0
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <delay_init+0x28>)
     5b2:	4798      	blx	r3
	cycles_per_ms /= 1000;
     5b4:	4c08      	ldr	r4, [pc, #32]	; (5d8 <delay_init+0x2c>)
     5b6:	21fa      	movs	r1, #250	; 0xfa
     5b8:	0089      	lsls	r1, r1, #2
     5ba:	47a0      	blx	r4
     5bc:	4b07      	ldr	r3, [pc, #28]	; (5dc <delay_init+0x30>)
     5be:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     5c0:	21fa      	movs	r1, #250	; 0xfa
     5c2:	0089      	lsls	r1, r1, #2
     5c4:	47a0      	blx	r4
     5c6:	4b06      	ldr	r3, [pc, #24]	; (5e0 <delay_init+0x34>)
     5c8:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5ca:	2205      	movs	r2, #5
     5cc:	4b05      	ldr	r3, [pc, #20]	; (5e4 <delay_init+0x38>)
     5ce:	601a      	str	r2, [r3, #0]
}
     5d0:	bd10      	pop	{r4, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	000027c5 	.word	0x000027c5
     5d8:	000055c5 	.word	0x000055c5
     5dc:	20000004 	.word	0x20000004
     5e0:	20000000 	.word	0x20000000
     5e4:	e000e010 	.word	0xe000e010

000005e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     5e8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     5ea:	4b08      	ldr	r3, [pc, #32]	; (60c <delay_cycles_ms+0x24>)
     5ec:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     5ee:	4a08      	ldr	r2, [pc, #32]	; (610 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     5f0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5f2:	2180      	movs	r1, #128	; 0x80
     5f4:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     5f6:	e006      	b.n	606 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     5f8:	2c00      	cmp	r4, #0
     5fa:	d004      	beq.n	606 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     5fc:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5fe:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     600:	6813      	ldr	r3, [r2, #0]
     602:	420b      	tst	r3, r1
     604:	d0fc      	beq.n	600 <delay_cycles_ms+0x18>
     606:	3801      	subs	r0, #1
     608:	d2f6      	bcs.n	5f8 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     60a:	bd30      	pop	{r4, r5, pc}
     60c:	20000004 	.word	0x20000004
     610:	e000e010 	.word	0xe000e010

00000614 <config_ir>:

#include <asf.h>
#include "ir.h"

void config_ir(void)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b082      	sub	sp, #8
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     618:	ac01      	add	r4, sp, #4
     61a:	2300      	movs	r3, #0
     61c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     61e:	2601      	movs	r6, #1
     620:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     622:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	port_pin_set_config(OBSTACLE_SENSE_R, &config_port_pin);
     624:	2008      	movs	r0, #8
     626:	1c21      	adds	r1, r4, #0
     628:	4d07      	ldr	r5, [pc, #28]	; (648 <config_ir+0x34>)
     62a:	47a8      	blx	r5
	port_pin_set_config(OBSTACLE_SENSE_L, &config_port_pin);
     62c:	202a      	movs	r0, #42	; 0x2a
     62e:	1c21      	adds	r1, r4, #0
     630:	47a8      	blx	r5

	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     632:	7026      	strb	r6, [r4, #0]

	port_pin_set_config(CTR_LINE_LED, &config_port_pin);
     634:	200e      	movs	r0, #14
     636:	1c21      	adds	r1, r4, #0
     638:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     63a:	2280      	movs	r2, #128	; 0x80
     63c:	01d2      	lsls	r2, r2, #7
     63e:	4b03      	ldr	r3, [pc, #12]	; (64c <config_ir+0x38>)
     640:	619a      	str	r2, [r3, #24]
	
	// Everything is active low, so set the signal high to turn these off

	port_pin_set_output_level(CTR_LINE_LED, true);
	
}
     642:	b002      	add	sp, #8
     644:	bd70      	pop	{r4, r5, r6, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	00001c69 	.word	0x00001c69
     64c:	41004400 	.word	0x41004400

00000650 <read_left_ir>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     650:	4b02      	ldr	r3, [pc, #8]	; (65c <read_left_ir+0xc>)
     652:	6a18      	ldr	r0, [r3, #32]
     654:	0540      	lsls	r0, r0, #21

uint8_t read_left_ir(void)
{
	return port_pin_get_input_level(OBSTACLE_SENSE_L);
     656:	0fc0      	lsrs	r0, r0, #31
}
     658:	4770      	bx	lr
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	41004480 	.word	0x41004480

00000660 <read_right_ir>:
     660:	4b02      	ldr	r3, [pc, #8]	; (66c <read_right_ir+0xc>)
     662:	6a18      	ldr	r0, [r3, #32]
     664:	05c0      	lsls	r0, r0, #23

uint8_t read_right_ir(void)
{
	return port_pin_get_input_level(OBSTACLE_SENSE_R);
     666:	0fc0      	lsrs	r0, r0, #31
}
     668:	4770      	bx	lr
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	41004400 	.word	0x41004400

00000670 <config_motors>:
bool motor_enable = false;
uint8_t old_left_dir = 1;
uint8_t old_right_dir = 1;

void config_motors(void)
{
     670:	b570      	push	{r4, r5, r6, lr}
     672:	b0aa      	sub	sp, #168	; 0xa8
	 struct tcc_config config_tcc;
	 tcc_get_config_defaults(&config_tcc, TCC0);
     674:	ac01      	add	r4, sp, #4
     676:	4d2b      	ldr	r5, [pc, #172]	; (724 <config_motors+0xb4>)
     678:	1c20      	adds	r0, r4, #0
     67a:	1c29      	adds	r1, r5, #0
     67c:	4b2a      	ldr	r3, [pc, #168]	; (728 <config_motors+0xb8>)
     67e:	4798      	blx	r3
	 config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
     680:	2302      	movs	r3, #2
     682:	72e3      	strb	r3, [r4, #11]
	 config_tcc.counter.period = 0x00FF;
     684:	22ff      	movs	r2, #255	; 0xff
     686:	6062      	str	r2, [r4, #4]
	 config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     688:	7623      	strb	r3, [r4, #24]
	 config_tcc.compare.wave_polarity[LEFT_MOTOR_CH] = TCC_WAVE_POLARITY_1;
     68a:	3b01      	subs	r3, #1
     68c:	75e3      	strb	r3, [r4, #23]
	 config_tcc.compare.wave_polarity[RIGHT_MOTOR_CH] = TCC_WAVE_POLARITY_1;
     68e:	75a3      	strb	r3, [r4, #22]
	 config_tcc.compare.match[LEFT_MOTOR_CH] = 0;
     690:	2200      	movs	r2, #0
     692:	62a2      	str	r2, [r4, #40]	; 0x28
	 config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_WO] = true;
     694:	219f      	movs	r1, #159	; 0x9f
     696:	5463      	strb	r3, [r4, r1]
	 config_tcc.pins.wave_out_pin[LEFT_MOTOR_WO]        = PIN_PA13F_TCC0_WO7;
     698:	3992      	subs	r1, #146	; 0x92
     69a:	6761      	str	r1, [r4, #116]	; 0x74
	 config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_WO]    = PINMUX_PA13F_TCC0_WO7;
     69c:	4823      	ldr	r0, [pc, #140]	; (72c <config_motors+0xbc>)
     69e:	3187      	adds	r1, #135	; 0x87
     6a0:	5060      	str	r0, [r4, r1]
	 config_tcc.compare.match[RIGHT_MOTOR_CH] = 0;
     6a2:	6262      	str	r2, [r4, #36]	; 0x24
	 config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_WO] = true;
     6a4:	310a      	adds	r1, #10
     6a6:	5463      	strb	r3, [r4, r1]
	 config_tcc.pins.wave_out_pin[RIGHT_MOTOR_WO]        = PIN_PA12F_TCC0_WO6;
     6a8:	3992      	subs	r1, #146	; 0x92
     6aa:	6721      	str	r1, [r4, #112]	; 0x70
	 config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_WO]    = PINMUX_PA12F_TCC0_WO6;
     6ac:	4820      	ldr	r0, [pc, #128]	; (730 <config_motors+0xc0>)
     6ae:	3184      	adds	r1, #132	; 0x84
     6b0:	5060      	str	r0, [r4, r1]
	 
	 // Ugly, but this configures the green part of the full color LED 
	 config_tcc.compare.match[BLUE_CH] = 0;
     6b2:	6222      	str	r2, [r4, #32]
	 config_tcc.pins.enable_wave_out_pin[BLUE_WO] = true;
     6b4:	3299      	adds	r2, #153	; 0x99
     6b6:	54a3      	strb	r3, [r4, r2]
	 config_tcc.pins.wave_out_pin[BLUE_WO]        = PIN_PA09E_TCC0_WO1;
     6b8:	3308      	adds	r3, #8
     6ba:	65e3      	str	r3, [r4, #92]	; 0x5c
	 config_tcc.pins.wave_out_pin_mux[BLUE_WO]    = PINMUX_PA09E_TCC0_WO1;
     6bc:	4b1d      	ldr	r3, [pc, #116]	; (734 <config_motors+0xc4>)
     6be:	67e3      	str	r3, [r4, #124]	; 0x7c
	 
	 tcc_init(&tcc_instance0, TCC0, &config_tcc);
     6c0:	4e1d      	ldr	r6, [pc, #116]	; (738 <config_motors+0xc8>)
     6c2:	1c30      	adds	r0, r6, #0
     6c4:	1c29      	adds	r1, r5, #0
     6c6:	1c22      	adds	r2, r4, #0
     6c8:	4b1c      	ldr	r3, [pc, #112]	; (73c <config_motors+0xcc>)
     6ca:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     6cc:	6832      	ldr	r2, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     6ce:	2102      	movs	r1, #2
     6d0:	6893      	ldr	r3, [r2, #8]
     6d2:	4219      	tst	r1, r3
     6d4:	d1fc      	bne.n	6d0 <config_motors+0x60>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     6d6:	6811      	ldr	r1, [r2, #0]
     6d8:	2302      	movs	r3, #2
     6da:	430b      	orrs	r3, r1
     6dc:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     6de:	2500      	movs	r5, #0
     6e0:	466b      	mov	r3, sp
     6e2:	701d      	strb	r5, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     6e4:	2601      	movs	r6, #1
     6e6:	705e      	strb	r6, [r3, #1]
	config->powersave  = false;
     6e8:	709d      	strb	r5, [r3, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);

	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	// set Nfault to input
	port_pin_set_config(PIN_PA28, &config_port_pin);
     6ea:	201c      	movs	r0, #28
     6ec:	4669      	mov	r1, sp
     6ee:	4c14      	ldr	r4, [pc, #80]	; (740 <config_motors+0xd0>)
     6f0:	47a0      	blx	r4
	
	// Set PWM pins to output
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     6f2:	466b      	mov	r3, sp
     6f4:	701e      	strb	r6, [r3, #0]
	port_pin_set_config(PIN_PA20, &config_port_pin);
     6f6:	2014      	movs	r0, #20
     6f8:	4669      	mov	r1, sp
     6fa:	47a0      	blx	r4
	port_pin_set_config(PIN_PA21, &config_port_pin);
     6fc:	2015      	movs	r0, #21
     6fe:	4669      	mov	r1, sp
     700:	47a0      	blx	r4

	// Set Nsleep to output, then set it low to keep the chip in sleep mode until we actually use it
	port_pin_set_config(PIN_PA27, &config_port_pin);
     702:	201b      	movs	r0, #27
     704:	4669      	mov	r1, sp
     706:	47a0      	blx	r4

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <config_motors+0xd4>)
     70a:	2280      	movs	r2, #128	; 0x80
     70c:	0512      	lsls	r2, r2, #20
     70e:	615a      	str	r2, [r3, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     710:	2280      	movs	r2, #128	; 0x80
     712:	0352      	lsls	r2, r2, #13
     714:	619a      	str	r2, [r3, #24]
     716:	2280      	movs	r2, #128	; 0x80
     718:	0392      	lsls	r2, r2, #14
     71a:	619a      	str	r2, [r3, #24]
	// disable the chip and set motor enable to false for now
	port_pin_set_output_level(PIN_PA27, false);
	port_pin_set_output_level(PIN_PA20, true);
	port_pin_set_output_level(PIN_PA21, true);
	motor_enable = false;
     71c:	4b0a      	ldr	r3, [pc, #40]	; (748 <config_motors+0xd8>)
     71e:	701d      	strb	r5, [r3, #0]
	
}
     720:	b02a      	add	sp, #168	; 0xa8
     722:	bd70      	pop	{r4, r5, r6, pc}
     724:	42002000 	.word	0x42002000
     728:	00002ac5 	.word	0x00002ac5
     72c:	000d0005 	.word	0x000d0005
     730:	000c0005 	.word	0x000c0005
     734:	00090004 	.word	0x00090004
     738:	20000270 	.word	0x20000270
     73c:	00002c11 	.word	0x00002c11
     740:	00001c69 	.word	0x00001c69
     744:	41004400 	.word	0x41004400
     748:	20000128 	.word	0x20000128

0000074c <set_motor_left>:

// PWM is on BIN1/BIN2 - PA13 and PA21
// Depending on direction, set other pin to standard output and set it to low
void set_motor_left(uint8_t dir, uint8_t speed)
{
     74c:	b530      	push	{r4, r5, lr}
     74e:	b083      	sub	sp, #12
     750:	1c04      	adds	r4, r0, #0
     752:	1c0d      	adds	r5, r1, #0
	if(motor_enable == false)
     754:	4b1f      	ldr	r3, [pc, #124]	; (7d4 <set_motor_left+0x88>)
     756:	781b      	ldrb	r3, [r3, #0]
     758:	2b00      	cmp	r3, #0
     75a:	d106      	bne.n	76a <set_motor_left+0x1e>
     75c:	2280      	movs	r2, #128	; 0x80
     75e:	0512      	lsls	r2, r2, #20
     760:	4b1d      	ldr	r3, [pc, #116]	; (7d8 <set_motor_left+0x8c>)
     762:	619a      	str	r2, [r3, #24]
	{
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
			
		// set flag to true
		motor_enable = true;
     764:	2201      	movs	r2, #1
     766:	4b1b      	ldr	r3, [pc, #108]	; (7d4 <set_motor_left+0x88>)
     768:	701a      	strb	r2, [r3, #0]
	}
	if(old_left_dir != dir)
     76a:	4b1c      	ldr	r3, [pc, #112]	; (7dc <set_motor_left+0x90>)
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	42a3      	cmp	r3, r4
     770:	d026      	beq.n	7c0 <set_motor_left+0x74>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     772:	2201      	movs	r2, #1
     774:	466b      	mov	r3, sp
     776:	701a      	strb	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     778:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     77a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     77c:	2100      	movs	r1, #0
     77e:	70d9      	strb	r1, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     780:	705a      	strb	r2, [r3, #1]
		// need to configure PWM with opposite pins
		if(dir == 0)
     782:	2c00      	cmp	r4, #0
     784:	d10e      	bne.n	7a4 <set_motor_left+0x58>
		{			
			pin_config.mux_position = PINMUX_PA21F_TCC0_WO7;
     786:	1c19      	adds	r1, r3, #0
     788:	2305      	movs	r3, #5
     78a:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA21F_TCC0_WO7, &pin_config);	
     78c:	2015      	movs	r0, #21
     78e:	4b14      	ldr	r3, [pc, #80]	; (7e0 <set_motor_left+0x94>)
     790:	4798      	blx	r3
			port_pin_set_config(PIN_PA13, &config_port_pin);
     792:	200d      	movs	r0, #13
     794:	4669      	mov	r1, sp
     796:	4b13      	ldr	r3, [pc, #76]	; (7e4 <set_motor_left+0x98>)
     798:	4798      	blx	r3
     79a:	2280      	movs	r2, #128	; 0x80
     79c:	0192      	lsls	r2, r2, #6
     79e:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <set_motor_left+0x8c>)
     7a0:	619a      	str	r2, [r3, #24]
     7a2:	e00d      	b.n	7c0 <set_motor_left+0x74>
			port_pin_set_output_level(PIN_PA13, true);		
		}
		else
		{
			pin_config.mux_position = PINMUX_PA13F_TCC0_WO7;
     7a4:	a901      	add	r1, sp, #4
     7a6:	2305      	movs	r3, #5
     7a8:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA13F_TCC0_WO7, &pin_config);
     7aa:	200d      	movs	r0, #13
     7ac:	4b0c      	ldr	r3, [pc, #48]	; (7e0 <set_motor_left+0x94>)
     7ae:	4798      	blx	r3
			port_pin_set_config(PIN_PA21, &config_port_pin);
     7b0:	2015      	movs	r0, #21
     7b2:	4669      	mov	r1, sp
     7b4:	4b0b      	ldr	r3, [pc, #44]	; (7e4 <set_motor_left+0x98>)
     7b6:	4798      	blx	r3
     7b8:	2280      	movs	r2, #128	; 0x80
     7ba:	0392      	lsls	r2, r2, #14
     7bc:	4b06      	ldr	r3, [pc, #24]	; (7d8 <set_motor_left+0x8c>)
     7be:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA21, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CH, speed);
     7c0:	4809      	ldr	r0, [pc, #36]	; (7e8 <set_motor_left+0x9c>)
     7c2:	2103      	movs	r1, #3
     7c4:	1c2a      	adds	r2, r5, #0
     7c6:	4b09      	ldr	r3, [pc, #36]	; (7ec <set_motor_left+0xa0>)
     7c8:	4798      	blx	r3
	old_left_dir = dir;
     7ca:	4b04      	ldr	r3, [pc, #16]	; (7dc <set_motor_left+0x90>)
     7cc:	701c      	strb	r4, [r3, #0]
}
     7ce:	b003      	add	sp, #12
     7d0:	bd30      	pop	{r4, r5, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	20000128 	.word	0x20000128
     7d8:	41004400 	.word	0x41004400
     7dc:	20000009 	.word	0x20000009
     7e0:	000029d5 	.word	0x000029d5
     7e4:	00001c69 	.word	0x00001c69
     7e8:	20000270 	.word	0x20000270
     7ec:	00003039 	.word	0x00003039

000007f0 <set_motor_right>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor_right(uint8_t dir, uint8_t speed)
{
     7f0:	b530      	push	{r4, r5, lr}
     7f2:	b083      	sub	sp, #12
     7f4:	1c04      	adds	r4, r0, #0
     7f6:	1c0d      	adds	r5, r1, #0
	if(motor_enable == false)
     7f8:	4b1f      	ldr	r3, [pc, #124]	; (878 <set_motor_right+0x88>)
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d106      	bne.n	80e <set_motor_right+0x1e>
     800:	2280      	movs	r2, #128	; 0x80
     802:	0512      	lsls	r2, r2, #20
     804:	4b1d      	ldr	r3, [pc, #116]	; (87c <set_motor_right+0x8c>)
     806:	619a      	str	r2, [r3, #24]
		// enable the chip
		port_pin_set_output_level(PIN_PA27, true);
		// enable PWM
		
		// set flag to true
		motor_enable = true;
     808:	2201      	movs	r2, #1
     80a:	4b1b      	ldr	r3, [pc, #108]	; (878 <set_motor_right+0x88>)
     80c:	701a      	strb	r2, [r3, #0]
	}
	if(old_right_dir != dir)
     80e:	4b1c      	ldr	r3, [pc, #112]	; (880 <set_motor_right+0x90>)
     810:	781b      	ldrb	r3, [r3, #0]
     812:	42a3      	cmp	r3, r4
     814:	d026      	beq.n	864 <set_motor_right+0x74>
	{
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;	
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     816:	2101      	movs	r1, #1
     818:	466b      	mov	r3, sp
     81a:	7019      	strb	r1, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     81c:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     81e:	2200      	movs	r2, #0
     820:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     822:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     824:	70da      	strb	r2, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		// need to configure PWM with opposite pins
		if(dir == 0)
     826:	2c00      	cmp	r4, #0
     828:	d10e      	bne.n	848 <set_motor_right+0x58>
		{
			pin_config.mux_position = PINMUX_PA20F_TCC0_WO6;
     82a:	1c19      	adds	r1, r3, #0
     82c:	2305      	movs	r3, #5
     82e:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA20F_TCC0_WO6, &pin_config);
     830:	2014      	movs	r0, #20
     832:	4b14      	ldr	r3, [pc, #80]	; (884 <set_motor_right+0x94>)
     834:	4798      	blx	r3
			port_pin_set_config(PIN_PA12, &config_port_pin);
     836:	200c      	movs	r0, #12
     838:	4669      	mov	r1, sp
     83a:	4b13      	ldr	r3, [pc, #76]	; (888 <set_motor_right+0x98>)
     83c:	4798      	blx	r3
     83e:	2280      	movs	r2, #128	; 0x80
     840:	0152      	lsls	r2, r2, #5
     842:	4b0e      	ldr	r3, [pc, #56]	; (87c <set_motor_right+0x8c>)
     844:	619a      	str	r2, [r3, #24]
     846:	e00d      	b.n	864 <set_motor_right+0x74>
			port_pin_set_output_level(PIN_PA12, true);
		}
		else
		{
			pin_config.mux_position = PINMUX_PA12F_TCC0_WO6;
     848:	a901      	add	r1, sp, #4
     84a:	2305      	movs	r3, #5
     84c:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA12F_TCC0_WO6, &pin_config);
     84e:	200c      	movs	r0, #12
     850:	4b0c      	ldr	r3, [pc, #48]	; (884 <set_motor_right+0x94>)
     852:	4798      	blx	r3
			port_pin_set_config(PIN_PA20, &config_port_pin);
     854:	2014      	movs	r0, #20
     856:	4669      	mov	r1, sp
     858:	4b0b      	ldr	r3, [pc, #44]	; (888 <set_motor_right+0x98>)
     85a:	4798      	blx	r3
     85c:	2280      	movs	r2, #128	; 0x80
     85e:	0352      	lsls	r2, r2, #13
     860:	4b06      	ldr	r3, [pc, #24]	; (87c <set_motor_right+0x8c>)
     862:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA20, true);
		}
	}
	tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CH, speed);
     864:	4809      	ldr	r0, [pc, #36]	; (88c <set_motor_right+0x9c>)
     866:	2102      	movs	r1, #2
     868:	1c2a      	adds	r2, r5, #0
     86a:	4b09      	ldr	r3, [pc, #36]	; (890 <set_motor_right+0xa0>)
     86c:	4798      	blx	r3
	old_right_dir = dir;
     86e:	4b04      	ldr	r3, [pc, #16]	; (880 <set_motor_right+0x90>)
     870:	701c      	strb	r4, [r3, #0]
}
     872:	b003      	add	sp, #12
     874:	bd30      	pop	{r4, r5, pc}
     876:	46c0      	nop			; (mov r8, r8)
     878:	20000128 	.word	0x20000128
     87c:	41004400 	.word	0x41004400
     880:	20000008 	.word	0x20000008
     884:	000029d5 	.word	0x000029d5
     888:	00001c69 	.word	0x00001c69
     88c:	20000270 	.word	0x20000270
     890:	00003039 	.word	0x00003039

00000894 <turn_off_motors>:

void turn_off_motors()
{
     894:	b508      	push	{r3, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
     896:	2280      	movs	r2, #128	; 0x80
     898:	0512      	lsls	r2, r2, #20
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <turn_off_motors+0x24>)
     89c:	615a      	str	r2, [r3, #20]
	
	// disable the chip to save power
	port_pin_set_output_level(PIN_PA27, false);
	// Turn PWM to 0, no need to turn everything off
	set_motor_left(1,0);
     89e:	2001      	movs	r0, #1
     8a0:	2100      	movs	r1, #0
     8a2:	4b06      	ldr	r3, [pc, #24]	; (8bc <turn_off_motors+0x28>)
     8a4:	4798      	blx	r3
	set_motor_right(1,0);
     8a6:	2001      	movs	r0, #1
     8a8:	2100      	movs	r1, #0
     8aa:	4b05      	ldr	r3, [pc, #20]	; (8c0 <turn_off_motors+0x2c>)
     8ac:	4798      	blx	r3
	
	// Set flag to false
	motor_enable = false;
     8ae:	2200      	movs	r2, #0
     8b0:	4b04      	ldr	r3, [pc, #16]	; (8c4 <turn_off_motors+0x30>)
     8b2:	701a      	strb	r2, [r3, #0]
     8b4:	bd08      	pop	{r3, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	41004400 	.word	0x41004400
     8bc:	0000074d 	.word	0x0000074d
     8c0:	000007f1 	.word	0x000007f1
     8c4:	20000128 	.word	0x20000128

000008c8 <config_led>:
#include <asf.h>
#include "orb.h"
#include "motors.h"

void config_led(void)
{
     8c8:	b570      	push	{r4, r5, r6, lr}
     8ca:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC1);
     8cc:	ac01      	add	r4, sp, #4
     8ce:	4e15      	ldr	r6, [pc, #84]	; (924 <config_led+0x5c>)
     8d0:	1c20      	adds	r0, r4, #0
     8d2:	1c31      	adds	r1, r6, #0
     8d4:	4b14      	ldr	r3, [pc, #80]	; (928 <config_led+0x60>)
     8d6:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1024;
     8d8:	2307      	movs	r3, #7
     8da:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0x00FF;
     8dc:	22ff      	movs	r2, #255	; 0xff
     8de:	6062      	str	r2, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     8e0:	3afd      	subs	r2, #253	; 0xfd
     8e2:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[RED_CH] = 0;
     8e4:	2100      	movs	r1, #0
     8e6:	61e1      	str	r1, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[RED_WO] = true;
     8e8:	3a01      	subs	r2, #1
     8ea:	2098      	movs	r0, #152	; 0x98
     8ec:	5422      	strb	r2, [r4, r0]
	config_tcc.pins.wave_out_pin[RED_WO]        = PIN_PA06E_TCC1_WO0;
     8ee:	3892      	subs	r0, #146	; 0x92
     8f0:	65a0      	str	r0, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RED_WO]    = PINMUX_PA06E_TCC1_WO0;
     8f2:	480e      	ldr	r0, [pc, #56]	; (92c <config_led+0x64>)
     8f4:	67a0      	str	r0, [r4, #120]	; 0x78
	config_tcc.compare.match[GREEN_CH] = 0;
     8f6:	6221      	str	r1, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[GREEN_WO] = true;
     8f8:	3199      	adds	r1, #153	; 0x99
     8fa:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[GREEN_WO]        = PIN_PA07E_TCC1_WO1;
     8fc:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_WO]    = PINMUX_PA07E_TCC1_WO1;
     8fe:	4b0c      	ldr	r3, [pc, #48]	; (930 <config_led+0x68>)
     900:	67e3      	str	r3, [r4, #124]	; 0x7c
	
	tcc_init(&tcc_instance1, TCC1, &config_tcc);
     902:	4d0c      	ldr	r5, [pc, #48]	; (934 <config_led+0x6c>)
     904:	1c28      	adds	r0, r5, #0
     906:	1c31      	adds	r1, r6, #0
     908:	1c22      	adds	r2, r4, #0
     90a:	4b0b      	ldr	r3, [pc, #44]	; (938 <config_led+0x70>)
     90c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     90e:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     910:	2102      	movs	r1, #2
     912:	6893      	ldr	r3, [r2, #8]
     914:	4219      	tst	r1, r3
     916:	d1fc      	bne.n	912 <config_led+0x4a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     918:	6811      	ldr	r1, [r2, #0]
     91a:	2302      	movs	r3, #2
     91c:	430b      	orrs	r3, r1
     91e:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance1);
}
     920:	b02a      	add	sp, #168	; 0xa8
     922:	bd70      	pop	{r4, r5, r6, pc}
     924:	42002400 	.word	0x42002400
     928:	00002ac5 	.word	0x00002ac5
     92c:	00060004 	.word	0x00060004
     930:	00070004 	.word	0x00070004
     934:	200002b0 	.word	0x200002b0
     938:	00002c11 	.word	0x00002c11

0000093c <set_led>:



void set_led(uint8_t red, uint8_t green, uint8_t blue)
{
     93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     93e:	1c03      	adds	r3, r0, #0
     940:	1c0f      	adds	r7, r1, #0
     942:	1c16      	adds	r6, r2, #0
	tcc_set_compare_value(&tcc_instance1, RED_CH, red);
     944:	4d07      	ldr	r5, [pc, #28]	; (964 <set_led+0x28>)
     946:	1c28      	adds	r0, r5, #0
     948:	2100      	movs	r1, #0
     94a:	1c1a      	adds	r2, r3, #0
     94c:	4c06      	ldr	r4, [pc, #24]	; (968 <set_led+0x2c>)
     94e:	47a0      	blx	r4
	tcc_set_compare_value(&tcc_instance0, GREEN_CH, green);
     950:	4806      	ldr	r0, [pc, #24]	; (96c <set_led+0x30>)
     952:	2101      	movs	r1, #1
     954:	1c3a      	adds	r2, r7, #0
     956:	47a0      	blx	r4
	tcc_set_compare_value(&tcc_instance1, BLUE_CH, blue);
     958:	1c28      	adds	r0, r5, #0
     95a:	2101      	movs	r1, #1
     95c:	1c32      	adds	r2, r6, #0
     95e:	47a0      	blx	r4
}
     960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	200002b0 	.word	0x200002b0
     968:	00003039 	.word	0x00003039
     96c:	20000270 	.word	0x20000270

00000970 <configure_dac>:
#include "sound.h"

struct dac_module dac_instance;

void configure_dac(void)
{
     970:	b500      	push	{lr}
     972:	b083      	sub	sp, #12
	struct dac_config config_dac;
	dac_get_config_defaults(&config_dac);
     974:	4668      	mov	r0, sp
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <configure_dac+0x1c>)
     978:	4798      	blx	r3
	config_dac.reference = DAC_REFERENCE_AVCC;
     97a:	2340      	movs	r3, #64	; 0x40
     97c:	466a      	mov	r2, sp
     97e:	7013      	strb	r3, [r2, #0]
	dac_init(&dac_instance, DAC, &config_dac);
     980:	4803      	ldr	r0, [pc, #12]	; (990 <configure_dac+0x20>)
     982:	4904      	ldr	r1, [pc, #16]	; (994 <configure_dac+0x24>)
     984:	4b04      	ldr	r3, [pc, #16]	; (998 <configure_dac+0x28>)
     986:	4798      	blx	r3
}
     988:	b003      	add	sp, #12
     98a:	bd00      	pop	{pc}
     98c:	0000197d 	.word	0x0000197d
     990:	200002f0 	.word	0x200002f0
     994:	42004800 	.word	0x42004800
     998:	00001991 	.word	0x00001991

0000099c <configure_dac_channel>:
void configure_dac_channel(void)
{
     99c:	b510      	push	{r4, lr}
     99e:	b082      	sub	sp, #8
	struct dac_chan_config config_dac_chan;
	dac_chan_get_config_defaults(&config_dac_chan);
     9a0:	a801      	add	r0, sp, #4
     9a2:	4b0f      	ldr	r3, [pc, #60]	; (9e0 <configure_dac_channel+0x44>)
     9a4:	4798      	blx	r3
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
     9a6:	4c0f      	ldr	r4, [pc, #60]	; (9e4 <configure_dac_channel+0x48>)
     9a8:	1c20      	adds	r0, r4, #0
     9aa:	2100      	movs	r1, #0
     9ac:	aa01      	add	r2, sp, #4
     9ae:	4b0e      	ldr	r3, [pc, #56]	; (9e8 <configure_dac_channel+0x4c>)
     9b0:	4798      	blx	r3
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
     9b2:	1c20      	adds	r0, r4, #0
     9b4:	2100      	movs	r1, #0
     9b6:	4b0d      	ldr	r3, [pc, #52]	; (9ec <configure_dac_channel+0x50>)
     9b8:	4798      	blx	r3
	dac_enable(&dac_instance);
     9ba:	1c20      	adds	r0, r4, #0
     9bc:	4b0c      	ldr	r3, [pc, #48]	; (9f0 <configure_dac_channel+0x54>)
     9be:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     9c0:	2301      	movs	r3, #1
     9c2:	466a      	mov	r2, sp
     9c4:	7053      	strb	r3, [r2, #1]
	config->powersave  = false;
     9c6:	2200      	movs	r2, #0
     9c8:	4669      	mov	r1, sp
     9ca:	708a      	strb	r2, [r1, #2]
	
	// Enable output on the I/O line
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     9cc:	700b      	strb	r3, [r1, #0]
	//port_pin_set_config(PIN_PA02, &config_port_pin);
	port_pin_set_config(PIN_PB23, &config_port_pin);
     9ce:	2037      	movs	r0, #55	; 0x37
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <configure_dac_channel+0x58>)
     9d2:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9d4:	2280      	movs	r2, #128	; 0x80
     9d6:	0412      	lsls	r2, r2, #16
     9d8:	4b07      	ldr	r3, [pc, #28]	; (9f8 <configure_dac_channel+0x5c>)
     9da:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(PIN_PB23, true);	
}
     9dc:	b002      	add	sp, #8
     9de:	bd10      	pop	{r4, pc}
     9e0:	00001a99 	.word	0x00001a99
     9e4:	200002f0 	.word	0x200002f0
     9e8:	00001a9d 	.word	0x00001a9d
     9ec:	00001aa1 	.word	0x00001aa1
     9f0:	00001a5d 	.word	0x00001a5d
     9f4:	00001c69 	.word	0x00001c69
     9f8:	41004480 	.word	0x41004480

000009fc <ui_init>:

void ui_init(void)
{
	/* Initialize LEDs */
	//LED_On(LED_0_PIN);
}
     9fc:	4770      	bx	lr
     9fe:	46c0      	nop			; (mov r8, r8)

00000a00 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			; (mov r8, r8)

00000a04 <ui_wakeup_enable>:


void ui_wakeup_enable(void)
{

}
     a04:	4770      	bx	lr
     a06:	46c0      	nop			; (mov r8, r8)

00000a08 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{

}
     a08:	4770      	bx	lr
     a0a:	46c0      	nop			; (mov r8, r8)

00000a0c <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
     a0c:	4770      	bx	lr
     a0e:	46c0      	nop			; (mov r8, r8)

00000a10 <ui_process>:
	if (b_btn_state != btn0_last_state) {
		ui_hid_report[0] = b_btn_state;
		udi_hid_generic_send_report_in(ui_hid_report);
		btn0_last_state = b_btn_state;
	}*/
}
     a10:	4770      	bx	lr
     a12:	46c0      	nop			; (mov r8, r8)

00000a14 <ui_handle_report>:

void ui_handle_report(uint8_t *report)
{
     a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a16:	1c05      	adds	r5, r0, #0
	uint8_t red;
	uint8_t green;
	uint8_t blue;	
	int i;
	count++;
     a18:	4b48      	ldr	r3, [pc, #288]	; (b3c <ui_handle_report+0x128>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	3301      	adds	r3, #1
	if(count > 255)
     a1e:	2bff      	cmp	r3, #255	; 0xff
     a20:	dc02      	bgt.n	a28 <ui_handle_report+0x14>
{
	uint8_t red;
	uint8_t green;
	uint8_t blue;	
	int i;
	count++;
     a22:	4a46      	ldr	r2, [pc, #280]	; (b3c <ui_handle_report+0x128>)
     a24:	6013      	str	r3, [r2, #0]
     a26:	e002      	b.n	a2e <ui_handle_report+0x1a>
	if(count > 255)
		count = 0;
     a28:	2200      	movs	r2, #0
     a2a:	4b44      	ldr	r3, [pc, #272]	; (b3c <ui_handle_report+0x128>)
     a2c:	601a      	str	r2, [r3, #0]
		

	// HID Reports are 8 bytes long. The first byte specifies the function of that report (set motors, get light sensor values, etc).
	switch(report[0]) {
     a2e:	782b      	ldrb	r3, [r5, #0]
     a30:	3b41      	subs	r3, #65	; 0x41
     a32:	b2da      	uxtb	r2, r3
     a34:	2a39      	cmp	r2, #57	; 0x39
     a36:	d879      	bhi.n	b2c <ui_handle_report+0x118>
     a38:	0093      	lsls	r3, r2, #2
     a3a:	4a41      	ldr	r2, [pc, #260]	; (b40 <ui_handle_report+0x12c>)
     a3c:	58d3      	ldr	r3, [r2, r3]
     a3e:	469f      	mov	pc, r3
		// If O, set the LED using bytes 1-3 of the HID report
		case 'O':
			red = report[1];
			green = report[2];
			blue = report[3];
			set_led(red, green, blue);
     a40:	7868      	ldrb	r0, [r5, #1]
     a42:	78a9      	ldrb	r1, [r5, #2]
     a44:	78ea      	ldrb	r2, [r5, #3]
     a46:	4b3f      	ldr	r3, [pc, #252]	; (b44 <ui_handle_report+0x130>)
     a48:	4798      	blx	r3
     a4a:	e06f      	b.n	b2c <ui_handle_report+0x118>
		// If 'L', create an outgoing report with the light sensor values
		case 'L':
			/*lightSensorVals = read_light_sensors(); // returns both values as a 16-bit int, high-byte is left, low-byte is right
			leftLightSensor = lightSensorVals>>8;
			rightLightSensor = lightSensorVals - (leftLightSensor<<8);*/
			ui_hid_report[0] = pulse_width/111;//>>8;//adc_start_read_result(LEFT_LIGHT);
     a4c:	4b3e      	ldr	r3, [pc, #248]	; (b48 <ui_handle_report+0x134>)
     a4e:	8818      	ldrh	r0, [r3, #0]
     a50:	b280      	uxth	r0, r0
     a52:	4c3e      	ldr	r4, [pc, #248]	; (b4c <ui_handle_report+0x138>)
     a54:	216f      	movs	r1, #111	; 0x6f
     a56:	4b3e      	ldr	r3, [pc, #248]	; (b50 <ui_handle_report+0x13c>)
     a58:	4798      	blx	r3
     a5a:	7020      	strb	r0, [r4, #0]
			ui_hid_report[1] = adc_start_read_result(RIGHT_LIGHT);
     a5c:	2003      	movs	r0, #3
     a5e:	4b3d      	ldr	r3, [pc, #244]	; (b54 <ui_handle_report+0x140>)
     a60:	4798      	blx	r3
     a62:	7060      	strb	r0, [r4, #1]
		/*if(initial_orb) {
			initial_orb = 0;
			set_orb0(0,0,0);
		}
		exit_count = 0; */// Reset time-out counter
		break;
     a64:	e062      	b.n	b2c <ui_handle_report+0x118>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
     a66:	4a3c      	ldr	r2, [pc, #240]	; (b58 <ui_handle_report+0x144>)
     a68:	6c11      	ldr	r1, [r2, #64]	; 0x40
     a6a:	2302      	movs	r3, #2
     a6c:	430b      	orrs	r3, r1
     a6e:	6413      	str	r3, [r2, #64]	; 0x40
		// If 'T', create an outgoing report with temperature
		case 'T':
			system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE);
			configure_adc_temp();
     a70:	4b3a      	ldr	r3, [pc, #232]	; (b5c <ui_handle_report+0x148>)
     a72:	4798      	blx	r3
			load_calibration_data();
     a74:	4b3a      	ldr	r3, [pc, #232]	; (b60 <ui_handle_report+0x14c>)
     a76:	4798      	blx	r3
			ui_hid_report[0] = calculate_temperature(adc_start_read_result(ADC_POSITIVE_INPUT_TEMP));
     a78:	2018      	movs	r0, #24
     a7a:	4b36      	ldr	r3, [pc, #216]	; (b54 <ui_handle_report+0x140>)
     a7c:	4798      	blx	r3
     a7e:	b280      	uxth	r0, r0
     a80:	4b38      	ldr	r3, [pc, #224]	; (b64 <ui_handle_report+0x150>)
     a82:	4798      	blx	r3
     a84:	4b38      	ldr	r3, [pc, #224]	; (b68 <ui_handle_report+0x154>)
     a86:	4798      	blx	r3
     a88:	4b30      	ldr	r3, [pc, #192]	; (b4c <ui_handle_report+0x138>)
     a8a:	7018      	strb	r0, [r3, #0]
			configure_adc();
     a8c:	4b37      	ldr	r3, [pc, #220]	; (b6c <ui_handle_report+0x158>)
     a8e:	4798      	blx	r3
		if(initial_orb) {
			initial_orb = 0;
			set_orb0(0,0,0);
		}
		exit_count = 0;*/
		break;
     a90:	e04c      	b.n	b2c <ui_handle_report+0x118>
		case 'M':
		/*if(initial_orb) {
			initial_orb = 0;
			set_orb0(0,0,0);
		}*/
		if(report[2] == 0 && report[4] == 0)
     a92:	78ab      	ldrb	r3, [r5, #2]
     a94:	2b00      	cmp	r3, #0
     a96:	d104      	bne.n	aa2 <ui_handle_report+0x8e>
     a98:	792b      	ldrb	r3, [r5, #4]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d101      	bne.n	aa2 <ui_handle_report+0x8e>
		{
			turn_off_motors();
     a9e:	4b34      	ldr	r3, [pc, #208]	; (b70 <ui_handle_report+0x15c>)
     aa0:	4798      	blx	r3
		}
		
		set_motor_left(report[1], report[2]);
     aa2:	7868      	ldrb	r0, [r5, #1]
     aa4:	78a9      	ldrb	r1, [r5, #2]
     aa6:	4b33      	ldr	r3, [pc, #204]	; (b74 <ui_handle_report+0x160>)
     aa8:	4798      	blx	r3
		set_motor_right(report[3], report[4]);
     aaa:	78e8      	ldrb	r0, [r5, #3]
     aac:	7929      	ldrb	r1, [r5, #4]
     aae:	4b32      	ldr	r3, [pc, #200]	; (b78 <ui_handle_report+0x164>)
     ab0:	4798      	blx	r3
		/*exit_count = 0;*/
		break;
     ab2:	e03b      	b.n	b2c <ui_handle_report+0x118>
		chirp(buzz_duration, buzz_frequency);
		exit_count = 0;*/
		break;
		// Creates an outgoing report with the accelerometer data
		case 'A':
		get_accel_data();
     ab4:	4b31      	ldr	r3, [pc, #196]	; (b7c <ui_handle_report+0x168>)
     ab6:	4798      	blx	r3
		// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
     ab8:	4b31      	ldr	r3, [pc, #196]	; (b80 <ui_handle_report+0x16c>)
     aba:	7859      	ldrb	r1, [r3, #1]
     abc:	781a      	ldrb	r2, [r3, #0]
     abe:	4311      	orrs	r1, r2
     ac0:	789a      	ldrb	r2, [r3, #2]
     ac2:	4311      	orrs	r1, r2
     ac4:	78da      	ldrb	r2, [r3, #3]
     ac6:	1c0b      	adds	r3, r1, #0
     ac8:	4313      	orrs	r3, r2
     aca:	065b      	lsls	r3, r3, #25
     acc:	d50c      	bpl.n	ae8 <ui_handle_report+0xd4>
			get_accel_data();
     ace:	4f2b      	ldr	r7, [pc, #172]	; (b7c <ui_handle_report+0x168>)
		break;
		// Creates an outgoing report with the accelerometer data
		case 'A':
		get_accel_data();
		// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
     ad0:	4c2b      	ldr	r4, [pc, #172]	; (b80 <ui_handle_report+0x16c>)
     ad2:	2640      	movs	r6, #64	; 0x40
			get_accel_data();
     ad4:	47b8      	blx	r7
		break;
		// Creates an outgoing report with the accelerometer data
		case 'A':
		get_accel_data();
		// Checks if the value was read at the same time the register was being updated (invalid result), and if so, repeats the request for data
		while((bufferReceive[0] & 0b01000000) | (bufferReceive[1] & 0b01000000) | (bufferReceive[2] & 0b01000000) | (bufferReceive[3] & 0b01000000)) {
     ad6:	7862      	ldrb	r2, [r4, #1]
     ad8:	7823      	ldrb	r3, [r4, #0]
     ada:	4313      	orrs	r3, r2
     adc:	78a2      	ldrb	r2, [r4, #2]
     ade:	4313      	orrs	r3, r2
     ae0:	78e2      	ldrb	r2, [r4, #3]
     ae2:	4313      	orrs	r3, r2
     ae4:	421e      	tst	r6, r3
     ae6:	d1f5      	bne.n	ad4 <ui_handle_report+0xc0>
			get_accel_data();
		}
		ui_hid_report[0] = 153; // legacy reasons 
     ae8:	4b18      	ldr	r3, [pc, #96]	; (b4c <ui_handle_report+0x138>)
     aea:	2299      	movs	r2, #153	; 0x99
     aec:	701a      	strb	r2, [r3, #0]
		for(i = 1; i < 5; i++) {
			ui_hid_report[i] = bufferReceive[i-1];
     aee:	4a24      	ldr	r2, [pc, #144]	; (b80 <ui_handle_report+0x16c>)
     af0:	7811      	ldrb	r1, [r2, #0]
     af2:	7059      	strb	r1, [r3, #1]
     af4:	7851      	ldrb	r1, [r2, #1]
     af6:	7099      	strb	r1, [r3, #2]
     af8:	7891      	ldrb	r1, [r2, #2]
     afa:	70d9      	strb	r1, [r3, #3]
     afc:	78d2      	ldrb	r2, [r2, #3]
     afe:	711a      	strb	r2, [r3, #4]
     b00:	e014      	b.n	b2c <ui_handle_report+0x118>
		}
		exit_count = 0;*/
		break;
		// Returns the left and right IR values
		case 'I':
		ui_hid_report[0] = read_left_ir();
     b02:	4b20      	ldr	r3, [pc, #128]	; (b84 <ui_handle_report+0x170>)
     b04:	4798      	blx	r3
     b06:	4c11      	ldr	r4, [pc, #68]	; (b4c <ui_handle_report+0x138>)
     b08:	7020      	strb	r0, [r4, #0]
		ui_hid_report[1] = read_right_ir();
     b0a:	4b1f      	ldr	r3, [pc, #124]	; (b88 <ui_handle_report+0x174>)
     b0c:	4798      	blx	r3
     b0e:	7060      	strb	r0, [r4, #1]
		if(initial_orb) {
			initial_orb = 0;
			set_orb0(0,0,0);
		}
		exit_count = 0;*/
		break;
     b10:	e00c      	b.n	b2c <ui_handle_report+0x118>
		blueUp = 0;
		exit_count = 0;*/
		break;
		// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
		case 'z':
		ui_hid_report[0] = count;
     b12:	4b0a      	ldr	r3, [pc, #40]	; (b3c <ui_handle_report+0x128>)
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	4a0d      	ldr	r2, [pc, #52]	; (b4c <ui_handle_report+0x138>)
     b18:	7013      	strb	r3, [r2, #0]
		count++;
     b1a:	3301      	adds	r3, #1
		if(count > 255) {
     b1c:	2bff      	cmp	r3, #255	; 0xff
     b1e:	dc02      	bgt.n	b26 <ui_handle_report+0x112>
		exit_count = 0;*/
		break;
		// Returns an incrementing counter - used to measure cycle time and as a keep-alive.
		case 'z':
		ui_hid_report[0] = count;
		count++;
     b20:	4a06      	ldr	r2, [pc, #24]	; (b3c <ui_handle_report+0x128>)
     b22:	6013      	str	r3, [r2, #0]
     b24:	e002      	b.n	b2c <ui_handle_report+0x118>
		if(count > 255) {
			count = 0;
     b26:	2200      	movs	r2, #0
     b28:	4b04      	ldr	r3, [pc, #16]	; (b3c <ui_handle_report+0x128>)
     b2a:	601a      	str	r2, [r3, #0]
		//exit_count = 0;
		break;
		default:
		break;
	}
	report[0] = 0x00;
     b2c:	2300      	movs	r3, #0
     b2e:	702b      	strb	r3, [r5, #0]
	// Sets last byte of outgoing report to last byte of incoming report so an outgoing report can be matched to its incoming request
	ui_hid_report[7]= report[7];
     b30:	79eb      	ldrb	r3, [r5, #7]
     b32:	4806      	ldr	r0, [pc, #24]	; (b4c <ui_handle_report+0x138>)
     b34:	71c3      	strb	r3, [r0, #7]
	udi_hid_generic_send_report_in(ui_hid_report);
     b36:	4b15      	ldr	r3, [pc, #84]	; (b8c <ui_handle_report+0x178>)
     b38:	4798      	blx	r3
			case '1':
			ui_b_led_blink = true;
			break;
		}
	}*/
}
     b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b3c:	2000012c 	.word	0x2000012c
     b40:	00007708 	.word	0x00007708
     b44:	0000093d 	.word	0x0000093d
     b48:	20000220 	.word	0x20000220
     b4c:	20000130 	.word	0x20000130
     b50:	000055c5 	.word	0x000055c5
     b54:	00005109 	.word	0x00005109
     b58:	40000800 	.word	0x40000800
     b5c:	000051b5 	.word	0x000051b5
     b60:	00005351 	.word	0x00005351
     b64:	0000521d 	.word	0x0000521d
     b68:	00005945 	.word	0x00005945
     b6c:	000050a1 	.word	0x000050a1
     b70:	00000895 	.word	0x00000895
     b74:	0000074d 	.word	0x0000074d
     b78:	000007f1 	.word	0x000007f1
     b7c:	00000571 	.word	0x00000571
     b80:	20000240 	.word	0x20000240
     b84:	00000651 	.word	0x00000651
     b88:	00000661 	.word	0x00000661
     b8c:	00000ca5 	.word	0x00000ca5

00000b90 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     b90:	2000      	movs	r0, #0
     b92:	4770      	bx	lr

00000b94 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     b94:	4b0a      	ldr	r3, [pc, #40]	; (bc0 <udi_hid_generic_setreport+0x2c>)
     b96:	885b      	ldrh	r3, [r3, #2]
     b98:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
		udd_g_ctrlreq.payload_size =
				sizeof(udi_hid_generic_report_feature);
		return true;
	}
	return false;
     b9a:	2000      	movs	r0, #0
}


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     b9c:	2a03      	cmp	r2, #3
     b9e:	d10e      	bne.n	bbe <udi_hid_generic_setreport+0x2a>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     ba0:	32fc      	adds	r2, #252	; 0xfc
     ba2:	421a      	tst	r2, r3
     ba4:	d10b      	bne.n	bbe <udi_hid_generic_setreport+0x2a>
			&& (sizeof(udi_hid_generic_report_feature) ==
					udd_g_ctrlreq.req.wLength)) {
     ba6:	4b06      	ldr	r3, [pc, #24]	; (bc0 <udi_hid_generic_setreport+0x2c>)

static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
			&& (sizeof(udi_hid_generic_report_feature) ==
     ba8:	88db      	ldrh	r3, [r3, #6]
     baa:	2b04      	cmp	r3, #4
     bac:	d107      	bne.n	bbe <udi_hid_generic_setreport+0x2a>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     bae:	4b04      	ldr	r3, [pc, #16]	; (bc0 <udi_hid_generic_setreport+0x2c>)
     bb0:	4a04      	ldr	r2, [pc, #16]	; (bc4 <udi_hid_generic_setreport+0x30>)
     bb2:	609a      	str	r2, [r3, #8]
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     bb4:	4a04      	ldr	r2, [pc, #16]	; (bc8 <udi_hid_generic_setreport+0x34>)
     bb6:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     bb8:	2204      	movs	r2, #4
     bba:	819a      	strh	r2, [r3, #12]
				sizeof(udi_hid_generic_report_feature);
		return true;
     bbc:	3001      	adds	r0, #1
	}
	return false;
}
     bbe:	4770      	bx	lr
     bc0:	20000558 	.word	0x20000558
     bc4:	2000014c 	.word	0x2000014c
     bc8:	00000c85 	.word	0x00000c85

00000bcc <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     bcc:	2201      	movs	r2, #1
     bce:	4b01      	ldr	r3, [pc, #4]	; (bd4 <udi_hid_generic_report_in_sent+0x8>)
     bd0:	701a      	strb	r2, [r3, #0]
}
     bd2:	4770      	bx	lr
     bd4:	20000151 	.word	0x20000151

00000bd8 <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     bd8:	b510      	push	{r4, lr}
     bda:	b082      	sub	sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     bdc:	4b04      	ldr	r3, [pc, #16]	; (bf0 <udi_hid_generic_report_out_enable+0x18>)
     bde:	9300      	str	r3, [sp, #0]
     be0:	2002      	movs	r0, #2
     be2:	2100      	movs	r1, #0
     be4:	4a03      	ldr	r2, [pc, #12]	; (bf4 <udi_hid_generic_report_out_enable+0x1c>)
     be6:	2308      	movs	r3, #8
     be8:	4c03      	ldr	r4, [pc, #12]	; (bf8 <udi_hid_generic_report_out_enable+0x20>)
     bea:	47a0      	blx	r4
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     bec:	b002      	add	sp, #8
     bee:	bd10      	pop	{r4, pc}
     bf0:	00000c31 	.word	0x00000c31
     bf4:	20000138 	.word	0x20000138
     bf8:	00003e25 	.word	0x00003e25

00000bfc <udi_hid_generic_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
     bfc:	b508      	push	{r3, lr}
	// Initialize internal values
	udi_hid_generic_rate = 0;
     bfe:	2300      	movs	r3, #0
     c00:	4a06      	ldr	r2, [pc, #24]	; (c1c <udi_hid_generic_enable+0x20>)
     c02:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_protocol = 0;
     c04:	4a06      	ldr	r2, [pc, #24]	; (c20 <udi_hid_generic_enable+0x24>)
     c06:	7013      	strb	r3, [r2, #0]
	udi_hid_generic_b_report_in_free = true;
     c08:	2201      	movs	r2, #1
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <udi_hid_generic_enable+0x28>)
     c0c:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     c0e:	4b06      	ldr	r3, [pc, #24]	; (c28 <udi_hid_generic_enable+0x2c>)
     c10:	4798      	blx	r3
     c12:	2800      	cmp	r0, #0
     c14:	d001      	beq.n	c1a <udi_hid_generic_enable+0x1e>
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     c16:	4b05      	ldr	r3, [pc, #20]	; (c2c <udi_hid_generic_enable+0x30>)
     c18:	4798      	blx	r3
}
     c1a:	bd08      	pop	{r3, pc}
     c1c:	20000140 	.word	0x20000140
     c20:	20000150 	.word	0x20000150
     c24:	20000151 	.word	0x20000151
     c28:	00000bd9 	.word	0x00000bd9
     c2c:	000055a5 	.word	0x000055a5

00000c30 <udi_hid_generic_report_out_received>:
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
}

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
     c30:	b508      	push	{r3, lr}
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     c32:	2800      	cmp	r0, #0
     c34:	d106      	bne.n	c44 <udi_hid_generic_report_out_received+0x14>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     c36:	2908      	cmp	r1, #8
     c38:	d102      	bne.n	c40 <udi_hid_generic_report_out_received+0x10>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     c3a:	4803      	ldr	r0, [pc, #12]	; (c48 <udi_hid_generic_report_out_received+0x18>)
     c3c:	4b03      	ldr	r3, [pc, #12]	; (c4c <udi_hid_generic_report_out_received+0x1c>)
     c3e:	4798      	blx	r3
	}
	udi_hid_generic_report_out_enable();
     c40:	4b03      	ldr	r3, [pc, #12]	; (c50 <udi_hid_generic_report_out_received+0x20>)
     c42:	4798      	blx	r3
}
     c44:	bd08      	pop	{r3, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	20000138 	.word	0x20000138
     c4c:	00000a15 	.word	0x00000a15
     c50:	00000bd9 	.word	0x00000bd9

00000c54 <udi_hid_generic_disable>:
	return UDI_HID_GENERIC_ENABLE_EXT();
}


void udi_hid_generic_disable(void)
{
     c54:	b508      	push	{r3, lr}
	UDI_HID_GENERIC_DISABLE_EXT();
     c56:	4b01      	ldr	r3, [pc, #4]	; (c5c <udi_hid_generic_disable+0x8>)
     c58:	4798      	blx	r3
}
     c5a:	bd08      	pop	{r3, pc}
     c5c:	000055b5 	.word	0x000055b5

00000c60 <udi_hid_generic_setup>:


bool udi_hid_generic_setup(void)
{
     c60:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_generic_rate,
     c62:	4803      	ldr	r0, [pc, #12]	; (c70 <udi_hid_generic_setup+0x10>)
     c64:	4903      	ldr	r1, [pc, #12]	; (c74 <udi_hid_generic_setup+0x14>)
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <udi_hid_generic_setup+0x18>)
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <udi_hid_generic_setup+0x1c>)
     c6a:	4c05      	ldr	r4, [pc, #20]	; (c80 <udi_hid_generic_setup+0x20>)
     c6c:	47a0      	blx	r4
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     c6e:	bd10      	pop	{r4, pc}
     c70:	20000140 	.word	0x20000140
     c74:	20000150 	.word	0x20000150
     c78:	2000000c 	.word	0x2000000c
     c7c:	00000b95 	.word	0x00000b95
     c80:	00000d1d 	.word	0x00000d1d

00000c84 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     c84:	b508      	push	{r3, lr}
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     c86:	4b04      	ldr	r3, [pc, #16]	; (c98 <udi_hid_generic_setfeature_valid+0x14>)
     c88:	899b      	ldrh	r3, [r3, #12]
     c8a:	2b04      	cmp	r3, #4
     c8c:	d102      	bne.n	c94 <udi_hid_generic_setfeature_valid+0x10>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     c8e:	4803      	ldr	r0, [pc, #12]	; (c9c <udi_hid_generic_setfeature_valid+0x18>)
     c90:	4b03      	ldr	r3, [pc, #12]	; (ca0 <udi_hid_generic_setfeature_valid+0x1c>)
     c92:	4798      	blx	r3
}
     c94:	bd08      	pop	{r3, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	20000558 	.word	0x20000558
     c9c:	2000014c 	.word	0x2000014c
     ca0:	000055c1 	.word	0x000055c1

00000ca4 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     ca4:	b530      	push	{r4, r5, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	1c01      	adds	r1, r0, #0
	if (!udi_hid_generic_b_report_in_free)
     caa:	4b16      	ldr	r3, [pc, #88]	; (d04 <udi_hid_generic_send_report_in+0x60>)
     cac:	7818      	ldrb	r0, [r3, #0]
     cae:	2800      	cmp	r0, #0
     cb0:	d026      	beq.n	d00 <udi_hid_generic_send_report_in+0x5c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     cb2:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     cb6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     cb8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     cbc:	2300      	movs	r3, #0
     cbe:	4a12      	ldr	r2, [pc, #72]	; (d08 <udi_hid_generic_send_report_in+0x64>)
     cc0:	7013      	strb	r3, [r2, #0]
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     cc2:	4c12      	ldr	r4, [pc, #72]	; (d0c <udi_hid_generic_send_report_in+0x68>)
     cc4:	6023      	str	r3, [r4, #0]
     cc6:	6063      	str	r3, [r4, #4]
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     cc8:	1c20      	adds	r0, r4, #0
     cca:	2208      	movs	r2, #8
     ccc:	4b10      	ldr	r3, [pc, #64]	; (d10 <udi_hid_generic_send_report_in+0x6c>)
     cce:	4798      	blx	r3
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     cd0:	4b10      	ldr	r3, [pc, #64]	; (d14 <udi_hid_generic_send_report_in+0x70>)
     cd2:	9300      	str	r3, [sp, #0]
     cd4:	2081      	movs	r0, #129	; 0x81
     cd6:	2100      	movs	r1, #0
     cd8:	1c22      	adds	r2, r4, #0
     cda:	2308      	movs	r3, #8
     cdc:	4c0e      	ldr	r4, [pc, #56]	; (d18 <udi_hid_generic_send_report_in+0x74>)
     cde:	47a0      	blx	r4
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     ce0:	2301      	movs	r3, #1
     ce2:	4058      	eors	r0, r3
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <udi_hid_generic_send_report_in+0x60>)
     ce6:	7018      	strb	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     ce8:	2d00      	cmp	r5, #0
     cea:	d105      	bne.n	cf8 <udi_hid_generic_send_report_in+0x54>
		cpu_irq_enable();
     cec:	2201      	movs	r2, #1
     cee:	4b06      	ldr	r3, [pc, #24]	; (d08 <udi_hid_generic_send_report_in+0x64>)
     cf0:	701a      	strb	r2, [r3, #0]
     cf2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     cf6:	b662      	cpsie	i
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     cf8:	4b02      	ldr	r3, [pc, #8]	; (d04 <udi_hid_generic_send_report_in+0x60>)
     cfa:	7818      	ldrb	r0, [r3, #0]
     cfc:	2301      	movs	r3, #1
     cfe:	4058      	eors	r0, r3

}
     d00:	b003      	add	sp, #12
     d02:	bd30      	pop	{r4, r5, pc}
     d04:	20000151 	.word	0x20000151
     d08:	20000108 	.word	0x20000108
     d0c:	20000144 	.word	0x20000144
     d10:	000076d5 	.word	0x000076d5
     d14:	00000bcd 	.word	0x00000bcd
     d18:	00003e25 	.word	0x00003e25

00000d1c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     d1c:	b538      	push	{r3, r4, r5, lr}
     d1e:	1c04      	adds	r4, r0, #0
     d20:	1c15      	adds	r5, r2, #0
	if (Udd_setup_is_in()) {
     d22:	4a3a      	ldr	r2, [pc, #232]	; (e0c <udi_hid_setup+0xf0>)
     d24:	7812      	ldrb	r2, [r2, #0]
     d26:	b250      	sxtb	r0, r2
     d28:	2800      	cmp	r0, #0
     d2a:	da4d      	bge.n	dc8 <udi_hid_setup+0xac>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d2c:	2060      	movs	r0, #96	; 0x60
     d2e:	4002      	ands	r2, r0
     d30:	d130      	bne.n	d94 <udi_hid_setup+0x78>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     d32:	4836      	ldr	r0, [pc, #216]	; (e0c <udi_hid_setup+0xf0>)
     d34:	7840      	ldrb	r0, [r0, #1]
     d36:	2806      	cmp	r0, #6
     d38:	d12c      	bne.n	d94 <udi_hid_setup+0x78>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     d3a:	4b35      	ldr	r3, [pc, #212]	; (e10 <udi_hid_setup+0xf4>)
     d3c:	4798      	blx	r3
     d3e:	1c03      	adds	r3, r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     d40:	7a82      	ldrb	r2, [r0, #10]
		return false;
     d42:	2000      	movs	r0, #0

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     d44:	2a21      	cmp	r2, #33	; 0x21
     d46:	d15f      	bne.n	e08 <udi_hid_setup+0xec>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     d48:	4a30      	ldr	r2, [pc, #192]	; (e0c <udi_hid_setup+0xf0>)
     d4a:	8852      	ldrh	r2, [r2, #2]
     d4c:	0a12      	lsrs	r2, r2, #8
     d4e:	2a21      	cmp	r2, #33	; 0x21
     d50:	d10d      	bne.n	d6e <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     d52:	4a2e      	ldr	r2, [pc, #184]	; (e0c <udi_hid_setup+0xf0>)
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     d54:	1c19      	adds	r1, r3, #0
     d56:	3109      	adds	r1, #9
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     d58:	6091      	str	r1, [r2, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     d5a:	7a5b      	ldrb	r3, [r3, #9]
     d5c:	88d0      	ldrh	r0, [r2, #6]
     d5e:	1c19      	adds	r1, r3, #0
     d60:	b29b      	uxth	r3, r3
     d62:	4283      	cmp	r3, r0
     d64:	d900      	bls.n	d68 <udi_hid_setup+0x4c>
     d66:	1c01      	adds	r1, r0, #0
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
     d68:	8191      	strh	r1, [r2, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     d6a:	2001      	movs	r0, #1
     d6c:	e04c      	b.n	e08 <udi_hid_setup+0xec>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     d6e:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     d70:	2000      	movs	r0, #0
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     d72:	4291      	cmp	r1, r2
     d74:	d148      	bne.n	e08 <udi_hid_setup+0xec>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     d76:	4825      	ldr	r0, [pc, #148]	; (e0c <udi_hid_setup+0xf0>)
     d78:	6085      	str	r5, [r0, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     d7a:	7c19      	ldrb	r1, [r3, #16]
     d7c:	7c5a      	ldrb	r2, [r3, #17]
     d7e:	0212      	lsls	r2, r2, #8
     d80:	430a      	orrs	r2, r1
     d82:	88c3      	ldrh	r3, [r0, #6]
     d84:	1c19      	adds	r1, r3, #0
     d86:	b29b      	uxth	r3, r3
     d88:	4293      	cmp	r3, r2
     d8a:	d900      	bls.n	d8e <udi_hid_setup+0x72>
     d8c:	1c11      	adds	r1, r2, #0
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
     d8e:	8181      	strh	r1, [r0, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     d90:	2001      	movs	r0, #1
     d92:	e039      	b.n	e08 <udi_hid_setup+0xec>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     d94:	2000      	movs	r0, #0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     d96:	2a20      	cmp	r2, #32
     d98:	d136      	bne.n	e08 <udi_hid_setup+0xec>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     d9a:	4a1c      	ldr	r2, [pc, #112]	; (e0c <udi_hid_setup+0xf0>)
     d9c:	7852      	ldrb	r2, [r2, #1]
     d9e:	2a02      	cmp	r2, #2
     da0:	d006      	beq.n	db0 <udi_hid_setup+0x94>
     da2:	2a03      	cmp	r2, #3
     da4:	d00a      	beq.n	dbc <udi_hid_setup+0xa0>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     da6:	2000      	movs	r0, #0
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     da8:	2a01      	cmp	r2, #1
     daa:	d12d      	bne.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     dac:	4798      	blx	r3
     dae:	e02b      	b.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     db0:	4b16      	ldr	r3, [pc, #88]	; (e0c <udi_hid_setup+0xf0>)
     db2:	609c      	str	r4, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     db4:	2201      	movs	r2, #1
     db6:	819a      	strh	r2, [r3, #12]
				return true;
     db8:	2001      	movs	r0, #1
     dba:	e025      	b.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     dbc:	4b13      	ldr	r3, [pc, #76]	; (e0c <udi_hid_setup+0xf0>)
     dbe:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     dc0:	2201      	movs	r2, #1
     dc2:	819a      	strh	r2, [r3, #12]
				return true;
     dc4:	2001      	movs	r0, #1
     dc6:	e01f      	b.n	e08 <udi_hid_setup+0xec>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     dc8:	2060      	movs	r0, #96	; 0x60
     dca:	4002      	ands	r2, r0
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     dcc:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     dce:	2a20      	cmp	r2, #32
     dd0:	d11a      	bne.n	e08 <udi_hid_setup+0xec>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     dd2:	4a0e      	ldr	r2, [pc, #56]	; (e0c <udi_hid_setup+0xf0>)
     dd4:	7852      	ldrb	r2, [r2, #1]
     dd6:	2a0a      	cmp	r2, #10
     dd8:	d006      	beq.n	de8 <udi_hid_setup+0xcc>
     dda:	2a0b      	cmp	r2, #11
     ddc:	d00a      	beq.n	df4 <udi_hid_setup+0xd8>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     dde:	2000      	movs	r0, #0
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     de0:	2a09      	cmp	r2, #9
     de2:	d111      	bne.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     de4:	4798      	blx	r3
     de6:	e00f      	b.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     de8:	4b08      	ldr	r3, [pc, #32]	; (e0c <udi_hid_setup+0xf0>)
     dea:	885b      	ldrh	r3, [r3, #2]
     dec:	0a1b      	lsrs	r3, r3, #8
     dee:	7023      	strb	r3, [r4, #0]
				return true;
     df0:	2001      	movs	r0, #1
     df2:	e009      	b.n	e08 <udi_hid_setup+0xec>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     df4:	4b05      	ldr	r3, [pc, #20]	; (e0c <udi_hid_setup+0xf0>)
     df6:	88db      	ldrh	r3, [r3, #6]
					return false;
     df8:	2000      	movs	r0, #0
			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     dfa:	2b00      	cmp	r3, #0
     dfc:	d104      	bne.n	e08 <udi_hid_setup+0xec>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     dfe:	4b03      	ldr	r3, [pc, #12]	; (e0c <udi_hid_setup+0xf0>)
     e00:	885b      	ldrh	r3, [r3, #2]
     e02:	700b      	strb	r3, [r1, #0]
				return true;
     e04:	3001      	adds	r0, #1
     e06:	e7ff      	b.n	e08 <udi_hid_setup+0xec>
			}
		}
	}
	return false;	// Request not supported
}
     e08:	bd38      	pop	{r3, r4, r5, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	20000558 	.word	0x20000558
     e10:	00000fa1 	.word	0x00000fa1

00000e14 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     e14:	b510      	push	{r4, lr}
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     e16:	4b11      	ldr	r3, [pc, #68]	; (e5c <udc_next_desc_in_iface+0x48>)
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	681c      	ldr	r4, [r3, #0]
     e1c:	78a3      	ldrb	r3, [r4, #2]
     e1e:	78e2      	ldrb	r2, [r4, #3]
     e20:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     e22:	431a      	orrs	r2, r3
     e24:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     e26:	7803      	ldrb	r3, [r0, #0]
     e28:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     e2a:	4290      	cmp	r0, r2
     e2c:	d210      	bcs.n	e50 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     e2e:	7843      	ldrb	r3, [r0, #1]
     e30:	2b04      	cmp	r3, #4
     e32:	d00f      	beq.n	e54 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     e34:	428b      	cmp	r3, r1
     e36:	d105      	bne.n	e44 <udc_next_desc_in_iface+0x30>
     e38:	e00f      	b.n	e5a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     e3a:	7843      	ldrb	r3, [r0, #1]
     e3c:	2b04      	cmp	r3, #4
     e3e:	d00b      	beq.n	e58 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     e40:	428b      	cmp	r3, r1
     e42:	d00a      	beq.n	e5a <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     e44:	7803      	ldrb	r3, [r0, #0]
     e46:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     e48:	4290      	cmp	r0, r2
     e4a:	d3f6      	bcc.n	e3a <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     e4c:	2000      	movs	r0, #0
     e4e:	e004      	b.n	e5a <udc_next_desc_in_iface+0x46>
     e50:	2000      	movs	r0, #0
     e52:	e002      	b.n	e5a <udc_next_desc_in_iface+0x46>
     e54:	2000      	movs	r0, #0
     e56:	e000      	b.n	e5a <udc_next_desc_in_iface+0x46>
     e58:	2000      	movs	r0, #0
}
     e5a:	bd10      	pop	{r4, pc}
     e5c:	20000154 	.word	0x20000154

00000e60 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     e60:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     e62:	4b03      	ldr	r3, [pc, #12]	; (e70 <udc_valid_address+0x10>)
     e64:	885b      	ldrh	r3, [r3, #2]
     e66:	207f      	movs	r0, #127	; 0x7f
     e68:	4018      	ands	r0, r3
     e6a:	4b02      	ldr	r3, [pc, #8]	; (e74 <udc_valid_address+0x14>)
     e6c:	4798      	blx	r3
}
     e6e:	bd08      	pop	{r3, pc}
     e70:	20000558 	.word	0x20000558
     e74:	00003ffd 	.word	0x00003ffd

00000e78 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     e78:	b510      	push	{r4, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     e7a:	4b16      	ldr	r3, [pc, #88]	; (ed4 <udc_update_iface_desc+0x5c>)
     e7c:	781b      	ldrb	r3, [r3, #0]
		return false;
     e7e:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     e80:	2b00      	cmp	r3, #0
     e82:	d024      	beq.n	ece <udc_update_iface_desc+0x56>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     e84:	4b14      	ldr	r3, [pc, #80]	; (ed8 <udc_update_iface_desc+0x60>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	791c      	ldrb	r4, [r3, #4]
     e8c:	4284      	cmp	r4, r0
     e8e:	d91e      	bls.n	ece <udc_update_iface_desc+0x56>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     e90:	4a12      	ldr	r2, [pc, #72]	; (edc <udc_update_iface_desc+0x64>)
     e92:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     e94:	789a      	ldrb	r2, [r3, #2]
     e96:	78dc      	ldrb	r4, [r3, #3]
     e98:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     e9a:	4314      	orrs	r4, r2
     e9c:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     e9e:	42a3      	cmp	r3, r4
     ea0:	d214      	bcs.n	ecc <udc_update_iface_desc+0x54>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     ea2:	785a      	ldrb	r2, [r3, #1]
     ea4:	2a04      	cmp	r2, #4
     ea6:	d109      	bne.n	ebc <udc_update_iface_desc+0x44>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     ea8:	789a      	ldrb	r2, [r3, #2]
     eaa:	4282      	cmp	r2, r0
     eac:	d106      	bne.n	ebc <udc_update_iface_desc+0x44>
     eae:	78da      	ldrb	r2, [r3, #3]
     eb0:	428a      	cmp	r2, r1
     eb2:	d103      	bne.n	ebc <udc_update_iface_desc+0x44>
     eb4:	4a09      	ldr	r2, [pc, #36]	; (edc <udc_update_iface_desc+0x64>)
     eb6:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     eb8:	2201      	movs	r2, #1
     eba:	e008      	b.n	ece <udc_update_iface_desc+0x56>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     ebc:	781a      	ldrb	r2, [r3, #0]
     ebe:	189b      	adds	r3, r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     ec0:	42a3      	cmp	r3, r4
     ec2:	d3ee      	bcc.n	ea2 <udc_update_iface_desc+0x2a>
     ec4:	4a05      	ldr	r2, [pc, #20]	; (edc <udc_update_iface_desc+0x64>)
     ec6:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     ec8:	2200      	movs	r2, #0
     eca:	e000      	b.n	ece <udc_update_iface_desc+0x56>
     ecc:	2200      	movs	r2, #0
}
     ece:	1c10      	adds	r0, r2, #0
     ed0:	bd10      	pop	{r4, pc}
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	20000160 	.word	0x20000160
     ed8:	20000154 	.word	0x20000154
     edc:	20000164 	.word	0x20000164

00000ee0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee2:	4647      	mov	r7, r8
     ee4:	b480      	push	{r7}
     ee6:	1c04      	adds	r4, r0, #0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     ee8:	2100      	movs	r1, #0
     eea:	4b12      	ldr	r3, [pc, #72]	; (f34 <udc_iface_disable+0x54>)
     eec:	4798      	blx	r3
     eee:	1e05      	subs	r5, r0, #0
     ef0:	d01c      	beq.n	f2c <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     ef2:	4b11      	ldr	r3, [pc, #68]	; (f38 <udc_iface_disable+0x58>)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	685b      	ldr	r3, [r3, #4]
     ef8:	00a2      	lsls	r2, r4, #2
     efa:	58d3      	ldr	r3, [r2, r3]
     efc:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     efe:	68db      	ldr	r3, [r3, #12]
     f00:	4798      	blx	r3
     f02:	1c01      	adds	r1, r0, #0
     f04:	1c20      	adds	r0, r4, #0
     f06:	4b0b      	ldr	r3, [pc, #44]	; (f34 <udc_iface_disable+0x54>)
     f08:	4798      	blx	r3
     f0a:	1e05      	subs	r5, r0, #0
     f0c:	d00e      	beq.n	f2c <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     f0e:	4b0b      	ldr	r3, [pc, #44]	; (f3c <udc_iface_disable+0x5c>)
     f10:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f12:	4e0b      	ldr	r6, [pc, #44]	; (f40 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     f14:	4f0b      	ldr	r7, [pc, #44]	; (f44 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f16:	1c20      	adds	r0, r4, #0
     f18:	2105      	movs	r1, #5
     f1a:	47b0      	blx	r6
     f1c:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     f1e:	d002      	beq.n	f26 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     f20:	7880      	ldrb	r0, [r0, #2]
     f22:	47b8      	blx	r7
		}
     f24:	e7f7      	b.n	f16 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
     f26:	4643      	mov	r3, r8
     f28:	685b      	ldr	r3, [r3, #4]
     f2a:	4798      	blx	r3
	return true;
}
     f2c:	1c28      	adds	r0, r5, #0
     f2e:	bc04      	pop	{r2}
     f30:	4690      	mov	r8, r2
     f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f34:	00000e79 	.word	0x00000e79
     f38:	20000154 	.word	0x20000154
     f3c:	20000164 	.word	0x20000164
     f40:	00000e15 	.word	0x00000e15
     f44:	00003b3d 	.word	0x00003b3d

00000f48 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f4a:	1c05      	adds	r5, r0, #0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     f4c:	4b0f      	ldr	r3, [pc, #60]	; (f8c <udc_iface_enable+0x44>)
     f4e:	4798      	blx	r3
     f50:	2800      	cmp	r0, #0
     f52:	d019      	beq.n	f88 <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     f54:	4b0e      	ldr	r3, [pc, #56]	; (f90 <udc_iface_enable+0x48>)
     f56:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f58:	4e0e      	ldr	r6, [pc, #56]	; (f94 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     f5a:	4f0f      	ldr	r7, [pc, #60]	; (f98 <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     f5c:	1c20      	adds	r0, r4, #0
     f5e:	2105      	movs	r1, #5
     f60:	47b0      	blx	r6
     f62:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     f64:	d009      	beq.n	f7a <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     f66:	7880      	ldrb	r0, [r0, #2]
     f68:	78e1      	ldrb	r1, [r4, #3]
     f6a:	7923      	ldrb	r3, [r4, #4]
     f6c:	7962      	ldrb	r2, [r4, #5]
     f6e:	0212      	lsls	r2, r2, #8
     f70:	431a      	orrs	r2, r3
     f72:	47b8      	blx	r7
     f74:	2800      	cmp	r0, #0
     f76:	d1f1      	bne.n	f5c <udc_iface_enable+0x14>
     f78:	e006      	b.n	f88 <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     f7a:	4b08      	ldr	r3, [pc, #32]	; (f9c <udc_iface_enable+0x54>)
     f7c:	681b      	ldr	r3, [r3, #0]
     f7e:	685b      	ldr	r3, [r3, #4]
     f80:	00ad      	lsls	r5, r5, #2
     f82:	58eb      	ldr	r3, [r5, r3]
     f84:	681b      	ldr	r3, [r3, #0]
     f86:	4798      	blx	r3
}
     f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00000e79 	.word	0x00000e79
     f90:	20000164 	.word	0x20000164
     f94:	00000e15 	.word	0x00000e15
     f98:	00003b95 	.word	0x00003b95
     f9c:	20000154 	.word	0x20000154

00000fa0 <udc_get_interface_desc>:
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
     fa0:	4b01      	ldr	r3, [pc, #4]	; (fa8 <udc_get_interface_desc+0x8>)
     fa2:	6818      	ldr	r0, [r3, #0]
}
     fa4:	4770      	bx	lr
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	20000164 	.word	0x20000164

00000fac <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     fac:	b508      	push	{r3, lr}
	udd_enable();
     fae:	4b01      	ldr	r3, [pc, #4]	; (fb4 <udc_start+0x8>)
     fb0:	4798      	blx	r3
}
     fb2:	bd08      	pop	{r3, pc}
     fb4:	000040ad 	.word	0x000040ad

00000fb8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     fb8:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     fba:	4b11      	ldr	r3, [pc, #68]	; (1000 <udc_reset+0x48>)
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d011      	beq.n	fe6 <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fc2:	4b10      	ldr	r3, [pc, #64]	; (1004 <udc_reset+0x4c>)
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     fc8:	791b      	ldrb	r3, [r3, #4]
     fca:	2b00      	cmp	r3, #0
     fcc:	d00b      	beq.n	fe6 <udc_reset+0x2e>
     fce:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     fd0:	4e0d      	ldr	r6, [pc, #52]	; (1008 <udc_reset+0x50>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fd2:	4d0c      	ldr	r5, [pc, #48]	; (1004 <udc_reset+0x4c>)
				iface_num++) {
			udc_iface_disable(iface_num);
     fd4:	1c20      	adds	r0, r4, #0
     fd6:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     fd8:	3401      	adds	r4, #1
     fda:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     fdc:	682b      	ldr	r3, [r5, #0]
     fde:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     fe0:	791b      	ldrb	r3, [r3, #4]
     fe2:	42a3      	cmp	r3, r4
     fe4:	d8f6      	bhi.n	fd4 <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     fe6:	2200      	movs	r2, #0
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <udc_reset+0x48>)
     fea:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     fec:	4b07      	ldr	r3, [pc, #28]	; (100c <udc_reset+0x54>)
     fee:	881b      	ldrh	r3, [r3, #0]
     ff0:	079b      	lsls	r3, r3, #30
     ff2:	d501      	bpl.n	ff8 <udc_reset+0x40>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     ff4:	4b06      	ldr	r3, [pc, #24]	; (1010 <udc_reset+0x58>)
     ff6:	4798      	blx	r3
	}
#endif
	udc_device_status =
     ff8:	2200      	movs	r2, #0
     ffa:	4b04      	ldr	r3, [pc, #16]	; (100c <udc_reset+0x54>)
     ffc:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     ffe:	bd70      	pop	{r4, r5, r6, pc}
    1000:	20000160 	.word	0x20000160
    1004:	20000154 	.word	0x20000154
    1008:	00000ee1 	.word	0x00000ee1
    100c:	2000015c 	.word	0x2000015c
    1010:	00005599 	.word	0x00005599

00001014 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1014:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
    1016:	4b0d      	ldr	r3, [pc, #52]	; (104c <udc_sof_notify+0x38>)
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	2b00      	cmp	r3, #0
    101c:	d015      	beq.n	104a <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    101e:	4b0c      	ldr	r3, [pc, #48]	; (1050 <udc_sof_notify+0x3c>)
    1020:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1022:	681a      	ldr	r2, [r3, #0]
    1024:	7912      	ldrb	r2, [r2, #4]
    1026:	2a00      	cmp	r2, #0
    1028:	d00f      	beq.n	104a <udc_sof_notify+0x36>
    102a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    102c:	4d08      	ldr	r5, [pc, #32]	; (1050 <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    102e:	685b      	ldr	r3, [r3, #4]
    1030:	00a2      	lsls	r2, r4, #2
    1032:	58d3      	ldr	r3, [r2, r3]
    1034:	691b      	ldr	r3, [r3, #16]
    1036:	2b00      	cmp	r3, #0
    1038:	d000      	beq.n	103c <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    103a:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    103c:	3401      	adds	r4, #1
    103e:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1040:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1042:	681a      	ldr	r2, [r3, #0]
    1044:	7912      	ldrb	r2, [r2, #4]
    1046:	42a2      	cmp	r2, r4
    1048:	d8f1      	bhi.n	102e <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    104a:	bd38      	pop	{r3, r4, r5, pc}
    104c:	20000160 	.word	0x20000160
    1050:	20000154 	.word	0x20000154

00001054 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1056:	4bb8      	ldr	r3, [pc, #736]	; (1338 <udc_process_setup+0x2e4>)
    1058:	2200      	movs	r2, #0
    105a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    105c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    105e:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	b25a      	sxtb	r2, r3
    1064:	2a00      	cmp	r2, #0
    1066:	db00      	blt.n	106a <udc_process_setup+0x16>
    1068:	e207      	b.n	147a <udc_process_setup+0x426>
		if (udd_g_ctrlreq.req.wLength == 0) {
    106a:	4ab3      	ldr	r2, [pc, #716]	; (1338 <udc_process_setup+0x2e4>)
    106c:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    106e:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
    1070:	2a00      	cmp	r2, #0
    1072:	d000      	beq.n	1076 <udc_process_setup+0x22>
    1074:	e205      	b.n	1482 <udc_process_setup+0x42e>
    1076:	e209      	b.n	148c <udc_process_setup+0x438>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1078:	211f      	movs	r1, #31
    107a:	400b      	ands	r3, r1
    107c:	d17c      	bne.n	1178 <udc_process_setup+0x124>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    107e:	49ae      	ldr	r1, [pc, #696]	; (1338 <udc_process_setup+0x2e4>)
    1080:	7849      	ldrb	r1, [r1, #1]
    1082:	2906      	cmp	r1, #6
    1084:	d00b      	beq.n	109e <udc_process_setup+0x4a>
    1086:	2908      	cmp	r1, #8
    1088:	d06e      	beq.n	1168 <udc_process_setup+0x114>
    108a:	2900      	cmp	r1, #0
    108c:	d174      	bne.n	1178 <udc_process_setup+0x124>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    108e:	2a02      	cmp	r2, #2
    1090:	d000      	beq.n	1094 <udc_process_setup+0x40>
    1092:	e19f      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1094:	48a9      	ldr	r0, [pc, #676]	; (133c <udc_process_setup+0x2e8>)
    1096:	3102      	adds	r1, #2
    1098:	4ba9      	ldr	r3, [pc, #676]	; (1340 <udc_process_setup+0x2ec>)
    109a:	4798      	blx	r3
    109c:	e1f5      	b.n	148a <udc_process_setup+0x436>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    109e:	4ba6      	ldr	r3, [pc, #664]	; (1338 <udc_process_setup+0x2e4>)
    10a0:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    10a2:	0a1a      	lsrs	r2, r3, #8
    10a4:	2a02      	cmp	r2, #2
    10a6:	d010      	beq.n	10ca <udc_process_setup+0x76>
    10a8:	b2d1      	uxtb	r1, r2
    10aa:	2902      	cmp	r1, #2
    10ac:	d802      	bhi.n	10b4 <udc_process_setup+0x60>
    10ae:	2a01      	cmp	r2, #1
    10b0:	d005      	beq.n	10be <udc_process_setup+0x6a>
    10b2:	e18a      	b.n	13ca <udc_process_setup+0x376>
    10b4:	2a03      	cmp	r2, #3
    10b6:	d02a      	beq.n	110e <udc_process_setup+0xba>
    10b8:	2a0f      	cmp	r2, #15
    10ba:	d01c      	beq.n	10f6 <udc_process_setup+0xa2>
    10bc:	e185      	b.n	13ca <udc_process_setup+0x376>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    10be:	4ba1      	ldr	r3, [pc, #644]	; (1344 <udc_process_setup+0x2f0>)
    10c0:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    10c2:	7801      	ldrb	r1, [r0, #0]
    10c4:	4b9e      	ldr	r3, [pc, #632]	; (1340 <udc_process_setup+0x2ec>)
    10c6:	4798      	blx	r3
    10c8:	e045      	b.n	1156 <udc_process_setup+0x102>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    10ca:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    10cc:	4a9d      	ldr	r2, [pc, #628]	; (1344 <udc_process_setup+0x2f0>)
    10ce:	6812      	ldr	r2, [r2, #0]
    10d0:	7c52      	ldrb	r2, [r2, #17]
    10d2:	429a      	cmp	r2, r3
    10d4:	d800      	bhi.n	10d8 <udc_process_setup+0x84>
    10d6:	e17d      	b.n	13d4 <udc_process_setup+0x380>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    10d8:	4a9a      	ldr	r2, [pc, #616]	; (1344 <udc_process_setup+0x2f0>)
    10da:	6852      	ldr	r2, [r2, #4]
    10dc:	00db      	lsls	r3, r3, #3
    10de:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    10e0:	7883      	ldrb	r3, [r0, #2]
    10e2:	78c1      	ldrb	r1, [r0, #3]
    10e4:	0209      	lsls	r1, r1, #8
    10e6:	4319      	orrs	r1, r3
    10e8:	4b95      	ldr	r3, [pc, #596]	; (1340 <udc_process_setup+0x2ec>)
    10ea:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    10ec:	4b92      	ldr	r3, [pc, #584]	; (1338 <udc_process_setup+0x2e4>)
    10ee:	689b      	ldr	r3, [r3, #8]
    10f0:	2202      	movs	r2, #2
    10f2:	705a      	strb	r2, [r3, #1]
    10f4:	e02f      	b.n	1156 <udc_process_setup+0x102>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    10f6:	4b93      	ldr	r3, [pc, #588]	; (1344 <udc_process_setup+0x2f0>)
    10f8:	6898      	ldr	r0, [r3, #8]
    10fa:	2800      	cmp	r0, #0
    10fc:	d100      	bne.n	1100 <udc_process_setup+0xac>
    10fe:	e169      	b.n	13d4 <udc_process_setup+0x380>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1100:	7883      	ldrb	r3, [r0, #2]
    1102:	78c1      	ldrb	r1, [r0, #3]
    1104:	0209      	lsls	r1, r1, #8
    1106:	4319      	orrs	r1, r3
    1108:	4b8d      	ldr	r3, [pc, #564]	; (1340 <udc_process_setup+0x2ec>)
    110a:	4798      	blx	r3
    110c:	e023      	b.n	1156 <udc_process_setup+0x102>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    110e:	22ff      	movs	r2, #255	; 0xff
    1110:	4013      	ands	r3, r2
    1112:	2b01      	cmp	r3, #1
    1114:	d00c      	beq.n	1130 <udc_process_setup+0xdc>
    1116:	2b00      	cmp	r3, #0
    1118:	d005      	beq.n	1126 <udc_process_setup+0xd2>
    111a:	2b02      	cmp	r3, #2
    111c:	d000      	beq.n	1120 <udc_process_setup+0xcc>
    111e:	e159      	b.n	13d4 <udc_process_setup+0x380>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1120:	4c89      	ldr	r4, [pc, #548]	; (1348 <udc_process_setup+0x2f4>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1122:	2109      	movs	r1, #9
    1124:	e006      	b.n	1134 <udc_process_setup+0xe0>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1126:	4889      	ldr	r0, [pc, #548]	; (134c <udc_process_setup+0x2f8>)
    1128:	2104      	movs	r1, #4
    112a:	4b85      	ldr	r3, [pc, #532]	; (1340 <udc_process_setup+0x2ec>)
    112c:	4798      	blx	r3
    112e:	e012      	b.n	1156 <udc_process_setup+0x102>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1130:	4c87      	ldr	r4, [pc, #540]	; (1350 <udc_process_setup+0x2fc>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1132:	2116      	movs	r1, #22
    1134:	4a87      	ldr	r2, [pc, #540]	; (1354 <udc_process_setup+0x300>)
    1136:	3202      	adds	r2, #2
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1138:	2300      	movs	r3, #0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    113a:	5ce0      	ldrb	r0, [r4, r3]
    113c:	8010      	strh	r0, [r2, #0]
    113e:	3301      	adds	r3, #1
    1140:	3202      	adds	r2, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1142:	b2d8      	uxtb	r0, r3
    1144:	4288      	cmp	r0, r1
    1146:	d3f8      	bcc.n	113a <udc_process_setup+0xe6>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1148:	0049      	lsls	r1, r1, #1
    114a:	3102      	adds	r1, #2
    114c:	4881      	ldr	r0, [pc, #516]	; (1354 <udc_process_setup+0x300>)
    114e:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1150:	b289      	uxth	r1, r1
    1152:	4b7b      	ldr	r3, [pc, #492]	; (1340 <udc_process_setup+0x2ec>)
    1154:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1156:	4b78      	ldr	r3, [pc, #480]	; (1338 <udc_process_setup+0x2e4>)
    1158:	88da      	ldrh	r2, [r3, #6]
    115a:	899b      	ldrh	r3, [r3, #12]
    115c:	4293      	cmp	r3, r2
    115e:	d800      	bhi.n	1162 <udc_process_setup+0x10e>
    1160:	e193      	b.n	148a <udc_process_setup+0x436>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1162:	4b75      	ldr	r3, [pc, #468]	; (1338 <udc_process_setup+0x2e4>)
    1164:	819a      	strh	r2, [r3, #12]
    1166:	e190      	b.n	148a <udc_process_setup+0x436>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1168:	2a01      	cmp	r2, #1
    116a:	d000      	beq.n	116e <udc_process_setup+0x11a>
    116c:	e132      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    116e:	487a      	ldr	r0, [pc, #488]	; (1358 <udc_process_setup+0x304>)
    1170:	2101      	movs	r1, #1
    1172:	4b73      	ldr	r3, [pc, #460]	; (1340 <udc_process_setup+0x2ec>)
    1174:	4798      	blx	r3
    1176:	e188      	b.n	148a <udc_process_setup+0x436>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1178:	2b01      	cmp	r3, #1
    117a:	d127      	bne.n	11cc <udc_process_setup+0x178>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    117c:	496e      	ldr	r1, [pc, #440]	; (1338 <udc_process_setup+0x2e4>)
    117e:	7849      	ldrb	r1, [r1, #1]
    1180:	290a      	cmp	r1, #10
    1182:	d123      	bne.n	11cc <udc_process_setup+0x178>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1184:	2a01      	cmp	r2, #1
    1186:	d000      	beq.n	118a <udc_process_setup+0x136>
    1188:	e124      	b.n	13d4 <udc_process_setup+0x380>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    118a:	4b73      	ldr	r3, [pc, #460]	; (1358 <udc_process_setup+0x304>)
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	2b00      	cmp	r3, #0
    1190:	d100      	bne.n	1194 <udc_process_setup+0x140>
    1192:	e11f      	b.n	13d4 <udc_process_setup+0x380>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1194:	4b68      	ldr	r3, [pc, #416]	; (1338 <udc_process_setup+0x2e4>)
    1196:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1198:	4b70      	ldr	r3, [pc, #448]	; (135c <udc_process_setup+0x308>)
    119a:	681d      	ldr	r5, [r3, #0]
    119c:	682b      	ldr	r3, [r5, #0]
    119e:	791b      	ldrb	r3, [r3, #4]
    11a0:	42a3      	cmp	r3, r4
    11a2:	d800      	bhi.n	11a6 <udc_process_setup+0x152>
    11a4:	e116      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    11a6:	1c20      	adds	r0, r4, #0
    11a8:	2100      	movs	r1, #0
    11aa:	4b6d      	ldr	r3, [pc, #436]	; (1360 <udc_process_setup+0x30c>)
    11ac:	4798      	blx	r3
    11ae:	2800      	cmp	r0, #0
    11b0:	d100      	bne.n	11b4 <udc_process_setup+0x160>
    11b2:	e10f      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    11b4:	686b      	ldr	r3, [r5, #4]
    11b6:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    11b8:	58e3      	ldr	r3, [r4, r3]
    11ba:	68db      	ldr	r3, [r3, #12]
    11bc:	4798      	blx	r3
    11be:	4b69      	ldr	r3, [pc, #420]	; (1364 <udc_process_setup+0x310>)
    11c0:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    11c2:	1c18      	adds	r0, r3, #0
    11c4:	2101      	movs	r1, #1
    11c6:	4b5e      	ldr	r3, [pc, #376]	; (1340 <udc_process_setup+0x2ec>)
    11c8:	4798      	blx	r3
    11ca:	e15e      	b.n	148a <udc_process_setup+0x436>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    11cc:	2b02      	cmp	r3, #2
    11ce:	d000      	beq.n	11d2 <udc_process_setup+0x17e>
    11d0:	e100      	b.n	13d4 <udc_process_setup+0x380>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    11d2:	4b59      	ldr	r3, [pc, #356]	; (1338 <udc_process_setup+0x2e4>)
    11d4:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
    11d6:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    11d8:	2b00      	cmp	r3, #0
    11da:	d000      	beq.n	11de <udc_process_setup+0x18a>
    11dc:	e0f8      	b.n	13d0 <udc_process_setup+0x37c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    11de:	2a02      	cmp	r2, #2
    11e0:	d000      	beq.n	11e4 <udc_process_setup+0x190>
    11e2:	e0f7      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    11e4:	4b54      	ldr	r3, [pc, #336]	; (1338 <udc_process_setup+0x2e4>)
    11e6:	7918      	ldrb	r0, [r3, #4]
    11e8:	4b5f      	ldr	r3, [pc, #380]	; (1368 <udc_process_setup+0x314>)
    11ea:	4798      	blx	r3
    11ec:	4b5f      	ldr	r3, [pc, #380]	; (136c <udc_process_setup+0x318>)
    11ee:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    11f0:	1c18      	adds	r0, r3, #0
    11f2:	2102      	movs	r1, #2
    11f4:	4b52      	ldr	r3, [pc, #328]	; (1340 <udc_process_setup+0x2ec>)
    11f6:	4798      	blx	r3
    11f8:	e147      	b.n	148a <udc_process_setup+0x436>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    11fa:	221f      	movs	r2, #31
    11fc:	4013      	ands	r3, r2
    11fe:	d176      	bne.n	12ee <udc_process_setup+0x29a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1200:	4a4d      	ldr	r2, [pc, #308]	; (1338 <udc_process_setup+0x2e4>)
    1202:	7852      	ldrb	r2, [r2, #1]
    1204:	2a03      	cmp	r2, #3
    1206:	d025      	beq.n	1254 <udc_process_setup+0x200>
    1208:	b2d1      	uxtb	r1, r2
    120a:	2903      	cmp	r1, #3
    120c:	d802      	bhi.n	1214 <udc_process_setup+0x1c0>
    120e:	2a01      	cmp	r2, #1
    1210:	d00e      	beq.n	1230 <udc_process_setup+0x1dc>
    1212:	e06c      	b.n	12ee <udc_process_setup+0x29a>
    1214:	2a05      	cmp	r2, #5
    1216:	d002      	beq.n	121e <udc_process_setup+0x1ca>
    1218:	2a09      	cmp	r2, #9
    121a:	d02e      	beq.n	127a <udc_process_setup+0x226>
    121c:	e067      	b.n	12ee <udc_process_setup+0x29a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    121e:	4b46      	ldr	r3, [pc, #280]	; (1338 <udc_process_setup+0x2e4>)
    1220:	88db      	ldrh	r3, [r3, #6]
    1222:	2b00      	cmp	r3, #0
    1224:	d000      	beq.n	1228 <udc_process_setup+0x1d4>
    1226:	e0d5      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1228:	4a51      	ldr	r2, [pc, #324]	; (1370 <udc_process_setup+0x31c>)
    122a:	4b43      	ldr	r3, [pc, #268]	; (1338 <udc_process_setup+0x2e4>)
    122c:	611a      	str	r2, [r3, #16]
    122e:	e12c      	b.n	148a <udc_process_setup+0x436>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1230:	4b41      	ldr	r3, [pc, #260]	; (1338 <udc_process_setup+0x2e4>)
    1232:	88db      	ldrh	r3, [r3, #6]
    1234:	2b00      	cmp	r3, #0
    1236:	d000      	beq.n	123a <udc_process_setup+0x1e6>
    1238:	e0cc      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    123a:	4b3f      	ldr	r3, [pc, #252]	; (1338 <udc_process_setup+0x2e4>)
    123c:	885b      	ldrh	r3, [r3, #2]
    123e:	2b01      	cmp	r3, #1
    1240:	d000      	beq.n	1244 <udc_process_setup+0x1f0>
    1242:	e0c7      	b.n	13d4 <udc_process_setup+0x380>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1244:	4a3d      	ldr	r2, [pc, #244]	; (133c <udc_process_setup+0x2e8>)
    1246:	8813      	ldrh	r3, [r2, #0]
    1248:	2102      	movs	r1, #2
    124a:	438b      	bics	r3, r1
    124c:	8013      	strh	r3, [r2, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    124e:	4b49      	ldr	r3, [pc, #292]	; (1374 <udc_process_setup+0x320>)
    1250:	4798      	blx	r3
    1252:	e11a      	b.n	148a <udc_process_setup+0x436>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1254:	4b38      	ldr	r3, [pc, #224]	; (1338 <udc_process_setup+0x2e4>)
    1256:	88db      	ldrh	r3, [r3, #6]
    1258:	2b00      	cmp	r3, #0
    125a:	d000      	beq.n	125e <udc_process_setup+0x20a>
    125c:	e0ba      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    125e:	4b36      	ldr	r3, [pc, #216]	; (1338 <udc_process_setup+0x2e4>)
    1260:	885b      	ldrh	r3, [r3, #2]
		break;
#endif
	default:
		break;
	}
	return false;
    1262:	2000      	movs	r0, #0
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1264:	2b01      	cmp	r3, #1
    1266:	d000      	beq.n	126a <udc_process_setup+0x216>
    1268:	e0b2      	b.n	13d0 <udc_process_setup+0x37c>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    126a:	4a34      	ldr	r2, [pc, #208]	; (133c <udc_process_setup+0x2e8>)
    126c:	8811      	ldrh	r1, [r2, #0]
    126e:	2302      	movs	r3, #2
    1270:	430b      	orrs	r3, r1
    1272:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    1274:	4b40      	ldr	r3, [pc, #256]	; (1378 <udc_process_setup+0x324>)
    1276:	4798      	blx	r3
    1278:	e107      	b.n	148a <udc_process_setup+0x436>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    127a:	4b2f      	ldr	r3, [pc, #188]	; (1338 <udc_process_setup+0x2e4>)
    127c:	88db      	ldrh	r3, [r3, #6]
    127e:	2b00      	cmp	r3, #0
    1280:	d000      	beq.n	1284 <udc_process_setup+0x230>
    1282:	e0a7      	b.n	13d4 <udc_process_setup+0x380>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1284:	4b3d      	ldr	r3, [pc, #244]	; (137c <udc_process_setup+0x328>)
    1286:	4798      	blx	r3
    1288:	2800      	cmp	r0, #0
    128a:	d100      	bne.n	128e <udc_process_setup+0x23a>
    128c:	e0a2      	b.n	13d4 <udc_process_setup+0x380>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    128e:	4b2a      	ldr	r3, [pc, #168]	; (1338 <udc_process_setup+0x2e4>)
    1290:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1292:	4b2c      	ldr	r3, [pc, #176]	; (1344 <udc_process_setup+0x2f0>)
    1294:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1296:	7c5b      	ldrb	r3, [r3, #17]
    1298:	429a      	cmp	r2, r3
    129a:	dd00      	ble.n	129e <udc_process_setup+0x24a>
    129c:	e09a      	b.n	13d4 <udc_process_setup+0x380>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    129e:	4b38      	ldr	r3, [pc, #224]	; (1380 <udc_process_setup+0x32c>)
    12a0:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    12a2:	4b25      	ldr	r3, [pc, #148]	; (1338 <udc_process_setup+0x2e4>)
    12a4:	789b      	ldrb	r3, [r3, #2]
    12a6:	4a2c      	ldr	r2, [pc, #176]	; (1358 <udc_process_setup+0x304>)
    12a8:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    12aa:	2b00      	cmp	r3, #0
    12ac:	d100      	bne.n	12b0 <udc_process_setup+0x25c>
    12ae:	e0ec      	b.n	148a <udc_process_setup+0x436>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    12b0:	4a34      	ldr	r2, [pc, #208]	; (1384 <udc_process_setup+0x330>)
    12b2:	4694      	mov	ip, r2
    12b4:	4463      	add	r3, ip
    12b6:	00db      	lsls	r3, r3, #3
    12b8:	4a22      	ldr	r2, [pc, #136]	; (1344 <udc_process_setup+0x2f0>)
    12ba:	6852      	ldr	r2, [r2, #4]
    12bc:	18d3      	adds	r3, r2, r3
    12be:	4a27      	ldr	r2, [pc, #156]	; (135c <udc_process_setup+0x308>)
    12c0:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	791b      	ldrb	r3, [r3, #4]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d100      	bne.n	12cc <udc_process_setup+0x278>
    12ca:	e0de      	b.n	148a <udc_process_setup+0x436>
    12cc:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    12ce:	4d2e      	ldr	r5, [pc, #184]	; (1388 <udc_process_setup+0x334>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12d0:	1c16      	adds	r6, r2, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    12d2:	1c20      	adds	r0, r4, #0
    12d4:	2100      	movs	r1, #0
    12d6:	47a8      	blx	r5
    12d8:	2800      	cmp	r0, #0
    12da:	d100      	bne.n	12de <udc_process_setup+0x28a>
    12dc:	e07a      	b.n	13d4 <udc_process_setup+0x380>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    12de:	3401      	adds	r4, #1
    12e0:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12e2:	6833      	ldr	r3, [r6, #0]
    12e4:	681b      	ldr	r3, [r3, #0]
    12e6:	791b      	ldrb	r3, [r3, #4]
    12e8:	42a3      	cmp	r3, r4
    12ea:	d8f2      	bhi.n	12d2 <udc_process_setup+0x27e>
    12ec:	e0cd      	b.n	148a <udc_process_setup+0x436>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    12ee:	2b01      	cmp	r3, #1
    12f0:	d118      	bne.n	1324 <udc_process_setup+0x2d0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    12f2:	4a11      	ldr	r2, [pc, #68]	; (1338 <udc_process_setup+0x2e4>)
    12f4:	7852      	ldrb	r2, [r2, #1]
    12f6:	2a0b      	cmp	r2, #11
    12f8:	d114      	bne.n	1324 <udc_process_setup+0x2d0>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    12fa:	4b0f      	ldr	r3, [pc, #60]	; (1338 <udc_process_setup+0x2e4>)
    12fc:	88db      	ldrh	r3, [r3, #6]
    12fe:	2b00      	cmp	r3, #0
    1300:	d168      	bne.n	13d4 <udc_process_setup+0x380>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1302:	4b15      	ldr	r3, [pc, #84]	; (1358 <udc_process_setup+0x304>)
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	2b00      	cmp	r3, #0
    1308:	d064      	beq.n	13d4 <udc_process_setup+0x380>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    130a:	4b0b      	ldr	r3, [pc, #44]	; (1338 <udc_process_setup+0x2e4>)
    130c:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    130e:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1310:	1c28      	adds	r0, r5, #0
    1312:	4b1e      	ldr	r3, [pc, #120]	; (138c <udc_process_setup+0x338>)
    1314:	4798      	blx	r3
    1316:	2800      	cmp	r0, #0
    1318:	d05c      	beq.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    131a:	b2e1      	uxtb	r1, r4
    131c:	1c28      	adds	r0, r5, #0
    131e:	4b1a      	ldr	r3, [pc, #104]	; (1388 <udc_process_setup+0x334>)
    1320:	4798      	blx	r3
    1322:	e055      	b.n	13d0 <udc_process_setup+0x37c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1324:	2b02      	cmp	r3, #2
    1326:	d155      	bne.n	13d4 <udc_process_setup+0x380>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1328:	4b03      	ldr	r3, [pc, #12]	; (1338 <udc_process_setup+0x2e4>)
    132a:	785b      	ldrb	r3, [r3, #1]
    132c:	2b01      	cmp	r3, #1
    132e:	d02f      	beq.n	1390 <udc_process_setup+0x33c>
    1330:	2b03      	cmp	r3, #3
    1332:	d03a      	beq.n	13aa <udc_process_setup+0x356>
    1334:	e04b      	b.n	13ce <udc_process_setup+0x37a>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	20000558 	.word	0x20000558
    133c:	2000015c 	.word	0x2000015c
    1340:	0000401d 	.word	0x0000401d
    1344:	2000008c 	.word	0x2000008c
    1348:	200000b0 	.word	0x200000b0
    134c:	20000104 	.word	0x20000104
    1350:	200000bc 	.word	0x200000bc
    1354:	200000d4 	.word	0x200000d4
    1358:	20000160 	.word	0x20000160
    135c:	20000154 	.word	0x20000154
    1360:	00000e79 	.word	0x00000e79
    1364:	20000158 	.word	0x20000158
    1368:	00003c9d 	.word	0x00003c9d
    136c:	2000015a 	.word	0x2000015a
    1370:	00000e61 	.word	0x00000e61
    1374:	00005599 	.word	0x00005599
    1378:	0000558d 	.word	0x0000558d
    137c:	0000400d 	.word	0x0000400d
    1380:	00000fb9 	.word	0x00000fb9
    1384:	1fffffff 	.word	0x1fffffff
    1388:	00000f49 	.word	0x00000f49
    138c:	00000ee1 	.word	0x00000ee1
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1390:	4b3f      	ldr	r3, [pc, #252]	; (1490 <udc_process_setup+0x43c>)
    1392:	88db      	ldrh	r3, [r3, #6]
    1394:	2b00      	cmp	r3, #0
    1396:	d11d      	bne.n	13d4 <udc_process_setup+0x380>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1398:	4b3d      	ldr	r3, [pc, #244]	; (1490 <udc_process_setup+0x43c>)
    139a:	885b      	ldrh	r3, [r3, #2]
    139c:	2b00      	cmp	r3, #0
    139e:	d119      	bne.n	13d4 <udc_process_setup+0x380>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    13a0:	4b3b      	ldr	r3, [pc, #236]	; (1490 <udc_process_setup+0x43c>)
    13a2:	7918      	ldrb	r0, [r3, #4]
    13a4:	4b3b      	ldr	r3, [pc, #236]	; (1494 <udc_process_setup+0x440>)
    13a6:	4798      	blx	r3
    13a8:	e012      	b.n	13d0 <udc_process_setup+0x37c>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13aa:	4b39      	ldr	r3, [pc, #228]	; (1490 <udc_process_setup+0x43c>)
    13ac:	88db      	ldrh	r3, [r3, #6]
    13ae:	2b00      	cmp	r3, #0
    13b0:	d110      	bne.n	13d4 <udc_process_setup+0x380>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    13b2:	4b37      	ldr	r3, [pc, #220]	; (1490 <udc_process_setup+0x43c>)
    13b4:	885b      	ldrh	r3, [r3, #2]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d10c      	bne.n	13d4 <udc_process_setup+0x380>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    13ba:	4c35      	ldr	r4, [pc, #212]	; (1490 <udc_process_setup+0x43c>)
    13bc:	7920      	ldrb	r0, [r4, #4]
    13be:	4b36      	ldr	r3, [pc, #216]	; (1498 <udc_process_setup+0x444>)
    13c0:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    13c2:	7920      	ldrb	r0, [r4, #4]
    13c4:	4b35      	ldr	r3, [pc, #212]	; (149c <udc_process_setup+0x448>)
    13c6:	4798      	blx	r3
    13c8:	e002      	b.n	13d0 <udc_process_setup+0x37c>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    13ca:	2000      	movs	r0, #0
    13cc:	e000      	b.n	13d0 <udc_process_setup+0x37c>
				break;
			}
		}
#endif
	}
	return false;
    13ce:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    13d0:	2800      	cmp	r0, #0
    13d2:	d15b      	bne.n	148c <udc_process_setup+0x438>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    13d4:	4b2e      	ldr	r3, [pc, #184]	; (1490 <udc_process_setup+0x43c>)
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	221f      	movs	r2, #31
    13da:	4013      	ands	r3, r2
    13dc:	2b01      	cmp	r3, #1
    13de:	d120      	bne.n	1422 <udc_process_setup+0x3ce>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    13e0:	4b2f      	ldr	r3, [pc, #188]	; (14a0 <udc_process_setup+0x44c>)
    13e2:	781b      	ldrb	r3, [r3, #0]
    13e4:	2b00      	cmp	r3, #0
    13e6:	d01c      	beq.n	1422 <udc_process_setup+0x3ce>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    13e8:	4b29      	ldr	r3, [pc, #164]	; (1490 <udc_process_setup+0x43c>)
    13ea:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    13ec:	4b2d      	ldr	r3, [pc, #180]	; (14a4 <udc_process_setup+0x450>)
    13ee:	681d      	ldr	r5, [r3, #0]
    13f0:	682b      	ldr	r3, [r5, #0]
    13f2:	791b      	ldrb	r3, [r3, #4]
    13f4:	42a3      	cmp	r3, r4
    13f6:	d914      	bls.n	1422 <udc_process_setup+0x3ce>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    13f8:	1c20      	adds	r0, r4, #0
    13fa:	2100      	movs	r1, #0
    13fc:	4b2a      	ldr	r3, [pc, #168]	; (14a8 <udc_process_setup+0x454>)
    13fe:	4798      	blx	r3
    1400:	2800      	cmp	r0, #0
    1402:	d00e      	beq.n	1422 <udc_process_setup+0x3ce>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1404:	686b      	ldr	r3, [r5, #4]
    1406:	00a2      	lsls	r2, r4, #2
    1408:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    140a:	68eb      	ldr	r3, [r5, #12]
    140c:	4798      	blx	r3
    140e:	1c01      	adds	r1, r0, #0
    1410:	1c20      	adds	r0, r4, #0
    1412:	4b25      	ldr	r3, [pc, #148]	; (14a8 <udc_process_setup+0x454>)
    1414:	4798      	blx	r3
    1416:	2800      	cmp	r0, #0
    1418:	d003      	beq.n	1422 <udc_process_setup+0x3ce>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    141a:	68ab      	ldr	r3, [r5, #8]
    141c:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    141e:	2800      	cmp	r0, #0
    1420:	d134      	bne.n	148c <udc_process_setup+0x438>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1422:	4b1b      	ldr	r3, [pc, #108]	; (1490 <udc_process_setup+0x43c>)
    1424:	781b      	ldrb	r3, [r3, #0]
    1426:	221f      	movs	r2, #31
    1428:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    142a:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    142c:	2b02      	cmp	r3, #2
    142e:	d12d      	bne.n	148c <udc_process_setup+0x438>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1430:	4b1b      	ldr	r3, [pc, #108]	; (14a0 <udc_process_setup+0x44c>)
    1432:	781b      	ldrb	r3, [r3, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d029      	beq.n	148c <udc_process_setup+0x438>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1438:	4b1a      	ldr	r3, [pc, #104]	; (14a4 <udc_process_setup+0x450>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	681a      	ldr	r2, [r3, #0]
    143e:	7912      	ldrb	r2, [r2, #4]
    1440:	2a00      	cmp	r2, #0
    1442:	d018      	beq.n	1476 <udc_process_setup+0x422>
    1444:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1446:	4e18      	ldr	r6, [pc, #96]	; (14a8 <udc_process_setup+0x454>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1448:	4f16      	ldr	r7, [pc, #88]	; (14a4 <udc_process_setup+0x450>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    144a:	685b      	ldr	r3, [r3, #4]
    144c:	00a2      	lsls	r2, r4, #2
    144e:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1450:	68eb      	ldr	r3, [r5, #12]
    1452:	4798      	blx	r3
    1454:	1c01      	adds	r1, r0, #0
    1456:	1c20      	adds	r0, r4, #0
    1458:	47b0      	blx	r6
    145a:	2800      	cmp	r0, #0
    145c:	d016      	beq.n	148c <udc_process_setup+0x438>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    145e:	68ab      	ldr	r3, [r5, #8]
    1460:	4798      	blx	r3
    1462:	2800      	cmp	r0, #0
    1464:	d112      	bne.n	148c <udc_process_setup+0x438>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1466:	3401      	adds	r4, #1
    1468:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	681a      	ldr	r2, [r3, #0]
    146e:	7912      	ldrb	r2, [r2, #4]
    1470:	42a2      	cmp	r2, r4
    1472:	d8ea      	bhi.n	144a <udc_process_setup+0x3f6>
    1474:	e00a      	b.n	148c <udc_process_setup+0x438>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1476:	2000      	movs	r0, #0
    1478:	e008      	b.n	148c <udc_process_setup+0x438>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    147a:	2260      	movs	r2, #96	; 0x60
    147c:	421a      	tst	r2, r3
    147e:	d1a9      	bne.n	13d4 <udc_process_setup+0x380>
    1480:	e6bb      	b.n	11fa <udc_process_setup+0x1a6>
    1482:	2160      	movs	r1, #96	; 0x60
    1484:	4219      	tst	r1, r3
    1486:	d1a5      	bne.n	13d4 <udc_process_setup+0x380>
    1488:	e5f6      	b.n	1078 <udc_process_setup+0x24>
		if (udc_reqstd()) {
			return true;
    148a:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    148c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20000558 	.word	0x20000558
    1494:	00003de1 	.word	0x00003de1
    1498:	00003af1 	.word	0x00003af1
    149c:	00003cb1 	.word	0x00003cb1
    14a0:	20000160 	.word	0x20000160
    14a4:	20000154 	.word	0x20000154
    14a8:	00000e79 	.word	0x00000e79

000014ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    14ac:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <cpu_irq_enter_critical+0x34>)
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d110      	bne.n	14d6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    14b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    14b8:	2b00      	cmp	r3, #0
    14ba:	d109      	bne.n	14d0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    14bc:	b672      	cpsid	i
    14be:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    14c2:	2200      	movs	r2, #0
    14c4:	4b07      	ldr	r3, [pc, #28]	; (14e4 <cpu_irq_enter_critical+0x38>)
    14c6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    14c8:	3201      	adds	r2, #1
    14ca:	4b07      	ldr	r3, [pc, #28]	; (14e8 <cpu_irq_enter_critical+0x3c>)
    14cc:	701a      	strb	r2, [r3, #0]
    14ce:	e002      	b.n	14d6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    14d0:	2200      	movs	r2, #0
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <cpu_irq_enter_critical+0x3c>)
    14d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    14d6:	4a02      	ldr	r2, [pc, #8]	; (14e0 <cpu_irq_enter_critical+0x34>)
    14d8:	6813      	ldr	r3, [r2, #0]
    14da:	3301      	adds	r3, #1
    14dc:	6013      	str	r3, [r2, #0]
}
    14de:	4770      	bx	lr
    14e0:	20000168 	.word	0x20000168
    14e4:	20000108 	.word	0x20000108
    14e8:	2000016c 	.word	0x2000016c

000014ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    14ec:	4b08      	ldr	r3, [pc, #32]	; (1510 <cpu_irq_leave_critical+0x24>)
    14ee:	681a      	ldr	r2, [r3, #0]
    14f0:	3a01      	subs	r2, #1
    14f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d109      	bne.n	150e <cpu_irq_leave_critical+0x22>
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <cpu_irq_leave_critical+0x28>)
    14fc:	781b      	ldrb	r3, [r3, #0]
    14fe:	2b00      	cmp	r3, #0
    1500:	d005      	beq.n	150e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1502:	2201      	movs	r2, #1
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <cpu_irq_leave_critical+0x2c>)
    1506:	701a      	strb	r2, [r3, #0]
    1508:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    150c:	b662      	cpsie	i
	}
}
    150e:	4770      	bx	lr
    1510:	20000168 	.word	0x20000168
    1514:	2000016c 	.word	0x2000016c
    1518:	20000108 	.word	0x20000108

0000151c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    151c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    151e:	2200      	movs	r2, #0
    1520:	2300      	movs	r3, #0
    1522:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1524:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1526:	2100      	movs	r1, #0
    1528:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    152a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    152c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    152e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1530:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1532:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    1534:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1536:	24c0      	movs	r4, #192	; 0xc0
    1538:	0164      	lsls	r4, r4, #5
    153a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    153c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    153e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1540:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1542:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1544:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1546:	242a      	movs	r4, #42	; 0x2a
    1548:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    154a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    154c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    154e:	3c06      	subs	r4, #6
    1550:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1552:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1554:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1556:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1558:	232b      	movs	r3, #43	; 0x2b
    155a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    155c:	3301      	adds	r3, #1
    155e:	54c1      	strb	r1, [r0, r3]
}
    1560:	bd10      	pop	{r4, pc}
    1562:	46c0      	nop			; (mov r8, r8)

00001564 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1564:	b5f0      	push	{r4, r5, r6, r7, lr}
    1566:	465f      	mov	r7, fp
    1568:	4656      	mov	r6, sl
    156a:	464d      	mov	r5, r9
    156c:	4644      	mov	r4, r8
    156e:	b4f0      	push	{r4, r5, r6, r7}
    1570:	b097      	sub	sp, #92	; 0x5c
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1572:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1574:	4cba      	ldr	r4, [pc, #744]	; (1860 <adc_init+0x2fc>)
    1576:	6a23      	ldr	r3, [r4, #32]
    1578:	2580      	movs	r5, #128	; 0x80
    157a:	026d      	lsls	r5, r5, #9
    157c:	432b      	orrs	r3, r5
    157e:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1580:	780c      	ldrb	r4, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1582:	2305      	movs	r3, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1584:	07e4      	lsls	r4, r4, #31
    1586:	d500      	bpl.n	158a <adc_init+0x26>
    1588:	e1e6      	b.n	1958 <adc_init+0x3f4>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    158a:	7809      	ldrb	r1, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    158c:	3317      	adds	r3, #23
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    158e:	0789      	lsls	r1, r1, #30
    1590:	d500      	bpl.n	1594 <adc_init+0x30>
    1592:	e1e1      	b.n	1958 <adc_init+0x3f4>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    1594:	7853      	ldrb	r3, [r2, #1]
    1596:	7103      	strb	r3, [r0, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1598:	2b00      	cmp	r3, #0
    159a:	d104      	bne.n	15a6 <adc_init+0x42>
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    159c:	49b1      	ldr	r1, [pc, #708]	; (1864 <adc_init+0x300>)
    159e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    15a0:	3304      	adds	r3, #4
    15a2:	4323      	orrs	r3, r4
    15a4:	640b      	str	r3, [r1, #64]	; 0x40
    15a6:	1c16      	adds	r6, r2, #0
    15a8:	4682      	mov	sl, r0
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    15aa:	6803      	ldr	r3, [r0, #0]
    15ac:	469b      	mov	fp, r3

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    15ae:	7813      	ldrb	r3, [r2, #0]
    15b0:	466a      	mov	r2, sp
    15b2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    15b4:	201e      	movs	r0, #30
    15b6:	4669      	mov	r1, sp
    15b8:	4bab      	ldr	r3, [pc, #684]	; (1868 <adc_init+0x304>)
    15ba:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    15bc:	201e      	movs	r0, #30
    15be:	4bab      	ldr	r3, [pc, #684]	; (186c <adc_init+0x308>)
    15c0:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    15c2:	232c      	movs	r3, #44	; 0x2c
    15c4:	5cf3      	ldrb	r3, [r6, r3]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d03f      	beq.n	164a <adc_init+0xe6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    15ca:	222b      	movs	r2, #43	; 0x2b
    15cc:	5cb4      	ldrb	r4, [r6, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    15ce:	7b32      	ldrb	r2, [r6, #12]
    15d0:	4691      	mov	r9, r2
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    15d2:	1912      	adds	r2, r2, r4
    15d4:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    15d6:	18d3      	adds	r3, r2, r3
    15d8:	b2db      	uxtb	r3, r3
    15da:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    15dc:	429a      	cmp	r2, r3
    15de:	d21e      	bcs.n	161e <adc_init+0xba>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    15e0:	4fa3      	ldr	r7, [pc, #652]	; (1870 <adc_init+0x30c>)
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    15e2:	250f      	movs	r5, #15
    15e4:	4025      	ands	r5, r4
    15e6:	7b33      	ldrb	r3, [r6, #12]
    15e8:	18ed      	adds	r5, r5, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    15ea:	a802      	add	r0, sp, #8
    15ec:	49a1      	ldr	r1, [pc, #644]	; (1874 <adc_init+0x310>)
    15ee:	2250      	movs	r2, #80	; 0x50
    15f0:	47b8      	blx	r7
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    15f2:	2d13      	cmp	r5, #19
    15f4:	d80c      	bhi.n	1610 <adc_init+0xac>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    15f6:	00ad      	lsls	r5, r5, #2
    15f8:	ab02      	add	r3, sp, #8
    15fa:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15fc:	a901      	add	r1, sp, #4
    15fe:	2300      	movs	r3, #0
    1600:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1602:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1604:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1606:	3301      	adds	r3, #1
    1608:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    160a:	b2c0      	uxtb	r0, r0
    160c:	4b9a      	ldr	r3, [pc, #616]	; (1878 <adc_init+0x314>)
    160e:	4798      	blx	r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
    1610:	3401      	adds	r4, #1
    1612:	b2e4      	uxtb	r4, r4
    1614:	464b      	mov	r3, r9
    1616:	191b      	adds	r3, r3, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    1618:	b2db      	uxtb	r3, r3
    161a:	4598      	cmp	r8, r3
    161c:	d8e1      	bhi.n	15e2 <adc_init+0x7e>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    161e:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1620:	a802      	add	r0, sp, #8
    1622:	4994      	ldr	r1, [pc, #592]	; (1874 <adc_init+0x310>)
    1624:	2250      	movs	r2, #80	; 0x50
    1626:	4b92      	ldr	r3, [pc, #584]	; (1870 <adc_init+0x30c>)
    1628:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    162a:	2c13      	cmp	r4, #19
    162c:	d837      	bhi.n	169e <adc_init+0x13a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    162e:	00a4      	lsls	r4, r4, #2
    1630:	ab02      	add	r3, sp, #8
    1632:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1634:	a901      	add	r1, sp, #4
    1636:	2300      	movs	r3, #0
    1638:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    163a:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    163c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    163e:	3301      	adds	r3, #1
    1640:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1642:	b2c0      	uxtb	r0, r0
    1644:	4b8c      	ldr	r3, [pc, #560]	; (1878 <adc_init+0x314>)
    1646:	4798      	blx	r3
    1648:	e029      	b.n	169e <adc_init+0x13a>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
    164a:	7b34      	ldrb	r4, [r6, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    164c:	a802      	add	r0, sp, #8
    164e:	4989      	ldr	r1, [pc, #548]	; (1874 <adc_init+0x310>)
    1650:	2250      	movs	r2, #80	; 0x50
    1652:	4b87      	ldr	r3, [pc, #540]	; (1870 <adc_init+0x30c>)
    1654:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1656:	2c13      	cmp	r4, #19
    1658:	d80c      	bhi.n	1674 <adc_init+0x110>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    165a:	00a4      	lsls	r4, r4, #2
    165c:	ab02      	add	r3, sp, #8
    165e:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1660:	a901      	add	r1, sp, #4
    1662:	2300      	movs	r3, #0
    1664:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1666:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1668:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    166a:	3301      	adds	r3, #1
    166c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    166e:	b2c0      	uxtb	r0, r0
    1670:	4b81      	ldr	r3, [pc, #516]	; (1878 <adc_init+0x314>)
    1672:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
    1674:	89f4      	ldrh	r4, [r6, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1676:	a802      	add	r0, sp, #8
    1678:	497e      	ldr	r1, [pc, #504]	; (1874 <adc_init+0x310>)
    167a:	2250      	movs	r2, #80	; 0x50
    167c:	4b7c      	ldr	r3, [pc, #496]	; (1870 <adc_init+0x30c>)
    167e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1680:	2c13      	cmp	r4, #19
    1682:	d80c      	bhi.n	169e <adc_init+0x13a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1684:	00a4      	lsls	r4, r4, #2
    1686:	ab02      	add	r3, sp, #8
    1688:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    168a:	a901      	add	r1, sp, #4
    168c:	2300      	movs	r3, #0
    168e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1690:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1692:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1694:	3301      	adds	r3, #1
    1696:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1698:	b2c0      	uxtb	r0, r0
    169a:	4b77      	ldr	r3, [pc, #476]	; (1878 <adc_init+0x314>)
    169c:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    169e:	7d73      	ldrb	r3, [r6, #21]
    16a0:	009b      	lsls	r3, r3, #2
    16a2:	b2db      	uxtb	r3, r3
    16a4:	465a      	mov	r2, fp
    16a6:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    16a8:	7db3      	ldrb	r3, [r6, #22]
    16aa:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    16ac:	7872      	ldrb	r2, [r6, #1]
    16ae:	4313      	orrs	r3, r2
    16b0:	b2db      	uxtb	r3, r3
    16b2:	465a      	mov	r2, fp
    16b4:	7053      	strb	r3, [r2, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    16b6:	7933      	ldrb	r3, [r6, #4]
    16b8:	2b34      	cmp	r3, #52	; 0x34
    16ba:	d900      	bls.n	16be <adc_init+0x15a>
    16bc:	e14b      	b.n	1956 <adc_init+0x3f2>
    16be:	009b      	lsls	r3, r3, #2
    16c0:	4a6e      	ldr	r2, [pc, #440]	; (187c <adc_init+0x318>)
    16c2:	58d3      	ldr	r3, [r2, r3]
    16c4:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    16c6:	2104      	movs	r1, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    16c8:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    16ca:	2202      	movs	r2, #2
    16cc:	e01a      	b.n	1704 <adc_init+0x1a0>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    16ce:	7c72      	ldrb	r2, [r6, #17]
		accumulate = config->accumulate_samples;
    16d0:	7c31      	ldrb	r1, [r6, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    16d2:	2010      	movs	r0, #16
    16d4:	e016      	b.n	1704 <adc_init+0x1a0>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    16d6:	2106      	movs	r1, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    16d8:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    16da:	2201      	movs	r2, #1
    16dc:	e012      	b.n	1704 <adc_init+0x1a0>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    16de:	2108      	movs	r1, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    16e0:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    16e2:	2200      	movs	r2, #0
    16e4:	e00e      	b.n	1704 <adc_init+0x1a0>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    16e6:	2100      	movs	r1, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    16e8:	2030      	movs	r0, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    16ea:	2200      	movs	r2, #0
    16ec:	e00a      	b.n	1704 <adc_init+0x1a0>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    16ee:	2100      	movs	r1, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    16f0:	2020      	movs	r0, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    16f2:	2200      	movs	r2, #0
    16f4:	e006      	b.n	1704 <adc_init+0x1a0>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    16f6:	2100      	movs	r1, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    16f8:	2000      	movs	r0, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    16fa:	2200      	movs	r2, #0
    16fc:	e002      	b.n	1704 <adc_init+0x1a0>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    16fe:	2102      	movs	r1, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1700:	2010      	movs	r0, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    1702:	2201      	movs	r2, #1
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1704:	0112      	lsls	r2, r2, #4
    1706:	2370      	movs	r3, #112	; 0x70
    1708:	4013      	ands	r3, r2
    170a:	430b      	orrs	r3, r1
    170c:	465a      	mov	r2, fp
    170e:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1710:	7df2      	ldrb	r2, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1712:	2317      	movs	r3, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    1714:	2a3f      	cmp	r2, #63	; 0x3f
    1716:	d900      	bls.n	171a <adc_init+0x1b6>
    1718:	e11e      	b.n	1958 <adc_init+0x3f4>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    171a:	465b      	mov	r3, fp
    171c:	70da      	strb	r2, [r3, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    171e:	4653      	mov	r3, sl
    1720:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1722:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    1724:	b25b      	sxtb	r3, r3
    1726:	2b00      	cmp	r3, #0
    1728:	dbfb      	blt.n	1722 <adc_init+0x1be>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    172a:	7cf2      	ldrb	r2, [r6, #19]
    172c:	8873      	ldrh	r3, [r6, #2]
    172e:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1730:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    1732:	5cb2      	ldrb	r2, [r6, r2]
    1734:	00d2      	lsls	r2, r2, #3
    1736:	4313      	orrs	r3, r2
    1738:	7d32      	ldrb	r2, [r6, #20]
    173a:	0092      	lsls	r2, r2, #2
    173c:	4313      	orrs	r3, r2
    173e:	7cb2      	ldrb	r2, [r6, #18]
    1740:	0052      	lsls	r2, r2, #1
    1742:	4313      	orrs	r3, r2
    1744:	4303      	orrs	r3, r0
    1746:	465a      	mov	r2, fp
    1748:	8093      	strh	r3, [r2, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    174a:	7e32      	ldrb	r2, [r6, #24]
    174c:	2a00      	cmp	r2, #0
    174e:	d020      	beq.n	1792 <adc_init+0x22e>
		switch (resolution) {
    1750:	2810      	cmp	r0, #16
    1752:	d063      	beq.n	181c <adc_init+0x2b8>
    1754:	d802      	bhi.n	175c <adc_init+0x1f8>
    1756:	2800      	cmp	r0, #0
    1758:	d03f      	beq.n	17da <adc_init+0x276>
    175a:	e01a      	b.n	1792 <adc_init+0x22e>
    175c:	2820      	cmp	r0, #32
    175e:	d01b      	beq.n	1798 <adc_init+0x234>
    1760:	2830      	cmp	r0, #48	; 0x30
    1762:	d116      	bne.n	1792 <adc_init+0x22e>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1764:	7cf3      	ldrb	r3, [r6, #19]
    1766:	2b00      	cmp	r3, #0
    1768:	d00a      	beq.n	1780 <adc_init+0x21c>
					(config->window.window_lower_value > 127 ||
    176a:	69f1      	ldr	r1, [r6, #28]
    176c:	3180      	adds	r1, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    176e:	2317      	movs	r3, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1770:	29ff      	cmp	r1, #255	; 0xff
    1772:	d900      	bls.n	1776 <adc_init+0x212>
    1774:	e0f0      	b.n	1958 <adc_init+0x3f4>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    1776:	6a31      	ldr	r1, [r6, #32]
    1778:	3180      	adds	r1, #128	; 0x80
    177a:	29ff      	cmp	r1, #255	; 0xff
    177c:	d900      	bls.n	1780 <adc_init+0x21c>
    177e:	e0eb      	b.n	1958 <adc_init+0x3f4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1780:	2317      	movs	r3, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    1782:	69f1      	ldr	r1, [r6, #28]
    1784:	29ff      	cmp	r1, #255	; 0xff
    1786:	dd00      	ble.n	178a <adc_init+0x226>
    1788:	e0e6      	b.n	1958 <adc_init+0x3f4>
    178a:	6a31      	ldr	r1, [r6, #32]
    178c:	29ff      	cmp	r1, #255	; 0xff
    178e:	dd00      	ble.n	1792 <adc_init+0x22e>
    1790:	e0e2      	b.n	1958 <adc_init+0x3f4>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1792:	4653      	mov	r3, sl
    1794:	6819      	ldr	r1, [r3, #0]
    1796:	e079      	b.n	188c <adc_init+0x328>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1798:	7cf3      	ldrb	r3, [r6, #19]
    179a:	2b00      	cmp	r3, #0
    179c:	d012      	beq.n	17c4 <adc_init+0x260>
					(config->window.window_lower_value > 511 ||
    179e:	69f3      	ldr	r3, [r6, #28]
    17a0:	2080      	movs	r0, #128	; 0x80
    17a2:	0080      	lsls	r0, r0, #2
    17a4:	4684      	mov	ip, r0
    17a6:	4463      	add	r3, ip
    17a8:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    17aa:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    17ac:	4834      	ldr	r0, [pc, #208]	; (1880 <adc_init+0x31c>)
    17ae:	4281      	cmp	r1, r0
    17b0:	d900      	bls.n	17b4 <adc_init+0x250>
    17b2:	e0d1      	b.n	1958 <adc_init+0x3f4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    17b4:	6a33      	ldr	r3, [r6, #32]
    17b6:	4463      	add	r3, ip
    17b8:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    17ba:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    17bc:	4830      	ldr	r0, [pc, #192]	; (1880 <adc_init+0x31c>)
    17be:	4281      	cmp	r1, r0
    17c0:	d900      	bls.n	17c4 <adc_init+0x260>
    17c2:	e0c9      	b.n	1958 <adc_init+0x3f4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    17c4:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    17c6:	492e      	ldr	r1, [pc, #184]	; (1880 <adc_init+0x31c>)
    17c8:	69f0      	ldr	r0, [r6, #28]
    17ca:	4288      	cmp	r0, r1
    17cc:	dd00      	ble.n	17d0 <adc_init+0x26c>
    17ce:	e0c3      	b.n	1958 <adc_init+0x3f4>
    17d0:	6a30      	ldr	r0, [r6, #32]
    17d2:	4288      	cmp	r0, r1
    17d4:	dd00      	ble.n	17d8 <adc_init+0x274>
    17d6:	e0bf      	b.n	1958 <adc_init+0x3f4>
    17d8:	e7db      	b.n	1792 <adc_init+0x22e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    17da:	7cf3      	ldrb	r3, [r6, #19]
    17dc:	2b00      	cmp	r3, #0
    17de:	d012      	beq.n	1806 <adc_init+0x2a2>
					(config->window.window_lower_value > 2047 ||
    17e0:	69f3      	ldr	r3, [r6, #28]
    17e2:	2080      	movs	r0, #128	; 0x80
    17e4:	0100      	lsls	r0, r0, #4
    17e6:	4684      	mov	ip, r0
    17e8:	4463      	add	r3, ip
    17ea:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    17ec:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    17ee:	4825      	ldr	r0, [pc, #148]	; (1884 <adc_init+0x320>)
    17f0:	4281      	cmp	r1, r0
    17f2:	d900      	bls.n	17f6 <adc_init+0x292>
    17f4:	e0b0      	b.n	1958 <adc_init+0x3f4>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    17f6:	6a33      	ldr	r3, [r6, #32]
    17f8:	4463      	add	r3, ip
    17fa:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    17fc:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    17fe:	4821      	ldr	r0, [pc, #132]	; (1884 <adc_init+0x320>)
    1800:	4281      	cmp	r1, r0
    1802:	d900      	bls.n	1806 <adc_init+0x2a2>
    1804:	e0a8      	b.n	1958 <adc_init+0x3f4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1806:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    1808:	491e      	ldr	r1, [pc, #120]	; (1884 <adc_init+0x320>)
    180a:	69f0      	ldr	r0, [r6, #28]
    180c:	4288      	cmp	r0, r1
    180e:	dd00      	ble.n	1812 <adc_init+0x2ae>
    1810:	e0a2      	b.n	1958 <adc_init+0x3f4>
    1812:	6a30      	ldr	r0, [r6, #32]
    1814:	4288      	cmp	r0, r1
    1816:	dd00      	ble.n	181a <adc_init+0x2b6>
    1818:	e09e      	b.n	1958 <adc_init+0x3f4>
    181a:	e7ba      	b.n	1792 <adc_init+0x22e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    181c:	7cf3      	ldrb	r3, [r6, #19]
    181e:	2b00      	cmp	r3, #0
    1820:	d012      	beq.n	1848 <adc_init+0x2e4>
					(config->window.window_lower_value > 32767 ||
    1822:	69f3      	ldr	r3, [r6, #28]
    1824:	2080      	movs	r0, #128	; 0x80
    1826:	0200      	lsls	r0, r0, #8
    1828:	4684      	mov	ip, r0
    182a:	4463      	add	r3, ip
    182c:	1c19      	adds	r1, r3, #0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    182e:	2317      	movs	r3, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    1830:	4815      	ldr	r0, [pc, #84]	; (1888 <adc_init+0x324>)
    1832:	4281      	cmp	r1, r0
    1834:	d900      	bls.n	1838 <adc_init+0x2d4>
    1836:	e08f      	b.n	1958 <adc_init+0x3f4>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    1838:	6a33      	ldr	r3, [r6, #32]
    183a:	4463      	add	r3, ip
    183c:	1c19      	adds	r1, r3, #0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    183e:	2317      	movs	r3, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    1840:	4811      	ldr	r0, [pc, #68]	; (1888 <adc_init+0x324>)
    1842:	4281      	cmp	r1, r0
    1844:	d900      	bls.n	1848 <adc_init+0x2e4>
    1846:	e087      	b.n	1958 <adc_init+0x3f4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1848:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    184a:	490f      	ldr	r1, [pc, #60]	; (1888 <adc_init+0x324>)
    184c:	69f0      	ldr	r0, [r6, #28]
    184e:	4288      	cmp	r0, r1
    1850:	dd00      	ble.n	1854 <adc_init+0x2f0>
    1852:	e081      	b.n	1958 <adc_init+0x3f4>
    1854:	6a30      	ldr	r0, [r6, #32]
    1856:	4288      	cmp	r0, r1
    1858:	dd00      	ble.n	185c <adc_init+0x2f8>
    185a:	e07d      	b.n	1958 <adc_init+0x3f4>
    185c:	e799      	b.n	1792 <adc_init+0x22e>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	40000400 	.word	0x40000400
    1864:	40000800 	.word	0x40000800
    1868:	000028dd 	.word	0x000028dd
    186c:	00002851 	.word	0x00002851
    1870:	000076d5 	.word	0x000076d5
    1874:	000078c4 	.word	0x000078c4
    1878:	000029d5 	.word	0x000029d5
    187c:	000077f0 	.word	0x000077f0
    1880:	000003ff 	.word	0x000003ff
    1884:	00000fff 	.word	0x00000fff
    1888:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    188c:	7e4b      	ldrb	r3, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    188e:	b25b      	sxtb	r3, r3
    1890:	2b00      	cmp	r3, #0
    1892:	dbfb      	blt.n	188c <adc_init+0x328>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    1894:	465b      	mov	r3, fp
    1896:	721a      	strb	r2, [r3, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1898:	4653      	mov	r3, sl
    189a:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    189c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    189e:	b25b      	sxtb	r3, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	dbfb      	blt.n	189c <adc_init+0x338>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    18a4:	8bb3      	ldrh	r3, [r6, #28]
    18a6:	465a      	mov	r2, fp
    18a8:	8393      	strh	r3, [r2, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    18aa:	4653      	mov	r3, sl
    18ac:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    18ae:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    18b0:	b25b      	sxtb	r3, r3
    18b2:	2b00      	cmp	r3, #0
    18b4:	dbfb      	blt.n	18ae <adc_init+0x34a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    18b6:	8c33      	ldrh	r3, [r6, #32]
    18b8:	465a      	mov	r2, fp
    18ba:	8413      	strh	r3, [r2, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    18bc:	232c      	movs	r3, #44	; 0x2c
    18be:	5cf2      	ldrb	r2, [r6, r3]
	if (inputs_to_scan > 0) {
    18c0:	2a00      	cmp	r2, #0
    18c2:	d004      	beq.n	18ce <adc_init+0x36a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    18c4:	3a01      	subs	r2, #1
    18c6:	b2d2      	uxtb	r2, r2
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    18c8:	3b15      	subs	r3, #21
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    18ca:	2a0f      	cmp	r2, #15
    18cc:	d844      	bhi.n	1958 <adc_init+0x3f4>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    18ce:	232b      	movs	r3, #43	; 0x2b
    18d0:	5cf1      	ldrb	r1, [r6, r3]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    18d2:	3b14      	subs	r3, #20
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    18d4:	290f      	cmp	r1, #15
    18d6:	d83f      	bhi.n	1958 <adc_init+0x3f4>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    18d8:	4653      	mov	r3, sl
    18da:	6818      	ldr	r0, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    18dc:	7e43      	ldrb	r3, [r0, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    18de:	b25b      	sxtb	r3, r3
    18e0:	2b00      	cmp	r3, #0
    18e2:	dbfb      	blt.n	18dc <adc_init+0x378>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    18e4:	89f0      	ldrh	r0, [r6, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    18e6:	7b33      	ldrb	r3, [r6, #12]
    18e8:	4303      	orrs	r3, r0
    18ea:	68b0      	ldr	r0, [r6, #8]
    18ec:	4303      	orrs	r3, r0
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    18ee:	0509      	lsls	r1, r1, #20
    18f0:	4319      	orrs	r1, r3
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    18f2:	0412      	lsls	r2, r2, #16
			config->negative_input |
    18f4:	430a      	orrs	r2, r1
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    18f6:	465b      	mov	r3, fp
    18f8:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    18fa:	232a      	movs	r3, #42	; 0x2a
    18fc:	5cf3      	ldrb	r3, [r6, r3]
    18fe:	465a      	mov	r2, fp
    1900:	7513      	strb	r3, [r2, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1902:	230f      	movs	r3, #15
    1904:	7593      	strb	r3, [r2, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1906:	3315      	adds	r3, #21
    1908:	5cf3      	ldrb	r3, [r6, r3]
    190a:	2b00      	cmp	r3, #0
    190c:	d011      	beq.n	1932 <adc_init+0x3ce>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    190e:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    1910:	2317      	movs	r3, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1912:	4915      	ldr	r1, [pc, #84]	; (1968 <adc_init+0x404>)
    1914:	428a      	cmp	r2, r1
    1916:	d81f      	bhi.n	1958 <adc_init+0x3f4>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1918:	465b      	mov	r3, fp
    191a:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    191c:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    191e:	2380      	movs	r3, #128	; 0x80
    1920:	011b      	lsls	r3, r3, #4
    1922:	18ca      	adds	r2, r1, r3
    1924:	b292      	uxth	r2, r2
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1926:	2317      	movs	r3, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1928:	480f      	ldr	r0, [pc, #60]	; (1968 <adc_init+0x404>)
    192a:	4282      	cmp	r2, r0
    192c:	d814      	bhi.n	1958 <adc_init+0x3f4>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    192e:	465b      	mov	r3, fp
    1930:	84d9      	strh	r1, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    1932:	4b0e      	ldr	r3, [pc, #56]	; (196c <adc_init+0x408>)
    1934:	6819      	ldr	r1, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1936:	0149      	lsls	r1, r1, #5
    1938:	23e0      	movs	r3, #224	; 0xe0
    193a:	00db      	lsls	r3, r3, #3
    193c:	4019      	ands	r1, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    193e:	4b0c      	ldr	r3, [pc, #48]	; (1970 <adc_init+0x40c>)
    1940:	685a      	ldr	r2, [r3, #4]
    1942:	0150      	lsls	r0, r2, #5
    1944:	681a      	ldr	r2, [r3, #0]
    1946:	0ed3      	lsrs	r3, r2, #27
    1948:	4303      	orrs	r3, r0
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    194a:	b2db      	uxtb	r3, r3
    194c:	430b      	orrs	r3, r1
    194e:	465a      	mov	r2, fp
    1950:	8513      	strh	r3, [r2, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1952:	2300      	movs	r3, #0
    1954:	e000      	b.n	1958 <adc_init+0x3f4>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1956:	2317      	movs	r3, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1958:	1c18      	adds	r0, r3, #0
    195a:	b017      	add	sp, #92	; 0x5c
    195c:	bc3c      	pop	{r2, r3, r4, r5}
    195e:	4690      	mov	r8, r2
    1960:	4699      	mov	r9, r3
    1962:	46a2      	mov	sl, r4
    1964:	46ab      	mov	fp, r5
    1966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1968:	00000fff 	.word	0x00000fff
    196c:	00806024 	.word	0x00806024
    1970:	00806020 	.word	0x00806020

00001974 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
    1974:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
#else
	if (dac_module->STATUS.reg & DAC_STATUS_SYNCBUSY) {
    1976:	79d8      	ldrb	r0, [r3, #7]
    1978:	09c0      	lsrs	r0, r0, #7
#endif
		return true;
	}

	return false;
}
    197a:	4770      	bx	lr

0000197c <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
    197c:	2300      	movs	r3, #0
    197e:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
    1980:	2201      	movs	r2, #1
    1982:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
    1984:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
    1986:	7103      	strb	r3, [r0, #4]
#endif
	config->voltage_pump_disable = false;
    1988:	7143      	strb	r3, [r0, #5]
	config->clock_source   = GCLK_GENERATOR_0;
    198a:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
    198c:	7183      	strb	r3, [r0, #6]
#if (SAMC21)
	config->dither_mode    = false;
#endif
}
    198e:	4770      	bx	lr

00001990 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
    1990:	b5f0      	push	{r4, r5, r6, r7, lr}
    1992:	4647      	mov	r7, r8
    1994:	b480      	push	{r7}
    1996:	b084      	sub	sp, #16
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
    1998:	6001      	str	r1, [r0, #0]
    199a:	4c2b      	ldr	r4, [pc, #172]	; (1a48 <dac_init+0xb8>)
    199c:	6a23      	ldr	r3, [r4, #32]
    199e:	2580      	movs	r5, #128	; 0x80
    19a0:	02ed      	lsls	r5, r5, #11
    19a2:	432b      	orrs	r3, r5
    19a4:	6223      	str	r3, [r4, #32]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    19a6:	780c      	ldrb	r4, [r1, #0]
		return STATUS_ERR_DENIED;
    19a8:	231c      	movs	r3, #28
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
    19aa:	07a4      	lsls	r4, r4, #30
    19ac:	d447      	bmi.n	1a3e <dac_init+0xae>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    19ae:	7809      	ldrb	r1, [r1, #0]
		return STATUS_BUSY;
    19b0:	3b17      	subs	r3, #23
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
    19b2:	07c9      	lsls	r1, r1, #31
    19b4:	d443      	bmi.n	1a3e <dac_init+0xae>
    19b6:	1c16      	adds	r6, r2, #0
    19b8:	1c04      	adds	r4, r0, #0
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    19ba:	a903      	add	r1, sp, #12
    19bc:	78d3      	ldrb	r3, [r2, #3]
    19be:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
    19c0:	2021      	movs	r0, #33	; 0x21
    19c2:	4b22      	ldr	r3, [pc, #136]	; (1a4c <dac_init+0xbc>)
    19c4:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
    19c6:	2021      	movs	r0, #33	; 0x21
    19c8:	4b21      	ldr	r3, [pc, #132]	; (1a50 <dac_init+0xc0>)
    19ca:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19cc:	2500      	movs	r5, #0
    19ce:	ab02      	add	r3, sp, #8
    19d0:	705d      	strb	r5, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    19d2:	70dd      	strb	r5, [r3, #3]
	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	/* Set up the DAC VOUT pin */
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
    19d4:	2301      	movs	r3, #1
    19d6:	aa02      	add	r2, sp, #8
    19d8:	7013      	strb	r3, [r2, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    19da:	7095      	strb	r5, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
    19dc:	2002      	movs	r0, #2
    19de:	1c11      	adds	r1, r2, #0
    19e0:	4b1c      	ldr	r3, [pc, #112]	; (1a54 <dac_init+0xc4>)
    19e2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(config);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    19e4:	6827      	ldr	r7, [r4, #0]

	/* Set selected DAC output to be enabled when enabling the module */
	module_inst->output = config->output;
    19e6:	7873      	ldrb	r3, [r6, #1]
    19e8:	7123      	strb	r3, [r4, #4]
	module_inst->start_on_event = false;
    19ea:	71a5      	strb	r5, [r4, #6]

	uint32_t new_ctrla = 0;
	uint32_t new_ctrlb = 0;

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
    19ec:	79b3      	ldrb	r3, [r6, #6]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
    19ee:	1e5a      	subs	r2, r3, #1
    19f0:	4193      	sbcs	r3, r2
    19f2:	009b      	lsls	r3, r3, #2
	}

	/* Set reference voltage */
	new_ctrlb |= config->reference;
    19f4:	7831      	ldrb	r1, [r6, #0]

	/* Left adjust data if configured */
	if (config->left_adjust) {
    19f6:	78b2      	ldrb	r2, [r6, #2]
	if (config->run_in_standby) {
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
	}

	/* Set reference voltage */
	new_ctrlb |= config->reference;
    19f8:	4688      	mov	r8, r1

	/* Left adjust data if configured */
	if (config->left_adjust) {
    19fa:	2a00      	cmp	r2, #0
    19fc:	d002      	beq.n	1a04 <dac_init+0x74>
		new_ctrlb |= DAC_CTRLB_LEFTADJ;
    19fe:	2204      	movs	r2, #4
    1a00:	4311      	orrs	r1, r2
    1a02:	4688      	mov	r8, r1
	}

#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	/* Bypass DATABUF write protection if configured */
	if (config->databuf_protection_bypass) {
    1a04:	7932      	ldrb	r2, [r6, #4]
    1a06:	2a00      	cmp	r2, #0
    1a08:	d003      	beq.n	1a12 <dac_init+0x82>
		new_ctrlb |= DAC_CTRLB_BDWP;
    1a0a:	2210      	movs	r2, #16
    1a0c:	4641      	mov	r1, r8
    1a0e:	4311      	orrs	r1, r2
    1a10:	4688      	mov	r8, r1
	}
#endif

	/* Voltage pump disable if configured */
	if (config->voltage_pump_disable) {
    1a12:	7972      	ldrb	r2, [r6, #5]
    1a14:	2a00      	cmp	r2, #0
    1a16:	d003      	beq.n	1a20 <dac_init+0x90>
		new_ctrlb |= DAC_CTRLB_VPD;
    1a18:	2208      	movs	r2, #8
    1a1a:	4641      	mov	r1, r8
    1a1c:	4311      	orrs	r1, r2
    1a1e:	4688      	mov	r8, r1
	}

	/* Apply the new configuration to the hardware module */
	dac_module->CTRLA.reg = new_ctrla;
    1a20:	b2db      	uxtb	r3, r3
    1a22:	703b      	strb	r3, [r7, #0]

	while (dac_is_syncing(module_inst)) {
    1a24:	4d0c      	ldr	r5, [pc, #48]	; (1a58 <dac_init+0xc8>)
    1a26:	1c20      	adds	r0, r4, #0
    1a28:	47a8      	blx	r5
    1a2a:	2800      	cmp	r0, #0
    1a2c:	d1fb      	bne.n	1a26 <dac_init+0x96>
		/* Wait until the synchronization is complete */
	}

	dac_module->CTRLB.reg = new_ctrlb;
    1a2e:	4643      	mov	r3, r8
    1a30:	466a      	mov	r2, sp
    1a32:	71d3      	strb	r3, [r2, #7]
    1a34:	79d3      	ldrb	r3, [r2, #7]
    1a36:	707b      	strb	r3, [r7, #1]

	/* Write configuration to module */
	_dac_set_config(module_inst, config);

	/* Store reference selection for later use */
	module_inst->reference = config->reference;
    1a38:	7833      	ldrb	r3, [r6, #0]
    1a3a:	7163      	strb	r3, [r4, #5]
	};

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
    1a3c:	2300      	movs	r3, #0
}
    1a3e:	1c18      	adds	r0, r3, #0
    1a40:	b004      	add	sp, #16
    1a42:	bc04      	pop	{r2}
    1a44:	4690      	mov	r8, r2
    1a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a48:	40000400 	.word	0x40000400
    1a4c:	000028dd 	.word	0x000028dd
    1a50:	00002851 	.word	0x00002851
    1a54:	000029d5 	.word	0x000029d5
    1a58:	00001975 	.word	0x00001975

00001a5c <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
    1a5c:	b570      	push	{r4, r5, r6, lr}
    1a5e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
    1a60:	6806      	ldr	r6, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
    1a62:	7872      	ldrb	r2, [r6, #1]
    1a64:	7903      	ldrb	r3, [r0, #4]
    1a66:	4313      	orrs	r3, r2
    1a68:	7073      	strb	r3, [r6, #1]

	while (dac_is_syncing(module_inst)) {
    1a6a:	4d09      	ldr	r5, [pc, #36]	; (1a90 <dac_enable+0x34>)
    1a6c:	1c20      	adds	r0, r4, #0
    1a6e:	47a8      	blx	r5
    1a70:	2800      	cmp	r0, #0
    1a72:	d1fb      	bne.n	1a6c <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
    1a74:	7832      	ldrb	r2, [r6, #0]
    1a76:	2302      	movs	r3, #2
    1a78:	4313      	orrs	r3, r2
    1a7a:	7033      	strb	r3, [r6, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
    1a7c:	7963      	ldrb	r3, [r4, #5]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d104      	bne.n	1a8c <dac_enable+0x30>
    1a82:	4a04      	ldr	r2, [pc, #16]	; (1a94 <dac_enable+0x38>)
    1a84:	6c11      	ldr	r1, [r2, #64]	; 0x40
    1a86:	3304      	adds	r3, #4
    1a88:	430b      	orrs	r3, r1
    1a8a:	6413      	str	r3, [r2, #64]	; 0x40
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
    1a8c:	bd70      	pop	{r4, r5, r6, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	00001975 	.word	0x00001975
    1a94:	40000800 	.word	0x40000800

00001a98 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
    1a98:	4770      	bx	lr
    1a9a:	46c0      	nop			; (mov r8, r8)

00001a9c <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1a9c:	4770      	bx	lr
    1a9e:	46c0      	nop			; (mov r8, r8)

00001aa0 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
    1aa0:	4770      	bx	lr
    1aa2:	46c0      	nop			; (mov r8, r8)

00001aa4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1aa4:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1aa6:	2a00      	cmp	r2, #0
    1aa8:	d10d      	bne.n	1ac6 <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1aaa:	008b      	lsls	r3, r1, #2
    1aac:	4a07      	ldr	r2, [pc, #28]	; (1acc <extint_register_callback+0x28>)
    1aae:	589b      	ldr	r3, [r3, r2]
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d103      	bne.n	1abc <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    1ab4:	0089      	lsls	r1, r1, #2
    1ab6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1ab8:	2300      	movs	r3, #0
    1aba:	e004      	b.n	1ac6 <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1abc:	4283      	cmp	r3, r0
    1abe:	d001      	beq.n	1ac4 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1ac0:	231d      	movs	r3, #29
    1ac2:	e000      	b.n	1ac6 <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1ac4:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1ac6:	1c18      	adds	r0, r3, #0
    1ac8:	4770      	bx	lr
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	20000300 	.word	0x20000300

00001ad0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ad0:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1ad2:	2900      	cmp	r1, #0
    1ad4:	d107      	bne.n	1ae6 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1ad6:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1ad8:	281f      	cmp	r0, #31
    1ada:	d800      	bhi.n	1ade <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1adc:	4a03      	ldr	r2, [pc, #12]	; (1aec <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1ade:	2301      	movs	r3, #1
    1ae0:	4083      	lsls	r3, r0
    1ae2:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ae4:	2300      	movs	r3, #0
}
    1ae6:	1c18      	adds	r0, r3, #0
    1ae8:	4770      	bx	lr
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	40001800 	.word	0x40001800

00001af0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1af0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1af2:	2200      	movs	r2, #0
    1af4:	4b15      	ldr	r3, [pc, #84]	; (1b4c <EIC_Handler+0x5c>)
    1af6:	701a      	strb	r2, [r3, #0]
    1af8:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1afa:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1afc:	4e14      	ldr	r6, [pc, #80]	; (1b50 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1afe:	4c13      	ldr	r4, [pc, #76]	; (1b4c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1b00:	2b1f      	cmp	r3, #31
    1b02:	d919      	bls.n	1b38 <EIC_Handler+0x48>
    1b04:	e00f      	b.n	1b26 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1b06:	2100      	movs	r1, #0
    1b08:	e000      	b.n	1b0c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1b0a:	4912      	ldr	r1, [pc, #72]	; (1b54 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1b0c:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1b0e:	009b      	lsls	r3, r3, #2
    1b10:	599b      	ldr	r3, [r3, r6]
    1b12:	2b00      	cmp	r3, #0
    1b14:	d000      	beq.n	1b18 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1b16:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1b18:	7823      	ldrb	r3, [r4, #0]
    1b1a:	3301      	adds	r3, #1
    1b1c:	b2db      	uxtb	r3, r3
    1b1e:	7023      	strb	r3, [r4, #0]
    1b20:	2b0f      	cmp	r3, #15
    1b22:	d9ed      	bls.n	1b00 <EIC_Handler+0x10>
    1b24:	e011      	b.n	1b4a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1b26:	1c29      	adds	r1, r5, #0
    1b28:	4019      	ands	r1, r3
    1b2a:	2201      	movs	r2, #1
    1b2c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1b2e:	2100      	movs	r1, #0
    1b30:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1b32:	4211      	tst	r1, r2
    1b34:	d1e7      	bne.n	1b06 <EIC_Handler+0x16>
    1b36:	e7ef      	b.n	1b18 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1b38:	1c29      	adds	r1, r5, #0
    1b3a:	4019      	ands	r1, r3
    1b3c:	2201      	movs	r2, #1
    1b3e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    1b40:	4904      	ldr	r1, [pc, #16]	; (1b54 <EIC_Handler+0x64>)
    1b42:	6909      	ldr	r1, [r1, #16]
    1b44:	4211      	tst	r1, r2
    1b46:	d1e0      	bne.n	1b0a <EIC_Handler+0x1a>
    1b48:	e7e6      	b.n	1b18 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1b4a:	bd70      	pop	{r4, r5, r6, pc}
    1b4c:	200002fd 	.word	0x200002fd
    1b50:	20000300 	.word	0x20000300
    1b54:	40001800 	.word	0x40001800

00001b58 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1b58:	4a04      	ldr	r2, [pc, #16]	; (1b6c <_extint_enable+0x14>)
    1b5a:	7811      	ldrb	r1, [r2, #0]
    1b5c:	2302      	movs	r3, #2
    1b5e:	430b      	orrs	r3, r1
    1b60:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1b62:	7853      	ldrb	r3, [r2, #1]
    1b64:	b25b      	sxtb	r3, r3
    1b66:	2b00      	cmp	r3, #0
    1b68:	dbfb      	blt.n	1b62 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1b6a:	4770      	bx	lr
    1b6c:	40001800 	.word	0x40001800

00001b70 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1b70:	b500      	push	{lr}
    1b72:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1b74:	4a12      	ldr	r2, [pc, #72]	; (1bc0 <_system_extint_init+0x50>)
    1b76:	6991      	ldr	r1, [r2, #24]
    1b78:	2340      	movs	r3, #64	; 0x40
    1b7a:	430b      	orrs	r3, r1
    1b7c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1b7e:	a901      	add	r1, sp, #4
    1b80:	2300      	movs	r3, #0
    1b82:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1b84:	2005      	movs	r0, #5
    1b86:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <_system_extint_init+0x54>)
    1b88:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    1b8a:	2005      	movs	r0, #5
    1b8c:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <_system_extint_init+0x58>)
    1b8e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1b90:	4a0e      	ldr	r2, [pc, #56]	; (1bcc <_system_extint_init+0x5c>)
    1b92:	7811      	ldrb	r1, [r2, #0]
    1b94:	2301      	movs	r3, #1
    1b96:	430b      	orrs	r3, r1
    1b98:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1b9a:	7853      	ldrb	r3, [r2, #1]
    1b9c:	b25b      	sxtb	r3, r3
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	dbfb      	blt.n	1b9a <_system_extint_init+0x2a>
    1ba2:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <_system_extint_init+0x60>)
    1ba4:	1c19      	adds	r1, r3, #0
    1ba6:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    1ba8:	2200      	movs	r2, #0
    1baa:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1bac:	428b      	cmp	r3, r1
    1bae:	d1fc      	bne.n	1baa <_system_extint_init+0x3a>
    1bb0:	2210      	movs	r2, #16
    1bb2:	4b08      	ldr	r3, [pc, #32]	; (1bd4 <_system_extint_init+0x64>)
    1bb4:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1bb6:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <_system_extint_init+0x68>)
    1bb8:	4798      	blx	r3
}
    1bba:	b003      	add	sp, #12
    1bbc:	bd00      	pop	{pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	40000400 	.word	0x40000400
    1bc4:	000028dd 	.word	0x000028dd
    1bc8:	00002851 	.word	0x00002851
    1bcc:	40001800 	.word	0x40001800
    1bd0:	20000300 	.word	0x20000300
    1bd4:	e000e100 	.word	0xe000e100
    1bd8:	00001b59 	.word	0x00001b59

00001bdc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1bdc:	2300      	movs	r3, #0
    1bde:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1be0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1be2:	2201      	movs	r2, #1
    1be4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1be6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1be8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1bea:	3302      	adds	r3, #2
    1bec:	72c3      	strb	r3, [r0, #11]
}
    1bee:	4770      	bx	lr

00001bf0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf2:	b083      	sub	sp, #12
    1bf4:	1c05      	adds	r5, r0, #0
    1bf6:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1bf8:	a901      	add	r1, sp, #4
    1bfa:	2300      	movs	r3, #0
    1bfc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1bfe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1c00:	7923      	ldrb	r3, [r4, #4]
    1c02:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1c04:	7a23      	ldrb	r3, [r4, #8]
    1c06:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1c08:	7820      	ldrb	r0, [r4, #0]
    1c0a:	4b15      	ldr	r3, [pc, #84]	; (1c60 <extint_chan_set_config+0x70>)
    1c0c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1c0e:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1c10:	2d1f      	cmp	r5, #31
    1c12:	d800      	bhi.n	1c16 <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1c14:	4e13      	ldr	r6, [pc, #76]	; (1c64 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1c16:	2207      	movs	r2, #7
    1c18:	402a      	ands	r2, r5
    1c1a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1c1c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1c1e:	7aa3      	ldrb	r3, [r4, #10]
    1c20:	2b00      	cmp	r3, #0
    1c22:	d001      	beq.n	1c28 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    1c24:	2308      	movs	r3, #8
    1c26:	4318      	orrs	r0, r3
    1c28:	08eb      	lsrs	r3, r5, #3
    1c2a:	009b      	lsls	r3, r3, #2
    1c2c:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1c2e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    1c30:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1c32:	270f      	movs	r7, #15
    1c34:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1c36:	43b9      	bics	r1, r7
    1c38:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1c3a:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1c3c:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1c3e:	7a63      	ldrb	r3, [r4, #9]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d006      	beq.n	1c52 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1c44:	6973      	ldr	r3, [r6, #20]
    1c46:	2201      	movs	r2, #1
    1c48:	40aa      	lsls	r2, r5
    1c4a:	1c15      	adds	r5, r2, #0
    1c4c:	431d      	orrs	r5, r3
    1c4e:	6175      	str	r5, [r6, #20]
    1c50:	e004      	b.n	1c5c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1c52:	6973      	ldr	r3, [r6, #20]
    1c54:	2201      	movs	r2, #1
    1c56:	40aa      	lsls	r2, r5
    1c58:	4393      	bics	r3, r2
    1c5a:	6173      	str	r3, [r6, #20]
	}
}
    1c5c:	b003      	add	sp, #12
    1c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c60:	000029d5 	.word	0x000029d5
    1c64:	40001800 	.word	0x40001800

00001c68 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1c68:	b500      	push	{lr}
    1c6a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c6c:	ab01      	add	r3, sp, #4
    1c6e:	2280      	movs	r2, #128	; 0x80
    1c70:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1c72:	780a      	ldrb	r2, [r1, #0]
    1c74:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1c76:	784a      	ldrb	r2, [r1, #1]
    1c78:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1c7a:	788a      	ldrb	r2, [r1, #2]
    1c7c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1c7e:	1c19      	adds	r1, r3, #0
    1c80:	4b01      	ldr	r3, [pc, #4]	; (1c88 <port_pin_set_config+0x20>)
    1c82:	4798      	blx	r3
}
    1c84:	b003      	add	sp, #12
    1c86:	bd00      	pop	{pc}
    1c88:	000029d5 	.word	0x000029d5

00001c8c <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1c8c:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1c8e:	2207      	movs	r2, #7
    1c90:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1c92:	421a      	tst	r2, r3
    1c94:	d1fc      	bne.n	1c90 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    1c96:	4770      	bx	lr

00001c98 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9a:	4647      	mov	r7, r8
    1c9c:	b480      	push	{r7}
    1c9e:	b082      	sub	sp, #8
    1ca0:	1c07      	adds	r7, r0, #0
    1ca2:	1c0d      	adds	r5, r1, #0
    1ca4:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1ca6:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ca8:	1c08      	adds	r0, r1, #0
    1caa:	4b68      	ldr	r3, [pc, #416]	; (1e4c <i2c_master_init+0x1b4>)
    1cac:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1cae:	4968      	ldr	r1, [pc, #416]	; (1e50 <i2c_master_init+0x1b8>)
    1cb0:	6a0a      	ldr	r2, [r1, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1cb2:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1cb4:	2301      	movs	r3, #1
    1cb6:	40a3      	lsls	r3, r4
    1cb8:	4313      	orrs	r3, r2
    1cba:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1cbc:	a901      	add	r1, sp, #4
    1cbe:	7b33      	ldrb	r3, [r6, #12]
    1cc0:	700b      	strb	r3, [r1, #0]
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1cc2:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1cc4:	b2c4      	uxtb	r4, r0
    1cc6:	1c20      	adds	r0, r4, #0
    1cc8:	4b62      	ldr	r3, [pc, #392]	; (1e54 <i2c_master_init+0x1bc>)
    1cca:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1ccc:	1c20      	adds	r0, r4, #0
    1cce:	4b62      	ldr	r3, [pc, #392]	; (1e58 <i2c_master_init+0x1c0>)
    1cd0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1cd2:	7b30      	ldrb	r0, [r6, #12]
    1cd4:	2100      	movs	r1, #0
    1cd6:	4b61      	ldr	r3, [pc, #388]	; (1e5c <i2c_master_init+0x1c4>)
    1cd8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1cda:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    1cdc:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1cde:	079b      	lsls	r3, r3, #30
    1ce0:	d500      	bpl.n	1ce4 <i2c_master_init+0x4c>
    1ce2:	e0ae      	b.n	1e42 <i2c_master_init+0x1aa>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1ce4:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    1ce6:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1ce8:	07db      	lsls	r3, r3, #31
    1cea:	d500      	bpl.n	1cee <i2c_master_init+0x56>
    1cec:	e0a9      	b.n	1e42 <i2c_master_init+0x1aa>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cee:	6838      	ldr	r0, [r7, #0]
    1cf0:	4b56      	ldr	r3, [pc, #344]	; (1e4c <i2c_master_init+0x1b4>)
    1cf2:	4698      	mov	r8, r3
    1cf4:	4798      	blx	r3
    1cf6:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1cf8:	4959      	ldr	r1, [pc, #356]	; (1e60 <i2c_master_init+0x1c8>)
    1cfa:	4b5a      	ldr	r3, [pc, #360]	; (1e64 <i2c_master_init+0x1cc>)
    1cfc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1cfe:	00a4      	lsls	r4, r4, #2
    1d00:	4b59      	ldr	r3, [pc, #356]	; (1e68 <i2c_master_init+0x1d0>)
    1d02:	50e7      	str	r7, [r4, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    1d04:	2300      	movs	r3, #0
    1d06:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    1d08:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    1d0a:	2400      	movs	r4, #0
    1d0c:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1d0e:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
    1d10:	2225      	movs	r2, #37	; 0x25
    1d12:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
    1d14:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1d16:	3314      	adds	r3, #20
    1d18:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1d1a:	683d      	ldr	r5, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1d1c:	1c28      	adds	r0, r5, #0
    1d1e:	47c0      	blx	r8
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	466a      	mov	r2, sp
    1d24:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d26:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d28:	2301      	movs	r3, #1
    1d2a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1d2c:	70d4      	strb	r4, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    1d2e:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1d30:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1d32:	2800      	cmp	r0, #0
    1d34:	d103      	bne.n	1d3e <i2c_master_init+0xa6>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1d36:	1c28      	adds	r0, r5, #0
    1d38:	2100      	movs	r1, #0
    1d3a:	4b4c      	ldr	r3, [pc, #304]	; (1e6c <i2c_master_init+0x1d4>)
    1d3c:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    1d3e:	466b      	mov	r3, sp
    1d40:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1d42:	2302      	movs	r3, #2
    1d44:	466a      	mov	r2, sp
    1d46:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1d48:	0c00      	lsrs	r0, r0, #16
    1d4a:	b2c0      	uxtb	r0, r0
    1d4c:	4669      	mov	r1, sp
    1d4e:	4b48      	ldr	r3, [pc, #288]	; (1e70 <i2c_master_init+0x1d8>)
    1d50:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    1d52:	2c00      	cmp	r4, #0
    1d54:	d104      	bne.n	1d60 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1d56:	1c28      	adds	r0, r5, #0
    1d58:	2101      	movs	r1, #1
    1d5a:	4b44      	ldr	r3, [pc, #272]	; (1e6c <i2c_master_init+0x1d4>)
    1d5c:	4798      	blx	r3
    1d5e:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    1d60:	466b      	mov	r3, sp
    1d62:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1d64:	2302      	movs	r3, #2
    1d66:	466a      	mov	r2, sp
    1d68:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1d6a:	0c24      	lsrs	r4, r4, #16
    1d6c:	b2e0      	uxtb	r0, r4
    1d6e:	4669      	mov	r1, sp
    1d70:	4b3f      	ldr	r3, [pc, #252]	; (1e70 <i2c_master_init+0x1d8>)
    1d72:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1d74:	8ab3      	ldrh	r3, [r6, #20]
    1d76:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1d78:	8af3      	ldrh	r3, [r6, #22]
    1d7a:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1d7c:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1d7e:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1d80:	2a00      	cmp	r2, #0
    1d82:	d104      	bne.n	1d8e <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1d84:	4b3b      	ldr	r3, [pc, #236]	; (1e74 <i2c_master_init+0x1dc>)
    1d86:	789b      	ldrb	r3, [r3, #2]
    1d88:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1d8a:	0fdb      	lsrs	r3, r3, #31
    1d8c:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1d8e:	6932      	ldr	r2, [r6, #16]
    1d90:	2a00      	cmp	r2, #0
    1d92:	d000      	beq.n	1d96 <i2c_master_init+0xfe>
		tmp_ctrla |= config->start_hold_time;
    1d94:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1d96:	68b2      	ldr	r2, [r6, #8]
    1d98:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1d9a:	2224      	movs	r2, #36	; 0x24
    1d9c:	5cb2      	ldrb	r2, [r6, r2]
    1d9e:	2a00      	cmp	r2, #0
    1da0:	d002      	beq.n	1da8 <i2c_master_init+0x110>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	05d2      	lsls	r2, r2, #23
    1da6:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    1da8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1daa:	2a00      	cmp	r2, #0
    1dac:	d000      	beq.n	1db0 <i2c_master_init+0x118>
		tmp_ctrla |= config->inactive_timeout;
    1dae:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
    1db0:	222c      	movs	r2, #44	; 0x2c
    1db2:	5cb2      	ldrb	r2, [r6, r2]
    1db4:	2a00      	cmp	r2, #0
    1db6:	d002      	beq.n	1dbe <i2c_master_init+0x126>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1db8:	2280      	movs	r2, #128	; 0x80
    1dba:	0512      	lsls	r2, r2, #20
    1dbc:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1dbe:	222d      	movs	r2, #45	; 0x2d
    1dc0:	5cb2      	ldrb	r2, [r6, r2]
    1dc2:	2a00      	cmp	r2, #0
    1dc4:	d002      	beq.n	1dcc <i2c_master_init+0x134>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1dc6:	2280      	movs	r2, #128	; 0x80
    1dc8:	0412      	lsls	r2, r2, #16
    1dca:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    1dcc:	222e      	movs	r2, #46	; 0x2e
    1dce:	5cb2      	ldrb	r2, [r6, r2]
    1dd0:	2a00      	cmp	r2, #0
    1dd2:	d002      	beq.n	1dda <i2c_master_init+0x142>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1dd4:	2280      	movs	r2, #128	; 0x80
    1dd6:	03d2      	lsls	r2, r2, #15
    1dd8:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1dda:	682a      	ldr	r2, [r5, #0]
    1ddc:	4313      	orrs	r3, r2
    1dde:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1de0:	2380      	movs	r3, #128	; 0x80
    1de2:	005b      	lsls	r3, r3, #1
    1de4:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = 48000000;//system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
    1de6:	27fa      	movs	r7, #250	; 0xfa
    1de8:	00bf      	lsls	r7, r7, #2
    1dea:	6833      	ldr	r3, [r6, #0]
    1dec:	435f      	muls	r7, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
	int32_t  denominator = 2*fscl;
    1dee:	007b      	lsls	r3, r7, #1
    1df0:	4698      	mov	r8, r3
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = 48000000;//system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
    1df2:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    1df4:	4c20      	ldr	r4, [pc, #128]	; (1e78 <i2c_master_init+0x1e0>)
    1df6:	4360      	muls	r0, r4
    1df8:	4920      	ldr	r1, [pc, #128]	; (1e7c <i2c_master_init+0x1e4>)
    1dfa:	4b21      	ldr	r3, [pc, #132]	; (1e80 <i2c_master_init+0x1e8>)
    1dfc:	4798      	blx	r3
    1dfe:	300a      	adds	r0, #10
    1e00:	4347      	muls	r7, r0
    1e02:	1be0      	subs	r0, r4, r7
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    1e04:	4440      	add	r0, r8
    1e06:	3801      	subs	r0, #1
    1e08:	4641      	mov	r1, r8
    1e0a:	4b1e      	ldr	r3, [pc, #120]	; (1e84 <i2c_master_init+0x1ec>)
    1e0c:	4798      	blx	r3
    1e0e:	1c04      	adds	r4, r0, #0
	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
    1e10:	2040      	movs	r0, #64	; 0x40
    1e12:	2cff      	cmp	r4, #255	; 0xff
    1e14:	d815      	bhi.n	1e42 <i2c_master_init+0x1aa>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
    1e16:	6871      	ldr	r1, [r6, #4]
    1e18:	23fa      	movs	r3, #250	; 0xfa
    1e1a:	00db      	lsls	r3, r3, #3
    1e1c:	4359      	muls	r1, r3
    1e1e:	4b1a      	ldr	r3, [pc, #104]	; (1e88 <i2c_master_init+0x1f0>)
    1e20:	18c8      	adds	r0, r1, r3
    1e22:	4b17      	ldr	r3, [pc, #92]	; (1e80 <i2c_master_init+0x1e8>)
    1e24:	4798      	blx	r3
				48000000,//system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
    1e26:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1e28:	28ff      	cmp	r0, #255	; 0xff
    1e2a:	d901      	bls.n	1e30 <i2c_master_init+0x198>
    1e2c:	2040      	movs	r0, #64	; 0x40

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    1e2e:	e008      	b.n	1e42 <i2c_master_init+0x1aa>
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1e30:	23ff      	movs	r3, #255	; 0xff
    1e32:	401c      	ands	r4, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    1e34:	0400      	lsls	r0, r0, #16
    1e36:	23ff      	movs	r3, #255	; 0xff
    1e38:	041b      	lsls	r3, r3, #16
    1e3a:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1e3c:	4304      	orrs	r4, r0
    1e3e:	60ec      	str	r4, [r5, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
    1e40:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    1e42:	b002      	add	sp, #8
    1e44:	bc04      	pop	{r2}
    1e46:	4690      	mov	r8, r2
    1e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	0000262d 	.word	0x0000262d
    1e50:	40000400 	.word	0x40000400
    1e54:	000028dd 	.word	0x000028dd
    1e58:	00002851 	.word	0x00002851
    1e5c:	00002459 	.word	0x00002459
    1e60:	00002285 	.word	0x00002285
    1e64:	0000266d 	.word	0x0000266d
    1e68:	20000340 	.word	0x20000340
    1e6c:	000024a5 	.word	0x000024a5
    1e70:	000029d5 	.word	0x000029d5
    1e74:	41002000 	.word	0x41002000
    1e78:	02dc6c00 	.word	0x02dc6c00
    1e7c:	3b9aca00 	.word	0x3b9aca00
    1e80:	000055c5 	.word	0x000055c5
    1e84:	000056e5 	.word	0x000056e5
    1e88:	02dc6bff 	.word	0x02dc6bff

00001e8c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1e8c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1e8e:	7e1a      	ldrb	r2, [r3, #24]
    1e90:	0792      	lsls	r2, r2, #30
    1e92:	d507      	bpl.n	1ea4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1e94:	2202      	movs	r2, #2
    1e96:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1e98:	8b5b      	ldrh	r3, [r3, #26]
    1e9a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1e9c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1e9e:	17db      	asrs	r3, r3, #31
    1ea0:	4018      	ands	r0, r3
    1ea2:	e00a      	b.n	1eba <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1ea4:	8b5a      	ldrh	r2, [r3, #26]
    1ea6:	0752      	lsls	r2, r2, #29
    1ea8:	d506      	bpl.n	1eb8 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1eaa:	685a      	ldr	r2, [r3, #4]
    1eac:	21c0      	movs	r1, #192	; 0xc0
    1eae:	0289      	lsls	r1, r1, #10
    1eb0:	430a      	orrs	r2, r1
    1eb2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    1eb4:	2018      	movs	r0, #24
    1eb6:	e000      	b.n	1eba <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
    1eb8:	2000      	movs	r0, #0
}
    1eba:	4770      	bx	lr

00001ebc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1ebc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ebe:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1ec0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1ec2:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1ec4:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1ec6:	e004      	b.n	1ed2 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1ec8:	3301      	adds	r3, #1
    1eca:	b29b      	uxth	r3, r3
    1ecc:	8901      	ldrh	r1, [r0, #8]
    1ece:	4299      	cmp	r1, r3
    1ed0:	d907      	bls.n	1ee2 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1ed2:	7e11      	ldrb	r1, [r2, #24]
    1ed4:	4221      	tst	r1, r4
    1ed6:	d106      	bne.n	1ee6 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1ed8:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1eda:	4229      	tst	r1, r5
    1edc:	d0f4      	beq.n	1ec8 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1ede:	2000      	movs	r0, #0
    1ee0:	e002      	b.n	1ee8 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
    1ee2:	2012      	movs	r0, #18
    1ee4:	e000      	b.n	1ee8 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
    1ee6:	2000      	movs	r0, #0
}
    1ee8:	bd30      	pop	{r4, r5, pc}
    1eea:	46c0      	nop			; (mov r8, r8)

00001eec <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1eec:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1eee:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ef0:	6863      	ldr	r3, [r4, #4]
    1ef2:	2280      	movs	r2, #128	; 0x80
    1ef4:	02d2      	lsls	r2, r2, #11
    1ef6:	4313      	orrs	r3, r2
    1ef8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1efa:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1efc:	4b02      	ldr	r3, [pc, #8]	; (1f08 <_i2c_master_send_hs_master_code+0x1c>)
    1efe:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1f00:	2301      	movs	r3, #1
    1f02:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1f04:	bd10      	pop	{r4, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	00001ebd 	.word	0x00001ebd

00001f0c <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f0e:	465f      	mov	r7, fp
    1f10:	4656      	mov	r6, sl
    1f12:	464d      	mov	r5, r9
    1f14:	4644      	mov	r4, r8
    1f16:	b4f0      	push	{r4, r5, r6, r7}
    1f18:	b083      	sub	sp, #12
    1f1a:	1c06      	adds	r6, r0, #0
    1f1c:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f1e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1f20:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1f22:	682b      	ldr	r3, [r5, #0]
    1f24:	011b      	lsls	r3, r3, #4
    1f26:	0fdb      	lsrs	r3, r3, #31
    1f28:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1f2a:	7a4b      	ldrb	r3, [r1, #9]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d002      	beq.n	1f36 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1f30:	7a89      	ldrb	r1, [r1, #10]
    1f32:	4b4f      	ldr	r3, [pc, #316]	; (2070 <STACK_SIZE+0x70>)
    1f34:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1f36:	686a      	ldr	r2, [r5, #4]
    1f38:	4b4e      	ldr	r3, [pc, #312]	; (2074 <STACK_SIZE+0x74>)
    1f3a:	4013      	ands	r3, r2
    1f3c:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1f3e:	464b      	mov	r3, r9
    1f40:	7a1b      	ldrb	r3, [r3, #8]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d026      	beq.n	1f94 <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1f46:	464b      	mov	r3, r9
    1f48:	7a5b      	ldrb	r3, [r3, #9]
    1f4a:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1f4c:	464b      	mov	r3, r9
    1f4e:	881b      	ldrh	r3, [r3, #0]
    1f50:	005b      	lsls	r3, r3, #1
    1f52:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1f54:	2280      	movs	r2, #128	; 0x80
    1f56:	0212      	lsls	r2, r2, #8
    1f58:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    1f5a:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1f5c:	1c30      	adds	r0, r6, #0
    1f5e:	4b46      	ldr	r3, [pc, #280]	; (2078 <STACK_SIZE+0x78>)
    1f60:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1f62:	686a      	ldr	r2, [r5, #4]
    1f64:	4b43      	ldr	r3, [pc, #268]	; (2074 <STACK_SIZE+0x74>)
    1f66:	4013      	ands	r3, r2
    1f68:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    1f6a:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    1f6c:	d178      	bne.n	2060 <STACK_SIZE+0x60>
			tmp_status = _i2c_master_address_response(module);
    1f6e:	1c30      	adds	r0, r6, #0
    1f70:	4b42      	ldr	r3, [pc, #264]	; (207c <STACK_SIZE+0x7c>)
    1f72:	4798      	blx	r3
    1f74:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
    1f76:	d173      	bne.n	2060 <STACK_SIZE+0x60>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1f78:	464b      	mov	r3, r9
    1f7a:	7a5b      	ldrb	r3, [r3, #9]
    1f7c:	039b      	lsls	r3, r3, #14
    1f7e:	2201      	movs	r2, #1
    1f80:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1f82:	464a      	mov	r2, r9
    1f84:	8812      	ldrh	r2, [r2, #0]
    1f86:	0a12      	lsrs	r2, r2, #8
    1f88:	2178      	movs	r1, #120	; 0x78
    1f8a:	430a      	orrs	r2, r1
    1f8c:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1f8e:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    1f90:	626b      	str	r3, [r5, #36]	; 0x24
    1f92:	e009      	b.n	1fa8 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1f94:	464b      	mov	r3, r9
    1f96:	881b      	ldrh	r3, [r3, #0]
    1f98:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1f9a:	464b      	mov	r3, r9
    1f9c:	7a5b      	ldrb	r3, [r3, #9]
    1f9e:	039b      	lsls	r3, r3, #14
    1fa0:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1fa2:	2201      	movs	r2, #1
    1fa4:	4313      	orrs	r3, r2
    1fa6:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1fa8:	1c30      	adds	r0, r6, #0
    1faa:	4b33      	ldr	r3, [pc, #204]	; (2078 <STACK_SIZE+0x78>)
    1fac:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1fae:	686a      	ldr	r2, [r5, #4]
    1fb0:	4b30      	ldr	r3, [pc, #192]	; (2074 <STACK_SIZE+0x74>)
    1fb2:	4013      	ands	r3, r2
    1fb4:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1fb6:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1fb8:	d152      	bne.n	2060 <STACK_SIZE+0x60>
		tmp_status = _i2c_master_address_response(module);
    1fba:	1c30      	adds	r0, r6, #0
    1fbc:	4b2f      	ldr	r3, [pc, #188]	; (207c <STACK_SIZE+0x7c>)
    1fbe:	4798      	blx	r3
    1fc0:	9001      	str	r0, [sp, #4]
    1fc2:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1fc4:	d14c      	bne.n	2060 <STACK_SIZE+0x60>
    1fc6:	3c01      	subs	r4, #1
    1fc8:	b2a4      	uxth	r4, r4
    1fca:	2300      	movs	r3, #0
    1fcc:	4698      	mov	r8, r3
		/* Read data buffer. */
		while (tmp_data_length--) {
    1fce:	4b2c      	ldr	r3, [pc, #176]	; (2080 <STACK_SIZE+0x80>)
    1fd0:	469b      	mov	fp, r3
    1fd2:	e029      	b.n	2028 <STACK_SIZE+0x28>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1fd4:	8b6b      	ldrh	r3, [r5, #26]
    1fd6:	069b      	lsls	r3, r3, #26
    1fd8:	d541      	bpl.n	205e <STACK_SIZE+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1fda:	7af3      	ldrb	r3, [r6, #11]
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d00f      	beq.n	2000 <STACK_SIZE>
    1fe0:	4653      	mov	r3, sl
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d102      	bne.n	1fec <_i2c_master_read_packet+0xe0>
    1fe6:	2c00      	cmp	r4, #0
    1fe8:	d002      	beq.n	1ff0 <_i2c_master_read_packet+0xe4>
    1fea:	e009      	b.n	2000 <STACK_SIZE>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    1fec:	2c01      	cmp	r4, #1
    1fee:	d107      	bne.n	2000 <STACK_SIZE>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1ff0:	686b      	ldr	r3, [r5, #4]
    1ff2:	2280      	movs	r2, #128	; 0x80
    1ff4:	02d2      	lsls	r2, r2, #11
    1ff6:	4313      	orrs	r3, r2
    1ff8:	606b      	str	r3, [r5, #4]
    1ffa:	3c01      	subs	r4, #1
    1ffc:	b2a4      	uxth	r4, r4
    1ffe:	e013      	b.n	2028 <STACK_SIZE+0x28>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    2000:	1c30      	adds	r0, r6, #0
    2002:	4b20      	ldr	r3, [pc, #128]	; (2084 <STACK_SIZE+0x84>)
    2004:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    2006:	4643      	mov	r3, r8
    2008:	1c5f      	adds	r7, r3, #1
    200a:	b2bf      	uxth	r7, r7
    200c:	2328      	movs	r3, #40	; 0x28
    200e:	5ceb      	ldrb	r3, [r5, r3]
    2010:	464a      	mov	r2, r9
    2012:	6852      	ldr	r2, [r2, #4]
    2014:	4641      	mov	r1, r8
    2016:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    2018:	1c30      	adds	r0, r6, #0
    201a:	4b17      	ldr	r3, [pc, #92]	; (2078 <STACK_SIZE+0x78>)
    201c:	4798      	blx	r3
    201e:	3c01      	subs	r4, #1
    2020:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    2022:	2800      	cmp	r0, #0
    2024:	d103      	bne.n	202e <STACK_SIZE+0x2e>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    2026:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    2028:	455c      	cmp	r4, fp
    202a:	d1d3      	bne.n	1fd4 <_i2c_master_read_packet+0xc8>
    202c:	e001      	b.n	2032 <STACK_SIZE+0x32>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    202e:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    2030:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    2032:	7ab3      	ldrb	r3, [r6, #10]
    2034:	2b00      	cmp	r3, #0
    2036:	d007      	beq.n	2048 <STACK_SIZE+0x48>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    2038:	1c30      	adds	r0, r6, #0
    203a:	4b12      	ldr	r3, [pc, #72]	; (2084 <STACK_SIZE+0x84>)
    203c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    203e:	686b      	ldr	r3, [r5, #4]
    2040:	22c0      	movs	r2, #192	; 0xc0
    2042:	0292      	lsls	r2, r2, #10
    2044:	4313      	orrs	r3, r2
    2046:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    2048:	1c30      	adds	r0, r6, #0
    204a:	4b0e      	ldr	r3, [pc, #56]	; (2084 <STACK_SIZE+0x84>)
    204c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    204e:	2328      	movs	r3, #40	; 0x28
    2050:	5cea      	ldrb	r2, [r5, r3]
    2052:	464b      	mov	r3, r9
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	4641      	mov	r1, r8
    2058:	545a      	strb	r2, [r3, r1]
    205a:	9b01      	ldr	r3, [sp, #4]
    205c:	e000      	b.n	2060 <STACK_SIZE+0x60>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    205e:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    2060:	1c18      	adds	r0, r3, #0
    2062:	b003      	add	sp, #12
    2064:	bc3c      	pop	{r2, r3, r4, r5}
    2066:	4690      	mov	r8, r2
    2068:	4699      	mov	r9, r3
    206a:	46a2      	mov	sl, r4
    206c:	46ab      	mov	fp, r5
    206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2070:	00001eed 	.word	0x00001eed
    2074:	fffbffff 	.word	0xfffbffff
    2078:	00001ebd 	.word	0x00001ebd
    207c:	00001e8d 	.word	0x00001e8d
    2080:	0000ffff 	.word	0x0000ffff
    2084:	00001c8d 	.word	0x00001c8d

00002088 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2088:	b5f0      	push	{r4, r5, r6, r7, lr}
    208a:	465f      	mov	r7, fp
    208c:	4656      	mov	r6, sl
    208e:	464d      	mov	r5, r9
    2090:	4644      	mov	r4, r8
    2092:	b4f0      	push	{r4, r5, r6, r7}
    2094:	b083      	sub	sp, #12
    2096:	1c06      	adds	r6, r0, #0
    2098:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    209a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    209c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    209e:	4b31      	ldr	r3, [pc, #196]	; (2164 <_i2c_master_write_packet+0xdc>)
    20a0:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    20a2:	7a7b      	ldrb	r3, [r7, #9]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d003      	beq.n	20b0 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    20a8:	7ab9      	ldrb	r1, [r7, #10]
    20aa:	1c30      	adds	r0, r6, #0
    20ac:	4b2e      	ldr	r3, [pc, #184]	; (2168 <_i2c_master_write_packet+0xe0>)
    20ae:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    20b0:	686a      	ldr	r2, [r5, #4]
    20b2:	4b2e      	ldr	r3, [pc, #184]	; (216c <_i2c_master_write_packet+0xe4>)
    20b4:	4013      	ands	r3, r2
    20b6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    20b8:	7a3b      	ldrb	r3, [r7, #8]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d009      	beq.n	20d2 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    20be:	7a7b      	ldrb	r3, [r7, #9]
    20c0:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    20c2:	883b      	ldrh	r3, [r7, #0]
    20c4:	005b      	lsls	r3, r3, #1
    20c6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    20c8:	2280      	movs	r2, #128	; 0x80
    20ca:	0212      	lsls	r2, r2, #8
    20cc:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    20ce:	626b      	str	r3, [r5, #36]	; 0x24
    20d0:	e005      	b.n	20de <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    20d2:	7a7b      	ldrb	r3, [r7, #9]
    20d4:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    20d6:	883b      	ldrh	r3, [r7, #0]
    20d8:	005b      	lsls	r3, r3, #1
    20da:	4313      	orrs	r3, r2
    20dc:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    20de:	1c30      	adds	r0, r6, #0
    20e0:	4b23      	ldr	r3, [pc, #140]	; (2170 <_i2c_master_write_packet+0xe8>)
    20e2:	4798      	blx	r3
    20e4:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    20e6:	d136      	bne.n	2156 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
    20e8:	1c30      	adds	r0, r6, #0
    20ea:	4b22      	ldr	r3, [pc, #136]	; (2174 <_i2c_master_write_packet+0xec>)
    20ec:	4798      	blx	r3
    20ee:	1e03      	subs	r3, r0, #0
    20f0:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    20f2:	d130      	bne.n	2156 <_i2c_master_write_packet+0xce>
    20f4:	46a0      	mov	r8, r4
    20f6:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    20f8:	3320      	adds	r3, #32
    20fa:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    20fc:	4b19      	ldr	r3, [pc, #100]	; (2164 <_i2c_master_write_packet+0xdc>)
    20fe:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    2100:	4b1b      	ldr	r3, [pc, #108]	; (2170 <_i2c_master_write_packet+0xe8>)
    2102:	469a      	mov	sl, r3
    2104:	e011      	b.n	212a <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2106:	8b6b      	ldrh	r3, [r5, #26]
    2108:	464a      	mov	r2, r9
    210a:	4213      	tst	r3, r2
    210c:	d022      	beq.n	2154 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    210e:	1c30      	adds	r0, r6, #0
    2110:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	5d1a      	ldrb	r2, [r3, r4]
    2116:	2328      	movs	r3, #40	; 0x28
    2118:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    211a:	1c30      	adds	r0, r6, #0
    211c:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    211e:	2800      	cmp	r0, #0
    2120:	d106      	bne.n	2130 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2122:	8b6b      	ldrh	r3, [r5, #26]
    2124:	3401      	adds	r4, #1
    2126:	075b      	lsls	r3, r3, #29
    2128:	d404      	bmi.n	2134 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    212a:	4544      	cmp	r4, r8
    212c:	d1eb      	bne.n	2106 <_i2c_master_write_packet+0x7e>
    212e:	e003      	b.n	2138 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    2130:	9001      	str	r0, [sp, #4]
    2132:	e001      	b.n	2138 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    2134:	231e      	movs	r3, #30
    2136:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
    2138:	7ab3      	ldrb	r3, [r6, #10]
    213a:	9801      	ldr	r0, [sp, #4]
    213c:	2b00      	cmp	r3, #0
    213e:	d00a      	beq.n	2156 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    2140:	1c30      	adds	r0, r6, #0
    2142:	4b08      	ldr	r3, [pc, #32]	; (2164 <_i2c_master_write_packet+0xdc>)
    2144:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2146:	686b      	ldr	r3, [r5, #4]
    2148:	22c0      	movs	r2, #192	; 0xc0
    214a:	0292      	lsls	r2, r2, #10
    214c:	4313      	orrs	r3, r2
    214e:	606b      	str	r3, [r5, #4]
    2150:	9801      	ldr	r0, [sp, #4]
    2152:	e000      	b.n	2156 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    2154:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    2156:	b003      	add	sp, #12
    2158:	bc3c      	pop	{r2, r3, r4, r5}
    215a:	4690      	mov	r8, r2
    215c:	4699      	mov	r9, r3
    215e:	46a2      	mov	sl, r4
    2160:	46ab      	mov	fp, r5
    2162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2164:	00001c8d 	.word	0x00001c8d
    2168:	00001eed 	.word	0x00001eed
    216c:	fffbffff 	.word	0xfffbffff
    2170:	00001ebd 	.word	0x00001ebd
    2174:	00001e8d 	.word	0x00001e8d

00002178 <i2c_master_read_packet_wait_no_stop>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2178:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    217a:	8b83      	ldrh	r3, [r0, #28]
    217c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    217e:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    2180:	2b00      	cmp	r3, #0
    2182:	d105      	bne.n	2190 <i2c_master_read_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    2184:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    2186:	3301      	adds	r3, #1
    2188:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_read_packet(module, packet);
    218a:	4b02      	ldr	r3, [pc, #8]	; (2194 <i2c_master_read_packet_wait_no_stop+0x1c>)
    218c:	4798      	blx	r3
    218e:	1c02      	adds	r2, r0, #0
}
    2190:	1c10      	adds	r0, r2, #0
    2192:	bd08      	pop	{r3, pc}
    2194:	00001f0d 	.word	0x00001f0d

00002198 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2198:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    219a:	8b83      	ldrh	r3, [r0, #28]
    219c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    219e:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    21a0:	2b00      	cmp	r3, #0
    21a2:	d105      	bne.n	21b0 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    21a4:	3301      	adds	r3, #1
    21a6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    21a8:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    21aa:	4b02      	ldr	r3, [pc, #8]	; (21b4 <i2c_master_write_packet_wait+0x1c>)
    21ac:	4798      	blx	r3
    21ae:	1c02      	adds	r2, r0, #0
}
    21b0:	1c10      	adds	r0, r2, #0
    21b2:	bd08      	pop	{r3, pc}
    21b4:	00002089 	.word	0x00002089

000021b8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    21b8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    21ba:	2207      	movs	r2, #7
    21bc:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    21be:	421a      	tst	r2, r3
    21c0:	d1fc      	bne.n	21bc <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    21c2:	4770      	bx	lr

000021c4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    21c8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    21ca:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    21cc:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
    21ce:	8b85      	ldrh	r5, [r0, #28]
    21d0:	1b5d      	subs	r5, r3, r5
    21d2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    21d4:	8b83      	ldrh	r3, [r0, #28]
    21d6:	3b01      	subs	r3, #1
    21d8:	b29b      	uxth	r3, r3
    21da:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    21dc:	0113      	lsls	r3, r2, #4
    21de:	d50c      	bpl.n	21fa <_i2c_master_read+0x36>
		if (module->send_nack && module->buffer_remaining == 1) {
    21e0:	7ac3      	ldrb	r3, [r0, #11]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d015      	beq.n	2212 <_i2c_master_read+0x4e>
    21e6:	8b83      	ldrh	r3, [r0, #28]
    21e8:	b29b      	uxth	r3, r3
    21ea:	2b01      	cmp	r3, #1
    21ec:	d111      	bne.n	2212 <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    21ee:	6873      	ldr	r3, [r6, #4]
    21f0:	2280      	movs	r2, #128	; 0x80
    21f2:	02d2      	lsls	r2, r2, #11
    21f4:	4313      	orrs	r3, r2
    21f6:	6073      	str	r3, [r6, #4]
    21f8:	e00b      	b.n	2212 <_i2c_master_read+0x4e>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    21fa:	7ac3      	ldrb	r3, [r0, #11]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d008      	beq.n	2212 <_i2c_master_read+0x4e>
    2200:	8b83      	ldrh	r3, [r0, #28]
    2202:	b29b      	uxth	r3, r3
    2204:	2b00      	cmp	r3, #0
    2206:	d104      	bne.n	2212 <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2208:	6873      	ldr	r3, [r6, #4]
    220a:	2280      	movs	r2, #128	; 0x80
    220c:	02d2      	lsls	r2, r2, #11
    220e:	4313      	orrs	r3, r2
    2210:	6073      	str	r3, [r6, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    2212:	8ba3      	ldrh	r3, [r4, #28]
    2214:	b29b      	uxth	r3, r3
    2216:	2b00      	cmp	r3, #0
    2218:	d10a      	bne.n	2230 <_i2c_master_read+0x6c>
		if (module->send_stop) {
    221a:	7aa3      	ldrb	r3, [r4, #10]
    221c:	2b00      	cmp	r3, #0
    221e:	d007      	beq.n	2230 <_i2c_master_read+0x6c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    2220:	1c20      	adds	r0, r4, #0
    2222:	4b08      	ldr	r3, [pc, #32]	; (2244 <_i2c_master_read+0x80>)
    2224:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2226:	6873      	ldr	r3, [r6, #4]
    2228:	22c0      	movs	r2, #192	; 0xc0
    222a:	0292      	lsls	r2, r2, #10
    222c:	4313      	orrs	r3, r2
    222e:	6073      	str	r3, [r6, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    2230:	1c20      	adds	r0, r4, #0
    2232:	4b04      	ldr	r3, [pc, #16]	; (2244 <_i2c_master_read+0x80>)
    2234:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    2236:	6a23      	ldr	r3, [r4, #32]
    2238:	195d      	adds	r5, r3, r5
    223a:	2328      	movs	r3, #40	; 0x28
    223c:	5cf3      	ldrb	r3, [r6, r3]
    223e:	b2db      	uxtb	r3, r3
    2240:	702b      	strb	r3, [r5, #0]
}
    2242:	bd70      	pop	{r4, r5, r6, pc}
    2244:	000021b9 	.word	0x000021b9

00002248 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    2248:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    224a:	6806      	ldr	r6, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    224c:	8b73      	ldrh	r3, [r6, #26]
    224e:	075b      	lsls	r3, r3, #29
    2250:	d503      	bpl.n	225a <_i2c_master_write+0x12>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    2252:	221e      	movs	r2, #30
    2254:	2325      	movs	r3, #37	; 0x25
    2256:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
    2258:	e010      	b.n	227c <_i2c_master_write+0x34>
    225a:	1c05      	adds	r5, r0, #0
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    225c:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
    225e:	8b84      	ldrh	r4, [r0, #28]
    2260:	1b1c      	subs	r4, r3, r4
    2262:	b2a4      	uxth	r4, r4

	module->buffer_remaining--;
    2264:	8b83      	ldrh	r3, [r0, #28]
    2266:	3b01      	subs	r3, #1
    2268:	b29b      	uxth	r3, r3
    226a:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    226c:	4b04      	ldr	r3, [pc, #16]	; (2280 <_i2c_master_write+0x38>)
    226e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    2270:	6a2b      	ldr	r3, [r5, #32]
    2272:	191c      	adds	r4, r3, r4
    2274:	7823      	ldrb	r3, [r4, #0]
    2276:	b2db      	uxtb	r3, r3
    2278:	2228      	movs	r2, #40	; 0x28
    227a:	54b3      	strb	r3, [r6, r2]
}
    227c:	bd70      	pop	{r4, r5, r6, pc}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	000021b9 	.word	0x000021b9

00002284 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    2284:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    2286:	0080      	lsls	r0, r0, #2
    2288:	4b6f      	ldr	r3, [pc, #444]	; (2448 <_i2c_master_interrupt_handler+0x1c4>)
    228a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    228c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    228e:	682b      	ldr	r3, [r5, #0]
    2290:	011b      	lsls	r3, r3, #4
    2292:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    2294:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    2296:	7e26      	ldrb	r6, [r4, #24]
    2298:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    229a:	8b63      	ldrh	r3, [r4, #26]
    229c:	b29b      	uxth	r3, r3
    229e:	2b00      	cmp	r3, #0
    22a0:	d135      	bne.n	230e <_i2c_master_interrupt_handler+0x8a>
    22a2:	8ba3      	ldrh	r3, [r4, #28]
    22a4:	b29b      	uxth	r3, r3
    22a6:	2b00      	cmp	r3, #0
    22a8:	d031      	beq.n	230e <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    22aa:	7e2b      	ldrb	r3, [r5, #24]
    22ac:	07db      	lsls	r3, r3, #31
    22ae:	d508      	bpl.n	22c2 <_i2c_master_interrupt_handler+0x3e>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    22b0:	2301      	movs	r3, #1
    22b2:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    22b4:	8b6b      	ldrh	r3, [r5, #26]
    22b6:	079b      	lsls	r3, r3, #30
    22b8:	d516      	bpl.n	22e8 <_i2c_master_interrupt_handler+0x64>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    22ba:	2241      	movs	r2, #65	; 0x41
    22bc:	2325      	movs	r3, #37	; 0x25
    22be:	54e2      	strb	r2, [r4, r3]
    22c0:	e012      	b.n	22e8 <_i2c_master_interrupt_handler+0x64>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    22c2:	8b6b      	ldrh	r3, [r5, #26]
    22c4:	075b      	lsls	r3, r3, #29
    22c6:	d50f      	bpl.n	22e8 <_i2c_master_interrupt_handler+0x64>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
    22c8:	2218      	movs	r2, #24
    22ca:	2325      	movs	r3, #37	; 0x25
    22cc:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
    22ce:	2300      	movs	r3, #0
    22d0:	83a3      	strh	r3, [r4, #28]

		if (module->send_stop) {
    22d2:	7aa3      	ldrb	r3, [r4, #10]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d007      	beq.n	22e8 <_i2c_master_interrupt_handler+0x64>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    22d8:	1c20      	adds	r0, r4, #0
    22da:	4b5c      	ldr	r3, [pc, #368]	; (244c <_i2c_master_interrupt_handler+0x1c8>)
    22dc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    22de:	686b      	ldr	r3, [r5, #4]
    22e0:	22c0      	movs	r2, #192	; 0xc0
    22e2:	0292      	lsls	r2, r2, #10
    22e4:	4313      	orrs	r3, r2
    22e6:	606b      	str	r3, [r5, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
    22e8:	8ba3      	ldrh	r3, [r4, #28]
    22ea:	b29b      	uxth	r3, r3
    22ec:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    22ee:	2325      	movs	r3, #37	; 0x25
    22f0:	5ce3      	ldrb	r3, [r4, r3]
    22f2:	2b05      	cmp	r3, #5
    22f4:	d156      	bne.n	23a4 <_i2c_master_interrupt_handler+0x120>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    22f6:	331f      	adds	r3, #31
    22f8:	5ce3      	ldrb	r3, [r4, r3]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d103      	bne.n	2306 <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
    22fe:	1c20      	adds	r0, r4, #0
    2300:	4b53      	ldr	r3, [pc, #332]	; (2450 <_i2c_master_interrupt_handler+0x1cc>)
    2302:	4798      	blx	r3
    2304:	e04e      	b.n	23a4 <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
    2306:	1c20      	adds	r0, r4, #0
    2308:	4b52      	ldr	r3, [pc, #328]	; (2454 <_i2c_master_interrupt_handler+0x1d0>)
    230a:	4798      	blx	r3
    230c:	e04a      	b.n	23a4 <_i2c_master_interrupt_handler+0x120>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    230e:	8b63      	ldrh	r3, [r4, #26]
    2310:	b29b      	uxth	r3, r3
    2312:	2b00      	cmp	r3, #0
    2314:	d026      	beq.n	2364 <_i2c_master_interrupt_handler+0xe0>
    2316:	8ba3      	ldrh	r3, [r4, #28]
    2318:	b29b      	uxth	r3, r3
    231a:	2b00      	cmp	r3, #0
    231c:	d122      	bne.n	2364 <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
    231e:	3325      	adds	r3, #37	; 0x25
    2320:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2322:	2b05      	cmp	r3, #5
    2324:	d11e      	bne.n	2364 <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    2326:	331f      	adds	r3, #31
    2328:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    232a:	2b00      	cmp	r3, #0
    232c:	d11a      	bne.n	2364 <_i2c_master_interrupt_handler+0xe0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    232e:	3303      	adds	r3, #3
    2330:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2332:	2300      	movs	r3, #0
    2334:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    2336:	3325      	adds	r3, #37	; 0x25
    2338:	2200      	movs	r2, #0
    233a:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
    233c:	7aa3      	ldrb	r3, [r4, #10]
    233e:	2b00      	cmp	r3, #0
    2340:	d008      	beq.n	2354 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    2342:	1c20      	adds	r0, r4, #0
    2344:	4b41      	ldr	r3, [pc, #260]	; (244c <_i2c_master_interrupt_handler+0x1c8>)
    2346:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2348:	686b      	ldr	r3, [r5, #4]
    234a:	22c0      	movs	r2, #192	; 0xc0
    234c:	0292      	lsls	r2, r2, #10
    234e:	4313      	orrs	r3, r2
    2350:	606b      	str	r3, [r5, #4]
    2352:	e001      	b.n	2358 <_i2c_master_interrupt_handler+0xd4>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2354:	2301      	movs	r3, #1
    2356:	762b      	strb	r3, [r5, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    2358:	07f3      	lsls	r3, r6, #31
    235a:	d523      	bpl.n	23a4 <_i2c_master_interrupt_handler+0x120>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    235c:	68e3      	ldr	r3, [r4, #12]
    235e:	1c20      	adds	r0, r4, #0
    2360:	4798      	blx	r3
    2362:	e01f      	b.n	23a4 <_i2c_master_interrupt_handler+0x120>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    2364:	8b63      	ldrh	r3, [r4, #26]
    2366:	b29b      	uxth	r3, r3
    2368:	2b00      	cmp	r3, #0
    236a:	d01b      	beq.n	23a4 <_i2c_master_interrupt_handler+0x120>
    236c:	8ba3      	ldrh	r3, [r4, #28]
    236e:	b29b      	uxth	r3, r3
    2370:	2b00      	cmp	r3, #0
    2372:	d017      	beq.n	23a4 <_i2c_master_interrupt_handler+0x120>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    2374:	8b6b      	ldrh	r3, [r5, #26]
    2376:	069b      	lsls	r3, r3, #26
    2378:	d409      	bmi.n	238e <_i2c_master_interrupt_handler+0x10a>
    237a:	2a00      	cmp	r2, #0
    237c:	d003      	beq.n	2386 <_i2c_master_interrupt_handler+0x102>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    237e:	8ba3      	ldrh	r3, [r4, #28]
    2380:	b29b      	uxth	r3, r3
    2382:	2b01      	cmp	r3, #1
    2384:	d003      	beq.n	238e <_i2c_master_interrupt_handler+0x10a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    2386:	2241      	movs	r2, #65	; 0x41
    2388:	2325      	movs	r3, #37	; 0x25
    238a:	54e2      	strb	r2, [r4, r3]
    238c:	e00a      	b.n	23a4 <_i2c_master_interrupt_handler+0x120>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    238e:	2324      	movs	r3, #36	; 0x24
    2390:	5ce3      	ldrb	r3, [r4, r3]
    2392:	2b00      	cmp	r3, #0
    2394:	d103      	bne.n	239e <_i2c_master_interrupt_handler+0x11a>
			_i2c_master_write(module);
    2396:	1c20      	adds	r0, r4, #0
    2398:	4b2d      	ldr	r3, [pc, #180]	; (2450 <_i2c_master_interrupt_handler+0x1cc>)
    239a:	4798      	blx	r3
    239c:	e002      	b.n	23a4 <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
    239e:	1c20      	adds	r0, r4, #0
    23a0:	4b2c      	ldr	r3, [pc, #176]	; (2454 <_i2c_master_interrupt_handler+0x1d0>)
    23a2:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    23a4:	8b63      	ldrh	r3, [r4, #26]
    23a6:	b29b      	uxth	r3, r3
    23a8:	2b00      	cmp	r3, #0
    23aa:	d02a      	beq.n	2402 <_i2c_master_interrupt_handler+0x17e>
    23ac:	8ba3      	ldrh	r3, [r4, #28]
    23ae:	b29b      	uxth	r3, r3
    23b0:	2b00      	cmp	r3, #0
    23b2:	d126      	bne.n	2402 <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
    23b4:	3325      	adds	r3, #37	; 0x25
    23b6:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    23b8:	2b05      	cmp	r3, #5
    23ba:	d122      	bne.n	2402 <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    23bc:	331f      	adds	r3, #31
    23be:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    23c0:	2b01      	cmp	r3, #1
    23c2:	d11e      	bne.n	2402 <_i2c_master_interrupt_handler+0x17e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    23c4:	7e2b      	ldrb	r3, [r5, #24]
    23c6:	079b      	lsls	r3, r3, #30
    23c8:	d501      	bpl.n	23ce <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23ca:	2302      	movs	r3, #2
    23cc:	762b      	strb	r3, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    23ce:	2303      	movs	r3, #3
    23d0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    23d2:	2300      	movs	r3, #0
    23d4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    23d6:	3325      	adds	r3, #37	; 0x25
    23d8:	2200      	movs	r2, #0
    23da:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    23dc:	07b3      	lsls	r3, r6, #30
    23de:	d507      	bpl.n	23f0 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    23e0:	2324      	movs	r3, #36	; 0x24
    23e2:	5ce3      	ldrb	r3, [r4, r3]
    23e4:	2b01      	cmp	r3, #1
    23e6:	d103      	bne.n	23f0 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    23e8:	6923      	ldr	r3, [r4, #16]
    23ea:	1c20      	adds	r0, r4, #0
    23ec:	4798      	blx	r3
    23ee:	e008      	b.n	2402 <_i2c_master_interrupt_handler+0x17e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    23f0:	07f3      	lsls	r3, r6, #31
    23f2:	d506      	bpl.n	2402 <_i2c_master_interrupt_handler+0x17e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    23f4:	2324      	movs	r3, #36	; 0x24
    23f6:	5ce3      	ldrb	r3, [r4, r3]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d102      	bne.n	2402 <_i2c_master_interrupt_handler+0x17e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    23fc:	68e3      	ldr	r3, [r4, #12]
    23fe:	1c20      	adds	r0, r4, #0
    2400:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2402:	2325      	movs	r3, #37	; 0x25
    2404:	5ce3      	ldrb	r3, [r4, r3]
    2406:	2b05      	cmp	r3, #5
    2408:	d01c      	beq.n	2444 <_i2c_master_interrupt_handler+0x1c0>
    240a:	2325      	movs	r3, #37	; 0x25
    240c:	5ce3      	ldrb	r3, [r4, r3]
    240e:	2b00      	cmp	r3, #0
    2410:	d018      	beq.n	2444 <_i2c_master_interrupt_handler+0x1c0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    2412:	2303      	movs	r3, #3
    2414:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2416:	2300      	movs	r3, #0
    2418:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    241a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    241c:	3325      	adds	r3, #37	; 0x25
    241e:	5ce3      	ldrb	r3, [r4, r3]
    2420:	2b41      	cmp	r3, #65	; 0x41
    2422:	d00a      	beq.n	243a <_i2c_master_interrupt_handler+0x1b6>
    2424:	7aa3      	ldrb	r3, [r4, #10]
    2426:	2b00      	cmp	r3, #0
    2428:	d007      	beq.n	243a <_i2c_master_interrupt_handler+0x1b6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    242a:	1c20      	adds	r0, r4, #0
    242c:	4b07      	ldr	r3, [pc, #28]	; (244c <_i2c_master_interrupt_handler+0x1c8>)
    242e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    2430:	686b      	ldr	r3, [r5, #4]
    2432:	22e0      	movs	r2, #224	; 0xe0
    2434:	02d2      	lsls	r2, r2, #11
    2436:	4313      	orrs	r3, r2
    2438:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    243a:	0773      	lsls	r3, r6, #29
    243c:	d502      	bpl.n	2444 <_i2c_master_interrupt_handler+0x1c0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    243e:	6963      	ldr	r3, [r4, #20]
    2440:	1c20      	adds	r0, r4, #0
    2442:	4798      	blx	r3
		}
	}
}
    2444:	bd70      	pop	{r4, r5, r6, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	20000340 	.word	0x20000340
    244c:	000021b9 	.word	0x000021b9
    2450:	00002249 	.word	0x00002249
    2454:	000021c5 	.word	0x000021c5

00002458 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2458:	b510      	push	{r4, lr}
    245a:	b082      	sub	sp, #8
    245c:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    245e:	4b0e      	ldr	r3, [pc, #56]	; (2498 <sercom_set_gclk_generator+0x40>)
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b00      	cmp	r3, #0
    2464:	d001      	beq.n	246a <sercom_set_gclk_generator+0x12>
    2466:	2900      	cmp	r1, #0
    2468:	d00d      	beq.n	2486 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    246a:	a901      	add	r1, sp, #4
    246c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    246e:	2013      	movs	r0, #19
    2470:	4b0a      	ldr	r3, [pc, #40]	; (249c <sercom_set_gclk_generator+0x44>)
    2472:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2474:	2013      	movs	r0, #19
    2476:	4b0a      	ldr	r3, [pc, #40]	; (24a0 <sercom_set_gclk_generator+0x48>)
    2478:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    247a:	4b07      	ldr	r3, [pc, #28]	; (2498 <sercom_set_gclk_generator+0x40>)
    247c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    247e:	2201      	movs	r2, #1
    2480:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2482:	2000      	movs	r0, #0
    2484:	e006      	b.n	2494 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    2486:	4b04      	ldr	r3, [pc, #16]	; (2498 <sercom_set_gclk_generator+0x40>)
    2488:	785b      	ldrb	r3, [r3, #1]
    248a:	4283      	cmp	r3, r0
    248c:	d001      	beq.n	2492 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    248e:	201d      	movs	r0, #29
    2490:	e000      	b.n	2494 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    2492:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2494:	b002      	add	sp, #8
    2496:	bd10      	pop	{r4, pc}
    2498:	20000170 	.word	0x20000170
    249c:	000028dd 	.word	0x000028dd
    24a0:	00002851 	.word	0x00002851

000024a4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    24a4:	4b44      	ldr	r3, [pc, #272]	; (25b8 <_sercom_get_default_pad+0x114>)
    24a6:	4298      	cmp	r0, r3
    24a8:	d033      	beq.n	2512 <_sercom_get_default_pad+0x6e>
    24aa:	d806      	bhi.n	24ba <_sercom_get_default_pad+0x16>
    24ac:	4b43      	ldr	r3, [pc, #268]	; (25bc <_sercom_get_default_pad+0x118>)
    24ae:	4298      	cmp	r0, r3
    24b0:	d00d      	beq.n	24ce <_sercom_get_default_pad+0x2a>
    24b2:	4b43      	ldr	r3, [pc, #268]	; (25c0 <_sercom_get_default_pad+0x11c>)
    24b4:	4298      	cmp	r0, r3
    24b6:	d01b      	beq.n	24f0 <_sercom_get_default_pad+0x4c>
    24b8:	e06f      	b.n	259a <_sercom_get_default_pad+0xf6>
    24ba:	4b42      	ldr	r3, [pc, #264]	; (25c4 <_sercom_get_default_pad+0x120>)
    24bc:	4298      	cmp	r0, r3
    24be:	d04a      	beq.n	2556 <_sercom_get_default_pad+0xb2>
    24c0:	4b41      	ldr	r3, [pc, #260]	; (25c8 <_sercom_get_default_pad+0x124>)
    24c2:	4298      	cmp	r0, r3
    24c4:	d058      	beq.n	2578 <_sercom_get_default_pad+0xd4>
    24c6:	4b41      	ldr	r3, [pc, #260]	; (25cc <_sercom_get_default_pad+0x128>)
    24c8:	4298      	cmp	r0, r3
    24ca:	d166      	bne.n	259a <_sercom_get_default_pad+0xf6>
    24cc:	e032      	b.n	2534 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24ce:	2901      	cmp	r1, #1
    24d0:	d006      	beq.n	24e0 <_sercom_get_default_pad+0x3c>
    24d2:	2900      	cmp	r1, #0
    24d4:	d063      	beq.n	259e <_sercom_get_default_pad+0xfa>
    24d6:	2902      	cmp	r1, #2
    24d8:	d006      	beq.n	24e8 <_sercom_get_default_pad+0x44>
    24da:	2903      	cmp	r1, #3
    24dc:	d006      	beq.n	24ec <_sercom_get_default_pad+0x48>
    24de:	e001      	b.n	24e4 <_sercom_get_default_pad+0x40>
    24e0:	483b      	ldr	r0, [pc, #236]	; (25d0 <_sercom_get_default_pad+0x12c>)
    24e2:	e067      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    24e4:	2000      	movs	r0, #0
    24e6:	e065      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24e8:	483a      	ldr	r0, [pc, #232]	; (25d4 <_sercom_get_default_pad+0x130>)
    24ea:	e063      	b.n	25b4 <_sercom_get_default_pad+0x110>
    24ec:	483a      	ldr	r0, [pc, #232]	; (25d8 <_sercom_get_default_pad+0x134>)
    24ee:	e061      	b.n	25b4 <_sercom_get_default_pad+0x110>
    24f0:	2901      	cmp	r1, #1
    24f2:	d006      	beq.n	2502 <_sercom_get_default_pad+0x5e>
    24f4:	2900      	cmp	r1, #0
    24f6:	d054      	beq.n	25a2 <_sercom_get_default_pad+0xfe>
    24f8:	2902      	cmp	r1, #2
    24fa:	d006      	beq.n	250a <_sercom_get_default_pad+0x66>
    24fc:	2903      	cmp	r1, #3
    24fe:	d006      	beq.n	250e <_sercom_get_default_pad+0x6a>
    2500:	e001      	b.n	2506 <_sercom_get_default_pad+0x62>
    2502:	4836      	ldr	r0, [pc, #216]	; (25dc <_sercom_get_default_pad+0x138>)
    2504:	e056      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    2506:	2000      	movs	r0, #0
    2508:	e054      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    250a:	4835      	ldr	r0, [pc, #212]	; (25e0 <_sercom_get_default_pad+0x13c>)
    250c:	e052      	b.n	25b4 <_sercom_get_default_pad+0x110>
    250e:	4835      	ldr	r0, [pc, #212]	; (25e4 <_sercom_get_default_pad+0x140>)
    2510:	e050      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2512:	2901      	cmp	r1, #1
    2514:	d006      	beq.n	2524 <_sercom_get_default_pad+0x80>
    2516:	2900      	cmp	r1, #0
    2518:	d045      	beq.n	25a6 <_sercom_get_default_pad+0x102>
    251a:	2902      	cmp	r1, #2
    251c:	d006      	beq.n	252c <_sercom_get_default_pad+0x88>
    251e:	2903      	cmp	r1, #3
    2520:	d006      	beq.n	2530 <_sercom_get_default_pad+0x8c>
    2522:	e001      	b.n	2528 <_sercom_get_default_pad+0x84>
    2524:	4830      	ldr	r0, [pc, #192]	; (25e8 <_sercom_get_default_pad+0x144>)
    2526:	e045      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    2528:	2000      	movs	r0, #0
    252a:	e043      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    252c:	482f      	ldr	r0, [pc, #188]	; (25ec <_sercom_get_default_pad+0x148>)
    252e:	e041      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2530:	482f      	ldr	r0, [pc, #188]	; (25f0 <_sercom_get_default_pad+0x14c>)
    2532:	e03f      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2534:	2901      	cmp	r1, #1
    2536:	d006      	beq.n	2546 <_sercom_get_default_pad+0xa2>
    2538:	2900      	cmp	r1, #0
    253a:	d036      	beq.n	25aa <_sercom_get_default_pad+0x106>
    253c:	2902      	cmp	r1, #2
    253e:	d006      	beq.n	254e <_sercom_get_default_pad+0xaa>
    2540:	2903      	cmp	r1, #3
    2542:	d006      	beq.n	2552 <_sercom_get_default_pad+0xae>
    2544:	e001      	b.n	254a <_sercom_get_default_pad+0xa6>
    2546:	482b      	ldr	r0, [pc, #172]	; (25f4 <_sercom_get_default_pad+0x150>)
    2548:	e034      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    254a:	2000      	movs	r0, #0
    254c:	e032      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    254e:	482a      	ldr	r0, [pc, #168]	; (25f8 <_sercom_get_default_pad+0x154>)
    2550:	e030      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2552:	482a      	ldr	r0, [pc, #168]	; (25fc <_sercom_get_default_pad+0x158>)
    2554:	e02e      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2556:	2901      	cmp	r1, #1
    2558:	d006      	beq.n	2568 <_sercom_get_default_pad+0xc4>
    255a:	2900      	cmp	r1, #0
    255c:	d027      	beq.n	25ae <_sercom_get_default_pad+0x10a>
    255e:	2902      	cmp	r1, #2
    2560:	d006      	beq.n	2570 <_sercom_get_default_pad+0xcc>
    2562:	2903      	cmp	r1, #3
    2564:	d006      	beq.n	2574 <_sercom_get_default_pad+0xd0>
    2566:	e001      	b.n	256c <_sercom_get_default_pad+0xc8>
    2568:	4825      	ldr	r0, [pc, #148]	; (2600 <_sercom_get_default_pad+0x15c>)
    256a:	e023      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    256c:	2000      	movs	r0, #0
    256e:	e021      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2570:	4824      	ldr	r0, [pc, #144]	; (2604 <_sercom_get_default_pad+0x160>)
    2572:	e01f      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2574:	4824      	ldr	r0, [pc, #144]	; (2608 <_sercom_get_default_pad+0x164>)
    2576:	e01d      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2578:	2901      	cmp	r1, #1
    257a:	d006      	beq.n	258a <_sercom_get_default_pad+0xe6>
    257c:	2900      	cmp	r1, #0
    257e:	d018      	beq.n	25b2 <_sercom_get_default_pad+0x10e>
    2580:	2902      	cmp	r1, #2
    2582:	d006      	beq.n	2592 <_sercom_get_default_pad+0xee>
    2584:	2903      	cmp	r1, #3
    2586:	d006      	beq.n	2596 <_sercom_get_default_pad+0xf2>
    2588:	e001      	b.n	258e <_sercom_get_default_pad+0xea>
    258a:	4820      	ldr	r0, [pc, #128]	; (260c <_sercom_get_default_pad+0x168>)
    258c:	e012      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    258e:	2000      	movs	r0, #0
    2590:	e010      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2592:	481f      	ldr	r0, [pc, #124]	; (2610 <_sercom_get_default_pad+0x16c>)
    2594:	e00e      	b.n	25b4 <_sercom_get_default_pad+0x110>
    2596:	481f      	ldr	r0, [pc, #124]	; (2614 <_sercom_get_default_pad+0x170>)
    2598:	e00c      	b.n	25b4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    259a:	2000      	movs	r0, #0
    259c:	e00a      	b.n	25b4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    259e:	481e      	ldr	r0, [pc, #120]	; (2618 <_sercom_get_default_pad+0x174>)
    25a0:	e008      	b.n	25b4 <_sercom_get_default_pad+0x110>
    25a2:	2003      	movs	r0, #3
    25a4:	e006      	b.n	25b4 <_sercom_get_default_pad+0x110>
    25a6:	481d      	ldr	r0, [pc, #116]	; (261c <_sercom_get_default_pad+0x178>)
    25a8:	e004      	b.n	25b4 <_sercom_get_default_pad+0x110>
    25aa:	481d      	ldr	r0, [pc, #116]	; (2620 <_sercom_get_default_pad+0x17c>)
    25ac:	e002      	b.n	25b4 <_sercom_get_default_pad+0x110>
    25ae:	481d      	ldr	r0, [pc, #116]	; (2624 <_sercom_get_default_pad+0x180>)
    25b0:	e000      	b.n	25b4 <_sercom_get_default_pad+0x110>
    25b2:	481d      	ldr	r0, [pc, #116]	; (2628 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	42001000 	.word	0x42001000
    25bc:	42000800 	.word	0x42000800
    25c0:	42000c00 	.word	0x42000c00
    25c4:	42001800 	.word	0x42001800
    25c8:	42001c00 	.word	0x42001c00
    25cc:	42001400 	.word	0x42001400
    25d0:	00050003 	.word	0x00050003
    25d4:	00060003 	.word	0x00060003
    25d8:	00070003 	.word	0x00070003
    25dc:	00010003 	.word	0x00010003
    25e0:	001e0003 	.word	0x001e0003
    25e4:	001f0003 	.word	0x001f0003
    25e8:	00090003 	.word	0x00090003
    25ec:	000a0003 	.word	0x000a0003
    25f0:	000b0003 	.word	0x000b0003
    25f4:	00110003 	.word	0x00110003
    25f8:	00120003 	.word	0x00120003
    25fc:	00130003 	.word	0x00130003
    2600:	000d0003 	.word	0x000d0003
    2604:	000e0003 	.word	0x000e0003
    2608:	000f0003 	.word	0x000f0003
    260c:	00170003 	.word	0x00170003
    2610:	00180003 	.word	0x00180003
    2614:	00190003 	.word	0x00190003
    2618:	00040003 	.word	0x00040003
    261c:	00080003 	.word	0x00080003
    2620:	00100003 	.word	0x00100003
    2624:	000c0003 	.word	0x000c0003
    2628:	00160003 	.word	0x00160003

0000262c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    262c:	b530      	push	{r4, r5, lr}
    262e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2630:	4b0c      	ldr	r3, [pc, #48]	; (2664 <_sercom_get_sercom_inst_index+0x38>)
    2632:	466a      	mov	r2, sp
    2634:	cb32      	ldmia	r3!, {r1, r4, r5}
    2636:	c232      	stmia	r2!, {r1, r4, r5}
    2638:	cb32      	ldmia	r3!, {r1, r4, r5}
    263a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    263c:	9b00      	ldr	r3, [sp, #0]
    263e:	4283      	cmp	r3, r0
    2640:	d006      	beq.n	2650 <_sercom_get_sercom_inst_index+0x24>
    2642:	2301      	movs	r3, #1
    2644:	009a      	lsls	r2, r3, #2
    2646:	4669      	mov	r1, sp
    2648:	5852      	ldr	r2, [r2, r1]
    264a:	4282      	cmp	r2, r0
    264c:	d103      	bne.n	2656 <_sercom_get_sercom_inst_index+0x2a>
    264e:	e000      	b.n	2652 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2650:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    2652:	b2d8      	uxtb	r0, r3
    2654:	e003      	b.n	265e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2656:	3301      	adds	r3, #1
    2658:	2b06      	cmp	r3, #6
    265a:	d1f3      	bne.n	2644 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    265c:	2000      	movs	r0, #0
}
    265e:	b007      	add	sp, #28
    2660:	bd30      	pop	{r4, r5, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	00007914 	.word	0x00007914

00002668 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2668:	4770      	bx	lr
    266a:	46c0      	nop			; (mov r8, r8)

0000266c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    266e:	4b0a      	ldr	r3, [pc, #40]	; (2698 <_sercom_set_handler+0x2c>)
    2670:	781b      	ldrb	r3, [r3, #0]
    2672:	2b00      	cmp	r3, #0
    2674:	d10c      	bne.n	2690 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2676:	4f09      	ldr	r7, [pc, #36]	; (269c <_sercom_set_handler+0x30>)
    2678:	4e09      	ldr	r6, [pc, #36]	; (26a0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    267a:	4d0a      	ldr	r5, [pc, #40]	; (26a4 <_sercom_set_handler+0x38>)
    267c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    267e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2680:	195a      	adds	r2, r3, r5
    2682:	6014      	str	r4, [r2, #0]
    2684:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2686:	2b18      	cmp	r3, #24
    2688:	d1f9      	bne.n	267e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    268a:	2201      	movs	r2, #1
    268c:	4b02      	ldr	r3, [pc, #8]	; (2698 <_sercom_set_handler+0x2c>)
    268e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2690:	0080      	lsls	r0, r0, #2
    2692:	4b02      	ldr	r3, [pc, #8]	; (269c <_sercom_set_handler+0x30>)
    2694:	50c1      	str	r1, [r0, r3]
}
    2696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2698:	20000172 	.word	0x20000172
    269c:	20000174 	.word	0x20000174
    26a0:	00002669 	.word	0x00002669
    26a4:	20000340 	.word	0x20000340

000026a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    26a8:	b510      	push	{r4, lr}
    26aa:	b082      	sub	sp, #8
    26ac:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    26ae:	4668      	mov	r0, sp
    26b0:	4905      	ldr	r1, [pc, #20]	; (26c8 <_sercom_get_interrupt_vector+0x20>)
    26b2:	2206      	movs	r2, #6
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <_sercom_get_interrupt_vector+0x24>)
    26b6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    26b8:	1c20      	adds	r0, r4, #0
    26ba:	4b05      	ldr	r3, [pc, #20]	; (26d0 <_sercom_get_interrupt_vector+0x28>)
    26bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    26be:	466b      	mov	r3, sp
    26c0:	5618      	ldrsb	r0, [r3, r0]
}
    26c2:	b002      	add	sp, #8
    26c4:	bd10      	pop	{r4, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	0000792c 	.word	0x0000792c
    26cc:	000076d5 	.word	0x000076d5
    26d0:	0000262d 	.word	0x0000262d

000026d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    26d4:	b508      	push	{r3, lr}
    26d6:	4b02      	ldr	r3, [pc, #8]	; (26e0 <SERCOM0_Handler+0xc>)
    26d8:	681b      	ldr	r3, [r3, #0]
    26da:	2000      	movs	r0, #0
    26dc:	4798      	blx	r3
    26de:	bd08      	pop	{r3, pc}
    26e0:	20000174 	.word	0x20000174

000026e4 <SERCOM1_Handler>:
    26e4:	b508      	push	{r3, lr}
    26e6:	4b02      	ldr	r3, [pc, #8]	; (26f0 <SERCOM1_Handler+0xc>)
    26e8:	685b      	ldr	r3, [r3, #4]
    26ea:	2001      	movs	r0, #1
    26ec:	4798      	blx	r3
    26ee:	bd08      	pop	{r3, pc}
    26f0:	20000174 	.word	0x20000174

000026f4 <SERCOM2_Handler>:
    26f4:	b508      	push	{r3, lr}
    26f6:	4b02      	ldr	r3, [pc, #8]	; (2700 <SERCOM2_Handler+0xc>)
    26f8:	689b      	ldr	r3, [r3, #8]
    26fa:	2002      	movs	r0, #2
    26fc:	4798      	blx	r3
    26fe:	bd08      	pop	{r3, pc}
    2700:	20000174 	.word	0x20000174

00002704 <SERCOM3_Handler>:
    2704:	b508      	push	{r3, lr}
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <SERCOM3_Handler+0xc>)
    2708:	68db      	ldr	r3, [r3, #12]
    270a:	2003      	movs	r0, #3
    270c:	4798      	blx	r3
    270e:	bd08      	pop	{r3, pc}
    2710:	20000174 	.word	0x20000174

00002714 <SERCOM4_Handler>:
    2714:	b508      	push	{r3, lr}
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <SERCOM4_Handler+0xc>)
    2718:	691b      	ldr	r3, [r3, #16]
    271a:	2004      	movs	r0, #4
    271c:	4798      	blx	r3
    271e:	bd08      	pop	{r3, pc}
    2720:	20000174 	.word	0x20000174

00002724 <SERCOM5_Handler>:
    2724:	b508      	push	{r3, lr}
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <SERCOM5_Handler+0xc>)
    2728:	695b      	ldr	r3, [r3, #20]
    272a:	2005      	movs	r0, #5
    272c:	4798      	blx	r3
    272e:	bd08      	pop	{r3, pc}
    2730:	20000174 	.word	0x20000174

00002734 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2734:	b508      	push	{r3, lr}
	switch (clock_source) {
    2736:	2808      	cmp	r0, #8
    2738:	d803      	bhi.n	2742 <system_clock_source_get_hz+0xe>
    273a:	0080      	lsls	r0, r0, #2
    273c:	4b1b      	ldr	r3, [pc, #108]	; (27ac <system_clock_source_get_hz+0x78>)
    273e:	581b      	ldr	r3, [r3, r0]
    2740:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2742:	2000      	movs	r0, #0
    2744:	e031      	b.n	27aa <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2746:	4b1a      	ldr	r3, [pc, #104]	; (27b0 <system_clock_source_get_hz+0x7c>)
    2748:	6918      	ldr	r0, [r3, #16]
    274a:	e02e      	b.n	27aa <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    274c:	4b19      	ldr	r3, [pc, #100]	; (27b4 <system_clock_source_get_hz+0x80>)
    274e:	6a18      	ldr	r0, [r3, #32]
    2750:	0580      	lsls	r0, r0, #22
    2752:	0f80      	lsrs	r0, r0, #30
    2754:	4b18      	ldr	r3, [pc, #96]	; (27b8 <system_clock_source_get_hz+0x84>)
    2756:	40c3      	lsrs	r3, r0
    2758:	1c18      	adds	r0, r3, #0
    275a:	e026      	b.n	27aa <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    275c:	4b14      	ldr	r3, [pc, #80]	; (27b0 <system_clock_source_get_hz+0x7c>)
    275e:	6958      	ldr	r0, [r3, #20]
    2760:	e023      	b.n	27aa <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2762:	4b13      	ldr	r3, [pc, #76]	; (27b0 <system_clock_source_get_hz+0x7c>)
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	2002      	movs	r0, #2
    2768:	4018      	ands	r0, r3
    276a:	d01e      	beq.n	27aa <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    276c:	4911      	ldr	r1, [pc, #68]	; (27b4 <system_clock_source_get_hz+0x80>)
    276e:	2210      	movs	r2, #16
    2770:	68cb      	ldr	r3, [r1, #12]
    2772:	421a      	tst	r2, r3
    2774:	d0fc      	beq.n	2770 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2776:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <system_clock_source_get_hz+0x7c>)
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	075b      	lsls	r3, r3, #29
    277c:	d514      	bpl.n	27a8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    277e:	2000      	movs	r0, #0
    2780:	4b0e      	ldr	r3, [pc, #56]	; (27bc <system_clock_source_get_hz+0x88>)
    2782:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2784:	4b0a      	ldr	r3, [pc, #40]	; (27b0 <system_clock_source_get_hz+0x7c>)
    2786:	689b      	ldr	r3, [r3, #8]
    2788:	041b      	lsls	r3, r3, #16
    278a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    278c:	4358      	muls	r0, r3
    278e:	e00c      	b.n	27aa <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2790:	2350      	movs	r3, #80	; 0x50
    2792:	4a08      	ldr	r2, [pc, #32]	; (27b4 <system_clock_source_get_hz+0x80>)
    2794:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2796:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2798:	075b      	lsls	r3, r3, #29
    279a:	d506      	bpl.n	27aa <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    279c:	4b04      	ldr	r3, [pc, #16]	; (27b0 <system_clock_source_get_hz+0x7c>)
    279e:	68d8      	ldr	r0, [r3, #12]
    27a0:	e003      	b.n	27aa <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    27a2:	2080      	movs	r0, #128	; 0x80
    27a4:	0200      	lsls	r0, r0, #8
    27a6:	e000      	b.n	27aa <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    27a8:	4805      	ldr	r0, [pc, #20]	; (27c0 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    27aa:	bd08      	pop	{r3, pc}
    27ac:	00007934 	.word	0x00007934
    27b0:	2000018c 	.word	0x2000018c
    27b4:	40000800 	.word	0x40000800
    27b8:	007a1200 	.word	0x007a1200
    27bc:	000028f9 	.word	0x000028f9
    27c0:	02dc6c00 	.word	0x02dc6c00

000027c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    27c4:	b570      	push	{r4, r5, r6, lr}
    27c6:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27c8:	4a1a      	ldr	r2, [pc, #104]	; (2834 <system_gclk_gen_get_hz+0x70>)
    27ca:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    27cc:	b25b      	sxtb	r3, r3
    27ce:	2b00      	cmp	r3, #0
    27d0:	dbfb      	blt.n	27ca <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    27d2:	4b19      	ldr	r3, [pc, #100]	; (2838 <system_gclk_gen_get_hz+0x74>)
    27d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27d6:	4b19      	ldr	r3, [pc, #100]	; (283c <system_gclk_gen_get_hz+0x78>)
    27d8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27da:	4a16      	ldr	r2, [pc, #88]	; (2834 <system_gclk_gen_get_hz+0x70>)
    27dc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    27de:	b25b      	sxtb	r3, r3
    27e0:	2b00      	cmp	r3, #0
    27e2:	dbfb      	blt.n	27dc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    27e4:	4e13      	ldr	r6, [pc, #76]	; (2834 <system_gclk_gen_get_hz+0x70>)
    27e6:	6870      	ldr	r0, [r6, #4]
    27e8:	04c0      	lsls	r0, r0, #19
    27ea:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    27ec:	4b14      	ldr	r3, [pc, #80]	; (2840 <system_gclk_gen_get_hz+0x7c>)
    27ee:	4798      	blx	r3
    27f0:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    27f2:	4b12      	ldr	r3, [pc, #72]	; (283c <system_gclk_gen_get_hz+0x78>)
    27f4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    27f6:	6876      	ldr	r6, [r6, #4]
    27f8:	02f6      	lsls	r6, r6, #11
    27fa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    27fc:	4b11      	ldr	r3, [pc, #68]	; (2844 <system_gclk_gen_get_hz+0x80>)
    27fe:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2800:	4a0c      	ldr	r2, [pc, #48]	; (2834 <system_gclk_gen_get_hz+0x70>)
    2802:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2804:	b25b      	sxtb	r3, r3
    2806:	2b00      	cmp	r3, #0
    2808:	dbfb      	blt.n	2802 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    280a:	4b0a      	ldr	r3, [pc, #40]	; (2834 <system_gclk_gen_get_hz+0x70>)
    280c:	689c      	ldr	r4, [r3, #8]
    280e:	0a24      	lsrs	r4, r4, #8
    2810:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2812:	4b0d      	ldr	r3, [pc, #52]	; (2848 <system_gclk_gen_get_hz+0x84>)
    2814:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2816:	2e00      	cmp	r6, #0
    2818:	d107      	bne.n	282a <system_gclk_gen_get_hz+0x66>
    281a:	2c01      	cmp	r4, #1
    281c:	d907      	bls.n	282e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    281e:	1c28      	adds	r0, r5, #0
    2820:	1c21      	adds	r1, r4, #0
    2822:	4b0a      	ldr	r3, [pc, #40]	; (284c <system_gclk_gen_get_hz+0x88>)
    2824:	4798      	blx	r3
    2826:	1c05      	adds	r5, r0, #0
    2828:	e001      	b.n	282e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    282a:	3401      	adds	r4, #1
    282c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    282e:	1c28      	adds	r0, r5, #0
    2830:	bd70      	pop	{r4, r5, r6, pc}
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	40000c00 	.word	0x40000c00
    2838:	000014ad 	.word	0x000014ad
    283c:	40000c04 	.word	0x40000c04
    2840:	00002735 	.word	0x00002735
    2844:	40000c08 	.word	0x40000c08
    2848:	000014ed 	.word	0x000014ed
    284c:	000055c5 	.word	0x000055c5

00002850 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2850:	b510      	push	{r4, lr}
    2852:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2854:	4b06      	ldr	r3, [pc, #24]	; (2870 <system_gclk_chan_enable+0x20>)
    2856:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <system_gclk_chan_enable+0x24>)
    285a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    285c:	4a06      	ldr	r2, [pc, #24]	; (2878 <system_gclk_chan_enable+0x28>)
    285e:	8851      	ldrh	r1, [r2, #2]
    2860:	2380      	movs	r3, #128	; 0x80
    2862:	01db      	lsls	r3, r3, #7
    2864:	430b      	orrs	r3, r1
    2866:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2868:	4b04      	ldr	r3, [pc, #16]	; (287c <system_gclk_chan_enable+0x2c>)
    286a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    286c:	bd10      	pop	{r4, pc}
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	000014ad 	.word	0x000014ad
    2874:	40000c02 	.word	0x40000c02
    2878:	40000c00 	.word	0x40000c00
    287c:	000014ed 	.word	0x000014ed

00002880 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2880:	b510      	push	{r4, lr}
    2882:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2884:	4b0f      	ldr	r3, [pc, #60]	; (28c4 <system_gclk_chan_disable+0x44>)
    2886:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2888:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <system_gclk_chan_disable+0x48>)
    288a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    288c:	4b0f      	ldr	r3, [pc, #60]	; (28cc <system_gclk_chan_disable+0x4c>)
    288e:	885a      	ldrh	r2, [r3, #2]
    2890:	0512      	lsls	r2, r2, #20
    2892:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2894:	8859      	ldrh	r1, [r3, #2]
    2896:	4a0e      	ldr	r2, [pc, #56]	; (28d0 <system_gclk_chan_disable+0x50>)
    2898:	400a      	ands	r2, r1
    289a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    289c:	8859      	ldrh	r1, [r3, #2]
    289e:	4a0d      	ldr	r2, [pc, #52]	; (28d4 <system_gclk_chan_disable+0x54>)
    28a0:	400a      	ands	r2, r1
    28a2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    28a4:	1c19      	adds	r1, r3, #0
    28a6:	2280      	movs	r2, #128	; 0x80
    28a8:	01d2      	lsls	r2, r2, #7
    28aa:	884b      	ldrh	r3, [r1, #2]
    28ac:	4213      	tst	r3, r2
    28ae:	d1fc      	bne.n	28aa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    28b0:	4906      	ldr	r1, [pc, #24]	; (28cc <system_gclk_chan_disable+0x4c>)
    28b2:	0202      	lsls	r2, r0, #8
    28b4:	8848      	ldrh	r0, [r1, #2]
    28b6:	4b06      	ldr	r3, [pc, #24]	; (28d0 <system_gclk_chan_disable+0x50>)
    28b8:	4003      	ands	r3, r0
    28ba:	4313      	orrs	r3, r2
    28bc:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    28be:	4b06      	ldr	r3, [pc, #24]	; (28d8 <system_gclk_chan_disable+0x58>)
    28c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    28c2:	bd10      	pop	{r4, pc}
    28c4:	000014ad 	.word	0x000014ad
    28c8:	40000c02 	.word	0x40000c02
    28cc:	40000c00 	.word	0x40000c00
    28d0:	fffff0ff 	.word	0xfffff0ff
    28d4:	ffffbfff 	.word	0xffffbfff
    28d8:	000014ed 	.word	0x000014ed

000028dc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    28dc:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    28de:	780c      	ldrb	r4, [r1, #0]
    28e0:	0224      	lsls	r4, r4, #8
    28e2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    28e4:	4b02      	ldr	r3, [pc, #8]	; (28f0 <system_gclk_chan_set_config+0x14>)
    28e6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    28e8:	b2a4      	uxth	r4, r4
    28ea:	4b02      	ldr	r3, [pc, #8]	; (28f4 <system_gclk_chan_set_config+0x18>)
    28ec:	805c      	strh	r4, [r3, #2]
}
    28ee:	bd10      	pop	{r4, pc}
    28f0:	00002881 	.word	0x00002881
    28f4:	40000c00 	.word	0x40000c00

000028f8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    28f8:	b510      	push	{r4, lr}
    28fa:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    28fc:	4b06      	ldr	r3, [pc, #24]	; (2918 <system_gclk_chan_get_hz+0x20>)
    28fe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2900:	4b06      	ldr	r3, [pc, #24]	; (291c <system_gclk_chan_get_hz+0x24>)
    2902:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2904:	4b06      	ldr	r3, [pc, #24]	; (2920 <system_gclk_chan_get_hz+0x28>)
    2906:	885c      	ldrh	r4, [r3, #2]
    2908:	0524      	lsls	r4, r4, #20
    290a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    290c:	4b05      	ldr	r3, [pc, #20]	; (2924 <system_gclk_chan_get_hz+0x2c>)
    290e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2910:	1c20      	adds	r0, r4, #0
    2912:	4b05      	ldr	r3, [pc, #20]	; (2928 <system_gclk_chan_get_hz+0x30>)
    2914:	4798      	blx	r3
}
    2916:	bd10      	pop	{r4, pc}
    2918:	000014ad 	.word	0x000014ad
    291c:	40000c02 	.word	0x40000c02
    2920:	40000c00 	.word	0x40000c00
    2924:	000014ed 	.word	0x000014ed
    2928:	000027c5 	.word	0x000027c5

0000292c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    292c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    292e:	78d3      	ldrb	r3, [r2, #3]
    2930:	2b00      	cmp	r3, #0
    2932:	d11e      	bne.n	2972 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2934:	7814      	ldrb	r4, [r2, #0]
    2936:	2c80      	cmp	r4, #128	; 0x80
    2938:	d004      	beq.n	2944 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    293a:	0624      	lsls	r4, r4, #24
    293c:	2380      	movs	r3, #128	; 0x80
    293e:	025b      	lsls	r3, r3, #9
    2940:	431c      	orrs	r4, r3
    2942:	e000      	b.n	2946 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2944:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2946:	7853      	ldrb	r3, [r2, #1]
    2948:	2502      	movs	r5, #2
    294a:	43ab      	bics	r3, r5
    294c:	d10a      	bne.n	2964 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    294e:	7893      	ldrb	r3, [r2, #2]
    2950:	2b00      	cmp	r3, #0
    2952:	d103      	bne.n	295c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2954:	2380      	movs	r3, #128	; 0x80
    2956:	029b      	lsls	r3, r3, #10
    2958:	431c      	orrs	r4, r3
    295a:	e002      	b.n	2962 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    295c:	23c0      	movs	r3, #192	; 0xc0
    295e:	02db      	lsls	r3, r3, #11
    2960:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2962:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2964:	7853      	ldrb	r3, [r2, #1]
    2966:	3b01      	subs	r3, #1
    2968:	2b01      	cmp	r3, #1
    296a:	d812      	bhi.n	2992 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    296c:	4b18      	ldr	r3, [pc, #96]	; (29d0 <_system_pinmux_config+0xa4>)
    296e:	401c      	ands	r4, r3
    2970:	e00f      	b.n	2992 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2972:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2974:	040b      	lsls	r3, r1, #16
    2976:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2978:	24a0      	movs	r4, #160	; 0xa0
    297a:	05e4      	lsls	r4, r4, #23
    297c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    297e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2980:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2982:	24d0      	movs	r4, #208	; 0xd0
    2984:	0624      	lsls	r4, r4, #24
    2986:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2988:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    298a:	78d3      	ldrb	r3, [r2, #3]
    298c:	2b00      	cmp	r3, #0
    298e:	d018      	beq.n	29c2 <_system_pinmux_config+0x96>
    2990:	e01c      	b.n	29cc <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2992:	040b      	lsls	r3, r1, #16
    2994:	0c1b      	lsrs	r3, r3, #16
    2996:	25a0      	movs	r5, #160	; 0xa0
    2998:	05ed      	lsls	r5, r5, #23
    299a:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    299c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    299e:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    29a0:	0c0b      	lsrs	r3, r1, #16
    29a2:	25d0      	movs	r5, #208	; 0xd0
    29a4:	062d      	lsls	r5, r5, #24
    29a6:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    29a8:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    29aa:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    29ac:	78d3      	ldrb	r3, [r2, #3]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d10c      	bne.n	29cc <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    29b2:	0363      	lsls	r3, r4, #13
    29b4:	d505      	bpl.n	29c2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    29b6:	7893      	ldrb	r3, [r2, #2]
    29b8:	2b01      	cmp	r3, #1
    29ba:	d101      	bne.n	29c0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    29bc:	6181      	str	r1, [r0, #24]
    29be:	e000      	b.n	29c2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    29c0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29c2:	7853      	ldrb	r3, [r2, #1]
    29c4:	3b01      	subs	r3, #1
    29c6:	2b01      	cmp	r3, #1
    29c8:	d800      	bhi.n	29cc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    29ca:	6081      	str	r1, [r0, #8]
		}
	}
}
    29cc:	bd30      	pop	{r4, r5, pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	fffbffff 	.word	0xfffbffff

000029d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    29d4:	b508      	push	{r3, lr}
    29d6:	1c03      	adds	r3, r0, #0
    29d8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29da:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    29dc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    29de:	2900      	cmp	r1, #0
    29e0:	d104      	bne.n	29ec <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    29e2:	0958      	lsrs	r0, r3, #5
    29e4:	01c0      	lsls	r0, r0, #7
    29e6:	4905      	ldr	r1, [pc, #20]	; (29fc <system_pinmux_pin_set_config+0x28>)
    29e8:	468c      	mov	ip, r1
    29ea:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    29ec:	211f      	movs	r1, #31
    29ee:	400b      	ands	r3, r1
    29f0:	391e      	subs	r1, #30
    29f2:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    29f4:	4b02      	ldr	r3, [pc, #8]	; (2a00 <system_pinmux_pin_set_config+0x2c>)
    29f6:	4798      	blx	r3
}
    29f8:	bd08      	pop	{r3, pc}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	41004400 	.word	0x41004400
    2a00:	0000292d 	.word	0x0000292d

00002a04 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2a04:	4770      	bx	lr
    2a06:	46c0      	nop			; (mov r8, r8)

00002a08 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2a08:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	//system_clock_init();

	/* Initialize board hardware */
	system_board_init();
    2a0a:	4b04      	ldr	r3, [pc, #16]	; (2a1c <system_init+0x14>)
    2a0c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2a0e:	4b04      	ldr	r3, [pc, #16]	; (2a20 <system_init+0x18>)
    2a10:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2a12:	4b04      	ldr	r3, [pc, #16]	; (2a24 <system_init+0x1c>)
    2a14:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2a16:	4b04      	ldr	r3, [pc, #16]	; (2a28 <system_init+0x20>)
    2a18:	4798      	blx	r3
}
    2a1a:	bd08      	pop	{r3, pc}
    2a1c:	00002a05 	.word	0x00002a05
    2a20:	00002a05 	.word	0x00002a05
    2a24:	00001b71 	.word	0x00001b71
    2a28:	00002a05 	.word	0x00002a05

00002a2c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    2a2c:	4b08      	ldr	r3, [pc, #32]	; (2a50 <_tcc_get_inst_index+0x24>)
    2a2e:	4298      	cmp	r0, r3
    2a30:	d00a      	beq.n	2a48 <_tcc_get_inst_index+0x1c>
    2a32:	4b08      	ldr	r3, [pc, #32]	; (2a54 <_tcc_get_inst_index+0x28>)
    2a34:	4298      	cmp	r0, r3
    2a36:	d005      	beq.n	2a44 <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2a38:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    2a3a:	4a07      	ldr	r2, [pc, #28]	; (2a58 <_tcc_get_inst_index+0x2c>)
    2a3c:	4290      	cmp	r0, r2
    2a3e:	d105      	bne.n	2a4c <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2a40:	3302      	adds	r3, #2
    2a42:	e002      	b.n	2a4a <_tcc_get_inst_index+0x1e>
    2a44:	2301      	movs	r3, #1
    2a46:	e000      	b.n	2a4a <_tcc_get_inst_index+0x1e>
    2a48:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
    2a4a:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2a4c:	1c18      	adds	r0, r3, #0
    2a4e:	4770      	bx	lr
    2a50:	42002000 	.word	0x42002000
    2a54:	42002400 	.word	0x42002400
    2a58:	42002800 	.word	0x42002800

00002a5c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    2a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a5e:	1c0f      	adds	r7, r1, #0
    2a60:	1c15      	adds	r5, r2, #0
    2a62:	1c1e      	adds	r6, r3, #0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2a64:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2a66:	1c20      	adds	r0, r4, #0
    2a68:	4b13      	ldr	r3, [pc, #76]	; (2ab8 <_tcc_set_compare_value+0x5c>)
    2a6a:	4798      	blx	r3

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2a6c:	4b13      	ldr	r3, [pc, #76]	; (2abc <_tcc_set_compare_value+0x60>)
    2a6e:	5c1a      	ldrb	r2, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
    2a70:	2317      	movs	r3, #23
	Tcc *const tcc_module = module_inst->hw;
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2a72:	42ba      	cmp	r2, r7
    2a74:	d91d      	bls.n	2ab2 <_tcc_set_compare_value+0x56>
		return STATUS_ERR_INVALID_ARG;
	}

	uint32_t max_count = _tcc_maxs[module_index];
    2a76:	0080      	lsls	r0, r0, #2

	/* Check compare value */
	if (compare > max_count) {
    2a78:	4b11      	ldr	r3, [pc, #68]	; (2ac0 <_tcc_set_compare_value+0x64>)
    2a7a:	58c2      	ldr	r2, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    2a7c:	2317      	movs	r3, #23
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    2a7e:	42aa      	cmp	r2, r5
    2a80:	d317      	bcc.n	2ab2 <_tcc_set_compare_value+0x56>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    2a82:	2e00      	cmp	r6, #0
    2a84:	d00a      	beq.n	2a9c <_tcc_set_compare_value+0x40>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    2a86:	2280      	movs	r2, #128	; 0x80
    2a88:	0312      	lsls	r2, r2, #12
    2a8a:	40ba      	lsls	r2, r7

	if (double_buffering_enabled) {
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
    2a8c:	68a3      	ldr	r3, [r4, #8]
    2a8e:	4213      	tst	r3, r2
    2a90:	d1fc      	bne.n	2a8c <_tcc_set_compare_value+0x30>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    2a92:	371c      	adds	r7, #28
    2a94:	00bf      	lsls	r7, r7, #2
    2a96:	513d      	str	r5, [r7, r4]
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
    2a98:	2300      	movs	r3, #0
    2a9a:	e00a      	b.n	2ab2 <_tcc_set_compare_value+0x56>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2a9c:	2280      	movs	r2, #128	; 0x80
    2a9e:	0052      	lsls	r2, r2, #1
    2aa0:	40ba      	lsls	r2, r7
    2aa2:	68a3      	ldr	r3, [r4, #8]
    2aa4:	4213      	tst	r3, r2
    2aa6:	d1fc      	bne.n	2aa2 <_tcc_set_compare_value+0x46>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
    2aa8:	3710      	adds	r7, #16
    2aaa:	00bf      	lsls	r7, r7, #2
    2aac:	19e4      	adds	r4, r4, r7
    2aae:	6065      	str	r5, [r4, #4]
	}
	return STATUS_OK;
    2ab0:	2300      	movs	r3, #0
}
    2ab2:	1c18      	adds	r0, r3, #0
    2ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	00002a2d 	.word	0x00002a2d
    2abc:	00007974 	.word	0x00007974
    2ac0:	00007968 	.word	0x00007968

00002ac4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    2ac4:	b510      	push	{r4, lr}
    2ac6:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2ac8:	1c08      	adds	r0, r1, #0
    2aca:	4b4f      	ldr	r3, [pc, #316]	; (2c08 <tcc_get_config_defaults+0x144>)
    2acc:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    2ace:	2300      	movs	r3, #0
    2ad0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    2ad2:	0080      	lsls	r0, r0, #2
    2ad4:	4a4d      	ldr	r2, [pc, #308]	; (2c0c <tcc_get_config_defaults+0x148>)
    2ad6:	5882      	ldr	r2, [r0, r2]
    2ad8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    2ada:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    2adc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2ade:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2ae0:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    2ae2:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2ae4:	61e3      	str	r3, [r4, #28]
    2ae6:	6223      	str	r3, [r4, #32]
    2ae8:	6263      	str	r3, [r4, #36]	; 0x24
    2aea:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2aec:	7523      	strb	r3, [r4, #20]
    2aee:	7563      	strb	r3, [r4, #21]
    2af0:	75a3      	strb	r3, [r4, #22]
    2af2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    2af4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    2af6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    2af8:	7423      	strb	r3, [r4, #16]
    2afa:	7463      	strb	r3, [r4, #17]
    2afc:	74a3      	strb	r3, [r4, #18]
    2afe:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    2b00:	222c      	movs	r2, #44	; 0x2c
    2b02:	54a3      	strb	r3, [r4, r2]
    2b04:	3201      	adds	r2, #1
    2b06:	54a3      	strb	r3, [r4, r2]
    2b08:	3201      	adds	r2, #1
    2b0a:	54a3      	strb	r3, [r4, r2]
    2b0c:	3201      	adds	r2, #1
    2b0e:	54a3      	strb	r3, [r4, r2]
    2b10:	3201      	adds	r2, #1
    2b12:	54a3      	strb	r3, [r4, r2]
    2b14:	3201      	adds	r2, #1
    2b16:	54a3      	strb	r3, [r4, r2]
    2b18:	3201      	adds	r2, #1
    2b1a:	54a3      	strb	r3, [r4, r2]
    2b1c:	3201      	adds	r2, #1
    2b1e:	54a3      	strb	r3, [r4, r2]
    2b20:	3201      	adds	r2, #1
    2b22:	54a3      	strb	r3, [r4, r2]
    2b24:	3201      	adds	r2, #1
    2b26:	54a3      	strb	r3, [r4, r2]
    2b28:	3201      	adds	r2, #1
    2b2a:	54a3      	strb	r3, [r4, r2]
    2b2c:	3201      	adds	r2, #1
    2b2e:	54a3      	strb	r3, [r4, r2]
    2b30:	3201      	adds	r2, #1
    2b32:	54a3      	strb	r3, [r4, r2]
    2b34:	3201      	adds	r2, #1
    2b36:	54a3      	strb	r3, [r4, r2]
    2b38:	3201      	adds	r2, #1
    2b3a:	54a3      	strb	r3, [r4, r2]
    2b3c:	3201      	adds	r2, #1
    2b3e:	54a3      	strb	r3, [r4, r2]
    2b40:	3201      	adds	r2, #1
    2b42:	54a3      	strb	r3, [r4, r2]
    2b44:	3201      	adds	r2, #1
    2b46:	54a3      	strb	r3, [r4, r2]
    2b48:	3201      	adds	r2, #1
    2b4a:	54a3      	strb	r3, [r4, r2]
    2b4c:	3201      	adds	r2, #1
    2b4e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    2b50:	3201      	adds	r2, #1
    2b52:	54a3      	strb	r3, [r4, r2]
    2b54:	3201      	adds	r2, #1
    2b56:	54a3      	strb	r3, [r4, r2]
    2b58:	3201      	adds	r2, #1
    2b5a:	54a3      	strb	r3, [r4, r2]
    2b5c:	3201      	adds	r2, #1
    2b5e:	54a3      	strb	r3, [r4, r2]
    2b60:	3201      	adds	r2, #1
    2b62:	54a3      	strb	r3, [r4, r2]
    2b64:	3201      	adds	r2, #1
    2b66:	54a3      	strb	r3, [r4, r2]
    2b68:	3201      	adds	r2, #1
    2b6a:	54a3      	strb	r3, [r4, r2]
    2b6c:	3201      	adds	r2, #1
    2b6e:	54a3      	strb	r3, [r4, r2]
    2b70:	3201      	adds	r2, #1
    2b72:	54a3      	strb	r3, [r4, r2]
    2b74:	3201      	adds	r2, #1
    2b76:	54a3      	strb	r3, [r4, r2]
    2b78:	3201      	adds	r2, #1
    2b7a:	54a3      	strb	r3, [r4, r2]
    2b7c:	3201      	adds	r2, #1
    2b7e:	54a3      	strb	r3, [r4, r2]
    2b80:	3201      	adds	r2, #1
    2b82:	54a3      	strb	r3, [r4, r2]
    2b84:	3201      	adds	r2, #1
    2b86:	54a3      	strb	r3, [r4, r2]
    2b88:	3201      	adds	r2, #1
    2b8a:	54a3      	strb	r3, [r4, r2]
    2b8c:	3201      	adds	r2, #1
    2b8e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2b90:	3201      	adds	r2, #1
    2b92:	54a3      	strb	r3, [r4, r2]
    2b94:	3201      	adds	r2, #1
    2b96:	54a3      	strb	r3, [r4, r2]
    2b98:	3201      	adds	r2, #1
    2b9a:	54a3      	strb	r3, [r4, r2]
    2b9c:	3201      	adds	r2, #1
    2b9e:	54a3      	strb	r3, [r4, r2]
    2ba0:	3201      	adds	r2, #1
    2ba2:	54a3      	strb	r3, [r4, r2]
    2ba4:	3201      	adds	r2, #1
    2ba6:	54a3      	strb	r3, [r4, r2]
    2ba8:	3201      	adds	r2, #1
    2baa:	54a3      	strb	r3, [r4, r2]
    2bac:	3201      	adds	r2, #1
    2bae:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2bb0:	3241      	adds	r2, #65	; 0x41
    2bb2:	54a3      	strb	r3, [r4, r2]
    2bb4:	65a3      	str	r3, [r4, #88]	; 0x58
    2bb6:	67a3      	str	r3, [r4, #120]	; 0x78
    2bb8:	3201      	adds	r2, #1
    2bba:	54a3      	strb	r3, [r4, r2]
    2bbc:	65e3      	str	r3, [r4, #92]	; 0x5c
    2bbe:	67e3      	str	r3, [r4, #124]	; 0x7c
    2bc0:	3201      	adds	r2, #1
    2bc2:	54a3      	strb	r3, [r4, r2]
    2bc4:	6623      	str	r3, [r4, #96]	; 0x60
    2bc6:	3a1a      	subs	r2, #26
    2bc8:	50a3      	str	r3, [r4, r2]
    2bca:	321b      	adds	r2, #27
    2bcc:	54a3      	strb	r3, [r4, r2]
    2bce:	6663      	str	r3, [r4, #100]	; 0x64
    2bd0:	3a17      	subs	r2, #23
    2bd2:	50a3      	str	r3, [r4, r2]
    2bd4:	3218      	adds	r2, #24
    2bd6:	54a3      	strb	r3, [r4, r2]
    2bd8:	66a3      	str	r3, [r4, #104]	; 0x68
    2bda:	3a14      	subs	r2, #20
    2bdc:	50a3      	str	r3, [r4, r2]
    2bde:	3215      	adds	r2, #21
    2be0:	54a3      	strb	r3, [r4, r2]
    2be2:	66e3      	str	r3, [r4, #108]	; 0x6c
    2be4:	3a11      	subs	r2, #17
    2be6:	50a3      	str	r3, [r4, r2]
    2be8:	3212      	adds	r2, #18
    2bea:	54a3      	strb	r3, [r4, r2]
    2bec:	6723      	str	r3, [r4, #112]	; 0x70
    2bee:	3a0e      	subs	r2, #14
    2bf0:	50a3      	str	r3, [r4, r2]
    2bf2:	320f      	adds	r2, #15
    2bf4:	54a3      	strb	r3, [r4, r2]
    2bf6:	6763      	str	r3, [r4, #116]	; 0x74
    2bf8:	3a0b      	subs	r2, #11
    2bfa:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    2bfc:	2101      	movs	r1, #1
    2bfe:	320c      	adds	r2, #12
    2c00:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    2c02:	3201      	adds	r2, #1
    2c04:	54a3      	strb	r3, [r4, r2]
}
    2c06:	bd10      	pop	{r4, pc}
    2c08:	00002a2d 	.word	0x00002a2d
    2c0c:	00007968 	.word	0x00007968

00002c10 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	465f      	mov	r7, fp
    2c14:	4656      	mov	r6, sl
    2c16:	464d      	mov	r5, r9
    2c18:	4644      	mov	r4, r8
    2c1a:	b4f0      	push	{r4, r5, r6, r7}
    2c1c:	b08f      	sub	sp, #60	; 0x3c
    2c1e:	9000      	str	r0, [sp, #0]
    2c20:	1c0c      	adds	r4, r1, #0
    2c22:	1c17      	adds	r7, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    2c24:	1c08      	adds	r0, r1, #0
    2c26:	4b87      	ldr	r3, [pc, #540]	; (2e44 <tcc_init+0x234>)
    2c28:	4798      	blx	r3
    2c2a:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2c2c:	1c06      	adds	r6, r0, #0
    2c2e:	4a86      	ldr	r2, [pc, #536]	; (2e48 <tcc_init+0x238>)
    2c30:	6a11      	ldr	r1, [r2, #32]
    2c32:	0080      	lsls	r0, r0, #2
    2c34:	4b85      	ldr	r3, [pc, #532]	; (2e4c <tcc_init+0x23c>)
    2c36:	58c3      	ldr	r3, [r0, r3]
    2c38:	430b      	orrs	r3, r1
    2c3a:	6213      	str	r3, [r2, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2c3c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2c3e:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2c40:	079b      	lsls	r3, r3, #30
    2c42:	d500      	bpl.n	2c46 <tcc_init+0x36>
    2c44:	e1dd      	b.n	3002 <tcc_init+0x3f2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2c46:	6823      	ldr	r3, [r4, #0]
    2c48:	2201      	movs	r2, #1
    2c4a:	4013      	ands	r3, r2
    2c4c:	d000      	beq.n	2c50 <tcc_init+0x40>
    2c4e:	e1d8      	b.n	3002 <tcc_init+0x3f2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    2c50:	00aa      	lsls	r2, r5, #2
    2c52:	497f      	ldr	r1, [pc, #508]	; (2e50 <tcc_init+0x240>)
    2c54:	5852      	ldr	r2, [r2, r1]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    2c56:	3805      	subs	r0, #5

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    2c58:	6839      	ldr	r1, [r7, #0]
    2c5a:	428a      	cmp	r2, r1
    2c5c:	d200      	bcs.n	2c60 <tcc_init+0x50>
    2c5e:	e1d0      	b.n	3002 <tcc_init+0x3f2>
		|| (config->counter.period > count_max)
    2c60:	6879      	ldr	r1, [r7, #4]
    2c62:	428a      	cmp	r2, r1
    2c64:	d200      	bcs.n	2c68 <tcc_init+0x58>
    2c66:	e1cc      	b.n	3002 <tcc_init+0x3f2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    2c68:	69f9      	ldr	r1, [r7, #28]
    2c6a:	428a      	cmp	r2, r1
    2c6c:	d200      	bcs.n	2c70 <tcc_init+0x60>
    2c6e:	e1b3      	b.n	2fd8 <tcc_init+0x3c8>
    2c70:	6a39      	ldr	r1, [r7, #32]
    2c72:	4291      	cmp	r1, r2
    2c74:	d900      	bls.n	2c78 <tcc_init+0x68>
    2c76:	e1b1      	b.n	2fdc <tcc_init+0x3cc>
    2c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2c7a:	428a      	cmp	r2, r1
    2c7c:	d200      	bcs.n	2c80 <tcc_init+0x70>
    2c7e:	e1af      	b.n	2fe0 <tcc_init+0x3d0>
    2c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2c82:	428a      	cmp	r2, r1
    2c84:	d200      	bcs.n	2c88 <tcc_init+0x78>
    2c86:	e1ad      	b.n	2fe4 <tcc_init+0x3d4>
    2c88:	2298      	movs	r2, #152	; 0x98
    2c8a:	4694      	mov	ip, r2
    2c8c:	44bc      	add	ip, r7
    2c8e:	4662      	mov	r2, ip
    2c90:	9204      	str	r2, [sp, #16]
    2c92:	4661      	mov	r1, ip
    2c94:	2200      	movs	r2, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    2c96:	7808      	ldrb	r0, [r1, #0]
    2c98:	2800      	cmp	r0, #0
    2c9a:	d004      	beq.n	2ca6 <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    2c9c:	486d      	ldr	r0, [pc, #436]	; (2e54 <tcc_init+0x244>)
    2c9e:	5d80      	ldrb	r0, [r0, r6]
    2ca0:	4290      	cmp	r0, r2
    2ca2:	dc00      	bgt.n	2ca6 <tcc_init+0x96>
    2ca4:	e1a0      	b.n	2fe8 <tcc_init+0x3d8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2ca6:	3201      	adds	r2, #1
    2ca8:	3101      	adds	r1, #1
    2caa:	2a08      	cmp	r2, #8
    2cac:	d1f3      	bne.n	2c96 <tcc_init+0x86>
    2cae:	2200      	movs	r2, #0
    2cb0:	4690      	mov	r8, r2

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2cb2:	2180      	movs	r1, #128	; 0x80
    2cb4:	0449      	lsls	r1, r1, #17
    2cb6:	468c      	mov	ip, r1
    2cb8:	18b9      	adds	r1, r7, r2
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    2cba:	7c09      	ldrb	r1, [r1, #16]
    2cbc:	2901      	cmp	r1, #1
    2cbe:	d109      	bne.n	2cd4 <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    2cc0:	4965      	ldr	r1, [pc, #404]	; (2e58 <tcc_init+0x248>)
    2cc2:	5d89      	ldrb	r1, [r1, r6]
    2cc4:	4291      	cmp	r1, r2
    2cc6:	da00      	bge.n	2cca <tcc_init+0xba>
    2cc8:	e190      	b.n	2fec <tcc_init+0x3dc>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    2cca:	4661      	mov	r1, ip
    2ccc:	4091      	lsls	r1, r2
    2cce:	4640      	mov	r0, r8
    2cd0:	4308      	orrs	r0, r1
    2cd2:	4680      	mov	r8, r0
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2cd4:	3201      	adds	r2, #1
    2cd6:	2a04      	cmp	r2, #4
    2cd8:	d1ee      	bne.n	2cb8 <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    2cda:	329d      	adds	r2, #157	; 0x9d
    2cdc:	5cba      	ldrb	r2, [r7, r2]
    2cde:	2a00      	cmp	r2, #0
    2ce0:	d004      	beq.n	2cec <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2ce2:	2280      	movs	r2, #128	; 0x80
    2ce4:	0112      	lsls	r2, r2, #4
    2ce6:	4641      	mov	r1, r8
    2ce8:	4311      	orrs	r1, r2
    2cea:	4688      	mov	r8, r1
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2cec:	7b3a      	ldrb	r2, [r7, #12]
    2cee:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2cf0:	7afa      	ldrb	r2, [r7, #11]
    2cf2:	9207      	str	r2, [sp, #28]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    2cf4:	7a3a      	ldrb	r2, [r7, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2cf6:	1e51      	subs	r1, r2, #1
    2cf8:	418a      	sbcs	r2, r1
    2cfa:	0092      	lsls	r2, r2, #2
    2cfc:	9203      	str	r2, [sp, #12]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2cfe:	7a7a      	ldrb	r2, [r7, #9]
    2d00:	2a01      	cmp	r2, #1
    2d02:	d102      	bne.n	2d0a <tcc_init+0xfa>
		ctrlb |= TCC_CTRLBSET_DIR;
    2d04:	9903      	ldr	r1, [sp, #12]
    2d06:	4311      	orrs	r1, r2
    2d08:	9103      	str	r1, [sp, #12]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    2d0a:	4a53      	ldr	r2, [pc, #332]	; (2e58 <tcc_init+0x248>)
    2d0c:	5d52      	ldrb	r2, [r2, r5]
    2d0e:	1c11      	adds	r1, r2, #0
    2d10:	9205      	str	r2, [sp, #20]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    2d12:	2235      	movs	r2, #53	; 0x35
    2d14:	5cb8      	ldrb	r0, [r7, r2]
    2d16:	4281      	cmp	r1, r0
    2d18:	d800      	bhi.n	2d1c <tcc_init+0x10c>
    2d1a:	e171      	b.n	3000 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    2d1c:	222c      	movs	r2, #44	; 0x2c
    2d1e:	5cba      	ldrb	r2, [r7, r2]
    2d20:	2a0f      	cmp	r2, #15
    2d22:	d900      	bls.n	2d26 <tcc_init+0x116>
    2d24:	e16c      	b.n	3000 <tcc_init+0x3f0>
    2d26:	212d      	movs	r1, #45	; 0x2d
    2d28:	468c      	mov	ip, r1
    2d2a:	44bc      	add	ip, r7
    2d2c:	4661      	mov	r1, ip
    2d2e:	9101      	str	r1, [sp, #4]
    2d30:	2100      	movs	r1, #0
    2d32:	9608      	str	r6, [sp, #32]
    2d34:	4699      	mov	r9, r3
    2d36:	46bb      	mov	fp, r7
    2d38:	1c0f      	adds	r7, r1, #0
    2d3a:	46a2      	mov	sl, r4
    2d3c:	9509      	str	r5, [sp, #36]	; 0x24
    2d3e:	e00c      	b.n	2d5a <tcc_init+0x14a>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    2d40:	7c90      	ldrb	r0, [r2, #18]
    2d42:	9b05      	ldr	r3, [sp, #20]
    2d44:	4283      	cmp	r3, r0
    2d46:	d800      	bhi.n	2d4a <tcc_init+0x13a>
    2d48:	e15a      	b.n	3000 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    2d4a:	7a52      	ldrb	r2, [r2, #9]
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	330a      	adds	r3, #10
    2d50:	9301      	str	r3, [sp, #4]
    2d52:	3704      	adds	r7, #4
    2d54:	2a0f      	cmp	r2, #15
    2d56:	d900      	bls.n	2d5a <tcc_init+0x14a>
    2d58:	e152      	b.n	3000 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2d5a:	0611      	lsls	r1, r2, #24
    2d5c:	23f0      	movs	r3, #240	; 0xf0
    2d5e:	051b      	lsls	r3, r3, #20
    2d60:	4019      	ands	r1, r3
    2d62:	9b01      	ldr	r3, [sp, #4]
    2d64:	1c1a      	adds	r2, r3, #0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2d66:	781d      	ldrb	r5, [r3, #0]
    2d68:	042d      	lsls	r5, r5, #16
    2d6a:	24ff      	movs	r4, #255	; 0xff
    2d6c:	0424      	lsls	r4, r4, #16
    2d6e:	4025      	ands	r5, r4
    2d70:	9502      	str	r5, [sp, #8]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2d72:	785b      	ldrb	r3, [r3, #1]
    2d74:	2480      	movs	r4, #128	; 0x80
    2d76:	2b00      	cmp	r3, #0
    2d78:	d100      	bne.n	2d7c <tcc_init+0x16c>
    2d7a:	464c      	mov	r4, r9
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2d7c:	7896      	ldrb	r6, [r2, #2]
    2d7e:	2308      	movs	r3, #8
    2d80:	2e00      	cmp	r6, #0
    2d82:	d100      	bne.n	2d86 <tcc_init+0x176>
    2d84:	464b      	mov	r3, r9
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2d86:	78d6      	ldrb	r6, [r2, #3]
    2d88:	46b4      	mov	ip, r6
    2d8a:	2610      	movs	r6, #16
    2d8c:	4665      	mov	r5, ip
    2d8e:	2d00      	cmp	r5, #0
    2d90:	d100      	bne.n	2d94 <tcc_init+0x184>
    2d92:	464e      	mov	r6, r9
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2d94:	0280      	lsls	r0, r0, #10
    2d96:	25c0      	movs	r5, #192	; 0xc0
    2d98:	012d      	lsls	r5, r5, #4
    2d9a:	4028      	ands	r0, r5
    2d9c:	4301      	orrs	r1, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    2d9e:	7910      	ldrb	r0, [r2, #4]
    2da0:	2503      	movs	r5, #3
    2da2:	4028      	ands	r0, r5
    2da4:	4301      	orrs	r1, r0
    2da6:	9802      	ldr	r0, [sp, #8]
    2da8:	4301      	orrs	r1, r0
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2daa:	7955      	ldrb	r5, [r2, #5]
    2dac:	016d      	lsls	r5, r5, #5
    2dae:	2060      	movs	r0, #96	; 0x60
    2db0:	4028      	ands	r0, r5
    2db2:	4301      	orrs	r1, r0
    2db4:	1c0d      	adds	r5, r1, #0
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2db6:	7990      	ldrb	r0, [r2, #6]
    2db8:	0200      	lsls	r0, r0, #8
    2dba:	21c0      	movs	r1, #192	; 0xc0
    2dbc:	0089      	lsls	r1, r1, #2
    2dbe:	4001      	ands	r1, r0
    2dc0:	430d      	orrs	r5, r1
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2dc2:	79d0      	ldrb	r0, [r2, #7]
    2dc4:	0300      	lsls	r0, r0, #12
    2dc6:	21e0      	movs	r1, #224	; 0xe0
    2dc8:	01c9      	lsls	r1, r1, #7
    2dca:	4001      	ands	r1, r0
    2dcc:	430d      	orrs	r5, r1
    2dce:	432c      	orrs	r4, r5
    2dd0:	4323      	orrs	r3, r4
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2dd2:	431e      	orrs	r6, r3
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    2dd4:	ab0c      	add	r3, sp, #48	; 0x30
    2dd6:	50fe      	str	r6, [r7, r3]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2dd8:	2f04      	cmp	r7, #4
    2dda:	d1b1      	bne.n	2d40 <tcc_init+0x130>
    2ddc:	9e08      	ldr	r6, [sp, #32]
    2dde:	4654      	mov	r4, sl
    2de0:	465f      	mov	r7, fp
    2de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    2de4:	4b1b      	ldr	r3, [pc, #108]	; (2e54 <tcc_init+0x244>)
    2de6:	5d5b      	ldrb	r3, [r3, r5]
    2de8:	469c      	mov	ip, r3
    2dea:	4658      	mov	r0, fp
    2dec:	3050      	adds	r0, #80	; 0x50
    2dee:	465a      	mov	r2, fp
    2df0:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    2df2:	2300      	movs	r3, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2df4:	2101      	movs	r1, #1
    2df6:	468b      	mov	fp, r1
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2df8:	2180      	movs	r1, #128	; 0x80
    2dfa:	0249      	lsls	r1, r1, #9
    2dfc:	468a      	mov	sl, r1
    2dfe:	9401      	str	r4, [sp, #4]
    2e00:	1c34      	adds	r4, r6, #0
    2e02:	4666      	mov	r6, ip
    2e04:	1c29      	adds	r1, r5, #0
    2e06:	1c1d      	adds	r5, r3, #0
    2e08:	46b9      	mov	r9, r7
    2e0a:	1c0f      	adds	r7, r1, #0
    2e0c:	9901      	ldr	r1, [sp, #4]
    2e0e:	468c      	mov	ip, r1
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    2e10:	7801      	ldrb	r1, [r0, #0]
    2e12:	2900      	cmp	r1, #0
    2e14:	d009      	beq.n	2e2a <tcc_init+0x21a>
			if (i >= ow_num) {
    2e16:	429e      	cmp	r6, r3
    2e18:	d800      	bhi.n	2e1c <tcc_init+0x20c>
    2e1a:	e0e9      	b.n	2ff0 <tcc_init+0x3e0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2e1c:	4651      	mov	r1, sl
    2e1e:	4099      	lsls	r1, r3
    2e20:	430d      	orrs	r5, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2e22:	7811      	ldrb	r1, [r2, #0]
    2e24:	2900      	cmp	r1, #0
    2e26:	d106      	bne.n	2e36 <tcc_init+0x226>
    2e28:	e01b      	b.n	2e62 <tcc_init+0x252>
    2e2a:	7811      	ldrb	r1, [r2, #0]
    2e2c:	2900      	cmp	r1, #0
    2e2e:	d018      	beq.n	2e62 <tcc_init+0x252>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    2e30:	429e      	cmp	r6, r3
    2e32:	d800      	bhi.n	2e36 <tcc_init+0x226>
    2e34:	e0de      	b.n	2ff4 <tcc_init+0x3e4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2e36:	2902      	cmp	r1, #2
    2e38:	d110      	bne.n	2e5c <tcc_init+0x24c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2e3a:	2102      	movs	r1, #2
    2e3c:	31ff      	adds	r1, #255	; 0xff
    2e3e:	4099      	lsls	r1, r3
    2e40:	430d      	orrs	r5, r1
    2e42:	e00e      	b.n	2e62 <tcc_init+0x252>
    2e44:	00002a2d 	.word	0x00002a2d
    2e48:	40000400 	.word	0x40000400
    2e4c:	0000795c 	.word	0x0000795c
    2e50:	00007968 	.word	0x00007968
    2e54:	00007978 	.word	0x00007978
    2e58:	00007974 	.word	0x00007974
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2e5c:	4659      	mov	r1, fp
    2e5e:	4099      	lsls	r1, r3
    2e60:	430d      	orrs	r5, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2e62:	3301      	adds	r3, #1
    2e64:	3001      	adds	r0, #1
    2e66:	3202      	adds	r2, #2
    2e68:	2b08      	cmp	r3, #8
    2e6a:	d1d1      	bne.n	2e10 <tcc_init+0x200>
    2e6c:	1c26      	adds	r6, r4, #0
    2e6e:	4664      	mov	r4, ip
    2e70:	1c3b      	adds	r3, r7, #0
    2e72:	464f      	mov	r7, r9
    2e74:	46a9      	mov	r9, r5
    2e76:	1c1d      	adds	r5, r3, #0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    2e78:	4b65      	ldr	r3, [pc, #404]	; (3010 <tcc_init+0x400>)
    2e7a:	5d5b      	ldrb	r3, [r3, r5]
    2e7c:	9301      	str	r3, [sp, #4]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2e7e:	7e7b      	ldrb	r3, [r7, #25]
    2e80:	011b      	lsls	r3, r3, #4
    2e82:	2230      	movs	r2, #48	; 0x30
    2e84:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2e86:	7e3a      	ldrb	r2, [r7, #24]
    2e88:	2107      	movs	r1, #7
    2e8a:	400a      	ands	r2, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2e8c:	4313      	orrs	r3, r2
    2e8e:	1c18      	adds	r0, r3, #0
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2e90:	2300      	movs	r3, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    2e92:	2180      	movs	r1, #128	; 0x80
    2e94:	0249      	lsls	r1, r1, #9
    2e96:	18fa      	adds	r2, r7, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    2e98:	7d12      	ldrb	r2, [r2, #20]
    2e9a:	2a00      	cmp	r2, #0
    2e9c:	d006      	beq.n	2eac <tcc_init+0x29c>
			if (n >= cc_num) {
    2e9e:	9a01      	ldr	r2, [sp, #4]
    2ea0:	429a      	cmp	r2, r3
    2ea2:	dc00      	bgt.n	2ea6 <tcc_init+0x296>
    2ea4:	e0a8      	b.n	2ff8 <tcc_init+0x3e8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    2ea6:	1c0a      	adds	r2, r1, #0
    2ea8:	409a      	lsls	r2, r3
    2eaa:	4310      	orrs	r0, r2
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2eac:	3301      	adds	r3, #1
    2eae:	2b04      	cmp	r3, #4
    2eb0:	d1f1      	bne.n	2e96 <tcc_init+0x286>
    2eb2:	9002      	str	r0, [sp, #8]
    2eb4:	9900      	ldr	r1, [sp, #0]
    2eb6:	1c0b      	adds	r3, r1, #0
    2eb8:	3304      	adds	r3, #4
    2eba:	3134      	adds	r1, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    2ebc:	2200      	movs	r2, #0
    2ebe:	c304      	stmia	r3!, {r2}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2ec0:	428b      	cmp	r3, r1
    2ec2:	d1fc      	bne.n	2ebe <tcc_init+0x2ae>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    2ec4:	2300      	movs	r3, #0
    2ec6:	9900      	ldr	r1, [sp, #0]
    2ec8:	634b      	str	r3, [r1, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    2eca:	638b      	str	r3, [r1, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2ecc:	00aa      	lsls	r2, r5, #2
    2ece:	4b51      	ldr	r3, [pc, #324]	; (3014 <tcc_init+0x404>)
    2ed0:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    2ed2:	600c      	str	r4, [r1, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2ed4:	23a0      	movs	r3, #160	; 0xa0
    2ed6:	5cfa      	ldrb	r2, [r7, r3]
    2ed8:	3b64      	subs	r3, #100	; 0x64
    2eda:	54ca      	strb	r2, [r1, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    2edc:	a90b      	add	r1, sp, #44	; 0x2c
    2ede:	7abb      	ldrb	r3, [r7, #10]
    2ee0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    2ee2:	4b4d      	ldr	r3, [pc, #308]	; (3018 <tcc_init+0x408>)
    2ee4:	5d5b      	ldrb	r3, [r3, r5]
    2ee6:	9300      	str	r3, [sp, #0]
    2ee8:	1c18      	adds	r0, r3, #0
    2eea:	4b4c      	ldr	r3, [pc, #304]	; (301c <tcc_init+0x40c>)
    2eec:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2eee:	9800      	ldr	r0, [sp, #0]
    2ef0:	4b4b      	ldr	r3, [pc, #300]	; (3020 <tcc_init+0x410>)
    2ef2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2ef4:	4b4b      	ldr	r3, [pc, #300]	; (3024 <tcc_init+0x414>)
    2ef6:	5d5b      	ldrb	r3, [r3, r5]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	dd29      	ble.n	2f50 <tcc_init+0x340>
    2efc:	1c3d      	adds	r5, r7, #0
    2efe:	3558      	adds	r5, #88	; 0x58
    2f00:	2397      	movs	r3, #151	; 0x97
    2f02:	425b      	negs	r3, r3
    2f04:	1bdb      	subs	r3, r3, r7
    2f06:	469b      	mov	fp, r3
    2f08:	4b46      	ldr	r3, [pc, #280]	; (3024 <tcc_init+0x414>)
    2f0a:	469a      	mov	sl, r3
    2f0c:	4643      	mov	r3, r8
    2f0e:	9300      	str	r3, [sp, #0]
    2f10:	46a0      	mov	r8, r4
    2f12:	1c34      	adds	r4, r6, #0
    2f14:	9e04      	ldr	r6, [sp, #16]
    2f16:	465b      	mov	r3, fp
    2f18:	46bb      	mov	fp, r7
    2f1a:	1c1f      	adds	r7, r3, #0
		if (!config->pins.enable_wave_out_pin[i]) {
    2f1c:	7833      	ldrb	r3, [r6, #0]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d00b      	beq.n	2f3a <tcc_init+0x32a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f22:	2301      	movs	r3, #1
    2f24:	aa0a      	add	r2, sp, #40	; 0x28
    2f26:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    2f28:	2200      	movs	r2, #0
    2f2a:	a90a      	add	r1, sp, #40	; 0x28
    2f2c:	70ca      	strb	r2, [r1, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2f2e:	6a2a      	ldr	r2, [r5, #32]
    2f30:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2f32:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2f34:	7828      	ldrb	r0, [r5, #0]
    2f36:	4b3c      	ldr	r3, [pc, #240]	; (3028 <tcc_init+0x418>)
    2f38:	4798      	blx	r3
    2f3a:	19bb      	adds	r3, r7, r6
    2f3c:	3601      	adds	r6, #1
    2f3e:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2f40:	4652      	mov	r2, sl
    2f42:	5d12      	ldrb	r2, [r2, r4]
    2f44:	429a      	cmp	r2, r3
    2f46:	dce9      	bgt.n	2f1c <tcc_init+0x30c>
    2f48:	4644      	mov	r4, r8
    2f4a:	9b00      	ldr	r3, [sp, #0]
    2f4c:	4698      	mov	r8, r3
    2f4e:	465f      	mov	r7, fp
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2f50:	9b06      	ldr	r3, [sp, #24]
    2f52:	031a      	lsls	r2, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2f54:	9b07      	ldr	r3, [sp, #28]
    2f56:	021b      	lsls	r3, r3, #8
    2f58:	4313      	orrs	r3, r2
    2f5a:	4642      	mov	r2, r8
    2f5c:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    2f5e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2f60:	2204      	movs	r2, #4
    2f62:	68a3      	ldr	r3, [r4, #8]
    2f64:	421a      	tst	r2, r3
    2f66:	d1fc      	bne.n	2f62 <tcc_init+0x352>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    2f68:	23ff      	movs	r3, #255	; 0xff
    2f6a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2f6c:	2204      	movs	r2, #4
    2f6e:	68a3      	ldr	r3, [r4, #8]
    2f70:	421a      	tst	r2, r3
    2f72:	d1fc      	bne.n	2f6e <tcc_init+0x35e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    2f74:	466b      	mov	r3, sp
    2f76:	7b1b      	ldrb	r3, [r3, #12]
    2f78:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    2f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f7c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    2f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2f80:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    2f82:	464b      	mov	r3, r9
    2f84:	61a3      	str	r3, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2f86:	4a29      	ldr	r2, [pc, #164]	; (302c <tcc_init+0x41c>)
    2f88:	68a3      	ldr	r3, [r4, #8]
    2f8a:	4213      	tst	r3, r2
    2f8c:	d1fc      	bne.n	2f88 <tcc_init+0x378>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    2f8e:	9b02      	ldr	r3, [sp, #8]
    2f90:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2f92:	2210      	movs	r2, #16
    2f94:	68a3      	ldr	r3, [r4, #8]
    2f96:	421a      	tst	r2, r3
    2f98:	d1fc      	bne.n	2f94 <tcc_init+0x384>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    2f9a:	683b      	ldr	r3, [r7, #0]
    2f9c:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    2f9e:	4a24      	ldr	r2, [pc, #144]	; (3030 <tcc_init+0x420>)
    2fa0:	68a3      	ldr	r3, [r4, #8]
    2fa2:	4213      	tst	r3, r2
    2fa4:	d1fc      	bne.n	2fa0 <tcc_init+0x390>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2faa:	9801      	ldr	r0, [sp, #4]
    2fac:	2800      	cmp	r0, #0
    2fae:	dd25      	ble.n	2ffc <tcc_init+0x3ec>
    2fb0:	1c3d      	adds	r5, r7, #0
    2fb2:	351c      	adds	r5, #28
    2fb4:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2fb6:	4e1f      	ldr	r6, [pc, #124]	; (3034 <tcc_init+0x424>)
    2fb8:	1c32      	adds	r2, r6, #0
    2fba:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22)
		while (hw->SYNCBUSY.reg & (
    2fbc:	68a3      	ldr	r3, [r4, #8]
    2fbe:	4213      	tst	r3, r2
    2fc0:	d1fc      	bne.n	2fbc <tcc_init+0x3ac>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    2fc2:	cd04      	ldmia	r5!, {r2}
    2fc4:	1c0b      	adds	r3, r1, #0
    2fc6:	3310      	adds	r3, #16
    2fc8:	009b      	lsls	r3, r3, #2
    2fca:	18e3      	adds	r3, r4, r3
    2fcc:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2fce:	3101      	adds	r1, #1
    2fd0:	4288      	cmp	r0, r1
    2fd2:	dcf1      	bgt.n	2fb8 <tcc_init+0x3a8>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    2fd4:	2000      	movs	r0, #0
    2fd6:	e014      	b.n	3002 <tcc_init+0x3f2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    2fd8:	2017      	movs	r0, #23
    2fda:	e012      	b.n	3002 <tcc_init+0x3f2>
    2fdc:	2017      	movs	r0, #23
    2fde:	e010      	b.n	3002 <tcc_init+0x3f2>
    2fe0:	2017      	movs	r0, #23
    2fe2:	e00e      	b.n	3002 <tcc_init+0x3f2>
    2fe4:	2017      	movs	r0, #23
    2fe6:	e00c      	b.n	3002 <tcc_init+0x3f2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    2fe8:	2017      	movs	r0, #23
    2fea:	e00a      	b.n	3002 <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    2fec:	2017      	movs	r0, #23
    2fee:	e008      	b.n	3002 <tcc_init+0x3f2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    2ff0:	2017      	movs	r0, #23
    2ff2:	e006      	b.n	3002 <tcc_init+0x3f2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    2ff4:	2017      	movs	r0, #23
    2ff6:	e004      	b.n	3002 <tcc_init+0x3f2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    2ff8:	2017      	movs	r0, #23
    2ffa:	e002      	b.n	3002 <tcc_init+0x3f2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    2ffc:	2000      	movs	r0, #0
    2ffe:	e000      	b.n	3002 <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    3000:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    3002:	b00f      	add	sp, #60	; 0x3c
    3004:	bc3c      	pop	{r2, r3, r4, r5}
    3006:	4690      	mov	r8, r2
    3008:	4699      	mov	r9, r3
    300a:	46a2      	mov	sl, r4
    300c:	46ab      	mov	fp, r5
    300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3010:	00007974 	.word	0x00007974
    3014:	20000358 	.word	0x20000358
    3018:	00007958 	.word	0x00007958
    301c:	000028dd 	.word	0x000028dd
    3020:	00002851 	.word	0x00002851
    3024:	00007978 	.word	0x00007978
    3028:	000029d5 	.word	0x000029d5
    302c:	00020040 	.word	0x00020040
    3030:	00040080 	.word	0x00040080
    3034:	00080100 	.word	0x00080100

00003038 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    3038:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    303a:	233c      	movs	r3, #60	; 0x3c
    303c:	5cc3      	ldrb	r3, [r0, r3]
    303e:	4c01      	ldr	r4, [pc, #4]	; (3044 <tcc_set_compare_value+0xc>)
    3040:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    3042:	bd10      	pop	{r4, pc}
    3044:	00002a5d 	.word	0x00002a5d

00003048 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	4647      	mov	r7, r8
    304c:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    304e:	0080      	lsls	r0, r0, #2
    3050:	4b0d      	ldr	r3, [pc, #52]	; (3088 <_tcc_interrupt_handler+0x40>)
    3052:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    3058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    305a:	401e      	ands	r6, r3
    305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    305e:	401e      	ands	r6, r3
    3060:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    3062:	4b0a      	ldr	r3, [pc, #40]	; (308c <_tcc_interrupt_handler+0x44>)
    3064:	4698      	mov	r8, r3
    3066:	4643      	mov	r3, r8
    3068:	58e5      	ldr	r5, [r4, r3]
    306a:	422e      	tst	r6, r5
    306c:	d005      	beq.n	307a <_tcc_interrupt_handler+0x32>
    306e:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    3070:	685b      	ldr	r3, [r3, #4]
    3072:	1c38      	adds	r0, r7, #0
    3074:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    3076:	683b      	ldr	r3, [r7, #0]
    3078:	62dd      	str	r5, [r3, #44]	; 0x2c
    307a:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    307c:	2c30      	cmp	r4, #48	; 0x30
    307e:	d1f2      	bne.n	3066 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    3080:	bc04      	pop	{r2}
    3082:	4690      	mov	r8, r2
    3084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	20000358 	.word	0x20000358
    308c:	0000797c 	.word	0x0000797c

00003090 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    3090:	b508      	push	{r3, lr}
    3092:	2000      	movs	r0, #0
    3094:	4b01      	ldr	r3, [pc, #4]	; (309c <TCC0_Handler+0xc>)
    3096:	4798      	blx	r3
    3098:	bd08      	pop	{r3, pc}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	00003049 	.word	0x00003049

000030a0 <TCC1_Handler>:
    30a0:	b508      	push	{r3, lr}
    30a2:	2001      	movs	r0, #1
    30a4:	4b01      	ldr	r3, [pc, #4]	; (30ac <TCC1_Handler+0xc>)
    30a6:	4798      	blx	r3
    30a8:	bd08      	pop	{r3, pc}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	00003049 	.word	0x00003049

000030b0 <TCC2_Handler>:
    30b0:	b508      	push	{r3, lr}
    30b2:	2002      	movs	r0, #2
    30b4:	4b01      	ldr	r3, [pc, #4]	; (30bc <TCC2_Handler+0xc>)
    30b6:	4798      	blx	r3
    30b8:	bd08      	pop	{r3, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	00003049 	.word	0x00003049

000030c0 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    30c0:	1c93      	adds	r3, r2, #2
    30c2:	009b      	lsls	r3, r3, #2
    30c4:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    30c6:	2a02      	cmp	r2, #2
    30c8:	d104      	bne.n	30d4 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    30ca:	7e02      	ldrb	r2, [r0, #24]
    30cc:	2310      	movs	r3, #16
    30ce:	4313      	orrs	r3, r2
    30d0:	7603      	strb	r3, [r0, #24]
    30d2:	e00c      	b.n	30ee <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    30d4:	2a03      	cmp	r2, #3
    30d6:	d104      	bne.n	30e2 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    30d8:	7e02      	ldrb	r2, [r0, #24]
    30da:	2320      	movs	r3, #32
    30dc:	4313      	orrs	r3, r2
    30de:	7603      	strb	r3, [r0, #24]
    30e0:	e005      	b.n	30ee <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    30e2:	2301      	movs	r3, #1
    30e4:	4093      	lsls	r3, r2
    30e6:	1c1a      	adds	r2, r3, #0
    30e8:	7e03      	ldrb	r3, [r0, #24]
    30ea:	431a      	orrs	r2, r3
    30ec:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    30ee:	2000      	movs	r0, #0
    30f0:	4770      	bx	lr
    30f2:	46c0      	nop			; (mov r8, r8)

000030f4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    30f4:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    30f6:	0080      	lsls	r0, r0, #2
    30f8:	4b14      	ldr	r3, [pc, #80]	; (314c <_tc_interrupt_handler+0x58>)
    30fa:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    30fc:	682b      	ldr	r3, [r5, #0]
    30fe:	7b9c      	ldrb	r4, [r3, #14]
    3100:	7e2b      	ldrb	r3, [r5, #24]
    3102:	401c      	ands	r4, r3
    3104:	7e6b      	ldrb	r3, [r5, #25]
    3106:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3108:	07e3      	lsls	r3, r4, #31
    310a:	d505      	bpl.n	3118 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    310c:	1c28      	adds	r0, r5, #0
    310e:	68ab      	ldr	r3, [r5, #8]
    3110:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3112:	2301      	movs	r3, #1
    3114:	682a      	ldr	r2, [r5, #0]
    3116:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3118:	07a3      	lsls	r3, r4, #30
    311a:	d505      	bpl.n	3128 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    311c:	1c28      	adds	r0, r5, #0
    311e:	68eb      	ldr	r3, [r5, #12]
    3120:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3122:	2302      	movs	r3, #2
    3124:	682a      	ldr	r2, [r5, #0]
    3126:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3128:	06e3      	lsls	r3, r4, #27
    312a:	d505      	bpl.n	3138 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    312c:	1c28      	adds	r0, r5, #0
    312e:	692b      	ldr	r3, [r5, #16]
    3130:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3132:	2310      	movs	r3, #16
    3134:	682a      	ldr	r2, [r5, #0]
    3136:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3138:	06a3      	lsls	r3, r4, #26
    313a:	d505      	bpl.n	3148 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    313c:	1c28      	adds	r0, r5, #0
    313e:	696b      	ldr	r3, [r5, #20]
    3140:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3142:	682b      	ldr	r3, [r5, #0]
    3144:	2220      	movs	r2, #32
    3146:	739a      	strb	r2, [r3, #14]
	}
}
    3148:	bd38      	pop	{r3, r4, r5, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	20000364 	.word	0x20000364

00003150 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3150:	b508      	push	{r3, lr}
    3152:	2000      	movs	r0, #0
    3154:	4b01      	ldr	r3, [pc, #4]	; (315c <TC3_Handler+0xc>)
    3156:	4798      	blx	r3
    3158:	bd08      	pop	{r3, pc}
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	000030f5 	.word	0x000030f5

00003160 <TC4_Handler>:
    3160:	b508      	push	{r3, lr}
    3162:	2001      	movs	r0, #1
    3164:	4b01      	ldr	r3, [pc, #4]	; (316c <TC4_Handler+0xc>)
    3166:	4798      	blx	r3
    3168:	bd08      	pop	{r3, pc}
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	000030f5 	.word	0x000030f5

00003170 <TC5_Handler>:
    3170:	b508      	push	{r3, lr}
    3172:	2002      	movs	r0, #2
    3174:	4b01      	ldr	r3, [pc, #4]	; (317c <TC5_Handler+0xc>)
    3176:	4798      	blx	r3
    3178:	bd08      	pop	{r3, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	000030f5 	.word	0x000030f5

00003180 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3180:	b530      	push	{r4, r5, lr}
    3182:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3184:	aa01      	add	r2, sp, #4
    3186:	4b0b      	ldr	r3, [pc, #44]	; (31b4 <_tc_get_inst_index+0x34>)
    3188:	cb32      	ldmia	r3!, {r1, r4, r5}
    318a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    318c:	9b01      	ldr	r3, [sp, #4]
    318e:	4283      	cmp	r3, r0
    3190:	d00a      	beq.n	31a8 <_tc_get_inst_index+0x28>
    3192:	9b02      	ldr	r3, [sp, #8]
    3194:	4283      	cmp	r3, r0
    3196:	d005      	beq.n	31a4 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3198:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    319a:	9a03      	ldr	r2, [sp, #12]
    319c:	4282      	cmp	r2, r0
    319e:	d105      	bne.n	31ac <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    31a0:	3302      	adds	r3, #2
    31a2:	e002      	b.n	31aa <_tc_get_inst_index+0x2a>
    31a4:	2301      	movs	r3, #1
    31a6:	e000      	b.n	31aa <_tc_get_inst_index+0x2a>
    31a8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
    31aa:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    31ac:	1c18      	adds	r0, r3, #0
    31ae:	b005      	add	sp, #20
    31b0:	bd30      	pop	{r4, r5, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	000079ac 	.word	0x000079ac

000031b8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    31b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ba:	464f      	mov	r7, r9
    31bc:	4646      	mov	r6, r8
    31be:	b4c0      	push	{r6, r7}
    31c0:	b087      	sub	sp, #28
    31c2:	1c04      	adds	r4, r0, #0
    31c4:	1c0e      	adds	r6, r1, #0
    31c6:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    31c8:	1c08      	adds	r0, r1, #0
    31ca:	4b91      	ldr	r3, [pc, #580]	; (3410 <tc_init+0x258>)
    31cc:	4798      	blx	r3
    31ce:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    31d0:	4d90      	ldr	r5, [pc, #576]	; (3414 <tc_init+0x25c>)
    31d2:	1c29      	adds	r1, r5, #0
    31d4:	310c      	adds	r1, #12
    31d6:	a805      	add	r0, sp, #20
    31d8:	2203      	movs	r2, #3
    31da:	4f8f      	ldr	r7, [pc, #572]	; (3418 <tc_init+0x260>)
    31dc:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    31de:	1c29      	adds	r1, r5, #0
    31e0:	3110      	adds	r1, #16
    31e2:	a803      	add	r0, sp, #12
    31e4:	2206      	movs	r2, #6
    31e6:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    31e8:	2300      	movs	r3, #0
    31ea:	60a3      	str	r3, [r4, #8]
    31ec:	60e3      	str	r3, [r4, #12]
    31ee:	6123      	str	r3, [r4, #16]
    31f0:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    31f2:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    31f4:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    31f6:	464b      	mov	r3, r9
    31f8:	009a      	lsls	r2, r3, #2
    31fa:	4b88      	ldr	r3, [pc, #544]	; (341c <tc_init+0x264>)
    31fc:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    31fe:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    3200:	4643      	mov	r3, r8
    3202:	789b      	ldrb	r3, [r3, #2]
    3204:	2b08      	cmp	r3, #8
    3206:	d104      	bne.n	3212 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3208:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    320a:	464a      	mov	r2, r9
    320c:	07d2      	lsls	r2, r2, #31
    320e:	d400      	bmi.n	3212 <tc_init+0x5a>
    3210:	e0f9      	b.n	3406 <tc_init+0x24e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    3212:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3214:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3216:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    3218:	07db      	lsls	r3, r3, #31
    321a:	d500      	bpl.n	321e <tc_init+0x66>
    321c:	e0f3      	b.n	3406 <tc_init+0x24e>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    321e:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    3220:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3222:	06db      	lsls	r3, r3, #27
    3224:	d500      	bpl.n	3228 <tc_init+0x70>
    3226:	e0ee      	b.n	3406 <tc_init+0x24e>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3228:	8833      	ldrh	r3, [r6, #0]
    322a:	079b      	lsls	r3, r3, #30
    322c:	d500      	bpl.n	3230 <tc_init+0x78>
    322e:	e0ea      	b.n	3406 <tc_init+0x24e>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    3230:	4643      	mov	r3, r8
    3232:	7c1b      	ldrb	r3, [r3, #16]
    3234:	2b00      	cmp	r3, #0
    3236:	d00c      	beq.n	3252 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3238:	a902      	add	r1, sp, #8
    323a:	2301      	movs	r3, #1
    323c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    323e:	2200      	movs	r2, #0
    3240:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3242:	4642      	mov	r2, r8
    3244:	7e12      	ldrb	r2, [r2, #24]
    3246:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3248:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    324a:	4643      	mov	r3, r8
    324c:	7d18      	ldrb	r0, [r3, #20]
    324e:	4b74      	ldr	r3, [pc, #464]	; (3420 <tc_init+0x268>)
    3250:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    3252:	4643      	mov	r3, r8
    3254:	7f1b      	ldrb	r3, [r3, #28]
    3256:	2b00      	cmp	r3, #0
    3258:	d00d      	beq.n	3276 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    325a:	a902      	add	r1, sp, #8
    325c:	2301      	movs	r3, #1
    325e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3260:	2200      	movs	r2, #0
    3262:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3264:	4642      	mov	r2, r8
    3266:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3268:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    326a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    326c:	4643      	mov	r3, r8
    326e:	6a1b      	ldr	r3, [r3, #32]
    3270:	b2d8      	uxtb	r0, r3
    3272:	4b6b      	ldr	r3, [pc, #428]	; (3420 <tc_init+0x268>)
    3274:	4798      	blx	r3
    3276:	496b      	ldr	r1, [pc, #428]	; (3424 <tc_init+0x26c>)
    3278:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    327a:	464a      	mov	r2, r9
    327c:	0052      	lsls	r2, r2, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    327e:	a803      	add	r0, sp, #12
    3280:	5a12      	ldrh	r2, [r2, r0]
    3282:	4313      	orrs	r3, r2
    3284:	620b      	str	r3, [r1, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    3286:	4643      	mov	r3, r8
    3288:	789b      	ldrb	r3, [r3, #2]
    328a:	2b08      	cmp	r3, #8
    328c:	d106      	bne.n	329c <tc_init+0xe4>
    328e:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    3290:	464a      	mov	r2, r9
    3292:	3201      	adds	r2, #1
    3294:	0052      	lsls	r2, r2, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    3296:	5a12      	ldrh	r2, [r2, r0]
    3298:	4313      	orrs	r3, r2
    329a:	620b      	str	r3, [r1, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    329c:	a901      	add	r1, sp, #4
    329e:	4643      	mov	r3, r8
    32a0:	781b      	ldrb	r3, [r3, #0]
    32a2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    32a4:	ab05      	add	r3, sp, #20
    32a6:	464a      	mov	r2, r9
    32a8:	5c9d      	ldrb	r5, [r3, r2]
    32aa:	1c28      	adds	r0, r5, #0
    32ac:	4b5e      	ldr	r3, [pc, #376]	; (3428 <tc_init+0x270>)
    32ae:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    32b0:	1c28      	adds	r0, r5, #0
    32b2:	4b5e      	ldr	r3, [pc, #376]	; (342c <tc_init+0x274>)
    32b4:	4798      	blx	r3
    32b6:	4643      	mov	r3, r8
    32b8:	8898      	ldrh	r0, [r3, #4]
    32ba:	891b      	ldrh	r3, [r3, #8]
    32bc:	4303      	orrs	r3, r0

	/* Set ctrla register */
	ctrla_tmp =
    32be:	4642      	mov	r2, r8
    32c0:	7990      	ldrb	r0, [r2, #6]
    32c2:	7892      	ldrb	r2, [r2, #2]
    32c4:	4310      	orrs	r0, r2
    32c6:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    32c8:	4643      	mov	r3, r8
    32ca:	785b      	ldrb	r3, [r3, #1]
    32cc:	2b00      	cmp	r3, #0
    32ce:	d002      	beq.n	32d6 <tc_init+0x11e>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    32d0:	2380      	movs	r3, #128	; 0x80
    32d2:	011b      	lsls	r3, r3, #4
    32d4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    32d6:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    32d8:	227f      	movs	r2, #127	; 0x7f
    32da:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    32dc:	4393      	bics	r3, r2
    32de:	d1fc      	bne.n	32da <tc_init+0x122>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    32e0:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    32e2:	4643      	mov	r3, r8
    32e4:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    32e6:	1e43      	subs	r3, r0, #1
    32e8:	4198      	sbcs	r0, r3
    32ea:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
    32ec:	4643      	mov	r3, r8
    32ee:	7b9b      	ldrb	r3, [r3, #14]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d001      	beq.n	32f8 <tc_init+0x140>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    32f4:	2301      	movs	r3, #1
    32f6:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    32f8:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    32fa:	227f      	movs	r2, #127	; 0x7f
    32fc:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    32fe:	4393      	bics	r3, r2
    3300:	d1fc      	bne.n	32fc <tc_init+0x144>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    3302:	33ff      	adds	r3, #255	; 0xff
    3304:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    3306:	2800      	cmp	r0, #0
    3308:	d005      	beq.n	3316 <tc_init+0x15e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    330a:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    330c:	227f      	movs	r2, #127	; 0x7f
    330e:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    3310:	4393      	bics	r3, r2
    3312:	d1fc      	bne.n	330e <tc_init+0x156>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    3314:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    3316:	4643      	mov	r3, r8
    3318:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    331a:	7adb      	ldrb	r3, [r3, #11]
    331c:	2b00      	cmp	r3, #0
    331e:	d001      	beq.n	3324 <tc_init+0x16c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    3320:	2310      	movs	r3, #16
    3322:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    3324:	4643      	mov	r3, r8
    3326:	7b1b      	ldrb	r3, [r3, #12]
    3328:	2b00      	cmp	r3, #0
    332a:	d001      	beq.n	3330 <tc_init+0x178>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    332c:	2320      	movs	r3, #32
    332e:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3330:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3332:	227f      	movs	r2, #127	; 0x7f
    3334:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3336:	4393      	bics	r3, r2
    3338:	d1fc      	bne.n	3334 <tc_init+0x17c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    333a:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    333c:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    333e:	217f      	movs	r1, #127	; 0x7f
    3340:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    3342:	438b      	bics	r3, r1
    3344:	d1fc      	bne.n	3340 <tc_init+0x188>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3346:	7923      	ldrb	r3, [r4, #4]
    3348:	2b04      	cmp	r3, #4
    334a:	d005      	beq.n	3358 <tc_init+0x1a0>
    334c:	2b08      	cmp	r3, #8
    334e:	d041      	beq.n	33d4 <tc_init+0x21c>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    3350:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    3352:	2b00      	cmp	r3, #0
    3354:	d157      	bne.n	3406 <tc_init+0x24e>
    3356:	e024      	b.n	33a2 <tc_init+0x1ea>
    3358:	217f      	movs	r1, #127	; 0x7f
    335a:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    335c:	438b      	bics	r3, r1
    335e:	d1fc      	bne.n	335a <tc_init+0x1a2>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    3360:	3328      	adds	r3, #40	; 0x28
    3362:	4642      	mov	r2, r8
    3364:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    3366:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3368:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    336a:	227f      	movs	r2, #127	; 0x7f
    336c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    336e:	4393      	bics	r3, r2
    3370:	d1fc      	bne.n	336c <tc_init+0x1b4>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    3372:	3329      	adds	r3, #41	; 0x29
    3374:	4642      	mov	r2, r8
    3376:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    3378:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    337a:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    337c:	227f      	movs	r2, #127	; 0x7f
    337e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    3380:	4393      	bics	r3, r2
    3382:	d1fc      	bne.n	337e <tc_init+0x1c6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    3384:	332a      	adds	r3, #42	; 0x2a
    3386:	4642      	mov	r2, r8
    3388:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    338a:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    338c:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    338e:	227f      	movs	r2, #127	; 0x7f
    3390:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    3392:	4393      	bics	r3, r2
    3394:	d1fc      	bne.n	3390 <tc_init+0x1d8>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    3396:	332b      	adds	r3, #43	; 0x2b
    3398:	4642      	mov	r2, r8
    339a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    339c:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    339e:	2000      	movs	r0, #0
    33a0:	e031      	b.n	3406 <tc_init+0x24e>
    33a2:	217f      	movs	r1, #127	; 0x7f
    33a4:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    33a6:	438b      	bics	r3, r1
    33a8:	d1fc      	bne.n	33a4 <tc_init+0x1ec>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    33aa:	4643      	mov	r3, r8
    33ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    33ae:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    33b0:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    33b2:	227f      	movs	r2, #127	; 0x7f
    33b4:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    33b6:	4393      	bics	r3, r2
    33b8:	d1fc      	bne.n	33b4 <tc_init+0x1fc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    33ba:	4643      	mov	r3, r8
    33bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    33be:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    33c0:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    33c2:	227f      	movs	r2, #127	; 0x7f
    33c4:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    33c6:	4393      	bics	r3, r2
    33c8:	d1fc      	bne.n	33c4 <tc_init+0x20c>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    33ca:	4643      	mov	r3, r8
    33cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    33ce:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    33d0:	2000      	movs	r0, #0
    33d2:	e018      	b.n	3406 <tc_init+0x24e>
    33d4:	217f      	movs	r1, #127	; 0x7f
    33d6:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    33d8:	438b      	bics	r3, r1
    33da:	d1fc      	bne.n	33d6 <tc_init+0x21e>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    33dc:	4643      	mov	r3, r8
    33de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33e0:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    33e2:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    33e4:	227f      	movs	r2, #127	; 0x7f
    33e6:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    33e8:	4393      	bics	r3, r2
    33ea:	d1fc      	bne.n	33e6 <tc_init+0x22e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    33ec:	4643      	mov	r3, r8
    33ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33f0:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    33f2:	6821      	ldr	r1, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    33f4:	227f      	movs	r2, #127	; 0x7f
    33f6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    33f8:	4393      	bics	r3, r2
    33fa:	d1fc      	bne.n	33f6 <tc_init+0x23e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    33fc:	4643      	mov	r3, r8
    33fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    3400:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    3402:	2000      	movs	r0, #0
    3404:	e7ff      	b.n	3406 <tc_init+0x24e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    3406:	b007      	add	sp, #28
    3408:	bc0c      	pop	{r2, r3}
    340a:	4690      	mov	r8, r2
    340c:	4699      	mov	r9, r3
    340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3410:	00003181 	.word	0x00003181
    3414:	000079ac 	.word	0x000079ac
    3418:	000076d5 	.word	0x000076d5
    341c:	20000364 	.word	0x20000364
    3420:	000029d5 	.word	0x000029d5
    3424:	40000400 	.word	0x40000400
    3428:	000028dd 	.word	0x000028dd
    342c:	00002851 	.word	0x00002851

00003430 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    3430:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    3432:	6802      	ldr	r2, [r0, #0]
    3434:	247f      	movs	r4, #127	; 0x7f
    3436:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    3438:	43a3      	bics	r3, r4
    343a:	d1fc      	bne.n	3436 <tc_set_count_value+0x6>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    343c:	7903      	ldrb	r3, [r0, #4]
    343e:	2b04      	cmp	r3, #4
    3440:	d005      	beq.n	344e <tc_set_count_value+0x1e>
    3442:	2b08      	cmp	r3, #8
    3444:	d00b      	beq.n	345e <tc_set_count_value+0x2e>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    3446:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    3448:	2b00      	cmp	r3, #0
    344a:	d10b      	bne.n	3464 <tc_set_count_value+0x34>
    344c:	e003      	b.n	3456 <tc_set_count_value+0x26>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    344e:	b2c9      	uxtb	r1, r1
    3450:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    3452:	2000      	movs	r0, #0
    3454:	e006      	b.n	3464 <tc_set_count_value+0x34>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    3456:	b289      	uxth	r1, r1
    3458:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    345a:	2000      	movs	r0, #0
    345c:	e002      	b.n	3464 <tc_set_count_value+0x34>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    345e:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    3460:	2000      	movs	r0, #0
    3462:	e7ff      	b.n	3464 <tc_set_count_value+0x34>

		default:
			return STATUS_ERR_INVALID_ARG;
	}
}
    3464:	bd10      	pop	{r4, pc}
    3466:	46c0      	nop			; (mov r8, r8)

00003468 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3468:	6802      	ldr	r2, [r0, #0]
    346a:	217f      	movs	r1, #127	; 0x7f
    346c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    346e:	438b      	bics	r3, r1
    3470:	d1fc      	bne.n	346c <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    3472:	7903      	ldrb	r3, [r0, #4]
    3474:	2b04      	cmp	r3, #4
    3476:	d005      	beq.n	3484 <tc_get_count_value+0x1c>
    3478:	2b08      	cmp	r3, #8
    347a:	d009      	beq.n	3490 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    347c:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    347e:	2b00      	cmp	r3, #0
    3480:	d108      	bne.n	3494 <tc_get_count_value+0x2c>
    3482:	e002      	b.n	348a <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    3484:	7c10      	ldrb	r0, [r2, #16]
    3486:	b2c0      	uxtb	r0, r0
    3488:	e004      	b.n	3494 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    348a:	8a10      	ldrh	r0, [r2, #16]
    348c:	b280      	uxth	r0, r0
    348e:	e001      	b.n	3494 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    3490:	6910      	ldr	r0, [r2, #16]
    3492:	e7ff      	b.n	3494 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    3494:	4770      	bx	lr
    3496:	46c0      	nop			; (mov r8, r8)

00003498 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3498:	b510      	push	{r4, lr}
    349a:	b082      	sub	sp, #8
    349c:	1c04      	adds	r4, r0, #0
	enum sleepmgr_mode sleep_mode[] = {
    349e:	a801      	add	r0, sp, #4
    34a0:	4923      	ldr	r1, [pc, #140]	; (3530 <udd_sleep_mode+0x98>)
    34a2:	2204      	movs	r2, #4
    34a4:	4b23      	ldr	r3, [pc, #140]	; (3534 <udd_sleep_mode+0x9c>)
    34a6:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    34a8:	4b23      	ldr	r3, [pc, #140]	; (3538 <udd_sleep_mode+0xa0>)
    34aa:	781b      	ldrb	r3, [r3, #0]
    34ac:	42a3      	cmp	r3, r4
    34ae:	d03d      	beq.n	352c <udd_sleep_mode+0x94>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    34b0:	2c00      	cmp	r4, #0
    34b2:	d01a      	beq.n	34ea <udd_sleep_mode+0x52>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    34b4:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    34b6:	5d1a      	ldrb	r2, [r3, r4]
    34b8:	4b20      	ldr	r3, [pc, #128]	; (353c <udd_sleep_mode+0xa4>)
    34ba:	5c9b      	ldrb	r3, [r3, r2]
    34bc:	2bff      	cmp	r3, #255	; 0xff
    34be:	d100      	bne.n	34c2 <udd_sleep_mode+0x2a>
    34c0:	e7fe      	b.n	34c0 <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34c2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    34c6:	b672      	cpsid	i
    34c8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    34cc:	2000      	movs	r0, #0
    34ce:	491c      	ldr	r1, [pc, #112]	; (3540 <udd_sleep_mode+0xa8>)
    34d0:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    34d2:	481a      	ldr	r0, [pc, #104]	; (353c <udd_sleep_mode+0xa4>)
    34d4:	5c81      	ldrb	r1, [r0, r2]
    34d6:	3101      	adds	r1, #1
    34d8:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    34da:	2b00      	cmp	r3, #0
    34dc:	d105      	bne.n	34ea <udd_sleep_mode+0x52>
		cpu_irq_enable();
    34de:	2201      	movs	r2, #1
    34e0:	4b17      	ldr	r3, [pc, #92]	; (3540 <udd_sleep_mode+0xa8>)
    34e2:	701a      	strb	r2, [r3, #0]
    34e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    34e8:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    34ea:	4b13      	ldr	r3, [pc, #76]	; (3538 <udd_sleep_mode+0xa0>)
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	2b00      	cmp	r3, #0
    34f0:	d01a      	beq.n	3528 <udd_sleep_mode+0x90>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    34f2:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    34f4:	5cd2      	ldrb	r2, [r2, r3]
    34f6:	4b11      	ldr	r3, [pc, #68]	; (353c <udd_sleep_mode+0xa4>)
    34f8:	5c9b      	ldrb	r3, [r3, r2]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d100      	bne.n	3500 <udd_sleep_mode+0x68>
    34fe:	e7fe      	b.n	34fe <udd_sleep_mode+0x66>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3500:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3504:	b672      	cpsid	i
    3506:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    350a:	2000      	movs	r0, #0
    350c:	490c      	ldr	r1, [pc, #48]	; (3540 <udd_sleep_mode+0xa8>)
    350e:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3510:	480a      	ldr	r0, [pc, #40]	; (353c <udd_sleep_mode+0xa4>)
    3512:	5c81      	ldrb	r1, [r0, r2]
    3514:	3901      	subs	r1, #1
    3516:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3518:	2b00      	cmp	r3, #0
    351a:	d105      	bne.n	3528 <udd_sleep_mode+0x90>
		cpu_irq_enable();
    351c:	2201      	movs	r2, #1
    351e:	4b08      	ldr	r3, [pc, #32]	; (3540 <udd_sleep_mode+0xa8>)
    3520:	701a      	strb	r2, [r3, #0]
    3522:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3526:	b662      	cpsie	i
	}
	udd_state = new_state;
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <udd_sleep_mode+0xa0>)
    352a:	701c      	strb	r4, [r3, #0]
}
    352c:	b002      	add	sp, #8
    352e:	bd10      	pop	{r4, pc}
    3530:	000079c4 	.word	0x000079c4
    3534:	000076d5 	.word	0x000076d5
    3538:	200001fb 	.word	0x200001fb
    353c:	200002f8 	.word	0x200002f8
    3540:	20000108 	.word	0x20000108

00003544 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3544:	230f      	movs	r3, #15
    3546:	4003      	ands	r3, r0
    3548:	005b      	lsls	r3, r3, #1
    354a:	09c0      	lsrs	r0, r0, #7
    354c:	1818      	adds	r0, r3, r0
    354e:	3802      	subs	r0, #2
    3550:	0083      	lsls	r3, r0, #2
    3552:	1818      	adds	r0, r3, r0
    3554:	0080      	lsls	r0, r0, #2
    3556:	4b01      	ldr	r3, [pc, #4]	; (355c <udd_ep_get_job+0x18>)
    3558:	1818      	adds	r0, r3, r0
}
    355a:	4770      	bx	lr
    355c:	200001a8 	.word	0x200001a8

00003560 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    3560:	b5f0      	push	{r4, r5, r6, r7, lr}
    3562:	4657      	mov	r7, sl
    3564:	464e      	mov	r6, r9
    3566:	4645      	mov	r5, r8
    3568:	b4e0      	push	{r5, r6, r7}
    356a:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    356c:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    356e:	b273      	sxtb	r3, r6
    3570:	2b00      	cmp	r3, #0
    3572:	da51      	bge.n	3618 <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    3574:	1c30      	adds	r0, r6, #0
    3576:	4b5d      	ldr	r3, [pc, #372]	; (36ec <udd_ep_transfer_process+0x18c>)
    3578:	4798      	blx	r3
    357a:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    357c:	230f      	movs	r3, #15
    357e:	4033      	ands	r3, r6
    3580:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
    3582:	8a03      	ldrh	r3, [r0, #16]
    3584:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
    3586:	464b      	mov	r3, r9
    3588:	885f      	ldrh	r7, [r3, #2]
    358a:	68c3      	ldr	r3, [r0, #12]
    358c:	469c      	mov	ip, r3
    358e:	4467      	add	r7, ip
    3590:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    3592:	6885      	ldr	r5, [r0, #8]
    3594:	42af      	cmp	r7, r5
    3596:	d024      	beq.n	35e2 <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3598:	1bed      	subs	r5, r5, r7
    359a:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    359c:	4b54      	ldr	r3, [pc, #336]	; (36f0 <udd_ep_transfer_process+0x190>)
    359e:	429d      	cmp	r5, r3
    35a0:	d906      	bls.n	35b0 <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    35a2:	1c1d      	adds	r5, r3, #0
    35a4:	1c18      	adds	r0, r3, #0
    35a6:	4651      	mov	r1, sl
    35a8:	4b52      	ldr	r3, [pc, #328]	; (36f4 <udd_ep_transfer_process+0x194>)
    35aa:	4798      	blx	r3
    35ac:	1a6d      	subs	r5, r5, r1
    35ae:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    35b0:	7ca3      	ldrb	r3, [r4, #18]
    35b2:	2200      	movs	r2, #0
    35b4:	079b      	lsls	r3, r3, #30
    35b6:	d506      	bpl.n	35c6 <udd_ep_transfer_process+0x66>
    35b8:	1c28      	adds	r0, r5, #0
    35ba:	4651      	mov	r1, sl
    35bc:	4b4e      	ldr	r3, [pc, #312]	; (36f8 <udd_ep_transfer_process+0x198>)
    35be:	4798      	blx	r3
    35c0:	b289      	uxth	r1, r1
    35c2:	424a      	negs	r2, r1
    35c4:	414a      	adcs	r2, r1
    35c6:	0051      	lsls	r1, r2, #1
    35c8:	7ca3      	ldrb	r3, [r4, #18]
    35ca:	2202      	movs	r2, #2
    35cc:	4393      	bics	r3, r2
    35ce:	4319      	orrs	r1, r3
    35d0:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    35d2:	6862      	ldr	r2, [r4, #4]
    35d4:	19d2      	adds	r2, r2, r7
    35d6:	4849      	ldr	r0, [pc, #292]	; (36fc <udd_ep_transfer_process+0x19c>)
    35d8:	4641      	mov	r1, r8
    35da:	1c2b      	adds	r3, r5, #0
    35dc:	4c48      	ldr	r4, [pc, #288]	; (3700 <udd_ep_transfer_process+0x1a0>)
    35de:	47a0      	blx	r4
    35e0:	e07e      	b.n	36e0 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    35e2:	7c83      	ldrb	r3, [r0, #18]
    35e4:	079b      	lsls	r3, r3, #30
    35e6:	d50b      	bpl.n	3600 <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
    35e8:	7c83      	ldrb	r3, [r0, #18]
    35ea:	2202      	movs	r2, #2
    35ec:	4393      	bics	r3, r2
    35ee:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    35f0:	6842      	ldr	r2, [r0, #4]
    35f2:	19d2      	adds	r2, r2, r7
    35f4:	4841      	ldr	r0, [pc, #260]	; (36fc <udd_ep_transfer_process+0x19c>)
    35f6:	4641      	mov	r1, r8
    35f8:	2300      	movs	r3, #0
    35fa:	4c41      	ldr	r4, [pc, #260]	; (3700 <udd_ep_transfer_process+0x1a0>)
    35fc:	47a0      	blx	r4
    35fe:	e06f      	b.n	36e0 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    3600:	7c83      	ldrb	r3, [r0, #18]
    3602:	2201      	movs	r2, #1
    3604:	4393      	bics	r3, r2
    3606:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3608:	6803      	ldr	r3, [r0, #0]
    360a:	2b00      	cmp	r3, #0
    360c:	d068      	beq.n	36e0 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    360e:	2000      	movs	r0, #0
    3610:	1c39      	adds	r1, r7, #0
    3612:	1c32      	adds	r2, r6, #0
    3614:	4798      	blx	r3
    3616:	e063      	b.n	36e0 <udd_ep_transfer_process+0x180>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    3618:	1c30      	adds	r0, r6, #0
    361a:	4b34      	ldr	r3, [pc, #208]	; (36ec <udd_ep_transfer_process+0x18c>)
    361c:	4798      	blx	r3
    361e:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    3620:	270f      	movs	r7, #15
    3622:	4037      	ands	r7, r6
    3624:	46ba      	mov	sl, r7

	ep_size = ptr_job->ep_size;
    3626:	8a03      	ldrh	r3, [r0, #16]
    3628:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    362a:	464b      	mov	r3, r9
    362c:	881f      	ldrh	r7, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    362e:	7c83      	ldrb	r3, [r0, #18]
    3630:	075b      	lsls	r3, r3, #29
    3632:	d511      	bpl.n	3658 <udd_ep_transfer_process+0xf8>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3634:	6843      	ldr	r3, [r0, #4]
    3636:	68c2      	ldr	r2, [r0, #12]
    3638:	4694      	mov	ip, r2
    363a:	4463      	add	r3, ip
    363c:	1c1d      	adds	r5, r3, #0
    363e:	6880      	ldr	r0, [r0, #8]
    3640:	4641      	mov	r1, r8
    3642:	4b2d      	ldr	r3, [pc, #180]	; (36f8 <udd_ep_transfer_process+0x198>)
    3644:	4798      	blx	r3
    3646:	1c0a      	adds	r2, r1, #0
    3648:	4653      	mov	r3, sl
    364a:	1e59      	subs	r1, r3, #1
    364c:	0189      	lsls	r1, r1, #6
    364e:	4b2d      	ldr	r3, [pc, #180]	; (3704 <udd_ep_transfer_process+0x1a4>)
    3650:	18c9      	adds	r1, r1, r3
    3652:	1c28      	adds	r0, r5, #0
    3654:	4b2c      	ldr	r3, [pc, #176]	; (3708 <udd_ep_transfer_process+0x1a8>)
    3656:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    3658:	68e3      	ldr	r3, [r4, #12]
    365a:	18fd      	adds	r5, r7, r3
    365c:	60e5      	str	r5, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    365e:	68a3      	ldr	r3, [r4, #8]
    3660:	429d      	cmp	r5, r3
    3662:	d901      	bls.n	3668 <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    3664:	60e3      	str	r3, [r4, #12]
    3666:	e030      	b.n	36ca <udd_ep_transfer_process+0x16a>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3668:	464a      	mov	r2, r9
    366a:	8892      	ldrh	r2, [r2, #4]
    366c:	42ba      	cmp	r2, r7
    366e:	d12c      	bne.n	36ca <udd_ep_transfer_process+0x16a>
    3670:	429d      	cmp	r5, r3
    3672:	d02a      	beq.n	36ca <udd_ep_transfer_process+0x16a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3674:	1b5b      	subs	r3, r3, r5
    3676:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3678:	4b1d      	ldr	r3, [pc, #116]	; (36f0 <udd_ep_transfer_process+0x190>)
    367a:	429e      	cmp	r6, r3
    367c:	d907      	bls.n	368e <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    367e:	1c1e      	adds	r6, r3, #0
    3680:	1c18      	adds	r0, r3, #0
    3682:	4641      	mov	r1, r8
    3684:	4b1b      	ldr	r3, [pc, #108]	; (36f4 <udd_ep_transfer_process+0x194>)
    3686:	4798      	blx	r3
    3688:	1a73      	subs	r3, r6, r1
    368a:	b29b      	uxth	r3, r3
    368c:	e005      	b.n	369a <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    368e:	1c30      	adds	r0, r6, #0
    3690:	4641      	mov	r1, r8
    3692:	4b19      	ldr	r3, [pc, #100]	; (36f8 <udd_ep_transfer_process+0x198>)
    3694:	4798      	blx	r3
    3696:	1a73      	subs	r3, r6, r1
    3698:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    369a:	4598      	cmp	r8, r3
    369c:	d90e      	bls.n	36bc <udd_ep_transfer_process+0x15c>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    369e:	7ca2      	ldrb	r2, [r4, #18]
    36a0:	2304      	movs	r3, #4
    36a2:	4313      	orrs	r3, r2
    36a4:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    36a6:	4653      	mov	r3, sl
    36a8:	1e5a      	subs	r2, r3, #1
    36aa:	0192      	lsls	r2, r2, #6
    36ac:	4b15      	ldr	r3, [pc, #84]	; (3704 <udd_ep_transfer_process+0x1a4>)
    36ae:	18d2      	adds	r2, r2, r3
    36b0:	4812      	ldr	r0, [pc, #72]	; (36fc <udd_ep_transfer_process+0x19c>)
    36b2:	4651      	mov	r1, sl
    36b4:	4643      	mov	r3, r8
    36b6:	4c15      	ldr	r4, [pc, #84]	; (370c <udd_ep_transfer_process+0x1ac>)
    36b8:	47a0      	blx	r4
    36ba:	e011      	b.n	36e0 <udd_ep_transfer_process+0x180>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    36bc:	6862      	ldr	r2, [r4, #4]
    36be:	1952      	adds	r2, r2, r5
    36c0:	480e      	ldr	r0, [pc, #56]	; (36fc <udd_ep_transfer_process+0x19c>)
    36c2:	4651      	mov	r1, sl
    36c4:	4c11      	ldr	r4, [pc, #68]	; (370c <udd_ep_transfer_process+0x1ac>)
    36c6:	47a0      	blx	r4
    36c8:	e00a      	b.n	36e0 <udd_ep_transfer_process+0x180>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    36ca:	7ca3      	ldrb	r3, [r4, #18]
    36cc:	2201      	movs	r2, #1
    36ce:	4393      	bics	r3, r2
    36d0:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    36d2:	6823      	ldr	r3, [r4, #0]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d003      	beq.n	36e0 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    36d8:	68e1      	ldr	r1, [r4, #12]
    36da:	2000      	movs	r0, #0
    36dc:	1c32      	adds	r2, r6, #0
    36de:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    36e0:	bc1c      	pop	{r2, r3, r4}
    36e2:	4690      	mov	r8, r2
    36e4:	4699      	mov	r9, r3
    36e6:	46a2      	mov	sl, r4
    36e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ea:	46c0      	nop			; (mov r8, r8)
    36ec:	00003545 	.word	0x00003545
    36f0:	00001fff 	.word	0x00001fff
    36f4:	000058b1 	.word	0x000058b1
    36f8:	000056d1 	.word	0x000056d1
    36fc:	200003f0 	.word	0x200003f0
    3700:	0000471d 	.word	0x0000471d
    3704:	20000370 	.word	0x20000370
    3708:	000076d5 	.word	0x000076d5
    370c:	0000476d 	.word	0x0000476d

00003710 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3710:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3712:	2205      	movs	r2, #5
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <udd_ctrl_stall_data+0x1c>)
    3716:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3718:	4c05      	ldr	r4, [pc, #20]	; (3730 <udd_ctrl_stall_data+0x20>)
    371a:	1c20      	adds	r0, r4, #0
    371c:	2180      	movs	r1, #128	; 0x80
    371e:	4b05      	ldr	r3, [pc, #20]	; (3734 <udd_ctrl_stall_data+0x24>)
    3720:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3722:	1c20      	adds	r0, r4, #0
    3724:	2100      	movs	r1, #0
    3726:	4b04      	ldr	r3, [pc, #16]	; (3738 <udd_ctrl_stall_data+0x28>)
    3728:	4798      	blx	r3
}
    372a:	bd10      	pop	{r4, pc}
    372c:	200001fc 	.word	0x200001fc
    3730:	200003f0 	.word	0x200003f0
    3734:	0000466d 	.word	0x0000466d
    3738:	00004695 	.word	0x00004695

0000373c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    373c:	b538      	push	{r3, r4, r5, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    373e:	4c08      	ldr	r4, [pc, #32]	; (3760 <_usb_device_lpm_suspend+0x24>)
    3740:	1c20      	adds	r0, r4, #0
    3742:	2106      	movs	r1, #6
    3744:	4d07      	ldr	r5, [pc, #28]	; (3764 <_usb_device_lpm_suspend+0x28>)
    3746:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3748:	1c20      	adds	r0, r4, #0
    374a:	2104      	movs	r1, #4
    374c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    374e:	1c20      	adds	r0, r4, #0
    3750:	2102      	movs	r1, #2
    3752:	4b05      	ldr	r3, [pc, #20]	; (3768 <_usb_device_lpm_suspend+0x2c>)
    3754:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3756:	2002      	movs	r0, #2
    3758:	4b04      	ldr	r3, [pc, #16]	; (376c <_usb_device_lpm_suspend+0x30>)
    375a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    375c:	bd38      	pop	{r3, r4, r5, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	200003f0 	.word	0x200003f0
    3764:	00004181 	.word	0x00004181
    3768:	00004161 	.word	0x00004161
    376c:	00003499 	.word	0x00003499

00003770 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3770:	b538      	push	{r3, r4, r5, lr}
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3772:	4b13      	ldr	r3, [pc, #76]	; (37c0 <_usb_on_wakeup+0x50>)
    3774:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3776:	069b      	lsls	r3, r3, #26
    3778:	d406      	bmi.n	3788 <_usb_on_wakeup+0x18>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    377a:	4911      	ldr	r1, [pc, #68]	; (37c0 <_usb_on_wakeup+0x50>)
    377c:	22d0      	movs	r2, #208	; 0xd0
    377e:	68cb      	ldr	r3, [r1, #12]
    3780:	4013      	ands	r3, r2
    3782:	2bd0      	cmp	r3, #208	; 0xd0
    3784:	d1fb      	bne.n	377e <_usb_on_wakeup+0xe>
    3786:	e004      	b.n	3792 <_usb_on_wakeup+0x22>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3788:	490d      	ldr	r1, [pc, #52]	; (37c0 <_usb_on_wakeup+0x50>)
    378a:	2210      	movs	r2, #16
    378c:	68cb      	ldr	r3, [r1, #12]
    378e:	421a      	tst	r2, r3
    3790:	d0fc      	beq.n	378c <_usb_on_wakeup+0x1c>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3792:	4c0c      	ldr	r4, [pc, #48]	; (37c4 <_usb_on_wakeup+0x54>)
    3794:	1c20      	adds	r0, r4, #0
    3796:	2102      	movs	r1, #2
    3798:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <_usb_on_wakeup+0x58>)
    379a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    379c:	1c20      	adds	r0, r4, #0
    379e:	2104      	movs	r1, #4
    37a0:	4d0a      	ldr	r5, [pc, #40]	; (37cc <_usb_on_wakeup+0x5c>)
    37a2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    37a4:	1c20      	adds	r0, r4, #0
    37a6:	2106      	movs	r1, #6
    37a8:	4a09      	ldr	r2, [pc, #36]	; (37d0 <_usb_on_wakeup+0x60>)
    37aa:	4b0a      	ldr	r3, [pc, #40]	; (37d4 <_usb_on_wakeup+0x64>)
    37ac:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    37ae:	1c20      	adds	r0, r4, #0
    37b0:	2106      	movs	r1, #6
    37b2:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    37b4:	2003      	movs	r0, #3
    37b6:	4b08      	ldr	r3, [pc, #32]	; (37d8 <_usb_on_wakeup+0x68>)
    37b8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    37ba:	4b08      	ldr	r3, [pc, #32]	; (37dc <_usb_on_wakeup+0x6c>)
    37bc:	4798      	blx	r3
#endif
}
    37be:	bd38      	pop	{r3, r4, r5, pc}
    37c0:	40000800 	.word	0x40000800
    37c4:	200003f0 	.word	0x200003f0
    37c8:	00004181 	.word	0x00004181
    37cc:	00004161 	.word	0x00004161
    37d0:	0000373d 	.word	0x0000373d
    37d4:	00004141 	.word	0x00004141
    37d8:	00003499 	.word	0x00003499
    37dc:	00005561 	.word	0x00005561

000037e0 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    37e0:	b570      	push	{r4, r5, r6, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	1c04      	adds	r4, r0, #0
	// Reset USB Device Stack Core
	udc_reset();
    37e6:	4b1e      	ldr	r3, [pc, #120]	; (3860 <_usb_on_bus_reset+0x80>)
    37e8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    37ea:	2380      	movs	r3, #128	; 0x80
    37ec:	6822      	ldr	r2, [r4, #0]
    37ee:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    37f0:	ad01      	add	r5, sp, #4
    37f2:	1c28      	adds	r0, r5, #0
    37f4:	4b1b      	ldr	r3, [pc, #108]	; (3864 <_usb_on_bus_reset+0x84>)
    37f6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    37f8:	2600      	movs	r6, #0
    37fa:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    37fc:	1c20      	adds	r0, r4, #0
    37fe:	1c29      	adds	r1, r5, #0
    3800:	4b19      	ldr	r3, [pc, #100]	; (3868 <_usb_on_bus_reset+0x88>)
    3802:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3804:	1c20      	adds	r0, r4, #0
    3806:	4919      	ldr	r1, [pc, #100]	; (386c <_usb_on_bus_reset+0x8c>)
    3808:	4b19      	ldr	r3, [pc, #100]	; (3870 <_usb_on_bus_reset+0x90>)
    380a:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    380c:	1c20      	adds	r0, r4, #0
    380e:	2100      	movs	r1, #0
    3810:	2202      	movs	r2, #2
    3812:	4b18      	ldr	r3, [pc, #96]	; (3874 <_usb_on_bus_reset+0x94>)
    3814:	4d18      	ldr	r5, [pc, #96]	; (3878 <_usb_on_bus_reset+0x98>)
    3816:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3818:	1c20      	adds	r0, r4, #0
    381a:	2100      	movs	r1, #0
    381c:	2200      	movs	r2, #0
    381e:	4b17      	ldr	r3, [pc, #92]	; (387c <_usb_on_bus_reset+0x9c>)
    3820:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3822:	1c20      	adds	r0, r4, #0
    3824:	2100      	movs	r1, #0
    3826:	2201      	movs	r2, #1
    3828:	4b15      	ldr	r3, [pc, #84]	; (3880 <_usb_on_bus_reset+0xa0>)
    382a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    382c:	1c20      	adds	r0, r4, #0
    382e:	2100      	movs	r1, #0
    3830:	2202      	movs	r2, #2
    3832:	4d14      	ldr	r5, [pc, #80]	; (3884 <_usb_on_bus_reset+0xa4>)
    3834:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3836:	1c20      	adds	r0, r4, #0
    3838:	2100      	movs	r1, #0
    383a:	2200      	movs	r2, #0
    383c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    383e:	1c20      	adds	r0, r4, #0
    3840:	2100      	movs	r1, #0
    3842:	2201      	movs	r2, #1
    3844:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3846:	6822      	ldr	r2, [r4, #0]
    3848:	8911      	ldrh	r1, [r2, #8]
    384a:	4b0f      	ldr	r3, [pc, #60]	; (3888 <_usb_on_bus_reset+0xa8>)
    384c:	400b      	ands	r3, r1
    384e:	2180      	movs	r1, #128	; 0x80
    3850:	00c9      	lsls	r1, r1, #3
    3852:	430b      	orrs	r3, r1
    3854:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3856:	4b0d      	ldr	r3, [pc, #52]	; (388c <_usb_on_bus_reset+0xac>)
    3858:	701e      	strb	r6, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    385a:	b002      	add	sp, #8
    385c:	bd70      	pop	{r4, r5, r6, pc}
    385e:	46c0      	nop			; (mov r8, r8)
    3860:	00000fb9 	.word	0x00000fb9
    3864:	000043a5 	.word	0x000043a5
    3868:	000043b5 	.word	0x000043b5
    386c:	20000570 	.word	0x20000570
    3870:	000047b9 	.word	0x000047b9
    3874:	000039c5 	.word	0x000039c5
    3878:	0000419d 	.word	0x0000419d
    387c:	00003ce1 	.word	0x00003ce1
    3880:	000038cd 	.word	0x000038cd
    3884:	000041ed 	.word	0x000041ed
    3888:	fffff3ff 	.word	0xfffff3ff
    388c:	200001fc 	.word	0x200001fc

00003890 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    3890:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3892:	2203      	movs	r2, #3
    3894:	4b07      	ldr	r3, [pc, #28]	; (38b4 <udd_ctrl_send_zlp_in+0x24>)
    3896:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3898:	4c07      	ldr	r4, [pc, #28]	; (38b8 <udd_ctrl_send_zlp_in+0x28>)
    389a:	1c20      	adds	r0, r4, #0
    389c:	4907      	ldr	r1, [pc, #28]	; (38bc <udd_ctrl_send_zlp_in+0x2c>)
    389e:	4b08      	ldr	r3, [pc, #32]	; (38c0 <udd_ctrl_send_zlp_in+0x30>)
    38a0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    38a2:	4b08      	ldr	r3, [pc, #32]	; (38c4 <udd_ctrl_send_zlp_in+0x34>)
    38a4:	689a      	ldr	r2, [r3, #8]
    38a6:	1c20      	adds	r0, r4, #0
    38a8:	2100      	movs	r1, #0
    38aa:	2300      	movs	r3, #0
    38ac:	4c06      	ldr	r4, [pc, #24]	; (38c8 <udd_ctrl_send_zlp_in+0x38>)
    38ae:	47a0      	blx	r4
}
    38b0:	bd10      	pop	{r4, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	200001fc 	.word	0x200001fc
    38b8:	200003f0 	.word	0x200003f0
    38bc:	20000570 	.word	0x20000570
    38c0:	000047b9 	.word	0x000047b9
    38c4:	20000558 	.word	0x20000558
    38c8:	0000471d 	.word	0x0000471d

000038cc <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    38cc:	b508      	push	{r3, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    38ce:	7989      	ldrb	r1, [r1, #6]
    38d0:	b24b      	sxtb	r3, r1
    38d2:	2b00      	cmp	r3, #0
    38d4:	da0c      	bge.n	38f0 <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    38d6:	4b0d      	ldr	r3, [pc, #52]	; (390c <_usb_ep0_on_tansfer_fail+0x40>)
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	2b01      	cmp	r3, #1
    38dc:	d102      	bne.n	38e4 <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    38de:	4b0c      	ldr	r3, [pc, #48]	; (3910 <_usb_ep0_on_tansfer_fail+0x44>)
    38e0:	4798      	blx	r3
    38e2:	e012      	b.n	390a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    38e4:	2b04      	cmp	r3, #4
    38e6:	d110      	bne.n	390a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    38e8:	480a      	ldr	r0, [pc, #40]	; (3914 <_usb_ep0_on_tansfer_fail+0x48>)
    38ea:	4b0b      	ldr	r3, [pc, #44]	; (3918 <_usb_ep0_on_tansfer_fail+0x4c>)
    38ec:	4798      	blx	r3
    38ee:	e00c      	b.n	390a <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    38f0:	4b06      	ldr	r3, [pc, #24]	; (390c <_usb_ep0_on_tansfer_fail+0x40>)
    38f2:	781b      	ldrb	r3, [r3, #0]
    38f4:	2b02      	cmp	r3, #2
    38f6:	d103      	bne.n	3900 <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    38f8:	2204      	movs	r2, #4
    38fa:	4b04      	ldr	r3, [pc, #16]	; (390c <_usb_ep0_on_tansfer_fail+0x40>)
    38fc:	701a      	strb	r2, [r3, #0]
    38fe:	e004      	b.n	390a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3900:	2b03      	cmp	r3, #3
    3902:	d102      	bne.n	390a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3904:	4803      	ldr	r0, [pc, #12]	; (3914 <_usb_ep0_on_tansfer_fail+0x48>)
    3906:	4b04      	ldr	r3, [pc, #16]	; (3918 <_usb_ep0_on_tansfer_fail+0x4c>)
    3908:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    390a:	bd08      	pop	{r3, pc}
    390c:	200001fc 	.word	0x200001fc
    3910:	00003891 	.word	0x00003891
    3914:	200003f0 	.word	0x200003f0
    3918:	0000466d 	.word	0x0000466d

0000391c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    391c:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    391e:	4b20      	ldr	r3, [pc, #128]	; (39a0 <udd_ctrl_in_sent+0x84>)
    3920:	881a      	ldrh	r2, [r3, #0]
    3922:	4b20      	ldr	r3, [pc, #128]	; (39a4 <udd_ctrl_in_sent+0x88>)
    3924:	899c      	ldrh	r4, [r3, #12]
    3926:	1aa4      	subs	r4, r4, r2
    3928:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    392a:	2c00      	cmp	r4, #0
    392c:	d120      	bne.n	3970 <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    392e:	491e      	ldr	r1, [pc, #120]	; (39a8 <udd_ctrl_in_sent+0x8c>)
    3930:	880b      	ldrh	r3, [r1, #0]
    3932:	18d3      	adds	r3, r2, r3
    3934:	b29b      	uxth	r3, r3
    3936:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3938:	4a1a      	ldr	r2, [pc, #104]	; (39a4 <udd_ctrl_in_sent+0x88>)
    393a:	88d2      	ldrh	r2, [r2, #6]
    393c:	429a      	cmp	r2, r3
    393e:	d003      	beq.n	3948 <udd_ctrl_in_sent+0x2c>
    3940:	4b1a      	ldr	r3, [pc, #104]	; (39ac <udd_ctrl_in_sent+0x90>)
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	2b00      	cmp	r3, #0
    3946:	d007      	beq.n	3958 <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3948:	2204      	movs	r2, #4
    394a:	4b19      	ldr	r3, [pc, #100]	; (39b0 <udd_ctrl_in_sent+0x94>)
    394c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    394e:	4819      	ldr	r0, [pc, #100]	; (39b4 <udd_ctrl_in_sent+0x98>)
    3950:	4919      	ldr	r1, [pc, #100]	; (39b8 <udd_ctrl_in_sent+0x9c>)
    3952:	4b1a      	ldr	r3, [pc, #104]	; (39bc <udd_ctrl_in_sent+0xa0>)
    3954:	4798      	blx	r3
			return;
    3956:	e022      	b.n	399e <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3958:	4b12      	ldr	r3, [pc, #72]	; (39a4 <udd_ctrl_in_sent+0x88>)
    395a:	695b      	ldr	r3, [r3, #20]
    395c:	2b00      	cmp	r3, #0
    395e:	d00e      	beq.n	397e <udd_ctrl_in_sent+0x62>
    3960:	4798      	blx	r3
    3962:	2800      	cmp	r0, #0
    3964:	d00b      	beq.n	397e <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    3966:	2200      	movs	r2, #0
    3968:	4b0d      	ldr	r3, [pc, #52]	; (39a0 <udd_ctrl_in_sent+0x84>)
    396a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    396c:	4b0d      	ldr	r3, [pc, #52]	; (39a4 <udd_ctrl_in_sent+0x88>)
    396e:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3970:	2c07      	cmp	r4, #7
    3972:	d904      	bls.n	397e <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    3974:	2200      	movs	r2, #0
    3976:	4b0d      	ldr	r3, [pc, #52]	; (39ac <udd_ctrl_in_sent+0x90>)
    3978:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    397a:	2408      	movs	r4, #8
    397c:	e002      	b.n	3984 <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    397e:	2201      	movs	r2, #1
    3980:	4b0a      	ldr	r3, [pc, #40]	; (39ac <udd_ctrl_in_sent+0x90>)
    3982:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3984:	4d06      	ldr	r5, [pc, #24]	; (39a0 <udd_ctrl_in_sent+0x84>)
    3986:	882b      	ldrh	r3, [r5, #0]
    3988:	4a06      	ldr	r2, [pc, #24]	; (39a4 <udd_ctrl_in_sent+0x88>)
    398a:	6892      	ldr	r2, [r2, #8]
    398c:	18d2      	adds	r2, r2, r3
    398e:	4809      	ldr	r0, [pc, #36]	; (39b4 <udd_ctrl_in_sent+0x98>)
    3990:	2100      	movs	r1, #0
    3992:	1c23      	adds	r3, r4, #0
    3994:	4e0a      	ldr	r6, [pc, #40]	; (39c0 <udd_ctrl_in_sent+0xa4>)
    3996:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    3998:	882b      	ldrh	r3, [r5, #0]
    399a:	18e4      	adds	r4, r4, r3
    399c:	802c      	strh	r4, [r5, #0]
}
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	200001f8 	.word	0x200001f8
    39a4:	20000558 	.word	0x20000558
    39a8:	200001a4 	.word	0x200001a4
    39ac:	200001fa 	.word	0x200001fa
    39b0:	200001fc 	.word	0x200001fc
    39b4:	200003f0 	.word	0x200003f0
    39b8:	20000570 	.word	0x20000570
    39bc:	000047b9 	.word	0x000047b9
    39c0:	0000471d 	.word	0x0000471d

000039c4 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    39c4:	b510      	push	{r4, lr}
    39c6:	1c0c      	adds	r4, r1, #0
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    39c8:	4b2c      	ldr	r3, [pc, #176]	; (3a7c <_usb_ep0_on_setup+0xb8>)
    39ca:	781b      	ldrb	r3, [r3, #0]
    39cc:	2b00      	cmp	r3, #0
    39ce:	d007      	beq.n	39e0 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    39d0:	4b2b      	ldr	r3, [pc, #172]	; (3a80 <_usb_ep0_on_setup+0xbc>)
    39d2:	691b      	ldr	r3, [r3, #16]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d000      	beq.n	39da <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    39d8:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    39da:	2200      	movs	r2, #0
    39dc:	4b27      	ldr	r3, [pc, #156]	; (3a7c <_usb_ep0_on_setup+0xb8>)
    39de:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    39e0:	8823      	ldrh	r3, [r4, #0]
    39e2:	2b08      	cmp	r3, #8
    39e4:	d002      	beq.n	39ec <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    39e6:	4b27      	ldr	r3, [pc, #156]	; (3a84 <_usb_ep0_on_setup+0xc0>)
    39e8:	4798      	blx	r3
		return;
    39ea:	e045      	b.n	3a78 <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    39ec:	4a24      	ldr	r2, [pc, #144]	; (3a80 <_usb_ep0_on_setup+0xbc>)
    39ee:	4b26      	ldr	r3, [pc, #152]	; (3a88 <_usb_ep0_on_setup+0xc4>)
    39f0:	7819      	ldrb	r1, [r3, #0]
    39f2:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    39f4:	7859      	ldrb	r1, [r3, #1]
    39f6:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    39f8:	78d9      	ldrb	r1, [r3, #3]
    39fa:	0209      	lsls	r1, r1, #8
    39fc:	7898      	ldrb	r0, [r3, #2]
    39fe:	1841      	adds	r1, r0, r1
    3a00:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3a02:	7959      	ldrb	r1, [r3, #5]
    3a04:	0209      	lsls	r1, r1, #8
    3a06:	7918      	ldrb	r0, [r3, #4]
    3a08:	1841      	adds	r1, r0, r1
    3a0a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3a0c:	79d9      	ldrb	r1, [r3, #7]
    3a0e:	0209      	lsls	r1, r1, #8
    3a10:	799b      	ldrb	r3, [r3, #6]
    3a12:	185b      	adds	r3, r3, r1
    3a14:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    3a16:	4b1d      	ldr	r3, [pc, #116]	; (3a8c <_usb_ep0_on_setup+0xc8>)
    3a18:	4798      	blx	r3
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d102      	bne.n	3a24 <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    3a1e:	4b19      	ldr	r3, [pc, #100]	; (3a84 <_usb_ep0_on_setup+0xc0>)
    3a20:	4798      	blx	r3
			return;
    3a22:	e029      	b.n	3a78 <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    3a24:	4b16      	ldr	r3, [pc, #88]	; (3a80 <_usb_ep0_on_setup+0xbc>)
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	2b7f      	cmp	r3, #127	; 0x7f
    3a2a:	d910      	bls.n	3a4e <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    3a2c:	2300      	movs	r3, #0
    3a2e:	4a18      	ldr	r2, [pc, #96]	; (3a90 <_usb_ep0_on_setup+0xcc>)
    3a30:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3a32:	4a18      	ldr	r2, [pc, #96]	; (3a94 <_usb_ep0_on_setup+0xd0>)
    3a34:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3a36:	2202      	movs	r2, #2
    3a38:	4b10      	ldr	r3, [pc, #64]	; (3a7c <_usb_ep0_on_setup+0xb8>)
    3a3a:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3a3c:	4816      	ldr	r0, [pc, #88]	; (3a98 <_usb_ep0_on_setup+0xd4>)
    3a3e:	2100      	movs	r1, #0
    3a40:	4a11      	ldr	r2, [pc, #68]	; (3a88 <_usb_ep0_on_setup+0xc4>)
    3a42:	2308      	movs	r3, #8
    3a44:	4c15      	ldr	r4, [pc, #84]	; (3a9c <_usb_ep0_on_setup+0xd8>)
    3a46:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3a48:	4b15      	ldr	r3, [pc, #84]	; (3aa0 <_usb_ep0_on_setup+0xdc>)
    3a4a:	4798      	blx	r3
    3a4c:	e014      	b.n	3a78 <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    3a4e:	4b0c      	ldr	r3, [pc, #48]	; (3a80 <_usb_ep0_on_setup+0xbc>)
    3a50:	88db      	ldrh	r3, [r3, #6]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d102      	bne.n	3a5c <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    3a56:	4b13      	ldr	r3, [pc, #76]	; (3aa4 <_usb_ep0_on_setup+0xe0>)
    3a58:	4798      	blx	r3
				return;
    3a5a:	e00d      	b.n	3a78 <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    3a5c:	2300      	movs	r3, #0
    3a5e:	4a0c      	ldr	r2, [pc, #48]	; (3a90 <_usb_ep0_on_setup+0xcc>)
    3a60:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3a62:	4a0c      	ldr	r2, [pc, #48]	; (3a94 <_usb_ep0_on_setup+0xd0>)
    3a64:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3a66:	2201      	movs	r2, #1
    3a68:	4b04      	ldr	r3, [pc, #16]	; (3a7c <_usb_ep0_on_setup+0xb8>)
    3a6a:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3a6c:	480a      	ldr	r0, [pc, #40]	; (3a98 <_usb_ep0_on_setup+0xd4>)
    3a6e:	2100      	movs	r1, #0
    3a70:	4a05      	ldr	r2, [pc, #20]	; (3a88 <_usb_ep0_on_setup+0xc4>)
    3a72:	2308      	movs	r3, #8
    3a74:	4c09      	ldr	r4, [pc, #36]	; (3a9c <_usb_ep0_on_setup+0xd8>)
    3a76:	47a0      	blx	r4
			}
		}
	}
}
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	46c0      	nop			; (mov r8, r8)
    3a7c:	200001fc 	.word	0x200001fc
    3a80:	20000558 	.word	0x20000558
    3a84:	00003711 	.word	0x00003711
    3a88:	20000570 	.word	0x20000570
    3a8c:	00001055 	.word	0x00001055
    3a90:	200001a4 	.word	0x200001a4
    3a94:	200001f8 	.word	0x200001f8
    3a98:	200003f0 	.word	0x200003f0
    3a9c:	0000476d 	.word	0x0000476d
    3aa0:	0000391d 	.word	0x0000391d
    3aa4:	00003891 	.word	0x00003891

00003aa8 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    3aa8:	b508      	push	{r3, lr}
	udc_sof_notify();
    3aaa:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <_usb_on_sof_notify+0xc>)
    3aac:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    3aae:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <_usb_on_sof_notify+0x10>)
    3ab0:	4798      	blx	r3
#endif
}
    3ab2:	bd08      	pop	{r3, pc}
    3ab4:	00001015 	.word	0x00001015
    3ab8:	0000556d 	.word	0x0000556d

00003abc <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    3abc:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3abe:	4c07      	ldr	r4, [pc, #28]	; (3adc <_usb_on_suspend+0x20>)
    3ac0:	1c20      	adds	r0, r4, #0
    3ac2:	2104      	movs	r1, #4
    3ac4:	4b06      	ldr	r3, [pc, #24]	; (3ae0 <_usb_on_suspend+0x24>)
    3ac6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3ac8:	1c20      	adds	r0, r4, #0
    3aca:	2102      	movs	r1, #2
    3acc:	4b05      	ldr	r3, [pc, #20]	; (3ae4 <_usb_on_suspend+0x28>)
    3ace:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3ad0:	2001      	movs	r0, #1
    3ad2:	4b05      	ldr	r3, [pc, #20]	; (3ae8 <_usb_on_suspend+0x2c>)
    3ad4:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    3ad6:	4b05      	ldr	r3, [pc, #20]	; (3aec <_usb_on_suspend+0x30>)
    3ad8:	4798      	blx	r3
#endif
}
    3ada:	bd10      	pop	{r4, pc}
    3adc:	200003f0 	.word	0x200003f0
    3ae0:	00004181 	.word	0x00004181
    3ae4:	00004161 	.word	0x00004161
    3ae8:	00003499 	.word	0x00003499
    3aec:	00005555 	.word	0x00005555

00003af0 <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    3af0:	b510      	push	{r4, lr}
    3af2:	1c04      	adds	r4, r0, #0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    3af4:	480a      	ldr	r0, [pc, #40]	; (3b20 <udd_ep_abort+0x30>)
    3af6:	1c21      	adds	r1, r4, #0
    3af8:	4b0a      	ldr	r3, [pc, #40]	; (3b24 <udd_ep_abort+0x34>)
    3afa:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    3afc:	1c20      	adds	r0, r4, #0
    3afe:	4b0a      	ldr	r3, [pc, #40]	; (3b28 <udd_ep_abort+0x38>)
    3b00:	4798      	blx	r3
	if (!ptr_job->busy) {
    3b02:	7c83      	ldrb	r3, [r0, #18]
    3b04:	07db      	lsls	r3, r3, #31
    3b06:	d50a      	bpl.n	3b1e <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    3b08:	7c83      	ldrb	r3, [r0, #18]
    3b0a:	2201      	movs	r2, #1
    3b0c:	4393      	bics	r3, r2
    3b0e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3b10:	6803      	ldr	r3, [r0, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d003      	beq.n	3b1e <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3b16:	68c1      	ldr	r1, [r0, #12]
    3b18:	2001      	movs	r0, #1
    3b1a:	1c22      	adds	r2, r4, #0
    3b1c:	4798      	blx	r3
	}
}
    3b1e:	bd10      	pop	{r4, pc}
    3b20:	200003f0 	.word	0x200003f0
    3b24:	00004609 	.word	0x00004609
    3b28:	00003545 	.word	0x00003545

00003b2c <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3b2c:	4b02      	ldr	r3, [pc, #8]	; (3b38 <udd_get_frame_number+0xc>)
    3b2e:	681b      	ldr	r3, [r3, #0]
    3b30:	8a18      	ldrh	r0, [r3, #16]
    3b32:	0480      	lsls	r0, r0, #18
    3b34:	0d40      	lsrs	r0, r0, #21
}

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    3b36:	4770      	bx	lr
    3b38:	200003f0 	.word	0x200003f0

00003b3c <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    3b3c:	b570      	push	{r4, r5, r6, lr}
    3b3e:	b082      	sub	sp, #8
    3b40:	1c04      	adds	r4, r0, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    3b42:	ad01      	add	r5, sp, #4
    3b44:	1c28      	adds	r0, r5, #0
    3b46:	4b0d      	ldr	r3, [pc, #52]	; (3b7c <udd_ep_free+0x40>)
    3b48:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    3b4a:	1c20      	adds	r0, r4, #0
    3b4c:	4b0c      	ldr	r3, [pc, #48]	; (3b80 <udd_ep_free+0x44>)
    3b4e:	4798      	blx	r3

	config_ep.ep_address = ep;
    3b50:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3b52:	2300      	movs	r3, #0
    3b54:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3b56:	4e0b      	ldr	r6, [pc, #44]	; (3b84 <udd_ep_free+0x48>)
    3b58:	1c30      	adds	r0, r6, #0
    3b5a:	1c29      	adds	r1, r5, #0
    3b5c:	4b0a      	ldr	r3, [pc, #40]	; (3b88 <udd_ep_free+0x4c>)
    3b5e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3b60:	210f      	movs	r1, #15
    3b62:	4021      	ands	r1, r4
    3b64:	1c30      	adds	r0, r6, #0
    3b66:	2200      	movs	r2, #0
    3b68:	4b08      	ldr	r3, [pc, #32]	; (3b8c <udd_ep_free+0x50>)
    3b6a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3b6c:	1c30      	adds	r0, r6, #0
    3b6e:	1c21      	adds	r1, r4, #0
    3b70:	2200      	movs	r2, #0
    3b72:	4b07      	ldr	r3, [pc, #28]	; (3b90 <udd_ep_free+0x54>)
    3b74:	4798      	blx	r3
}
    3b76:	b002      	add	sp, #8
    3b78:	bd70      	pop	{r4, r5, r6, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	000043a5 	.word	0x000043a5
    3b80:	00003af1 	.word	0x00003af1
    3b84:	200003f0 	.word	0x200003f0
    3b88:	000043b5 	.word	0x000043b5
    3b8c:	000041c5 	.word	0x000041c5
    3b90:	000042c9 	.word	0x000042c9

00003b94 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    3b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b96:	b083      	sub	sp, #12
    3b98:	1c06      	adds	r6, r0, #0
    3b9a:	1c0c      	adds	r4, r1, #0
    3b9c:	1c15      	adds	r5, r2, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    3b9e:	af01      	add	r7, sp, #4
    3ba0:	1c38      	adds	r0, r7, #0
    3ba2:	4b36      	ldr	r3, [pc, #216]	; (3c7c <udd_ep_alloc+0xe8>)
    3ba4:	4798      	blx	r3

	config_ep.ep_address = ep;
    3ba6:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    3ba8:	2d08      	cmp	r5, #8
    3baa:	d803      	bhi.n	3bb4 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3bac:	2200      	movs	r2, #0
    3bae:	ab01      	add	r3, sp, #4
    3bb0:	705a      	strb	r2, [r3, #1]
    3bb2:	e02e      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    3bb4:	2d10      	cmp	r5, #16
    3bb6:	d803      	bhi.n	3bc0 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    3bb8:	2201      	movs	r2, #1
    3bba:	ab01      	add	r3, sp, #4
    3bbc:	705a      	strb	r2, [r3, #1]
    3bbe:	e028      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    3bc0:	2d20      	cmp	r5, #32
    3bc2:	d803      	bhi.n	3bcc <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    3bc4:	2202      	movs	r2, #2
    3bc6:	ab01      	add	r3, sp, #4
    3bc8:	705a      	strb	r2, [r3, #1]
    3bca:	e022      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    3bcc:	2d40      	cmp	r5, #64	; 0x40
    3bce:	d803      	bhi.n	3bd8 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    3bd0:	2203      	movs	r2, #3
    3bd2:	ab01      	add	r3, sp, #4
    3bd4:	705a      	strb	r2, [r3, #1]
    3bd6:	e01c      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    3bd8:	2d80      	cmp	r5, #128	; 0x80
    3bda:	d803      	bhi.n	3be4 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3bdc:	2204      	movs	r2, #4
    3bde:	ab01      	add	r3, sp, #4
    3be0:	705a      	strb	r2, [r3, #1]
    3be2:	e016      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    3be4:	2380      	movs	r3, #128	; 0x80
    3be6:	005b      	lsls	r3, r3, #1
    3be8:	429d      	cmp	r5, r3
    3bea:	d803      	bhi.n	3bf4 <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3bec:	2205      	movs	r2, #5
    3bee:	ab01      	add	r3, sp, #4
    3bf0:	705a      	strb	r2, [r3, #1]
    3bf2:	e00e      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    3bf4:	2380      	movs	r3, #128	; 0x80
    3bf6:	009b      	lsls	r3, r3, #2
    3bf8:	429d      	cmp	r5, r3
    3bfa:	d803      	bhi.n	3c04 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3bfc:	2206      	movs	r2, #6
    3bfe:	ab01      	add	r3, sp, #4
    3c00:	705a      	strb	r2, [r3, #1]
    3c02:	e006      	b.n	3c12 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    3c04:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    3c06:	4a1e      	ldr	r2, [pc, #120]	; (3c80 <udd_ep_alloc+0xec>)
    3c08:	4295      	cmp	r5, r2
    3c0a:	d833      	bhi.n	3c74 <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3c0c:	2207      	movs	r2, #7
    3c0e:	ab01      	add	r3, sp, #4
    3c10:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    3c12:	1c30      	adds	r0, r6, #0
    3c14:	4b1b      	ldr	r3, [pc, #108]	; (3c84 <udd_ep_alloc+0xf0>)
    3c16:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3c18:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3c1a:	2103      	movs	r1, #3
    3c1c:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    3c1e:	2901      	cmp	r1, #1
    3c20:	d103      	bne.n	3c2a <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3c22:	2202      	movs	r2, #2
    3c24:	ab01      	add	r3, sp, #4
    3c26:	70da      	strb	r2, [r3, #3]
    3c28:	e00b      	b.n	3c42 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    3c2a:	2902      	cmp	r1, #2
    3c2c:	d103      	bne.n	3c36 <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3c2e:	2203      	movs	r2, #3
    3c30:	ab01      	add	r3, sp, #4
    3c32:	70da      	strb	r2, [r3, #3]
    3c34:	e005      	b.n	3c42 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    3c36:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3c38:	2903      	cmp	r1, #3
    3c3a:	d11b      	bne.n	3c74 <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3c3c:	2204      	movs	r2, #4
    3c3e:	ab01      	add	r3, sp, #4
    3c40:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3c42:	4811      	ldr	r0, [pc, #68]	; (3c88 <udd_ep_alloc+0xf4>)
    3c44:	a901      	add	r1, sp, #4
    3c46:	4b11      	ldr	r3, [pc, #68]	; (3c8c <udd_ep_alloc+0xf8>)
    3c48:	4798      	blx	r3
		return false;
    3c4a:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d111      	bne.n	3c74 <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3c50:	4c0d      	ldr	r4, [pc, #52]	; (3c88 <udd_ep_alloc+0xf4>)
    3c52:	210f      	movs	r1, #15
    3c54:	4031      	ands	r1, r6
    3c56:	1c20      	adds	r0, r4, #0
    3c58:	2200      	movs	r2, #0
    3c5a:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <udd_ep_alloc+0xfc>)
    3c5c:	4d0d      	ldr	r5, [pc, #52]	; (3c94 <udd_ep_alloc+0x100>)
    3c5e:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3c60:	1c20      	adds	r0, r4, #0
    3c62:	1c31      	adds	r1, r6, #0
    3c64:	2200      	movs	r2, #0
    3c66:	4d0c      	ldr	r5, [pc, #48]	; (3c98 <udd_ep_alloc+0x104>)
    3c68:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3c6a:	1c20      	adds	r0, r4, #0
    3c6c:	1c31      	adds	r1, r6, #0
    3c6e:	2201      	movs	r2, #1
    3c70:	47a8      	blx	r5

	return true;
    3c72:	2301      	movs	r3, #1
}
    3c74:	1c18      	adds	r0, r3, #0
    3c76:	b003      	add	sp, #12
    3c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c7a:	46c0      	nop			; (mov r8, r8)
    3c7c:	000043a5 	.word	0x000043a5
    3c80:	000003ff 	.word	0x000003ff
    3c84:	00003545 	.word	0x00003545
    3c88:	200003f0 	.word	0x200003f0
    3c8c:	000043b5 	.word	0x000043b5
    3c90:	00003561 	.word	0x00003561
    3c94:	0000419d 	.word	0x0000419d
    3c98:	000041ed 	.word	0x000041ed

00003c9c <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    3c9c:	b508      	push	{r3, lr}
    3c9e:	1c01      	adds	r1, r0, #0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3ca0:	4801      	ldr	r0, [pc, #4]	; (3ca8 <udd_ep_is_halted+0xc>)
    3ca2:	4b02      	ldr	r3, [pc, #8]	; (3cac <udd_ep_is_halted+0x10>)
    3ca4:	4798      	blx	r3
}
    3ca6:	bd08      	pop	{r3, pc}
    3ca8:	200003f0 	.word	0x200003f0
    3cac:	00004641 	.word	0x00004641

00003cb0 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    3cb0:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3cb2:	230f      	movs	r3, #15
    3cb4:	4003      	ands	r3, r0
		return false;
    3cb6:	2200      	movs	r2, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3cb8:	2b02      	cmp	r3, #2
    3cba:	d808      	bhi.n	3cce <udd_ep_set_halt+0x1e>
    3cbc:	1c04      	adds	r4, r0, #0
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    3cbe:	4805      	ldr	r0, [pc, #20]	; (3cd4 <udd_ep_set_halt+0x24>)
    3cc0:	1c21      	adds	r1, r4, #0
    3cc2:	4b05      	ldr	r3, [pc, #20]	; (3cd8 <udd_ep_set_halt+0x28>)
    3cc4:	4798      	blx	r3

	udd_ep_abort(ep);
    3cc6:	1c20      	adds	r0, r4, #0
    3cc8:	4b04      	ldr	r3, [pc, #16]	; (3cdc <udd_ep_set_halt+0x2c>)
    3cca:	4798      	blx	r3
	return true;
    3ccc:	2201      	movs	r2, #1
}
    3cce:	1c10      	adds	r0, r2, #0
    3cd0:	bd10      	pop	{r4, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	200003f0 	.word	0x200003f0
    3cd8:	0000466d 	.word	0x0000466d
    3cdc:	00003af1 	.word	0x00003af1

00003ce0 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    3ce0:	b538      	push	{r3, r4, r5, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3ce2:	4b34      	ldr	r3, [pc, #208]	; (3db4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3ce4:	781b      	ldrb	r3, [r3, #0]
    3ce6:	2b01      	cmp	r3, #1
    3ce8:	d155      	bne.n	3d96 <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3cea:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3cec:	4b32      	ldr	r3, [pc, #200]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3cee:	899b      	ldrh	r3, [r3, #12]
    3cf0:	4a32      	ldr	r2, [pc, #200]	; (3dbc <_usb_ep0_on_tansfer_ok+0xdc>)
    3cf2:	8814      	ldrh	r4, [r2, #0]
    3cf4:	1962      	adds	r2, r4, r5
    3cf6:	4293      	cmp	r3, r2
    3cf8:	da01      	bge.n	3cfe <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3cfa:	1b1d      	subs	r5, r3, r4
    3cfc:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3cfe:	4b2e      	ldr	r3, [pc, #184]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3d00:	6898      	ldr	r0, [r3, #8]
    3d02:	1900      	adds	r0, r0, r4
    3d04:	492e      	ldr	r1, [pc, #184]	; (3dc0 <_usb_ep0_on_tansfer_ok+0xe0>)
    3d06:	1c2a      	adds	r2, r5, #0
    3d08:	4b2e      	ldr	r3, [pc, #184]	; (3dc4 <_usb_ep0_on_tansfer_ok+0xe4>)
    3d0a:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3d0c:	192c      	adds	r4, r5, r4
    3d0e:	b2a4      	uxth	r4, r4
    3d10:	4b2a      	ldr	r3, [pc, #168]	; (3dbc <_usb_ep0_on_tansfer_ok+0xdc>)
    3d12:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3d14:	2d08      	cmp	r5, #8
    3d16:	d106      	bne.n	3d26 <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3d18:	4b27      	ldr	r3, [pc, #156]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3d1a:	88da      	ldrh	r2, [r3, #6]
    3d1c:	4b2a      	ldr	r3, [pc, #168]	; (3dc8 <_usb_ep0_on_tansfer_ok+0xe8>)
    3d1e:	881b      	ldrh	r3, [r3, #0]
    3d20:	191b      	adds	r3, r3, r4
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3d22:	429a      	cmp	r2, r3
    3d24:	dc10      	bgt.n	3d48 <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3d26:	4b24      	ldr	r3, [pc, #144]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3d28:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3d2a:	695b      	ldr	r3, [r3, #20]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d008      	beq.n	3d42 <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    3d30:	4798      	blx	r3
    3d32:	2800      	cmp	r0, #0
    3d34:	d105      	bne.n	3d42 <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3d36:	2205      	movs	r2, #5
    3d38:	4b1e      	ldr	r3, [pc, #120]	; (3db4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3d3a:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    3d3c:	4b23      	ldr	r3, [pc, #140]	; (3dcc <_usb_ep0_on_tansfer_ok+0xec>)
    3d3e:	4798      	blx	r3
    3d40:	e036      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    3d42:	4b23      	ldr	r3, [pc, #140]	; (3dd0 <_usb_ep0_on_tansfer_ok+0xf0>)
    3d44:	4798      	blx	r3
    3d46:	e033      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3d48:	4b1b      	ldr	r3, [pc, #108]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3d4a:	899b      	ldrh	r3, [r3, #12]
    3d4c:	42a3      	cmp	r3, r4
    3d4e:	d11b      	bne.n	3d88 <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    3d50:	4b19      	ldr	r3, [pc, #100]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3d52:	695b      	ldr	r3, [r3, #20]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d106      	bne.n	3d66 <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3d58:	2205      	movs	r2, #5
    3d5a:	4b16      	ldr	r3, [pc, #88]	; (3db4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3d5c:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    3d5e:	2000      	movs	r0, #0
    3d60:	4b1a      	ldr	r3, [pc, #104]	; (3dcc <_usb_ep0_on_tansfer_ok+0xec>)
    3d62:	4798      	blx	r3
    3d64:	e024      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    3d66:	4798      	blx	r3
    3d68:	2800      	cmp	r0, #0
    3d6a:	d105      	bne.n	3d78 <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3d6c:	2205      	movs	r2, #5
    3d6e:	4b11      	ldr	r3, [pc, #68]	; (3db4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3d70:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    3d72:	4b16      	ldr	r3, [pc, #88]	; (3dcc <_usb_ep0_on_tansfer_ok+0xec>)
    3d74:	4798      	blx	r3
    3d76:	e01b      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3d78:	4913      	ldr	r1, [pc, #76]	; (3dc8 <_usb_ep0_on_tansfer_ok+0xe8>)
    3d7a:	4a10      	ldr	r2, [pc, #64]	; (3dbc <_usb_ep0_on_tansfer_ok+0xdc>)
    3d7c:	8810      	ldrh	r0, [r2, #0]
    3d7e:	880b      	ldrh	r3, [r1, #0]
    3d80:	18c3      	adds	r3, r0, r3
    3d82:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    3d84:	2300      	movs	r3, #0
    3d86:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3d88:	4812      	ldr	r0, [pc, #72]	; (3dd4 <_usb_ep0_on_tansfer_ok+0xf4>)
    3d8a:	2100      	movs	r1, #0
    3d8c:	4a0c      	ldr	r2, [pc, #48]	; (3dc0 <_usb_ep0_on_tansfer_ok+0xe0>)
    3d8e:	2308      	movs	r3, #8
    3d90:	4c11      	ldr	r4, [pc, #68]	; (3dd8 <_usb_ep0_on_tansfer_ok+0xf8>)
    3d92:	47a0      	blx	r4
    3d94:	e00c      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3d96:	2b02      	cmp	r3, #2
    3d98:	d102      	bne.n	3da0 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    3d9a:	4b10      	ldr	r3, [pc, #64]	; (3ddc <_usb_ep0_on_tansfer_ok+0xfc>)
    3d9c:	4798      	blx	r3
    3d9e:	e007      	b.n	3db0 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    3da0:	4b05      	ldr	r3, [pc, #20]	; (3db8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3da2:	691b      	ldr	r3, [r3, #16]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d000      	beq.n	3daa <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    3da8:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3daa:	2200      	movs	r2, #0
    3dac:	4b01      	ldr	r3, [pc, #4]	; (3db4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3dae:	701a      	strb	r2, [r3, #0]
		}
}
    3db0:	bd38      	pop	{r3, r4, r5, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	200001fc 	.word	0x200001fc
    3db8:	20000558 	.word	0x20000558
    3dbc:	200001f8 	.word	0x200001f8
    3dc0:	20000570 	.word	0x20000570
    3dc4:	000076d5 	.word	0x000076d5
    3dc8:	200001a4 	.word	0x200001a4
    3dcc:	00003cb1 	.word	0x00003cb1
    3dd0:	00003891 	.word	0x00003891
    3dd4:	200003f0 	.word	0x200003f0
    3dd8:	0000476d 	.word	0x0000476d
    3ddc:	0000391d 	.word	0x0000391d

00003de0 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    3de0:	b538      	push	{r3, r4, r5, lr}
    3de2:	1c01      	adds	r1, r0, #0
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3de4:	230f      	movs	r3, #15
    3de6:	4003      	ands	r3, r0
		return false;
    3de8:	2000      	movs	r0, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    3dea:	2b02      	cmp	r3, #2
    3dec:	d813      	bhi.n	3e16 <udd_ep_clear_halt+0x36>
    3dee:	1c0c      	adds	r4, r1, #0
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    3df0:	1c08      	adds	r0, r1, #0
    3df2:	4b09      	ldr	r3, [pc, #36]	; (3e18 <udd_ep_clear_halt+0x38>)
    3df4:	4798      	blx	r3
    3df6:	1c05      	adds	r5, r0, #0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    3df8:	4808      	ldr	r0, [pc, #32]	; (3e1c <udd_ep_clear_halt+0x3c>)
    3dfa:	1c21      	adds	r1, r4, #0
    3dfc:	4b08      	ldr	r3, [pc, #32]	; (3e20 <udd_ep_clear_halt+0x40>)
    3dfe:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    3e00:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    3e02:	2001      	movs	r0, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    3e04:	07db      	lsls	r3, r3, #31
    3e06:	d506      	bpl.n	3e16 <udd_ep_clear_halt+0x36>
		ptr_job->busy = false;
    3e08:	7cab      	ldrb	r3, [r5, #18]
    3e0a:	2201      	movs	r2, #1
    3e0c:	4393      	bics	r3, r2
    3e0e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3e10:	682b      	ldr	r3, [r5, #0]
    3e12:	4798      	blx	r3
	}

	return true;
    3e14:	2001      	movs	r0, #1
}
    3e16:	bd38      	pop	{r3, r4, r5, pc}
    3e18:	00003545 	.word	0x00003545
    3e1c:	200003f0 	.word	0x200003f0
    3e20:	00004695 	.word	0x00004695

00003e24 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    3e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e26:	b085      	sub	sp, #20
    3e28:	1c05      	adds	r5, r0, #0
    3e2a:	9103      	str	r1, [sp, #12]
    3e2c:	9202      	str	r2, [sp, #8]
    3e2e:	9301      	str	r3, [sp, #4]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    3e30:	230f      	movs	r3, #15
    3e32:	4003      	ands	r3, r0
    3e34:	1c1e      	adds	r6, r3, #0

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    3e36:	2400      	movs	r4, #0
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3e38:	2b02      	cmp	r3, #2
    3e3a:	d900      	bls.n	3e3e <udd_ep_run+0x1a>
    3e3c:	e0c7      	b.n	3fce <udd_ep_run+0x1aa>
    3e3e:	4b65      	ldr	r3, [pc, #404]	; (3fd4 <udd_ep_run+0x1b0>)
    3e40:	4798      	blx	r3
    3e42:	1e04      	subs	r4, r0, #0
    3e44:	d000      	beq.n	3e48 <udd_ep_run+0x24>
    3e46:	e0bd      	b.n	3fc4 <udd_ep_run+0x1a0>
		return false;
	}

	ptr_job = udd_ep_get_job(ep);
    3e48:	1c28      	adds	r0, r5, #0
    3e4a:	4b63      	ldr	r3, [pc, #396]	; (3fd8 <udd_ep_run+0x1b4>)
    3e4c:	4798      	blx	r3
    3e4e:	1c07      	adds	r7, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e50:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3e54:	4258      	negs	r0, r3
    3e56:	4158      	adcs	r0, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3e58:	b672      	cpsid	i
    3e5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e5e:	2100      	movs	r1, #0
    3e60:	4a5e      	ldr	r2, [pc, #376]	; (3fdc <udd_ep_run+0x1b8>)
    3e62:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    3e64:	7cba      	ldrb	r2, [r7, #18]
    3e66:	07d3      	lsls	r3, r2, #31
    3e68:	d509      	bpl.n	3e7e <udd_ep_run+0x5a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d100      	bne.n	3e70 <udd_ep_run+0x4c>
    3e6e:	e0ae      	b.n	3fce <udd_ep_run+0x1aa>
		cpu_irq_enable();
    3e70:	2201      	movs	r2, #1
    3e72:	4b5a      	ldr	r3, [pc, #360]	; (3fdc <udd_ep_run+0x1b8>)
    3e74:	701a      	strb	r2, [r3, #0]
    3e76:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3e7a:	b662      	cpsie	i
    3e7c:	e0a7      	b.n	3fce <udd_ep_run+0x1aa>
		cpu_irq_restore(flags);
		return false; /* Job already on going */
	}
	ptr_job->busy = true;
    3e7e:	7cba      	ldrb	r2, [r7, #18]
    3e80:	2301      	movs	r3, #1
    3e82:	4313      	orrs	r3, r2
    3e84:	74bb      	strb	r3, [r7, #18]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e86:	2800      	cmp	r0, #0
    3e88:	d005      	beq.n	3e96 <udd_ep_run+0x72>
		cpu_irq_enable();
    3e8a:	2201      	movs	r2, #1
    3e8c:	4b53      	ldr	r3, [pc, #332]	; (3fdc <udd_ep_run+0x1b8>)
    3e8e:	701a      	strb	r2, [r3, #0]
    3e90:	f3bf 8f5f 	dmb	sy
    3e94:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    3e96:	9b02      	ldr	r3, [sp, #8]
    3e98:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3e9a:	9b01      	ldr	r3, [sp, #4]
    3e9c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3e9e:	2300      	movs	r3, #0
    3ea0:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ea4:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3ea6:	2301      	movs	r3, #1
    3ea8:	9a03      	ldr	r2, [sp, #12]
    3eaa:	4013      	ands	r3, r2
    3eac:	005a      	lsls	r2, r3, #1
    3eae:	7cbb      	ldrb	r3, [r7, #18]
    3eb0:	2102      	movs	r1, #2
    3eb2:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3eb4:	4313      	orrs	r3, r2
    3eb6:	2204      	movs	r2, #4
    3eb8:	4393      	bics	r3, r2
    3eba:	74bb      	strb	r3, [r7, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    3ebc:	b26b      	sxtb	r3, r5
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	da40      	bge.n	3f44 <udd_ep_run+0x120>
		if (0 != ptr_job->buf_size) {
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d01d      	beq.n	3f04 <udd_ep_run+0xe0>
			next_trans = ptr_job->buf_size;
    3ec8:	466b      	mov	r3, sp
    3eca:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3ecc:	4b44      	ldr	r3, [pc, #272]	; (3fe0 <udd_ep_run+0x1bc>)
    3ece:	429c      	cmp	r4, r3
    3ed0:	d906      	bls.n	3ee0 <udd_ep_run+0xbc>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3ed2:	8a39      	ldrh	r1, [r7, #16]
    3ed4:	1c1c      	adds	r4, r3, #0
    3ed6:	1c18      	adds	r0, r3, #0
    3ed8:	4b42      	ldr	r3, [pc, #264]	; (3fe4 <udd_ep_run+0x1c0>)
    3eda:	4798      	blx	r3

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3edc:	1a63      	subs	r3, r4, r1
    3ede:	b29c      	uxth	r4, r3
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3ee0:	7cba      	ldrb	r2, [r7, #18]
    3ee2:	2300      	movs	r3, #0
    3ee4:	0792      	lsls	r2, r2, #30
    3ee6:	d506      	bpl.n	3ef6 <udd_ep_run+0xd2>
					(0 == (next_trans % ptr_job->ep_size));
    3ee8:	8a39      	ldrh	r1, [r7, #16]
    3eea:	1c20      	adds	r0, r4, #0
    3eec:	4b3e      	ldr	r3, [pc, #248]	; (3fe8 <udd_ep_run+0x1c4>)
    3eee:	4798      	blx	r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3ef0:	b289      	uxth	r1, r1
    3ef2:	424b      	negs	r3, r1
    3ef4:	414b      	adcs	r3, r1
    3ef6:	005b      	lsls	r3, r3, #1
    3ef8:	7cba      	ldrb	r2, [r7, #18]
    3efa:	2102      	movs	r1, #2
    3efc:	438a      	bics	r2, r1
    3efe:	4313      	orrs	r3, r2
    3f00:	74bb      	strb	r3, [r7, #18]
    3f02:	e015      	b.n	3f30 <udd_ep_run+0x10c>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    3f04:	7cbb      	ldrb	r3, [r7, #18]
    3f06:	079b      	lsls	r3, r3, #30
    3f08:	d505      	bpl.n	3f16 <udd_ep_run+0xf2>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3f0a:	7cbb      	ldrb	r3, [r7, #18]
    3f0c:	2202      	movs	r2, #2
    3f0e:	4393      	bics	r3, r2
    3f10:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3f12:	2400      	movs	r4, #0
    3f14:	e00c      	b.n	3f30 <udd_ep_run+0x10c>
		} else {
			ptr_job->busy = false;
    3f16:	7cbb      	ldrb	r3, [r7, #18]
    3f18:	2201      	movs	r2, #1
    3f1a:	4393      	bics	r3, r2
    3f1c:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3f20:	2b00      	cmp	r3, #0
    3f22:	d051      	beq.n	3fc8 <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3f24:	2000      	movs	r0, #0
    3f26:	2100      	movs	r1, #0
    3f28:	1c2a      	adds	r2, r5, #0
    3f2a:	4798      	blx	r3
			}
			return true;
    3f2c:	2401      	movs	r4, #1
    3f2e:	e04e      	b.n	3fce <udd_ep_run+0x1aa>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    3f30:	482e      	ldr	r0, [pc, #184]	; (3fec <udd_ep_run+0x1c8>)
    3f32:	1c31      	adds	r1, r6, #0
    3f34:	9a02      	ldr	r2, [sp, #8]
    3f36:	1c23      	adds	r3, r4, #0
    3f38:	4c2d      	ldr	r4, [pc, #180]	; (3ff0 <udd_ep_run+0x1cc>)
    3f3a:	47a0      	blx	r4
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    3f3c:	4244      	negs	r4, r0
    3f3e:	4144      	adcs	r4, r0
    3f40:	b2e4      	uxtb	r4, r4
    3f42:	e044      	b.n	3fce <udd_ep_run+0x1aa>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    3f44:	9b01      	ldr	r3, [sp, #4]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d02f      	beq.n	3faa <udd_ep_run+0x186>
			next_trans = ptr_job->buf_size;
    3f4a:	466b      	mov	r3, sp
    3f4c:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3f4e:	4b24      	ldr	r3, [pc, #144]	; (3fe0 <udd_ep_run+0x1bc>)
    3f50:	429c      	cmp	r4, r3
    3f52:	d907      	bls.n	3f64 <udd_ep_run+0x140>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3f54:	8a39      	ldrh	r1, [r7, #16]
    3f56:	1c1c      	adds	r4, r3, #0
    3f58:	1c18      	adds	r0, r3, #0
    3f5a:	4b22      	ldr	r3, [pc, #136]	; (3fe4 <udd_ep_run+0x1c0>)
    3f5c:	4798      	blx	r3
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3f5e:	1a63      	subs	r3, r4, r1
    3f60:	b29c      	uxth	r4, r3
    3f62:	e005      	b.n	3f70 <udd_ep_run+0x14c>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    3f64:	8a39      	ldrh	r1, [r7, #16]
    3f66:	1c20      	adds	r0, r4, #0
    3f68:	4b1f      	ldr	r3, [pc, #124]	; (3fe8 <udd_ep_run+0x1c4>)
    3f6a:	4798      	blx	r3
    3f6c:	1a63      	subs	r3, r4, r1
    3f6e:	b29c      	uxth	r4, r3
			}
			if (next_trans < ptr_job->ep_size) {
    3f70:	8a3b      	ldrh	r3, [r7, #16]
    3f72:	429c      	cmp	r4, r3
    3f74:	d20f      	bcs.n	3f96 <udd_ep_run+0x172>
				ptr_job->b_use_out_cache_buffer = true;
    3f76:	7cb9      	ldrb	r1, [r7, #18]
    3f78:	2204      	movs	r2, #4
    3f7a:	430a      	orrs	r2, r1
    3f7c:	74ba      	strb	r2, [r7, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    3f7e:	1e72      	subs	r2, r6, #1
    3f80:	0192      	lsls	r2, r2, #6
    3f82:	491c      	ldr	r1, [pc, #112]	; (3ff4 <udd_ep_run+0x1d0>)
    3f84:	1852      	adds	r2, r2, r1
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3f86:	4819      	ldr	r0, [pc, #100]	; (3fec <udd_ep_run+0x1c8>)
    3f88:	1c31      	adds	r1, r6, #0
    3f8a:	4c1b      	ldr	r4, [pc, #108]	; (3ff8 <udd_ep_run+0x1d4>)
    3f8c:	47a0      	blx	r4
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    3f8e:	4244      	negs	r4, r0
    3f90:	4144      	adcs	r4, r0
    3f92:	b2e4      	uxtb	r4, r4
    3f94:	e01b      	b.n	3fce <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3f96:	4815      	ldr	r0, [pc, #84]	; (3fec <udd_ep_run+0x1c8>)
    3f98:	1c31      	adds	r1, r6, #0
    3f9a:	9a02      	ldr	r2, [sp, #8]
    3f9c:	1c23      	adds	r3, r4, #0
    3f9e:	4c16      	ldr	r4, [pc, #88]	; (3ff8 <udd_ep_run+0x1d4>)
    3fa0:	47a0      	blx	r4
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    3fa2:	4244      	negs	r4, r0
    3fa4:	4144      	adcs	r4, r0
    3fa6:	b2e4      	uxtb	r4, r4
    3fa8:	e011      	b.n	3fce <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    3faa:	7cbb      	ldrb	r3, [r7, #18]
    3fac:	2201      	movs	r2, #1
    3fae:	4393      	bics	r3, r2
    3fb0:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d009      	beq.n	3fcc <udd_ep_run+0x1a8>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3fb8:	2000      	movs	r0, #0
    3fba:	2100      	movs	r1, #0
    3fbc:	1c2a      	adds	r2, r5, #0
    3fbe:	4798      	blx	r3
			}
			return true;
    3fc0:	2401      	movs	r4, #1
    3fc2:	e004      	b.n	3fce <udd_ep_run+0x1aa>
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    3fc4:	2400      	movs	r4, #0
    3fc6:	e002      	b.n	3fce <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    3fc8:	2401      	movs	r4, #1
    3fca:	e000      	b.n	3fce <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    3fcc:	2401      	movs	r4, #1
		}
	}
}
    3fce:	1c20      	adds	r0, r4, #0
    3fd0:	b005      	add	sp, #20
    3fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd4:	00003c9d 	.word	0x00003c9d
    3fd8:	00003545 	.word	0x00003545
    3fdc:	20000108 	.word	0x20000108
    3fe0:	00001fff 	.word	0x00001fff
    3fe4:	000058b1 	.word	0x000058b1
    3fe8:	000056d1 	.word	0x000056d1
    3fec:	200003f0 	.word	0x200003f0
    3ff0:	0000471d 	.word	0x0000471d
    3ff4:	20000370 	.word	0x20000370
    3ff8:	0000476d 	.word	0x0000476d

00003ffc <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3ffc:	4b02      	ldr	r3, [pc, #8]	; (4008 <udd_set_address+0xc>)
    3ffe:	681a      	ldr	r2, [r3, #0]
    4000:	2380      	movs	r3, #128	; 0x80
    4002:	4318      	orrs	r0, r3
    4004:	7290      	strb	r0, [r2, #10]

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    4006:	4770      	bx	lr
    4008:	200003f0 	.word	0x200003f0

0000400c <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    400c:	4b02      	ldr	r3, [pc, #8]	; (4018 <udd_getaddress+0xc>)
    400e:	681b      	ldr	r3, [r3, #0]
    4010:	7a9b      	ldrb	r3, [r3, #10]
    4012:	207f      	movs	r0, #127	; 0x7f
    4014:	4018      	ands	r0, r3

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    4016:	4770      	bx	lr
    4018:	200003f0 	.word	0x200003f0

0000401c <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    401c:	4b01      	ldr	r3, [pc, #4]	; (4024 <udd_set_setup_payload+0x8>)
    401e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    4020:	8199      	strh	r1, [r3, #12]
}
    4022:	4770      	bx	lr
    4024:	20000558 	.word	0x20000558

00004028 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    4028:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    402a:	2003      	movs	r0, #3
    402c:	4b16      	ldr	r3, [pc, #88]	; (4088 <udd_attach+0x60>)
    402e:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4030:	4c16      	ldr	r4, [pc, #88]	; (408c <udd_attach+0x64>)
    4032:	6822      	ldr	r2, [r4, #0]
    4034:	8913      	ldrh	r3, [r2, #8]
    4036:	2101      	movs	r1, #1
    4038:	438b      	bics	r3, r1
    403a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    403c:	1c20      	adds	r0, r4, #0
    403e:	3103      	adds	r1, #3
    4040:	4a13      	ldr	r2, [pc, #76]	; (4090 <udd_attach+0x68>)
    4042:	4e14      	ldr	r6, [pc, #80]	; (4094 <udd_attach+0x6c>)
    4044:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    4046:	1c20      	adds	r0, r4, #0
    4048:	2100      	movs	r1, #0
    404a:	4a13      	ldr	r2, [pc, #76]	; (4098 <udd_attach+0x70>)
    404c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    404e:	1c20      	adds	r0, r4, #0
    4050:	2101      	movs	r1, #1
    4052:	4a12      	ldr	r2, [pc, #72]	; (409c <udd_attach+0x74>)
    4054:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    4056:	1c20      	adds	r0, r4, #0
    4058:	2102      	movs	r1, #2
    405a:	4a11      	ldr	r2, [pc, #68]	; (40a0 <udd_attach+0x78>)
    405c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    405e:	1c20      	adds	r0, r4, #0
    4060:	2104      	movs	r1, #4
    4062:	4d10      	ldr	r5, [pc, #64]	; (40a4 <udd_attach+0x7c>)
    4064:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    4066:	1c20      	adds	r0, r4, #0
    4068:	2100      	movs	r1, #0
    406a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    406c:	1c20      	adds	r0, r4, #0
    406e:	2101      	movs	r1, #1
    4070:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    4072:	1c20      	adds	r0, r4, #0
    4074:	2102      	movs	r1, #2
    4076:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    4078:	1c20      	adds	r0, r4, #0
    407a:	2106      	movs	r1, #6
    407c:	4a0a      	ldr	r2, [pc, #40]	; (40a8 <udd_attach+0x80>)
    407e:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    4080:	1c20      	adds	r0, r4, #0
    4082:	2106      	movs	r1, #6
    4084:	47a8      	blx	r5
#endif
}
    4086:	bd70      	pop	{r4, r5, r6, pc}
    4088:	00003499 	.word	0x00003499
    408c:	200003f0 	.word	0x200003f0
    4090:	00003abd 	.word	0x00003abd
    4094:	00004141 	.word	0x00004141
    4098:	00003aa9 	.word	0x00003aa9
    409c:	000037e1 	.word	0x000037e1
    40a0:	00003771 	.word	0x00003771
    40a4:	00004161 	.word	0x00004161
    40a8:	0000373d 	.word	0x0000373d

000040ac <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    40ac:	b570      	push	{r4, r5, r6, lr}
    40ae:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40b0:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    40b4:	b672      	cpsid	i
    40b6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    40ba:	2600      	movs	r6, #0
    40bc:	4b17      	ldr	r3, [pc, #92]	; (411c <udd_enable+0x70>)
    40be:	701e      	strb	r6, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    40c0:	ad01      	add	r5, sp, #4
    40c2:	1c28      	adds	r0, r5, #0
    40c4:	4b16      	ldr	r3, [pc, #88]	; (4120 <udd_enable+0x74>)
    40c6:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    40c8:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    40ca:	4e16      	ldr	r6, [pc, #88]	; (4124 <udd_enable+0x78>)
    40cc:	1c30      	adds	r0, r6, #0
    40ce:	4916      	ldr	r1, [pc, #88]	; (4128 <udd_enable+0x7c>)
    40d0:	1c2a      	adds	r2, r5, #0
    40d2:	4b16      	ldr	r3, [pc, #88]	; (412c <udd_enable+0x80>)
    40d4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    40d6:	1c30      	adds	r0, r6, #0
    40d8:	4b15      	ldr	r3, [pc, #84]	; (4130 <udd_enable+0x84>)
    40da:	4798      	blx	r3
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    40dc:	4b15      	ldr	r3, [pc, #84]	; (4134 <udd_enable+0x88>)
    40de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    40e0:	069b      	lsls	r3, r3, #26
    40e2:	d406      	bmi.n	40f2 <udd_enable+0x46>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    40e4:	4913      	ldr	r1, [pc, #76]	; (4134 <udd_enable+0x88>)
    40e6:	22d0      	movs	r2, #208	; 0xd0
    40e8:	68cb      	ldr	r3, [r1, #12]
    40ea:	4013      	ands	r3, r2
    40ec:	2bd0      	cmp	r3, #208	; 0xd0
    40ee:	d1fb      	bne.n	40e8 <udd_enable+0x3c>
    40f0:	e004      	b.n	40fc <udd_enable+0x50>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    40f2:	4910      	ldr	r1, [pc, #64]	; (4134 <udd_enable+0x88>)
    40f4:	2210      	movs	r2, #16
    40f6:	68cb      	ldr	r3, [r1, #12]
    40f8:	421a      	tst	r2, r3
    40fa:	d0fc      	beq.n	40f6 <udd_enable+0x4a>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    40fc:	2001      	movs	r0, #1
    40fe:	4b0e      	ldr	r3, [pc, #56]	; (4138 <udd_enable+0x8c>)
    4100:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    4102:	4b0e      	ldr	r3, [pc, #56]	; (413c <udd_enable+0x90>)
    4104:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4106:	2c00      	cmp	r4, #0
    4108:	d105      	bne.n	4116 <udd_enable+0x6a>
		cpu_irq_enable();
    410a:	2201      	movs	r2, #1
    410c:	4b03      	ldr	r3, [pc, #12]	; (411c <udd_enable+0x70>)
    410e:	701a      	strb	r2, [r3, #0]
    4110:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    4114:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    4116:	b002      	add	sp, #8
    4118:	bd70      	pop	{r4, r5, r6, pc}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	20000108 	.word	0x20000108
    4120:	00004d9d 	.word	0x00004d9d
    4124:	200003f0 	.word	0x200003f0
    4128:	41005000 	.word	0x41005000
    412c:	00004dad 	.word	0x00004dad
    4130:	000047e9 	.word	0x000047e9
    4134:	40000800 	.word	0x40000800
    4138:	00003499 	.word	0x00003499
    413c:	00004029 	.word	0x00004029

00004140 <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    4140:	1c0b      	adds	r3, r1, #0
    4142:	332e      	adds	r3, #46	; 0x2e
    4144:	009b      	lsls	r3, r3, #2
    4146:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    4148:	0049      	lsls	r1, r1, #1
    414a:	22aa      	movs	r2, #170	; 0xaa
    414c:	0052      	lsls	r2, r2, #1
    414e:	4b03      	ldr	r3, [pc, #12]	; (415c <usb_device_register_callback+0x1c>)
    4150:	5ac9      	ldrh	r1, [r1, r3]
    4152:	5a83      	ldrh	r3, [r0, r2]
    4154:	430b      	orrs	r3, r1
    4156:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    4158:	2000      	movs	r0, #0
    415a:	4770      	bx	lr
    415c:	000079dc 	.word	0x000079dc

00004160 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4160:	0049      	lsls	r1, r1, #1
    4162:	4b06      	ldr	r3, [pc, #24]	; (417c <usb_device_enable_callback+0x1c>)
    4164:	5acb      	ldrh	r3, [r1, r3]
    4166:	6802      	ldr	r2, [r0, #0]
    4168:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    416a:	21ab      	movs	r1, #171	; 0xab
    416c:	0049      	lsls	r1, r1, #1
    416e:	5a42      	ldrh	r2, [r0, r1]
    4170:	431a      	orrs	r2, r3
    4172:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4174:	6802      	ldr	r2, [r0, #0]
    4176:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    4178:	2000      	movs	r0, #0
    417a:	4770      	bx	lr
    417c:	000079dc 	.word	0x000079dc

00004180 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    4180:	0049      	lsls	r1, r1, #1
    4182:	4b05      	ldr	r3, [pc, #20]	; (4198 <usb_device_disable_callback+0x18>)
    4184:	5aca      	ldrh	r2, [r1, r3]
    4186:	21ab      	movs	r1, #171	; 0xab
    4188:	0049      	lsls	r1, r1, #1
    418a:	5a43      	ldrh	r3, [r0, r1]
    418c:	4393      	bics	r3, r2
    418e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    4190:	6803      	ldr	r3, [r0, #0]
    4192:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    4194:	2000      	movs	r0, #0
    4196:	4770      	bx	lr
    4198:	000079dc 	.word	0x000079dc

0000419c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    419c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    419e:	008c      	lsls	r4, r1, #2
    41a0:	18a4      	adds	r4, r4, r2
    41a2:	3434      	adds	r4, #52	; 0x34
    41a4:	00a4      	lsls	r4, r4, #2
    41a6:	1904      	adds	r4, r0, r4
    41a8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    41aa:	1841      	adds	r1, r0, r1
    41ac:	3159      	adds	r1, #89	; 0x59
    41ae:	31ff      	adds	r1, #255	; 0xff
    41b0:	7808      	ldrb	r0, [r1, #0]
    41b2:	4b03      	ldr	r3, [pc, #12]	; (41c0 <usb_device_endpoint_register_callback+0x24>)
    41b4:	5c9b      	ldrb	r3, [r3, r2]
    41b6:	4303      	orrs	r3, r0
    41b8:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    41ba:	2000      	movs	r0, #0
    41bc:	bd10      	pop	{r4, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	000079ec 	.word	0x000079ec

000041c4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    41c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    41c6:	008b      	lsls	r3, r1, #2
    41c8:	189b      	adds	r3, r3, r2
    41ca:	3334      	adds	r3, #52	; 0x34
    41cc:	009b      	lsls	r3, r3, #2
    41ce:	18c3      	adds	r3, r0, r3
    41d0:	2400      	movs	r4, #0
    41d2:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    41d4:	1841      	adds	r1, r0, r1
    41d6:	3159      	adds	r1, #89	; 0x59
    41d8:	31ff      	adds	r1, #255	; 0xff
    41da:	4b03      	ldr	r3, [pc, #12]	; (41e8 <usb_device_endpoint_unregister_callback+0x24>)
    41dc:	5c9a      	ldrb	r2, [r3, r2]
    41de:	780b      	ldrb	r3, [r1, #0]
    41e0:	4393      	bics	r3, r2
    41e2:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    41e4:	2000      	movs	r0, #0
    41e6:	bd10      	pop	{r4, pc}
    41e8:	000079ec 	.word	0x000079ec

000041ec <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    41ec:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41ee:	230f      	movs	r3, #15
    41f0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    41f2:	18c4      	adds	r4, r0, r3
    41f4:	3461      	adds	r4, #97	; 0x61
    41f6:	34ff      	adds	r4, #255	; 0xff
    41f8:	7826      	ldrb	r6, [r4, #0]
    41fa:	4d32      	ldr	r5, [pc, #200]	; (42c4 <usb_device_endpoint_enable_callback+0xd8>)
    41fc:	5cad      	ldrb	r5, [r5, r2]
    41fe:	4335      	orrs	r5, r6
    4200:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4202:	2a00      	cmp	r2, #0
    4204:	d11f      	bne.n	4246 <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    4206:	2b00      	cmp	r3, #0
    4208:	d108      	bne.n	421c <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    420a:	015c      	lsls	r4, r3, #5
    420c:	6805      	ldr	r5, [r0, #0]
    420e:	46ac      	mov	ip, r5
    4210:	4464      	add	r4, ip
    4212:	3409      	adds	r4, #9
    4214:	34ff      	adds	r4, #255	; 0xff
    4216:	2503      	movs	r5, #3
    4218:	7065      	strb	r5, [r4, #1]
    421a:	e03d      	b.n	4298 <usb_device_endpoint_enable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    421c:	b24c      	sxtb	r4, r1
    421e:	2c00      	cmp	r4, #0
    4220:	da08      	bge.n	4234 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4222:	015c      	lsls	r4, r3, #5
    4224:	6805      	ldr	r5, [r0, #0]
    4226:	46ac      	mov	ip, r5
    4228:	4464      	add	r4, ip
    422a:	3409      	adds	r4, #9
    422c:	34ff      	adds	r4, #255	; 0xff
    422e:	2502      	movs	r5, #2
    4230:	7065      	strb	r5, [r4, #1]
    4232:	e031      	b.n	4298 <usb_device_endpoint_enable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4234:	015c      	lsls	r4, r3, #5
    4236:	6805      	ldr	r5, [r0, #0]
    4238:	46ac      	mov	ip, r5
    423a:	4464      	add	r4, ip
    423c:	3409      	adds	r4, #9
    423e:	34ff      	adds	r4, #255	; 0xff
    4240:	2501      	movs	r5, #1
    4242:	7065      	strb	r5, [r4, #1]
    4244:	e028      	b.n	4298 <usb_device_endpoint_enable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    4246:	2a01      	cmp	r2, #1
    4248:	d11c      	bne.n	4284 <usb_device_endpoint_enable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    424a:	2b00      	cmp	r3, #0
    424c:	d107      	bne.n	425e <usb_device_endpoint_enable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    424e:	6802      	ldr	r2, [r0, #0]
    4250:	015b      	lsls	r3, r3, #5
    4252:	18d3      	adds	r3, r2, r3
    4254:	3309      	adds	r3, #9
    4256:	33ff      	adds	r3, #255	; 0xff
    4258:	220c      	movs	r2, #12
    425a:	705a      	strb	r2, [r3, #1]
    425c:	e030      	b.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    425e:	b249      	sxtb	r1, r1
    4260:	2900      	cmp	r1, #0
    4262:	da07      	bge.n	4274 <usb_device_endpoint_enable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4264:	6802      	ldr	r2, [r0, #0]
    4266:	015b      	lsls	r3, r3, #5
    4268:	18d3      	adds	r3, r2, r3
    426a:	3309      	adds	r3, #9
    426c:	33ff      	adds	r3, #255	; 0xff
    426e:	2208      	movs	r2, #8
    4270:	705a      	strb	r2, [r3, #1]
    4272:	e025      	b.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4274:	6802      	ldr	r2, [r0, #0]
    4276:	015b      	lsls	r3, r3, #5
    4278:	18d3      	adds	r3, r2, r3
    427a:	3309      	adds	r3, #9
    427c:	33ff      	adds	r3, #255	; 0xff
    427e:	2204      	movs	r2, #4
    4280:	705a      	strb	r2, [r3, #1]
    4282:	e01d      	b.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4284:	2a02      	cmp	r2, #2
    4286:	d107      	bne.n	4298 <usb_device_endpoint_enable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4288:	6802      	ldr	r2, [r0, #0]
    428a:	015b      	lsls	r3, r3, #5
    428c:	18d3      	adds	r3, r2, r3
    428e:	3309      	adds	r3, #9
    4290:	33ff      	adds	r3, #255	; 0xff
    4292:	2210      	movs	r2, #16
    4294:	705a      	strb	r2, [r3, #1]
    4296:	e013      	b.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4298:	2a03      	cmp	r2, #3
    429a:	d111      	bne.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    429c:	b249      	sxtb	r1, r1
    429e:	2900      	cmp	r1, #0
    42a0:	da07      	bge.n	42b2 <usb_device_endpoint_enable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    42a2:	6802      	ldr	r2, [r0, #0]
    42a4:	015b      	lsls	r3, r3, #5
    42a6:	18d3      	adds	r3, r2, r3
    42a8:	3309      	adds	r3, #9
    42aa:	33ff      	adds	r3, #255	; 0xff
    42ac:	2240      	movs	r2, #64	; 0x40
    42ae:	705a      	strb	r2, [r3, #1]
    42b0:	e006      	b.n	42c0 <usb_device_endpoint_enable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    42b2:	6802      	ldr	r2, [r0, #0]
    42b4:	015b      	lsls	r3, r3, #5
    42b6:	18d3      	adds	r3, r2, r3
    42b8:	3309      	adds	r3, #9
    42ba:	33ff      	adds	r3, #255	; 0xff
    42bc:	2220      	movs	r2, #32
    42be:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
}
    42c0:	2000      	movs	r0, #0
    42c2:	bd70      	pop	{r4, r5, r6, pc}
    42c4:	000079ec 	.word	0x000079ec

000042c8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    42c8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    42ca:	230f      	movs	r3, #15
    42cc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    42ce:	18c4      	adds	r4, r0, r3
    42d0:	3461      	adds	r4, #97	; 0x61
    42d2:	34ff      	adds	r4, #255	; 0xff
    42d4:	4d32      	ldr	r5, [pc, #200]	; (43a0 <usb_device_endpoint_disable_callback+0xd8>)
    42d6:	5cae      	ldrb	r6, [r5, r2]
    42d8:	7825      	ldrb	r5, [r4, #0]
    42da:	43b5      	bics	r5, r6
    42dc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    42de:	2a00      	cmp	r2, #0
    42e0:	d11f      	bne.n	4322 <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    42e2:	2b00      	cmp	r3, #0
    42e4:	d108      	bne.n	42f8 <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    42e6:	015c      	lsls	r4, r3, #5
    42e8:	6805      	ldr	r5, [r0, #0]
    42ea:	46ac      	mov	ip, r5
    42ec:	4464      	add	r4, ip
    42ee:	3409      	adds	r4, #9
    42f0:	34ff      	adds	r4, #255	; 0xff
    42f2:	2503      	movs	r5, #3
    42f4:	7025      	strb	r5, [r4, #0]
    42f6:	e03d      	b.n	4374 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    42f8:	b24c      	sxtb	r4, r1
    42fa:	2c00      	cmp	r4, #0
    42fc:	da08      	bge.n	4310 <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    42fe:	015c      	lsls	r4, r3, #5
    4300:	6805      	ldr	r5, [r0, #0]
    4302:	46ac      	mov	ip, r5
    4304:	4464      	add	r4, ip
    4306:	3409      	adds	r4, #9
    4308:	34ff      	adds	r4, #255	; 0xff
    430a:	2502      	movs	r5, #2
    430c:	7025      	strb	r5, [r4, #0]
    430e:	e031      	b.n	4374 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    4310:	015c      	lsls	r4, r3, #5
    4312:	6805      	ldr	r5, [r0, #0]
    4314:	46ac      	mov	ip, r5
    4316:	4464      	add	r4, ip
    4318:	3409      	adds	r4, #9
    431a:	34ff      	adds	r4, #255	; 0xff
    431c:	2501      	movs	r5, #1
    431e:	7025      	strb	r5, [r4, #0]
    4320:	e028      	b.n	4374 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    4322:	2a01      	cmp	r2, #1
    4324:	d11c      	bne.n	4360 <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    4326:	2b00      	cmp	r3, #0
    4328:	d107      	bne.n	433a <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    432a:	6802      	ldr	r2, [r0, #0]
    432c:	015b      	lsls	r3, r3, #5
    432e:	18d3      	adds	r3, r2, r3
    4330:	3309      	adds	r3, #9
    4332:	33ff      	adds	r3, #255	; 0xff
    4334:	220c      	movs	r2, #12
    4336:	701a      	strb	r2, [r3, #0]
    4338:	e030      	b.n	439c <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    433a:	b249      	sxtb	r1, r1
    433c:	2900      	cmp	r1, #0
    433e:	da07      	bge.n	4350 <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4340:	6802      	ldr	r2, [r0, #0]
    4342:	015b      	lsls	r3, r3, #5
    4344:	18d3      	adds	r3, r2, r3
    4346:	3309      	adds	r3, #9
    4348:	33ff      	adds	r3, #255	; 0xff
    434a:	2208      	movs	r2, #8
    434c:	701a      	strb	r2, [r3, #0]
    434e:	e025      	b.n	439c <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    4350:	6802      	ldr	r2, [r0, #0]
    4352:	015b      	lsls	r3, r3, #5
    4354:	18d3      	adds	r3, r2, r3
    4356:	3309      	adds	r3, #9
    4358:	33ff      	adds	r3, #255	; 0xff
    435a:	2204      	movs	r2, #4
    435c:	701a      	strb	r2, [r3, #0]
    435e:	e01d      	b.n	439c <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4360:	2a02      	cmp	r2, #2
    4362:	d107      	bne.n	4374 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    4364:	6802      	ldr	r2, [r0, #0]
    4366:	015b      	lsls	r3, r3, #5
    4368:	18d3      	adds	r3, r2, r3
    436a:	3309      	adds	r3, #9
    436c:	33ff      	adds	r3, #255	; 0xff
    436e:	2210      	movs	r2, #16
    4370:	701a      	strb	r2, [r3, #0]
    4372:	e013      	b.n	439c <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4374:	2a03      	cmp	r2, #3
    4376:	d111      	bne.n	439c <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    4378:	b249      	sxtb	r1, r1
    437a:	2900      	cmp	r1, #0
    437c:	da07      	bge.n	438e <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    437e:	6802      	ldr	r2, [r0, #0]
    4380:	015b      	lsls	r3, r3, #5
    4382:	18d3      	adds	r3, r2, r3
    4384:	3309      	adds	r3, #9
    4386:	33ff      	adds	r3, #255	; 0xff
    4388:	2240      	movs	r2, #64	; 0x40
    438a:	701a      	strb	r2, [r3, #0]
    438c:	e006      	b.n	439c <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    438e:	6802      	ldr	r2, [r0, #0]
    4390:	015b      	lsls	r3, r3, #5
    4392:	18d3      	adds	r3, r2, r3
    4394:	3309      	adds	r3, #9
    4396:	33ff      	adds	r3, #255	; 0xff
    4398:	2220      	movs	r2, #32
    439a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    439c:	2000      	movs	r0, #0
    439e:	bd70      	pop	{r4, r5, r6, pc}
    43a0:	000079ec 	.word	0x000079ec

000043a4 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    43a4:	2300      	movs	r3, #0
    43a6:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    43a8:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    43aa:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    43ac:	3301      	adds	r3, #1
    43ae:	70c3      	strb	r3, [r0, #3]
}
    43b0:	4770      	bx	lr
    43b2:	46c0      	nop			; (mov r8, r8)

000043b4 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    43b6:	780a      	ldrb	r2, [r1, #0]
    43b8:	230f      	movs	r3, #15
    43ba:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    43bc:	09d4      	lsrs	r4, r2, #7

	switch (ep_config->ep_type) {
    43be:	78ca      	ldrb	r2, [r1, #3]
    43c0:	2a04      	cmp	r2, #4
    43c2:	d900      	bls.n	43c6 <usb_device_endpoint_set_config+0x12>
    43c4:	e0f0      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
    43c6:	0092      	lsls	r2, r2, #2
    43c8:	4e8c      	ldr	r6, [pc, #560]	; (45fc <usb_device_endpoint_set_config+0x248>)
    43ca:	58b2      	ldr	r2, [r6, r2]
    43cc:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    43ce:	6802      	ldr	r2, [r0, #0]
    43d0:	3308      	adds	r3, #8
    43d2:	015b      	lsls	r3, r3, #5
    43d4:	2100      	movs	r1, #0
    43d6:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    43d8:	2200      	movs	r2, #0
    43da:	e10c      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
    43dc:	015c      	lsls	r4, r3, #5
    43de:	6802      	ldr	r2, [r0, #0]
    43e0:	4694      	mov	ip, r2
    43e2:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43e4:	2280      	movs	r2, #128	; 0x80
    43e6:	0052      	lsls	r2, r2, #1
    43e8:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    43ea:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43ec:	076d      	lsls	r5, r5, #29
    43ee:	d000      	beq.n	43f2 <usb_device_endpoint_set_config+0x3e>
    43f0:	e101      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    43f2:	32e4      	adds	r2, #228	; 0xe4
    43f4:	5ca6      	ldrb	r6, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    43f6:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    43f8:	2570      	movs	r5, #112	; 0x70
    43fa:	422e      	tst	r6, r5
    43fc:	d000      	beq.n	4400 <usb_device_endpoint_set_config+0x4c>
    43fe:	e0fa      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    4400:	3d5f      	subs	r5, #95	; 0x5f
    4402:	32e4      	adds	r2, #228	; 0xe4
    4404:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4406:	1c1a      	adds	r2, r3, #0
    4408:	3208      	adds	r2, #8
    440a:	0152      	lsls	r2, r2, #5
    440c:	6804      	ldr	r4, [r0, #0]
    440e:	18a4      	adds	r4, r4, r2
    4410:	352f      	adds	r5, #47	; 0x2f
    4412:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4414:	6800      	ldr	r0, [r0, #0]
    4416:	1882      	adds	r2, r0, r2
    4418:	2080      	movs	r0, #128	; 0x80
    441a:	7110      	strb	r0, [r2, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    441c:	788a      	ldrb	r2, [r1, #2]
    441e:	2a00      	cmp	r2, #0
    4420:	d00b      	beq.n	443a <usb_device_endpoint_set_config+0x86>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4422:	015a      	lsls	r2, r3, #5
    4424:	4876      	ldr	r0, [pc, #472]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    4426:	1882      	adds	r2, r0, r2
    4428:	6854      	ldr	r4, [r2, #4]
    442a:	2580      	movs	r5, #128	; 0x80
    442c:	062d      	lsls	r5, r5, #24
    442e:	432c      	orrs	r4, r5
    4430:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4432:	6950      	ldr	r0, [r2, #20]
    4434:	4328      	orrs	r0, r5
    4436:	6150      	str	r0, [r2, #20]
    4438:	e00a      	b.n	4450 <usb_device_endpoint_set_config+0x9c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    443a:	015a      	lsls	r2, r3, #5
    443c:	4870      	ldr	r0, [pc, #448]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    443e:	1882      	adds	r2, r0, r2
    4440:	6850      	ldr	r0, [r2, #4]
    4442:	0040      	lsls	r0, r0, #1
    4444:	0840      	lsrs	r0, r0, #1
    4446:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4448:	6950      	ldr	r0, [r2, #20]
    444a:	0040      	lsls	r0, r0, #1
    444c:	0840      	lsrs	r0, r0, #1
    444e:	6150      	str	r0, [r2, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4450:	2207      	movs	r2, #7
    4452:	7848      	ldrb	r0, [r1, #1]
    4454:	015b      	lsls	r3, r3, #5
    4456:	4c6a      	ldr	r4, [pc, #424]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    4458:	18e3      	adds	r3, r4, r3
    445a:	4010      	ands	r0, r2
    445c:	0704      	lsls	r4, r0, #28
    445e:	6858      	ldr	r0, [r3, #4]
    4460:	4d68      	ldr	r5, [pc, #416]	; (4604 <usb_device_endpoint_set_config+0x250>)
    4462:	4028      	ands	r0, r5
    4464:	4320      	orrs	r0, r4
    4466:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4468:	7849      	ldrb	r1, [r1, #1]
    446a:	400a      	ands	r2, r1
    446c:	0711      	lsls	r1, r2, #28
    446e:	695a      	ldr	r2, [r3, #20]
    4470:	402a      	ands	r2, r5
    4472:	430a      	orrs	r2, r1
    4474:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4476:	2200      	movs	r2, #0
    4478:	e0bd      	b.n	45f6 <usb_device_endpoint_set_config+0x242>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    447a:	2c00      	cmp	r4, #0
    447c:	d018      	beq.n	44b0 <usb_device_endpoint_set_config+0xfc>
    447e:	015d      	lsls	r5, r3, #5
    4480:	6802      	ldr	r2, [r0, #0]
    4482:	4694      	mov	ip, r2
    4484:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4486:	2280      	movs	r2, #128	; 0x80
    4488:	0052      	lsls	r2, r2, #1
    448a:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    448c:	3ae4      	subs	r2, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    448e:	2670      	movs	r6, #112	; 0x70
    4490:	4237      	tst	r7, r6
    4492:	d000      	beq.n	4496 <usb_device_endpoint_set_config+0xe2>
    4494:	e0af      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4496:	3690      	adds	r6, #144	; 0x90
    4498:	5daf      	ldrb	r7, [r5, r6]
    449a:	3204      	adds	r2, #4
    449c:	433a      	orrs	r2, r7
    449e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    44a0:	6800      	ldr	r0, [r0, #0]
    44a2:	1c1a      	adds	r2, r3, #0
    44a4:	3208      	adds	r2, #8
    44a6:	0152      	lsls	r2, r2, #5
    44a8:	1882      	adds	r2, r0, r2
    44aa:	2080      	movs	r0, #128	; 0x80
    44ac:	7110      	strb	r0, [r2, #4]
    44ae:	e07b      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
    44b0:	015d      	lsls	r5, r3, #5
    44b2:	6802      	ldr	r2, [r0, #0]
    44b4:	4694      	mov	ip, r2
    44b6:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    44b8:	2280      	movs	r2, #128	; 0x80
    44ba:	0052      	lsls	r2, r2, #1
    44bc:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    44be:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    44c0:	0776      	lsls	r6, r6, #29
    44c2:	d000      	beq.n	44c6 <usb_device_endpoint_set_config+0x112>
    44c4:	e097      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    44c6:	2680      	movs	r6, #128	; 0x80
    44c8:	0076      	lsls	r6, r6, #1
    44ca:	5daf      	ldrb	r7, [r5, r6]
    44cc:	3a1a      	subs	r2, #26
    44ce:	433a      	orrs	r2, r7
    44d0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    44d2:	6800      	ldr	r0, [r0, #0]
    44d4:	1c1a      	adds	r2, r3, #0
    44d6:	3208      	adds	r2, #8
    44d8:	0152      	lsls	r2, r2, #5
    44da:	1882      	adds	r2, r0, r2
    44dc:	2040      	movs	r0, #64	; 0x40
    44de:	7150      	strb	r0, [r2, #5]
    44e0:	e062      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    44e2:	2c00      	cmp	r4, #0
    44e4:	d017      	beq.n	4516 <usb_device_endpoint_set_config+0x162>
    44e6:	015d      	lsls	r5, r3, #5
    44e8:	6802      	ldr	r2, [r0, #0]
    44ea:	4694      	mov	ip, r2
    44ec:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    44ee:	2280      	movs	r2, #128	; 0x80
    44f0:	0052      	lsls	r2, r2, #1
    44f2:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    44f4:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    44f6:	2670      	movs	r6, #112	; 0x70
    44f8:	4237      	tst	r7, r6
    44fa:	d17c      	bne.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    44fc:	3690      	adds	r6, #144	; 0x90
    44fe:	5daf      	ldrb	r7, [r5, r6]
    4500:	3214      	adds	r2, #20
    4502:	433a      	orrs	r2, r7
    4504:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4506:	6800      	ldr	r0, [r0, #0]
    4508:	1c1a      	adds	r2, r3, #0
    450a:	3208      	adds	r2, #8
    450c:	0152      	lsls	r2, r2, #5
    450e:	1882      	adds	r2, r0, r2
    4510:	2080      	movs	r0, #128	; 0x80
    4512:	7110      	strb	r0, [r2, #4]
    4514:	e048      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
    4516:	015d      	lsls	r5, r3, #5
    4518:	6802      	ldr	r2, [r0, #0]
    451a:	4694      	mov	ip, r2
    451c:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    451e:	2280      	movs	r2, #128	; 0x80
    4520:	0052      	lsls	r2, r2, #1
    4522:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4524:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4526:	0776      	lsls	r6, r6, #29
    4528:	d165      	bne.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    452a:	2680      	movs	r6, #128	; 0x80
    452c:	0076      	lsls	r6, r6, #1
    452e:	5daf      	ldrb	r7, [r5, r6]
    4530:	3a19      	subs	r2, #25
    4532:	433a      	orrs	r2, r7
    4534:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4536:	6800      	ldr	r0, [r0, #0]
    4538:	1c1a      	adds	r2, r3, #0
    453a:	3208      	adds	r2, #8
    453c:	0152      	lsls	r2, r2, #5
    453e:	1882      	adds	r2, r0, r2
    4540:	2040      	movs	r0, #64	; 0x40
    4542:	7150      	strb	r0, [r2, #5]
    4544:	e030      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    4546:	2c00      	cmp	r4, #0
    4548:	d017      	beq.n	457a <usb_device_endpoint_set_config+0x1c6>
    454a:	015d      	lsls	r5, r3, #5
    454c:	6802      	ldr	r2, [r0, #0]
    454e:	4694      	mov	ip, r2
    4550:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4552:	2280      	movs	r2, #128	; 0x80
    4554:	0052      	lsls	r2, r2, #1
    4556:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    4558:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    455a:	2670      	movs	r6, #112	; 0x70
    455c:	4237      	tst	r7, r6
    455e:	d14a      	bne.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4560:	3690      	adds	r6, #144	; 0x90
    4562:	5daf      	ldrb	r7, [r5, r6]
    4564:	3224      	adds	r2, #36	; 0x24
    4566:	433a      	orrs	r2, r7
    4568:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    456a:	6800      	ldr	r0, [r0, #0]
    456c:	1c1a      	adds	r2, r3, #0
    456e:	3208      	adds	r2, #8
    4570:	0152      	lsls	r2, r2, #5
    4572:	1882      	adds	r2, r0, r2
    4574:	2080      	movs	r0, #128	; 0x80
    4576:	7110      	strb	r0, [r2, #4]
    4578:	e016      	b.n	45a8 <usb_device_endpoint_set_config+0x1f4>
    457a:	015d      	lsls	r5, r3, #5
    457c:	6802      	ldr	r2, [r0, #0]
    457e:	4694      	mov	ip, r2
    4580:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4582:	2280      	movs	r2, #128	; 0x80
    4584:	0052      	lsls	r2, r2, #1
    4586:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4588:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    458a:	0776      	lsls	r6, r6, #29
    458c:	d133      	bne.n	45f6 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    458e:	2680      	movs	r6, #128	; 0x80
    4590:	0076      	lsls	r6, r6, #1
    4592:	5daf      	ldrb	r7, [r5, r6]
    4594:	3a18      	subs	r2, #24
    4596:	433a      	orrs	r2, r7
    4598:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    459a:	6800      	ldr	r0, [r0, #0]
    459c:	1c1a      	adds	r2, r3, #0
    459e:	3208      	adds	r2, #8
    45a0:	0152      	lsls	r2, r2, #5
    45a2:	1882      	adds	r2, r0, r2
    45a4:	2040      	movs	r0, #64	; 0x40
    45a6:	7150      	strb	r0, [r2, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    45a8:	7848      	ldrb	r0, [r1, #1]
    45aa:	005a      	lsls	r2, r3, #1
    45ac:	1912      	adds	r2, r2, r4
    45ae:	0112      	lsls	r2, r2, #4
    45b0:	4d13      	ldr	r5, [pc, #76]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    45b2:	18aa      	adds	r2, r5, r2
    45b4:	2507      	movs	r5, #7
    45b6:	4028      	ands	r0, r5
    45b8:	0705      	lsls	r5, r0, #28
    45ba:	6856      	ldr	r6, [r2, #4]
    45bc:	4811      	ldr	r0, [pc, #68]	; (4604 <usb_device_endpoint_set_config+0x250>)
    45be:	4030      	ands	r0, r6
    45c0:	4328      	orrs	r0, r5
    45c2:	6050      	str	r0, [r2, #4]

	if (true == ep_config->auto_zlp) {
    45c4:	788a      	ldrb	r2, [r1, #2]
    45c6:	2a00      	cmp	r2, #0
    45c8:	d00b      	beq.n	45e2 <usb_device_endpoint_set_config+0x22e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    45ca:	005b      	lsls	r3, r3, #1
    45cc:	191a      	adds	r2, r3, r4
    45ce:	0112      	lsls	r2, r2, #4
    45d0:	4c0b      	ldr	r4, [pc, #44]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    45d2:	18a2      	adds	r2, r4, r2
    45d4:	6853      	ldr	r3, [r2, #4]
    45d6:	2180      	movs	r1, #128	; 0x80
    45d8:	0609      	lsls	r1, r1, #24
    45da:	430b      	orrs	r3, r1
    45dc:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    45de:	2200      	movs	r2, #0
    45e0:	e009      	b.n	45f6 <usb_device_endpoint_set_config+0x242>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    45e2:	005b      	lsls	r3, r3, #1
    45e4:	191b      	adds	r3, r3, r4
    45e6:	011b      	lsls	r3, r3, #4
    45e8:	4a05      	ldr	r2, [pc, #20]	; (4600 <usb_device_endpoint_set_config+0x24c>)
    45ea:	18d3      	adds	r3, r2, r3
    45ec:	685a      	ldr	r2, [r3, #4]
    45ee:	0052      	lsls	r2, r2, #1
    45f0:	0852      	lsrs	r2, r2, #1
    45f2:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    45f4:	2200      	movs	r2, #0
}
    45f6:	1c10      	adds	r0, r2, #0
    45f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	000079c8 	.word	0x000079c8
    4600:	20000578 	.word	0x20000578
    4604:	8fffffff 	.word	0x8fffffff

00004608 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4608:	230f      	movs	r3, #15
    460a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    460c:	b249      	sxtb	r1, r1
    460e:	2900      	cmp	r1, #0
    4610:	da0a      	bge.n	4628 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4612:	3308      	adds	r3, #8
    4614:	015b      	lsls	r3, r3, #5
    4616:	6802      	ldr	r2, [r0, #0]
    4618:	18d2      	adds	r2, r2, r3
    461a:	2180      	movs	r1, #128	; 0x80
    461c:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    461e:	6802      	ldr	r2, [r0, #0]
    4620:	18d3      	adds	r3, r2, r3
    4622:	2202      	movs	r2, #2
    4624:	71da      	strb	r2, [r3, #7]
    4626:	e009      	b.n	463c <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4628:	3308      	adds	r3, #8
    462a:	015b      	lsls	r3, r3, #5
    462c:	6802      	ldr	r2, [r0, #0]
    462e:	18d2      	adds	r2, r2, r3
    4630:	2140      	movs	r1, #64	; 0x40
    4632:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4634:	6802      	ldr	r2, [r0, #0]
    4636:	18d3      	adds	r3, r2, r3
    4638:	2201      	movs	r2, #1
    463a:	71da      	strb	r2, [r3, #7]
	}
}
    463c:	4770      	bx	lr
    463e:	46c0      	nop			; (mov r8, r8)

00004640 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4640:	230f      	movs	r3, #15
    4642:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4644:	b249      	sxtb	r1, r1
    4646:	2900      	cmp	r1, #0
    4648:	da07      	bge.n	465a <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    464a:	6802      	ldr	r2, [r0, #0]
    464c:	3308      	adds	r3, #8
    464e:	015b      	lsls	r3, r3, #5
    4650:	18d3      	adds	r3, r2, r3
    4652:	7998      	ldrb	r0, [r3, #6]
    4654:	0680      	lsls	r0, r0, #26
    4656:	0fc0      	lsrs	r0, r0, #31
    4658:	e006      	b.n	4668 <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    465a:	6802      	ldr	r2, [r0, #0]
    465c:	3308      	adds	r3, #8
    465e:	015b      	lsls	r3, r3, #5
    4660:	18d3      	adds	r3, r2, r3
    4662:	7998      	ldrb	r0, [r3, #6]
    4664:	06c0      	lsls	r0, r0, #27
    4666:	0fc0      	lsrs	r0, r0, #31
	}
}
    4668:	4770      	bx	lr
    466a:	46c0      	nop			; (mov r8, r8)

0000466c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    466c:	230f      	movs	r3, #15
    466e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4670:	b249      	sxtb	r1, r1
    4672:	2900      	cmp	r1, #0
    4674:	da06      	bge.n	4684 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4676:	6802      	ldr	r2, [r0, #0]
    4678:	3308      	adds	r3, #8
    467a:	015b      	lsls	r3, r3, #5
    467c:	18d3      	adds	r3, r2, r3
    467e:	2220      	movs	r2, #32
    4680:	715a      	strb	r2, [r3, #5]
    4682:	e005      	b.n	4690 <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4684:	6802      	ldr	r2, [r0, #0]
    4686:	3308      	adds	r3, #8
    4688:	015b      	lsls	r3, r3, #5
    468a:	18d3      	adds	r3, r2, r3
    468c:	2210      	movs	r2, #16
    468e:	715a      	strb	r2, [r3, #5]
	}
}
    4690:	4770      	bx	lr
    4692:	46c0      	nop			; (mov r8, r8)

00004694 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4694:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4696:	230f      	movs	r3, #15
    4698:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    469a:	b249      	sxtb	r1, r1
    469c:	2900      	cmp	r1, #0
    469e:	da1e      	bge.n	46de <usb_device_endpoint_clear_halt+0x4a>
    46a0:	0159      	lsls	r1, r3, #5
    46a2:	6802      	ldr	r2, [r0, #0]
    46a4:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    46a6:	2483      	movs	r4, #131	; 0x83
    46a8:	0064      	lsls	r4, r4, #1
    46aa:	5d14      	ldrb	r4, [r2, r4]
    46ac:	06a4      	lsls	r4, r4, #26
    46ae:	d534      	bpl.n	471a <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    46b0:	2520      	movs	r5, #32
    46b2:	2482      	movs	r4, #130	; 0x82
    46b4:	0064      	lsls	r4, r4, #1
    46b6:	5515      	strb	r5, [r2, r4]
    46b8:	6802      	ldr	r2, [r0, #0]
    46ba:	4694      	mov	ip, r2
    46bc:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    46be:	2208      	movs	r2, #8
    46c0:	32ff      	adds	r2, #255	; 0xff
    46c2:	5c8a      	ldrb	r2, [r1, r2]
    46c4:	0652      	lsls	r2, r2, #25
    46c6:	d528      	bpl.n	471a <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    46c8:	3cc4      	subs	r4, #196	; 0xc4
    46ca:	2208      	movs	r2, #8
    46cc:	32ff      	adds	r2, #255	; 0xff
    46ce:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    46d0:	6802      	ldr	r2, [r0, #0]
    46d2:	3308      	adds	r3, #8
    46d4:	015b      	lsls	r3, r3, #5
    46d6:	18d3      	adds	r3, r2, r3
    46d8:	2202      	movs	r2, #2
    46da:	711a      	strb	r2, [r3, #4]
    46dc:	e01d      	b.n	471a <usb_device_endpoint_clear_halt+0x86>
    46de:	0159      	lsls	r1, r3, #5
    46e0:	6802      	ldr	r2, [r0, #0]
    46e2:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    46e4:	2483      	movs	r4, #131	; 0x83
    46e6:	0064      	lsls	r4, r4, #1
    46e8:	5d14      	ldrb	r4, [r2, r4]
    46ea:	06e4      	lsls	r4, r4, #27
    46ec:	d515      	bpl.n	471a <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    46ee:	2510      	movs	r5, #16
    46f0:	2482      	movs	r4, #130	; 0x82
    46f2:	0064      	lsls	r4, r4, #1
    46f4:	5515      	strb	r5, [r2, r4]
    46f6:	6802      	ldr	r2, [r0, #0]
    46f8:	4694      	mov	ip, r2
    46fa:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    46fc:	2208      	movs	r2, #8
    46fe:	32ff      	adds	r2, #255	; 0xff
    4700:	5c8a      	ldrb	r2, [r1, r2]
    4702:	0692      	lsls	r2, r2, #26
    4704:	d509      	bpl.n	471a <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4706:	3ce4      	subs	r4, #228	; 0xe4
    4708:	2208      	movs	r2, #8
    470a:	32ff      	adds	r2, #255	; 0xff
    470c:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    470e:	6802      	ldr	r2, [r0, #0]
    4710:	3308      	adds	r3, #8
    4712:	015b      	lsls	r3, r3, #5
    4714:	18d3      	adds	r3, r2, r3
    4716:	2201      	movs	r2, #1
    4718:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    471a:	bd30      	pop	{r4, r5, pc}

0000471c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    471c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    471e:	1c0c      	adds	r4, r1, #0
    4720:	3408      	adds	r4, #8
    4722:	0164      	lsls	r4, r4, #5
    4724:	6805      	ldr	r5, [r0, #0]
    4726:	5d64      	ldrb	r4, [r4, r5]
    4728:	0664      	lsls	r4, r4, #25
    472a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    472c:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    472e:	2c00      	cmp	r4, #0
    4730:	d016      	beq.n	4760 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4732:	014c      	lsls	r4, r1, #5
    4734:	4d0b      	ldr	r5, [pc, #44]	; (4764 <usb_device_endpoint_write_buffer_job+0x48>)
    4736:	192d      	adds	r5, r5, r4
    4738:	1c2c      	adds	r4, r5, #0
    473a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    473c:	696d      	ldr	r5, [r5, #20]
    473e:	4a0a      	ldr	r2, [pc, #40]	; (4768 <usb_device_endpoint_write_buffer_job+0x4c>)
    4740:	402a      	ands	r2, r5
    4742:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4744:	049b      	lsls	r3, r3, #18
    4746:	0c9a      	lsrs	r2, r3, #18
    4748:	6963      	ldr	r3, [r4, #20]
    474a:	0b9b      	lsrs	r3, r3, #14
    474c:	039b      	lsls	r3, r3, #14
    474e:	4313      	orrs	r3, r2
    4750:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4752:	6803      	ldr	r3, [r0, #0]
    4754:	3108      	adds	r1, #8
    4756:	0149      	lsls	r1, r1, #5
    4758:	1859      	adds	r1, r3, r1
    475a:	2380      	movs	r3, #128	; 0x80
    475c:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    475e:	2500      	movs	r5, #0
}
    4760:	1c28      	adds	r0, r5, #0
    4762:	bd30      	pop	{r4, r5, pc}
    4764:	20000578 	.word	0x20000578
    4768:	f0003fff 	.word	0xf0003fff

0000476c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    476c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    476e:	1c0c      	adds	r4, r1, #0
    4770:	3408      	adds	r4, #8
    4772:	0164      	lsls	r4, r4, #5
    4774:	6805      	ldr	r5, [r0, #0]
    4776:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4778:	241c      	movs	r4, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    477a:	076d      	lsls	r5, r5, #29
    477c:	d015      	beq.n	47aa <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    477e:	4d0c      	ldr	r5, [pc, #48]	; (47b0 <usb_device_endpoint_read_buffer_job+0x44>)
    4780:	014c      	lsls	r4, r1, #5
    4782:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4784:	192c      	adds	r4, r5, r4
    4786:	049b      	lsls	r3, r3, #18
    4788:	091a      	lsrs	r2, r3, #4
    478a:	6865      	ldr	r5, [r4, #4]
    478c:	4b09      	ldr	r3, [pc, #36]	; (47b4 <usb_device_endpoint_read_buffer_job+0x48>)
    478e:	402b      	ands	r3, r5
    4790:	4313      	orrs	r3, r2
    4792:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4794:	6863      	ldr	r3, [r4, #4]
    4796:	0b9b      	lsrs	r3, r3, #14
    4798:	039b      	lsls	r3, r3, #14
    479a:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    479c:	6803      	ldr	r3, [r0, #0]
    479e:	3108      	adds	r1, #8
    47a0:	0149      	lsls	r1, r1, #5
    47a2:	1859      	adds	r1, r3, r1
    47a4:	2340      	movs	r3, #64	; 0x40
    47a6:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    47a8:	2400      	movs	r4, #0
}
    47aa:	1c20      	adds	r0, r4, #0
    47ac:	bd30      	pop	{r4, r5, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	20000578 	.word	0x20000578
    47b4:	f0003fff 	.word	0xf0003fff

000047b8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    47b8:	4b09      	ldr	r3, [pc, #36]	; (47e0 <usb_device_endpoint_setup_buffer_job+0x28>)
    47ba:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    47bc:	6859      	ldr	r1, [r3, #4]
    47be:	4a09      	ldr	r2, [pc, #36]	; (47e4 <usb_device_endpoint_setup_buffer_job+0x2c>)
    47c0:	400a      	ands	r2, r1
    47c2:	2180      	movs	r1, #128	; 0x80
    47c4:	0289      	lsls	r1, r1, #10
    47c6:	430a      	orrs	r2, r1
    47c8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    47ca:	685a      	ldr	r2, [r3, #4]
    47cc:	0b92      	lsrs	r2, r2, #14
    47ce:	0392      	lsls	r2, r2, #14
    47d0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    47d2:	6802      	ldr	r2, [r0, #0]
    47d4:	2140      	movs	r1, #64	; 0x40
    47d6:	2382      	movs	r3, #130	; 0x82
    47d8:	005b      	lsls	r3, r3, #1
    47da:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    47dc:	2000      	movs	r0, #0
    47de:	4770      	bx	lr
    47e0:	20000578 	.word	0x20000578
    47e4:	f0003fff 	.word	0xf0003fff

000047e8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    47e8:	6802      	ldr	r2, [r0, #0]
    47ea:	7811      	ldrb	r1, [r2, #0]
    47ec:	2302      	movs	r3, #2
    47ee:	430b      	orrs	r3, r1
    47f0:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    47f2:	6802      	ldr	r2, [r0, #0]
    47f4:	7893      	ldrb	r3, [r2, #2]
    47f6:	2b02      	cmp	r3, #2
    47f8:	d0fc      	beq.n	47f4 <usb_enable+0xc>
}
    47fa:	4770      	bx	lr

000047fc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    47fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    47fe:	465f      	mov	r7, fp
    4800:	4656      	mov	r6, sl
    4802:	464d      	mov	r5, r9
    4804:	4644      	mov	r4, r8
    4806:	b4f0      	push	{r4, r5, r6, r7}
    4808:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    480a:	4bc8      	ldr	r3, [pc, #800]	; (4b2c <USB_Handler+0x330>)
    480c:	681f      	ldr	r7, [r3, #0]
    480e:	683d      	ldr	r5, [r7, #0]
    4810:	782b      	ldrb	r3, [r5, #0]
    4812:	09db      	lsrs	r3, r3, #7
    4814:	d100      	bne.n	4818 <USB_Handler+0x1c>
    4816:	e154      	b.n	4ac2 <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4818:	8c28      	ldrh	r0, [r5, #32]
    481a:	b280      	uxth	r0, r0
    481c:	4bc4      	ldr	r3, [pc, #784]	; (4b30 <USB_Handler+0x334>)
    481e:	4798      	blx	r3
    4820:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    4822:	2c1f      	cmp	r4, #31
    4824:	d900      	bls.n	4828 <USB_Handler+0x2c>
    4826:	e0d2      	b.n	49ce <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4828:	1c03      	adds	r3, r0, #0
    482a:	3308      	adds	r3, #8
    482c:	015b      	lsls	r3, r3, #5
    482e:	18ed      	adds	r5, r5, r3
    4830:	79ed      	ldrb	r5, [r5, #7]
    4832:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4834:	07ab      	lsls	r3, r5, #30
    4836:	d050      	beq.n	48da <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4838:	4abe      	ldr	r2, [pc, #760]	; (4b34 <USB_Handler+0x338>)
    483a:	2301      	movs	r3, #1
    483c:	4083      	lsls	r3, r0
    483e:	6811      	ldr	r1, [r2, #0]
    4840:	4399      	bics	r1, r3
    4842:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4844:	1c03      	adds	r3, r0, #0
    4846:	3308      	adds	r3, #8
    4848:	015b      	lsls	r3, r3, #5
    484a:	683a      	ldr	r2, [r7, #0]
    484c:	4694      	mov	ip, r2
    484e:	4463      	add	r3, ip
    4850:	2203      	movs	r2, #3
    4852:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4854:	183b      	adds	r3, r7, r0
    4856:	33a8      	adds	r3, #168	; 0xa8
    4858:	799b      	ldrb	r3, [r3, #6]
    485a:	07db      	lsls	r3, r3, #31
    485c:	d53d      	bpl.n	48da <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    485e:	4bb6      	ldr	r3, [pc, #728]	; (4b38 <USB_Handler+0x33c>)
    4860:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4862:	683a      	ldr	r2, [r7, #0]
    4864:	1c03      	adds	r3, r0, #0
    4866:	3308      	adds	r3, #8
    4868:	015b      	lsls	r3, r3, #5
    486a:	5c9b      	ldrb	r3, [r3, r2]
    486c:	2203      	movs	r2, #3
    486e:	4013      	ands	r3, r2
    4870:	2b01      	cmp	r3, #1
    4872:	d110      	bne.n	4896 <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4874:	0142      	lsls	r2, r0, #5
    4876:	4bb1      	ldr	r3, [pc, #708]	; (4b3c <USB_Handler+0x340>)
    4878:	189b      	adds	r3, r3, r2
    487a:	685a      	ldr	r2, [r3, #4]
    487c:	0492      	lsls	r2, r2, #18
    487e:	0c92      	lsrs	r2, r2, #18
    4880:	49ad      	ldr	r1, [pc, #692]	; (4b38 <USB_Handler+0x33c>)
    4882:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4884:	685a      	ldr	r2, [r3, #4]
    4886:	0112      	lsls	r2, r2, #4
    4888:	0c92      	lsrs	r2, r2, #18
    488a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    488c:	685a      	ldr	r2, [r3, #4]
    488e:	0b92      	lsrs	r2, r2, #14
    4890:	0392      	lsls	r2, r2, #14
    4892:	605a      	str	r2, [r3, #4]
    4894:	e019      	b.n	48ca <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4896:	0143      	lsls	r3, r0, #5
    4898:	4aa8      	ldr	r2, [pc, #672]	; (4b3c <USB_Handler+0x340>)
    489a:	18d3      	adds	r3, r2, r3
    489c:	685a      	ldr	r2, [r3, #4]
    489e:	0112      	lsls	r2, r2, #4
    48a0:	0c92      	lsrs	r2, r2, #18
    48a2:	48a5      	ldr	r0, [pc, #660]	; (4b38 <USB_Handler+0x33c>)
    48a4:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48a6:	6859      	ldr	r1, [r3, #4]
    48a8:	0489      	lsls	r1, r1, #18
    48aa:	0c89      	lsrs	r1, r1, #18
    48ac:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    48ae:	6858      	ldr	r0, [r3, #4]
    48b0:	49a3      	ldr	r1, [pc, #652]	; (4b40 <USB_Handler+0x344>)
    48b2:	4001      	ands	r1, r0
    48b4:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    48b6:	2a00      	cmp	r2, #0
    48b8:	d107      	bne.n	48ca <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48ba:	0163      	lsls	r3, r4, #5
    48bc:	4a9f      	ldr	r2, [pc, #636]	; (4b3c <USB_Handler+0x340>)
    48be:	18d3      	adds	r3, r2, r3
    48c0:	685b      	ldr	r3, [r3, #4]
    48c2:	049b      	lsls	r3, r3, #18
    48c4:	0c9b      	lsrs	r3, r3, #18
    48c6:	4a9c      	ldr	r2, [pc, #624]	; (4b38 <USB_Handler+0x33c>)
    48c8:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    48ca:	4b98      	ldr	r3, [pc, #608]	; (4b2c <USB_Handler+0x330>)
    48cc:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    48ce:	1ca3      	adds	r3, r4, #2
    48d0:	011b      	lsls	r3, r3, #4
    48d2:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    48d4:	685b      	ldr	r3, [r3, #4]
    48d6:	4998      	ldr	r1, [pc, #608]	; (4b38 <USB_Handler+0x33c>)
    48d8:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    48da:	076b      	lsls	r3, r5, #29
    48dc:	d50e      	bpl.n	48fc <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    48de:	4a95      	ldr	r2, [pc, #596]	; (4b34 <USB_Handler+0x338>)
    48e0:	2301      	movs	r3, #1
    48e2:	40a3      	lsls	r3, r4
    48e4:	6811      	ldr	r1, [r2, #0]
    48e6:	4399      	bics	r1, r3
    48e8:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    48ea:	4b90      	ldr	r3, [pc, #576]	; (4b2c <USB_Handler+0x330>)
    48ec:	681b      	ldr	r3, [r3, #0]
    48ee:	681a      	ldr	r2, [r3, #0]
    48f0:	1c23      	adds	r3, r4, #0
    48f2:	3308      	adds	r3, #8
    48f4:	015b      	lsls	r3, r3, #5
    48f6:	18d3      	adds	r3, r2, r3
    48f8:	2204      	movs	r2, #4
    48fa:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    48fc:	072b      	lsls	r3, r5, #28
    48fe:	d521      	bpl.n	4944 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4900:	4a8c      	ldr	r2, [pc, #560]	; (4b34 <USB_Handler+0x338>)
    4902:	2301      	movs	r3, #1
    4904:	40a3      	lsls	r3, r4
    4906:	6811      	ldr	r1, [r2, #0]
    4908:	4399      	bics	r1, r3
    490a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    490c:	4b87      	ldr	r3, [pc, #540]	; (4b2c <USB_Handler+0x330>)
    490e:	6818      	ldr	r0, [r3, #0]
    4910:	1c23      	adds	r3, r4, #0
    4912:	3308      	adds	r3, #8
    4914:	015b      	lsls	r3, r3, #5
    4916:	6802      	ldr	r2, [r0, #0]
    4918:	4694      	mov	ip, r2
    491a:	4463      	add	r3, ip
    491c:	2208      	movs	r2, #8
    491e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4920:	1903      	adds	r3, r0, r4
    4922:	33a8      	adds	r3, #168	; 0xa8
    4924:	799b      	ldrb	r3, [r3, #6]
    4926:	079b      	lsls	r3, r3, #30
    4928:	d50c      	bpl.n	4944 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    492a:	4983      	ldr	r1, [pc, #524]	; (4b38 <USB_Handler+0x33c>)
    492c:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    492e:	0163      	lsls	r3, r4, #5
    4930:	4a82      	ldr	r2, [pc, #520]	; (4b3c <USB_Handler+0x340>)
    4932:	18d3      	adds	r3, r2, r3
    4934:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    4936:	231f      	movs	r3, #31
    4938:	4013      	ands	r3, r2
    493a:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    493c:	0123      	lsls	r3, r4, #4
    493e:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    4940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4942:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4944:	06eb      	lsls	r3, r5, #27
    4946:	d522      	bpl.n	498e <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4948:	4a7a      	ldr	r2, [pc, #488]	; (4b34 <USB_Handler+0x338>)
    494a:	2301      	movs	r3, #1
    494c:	40a3      	lsls	r3, r4
    494e:	6811      	ldr	r1, [r2, #0]
    4950:	4399      	bics	r1, r3
    4952:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4954:	4b75      	ldr	r3, [pc, #468]	; (4b2c <USB_Handler+0x330>)
    4956:	6818      	ldr	r0, [r3, #0]
    4958:	1c23      	adds	r3, r4, #0
    495a:	3308      	adds	r3, #8
    495c:	015b      	lsls	r3, r3, #5
    495e:	6802      	ldr	r2, [r0, #0]
    4960:	4694      	mov	ip, r2
    4962:	4463      	add	r3, ip
    4964:	2210      	movs	r2, #16
    4966:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4968:	1903      	adds	r3, r0, r4
    496a:	33a8      	adds	r3, #168	; 0xa8
    496c:	799b      	ldrb	r3, [r3, #6]
    496e:	075b      	lsls	r3, r3, #29
    4970:	d50d      	bpl.n	498e <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    4972:	4a71      	ldr	r2, [pc, #452]	; (4b38 <USB_Handler+0x33c>)
    4974:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4976:	0163      	lsls	r3, r4, #5
    4978:	4970      	ldr	r1, [pc, #448]	; (4b3c <USB_Handler+0x340>)
    497a:	18cb      	adds	r3, r1, r3
    497c:	685b      	ldr	r3, [r3, #4]
    497e:	011b      	lsls	r3, r3, #4
    4980:	0c9b      	lsrs	r3, r3, #18
    4982:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4984:	0123      	lsls	r3, r4, #4
    4986:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    4988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    498a:	2100      	movs	r1, #0
    498c:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    498e:	06ab      	lsls	r3, r5, #26
    4990:	d400      	bmi.n	4994 <USB_Handler+0x198>
    4992:	e1f8      	b.n	4d86 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4994:	4a67      	ldr	r2, [pc, #412]	; (4b34 <USB_Handler+0x338>)
    4996:	2301      	movs	r3, #1
    4998:	40a3      	lsls	r3, r4
    499a:	6811      	ldr	r1, [r2, #0]
    499c:	4399      	bics	r1, r3
    499e:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    49a0:	4b62      	ldr	r3, [pc, #392]	; (4b2c <USB_Handler+0x330>)
    49a2:	6818      	ldr	r0, [r3, #0]
    49a4:	1c23      	adds	r3, r4, #0
    49a6:	3308      	adds	r3, #8
    49a8:	015b      	lsls	r3, r3, #5
    49aa:	6802      	ldr	r2, [r0, #0]
    49ac:	4694      	mov	ip, r2
    49ae:	4463      	add	r3, ip
    49b0:	2220      	movs	r2, #32
    49b2:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    49b4:	1903      	adds	r3, r0, r4
    49b6:	33a8      	adds	r3, #168	; 0xa8
    49b8:	799b      	ldrb	r3, [r3, #6]
    49ba:	071b      	lsls	r3, r3, #28
    49bc:	d400      	bmi.n	49c0 <USB_Handler+0x1c4>
    49be:	e1e2      	b.n	4d86 <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    49c0:	495d      	ldr	r1, [pc, #372]	; (4b38 <USB_Handler+0x33c>)
    49c2:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    49c4:	0124      	lsls	r4, r4, #4
    49c6:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    49c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    49ca:	4798      	blx	r3
    49cc:	e1db      	b.n	4d86 <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    49ce:	8bac      	ldrh	r4, [r5, #28]
    49d0:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    49d2:	0763      	lsls	r3, r4, #29
    49d4:	d508      	bpl.n	49e8 <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    49d6:	2304      	movs	r3, #4
    49d8:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    49da:	33a1      	adds	r3, #161	; 0xa1
    49dc:	5cfb      	ldrb	r3, [r7, r3]
    49de:	07db      	lsls	r3, r3, #31
    49e0:	d502      	bpl.n	49e8 <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    49e2:	687b      	ldr	r3, [r7, #4]
    49e4:	1c38      	adds	r0, r7, #0
    49e6:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    49e8:	0723      	lsls	r3, r4, #28
    49ea:	d50d      	bpl.n	4a08 <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    49ec:	2200      	movs	r2, #0
    49ee:	4b51      	ldr	r3, [pc, #324]	; (4b34 <USB_Handler+0x338>)
    49f0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    49f2:	4b4e      	ldr	r3, [pc, #312]	; (4b2c <USB_Handler+0x330>)
    49f4:	6818      	ldr	r0, [r3, #0]
    49f6:	2308      	movs	r3, #8
    49f8:	6802      	ldr	r2, [r0, #0]
    49fa:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    49fc:	339d      	adds	r3, #157	; 0x9d
    49fe:	5cc3      	ldrb	r3, [r0, r3]
    4a00:	079b      	lsls	r3, r3, #30
    4a02:	d501      	bpl.n	4a08 <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4a04:	6883      	ldr	r3, [r0, #8]
    4a06:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4a08:	0663      	lsls	r3, r4, #25
    4a0a:	d50a      	bpl.n	4a22 <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4a0c:	4b47      	ldr	r3, [pc, #284]	; (4b2c <USB_Handler+0x330>)
    4a0e:	6818      	ldr	r0, [r3, #0]
    4a10:	2340      	movs	r3, #64	; 0x40
    4a12:	6802      	ldr	r2, [r0, #0]
    4a14:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4a16:	3365      	adds	r3, #101	; 0x65
    4a18:	5cc3      	ldrb	r3, [r0, r3]
    4a1a:	06db      	lsls	r3, r3, #27
    4a1c:	d501      	bpl.n	4a22 <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4a1e:	6943      	ldr	r3, [r0, #20]
    4a20:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4a22:	06a3      	lsls	r3, r4, #26
    4a24:	d50a      	bpl.n	4a3c <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4a26:	4b41      	ldr	r3, [pc, #260]	; (4b2c <USB_Handler+0x330>)
    4a28:	6818      	ldr	r0, [r3, #0]
    4a2a:	2320      	movs	r3, #32
    4a2c:	6802      	ldr	r2, [r0, #0]
    4a2e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4a30:	3385      	adds	r3, #133	; 0x85
    4a32:	5cc3      	ldrb	r3, [r0, r3]
    4a34:	071b      	lsls	r3, r3, #28
    4a36:	d501      	bpl.n	4a3c <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4a38:	6903      	ldr	r3, [r0, #16]
    4a3a:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4a3c:	06e3      	lsls	r3, r4, #27
    4a3e:	d50a      	bpl.n	4a56 <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4a40:	4b3a      	ldr	r3, [pc, #232]	; (4b2c <USB_Handler+0x330>)
    4a42:	6818      	ldr	r0, [r3, #0]
    4a44:	2310      	movs	r3, #16
    4a46:	6802      	ldr	r2, [r0, #0]
    4a48:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4a4a:	3395      	adds	r3, #149	; 0x95
    4a4c:	5cc3      	ldrb	r3, [r0, r3]
    4a4e:	075b      	lsls	r3, r3, #29
    4a50:	d501      	bpl.n	4a56 <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4a52:	68c3      	ldr	r3, [r0, #12]
    4a54:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4a56:	0623      	lsls	r3, r4, #24
    4a58:	d50d      	bpl.n	4a76 <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4a5a:	2200      	movs	r2, #0
    4a5c:	4b35      	ldr	r3, [pc, #212]	; (4b34 <USB_Handler+0x338>)
    4a5e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4a60:	4b32      	ldr	r3, [pc, #200]	; (4b2c <USB_Handler+0x330>)
    4a62:	6818      	ldr	r0, [r3, #0]
    4a64:	2380      	movs	r3, #128	; 0x80
    4a66:	6802      	ldr	r2, [r0, #0]
    4a68:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4a6a:	3325      	adds	r3, #37	; 0x25
    4a6c:	5cc3      	ldrb	r3, [r0, r3]
    4a6e:	069b      	lsls	r3, r3, #26
    4a70:	d501      	bpl.n	4a76 <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4a72:	6983      	ldr	r3, [r0, #24]
    4a74:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4a76:	05e3      	lsls	r3, r4, #23
    4a78:	d50e      	bpl.n	4a98 <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4a7a:	2200      	movs	r2, #0
    4a7c:	4b2d      	ldr	r3, [pc, #180]	; (4b34 <USB_Handler+0x338>)
    4a7e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4a80:	4b2a      	ldr	r3, [pc, #168]	; (4b2c <USB_Handler+0x330>)
    4a82:	6818      	ldr	r0, [r3, #0]
    4a84:	2380      	movs	r3, #128	; 0x80
    4a86:	005b      	lsls	r3, r3, #1
    4a88:	6802      	ldr	r2, [r0, #0]
    4a8a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4a8c:	3b5b      	subs	r3, #91	; 0x5b
    4a8e:	5cc3      	ldrb	r3, [r0, r3]
    4a90:	065b      	lsls	r3, r3, #25
    4a92:	d501      	bpl.n	4a98 <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4a94:	69c3      	ldr	r3, [r0, #28]
    4a96:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4a98:	05a3      	lsls	r3, r4, #22
    4a9a:	d400      	bmi.n	4a9e <USB_Handler+0x2a2>
    4a9c:	e173      	b.n	4d86 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    4a9e:	2200      	movs	r2, #0
    4aa0:	4b24      	ldr	r3, [pc, #144]	; (4b34 <USB_Handler+0x338>)
    4aa2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4aa4:	4b21      	ldr	r3, [pc, #132]	; (4b2c <USB_Handler+0x330>)
    4aa6:	6818      	ldr	r0, [r3, #0]
    4aa8:	2380      	movs	r3, #128	; 0x80
    4aaa:	009b      	lsls	r3, r3, #2
    4aac:	6802      	ldr	r2, [r0, #0]
    4aae:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4ab0:	3b5c      	subs	r3, #92	; 0x5c
    4ab2:	3bff      	subs	r3, #255	; 0xff
    4ab4:	5cc3      	ldrb	r3, [r0, r3]
    4ab6:	2b7f      	cmp	r3, #127	; 0x7f
    4ab8:	d800      	bhi.n	4abc <USB_Handler+0x2c0>
    4aba:	e164      	b.n	4d86 <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4abc:	6a03      	ldr	r3, [r0, #32]
    4abe:	4798      	blx	r3
    4ac0:	e161      	b.n	4d86 <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4ac2:	8c2e      	ldrh	r6, [r5, #32]
    4ac4:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    4ac6:	2e00      	cmp	r6, #0
    4ac8:	d140      	bne.n	4b4c <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4aca:	8bae      	ldrh	r6, [r5, #28]
    4acc:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    4ace:	23ab      	movs	r3, #171	; 0xab
    4ad0:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4ad2:	5afd      	ldrh	r5, [r7, r3]
    4ad4:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    4ad6:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4ad8:	5afb      	ldrh	r3, [r7, r3]
    4ada:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4adc:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    4ade:	4f19      	ldr	r7, [pc, #100]	; (4b44 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4ae0:	4b12      	ldr	r3, [pc, #72]	; (4b2c <USB_Handler+0x330>)
    4ae2:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4ae4:	4698      	mov	r8, r3
    4ae6:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    4ae8:	5bdb      	ldrh	r3, [r3, r7]
    4aea:	421e      	tst	r6, r3
    4aec:	d003      	beq.n	4af6 <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4aee:	464a      	mov	r2, r9
    4af0:	6812      	ldr	r2, [r2, #0]
    4af2:	6812      	ldr	r2, [r2, #0]
    4af4:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    4af6:	421d      	tst	r5, r3
    4af8:	d013      	beq.n	4b22 <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4afa:	2c06      	cmp	r4, #6
    4afc:	d107      	bne.n	4b0e <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4afe:	4b0f      	ldr	r3, [pc, #60]	; (4b3c <USB_Handler+0x340>)
    4b00:	891b      	ldrh	r3, [r3, #8]
    4b02:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    4b04:	2380      	movs	r3, #128	; 0x80
    4b06:	005b      	lsls	r3, r3, #1
    4b08:	4013      	ands	r3, r2
    4b0a:	4a0f      	ldr	r2, [pc, #60]	; (4b48 <USB_Handler+0x34c>)
    4b0c:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4b0e:	1c23      	adds	r3, r4, #0
    4b10:	332e      	adds	r3, #46	; 0x2e
    4b12:	009b      	lsls	r3, r3, #2
    4b14:	4642      	mov	r2, r8
    4b16:	6812      	ldr	r2, [r2, #0]
    4b18:	589b      	ldr	r3, [r3, r2]
    4b1a:	4642      	mov	r2, r8
    4b1c:	6810      	ldr	r0, [r2, #0]
    4b1e:	490a      	ldr	r1, [pc, #40]	; (4b48 <USB_Handler+0x34c>)
    4b20:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4b22:	3401      	adds	r4, #1
    4b24:	2c07      	cmp	r4, #7
    4b26:	d1de      	bne.n	4ae6 <USB_Handler+0x2ea>
    4b28:	e12d      	b.n	4d86 <USB_Handler+0x58a>
    4b2a:	46c0      	nop			; (mov r8, r8)
    4b2c:	20000218 	.word	0x20000218
    4b30:	00005905 	.word	0x00005905
    4b34:	2000020c 	.word	0x2000020c
    4b38:	20000204 	.word	0x20000204
    4b3c:	20000578 	.word	0x20000578
    4b40:	f0003fff 	.word	0xf0003fff
    4b44:	000079dc 	.word	0x000079dc
    4b48:	20000200 	.word	0x20000200
    4b4c:	1c3c      	adds	r4, r7, #0
    4b4e:	3459      	adds	r4, #89	; 0x59
    4b50:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    4b52:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    4b54:	2201      	movs	r2, #1
    4b56:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4b58:	325f      	adds	r2, #95	; 0x5f
    4b5a:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4b5c:	3a50      	subs	r2, #80	; 0x50
    4b5e:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4b60:	3a0d      	subs	r2, #13
    4b62:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4b64:	46b8      	mov	r8, r7
    4b66:	1c2f      	adds	r7, r5, #0
    4b68:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    4b6a:	9301      	str	r3, [sp, #4]
    4b6c:	1c32      	adds	r2, r6, #0
    4b6e:	411a      	asrs	r2, r3
    4b70:	4661      	mov	r1, ip
    4b72:	4211      	tst	r1, r2
    4b74:	d100      	bne.n	4b78 <USB_Handler+0x37c>
    4b76:	e101      	b.n	4d7c <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4b78:	1c1a      	adds	r2, r3, #0
    4b7a:	3208      	adds	r2, #8
    4b7c:	0152      	lsls	r2, r2, #5
    4b7e:	18ba      	adds	r2, r7, r2
    4b80:	79d2      	ldrb	r2, [r2, #7]
    4b82:	b2d2      	uxtb	r2, r2
    4b84:	7a21      	ldrb	r1, [r4, #8]
    4b86:	7825      	ldrb	r5, [r4, #0]
    4b88:	4029      	ands	r1, r5
				flags_run = flags &
    4b8a:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4b8c:	464d      	mov	r5, r9
    4b8e:	4215      	tst	r5, r2
    4b90:	d02a      	beq.n	4be8 <USB_Handler+0x3ec>
    4b92:	1c3d      	adds	r5, r7, #0
    4b94:	4647      	mov	r7, r8
    4b96:	015b      	lsls	r3, r3, #5
    4b98:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4b9a:	2308      	movs	r3, #8
    4b9c:	33ff      	adds	r3, #255	; 0xff
    4b9e:	5ceb      	ldrb	r3, [r5, r3]
    4ba0:	065b      	lsls	r3, r3, #25
    4ba2:	d509      	bpl.n	4bb8 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4ba4:	2240      	movs	r2, #64	; 0x40
    4ba6:	2308      	movs	r3, #8
    4ba8:	33ff      	adds	r3, #255	; 0xff
    4baa:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4bac:	3b88      	subs	r3, #136	; 0x88
    4bae:	3bff      	subs	r3, #255	; 0xff
    4bb0:	4303      	orrs	r3, r0
    4bb2:	4a78      	ldr	r2, [pc, #480]	; (4d94 <USB_Handler+0x598>)
    4bb4:	7193      	strb	r3, [r2, #6]
    4bb6:	e00a      	b.n	4bce <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4bb8:	2308      	movs	r3, #8
    4bba:	33ff      	adds	r3, #255	; 0xff
    4bbc:	5ceb      	ldrb	r3, [r5, r3]
    4bbe:	069b      	lsls	r3, r3, #26
    4bc0:	d505      	bpl.n	4bce <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4bc2:	2220      	movs	r2, #32
    4bc4:	2308      	movs	r3, #8
    4bc6:	33ff      	adds	r3, #255	; 0xff
    4bc8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bca:	4b72      	ldr	r3, [pc, #456]	; (4d94 <USB_Handler+0x598>)
    4bcc:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4bce:	2360      	movs	r3, #96	; 0x60
    4bd0:	420b      	tst	r3, r1
    4bd2:	d100      	bne.n	4bd6 <USB_Handler+0x3da>
    4bd4:	e0d7      	b.n	4d86 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4bd6:	9b01      	ldr	r3, [sp, #4]
    4bd8:	011b      	lsls	r3, r3, #4
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	33dc      	adds	r3, #220	; 0xdc
    4bde:	685b      	ldr	r3, [r3, #4]
    4be0:	1c38      	adds	r0, r7, #0
    4be2:	496c      	ldr	r1, [pc, #432]	; (4d94 <USB_Handler+0x598>)
    4be4:	4798      	blx	r3
    4be6:	e0ce      	b.n	4d86 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4be8:	4655      	mov	r5, sl
    4bea:	4215      	tst	r5, r2
    4bec:	d01f      	beq.n	4c2e <USB_Handler+0x432>
    4bee:	1c3d      	adds	r5, r7, #0
    4bf0:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4bf2:	9a01      	ldr	r2, [sp, #4]
    4bf4:	1c13      	adds	r3, r2, #0
    4bf6:	3308      	adds	r3, #8
    4bf8:	015b      	lsls	r3, r3, #5
    4bfa:	18ed      	adds	r5, r5, r3
    4bfc:	2310      	movs	r3, #16
    4bfe:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4c00:	18bb      	adds	r3, r7, r2
    4c02:	3361      	adds	r3, #97	; 0x61
    4c04:	33ff      	adds	r3, #255	; 0xff
    4c06:	781b      	ldrb	r3, [r3, #0]
    4c08:	06db      	lsls	r3, r3, #27
    4c0a:	d400      	bmi.n	4c0e <USB_Handler+0x412>
    4c0c:	e0bb      	b.n	4d86 <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4c0e:	1c10      	adds	r0, r2, #0
    4c10:	0153      	lsls	r3, r2, #5
    4c12:	4a61      	ldr	r2, [pc, #388]	; (4d98 <USB_Handler+0x59c>)
    4c14:	18d3      	adds	r3, r2, r3
    4c16:	685b      	ldr	r3, [r3, #4]
    4c18:	049b      	lsls	r3, r3, #18
    4c1a:	0c9b      	lsrs	r3, r3, #18
    4c1c:	495d      	ldr	r1, [pc, #372]	; (4d94 <USB_Handler+0x598>)
    4c1e:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4c20:	0103      	lsls	r3, r0, #4
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	33d8      	adds	r3, #216	; 0xd8
    4c26:	685b      	ldr	r3, [r3, #4]
    4c28:	4640      	mov	r0, r8
    4c2a:	4798      	blx	r3
    4c2c:	e0ab      	b.n	4d86 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4c2e:	465d      	mov	r5, fp
    4c30:	4215      	tst	r5, r2
    4c32:	d040      	beq.n	4cb6 <USB_Handler+0x4ba>
    4c34:	1c3d      	adds	r5, r7, #0
    4c36:	4647      	mov	r7, r8
    4c38:	4680      	mov	r8, r0
    4c3a:	9b01      	ldr	r3, [sp, #4]
    4c3c:	015b      	lsls	r3, r3, #5
    4c3e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4c40:	2308      	movs	r3, #8
    4c42:	33ff      	adds	r3, #255	; 0xff
    4c44:	5ceb      	ldrb	r3, [r5, r3]
    4c46:	079b      	lsls	r3, r3, #30
    4c48:	d512      	bpl.n	4c70 <USB_Handler+0x474>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4c4a:	2202      	movs	r2, #2
    4c4c:	2308      	movs	r3, #8
    4c4e:	33ff      	adds	r3, #255	; 0xff
    4c50:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4c52:	4a50      	ldr	r2, [pc, #320]	; (4d94 <USB_Handler+0x598>)
    4c54:	3b88      	subs	r3, #136	; 0x88
    4c56:	3bff      	subs	r3, #255	; 0xff
    4c58:	4303      	orrs	r3, r0
    4c5a:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4c5c:	9b01      	ldr	r3, [sp, #4]
    4c5e:	015b      	lsls	r3, r3, #5
    4c60:	484d      	ldr	r0, [pc, #308]	; (4d98 <USB_Handler+0x59c>)
    4c62:	18c3      	adds	r3, r0, r3
    4c64:	3310      	adds	r3, #16
    4c66:	685b      	ldr	r3, [r3, #4]
    4c68:	049b      	lsls	r3, r3, #18
    4c6a:	0c9b      	lsrs	r3, r3, #18
    4c6c:	8053      	strh	r3, [r2, #2]
    4c6e:	e017      	b.n	4ca0 <USB_Handler+0x4a4>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4c70:	2308      	movs	r3, #8
    4c72:	33ff      	adds	r3, #255	; 0xff
    4c74:	5ceb      	ldrb	r3, [r5, r3]
    4c76:	07db      	lsls	r3, r3, #31
    4c78:	d512      	bpl.n	4ca0 <USB_Handler+0x4a4>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4c7a:	2201      	movs	r2, #1
    4c7c:	2308      	movs	r3, #8
    4c7e:	33ff      	adds	r3, #255	; 0xff
    4c80:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4c82:	4844      	ldr	r0, [pc, #272]	; (4d94 <USB_Handler+0x598>)
    4c84:	4643      	mov	r3, r8
    4c86:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4c88:	9b01      	ldr	r3, [sp, #4]
    4c8a:	015a      	lsls	r2, r3, #5
    4c8c:	4b42      	ldr	r3, [pc, #264]	; (4d98 <USB_Handler+0x59c>)
    4c8e:	189b      	adds	r3, r3, r2
    4c90:	685a      	ldr	r2, [r3, #4]
    4c92:	0492      	lsls	r2, r2, #18
    4c94:	0c92      	lsrs	r2, r2, #18
    4c96:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4c98:	685b      	ldr	r3, [r3, #4]
    4c9a:	011b      	lsls	r3, r3, #4
    4c9c:	0c9b      	lsrs	r3, r3, #18
    4c9e:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4ca0:	078b      	lsls	r3, r1, #30
    4ca2:	d070      	beq.n	4d86 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4ca4:	9b01      	ldr	r3, [sp, #4]
    4ca6:	330d      	adds	r3, #13
    4ca8:	011b      	lsls	r3, r3, #4
    4caa:	18fb      	adds	r3, r7, r3
    4cac:	685b      	ldr	r3, [r3, #4]
    4cae:	1c38      	adds	r0, r7, #0
    4cb0:	4938      	ldr	r1, [pc, #224]	; (4d94 <USB_Handler+0x598>)
    4cb2:	4798      	blx	r3
    4cb4:	e067      	b.n	4d86 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4cb6:	250c      	movs	r5, #12
    4cb8:	4215      	tst	r5, r2
    4cba:	d05f      	beq.n	4d7c <USB_Handler+0x580>
    4cbc:	1c3d      	adds	r5, r7, #0
    4cbe:	4647      	mov	r7, r8
    4cc0:	4680      	mov	r8, r0
    4cc2:	9b01      	ldr	r3, [sp, #4]
    4cc4:	015b      	lsls	r3, r3, #5
    4cc6:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4cc8:	2308      	movs	r3, #8
    4cca:	33ff      	adds	r3, #255	; 0xff
    4ccc:	5ceb      	ldrb	r3, [r5, r3]
    4cce:	071b      	lsls	r3, r3, #28
    4cd0:	d523      	bpl.n	4d1a <USB_Handler+0x51e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4cd2:	2208      	movs	r2, #8
    4cd4:	2308      	movs	r3, #8
    4cd6:	33ff      	adds	r3, #255	; 0xff
    4cd8:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4cda:	9b01      	ldr	r3, [sp, #4]
    4cdc:	015b      	lsls	r3, r3, #5
    4cde:	4a2e      	ldr	r2, [pc, #184]	; (4d98 <USB_Handler+0x59c>)
    4ce0:	18d3      	adds	r3, r2, r3
    4ce2:	3318      	adds	r3, #24
    4ce4:	789b      	ldrb	r3, [r3, #2]
    4ce6:	079b      	lsls	r3, r3, #30
    4ce8:	d507      	bpl.n	4cfa <USB_Handler+0x4fe>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	015a      	lsls	r2, r3, #5
    4cee:	4b2a      	ldr	r3, [pc, #168]	; (4d98 <USB_Handler+0x59c>)
    4cf0:	189b      	adds	r3, r3, r2
    4cf2:	7e9a      	ldrb	r2, [r3, #26]
    4cf4:	2002      	movs	r0, #2
    4cf6:	4382      	bics	r2, r0
    4cf8:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4cfa:	2380      	movs	r3, #128	; 0x80
    4cfc:	425b      	negs	r3, r3
    4cfe:	4642      	mov	r2, r8
    4d00:	4313      	orrs	r3, r2
    4d02:	4a24      	ldr	r2, [pc, #144]	; (4d94 <USB_Handler+0x598>)
    4d04:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4d06:	9b01      	ldr	r3, [sp, #4]
    4d08:	3308      	adds	r3, #8
    4d0a:	015b      	lsls	r3, r3, #5
    4d0c:	683a      	ldr	r2, [r7, #0]
    4d0e:	4694      	mov	ip, r2
    4d10:	4463      	add	r3, ip
    4d12:	79db      	ldrb	r3, [r3, #7]
    4d14:	079b      	lsls	r3, r3, #30
    4d16:	d525      	bpl.n	4d64 <USB_Handler+0x568>
    4d18:	e035      	b.n	4d86 <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4d1a:	2308      	movs	r3, #8
    4d1c:	33ff      	adds	r3, #255	; 0xff
    4d1e:	5ceb      	ldrb	r3, [r5, r3]
    4d20:	075b      	lsls	r3, r3, #29
    4d22:	d51f      	bpl.n	4d64 <USB_Handler+0x568>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4d24:	2204      	movs	r2, #4
    4d26:	2308      	movs	r3, #8
    4d28:	33ff      	adds	r3, #255	; 0xff
    4d2a:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	015b      	lsls	r3, r3, #5
    4d30:	4a19      	ldr	r2, [pc, #100]	; (4d98 <USB_Handler+0x59c>)
    4d32:	18d3      	adds	r3, r2, r3
    4d34:	3308      	adds	r3, #8
    4d36:	789b      	ldrb	r3, [r3, #2]
    4d38:	079b      	lsls	r3, r3, #30
    4d3a:	d507      	bpl.n	4d4c <USB_Handler+0x550>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4d3c:	9b01      	ldr	r3, [sp, #4]
    4d3e:	015a      	lsls	r2, r3, #5
    4d40:	4b15      	ldr	r3, [pc, #84]	; (4d98 <USB_Handler+0x59c>)
    4d42:	189b      	adds	r3, r3, r2
    4d44:	7a9a      	ldrb	r2, [r3, #10]
    4d46:	2002      	movs	r0, #2
    4d48:	4382      	bics	r2, r0
    4d4a:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4d4c:	4b11      	ldr	r3, [pc, #68]	; (4d94 <USB_Handler+0x598>)
    4d4e:	4642      	mov	r2, r8
    4d50:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d52:	9b01      	ldr	r3, [sp, #4]
    4d54:	3308      	adds	r3, #8
    4d56:	015b      	lsls	r3, r3, #5
    4d58:	683a      	ldr	r2, [r7, #0]
    4d5a:	4694      	mov	ip, r2
    4d5c:	4463      	add	r3, ip
    4d5e:	79db      	ldrb	r3, [r3, #7]
    4d60:	07db      	lsls	r3, r3, #31
    4d62:	d410      	bmi.n	4d86 <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4d64:	230c      	movs	r3, #12
    4d66:	420b      	tst	r3, r1
    4d68:	d00d      	beq.n	4d86 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	011b      	lsls	r3, r3, #4
    4d6e:	18fb      	adds	r3, r7, r3
    4d70:	33d4      	adds	r3, #212	; 0xd4
    4d72:	685b      	ldr	r3, [r3, #4]
    4d74:	1c38      	adds	r0, r7, #0
    4d76:	4907      	ldr	r1, [pc, #28]	; (4d94 <USB_Handler+0x598>)
    4d78:	4798      	blx	r3
    4d7a:	e004      	b.n	4d86 <USB_Handler+0x58a>
    4d7c:	3301      	adds	r3, #1
    4d7e:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4d80:	2b08      	cmp	r3, #8
    4d82:	d000      	beq.n	4d86 <USB_Handler+0x58a>
    4d84:	e6f0      	b.n	4b68 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4d86:	b003      	add	sp, #12
    4d88:	bc3c      	pop	{r2, r3, r4, r5}
    4d8a:	4690      	mov	r8, r2
    4d8c:	4699      	mov	r9, r3
    4d8e:	46a2      	mov	sl, r4
    4d90:	46ab      	mov	fp, r5
    4d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d94:	20000210 	.word	0x20000210
    4d98:	20000578 	.word	0x20000578

00004d9c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4d9c:	2200      	movs	r2, #0
    4d9e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4da0:	2301      	movs	r3, #1
    4da2:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4da4:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4da6:	70c3      	strb	r3, [r0, #3]
}
    4da8:	4770      	bx	lr
    4daa:	46c0      	nop			; (mov r8, r8)

00004dac <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dae:	464f      	mov	r7, r9
    4db0:	4646      	mov	r6, r8
    4db2:	b4c0      	push	{r6, r7}
    4db4:	b083      	sub	sp, #12
    4db6:	1c04      	adds	r4, r0, #0
    4db8:	1c0d      	adds	r5, r1, #0
    4dba:	1c16      	adds	r6, r2, #0
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4dbc:	2300      	movs	r3, #0
    4dbe:	4a6c      	ldr	r2, [pc, #432]	; (4f70 <usb_init+0x1c4>)
    4dc0:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4dc2:	4a6c      	ldr	r2, [pc, #432]	; (4f74 <usb_init+0x1c8>)
    4dc4:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4dc6:	6021      	str	r1, [r4, #0]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4dc8:	496b      	ldr	r1, [pc, #428]	; (4f78 <usb_init+0x1cc>)
    4dca:	69c8      	ldr	r0, [r1, #28]
    4dcc:	2220      	movs	r2, #32
    4dce:	4302      	orrs	r2, r0
    4dd0:	61ca      	str	r2, [r1, #28]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4dd2:	af01      	add	r7, sp, #4
    4dd4:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4dd6:	2201      	movs	r2, #1
    4dd8:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4dda:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4ddc:	3306      	adds	r3, #6
    4dde:	4699      	mov	r9, r3
    4de0:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4de2:	2018      	movs	r0, #24
    4de4:	1c39      	adds	r1, r7, #0
    4de6:	4b65      	ldr	r3, [pc, #404]	; (4f7c <usb_init+0x1d0>)
    4de8:	4698      	mov	r8, r3
    4dea:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4dec:	464b      	mov	r3, r9
    4dee:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4df0:	2019      	movs	r0, #25
    4df2:	1c39      	adds	r1, r7, #0
    4df4:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4df6:	78b3      	ldrb	r3, [r6, #2]
    4df8:	466a      	mov	r2, sp
    4dfa:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4dfc:	2006      	movs	r0, #6
    4dfe:	4669      	mov	r1, sp
    4e00:	4b5f      	ldr	r3, [pc, #380]	; (4f80 <usb_init+0x1d4>)
    4e02:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4e04:	2006      	movs	r0, #6
    4e06:	4b5f      	ldr	r3, [pc, #380]	; (4f84 <usb_init+0x1d8>)
    4e08:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4e0a:	782a      	ldrb	r2, [r5, #0]
    4e0c:	2301      	movs	r3, #1
    4e0e:	4313      	orrs	r3, r2
    4e10:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4e12:	2201      	movs	r2, #1
    4e14:	78ab      	ldrb	r3, [r5, #2]
    4e16:	421a      	tst	r2, r3
    4e18:	d1fc      	bne.n	4e14 <usb_init+0x68>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4e1a:	4b5b      	ldr	r3, [pc, #364]	; (4f88 <usb_init+0x1dc>)
    4e1c:	78da      	ldrb	r2, [r3, #3]
    4e1e:	2103      	movs	r1, #3
    4e20:	438a      	bics	r2, r1
    4e22:	2102      	movs	r1, #2
    4e24:	430a      	orrs	r2, r1
    4e26:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4e28:	78da      	ldrb	r2, [r3, #3]
    4e2a:	210c      	movs	r1, #12
    4e2c:	438a      	bics	r2, r1
    4e2e:	2108      	movs	r1, #8
    4e30:	430a      	orrs	r2, r1
    4e32:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4e34:	4b55      	ldr	r3, [pc, #340]	; (4f8c <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4e36:	681b      	ldr	r3, [r3, #0]
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4e38:	039b      	lsls	r3, r3, #14
    4e3a:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4e3c:	2b1f      	cmp	r3, #31
    4e3e:	d100      	bne.n	4e42 <usb_init+0x96>
		pad_transn = 5;
    4e40:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4e42:	019a      	lsls	r2, r3, #6
    4e44:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    4e46:	4b52      	ldr	r3, [pc, #328]	; (4f90 <usb_init+0x1e4>)
    4e48:	400b      	ands	r3, r1
    4e4a:	4313      	orrs	r3, r2
    4e4c:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4e4e:	4b4f      	ldr	r3, [pc, #316]	; (4f8c <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4e50:	681b      	ldr	r3, [r3, #0]
    4e52:	025b      	lsls	r3, r3, #9
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4e54:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4e56:	2b1f      	cmp	r3, #31
    4e58:	d100      	bne.n	4e5c <usb_init+0xb0>
		pad_transp = 29;
    4e5a:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4e5c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4e5e:	211f      	movs	r1, #31
    4e60:	438a      	bics	r2, r1
    4e62:	4313      	orrs	r3, r2
    4e64:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4e66:	4b49      	ldr	r3, [pc, #292]	; (4f8c <usb_init+0x1e0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4e68:	681b      	ldr	r3, [r3, #0]
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4e6a:	019b      	lsls	r3, r3, #6
    4e6c:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4e6e:	2b07      	cmp	r3, #7
    4e70:	d100      	bne.n	4e74 <usb_init+0xc8>
		pad_trim = 3;
    4e72:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4e74:	031a      	lsls	r2, r3, #12
    4e76:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    4e78:	4b46      	ldr	r3, [pc, #280]	; (4f94 <usb_init+0x1e8>)
    4e7a:	400b      	ands	r3, r1
    4e7c:	4313      	orrs	r3, r2
    4e7e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4e80:	7833      	ldrb	r3, [r6, #0]
    4e82:	01da      	lsls	r2, r3, #7
    4e84:	782b      	ldrb	r3, [r5, #0]
    4e86:	217f      	movs	r1, #127	; 0x7f
    4e88:	400b      	ands	r3, r1
    4e8a:	4313      	orrs	r3, r2
    4e8c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4e8e:	7873      	ldrb	r3, [r6, #1]
    4e90:	2201      	movs	r2, #1
    4e92:	4013      	ands	r3, r2
    4e94:	009a      	lsls	r2, r3, #2
    4e96:	782b      	ldrb	r3, [r5, #0]
    4e98:	397b      	subs	r1, #123	; 0x7b
    4e9a:	438b      	bics	r3, r1
    4e9c:	4313      	orrs	r3, r2
    4e9e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4ea0:	4b3d      	ldr	r3, [pc, #244]	; (4f98 <usb_init+0x1ec>)
    4ea2:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4ea4:	78f3      	ldrb	r3, [r6, #3]
    4ea6:	2b01      	cmp	r3, #1
    4ea8:	d105      	bne.n	4eb6 <usb_init+0x10a>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4eaa:	6822      	ldr	r2, [r4, #0]
    4eac:	8913      	ldrh	r3, [r2, #8]
    4eae:	3108      	adds	r1, #8
    4eb0:	438b      	bics	r3, r1
    4eb2:	8113      	strh	r3, [r2, #8]
    4eb4:	e008      	b.n	4ec8 <usb_init+0x11c>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d106      	bne.n	4ec8 <usb_init+0x11c>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4eba:	6821      	ldr	r1, [r4, #0]
    4ebc:	890b      	ldrh	r3, [r1, #8]
    4ebe:	220c      	movs	r2, #12
    4ec0:	4393      	bics	r3, r2
    4ec2:	2204      	movs	r2, #4
    4ec4:	4313      	orrs	r3, r2
    4ec6:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4ec8:	4833      	ldr	r0, [pc, #204]	; (4f98 <usb_init+0x1ec>)
    4eca:	2100      	movs	r1, #0
    4ecc:	2280      	movs	r2, #128	; 0x80
    4ece:	0052      	lsls	r2, r2, #1
    4ed0:	4b32      	ldr	r3, [pc, #200]	; (4f9c <usb_init+0x1f0>)
    4ed2:	4798      	blx	r3
    4ed4:	1d22      	adds	r2, r4, #4
    4ed6:	1c23      	adds	r3, r4, #0
    4ed8:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4eda:	2100      	movs	r1, #0
    4edc:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4ede:	429a      	cmp	r2, r3
    4ee0:	d1fc      	bne.n	4edc <usb_init+0x130>
    4ee2:	1c21      	adds	r1, r4, #0
    4ee4:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4ee6:	2200      	movs	r2, #0
    4ee8:	601a      	str	r2, [r3, #0]
    4eea:	605a      	str	r2, [r3, #4]
    4eec:	609a      	str	r2, [r3, #8]
    4eee:	60da      	str	r2, [r3, #12]
    4ef0:	3310      	adds	r3, #16
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4ef2:	428b      	cmp	r3, r1
    4ef4:	d1f8      	bne.n	4ee8 <usb_init+0x13c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4ef6:	2300      	movs	r3, #0
    4ef8:	22a4      	movs	r2, #164	; 0xa4
    4efa:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4efc:	3201      	adds	r2, #1
    4efe:	54a3      	strb	r3, [r4, r2]
    4f00:	1c23      	adds	r3, r4, #0
    4f02:	33a6      	adds	r3, #166	; 0xa6
    4f04:	1c21      	adds	r1, r4, #0
    4f06:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4f08:	2200      	movs	r2, #0
    4f0a:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4f0c:	721a      	strb	r2, [r3, #8]
    4f0e:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4f10:	428b      	cmp	r3, r1
    4f12:	d1fa      	bne.n	4f0a <usb_init+0x15e>
    4f14:	1c22      	adds	r2, r4, #0
    4f16:	32b8      	adds	r2, #184	; 0xb8
    4f18:	1c23      	adds	r3, r4, #0
    4f1a:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4f1c:	2100      	movs	r1, #0
    4f1e:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4f20:	429a      	cmp	r2, r3
    4f22:	d1fc      	bne.n	4f1e <usb_init+0x172>
    4f24:	1c21      	adds	r1, r4, #0
    4f26:	3155      	adds	r1, #85	; 0x55
    4f28:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4f2a:	2200      	movs	r2, #0
    4f2c:	601a      	str	r2, [r3, #0]
    4f2e:	605a      	str	r2, [r3, #4]
    4f30:	609a      	str	r2, [r3, #8]
    4f32:	60da      	str	r2, [r3, #12]
    4f34:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    4f36:	428b      	cmp	r3, r1
    4f38:	d1f8      	bne.n	4f2c <usb_init+0x180>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4f3a:	2300      	movs	r3, #0
    4f3c:	22aa      	movs	r2, #170	; 0xaa
    4f3e:	0052      	lsls	r2, r2, #1
    4f40:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4f42:	3202      	adds	r2, #2
    4f44:	52a3      	strh	r3, [r4, r2]
    4f46:	1c23      	adds	r3, r4, #0
    4f48:	3359      	adds	r3, #89	; 0x59
    4f4a:	33ff      	adds	r3, #255	; 0xff
    4f4c:	3461      	adds	r4, #97	; 0x61
    4f4e:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    4f50:	2200      	movs	r2, #0
    4f52:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4f54:	721a      	strb	r2, [r3, #8]
    4f56:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    4f58:	42a3      	cmp	r3, r4
    4f5a:	d1fa      	bne.n	4f52 <usb_init+0x1a6>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4f5c:	2280      	movs	r2, #128	; 0x80
    4f5e:	4b10      	ldr	r3, [pc, #64]	; (4fa0 <usb_init+0x1f4>)
    4f60:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4f62:	2000      	movs	r0, #0
    4f64:	b003      	add	sp, #12
    4f66:	bc0c      	pop	{r2, r3}
    4f68:	4690      	mov	r8, r2
    4f6a:	4699      	mov	r9, r3
    4f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	2000020c 	.word	0x2000020c
    4f74:	20000218 	.word	0x20000218
    4f78:	40000400 	.word	0x40000400
    4f7c:	000029d5 	.word	0x000029d5
    4f80:	000028dd 	.word	0x000028dd
    4f84:	00002851 	.word	0x00002851
    4f88:	41005000 	.word	0x41005000
    4f8c:	00806024 	.word	0x00806024
    4f90:	fffff83f 	.word	0xfffff83f
    4f94:	ffff8fff 	.word	0xffff8fff
    4f98:	20000578 	.word	0x20000578
    4f9c:	000076e7 	.word	0x000076e7
    4fa0:	e000e100 	.word	0xe000e100

00004fa4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    4fa4:	e7fe      	b.n	4fa4 <Dummy_Handler>
    4fa6:	46c0      	nop			; (mov r8, r8)

00004fa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4fa8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    4faa:	4b2e      	ldr	r3, [pc, #184]	; (5064 <Reset_Handler+0xbc>)
    4fac:	4a2e      	ldr	r2, [pc, #184]	; (5068 <Reset_Handler+0xc0>)
    4fae:	429a      	cmp	r2, r3
    4fb0:	d003      	beq.n	4fba <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4fb2:	4b2e      	ldr	r3, [pc, #184]	; (506c <Reset_Handler+0xc4>)
    4fb4:	4a2b      	ldr	r2, [pc, #172]	; (5064 <Reset_Handler+0xbc>)
    4fb6:	429a      	cmp	r2, r3
    4fb8:	d304      	bcc.n	4fc4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4fba:	4b2d      	ldr	r3, [pc, #180]	; (5070 <Reset_Handler+0xc8>)
    4fbc:	4a2d      	ldr	r2, [pc, #180]	; (5074 <Reset_Handler+0xcc>)
    4fbe:	429a      	cmp	r2, r3
    4fc0:	d310      	bcc.n	4fe4 <Reset_Handler+0x3c>
    4fc2:	e01e      	b.n	5002 <Reset_Handler+0x5a>
    4fc4:	4a2c      	ldr	r2, [pc, #176]	; (5078 <Reset_Handler+0xd0>)
    4fc6:	4b29      	ldr	r3, [pc, #164]	; (506c <Reset_Handler+0xc4>)
    4fc8:	3303      	adds	r3, #3
    4fca:	1a9b      	subs	r3, r3, r2
    4fcc:	089b      	lsrs	r3, r3, #2
    4fce:	3301      	adds	r3, #1
    4fd0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4fd2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4fd4:	4823      	ldr	r0, [pc, #140]	; (5064 <Reset_Handler+0xbc>)
    4fd6:	4924      	ldr	r1, [pc, #144]	; (5068 <Reset_Handler+0xc0>)
    4fd8:	588c      	ldr	r4, [r1, r2]
    4fda:	5084      	str	r4, [r0, r2]
    4fdc:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4fde:	429a      	cmp	r2, r3
    4fe0:	d1fa      	bne.n	4fd8 <Reset_Handler+0x30>
    4fe2:	e7ea      	b.n	4fba <Reset_Handler+0x12>
    4fe4:	4a25      	ldr	r2, [pc, #148]	; (507c <Reset_Handler+0xd4>)
    4fe6:	4b22      	ldr	r3, [pc, #136]	; (5070 <Reset_Handler+0xc8>)
    4fe8:	3303      	adds	r3, #3
    4fea:	1a9b      	subs	r3, r3, r2
    4fec:	089b      	lsrs	r3, r3, #2
    4fee:	3301      	adds	r3, #1
    4ff0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4ff2:	2200      	movs	r2, #0
                *pDest++ = 0;
    4ff4:	481f      	ldr	r0, [pc, #124]	; (5074 <Reset_Handler+0xcc>)
    4ff6:	2100      	movs	r1, #0
    4ff8:	1814      	adds	r4, r2, r0
    4ffa:	6021      	str	r1, [r4, #0]
    4ffc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4ffe:	429a      	cmp	r2, r3
    5000:	d1fa      	bne.n	4ff8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5002:	4a1f      	ldr	r2, [pc, #124]	; (5080 <Reset_Handler+0xd8>)
    5004:	21ff      	movs	r1, #255	; 0xff
    5006:	4b1f      	ldr	r3, [pc, #124]	; (5084 <Reset_Handler+0xdc>)
    5008:	438b      	bics	r3, r1
    500a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    500c:	39fd      	subs	r1, #253	; 0xfd
    500e:	2390      	movs	r3, #144	; 0x90
    5010:	005b      	lsls	r3, r3, #1
    5012:	4a1d      	ldr	r2, [pc, #116]	; (5088 <Reset_Handler+0xe0>)
    5014:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5016:	481d      	ldr	r0, [pc, #116]	; (508c <Reset_Handler+0xe4>)
    5018:	78c3      	ldrb	r3, [r0, #3]
    501a:	2403      	movs	r4, #3
    501c:	43a3      	bics	r3, r4
    501e:	2202      	movs	r2, #2
    5020:	4313      	orrs	r3, r2
    5022:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5024:	78c3      	ldrb	r3, [r0, #3]
    5026:	260c      	movs	r6, #12
    5028:	43b3      	bics	r3, r6
    502a:	2108      	movs	r1, #8
    502c:	430b      	orrs	r3, r1
    502e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5030:	4b17      	ldr	r3, [pc, #92]	; (5090 <Reset_Handler+0xe8>)
    5032:	7b98      	ldrb	r0, [r3, #14]
    5034:	2530      	movs	r5, #48	; 0x30
    5036:	43a8      	bics	r0, r5
    5038:	1c05      	adds	r5, r0, #0
    503a:	2020      	movs	r0, #32
    503c:	4328      	orrs	r0, r5
    503e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5040:	7b98      	ldrb	r0, [r3, #14]
    5042:	43b0      	bics	r0, r6
    5044:	4301      	orrs	r1, r0
    5046:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5048:	7b99      	ldrb	r1, [r3, #14]
    504a:	43a1      	bics	r1, r4
    504c:	430a      	orrs	r2, r1
    504e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5050:	4a10      	ldr	r2, [pc, #64]	; (5094 <Reset_Handler+0xec>)
    5052:	6851      	ldr	r1, [r2, #4]
    5054:	2380      	movs	r3, #128	; 0x80
    5056:	430b      	orrs	r3, r1
    5058:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    505a:	4b0f      	ldr	r3, [pc, #60]	; (5098 <Reset_Handler+0xf0>)
    505c:	4798      	blx	r3

        /* Branch to main function */
        main();
    505e:	4b0f      	ldr	r3, [pc, #60]	; (509c <Reset_Handler+0xf4>)
    5060:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5062:	e7fe      	b.n	5062 <Reset_Handler+0xba>
    5064:	20000000 	.word	0x20000000
    5068:	00007b10 	.word	0x00007b10
    506c:	2000010c 	.word	0x2000010c
    5070:	200006a8 	.word	0x200006a8
    5074:	2000010c 	.word	0x2000010c
    5078:	20000004 	.word	0x20000004
    507c:	20000110 	.word	0x20000110
    5080:	e000ed00 	.word	0xe000ed00
    5084:	00000000 	.word	0x00000000
    5088:	41007000 	.word	0x41007000
    508c:	41005000 	.word	0x41005000
    5090:	41004800 	.word	0x41004800
    5094:	41004000 	.word	0x41004000
    5098:	00007689 	.word	0x00007689
    509c:	000054b5 	.word	0x000054b5

000050a0 <configure_adc>:

float VADCR;	   /* Room Temperature ADC voltage - VADCR */
float VADCH;	   /* Hot Temperature ADC voltage - VADCH */

void configure_adc()
{
    50a0:	b510      	push	{r4, lr}
    50a2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    50a4:	4668      	mov	r0, sp
    50a6:	4b14      	ldr	r3, [pc, #80]	; (50f8 <configure_adc+0x58>)
    50a8:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference = ADC_REFERENCE_INTVCC0;
    50aa:	2301      	movs	r3, #1
    50ac:	466a      	mov	r2, sp
    50ae:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    50b0:	2280      	movs	r2, #128	; 0x80
    50b2:	0092      	lsls	r2, r2, #2
    50b4:	4669      	mov	r1, sp
    50b6:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input = LEFT_LIGHT;
    50b8:	3aff      	subs	r2, #255	; 0xff
    50ba:	3aff      	subs	r2, #255	; 0xff
    50bc:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    50be:	22c0      	movs	r2, #192	; 0xc0
    50c0:	0152      	lsls	r2, r2, #5
    50c2:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution = ADC_RESOLUTION_8BIT;
    50c4:	2230      	movs	r2, #48	; 0x30
    50c6:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust = true;
    50c8:	466a      	mov	r2, sp
    50ca:	748b      	strb	r3, [r1, #18]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    50cc:	4c0b      	ldr	r4, [pc, #44]	; (50fc <configure_adc+0x5c>)
    50ce:	1c20      	adds	r0, r4, #0
    50d0:	490b      	ldr	r1, [pc, #44]	; (5100 <configure_adc+0x60>)
    50d2:	4b0c      	ldr	r3, [pc, #48]	; (5104 <configure_adc+0x64>)
    50d4:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    50d6:	6822      	ldr	r2, [r4, #0]
    50d8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    50da:	b25b      	sxtb	r3, r3
    50dc:	2b00      	cmp	r3, #0
    50de:	dbfb      	blt.n	50d8 <configure_adc+0x38>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    50e0:	7811      	ldrb	r1, [r2, #0]
    50e2:	2302      	movs	r3, #2
    50e4:	430b      	orrs	r3, r1
    50e6:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    50e8:	4b04      	ldr	r3, [pc, #16]	; (50fc <configure_adc+0x5c>)
    50ea:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    50ec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    50ee:	b25b      	sxtb	r3, r3
    50f0:	2b00      	cmp	r3, #0
    50f2:	dbfb      	blt.n	50ec <configure_adc+0x4c>
	
	adc_enable(&adc_instance);
}
    50f4:	b00c      	add	sp, #48	; 0x30
    50f6:	bd10      	pop	{r4, pc}
    50f8:	0000151d 	.word	0x0000151d
    50fc:	2000069c 	.word	0x2000069c
    5100:	42004000 	.word	0x42004000
    5104:	00001565 	.word	0x00001565

00005108 <adc_start_read_result>:


uint8_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    5108:	b530      	push	{r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    510a:	4b29      	ldr	r3, [pc, #164]	; (51b0 <adc_start_read_result+0xa8>)
    510c:	6819      	ldr	r1, [r3, #0]
    510e:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    5110:	b25b      	sxtb	r3, r3
    5112:	2b00      	cmp	r3, #0
    5114:	dbfb      	blt.n	510e <adc_start_read_result+0x6>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    5116:	690b      	ldr	r3, [r1, #16]
    5118:	221f      	movs	r2, #31
    511a:	4393      	bics	r3, r2
    511c:	4318      	orrs	r0, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
    511e:	6108      	str	r0, [r1, #16]
    5120:	7e4b      	ldrb	r3, [r1, #25]
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
			(positive_input);

	while (adc_is_syncing(module_inst)) {
    5122:	b25b      	sxtb	r3, r3
    5124:	2b00      	cmp	r3, #0
    5126:	dbfb      	blt.n	5120 <adc_start_read_result+0x18>
    5128:	7e4b      	ldrb	r3, [r1, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    512a:	b25b      	sxtb	r3, r3
    512c:	2b00      	cmp	r3, #0
    512e:	dbfb      	blt.n	5128 <adc_start_read_result+0x20>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    5130:	7b0a      	ldrb	r2, [r1, #12]
    5132:	2302      	movs	r3, #2
    5134:	4313      	orrs	r3, r2
    5136:	730b      	strb	r3, [r1, #12]
    5138:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    513a:	b25b      	sxtb	r3, r3
    513c:	2b00      	cmp	r3, #0
    513e:	dbfb      	blt.n	5138 <adc_start_read_result+0x30>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5140:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5142:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5144:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5146:	7e0b      	ldrb	r3, [r1, #24]
    5148:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    514a:	1c02      	adds	r2, r0, #0
    514c:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    514e:	421d      	tst	r5, r3
    5150:	d000      	beq.n	5154 <adc_start_read_result+0x4c>
		status_flags |= ADC_STATUS_WINDOW;
    5152:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5154:	421c      	tst	r4, r3
    5156:	d000      	beq.n	515a <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_OVERRUN;
    5158:	432a      	orrs	r2, r5
	uint16_t adc_result = 0;
	//configure_adc(analogPin);
	adc_set_positive_input(&adc_instance, analogPin);
	
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    515a:	4210      	tst	r0, r2
    515c:	d0f3      	beq.n	5146 <adc_start_read_result+0x3e>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    515e:	7e0a      	ldrb	r2, [r1, #24]
    5160:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5162:	2301      	movs	r3, #1
    5164:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5166:	0750      	lsls	r0, r2, #29
    5168:	d501      	bpl.n	516e <adc_start_read_result+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    516a:	2002      	movs	r0, #2
    516c:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    516e:	0792      	lsls	r2, r2, #30
    5170:	d501      	bpl.n	5176 <adc_start_read_result+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    5172:	2204      	movs	r2, #4
    5174:	4313      	orrs	r3, r2


uint8_t adc_start_read_result(const enum adc_positive_input analogPin)
{

	uint16_t adc_result = 0;
    5176:	2000      	movs	r0, #0
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5178:	07db      	lsls	r3, r3, #31
    517a:	d516      	bpl.n	51aa <adc_start_read_result+0xa2>
    517c:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    517e:	b25b      	sxtb	r3, r3
    5180:	2b00      	cmp	r3, #0
    5182:	dbfb      	blt.n	517c <adc_start_read_result+0x74>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    5184:	8b48      	ldrh	r0, [r1, #26]
    5186:	b280      	uxth	r0, r0
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    5188:	2301      	movs	r3, #1
    518a:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    518c:	7e0a      	ldrb	r2, [r1, #24]
    518e:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5190:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5192:	0754      	lsls	r4, r2, #29
    5194:	d501      	bpl.n	519a <adc_start_read_result+0x92>
		status_flags |= ADC_STATUS_WINDOW;
    5196:	2402      	movs	r4, #2
    5198:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    519a:	0792      	lsls	r2, r2, #30
    519c:	d501      	bpl.n	51a2 <adc_start_read_result+0x9a>
		status_flags |= ADC_STATUS_OVERRUN;
    519e:	2204      	movs	r2, #4
    51a0:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    51a2:	075b      	lsls	r3, r3, #29
    51a4:	d501      	bpl.n	51aa <adc_start_read_result+0xa2>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    51a6:	2302      	movs	r3, #2
    51a8:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
	
	adc_read(&adc_instance, &adc_result);
	
	return adc_result;
    51aa:	b2c0      	uxtb	r0, r0
}
    51ac:	bd30      	pop	{r4, r5, pc}
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	2000069c 	.word	0x2000069c

000051b4 <configure_adc_temp>:
* of Electrical Characteristics.
*
*/

void configure_adc_temp(void)
{
    51b4:	b530      	push	{r4, r5, lr}
    51b6:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    51b8:	4668      	mov	r0, sp
    51ba:	4b14      	ldr	r3, [pc, #80]	; (520c <configure_adc_temp+0x58>)
    51bc:	4798      	blx	r3
	
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    51be:	2380      	movs	r3, #128	; 0x80
    51c0:	009b      	lsls	r3, r3, #2
    51c2:	466a      	mov	r2, sp
    51c4:	8053      	strh	r3, [r2, #2]
	conf_adc.reference = ADC_REFERENCE_INT1V;
    51c6:	2300      	movs	r3, #0
    51c8:	7053      	strb	r3, [r2, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    51ca:	3318      	adds	r3, #24
    51cc:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    51ce:	23c0      	movs	r3, #192	; 0xc0
    51d0:	015b      	lsls	r3, r3, #5
    51d2:	81d3      	strh	r3, [r2, #14]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    51d4:	2304      	movs	r3, #4
    51d6:	75d3      	strb	r3, [r2, #23]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    51d8:	4c0d      	ldr	r4, [pc, #52]	; (5210 <configure_adc_temp+0x5c>)
    51da:	4d0e      	ldr	r5, [pc, #56]	; (5214 <configure_adc_temp+0x60>)
    51dc:	1c20      	adds	r0, r4, #0
    51de:	1c29      	adds	r1, r5, #0
    51e0:	4b0d      	ldr	r3, [pc, #52]	; (5218 <configure_adc_temp+0x64>)
    51e2:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    51e4:	2322      	movs	r3, #34	; 0x22
    51e6:	70ab      	strb	r3, [r5, #2]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    51e8:	6822      	ldr	r2, [r4, #0]
    51ea:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    51ec:	b25b      	sxtb	r3, r3
    51ee:	2b00      	cmp	r3, #0
    51f0:	dbfb      	blt.n	51ea <configure_adc_temp+0x36>
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    51f2:	7811      	ldrb	r1, [r2, #0]
    51f4:	2302      	movs	r3, #2
    51f6:	430b      	orrs	r3, r1
    51f8:	7013      	strb	r3, [r2, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    51fa:	4b05      	ldr	r3, [pc, #20]	; (5210 <configure_adc_temp+0x5c>)
    51fc:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    51fe:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    5200:	b25b      	sxtb	r3, r3
    5202:	2b00      	cmp	r3, #0
    5204:	dbfb      	blt.n	51fe <configure_adc_temp+0x4a>
	
	adc_enable(&adc_instance);
}
    5206:	b00d      	add	sp, #52	; 0x34
    5208:	bd30      	pop	{r4, r5, pc}
    520a:	46c0      	nop			; (mov r8, r8)
    520c:	0000151d 	.word	0x0000151d
    5210:	2000069c 	.word	0x2000069c
    5214:	42004000 	.word	0x42004000
    5218:	00001565 	.word	0x00001565

0000521c <calculate_temperature>:

float calculate_temperature(uint16_t raw_code)
{
    521c:	b5f0      	push	{r4, r5, r6, r7, lr}
    521e:	4657      	mov	r7, sl
    5220:	b480      	push	{r7}
    5222:	b088      	sub	sp, #32
	uint8_t result;
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    5224:	4f2b      	ldr	r7, [pc, #172]	; (52d4 <calculate_temperature+0xb8>)
    5226:	47b8      	blx	r7
    5228:	9001      	str	r0, [sp, #4]
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    522a:	4b2b      	ldr	r3, [pc, #172]	; (52d8 <calculate_temperature+0xbc>)
    522c:	681b      	ldr	r3, [r3, #0]
    522e:	1c1a      	adds	r2, r3, #0
    5230:	4c2a      	ldr	r4, [pc, #168]	; (52dc <calculate_temperature+0xc0>)
    5232:	4b2b      	ldr	r3, [pc, #172]	; (52e0 <calculate_temperature+0xc4>)
    5234:	6818      	ldr	r0, [r3, #0]
    5236:	9200      	str	r2, [sp, #0]
    5238:	1c11      	adds	r1, r2, #0
    523a:	47a0      	blx	r4
    523c:	1c06      	adds	r6, r0, #0
    523e:	4b29      	ldr	r3, [pc, #164]	; (52e4 <calculate_temperature+0xc8>)
    5240:	6819      	ldr	r1, [r3, #0]
    5242:	1c0d      	adds	r5, r1, #0
    5244:	4b28      	ldr	r3, [pc, #160]	; (52e8 <calculate_temperature+0xcc>)
    5246:	6818      	ldr	r0, [r3, #0]
    5248:	47a0      	blx	r4
    524a:	1c01      	adds	r1, r0, #0
    524c:	4b27      	ldr	r3, [pc, #156]	; (52ec <calculate_temperature+0xd0>)
    524e:	469a      	mov	sl, r3
    5250:	9604      	str	r6, [sp, #16]
    5252:	1c30      	adds	r0, r6, #0
    5254:	4798      	blx	r3
    5256:	1c06      	adds	r6, r0, #0
	uint8_t result;
	float VADC;      /* Voltage calculation using ADC result for Coarse Temp calculation */
	float VADCM;     /* Voltage calculation using ADC result for Fine Temp calculation. */
	float INT1VM;    /* Voltage calculation for reality INT1V value during the ADC conversion */
	
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    5258:	9801      	ldr	r0, [sp, #4]
    525a:	4925      	ldr	r1, [pc, #148]	; (52f0 <calculate_temperature+0xd4>)
    525c:	47d0      	blx	sl
	
	/* Coarse Temp Calculation by assume INT1V=1V for this ADC conversion */
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    525e:	9502      	str	r5, [sp, #8]
    5260:	1c29      	adds	r1, r5, #0
    5262:	47a0      	blx	r4
    5264:	1c01      	adds	r1, r0, #0
    5266:	4d23      	ldr	r5, [pc, #140]	; (52f4 <calculate_temperature+0xd8>)
    5268:	9605      	str	r6, [sp, #20]
    526a:	1c30      	adds	r0, r6, #0
    526c:	47a8      	blx	r5
    526e:	1c01      	adds	r1, r0, #0
    5270:	4e21      	ldr	r6, [pc, #132]	; (52f8 <calculate_temperature+0xdc>)
    5272:	9800      	ldr	r0, [sp, #0]
    5274:	47b0      	blx	r6
    5276:	4b21      	ldr	r3, [pc, #132]	; (52fc <calculate_temperature+0xe0>)
    5278:	9006      	str	r0, [sp, #24]
    527a:	6018      	str	r0, [r3, #0]
	
	/* Calculation to find the real INT1V value during the ADC conversion */
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
    527c:	4b20      	ldr	r3, [pc, #128]	; (5300 <calculate_temperature+0xe4>)
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	1c19      	adds	r1, r3, #0
    5282:	4b20      	ldr	r3, [pc, #128]	; (5304 <calculate_temperature+0xe8>)
    5284:	6818      	ldr	r0, [r3, #0]
    5286:	9103      	str	r1, [sp, #12]
    5288:	47a0      	blx	r4
    528a:	9007      	str	r0, [sp, #28]
    528c:	9806      	ldr	r0, [sp, #24]
    528e:	9900      	ldr	r1, [sp, #0]
    5290:	47a0      	blx	r4
    5292:	1c01      	adds	r1, r0, #0
    5294:	9807      	ldr	r0, [sp, #28]
    5296:	47a8      	blx	r5
    5298:	9904      	ldr	r1, [sp, #16]
    529a:	47d0      	blx	sl
    529c:	1c01      	adds	r1, r0, #0
    529e:	9803      	ldr	r0, [sp, #12]
    52a0:	47b0      	blx	r6
    52a2:	1c01      	adds	r1, r0, #0
	
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    52a4:	9801      	ldr	r0, [sp, #4]
    52a6:	47a8      	blx	r5
    52a8:	4911      	ldr	r1, [pc, #68]	; (52f0 <calculate_temperature+0xd4>)
    52aa:	47d0      	blx	sl
	
	/* Fine Temp Calculation by replace INT1V=1V by INT1V = INT1Vm for ADC conversion */
	result = 128 + (tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR)));
    52ac:	9902      	ldr	r1, [sp, #8]
    52ae:	47a0      	blx	r4
    52b0:	1c01      	adds	r1, r0, #0
    52b2:	9805      	ldr	r0, [sp, #20]
    52b4:	47a8      	blx	r5
    52b6:	1c01      	adds	r1, r0, #0
    52b8:	9800      	ldr	r0, [sp, #0]
    52ba:	47b0      	blx	r6
    52bc:	2186      	movs	r1, #134	; 0x86
    52be:	05c9      	lsls	r1, r1, #23
    52c0:	47b0      	blx	r6
    52c2:	4b11      	ldr	r3, [pc, #68]	; (5308 <calculate_temperature+0xec>)
    52c4:	4798      	blx	r3
	
	return result;
    52c6:	b2c0      	uxtb	r0, r0
    52c8:	47b8      	blx	r7
}
    52ca:	b008      	add	sp, #32
    52cc:	bc04      	pop	{r2}
    52ce:	4692      	mov	sl, r2
    52d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d2:	46c0      	nop			; (mov r8, r8)
    52d4:	0000650d 	.word	0x0000650d
    52d8:	20000694 	.word	0x20000694
    52dc:	00006141 	.word	0x00006141
    52e0:	200006a4 	.word	0x200006a4
    52e4:	20000678 	.word	0x20000678
    52e8:	20000698 	.word	0x20000698
    52ec:	00005c6d 	.word	0x00005c6d
    52f0:	457ff000 	.word	0x457ff000
    52f4:	00005edd 	.word	0x00005edd
    52f8:	00005975 	.word	0x00005975
    52fc:	20000684 	.word	0x20000684
    5300:	20000688 	.word	0x20000688
    5304:	2000067c 	.word	0x2000067c
    5308:	00005945 	.word	0x00005945

0000530c <convert_dec_to_frac>:
* \brief Decimal to Fraction Conversation.
* This function converts the decimal value into fractional
* and return the fractional value for temperature calculation
*/
float convert_dec_to_frac(uint8_t val)
{
    530c:	b508      	push	{r3, lr}
	if (val < 10)
    530e:	2809      	cmp	r0, #9
    5310:	d805      	bhi.n	531e <convert_dec_to_frac+0x12>
	{
		return ((float)val/10.0);
    5312:	4b0a      	ldr	r3, [pc, #40]	; (533c <convert_dec_to_frac+0x30>)
    5314:	4798      	blx	r3
    5316:	490a      	ldr	r1, [pc, #40]	; (5340 <convert_dec_to_frac+0x34>)
    5318:	4b0a      	ldr	r3, [pc, #40]	; (5344 <convert_dec_to_frac+0x38>)
    531a:	4798      	blx	r3
    531c:	e00c      	b.n	5338 <convert_dec_to_frac+0x2c>
	}
	
	else if (val <100)
    531e:	2863      	cmp	r0, #99	; 0x63
    5320:	d805      	bhi.n	532e <convert_dec_to_frac+0x22>
	{
		return ((float)val/100.0);
    5322:	4b06      	ldr	r3, [pc, #24]	; (533c <convert_dec_to_frac+0x30>)
    5324:	4798      	blx	r3
    5326:	4908      	ldr	r1, [pc, #32]	; (5348 <convert_dec_to_frac+0x3c>)
    5328:	4b06      	ldr	r3, [pc, #24]	; (5344 <convert_dec_to_frac+0x38>)
    532a:	4798      	blx	r3
    532c:	e004      	b.n	5338 <convert_dec_to_frac+0x2c>
	}
	
	else
	{
		return ((float)val/1000.0);
    532e:	4b03      	ldr	r3, [pc, #12]	; (533c <convert_dec_to_frac+0x30>)
    5330:	4798      	blx	r3
    5332:	4906      	ldr	r1, [pc, #24]	; (534c <convert_dec_to_frac+0x40>)
    5334:	4b03      	ldr	r3, [pc, #12]	; (5344 <convert_dec_to_frac+0x38>)
    5336:	4798      	blx	r3
	}
    5338:	bd08      	pop	{r3, pc}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	0000650d 	.word	0x0000650d
    5340:	41200000 	.word	0x41200000
    5344:	00005c6d 	.word	0x00005c6d
    5348:	42c80000 	.word	0x42c80000
    534c:	447a0000 	.word	0x447a0000

00005350 <load_calibration_data>:
* This function extract the production calibration data information from
* Temperature log row content and store it variables for temperature calculation
*
*/
void load_calibration_data(void)
{
    5350:	b5f0      	push	{r4, r5, r6, r7, lr}
    5352:	465f      	mov	r7, fp
    5354:	4656      	mov	r6, sl
    5356:	464d      	mov	r5, r9
    5358:	4644      	mov	r4, r8
    535a:	b4f0      	push	{r4, r5, r6, r7}
    535c:	b087      	sub	sp, #28
	int8_t room_int1v_val;				/* internal 1V reference drift at room temperature */
	int8_t hot_int1v_val;				/* internal 1V reference drift at hot temperature*/
	
	uint32_t *temp_log_row_ptr = (uint32_t *)NVMCTRL_TEMP_LOG;
	
	val1 = *temp_log_row_ptr;
    535e:	4b3e      	ldr	r3, [pc, #248]	; (5458 <load_calibration_data+0x108>)
    5360:	681b      	ldr	r3, [r3, #0]
    5362:	9305      	str	r3, [sp, #20]
	temp_log_row_ptr++;
	val2 = *temp_log_row_ptr;
    5364:	4b3d      	ldr	r3, [pc, #244]	; (545c <load_calibration_data+0x10c>)
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	9304      	str	r3, [sp, #16]
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
    536a:	9f05      	ldr	r7, [sp, #20]
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    536c:	9805      	ldr	r0, [sp, #20]
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    536e:	9b05      	ldr	r3, [sp, #20]
    5370:	4699      	mov	r9, r3
	
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    5372:	9d05      	ldr	r5, [sp, #20]
	
	room_int1v_val = (int8_t)((val1 & NVMCTRL_FUSES_ROOM_INT1V_VAL_Msk) >> NVMCTRL_FUSES_ROOM_INT1V_VAL_Pos);
    5374:	9b05      	ldr	r3, [sp, #20]
    5376:	9301      	str	r3, [sp, #4]
	
	hot_int1v_val = (int8_t)((val2 & NVMCTRL_FUSES_HOT_INT1V_VAL_Msk) >> NVMCTRL_FUSES_HOT_INT1V_VAL_Pos);
    5378:	9a04      	ldr	r2, [sp, #16]
    537a:	9202      	str	r2, [sp, #8]
	
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
    537c:	9c04      	ldr	r4, [sp, #16]
    537e:	0324      	lsls	r4, r4, #12
    5380:	0d24      	lsrs	r4, r4, #20
    5382:	4b37      	ldr	r3, [pc, #220]	; (5460 <load_calibration_data+0x110>)
    5384:	801c      	strh	r4, [r3, #0]
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
    5386:	9e04      	ldr	r6, [sp, #16]
    5388:	0d36      	lsrs	r6, r6, #20
    538a:	4b36      	ldr	r3, [pc, #216]	; (5464 <load_calibration_data+0x114>)
    538c:	801e      	strh	r6, [r3, #0]
	temp_log_row_ptr++;
	val2 = *temp_log_row_ptr;
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
    538e:	0500      	lsls	r0, r0, #20
	
	ADCR = (uint16_t)((val2 & NVMCTRL_FUSES_ROOM_ADC_VAL_Msk) >> NVMCTRL_FUSES_ROOM_ADC_VAL_Pos);
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
    5390:	0f00      	lsrs	r0, r0, #28
    5392:	4935      	ldr	r1, [pc, #212]	; (5468 <load_calibration_data+0x118>)
    5394:	468b      	mov	fp, r1
    5396:	4788      	blx	r1
    5398:	9003      	str	r0, [sp, #12]
    539a:	22ff      	movs	r2, #255	; 0xff
    539c:	4690      	mov	r8, r2
    539e:	1c13      	adds	r3, r2, #0
    53a0:	403b      	ands	r3, r7
    53a2:	1c18      	adds	r0, r3, #0
    53a4:	4f31      	ldr	r7, [pc, #196]	; (546c <load_calibration_data+0x11c>)
    53a6:	47b8      	blx	r7
    53a8:	4a31      	ldr	r2, [pc, #196]	; (5470 <load_calibration_data+0x120>)
    53aa:	4692      	mov	sl, r2
    53ac:	9903      	ldr	r1, [sp, #12]
    53ae:	4790      	blx	r2
    53b0:	4b30      	ldr	r3, [pc, #192]	; (5474 <load_calibration_data+0x124>)
    53b2:	6018      	str	r0, [r3, #0]
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
	
	hot_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_DEC_Pos);
    53b4:	0228      	lsls	r0, r5, #8
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    53b6:	0f00      	lsrs	r0, r0, #28
    53b8:	47d8      	blx	fp
    53ba:	1c05      	adds	r5, r0, #0
	
	room_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Msk) >> NVMCTRL_FUSES_ROOM_TEMP_VAL_DEC_Pos);
	
	hot_temp_val_int = (uint8_t)((val1 & NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Msk) >> NVMCTRL_FUSES_HOT_TEMP_VAL_INT_Pos);
    53bc:	4649      	mov	r1, r9
    53be:	0b08      	lsrs	r0, r1, #12
    53c0:	4641      	mov	r1, r8
    53c2:	4008      	ands	r0, r1
	
	ADCH = (uint16_t)((val2 & NVMCTRL_FUSES_HOT_ADC_VAL_Msk) >> NVMCTRL_FUSES_HOT_ADC_VAL_Pos);
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    53c4:	47b8      	blx	r7
    53c6:	1c29      	adds	r1, r5, #0
    53c8:	47d0      	blx	sl
    53ca:	4b2b      	ldr	r3, [pc, #172]	; (5478 <load_calibration_data+0x128>)
    53cc:	6018      	str	r0, [r3, #0]
	
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
    53ce:	9b01      	ldr	r3, [sp, #4]
    53d0:	1618      	asrs	r0, r3, #24
    53d2:	47b8      	blx	r7
    53d4:	4b29      	ldr	r3, [pc, #164]	; (547c <load_calibration_data+0x12c>)
    53d6:	469b      	mov	fp, r3
    53d8:	4798      	blx	r3
    53da:	4b29      	ldr	r3, [pc, #164]	; (5480 <load_calibration_data+0x130>)
    53dc:	469a      	mov	sl, r3
    53de:	2200      	movs	r2, #0
    53e0:	4b28      	ldr	r3, [pc, #160]	; (5484 <load_calibration_data+0x134>)
    53e2:	47d0      	blx	sl
    53e4:	1c02      	adds	r2, r0, #0
    53e6:	1c0b      	adds	r3, r1, #0
    53e8:	4927      	ldr	r1, [pc, #156]	; (5488 <load_calibration_data+0x138>)
    53ea:	4689      	mov	r9, r1
    53ec:	2000      	movs	r0, #0
    53ee:	4927      	ldr	r1, [pc, #156]	; (548c <load_calibration_data+0x13c>)
    53f0:	47c8      	blx	r9
    53f2:	4d27      	ldr	r5, [pc, #156]	; (5490 <load_calibration_data+0x140>)
    53f4:	47a8      	blx	r5
    53f6:	4b27      	ldr	r3, [pc, #156]	; (5494 <load_calibration_data+0x144>)
    53f8:	9001      	str	r0, [sp, #4]
    53fa:	6018      	str	r0, [r3, #0]
	
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
    53fc:	466b      	mov	r3, sp
    53fe:	2008      	movs	r0, #8
    5400:	5618      	ldrsb	r0, [r3, r0]
    5402:	47b8      	blx	r7
    5404:	47d8      	blx	fp
    5406:	2200      	movs	r2, #0
    5408:	4b1e      	ldr	r3, [pc, #120]	; (5484 <load_calibration_data+0x134>)
    540a:	47d0      	blx	sl
    540c:	1c02      	adds	r2, r0, #0
    540e:	1c0b      	adds	r3, r1, #0
    5410:	2000      	movs	r0, #0
    5412:	491e      	ldr	r1, [pc, #120]	; (548c <load_calibration_data+0x13c>)
    5414:	47c8      	blx	r9
    5416:	47a8      	blx	r5
    5418:	4b1f      	ldr	r3, [pc, #124]	; (5498 <load_calibration_data+0x148>)
    541a:	9002      	str	r0, [sp, #8]
    541c:	6018      	str	r0, [r3, #0]
	
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    541e:	4f1f      	ldr	r7, [pc, #124]	; (549c <load_calibration_data+0x14c>)
    5420:	1c20      	adds	r0, r4, #0
    5422:	47b8      	blx	r7
    5424:	1c01      	adds	r1, r0, #0
    5426:	4d1e      	ldr	r5, [pc, #120]	; (54a0 <load_calibration_data+0x150>)
    5428:	9801      	ldr	r0, [sp, #4]
    542a:	47a8      	blx	r5
    542c:	4c1d      	ldr	r4, [pc, #116]	; (54a4 <load_calibration_data+0x154>)
    542e:	491e      	ldr	r1, [pc, #120]	; (54a8 <load_calibration_data+0x158>)
    5430:	47a0      	blx	r4
    5432:	4b1e      	ldr	r3, [pc, #120]	; (54ac <load_calibration_data+0x15c>)
    5434:	6018      	str	r0, [r3, #0]
	
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    5436:	1c30      	adds	r0, r6, #0
    5438:	47b8      	blx	r7
    543a:	1c01      	adds	r1, r0, #0
    543c:	9802      	ldr	r0, [sp, #8]
    543e:	47a8      	blx	r5
    5440:	4919      	ldr	r1, [pc, #100]	; (54a8 <load_calibration_data+0x158>)
    5442:	47a0      	blx	r4
    5444:	4b1a      	ldr	r3, [pc, #104]	; (54b0 <load_calibration_data+0x160>)
    5446:	6018      	str	r0, [r3, #0]
}
    5448:	b007      	add	sp, #28
    544a:	bc3c      	pop	{r2, r3, r4, r5}
    544c:	4690      	mov	r8, r2
    544e:	4699      	mov	r9, r3
    5450:	46a2      	mov	sl, r4
    5452:	46ab      	mov	fp, r5
    5454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5456:	46c0      	nop			; (mov r8, r8)
    5458:	00806030 	.word	0x00806030
    545c:	00806034 	.word	0x00806034
    5460:	2000068c 	.word	0x2000068c
    5464:	20000680 	.word	0x20000680
    5468:	0000530d 	.word	0x0000530d
    546c:	0000647d 	.word	0x0000647d
    5470:	00005975 	.word	0x00005975
    5474:	20000694 	.word	0x20000694
    5478:	200006a4 	.word	0x200006a4
    547c:	000072d9 	.word	0x000072d9
    5480:	0000659d 	.word	0x0000659d
    5484:	408f4000 	.word	0x408f4000
    5488:	00006be5 	.word	0x00006be5
    548c:	3ff00000 	.word	0x3ff00000
    5490:	00007381 	.word	0x00007381
    5494:	20000688 	.word	0x20000688
    5498:	2000067c 	.word	0x2000067c
    549c:	0000650d 	.word	0x0000650d
    54a0:	00005edd 	.word	0x00005edd
    54a4:	00005c6d 	.word	0x00005c6d
    54a8:	457ff000 	.word	0x457ff000
    54ac:	20000678 	.word	0x20000678
    54b0:	20000698 	.word	0x20000698

000054b4 <main>:
static volatile bool main_b_generic_enable = false;

/*! \brief Main function. Execution starts here.*/

int main(void)
{
    54b4:	b538      	push	{r3, r4, r5, lr}
	
	board_init();
    54b6:	4b17      	ldr	r3, [pc, #92]	; (5514 <main+0x60>)
    54b8:	4798      	blx	r3
	system_init();
    54ba:	4b17      	ldr	r3, [pc, #92]	; (5518 <main+0x64>)
    54bc:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
    54be:	4d17      	ldr	r5, [pc, #92]	; (551c <main+0x68>)
    54c0:	2401      	movs	r4, #1
    54c2:	702c      	strb	r4, [r5, #0]
    54c4:	f3bf 8f5f 	dmb	sy
    54c8:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    54ca:	4b15      	ldr	r3, [pc, #84]	; (5520 <main+0x6c>)
    54cc:	2200      	movs	r2, #0
    54ce:	701a      	strb	r2, [r3, #0]
    54d0:	705a      	strb	r2, [r3, #1]
    54d2:	709a      	strb	r2, [r3, #2]
    54d4:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    54d6:	711c      	strb	r4, [r3, #4]
	// Initialize the sleep manager
	sleepmgr_init();

	delay_init();
    54d8:	4b12      	ldr	r3, [pc, #72]	; (5524 <main+0x70>)
    54da:	4798      	blx	r3

	ui_init();
    54dc:	4b12      	ldr	r3, [pc, #72]	; (5528 <main+0x74>)
    54de:	4798      	blx	r3
	ui_powerdown();
    54e0:	4b12      	ldr	r3, [pc, #72]	; (552c <main+0x78>)
    54e2:	4798      	blx	r3
	
	config_led();
    54e4:	4b12      	ldr	r3, [pc, #72]	; (5530 <main+0x7c>)
    54e6:	4798      	blx	r3
	configure_adc();
    54e8:	4b12      	ldr	r3, [pc, #72]	; (5534 <main+0x80>)
    54ea:	4798      	blx	r3
	configure_dac();
    54ec:	4b12      	ldr	r3, [pc, #72]	; (5538 <main+0x84>)
    54ee:	4798      	blx	r3
	configure_dac_channel();
    54f0:	4b12      	ldr	r3, [pc, #72]	; (553c <main+0x88>)
    54f2:	4798      	blx	r3

	config_motors();
    54f4:	4b12      	ldr	r3, [pc, #72]	; (5540 <main+0x8c>)
    54f6:	4798      	blx	r3
	config_ir();
    54f8:	4b12      	ldr	r3, [pc, #72]	; (5544 <main+0x90>)
    54fa:	4798      	blx	r3

	config_accel(); // Need to do this before USB to get I2C working while allowing USB to use the other two pins of SERCOM3
    54fc:	4b12      	ldr	r3, [pc, #72]	; (5548 <main+0x94>)
    54fe:	4798      	blx	r3

	configure_tc3();
    5500:	4b12      	ldr	r3, [pc, #72]	; (554c <main+0x98>)
    5502:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    5504:	702c      	strb	r4, [r5, #0]
    5506:	f3bf 8f5f 	dmb	sy
    550a:	b662      	cpsie	i
	system_interrupt_enable_global();	
	
	//calc_baud = (uint8_t)(system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + 1)/10000000);
	// Start USB stack to authorize VBus monitoring
	udc_start();
    550c:	4b10      	ldr	r3, [pc, #64]	; (5550 <main+0x9c>)
    550e:	4798      	blx	r3
	}*/
	

		

	}
    5510:	e7fe      	b.n	5510 <main+0x5c>
    5512:	46c0      	nop			; (mov r8, r8)
    5514:	00000115 	.word	0x00000115
    5518:	00002a09 	.word	0x00002a09
    551c:	20000108 	.word	0x20000108
    5520:	200002f8 	.word	0x200002f8
    5524:	000005ad 	.word	0x000005ad
    5528:	000009fd 	.word	0x000009fd
    552c:	00000a01 	.word	0x00000a01
    5530:	000008c9 	.word	0x000008c9
    5534:	000050a1 	.word	0x000050a1
    5538:	00000971 	.word	0x00000971
    553c:	0000099d 	.word	0x0000099d
    5540:	00000671 	.word	0x00000671
    5544:	00000615 	.word	0x00000615
    5548:	0000042d 	.word	0x0000042d
    554c:	00000305 	.word	0x00000305
    5550:	00000fad 	.word	0x00000fad

00005554 <main_suspend_action>:
}

void main_suspend_action(void)
{
    5554:	b508      	push	{r3, lr}
	ui_powerdown();
    5556:	4b01      	ldr	r3, [pc, #4]	; (555c <main_suspend_action+0x8>)
    5558:	4798      	blx	r3
}
    555a:	bd08      	pop	{r3, pc}
    555c:	00000a01 	.word	0x00000a01

00005560 <main_resume_action>:

void main_resume_action(void)
{
    5560:	b508      	push	{r3, lr}
	ui_wakeup();
    5562:	4b01      	ldr	r3, [pc, #4]	; (5568 <main_resume_action+0x8>)
    5564:	4798      	blx	r3
}
    5566:	bd08      	pop	{r3, pc}
    5568:	00000a0d 	.word	0x00000a0d

0000556c <main_sof_action>:

void main_sof_action(void)
{
    556c:	b508      	push	{r3, lr}
	if (!main_b_generic_enable)
    556e:	4b04      	ldr	r3, [pc, #16]	; (5580 <main_sof_action+0x14>)
    5570:	781b      	ldrb	r3, [r3, #0]
    5572:	2b00      	cmp	r3, #0
    5574:	d003      	beq.n	557e <main_sof_action+0x12>
		return;
	ui_process(udd_get_frame_number());
    5576:	4b03      	ldr	r3, [pc, #12]	; (5584 <main_sof_action+0x18>)
    5578:	4798      	blx	r3
    557a:	4b03      	ldr	r3, [pc, #12]	; (5588 <main_sof_action+0x1c>)
    557c:	4798      	blx	r3
}
    557e:	bd08      	pop	{r3, pc}
    5580:	2000021c 	.word	0x2000021c
    5584:	00003b2d 	.word	0x00003b2d
    5588:	00000a11 	.word	0x00000a11

0000558c <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    558c:	b508      	push	{r3, lr}
	ui_wakeup_enable();
    558e:	4b01      	ldr	r3, [pc, #4]	; (5594 <main_remotewakeup_enable+0x8>)
    5590:	4798      	blx	r3
}
    5592:	bd08      	pop	{r3, pc}
    5594:	00000a05 	.word	0x00000a05

00005598 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    5598:	b508      	push	{r3, lr}
	ui_wakeup_disable();
    559a:	4b01      	ldr	r3, [pc, #4]	; (55a0 <main_remotewakeup_disable+0x8>)
    559c:	4798      	blx	r3
}
    559e:	bd08      	pop	{r3, pc}
    55a0:	00000a09 	.word	0x00000a09

000055a4 <main_generic_enable>:

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    55a4:	2201      	movs	r2, #1
    55a6:	4b02      	ldr	r3, [pc, #8]	; (55b0 <main_generic_enable+0xc>)
    55a8:	701a      	strb	r2, [r3, #0]
	return true;
}
    55aa:	2001      	movs	r0, #1
    55ac:	4770      	bx	lr
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	2000021c 	.word	0x2000021c

000055b4 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    55b4:	2200      	movs	r2, #0
    55b6:	4b01      	ldr	r3, [pc, #4]	; (55bc <main_generic_disable+0x8>)
    55b8:	701a      	strb	r2, [r3, #0]
}
    55ba:	4770      	bx	lr
    55bc:	2000021c 	.word	0x2000021c

000055c0 <main_hid_set_feature>:
			&& report[2] == 0xAA && report[3] == 0x55) {
		// Disconnect USB Device
		udc_stop();
		ui_powerdown();
	}*/
}
    55c0:	4770      	bx	lr
    55c2:	46c0      	nop			; (mov r8, r8)

000055c4 <__aeabi_uidiv>:
    55c4:	2200      	movs	r2, #0
    55c6:	0843      	lsrs	r3, r0, #1
    55c8:	428b      	cmp	r3, r1
    55ca:	d374      	bcc.n	56b6 <__aeabi_uidiv+0xf2>
    55cc:	0903      	lsrs	r3, r0, #4
    55ce:	428b      	cmp	r3, r1
    55d0:	d35f      	bcc.n	5692 <__aeabi_uidiv+0xce>
    55d2:	0a03      	lsrs	r3, r0, #8
    55d4:	428b      	cmp	r3, r1
    55d6:	d344      	bcc.n	5662 <__aeabi_uidiv+0x9e>
    55d8:	0b03      	lsrs	r3, r0, #12
    55da:	428b      	cmp	r3, r1
    55dc:	d328      	bcc.n	5630 <__aeabi_uidiv+0x6c>
    55de:	0c03      	lsrs	r3, r0, #16
    55e0:	428b      	cmp	r3, r1
    55e2:	d30d      	bcc.n	5600 <__aeabi_uidiv+0x3c>
    55e4:	22ff      	movs	r2, #255	; 0xff
    55e6:	0209      	lsls	r1, r1, #8
    55e8:	ba12      	rev	r2, r2
    55ea:	0c03      	lsrs	r3, r0, #16
    55ec:	428b      	cmp	r3, r1
    55ee:	d302      	bcc.n	55f6 <__aeabi_uidiv+0x32>
    55f0:	1212      	asrs	r2, r2, #8
    55f2:	0209      	lsls	r1, r1, #8
    55f4:	d065      	beq.n	56c2 <__aeabi_uidiv+0xfe>
    55f6:	0b03      	lsrs	r3, r0, #12
    55f8:	428b      	cmp	r3, r1
    55fa:	d319      	bcc.n	5630 <__aeabi_uidiv+0x6c>
    55fc:	e000      	b.n	5600 <__aeabi_uidiv+0x3c>
    55fe:	0a09      	lsrs	r1, r1, #8
    5600:	0bc3      	lsrs	r3, r0, #15
    5602:	428b      	cmp	r3, r1
    5604:	d301      	bcc.n	560a <__aeabi_uidiv+0x46>
    5606:	03cb      	lsls	r3, r1, #15
    5608:	1ac0      	subs	r0, r0, r3
    560a:	4152      	adcs	r2, r2
    560c:	0b83      	lsrs	r3, r0, #14
    560e:	428b      	cmp	r3, r1
    5610:	d301      	bcc.n	5616 <__aeabi_uidiv+0x52>
    5612:	038b      	lsls	r3, r1, #14
    5614:	1ac0      	subs	r0, r0, r3
    5616:	4152      	adcs	r2, r2
    5618:	0b43      	lsrs	r3, r0, #13
    561a:	428b      	cmp	r3, r1
    561c:	d301      	bcc.n	5622 <__aeabi_uidiv+0x5e>
    561e:	034b      	lsls	r3, r1, #13
    5620:	1ac0      	subs	r0, r0, r3
    5622:	4152      	adcs	r2, r2
    5624:	0b03      	lsrs	r3, r0, #12
    5626:	428b      	cmp	r3, r1
    5628:	d301      	bcc.n	562e <__aeabi_uidiv+0x6a>
    562a:	030b      	lsls	r3, r1, #12
    562c:	1ac0      	subs	r0, r0, r3
    562e:	4152      	adcs	r2, r2
    5630:	0ac3      	lsrs	r3, r0, #11
    5632:	428b      	cmp	r3, r1
    5634:	d301      	bcc.n	563a <__aeabi_uidiv+0x76>
    5636:	02cb      	lsls	r3, r1, #11
    5638:	1ac0      	subs	r0, r0, r3
    563a:	4152      	adcs	r2, r2
    563c:	0a83      	lsrs	r3, r0, #10
    563e:	428b      	cmp	r3, r1
    5640:	d301      	bcc.n	5646 <__aeabi_uidiv+0x82>
    5642:	028b      	lsls	r3, r1, #10
    5644:	1ac0      	subs	r0, r0, r3
    5646:	4152      	adcs	r2, r2
    5648:	0a43      	lsrs	r3, r0, #9
    564a:	428b      	cmp	r3, r1
    564c:	d301      	bcc.n	5652 <__aeabi_uidiv+0x8e>
    564e:	024b      	lsls	r3, r1, #9
    5650:	1ac0      	subs	r0, r0, r3
    5652:	4152      	adcs	r2, r2
    5654:	0a03      	lsrs	r3, r0, #8
    5656:	428b      	cmp	r3, r1
    5658:	d301      	bcc.n	565e <__aeabi_uidiv+0x9a>
    565a:	020b      	lsls	r3, r1, #8
    565c:	1ac0      	subs	r0, r0, r3
    565e:	4152      	adcs	r2, r2
    5660:	d2cd      	bcs.n	55fe <__aeabi_uidiv+0x3a>
    5662:	09c3      	lsrs	r3, r0, #7
    5664:	428b      	cmp	r3, r1
    5666:	d301      	bcc.n	566c <__aeabi_uidiv+0xa8>
    5668:	01cb      	lsls	r3, r1, #7
    566a:	1ac0      	subs	r0, r0, r3
    566c:	4152      	adcs	r2, r2
    566e:	0983      	lsrs	r3, r0, #6
    5670:	428b      	cmp	r3, r1
    5672:	d301      	bcc.n	5678 <__aeabi_uidiv+0xb4>
    5674:	018b      	lsls	r3, r1, #6
    5676:	1ac0      	subs	r0, r0, r3
    5678:	4152      	adcs	r2, r2
    567a:	0943      	lsrs	r3, r0, #5
    567c:	428b      	cmp	r3, r1
    567e:	d301      	bcc.n	5684 <__aeabi_uidiv+0xc0>
    5680:	014b      	lsls	r3, r1, #5
    5682:	1ac0      	subs	r0, r0, r3
    5684:	4152      	adcs	r2, r2
    5686:	0903      	lsrs	r3, r0, #4
    5688:	428b      	cmp	r3, r1
    568a:	d301      	bcc.n	5690 <__aeabi_uidiv+0xcc>
    568c:	010b      	lsls	r3, r1, #4
    568e:	1ac0      	subs	r0, r0, r3
    5690:	4152      	adcs	r2, r2
    5692:	08c3      	lsrs	r3, r0, #3
    5694:	428b      	cmp	r3, r1
    5696:	d301      	bcc.n	569c <__aeabi_uidiv+0xd8>
    5698:	00cb      	lsls	r3, r1, #3
    569a:	1ac0      	subs	r0, r0, r3
    569c:	4152      	adcs	r2, r2
    569e:	0883      	lsrs	r3, r0, #2
    56a0:	428b      	cmp	r3, r1
    56a2:	d301      	bcc.n	56a8 <__aeabi_uidiv+0xe4>
    56a4:	008b      	lsls	r3, r1, #2
    56a6:	1ac0      	subs	r0, r0, r3
    56a8:	4152      	adcs	r2, r2
    56aa:	0843      	lsrs	r3, r0, #1
    56ac:	428b      	cmp	r3, r1
    56ae:	d301      	bcc.n	56b4 <__aeabi_uidiv+0xf0>
    56b0:	004b      	lsls	r3, r1, #1
    56b2:	1ac0      	subs	r0, r0, r3
    56b4:	4152      	adcs	r2, r2
    56b6:	1a41      	subs	r1, r0, r1
    56b8:	d200      	bcs.n	56bc <__aeabi_uidiv+0xf8>
    56ba:	4601      	mov	r1, r0
    56bc:	4152      	adcs	r2, r2
    56be:	4610      	mov	r0, r2
    56c0:	4770      	bx	lr
    56c2:	e7ff      	b.n	56c4 <__aeabi_uidiv+0x100>
    56c4:	b501      	push	{r0, lr}
    56c6:	2000      	movs	r0, #0
    56c8:	f000 f8fc 	bl	58c4 <__aeabi_idiv0>
    56cc:	bd02      	pop	{r1, pc}
    56ce:	46c0      	nop			; (mov r8, r8)

000056d0 <__aeabi_uidivmod>:
    56d0:	2900      	cmp	r1, #0
    56d2:	d0f7      	beq.n	56c4 <__aeabi_uidiv+0x100>
    56d4:	b503      	push	{r0, r1, lr}
    56d6:	f7ff ff75 	bl	55c4 <__aeabi_uidiv>
    56da:	bc0e      	pop	{r1, r2, r3}
    56dc:	4342      	muls	r2, r0
    56de:	1a89      	subs	r1, r1, r2
    56e0:	4718      	bx	r3
    56e2:	46c0      	nop			; (mov r8, r8)

000056e4 <__aeabi_idiv>:
    56e4:	4603      	mov	r3, r0
    56e6:	430b      	orrs	r3, r1
    56e8:	d47f      	bmi.n	57ea <__aeabi_idiv+0x106>
    56ea:	2200      	movs	r2, #0
    56ec:	0843      	lsrs	r3, r0, #1
    56ee:	428b      	cmp	r3, r1
    56f0:	d374      	bcc.n	57dc <__aeabi_idiv+0xf8>
    56f2:	0903      	lsrs	r3, r0, #4
    56f4:	428b      	cmp	r3, r1
    56f6:	d35f      	bcc.n	57b8 <__aeabi_idiv+0xd4>
    56f8:	0a03      	lsrs	r3, r0, #8
    56fa:	428b      	cmp	r3, r1
    56fc:	d344      	bcc.n	5788 <__aeabi_idiv+0xa4>
    56fe:	0b03      	lsrs	r3, r0, #12
    5700:	428b      	cmp	r3, r1
    5702:	d328      	bcc.n	5756 <__aeabi_idiv+0x72>
    5704:	0c03      	lsrs	r3, r0, #16
    5706:	428b      	cmp	r3, r1
    5708:	d30d      	bcc.n	5726 <__aeabi_idiv+0x42>
    570a:	22ff      	movs	r2, #255	; 0xff
    570c:	0209      	lsls	r1, r1, #8
    570e:	ba12      	rev	r2, r2
    5710:	0c03      	lsrs	r3, r0, #16
    5712:	428b      	cmp	r3, r1
    5714:	d302      	bcc.n	571c <__aeabi_idiv+0x38>
    5716:	1212      	asrs	r2, r2, #8
    5718:	0209      	lsls	r1, r1, #8
    571a:	d065      	beq.n	57e8 <__aeabi_idiv+0x104>
    571c:	0b03      	lsrs	r3, r0, #12
    571e:	428b      	cmp	r3, r1
    5720:	d319      	bcc.n	5756 <__aeabi_idiv+0x72>
    5722:	e000      	b.n	5726 <__aeabi_idiv+0x42>
    5724:	0a09      	lsrs	r1, r1, #8
    5726:	0bc3      	lsrs	r3, r0, #15
    5728:	428b      	cmp	r3, r1
    572a:	d301      	bcc.n	5730 <__aeabi_idiv+0x4c>
    572c:	03cb      	lsls	r3, r1, #15
    572e:	1ac0      	subs	r0, r0, r3
    5730:	4152      	adcs	r2, r2
    5732:	0b83      	lsrs	r3, r0, #14
    5734:	428b      	cmp	r3, r1
    5736:	d301      	bcc.n	573c <__aeabi_idiv+0x58>
    5738:	038b      	lsls	r3, r1, #14
    573a:	1ac0      	subs	r0, r0, r3
    573c:	4152      	adcs	r2, r2
    573e:	0b43      	lsrs	r3, r0, #13
    5740:	428b      	cmp	r3, r1
    5742:	d301      	bcc.n	5748 <__aeabi_idiv+0x64>
    5744:	034b      	lsls	r3, r1, #13
    5746:	1ac0      	subs	r0, r0, r3
    5748:	4152      	adcs	r2, r2
    574a:	0b03      	lsrs	r3, r0, #12
    574c:	428b      	cmp	r3, r1
    574e:	d301      	bcc.n	5754 <__aeabi_idiv+0x70>
    5750:	030b      	lsls	r3, r1, #12
    5752:	1ac0      	subs	r0, r0, r3
    5754:	4152      	adcs	r2, r2
    5756:	0ac3      	lsrs	r3, r0, #11
    5758:	428b      	cmp	r3, r1
    575a:	d301      	bcc.n	5760 <__aeabi_idiv+0x7c>
    575c:	02cb      	lsls	r3, r1, #11
    575e:	1ac0      	subs	r0, r0, r3
    5760:	4152      	adcs	r2, r2
    5762:	0a83      	lsrs	r3, r0, #10
    5764:	428b      	cmp	r3, r1
    5766:	d301      	bcc.n	576c <__aeabi_idiv+0x88>
    5768:	028b      	lsls	r3, r1, #10
    576a:	1ac0      	subs	r0, r0, r3
    576c:	4152      	adcs	r2, r2
    576e:	0a43      	lsrs	r3, r0, #9
    5770:	428b      	cmp	r3, r1
    5772:	d301      	bcc.n	5778 <__aeabi_idiv+0x94>
    5774:	024b      	lsls	r3, r1, #9
    5776:	1ac0      	subs	r0, r0, r3
    5778:	4152      	adcs	r2, r2
    577a:	0a03      	lsrs	r3, r0, #8
    577c:	428b      	cmp	r3, r1
    577e:	d301      	bcc.n	5784 <__aeabi_idiv+0xa0>
    5780:	020b      	lsls	r3, r1, #8
    5782:	1ac0      	subs	r0, r0, r3
    5784:	4152      	adcs	r2, r2
    5786:	d2cd      	bcs.n	5724 <__aeabi_idiv+0x40>
    5788:	09c3      	lsrs	r3, r0, #7
    578a:	428b      	cmp	r3, r1
    578c:	d301      	bcc.n	5792 <__aeabi_idiv+0xae>
    578e:	01cb      	lsls	r3, r1, #7
    5790:	1ac0      	subs	r0, r0, r3
    5792:	4152      	adcs	r2, r2
    5794:	0983      	lsrs	r3, r0, #6
    5796:	428b      	cmp	r3, r1
    5798:	d301      	bcc.n	579e <__aeabi_idiv+0xba>
    579a:	018b      	lsls	r3, r1, #6
    579c:	1ac0      	subs	r0, r0, r3
    579e:	4152      	adcs	r2, r2
    57a0:	0943      	lsrs	r3, r0, #5
    57a2:	428b      	cmp	r3, r1
    57a4:	d301      	bcc.n	57aa <__aeabi_idiv+0xc6>
    57a6:	014b      	lsls	r3, r1, #5
    57a8:	1ac0      	subs	r0, r0, r3
    57aa:	4152      	adcs	r2, r2
    57ac:	0903      	lsrs	r3, r0, #4
    57ae:	428b      	cmp	r3, r1
    57b0:	d301      	bcc.n	57b6 <__aeabi_idiv+0xd2>
    57b2:	010b      	lsls	r3, r1, #4
    57b4:	1ac0      	subs	r0, r0, r3
    57b6:	4152      	adcs	r2, r2
    57b8:	08c3      	lsrs	r3, r0, #3
    57ba:	428b      	cmp	r3, r1
    57bc:	d301      	bcc.n	57c2 <__aeabi_idiv+0xde>
    57be:	00cb      	lsls	r3, r1, #3
    57c0:	1ac0      	subs	r0, r0, r3
    57c2:	4152      	adcs	r2, r2
    57c4:	0883      	lsrs	r3, r0, #2
    57c6:	428b      	cmp	r3, r1
    57c8:	d301      	bcc.n	57ce <__aeabi_idiv+0xea>
    57ca:	008b      	lsls	r3, r1, #2
    57cc:	1ac0      	subs	r0, r0, r3
    57ce:	4152      	adcs	r2, r2
    57d0:	0843      	lsrs	r3, r0, #1
    57d2:	428b      	cmp	r3, r1
    57d4:	d301      	bcc.n	57da <__aeabi_idiv+0xf6>
    57d6:	004b      	lsls	r3, r1, #1
    57d8:	1ac0      	subs	r0, r0, r3
    57da:	4152      	adcs	r2, r2
    57dc:	1a41      	subs	r1, r0, r1
    57de:	d200      	bcs.n	57e2 <__aeabi_idiv+0xfe>
    57e0:	4601      	mov	r1, r0
    57e2:	4152      	adcs	r2, r2
    57e4:	4610      	mov	r0, r2
    57e6:	4770      	bx	lr
    57e8:	e05d      	b.n	58a6 <__aeabi_idiv+0x1c2>
    57ea:	0fca      	lsrs	r2, r1, #31
    57ec:	d000      	beq.n	57f0 <__aeabi_idiv+0x10c>
    57ee:	4249      	negs	r1, r1
    57f0:	1003      	asrs	r3, r0, #32
    57f2:	d300      	bcc.n	57f6 <__aeabi_idiv+0x112>
    57f4:	4240      	negs	r0, r0
    57f6:	4053      	eors	r3, r2
    57f8:	2200      	movs	r2, #0
    57fa:	469c      	mov	ip, r3
    57fc:	0903      	lsrs	r3, r0, #4
    57fe:	428b      	cmp	r3, r1
    5800:	d32d      	bcc.n	585e <__aeabi_idiv+0x17a>
    5802:	0a03      	lsrs	r3, r0, #8
    5804:	428b      	cmp	r3, r1
    5806:	d312      	bcc.n	582e <__aeabi_idiv+0x14a>
    5808:	22fc      	movs	r2, #252	; 0xfc
    580a:	0189      	lsls	r1, r1, #6
    580c:	ba12      	rev	r2, r2
    580e:	0a03      	lsrs	r3, r0, #8
    5810:	428b      	cmp	r3, r1
    5812:	d30c      	bcc.n	582e <__aeabi_idiv+0x14a>
    5814:	0189      	lsls	r1, r1, #6
    5816:	1192      	asrs	r2, r2, #6
    5818:	428b      	cmp	r3, r1
    581a:	d308      	bcc.n	582e <__aeabi_idiv+0x14a>
    581c:	0189      	lsls	r1, r1, #6
    581e:	1192      	asrs	r2, r2, #6
    5820:	428b      	cmp	r3, r1
    5822:	d304      	bcc.n	582e <__aeabi_idiv+0x14a>
    5824:	0189      	lsls	r1, r1, #6
    5826:	d03a      	beq.n	589e <__aeabi_idiv+0x1ba>
    5828:	1192      	asrs	r2, r2, #6
    582a:	e000      	b.n	582e <__aeabi_idiv+0x14a>
    582c:	0989      	lsrs	r1, r1, #6
    582e:	09c3      	lsrs	r3, r0, #7
    5830:	428b      	cmp	r3, r1
    5832:	d301      	bcc.n	5838 <__aeabi_idiv+0x154>
    5834:	01cb      	lsls	r3, r1, #7
    5836:	1ac0      	subs	r0, r0, r3
    5838:	4152      	adcs	r2, r2
    583a:	0983      	lsrs	r3, r0, #6
    583c:	428b      	cmp	r3, r1
    583e:	d301      	bcc.n	5844 <__aeabi_idiv+0x160>
    5840:	018b      	lsls	r3, r1, #6
    5842:	1ac0      	subs	r0, r0, r3
    5844:	4152      	adcs	r2, r2
    5846:	0943      	lsrs	r3, r0, #5
    5848:	428b      	cmp	r3, r1
    584a:	d301      	bcc.n	5850 <__aeabi_idiv+0x16c>
    584c:	014b      	lsls	r3, r1, #5
    584e:	1ac0      	subs	r0, r0, r3
    5850:	4152      	adcs	r2, r2
    5852:	0903      	lsrs	r3, r0, #4
    5854:	428b      	cmp	r3, r1
    5856:	d301      	bcc.n	585c <__aeabi_idiv+0x178>
    5858:	010b      	lsls	r3, r1, #4
    585a:	1ac0      	subs	r0, r0, r3
    585c:	4152      	adcs	r2, r2
    585e:	08c3      	lsrs	r3, r0, #3
    5860:	428b      	cmp	r3, r1
    5862:	d301      	bcc.n	5868 <__aeabi_idiv+0x184>
    5864:	00cb      	lsls	r3, r1, #3
    5866:	1ac0      	subs	r0, r0, r3
    5868:	4152      	adcs	r2, r2
    586a:	0883      	lsrs	r3, r0, #2
    586c:	428b      	cmp	r3, r1
    586e:	d301      	bcc.n	5874 <__aeabi_idiv+0x190>
    5870:	008b      	lsls	r3, r1, #2
    5872:	1ac0      	subs	r0, r0, r3
    5874:	4152      	adcs	r2, r2
    5876:	d2d9      	bcs.n	582c <__aeabi_idiv+0x148>
    5878:	0843      	lsrs	r3, r0, #1
    587a:	428b      	cmp	r3, r1
    587c:	d301      	bcc.n	5882 <__aeabi_idiv+0x19e>
    587e:	004b      	lsls	r3, r1, #1
    5880:	1ac0      	subs	r0, r0, r3
    5882:	4152      	adcs	r2, r2
    5884:	1a41      	subs	r1, r0, r1
    5886:	d200      	bcs.n	588a <__aeabi_idiv+0x1a6>
    5888:	4601      	mov	r1, r0
    588a:	4663      	mov	r3, ip
    588c:	4152      	adcs	r2, r2
    588e:	105b      	asrs	r3, r3, #1
    5890:	4610      	mov	r0, r2
    5892:	d301      	bcc.n	5898 <__aeabi_idiv+0x1b4>
    5894:	4240      	negs	r0, r0
    5896:	2b00      	cmp	r3, #0
    5898:	d500      	bpl.n	589c <__aeabi_idiv+0x1b8>
    589a:	4249      	negs	r1, r1
    589c:	4770      	bx	lr
    589e:	4663      	mov	r3, ip
    58a0:	105b      	asrs	r3, r3, #1
    58a2:	d300      	bcc.n	58a6 <__aeabi_idiv+0x1c2>
    58a4:	4240      	negs	r0, r0
    58a6:	b501      	push	{r0, lr}
    58a8:	2000      	movs	r0, #0
    58aa:	f000 f80b 	bl	58c4 <__aeabi_idiv0>
    58ae:	bd02      	pop	{r1, pc}

000058b0 <__aeabi_idivmod>:
    58b0:	2900      	cmp	r1, #0
    58b2:	d0f8      	beq.n	58a6 <__aeabi_idiv+0x1c2>
    58b4:	b503      	push	{r0, r1, lr}
    58b6:	f7ff ff15 	bl	56e4 <__aeabi_idiv>
    58ba:	bc0e      	pop	{r1, r2, r3}
    58bc:	4342      	muls	r2, r0
    58be:	1a89      	subs	r1, r1, r2
    58c0:	4718      	bx	r3
    58c2:	46c0      	nop			; (mov r8, r8)

000058c4 <__aeabi_idiv0>:
    58c4:	4770      	bx	lr
    58c6:	46c0      	nop			; (mov r8, r8)

000058c8 <__clzsi2>:
    58c8:	211c      	movs	r1, #28
    58ca:	2301      	movs	r3, #1
    58cc:	041b      	lsls	r3, r3, #16
    58ce:	4298      	cmp	r0, r3
    58d0:	d301      	bcc.n	58d6 <__clzsi2+0xe>
    58d2:	0c00      	lsrs	r0, r0, #16
    58d4:	3910      	subs	r1, #16
    58d6:	0a1b      	lsrs	r3, r3, #8
    58d8:	4298      	cmp	r0, r3
    58da:	d301      	bcc.n	58e0 <__clzsi2+0x18>
    58dc:	0a00      	lsrs	r0, r0, #8
    58de:	3908      	subs	r1, #8
    58e0:	091b      	lsrs	r3, r3, #4
    58e2:	4298      	cmp	r0, r3
    58e4:	d301      	bcc.n	58ea <__clzsi2+0x22>
    58e6:	0900      	lsrs	r0, r0, #4
    58e8:	3904      	subs	r1, #4
    58ea:	a202      	add	r2, pc, #8	; (adr r2, 58f4 <__clzsi2+0x2c>)
    58ec:	5c10      	ldrb	r0, [r2, r0]
    58ee:	1840      	adds	r0, r0, r1
    58f0:	4770      	bx	lr
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	02020304 	.word	0x02020304
    58f8:	01010101 	.word	0x01010101
	...

00005904 <__ctzsi2>:
    5904:	4241      	negs	r1, r0
    5906:	4008      	ands	r0, r1
    5908:	211c      	movs	r1, #28
    590a:	2301      	movs	r3, #1
    590c:	041b      	lsls	r3, r3, #16
    590e:	4298      	cmp	r0, r3
    5910:	d301      	bcc.n	5916 <__ctzsi2+0x12>
    5912:	0c00      	lsrs	r0, r0, #16
    5914:	3910      	subs	r1, #16
    5916:	0a1b      	lsrs	r3, r3, #8
    5918:	4298      	cmp	r0, r3
    591a:	d301      	bcc.n	5920 <__ctzsi2+0x1c>
    591c:	0a00      	lsrs	r0, r0, #8
    591e:	3908      	subs	r1, #8
    5920:	091b      	lsrs	r3, r3, #4
    5922:	4298      	cmp	r0, r3
    5924:	d301      	bcc.n	592a <__ctzsi2+0x26>
    5926:	0900      	lsrs	r0, r0, #4
    5928:	3904      	subs	r1, #4
    592a:	a202      	add	r2, pc, #8	; (adr r2, 5934 <__ctzsi2+0x30>)
    592c:	5c10      	ldrb	r0, [r2, r0]
    592e:	1a40      	subs	r0, r0, r1
    5930:	4770      	bx	lr
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	1d1d1c1b 	.word	0x1d1d1c1b
    5938:	1e1e1e1e 	.word	0x1e1e1e1e
    593c:	1f1f1f1f 	.word	0x1f1f1f1f
    5940:	1f1f1f1f 	.word	0x1f1f1f1f

00005944 <__aeabi_f2uiz>:
    5944:	219e      	movs	r1, #158	; 0x9e
    5946:	b510      	push	{r4, lr}
    5948:	05c9      	lsls	r1, r1, #23
    594a:	1c04      	adds	r4, r0, #0
    594c:	f001 fdd8 	bl	7500 <__aeabi_fcmpge>
    5950:	2800      	cmp	r0, #0
    5952:	d103      	bne.n	595c <__aeabi_f2uiz+0x18>
    5954:	1c20      	adds	r0, r4, #0
    5956:	f000 fd71 	bl	643c <__aeabi_f2iz>
    595a:	bd10      	pop	{r4, pc}
    595c:	219e      	movs	r1, #158	; 0x9e
    595e:	1c20      	adds	r0, r4, #0
    5960:	05c9      	lsls	r1, r1, #23
    5962:	f000 fbed 	bl	6140 <__aeabi_fsub>
    5966:	f000 fd69 	bl	643c <__aeabi_f2iz>
    596a:	2380      	movs	r3, #128	; 0x80
    596c:	061b      	lsls	r3, r3, #24
    596e:	469c      	mov	ip, r3
    5970:	4460      	add	r0, ip
    5972:	e7f2      	b.n	595a <__aeabi_f2uiz+0x16>

00005974 <__aeabi_fadd>:
    5974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5976:	004a      	lsls	r2, r1, #1
    5978:	0243      	lsls	r3, r0, #9
    597a:	0044      	lsls	r4, r0, #1
    597c:	024e      	lsls	r6, r1, #9
    597e:	0fc5      	lsrs	r5, r0, #31
    5980:	0e24      	lsrs	r4, r4, #24
    5982:	1c28      	adds	r0, r5, #0
    5984:	099b      	lsrs	r3, r3, #6
    5986:	0e12      	lsrs	r2, r2, #24
    5988:	0fc9      	lsrs	r1, r1, #31
    598a:	09b7      	lsrs	r7, r6, #6
    598c:	428d      	cmp	r5, r1
    598e:	d040      	beq.n	5a12 <__aeabi_fadd+0x9e>
    5990:	1aa0      	subs	r0, r4, r2
    5992:	2800      	cmp	r0, #0
    5994:	dc00      	bgt.n	5998 <__aeabi_fadd+0x24>
    5996:	e084      	b.n	5aa2 <__aeabi_fadd+0x12e>
    5998:	2a00      	cmp	r2, #0
    599a:	d11c      	bne.n	59d6 <__aeabi_fadd+0x62>
    599c:	2f00      	cmp	r7, #0
    599e:	d15c      	bne.n	5a5a <__aeabi_fadd+0xe6>
    59a0:	075a      	lsls	r2, r3, #29
    59a2:	d004      	beq.n	59ae <__aeabi_fadd+0x3a>
    59a4:	220f      	movs	r2, #15
    59a6:	401a      	ands	r2, r3
    59a8:	2a04      	cmp	r2, #4
    59aa:	d000      	beq.n	59ae <__aeabi_fadd+0x3a>
    59ac:	3304      	adds	r3, #4
    59ae:	2280      	movs	r2, #128	; 0x80
    59b0:	04d2      	lsls	r2, r2, #19
    59b2:	401a      	ands	r2, r3
    59b4:	1c28      	adds	r0, r5, #0
    59b6:	2a00      	cmp	r2, #0
    59b8:	d024      	beq.n	5a04 <__aeabi_fadd+0x90>
    59ba:	3401      	adds	r4, #1
    59bc:	2cff      	cmp	r4, #255	; 0xff
    59be:	d100      	bne.n	59c2 <__aeabi_fadd+0x4e>
    59c0:	e07b      	b.n	5aba <__aeabi_fadd+0x146>
    59c2:	019b      	lsls	r3, r3, #6
    59c4:	0a5b      	lsrs	r3, r3, #9
    59c6:	b2e4      	uxtb	r4, r4
    59c8:	025b      	lsls	r3, r3, #9
    59ca:	05e4      	lsls	r4, r4, #23
    59cc:	0a5b      	lsrs	r3, r3, #9
    59ce:	4323      	orrs	r3, r4
    59d0:	07c0      	lsls	r0, r0, #31
    59d2:	4318      	orrs	r0, r3
    59d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59d6:	2cff      	cmp	r4, #255	; 0xff
    59d8:	d0e2      	beq.n	59a0 <__aeabi_fadd+0x2c>
    59da:	2280      	movs	r2, #128	; 0x80
    59dc:	04d2      	lsls	r2, r2, #19
    59de:	4317      	orrs	r7, r2
    59e0:	2601      	movs	r6, #1
    59e2:	281b      	cmp	r0, #27
    59e4:	dc08      	bgt.n	59f8 <__aeabi_fadd+0x84>
    59e6:	1c39      	adds	r1, r7, #0
    59e8:	2220      	movs	r2, #32
    59ea:	1c3e      	adds	r6, r7, #0
    59ec:	40c1      	lsrs	r1, r0
    59ee:	1a10      	subs	r0, r2, r0
    59f0:	4086      	lsls	r6, r0
    59f2:	1e77      	subs	r7, r6, #1
    59f4:	41be      	sbcs	r6, r7
    59f6:	430e      	orrs	r6, r1
    59f8:	1b9b      	subs	r3, r3, r6
    59fa:	015a      	lsls	r2, r3, #5
    59fc:	d433      	bmi.n	5a66 <__aeabi_fadd+0xf2>
    59fe:	1c28      	adds	r0, r5, #0
    5a00:	075a      	lsls	r2, r3, #29
    5a02:	d1cf      	bne.n	59a4 <__aeabi_fadd+0x30>
    5a04:	08db      	lsrs	r3, r3, #3
    5a06:	2cff      	cmp	r4, #255	; 0xff
    5a08:	d01e      	beq.n	5a48 <__aeabi_fadd+0xd4>
    5a0a:	025b      	lsls	r3, r3, #9
    5a0c:	0a5b      	lsrs	r3, r3, #9
    5a0e:	b2e4      	uxtb	r4, r4
    5a10:	e7da      	b.n	59c8 <__aeabi_fadd+0x54>
    5a12:	1aa1      	subs	r1, r4, r2
    5a14:	2900      	cmp	r1, #0
    5a16:	dd57      	ble.n	5ac8 <__aeabi_fadd+0x154>
    5a18:	2a00      	cmp	r2, #0
    5a1a:	d03a      	beq.n	5a92 <__aeabi_fadd+0x11e>
    5a1c:	2cff      	cmp	r4, #255	; 0xff
    5a1e:	d0bf      	beq.n	59a0 <__aeabi_fadd+0x2c>
    5a20:	2280      	movs	r2, #128	; 0x80
    5a22:	04d2      	lsls	r2, r2, #19
    5a24:	4317      	orrs	r7, r2
    5a26:	2601      	movs	r6, #1
    5a28:	291b      	cmp	r1, #27
    5a2a:	dd72      	ble.n	5b12 <__aeabi_fadd+0x19e>
    5a2c:	199b      	adds	r3, r3, r6
    5a2e:	015a      	lsls	r2, r3, #5
    5a30:	d5e5      	bpl.n	59fe <__aeabi_fadd+0x8a>
    5a32:	3401      	adds	r4, #1
    5a34:	2cff      	cmp	r4, #255	; 0xff
    5a36:	d100      	bne.n	5a3a <__aeabi_fadd+0xc6>
    5a38:	e087      	b.n	5b4a <__aeabi_fadd+0x1d6>
    5a3a:	2101      	movs	r1, #1
    5a3c:	4a8a      	ldr	r2, [pc, #552]	; (5c68 <__aeabi_fadd+0x2f4>)
    5a3e:	4019      	ands	r1, r3
    5a40:	4013      	ands	r3, r2
    5a42:	085b      	lsrs	r3, r3, #1
    5a44:	430b      	orrs	r3, r1
    5a46:	e7ab      	b.n	59a0 <__aeabi_fadd+0x2c>
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d036      	beq.n	5aba <__aeabi_fadd+0x146>
    5a4c:	2280      	movs	r2, #128	; 0x80
    5a4e:	03d2      	lsls	r2, r2, #15
    5a50:	4313      	orrs	r3, r2
    5a52:	025b      	lsls	r3, r3, #9
    5a54:	0a5b      	lsrs	r3, r3, #9
    5a56:	24ff      	movs	r4, #255	; 0xff
    5a58:	e7b6      	b.n	59c8 <__aeabi_fadd+0x54>
    5a5a:	3801      	subs	r0, #1
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d13f      	bne.n	5ae0 <__aeabi_fadd+0x16c>
    5a60:	1bdb      	subs	r3, r3, r7
    5a62:	015a      	lsls	r2, r3, #5
    5a64:	d5cb      	bpl.n	59fe <__aeabi_fadd+0x8a>
    5a66:	019b      	lsls	r3, r3, #6
    5a68:	099e      	lsrs	r6, r3, #6
    5a6a:	1c30      	adds	r0, r6, #0
    5a6c:	f7ff ff2c 	bl	58c8 <__clzsi2>
    5a70:	3805      	subs	r0, #5
    5a72:	4086      	lsls	r6, r0
    5a74:	4284      	cmp	r4, r0
    5a76:	dc23      	bgt.n	5ac0 <__aeabi_fadd+0x14c>
    5a78:	1b00      	subs	r0, r0, r4
    5a7a:	241f      	movs	r4, #31
    5a7c:	1c32      	adds	r2, r6, #0
    5a7e:	1c43      	adds	r3, r0, #1
    5a80:	1a20      	subs	r0, r4, r0
    5a82:	40da      	lsrs	r2, r3
    5a84:	4086      	lsls	r6, r0
    5a86:	1c13      	adds	r3, r2, #0
    5a88:	1e74      	subs	r4, r6, #1
    5a8a:	41a6      	sbcs	r6, r4
    5a8c:	2400      	movs	r4, #0
    5a8e:	4333      	orrs	r3, r6
    5a90:	e786      	b.n	59a0 <__aeabi_fadd+0x2c>
    5a92:	2f00      	cmp	r7, #0
    5a94:	d100      	bne.n	5a98 <__aeabi_fadd+0x124>
    5a96:	e783      	b.n	59a0 <__aeabi_fadd+0x2c>
    5a98:	3901      	subs	r1, #1
    5a9a:	2900      	cmp	r1, #0
    5a9c:	d150      	bne.n	5b40 <__aeabi_fadd+0x1cc>
    5a9e:	19db      	adds	r3, r3, r7
    5aa0:	e7c5      	b.n	5a2e <__aeabi_fadd+0xba>
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d120      	bne.n	5ae8 <__aeabi_fadd+0x174>
    5aa6:	1c62      	adds	r2, r4, #1
    5aa8:	b2d2      	uxtb	r2, r2
    5aaa:	2a01      	cmp	r2, #1
    5aac:	dd5e      	ble.n	5b6c <__aeabi_fadd+0x1f8>
    5aae:	1bde      	subs	r6, r3, r7
    5ab0:	0172      	lsls	r2, r6, #5
    5ab2:	d528      	bpl.n	5b06 <__aeabi_fadd+0x192>
    5ab4:	1afe      	subs	r6, r7, r3
    5ab6:	1c0d      	adds	r5, r1, #0
    5ab8:	e7d7      	b.n	5a6a <__aeabi_fadd+0xf6>
    5aba:	24ff      	movs	r4, #255	; 0xff
    5abc:	2300      	movs	r3, #0
    5abe:	e783      	b.n	59c8 <__aeabi_fadd+0x54>
    5ac0:	4b69      	ldr	r3, [pc, #420]	; (5c68 <__aeabi_fadd+0x2f4>)
    5ac2:	1a24      	subs	r4, r4, r0
    5ac4:	4033      	ands	r3, r6
    5ac6:	e76b      	b.n	59a0 <__aeabi_fadd+0x2c>
    5ac8:	2900      	cmp	r1, #0
    5aca:	d158      	bne.n	5b7e <__aeabi_fadd+0x20a>
    5acc:	1c62      	adds	r2, r4, #1
    5ace:	b2d1      	uxtb	r1, r2
    5ad0:	2901      	cmp	r1, #1
    5ad2:	dd3c      	ble.n	5b4e <__aeabi_fadd+0x1da>
    5ad4:	2aff      	cmp	r2, #255	; 0xff
    5ad6:	d037      	beq.n	5b48 <__aeabi_fadd+0x1d4>
    5ad8:	18fb      	adds	r3, r7, r3
    5ada:	085b      	lsrs	r3, r3, #1
    5adc:	1c14      	adds	r4, r2, #0
    5ade:	e75f      	b.n	59a0 <__aeabi_fadd+0x2c>
    5ae0:	2cff      	cmp	r4, #255	; 0xff
    5ae2:	d000      	beq.n	5ae6 <__aeabi_fadd+0x172>
    5ae4:	e77c      	b.n	59e0 <__aeabi_fadd+0x6c>
    5ae6:	e75b      	b.n	59a0 <__aeabi_fadd+0x2c>
    5ae8:	2c00      	cmp	r4, #0
    5aea:	d01e      	beq.n	5b2a <__aeabi_fadd+0x1b6>
    5aec:	2aff      	cmp	r2, #255	; 0xff
    5aee:	d023      	beq.n	5b38 <__aeabi_fadd+0x1c4>
    5af0:	2480      	movs	r4, #128	; 0x80
    5af2:	04e4      	lsls	r4, r4, #19
    5af4:	4240      	negs	r0, r0
    5af6:	4323      	orrs	r3, r4
    5af8:	281b      	cmp	r0, #27
    5afa:	dd5b      	ble.n	5bb4 <__aeabi_fadd+0x240>
    5afc:	2301      	movs	r3, #1
    5afe:	1afb      	subs	r3, r7, r3
    5b00:	1c14      	adds	r4, r2, #0
    5b02:	1c0d      	adds	r5, r1, #0
    5b04:	e7ad      	b.n	5a62 <__aeabi_fadd+0xee>
    5b06:	2e00      	cmp	r6, #0
    5b08:	d1af      	bne.n	5a6a <__aeabi_fadd+0xf6>
    5b0a:	2300      	movs	r3, #0
    5b0c:	2000      	movs	r0, #0
    5b0e:	2400      	movs	r4, #0
    5b10:	e778      	b.n	5a04 <__aeabi_fadd+0x90>
    5b12:	1c3a      	adds	r2, r7, #0
    5b14:	40ca      	lsrs	r2, r1
    5b16:	4694      	mov	ip, r2
    5b18:	2220      	movs	r2, #32
    5b1a:	1c3e      	adds	r6, r7, #0
    5b1c:	1a51      	subs	r1, r2, r1
    5b1e:	408e      	lsls	r6, r1
    5b20:	4662      	mov	r2, ip
    5b22:	1e77      	subs	r7, r6, #1
    5b24:	41be      	sbcs	r6, r7
    5b26:	4316      	orrs	r6, r2
    5b28:	e780      	b.n	5a2c <__aeabi_fadd+0xb8>
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d03e      	beq.n	5bac <__aeabi_fadd+0x238>
    5b2e:	43c0      	mvns	r0, r0
    5b30:	2800      	cmp	r0, #0
    5b32:	d0e4      	beq.n	5afe <__aeabi_fadd+0x18a>
    5b34:	2aff      	cmp	r2, #255	; 0xff
    5b36:	d1df      	bne.n	5af8 <__aeabi_fadd+0x184>
    5b38:	1c3b      	adds	r3, r7, #0
    5b3a:	24ff      	movs	r4, #255	; 0xff
    5b3c:	1c0d      	adds	r5, r1, #0
    5b3e:	e72f      	b.n	59a0 <__aeabi_fadd+0x2c>
    5b40:	2cff      	cmp	r4, #255	; 0xff
    5b42:	d000      	beq.n	5b46 <__aeabi_fadd+0x1d2>
    5b44:	e76f      	b.n	5a26 <__aeabi_fadd+0xb2>
    5b46:	e72b      	b.n	59a0 <__aeabi_fadd+0x2c>
    5b48:	24ff      	movs	r4, #255	; 0xff
    5b4a:	2300      	movs	r3, #0
    5b4c:	e75a      	b.n	5a04 <__aeabi_fadd+0x90>
    5b4e:	2c00      	cmp	r4, #0
    5b50:	d15a      	bne.n	5c08 <__aeabi_fadd+0x294>
    5b52:	2b00      	cmp	r3, #0
    5b54:	d07f      	beq.n	5c56 <__aeabi_fadd+0x2e2>
    5b56:	2f00      	cmp	r7, #0
    5b58:	d100      	bne.n	5b5c <__aeabi_fadd+0x1e8>
    5b5a:	e721      	b.n	59a0 <__aeabi_fadd+0x2c>
    5b5c:	19db      	adds	r3, r3, r7
    5b5e:	015a      	lsls	r2, r3, #5
    5b60:	d400      	bmi.n	5b64 <__aeabi_fadd+0x1f0>
    5b62:	e74c      	b.n	59fe <__aeabi_fadd+0x8a>
    5b64:	4a40      	ldr	r2, [pc, #256]	; (5c68 <__aeabi_fadd+0x2f4>)
    5b66:	3401      	adds	r4, #1
    5b68:	4013      	ands	r3, r2
    5b6a:	e719      	b.n	59a0 <__aeabi_fadd+0x2c>
    5b6c:	2c00      	cmp	r4, #0
    5b6e:	d115      	bne.n	5b9c <__aeabi_fadd+0x228>
    5b70:	2b00      	cmp	r3, #0
    5b72:	d12f      	bne.n	5bd4 <__aeabi_fadd+0x260>
    5b74:	2f00      	cmp	r7, #0
    5b76:	d05d      	beq.n	5c34 <__aeabi_fadd+0x2c0>
    5b78:	1c3b      	adds	r3, r7, #0
    5b7a:	1c0d      	adds	r5, r1, #0
    5b7c:	e710      	b.n	59a0 <__aeabi_fadd+0x2c>
    5b7e:	2c00      	cmp	r4, #0
    5b80:	d121      	bne.n	5bc6 <__aeabi_fadd+0x252>
    5b82:	2b00      	cmp	r3, #0
    5b84:	d053      	beq.n	5c2e <__aeabi_fadd+0x2ba>
    5b86:	43c9      	mvns	r1, r1
    5b88:	2900      	cmp	r1, #0
    5b8a:	d004      	beq.n	5b96 <__aeabi_fadd+0x222>
    5b8c:	2aff      	cmp	r2, #255	; 0xff
    5b8e:	d04b      	beq.n	5c28 <__aeabi_fadd+0x2b4>
    5b90:	291b      	cmp	r1, #27
    5b92:	dd57      	ble.n	5c44 <__aeabi_fadd+0x2d0>
    5b94:	2301      	movs	r3, #1
    5b96:	19db      	adds	r3, r3, r7
    5b98:	1c14      	adds	r4, r2, #0
    5b9a:	e748      	b.n	5a2e <__aeabi_fadd+0xba>
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d122      	bne.n	5be6 <__aeabi_fadd+0x272>
    5ba0:	2f00      	cmp	r7, #0
    5ba2:	d04a      	beq.n	5c3a <__aeabi_fadd+0x2c6>
    5ba4:	1c3b      	adds	r3, r7, #0
    5ba6:	1c0d      	adds	r5, r1, #0
    5ba8:	24ff      	movs	r4, #255	; 0xff
    5baa:	e6f9      	b.n	59a0 <__aeabi_fadd+0x2c>
    5bac:	1c3b      	adds	r3, r7, #0
    5bae:	1c14      	adds	r4, r2, #0
    5bb0:	1c0d      	adds	r5, r1, #0
    5bb2:	e6f5      	b.n	59a0 <__aeabi_fadd+0x2c>
    5bb4:	1c1d      	adds	r5, r3, #0
    5bb6:	2420      	movs	r4, #32
    5bb8:	40c5      	lsrs	r5, r0
    5bba:	1a20      	subs	r0, r4, r0
    5bbc:	4083      	lsls	r3, r0
    5bbe:	1e58      	subs	r0, r3, #1
    5bc0:	4183      	sbcs	r3, r0
    5bc2:	432b      	orrs	r3, r5
    5bc4:	e79b      	b.n	5afe <__aeabi_fadd+0x18a>
    5bc6:	2aff      	cmp	r2, #255	; 0xff
    5bc8:	d02e      	beq.n	5c28 <__aeabi_fadd+0x2b4>
    5bca:	2480      	movs	r4, #128	; 0x80
    5bcc:	04e4      	lsls	r4, r4, #19
    5bce:	4249      	negs	r1, r1
    5bd0:	4323      	orrs	r3, r4
    5bd2:	e7dd      	b.n	5b90 <__aeabi_fadd+0x21c>
    5bd4:	2f00      	cmp	r7, #0
    5bd6:	d100      	bne.n	5bda <__aeabi_fadd+0x266>
    5bd8:	e6e2      	b.n	59a0 <__aeabi_fadd+0x2c>
    5bda:	1bda      	subs	r2, r3, r7
    5bdc:	0150      	lsls	r0, r2, #5
    5bde:	d53c      	bpl.n	5c5a <__aeabi_fadd+0x2e6>
    5be0:	1afb      	subs	r3, r7, r3
    5be2:	1c0d      	adds	r5, r1, #0
    5be4:	e6dc      	b.n	59a0 <__aeabi_fadd+0x2c>
    5be6:	24ff      	movs	r4, #255	; 0xff
    5be8:	2f00      	cmp	r7, #0
    5bea:	d100      	bne.n	5bee <__aeabi_fadd+0x27a>
    5bec:	e6d8      	b.n	59a0 <__aeabi_fadd+0x2c>
    5bee:	2280      	movs	r2, #128	; 0x80
    5bf0:	08db      	lsrs	r3, r3, #3
    5bf2:	03d2      	lsls	r2, r2, #15
    5bf4:	4213      	tst	r3, r2
    5bf6:	d004      	beq.n	5c02 <__aeabi_fadd+0x28e>
    5bf8:	08fe      	lsrs	r6, r7, #3
    5bfa:	4216      	tst	r6, r2
    5bfc:	d101      	bne.n	5c02 <__aeabi_fadd+0x28e>
    5bfe:	1c33      	adds	r3, r6, #0
    5c00:	1c0d      	adds	r5, r1, #0
    5c02:	00db      	lsls	r3, r3, #3
    5c04:	24ff      	movs	r4, #255	; 0xff
    5c06:	e6cb      	b.n	59a0 <__aeabi_fadd+0x2c>
    5c08:	2b00      	cmp	r3, #0
    5c0a:	d00d      	beq.n	5c28 <__aeabi_fadd+0x2b4>
    5c0c:	24ff      	movs	r4, #255	; 0xff
    5c0e:	2f00      	cmp	r7, #0
    5c10:	d100      	bne.n	5c14 <__aeabi_fadd+0x2a0>
    5c12:	e6c5      	b.n	59a0 <__aeabi_fadd+0x2c>
    5c14:	2280      	movs	r2, #128	; 0x80
    5c16:	08db      	lsrs	r3, r3, #3
    5c18:	03d2      	lsls	r2, r2, #15
    5c1a:	4213      	tst	r3, r2
    5c1c:	d0f1      	beq.n	5c02 <__aeabi_fadd+0x28e>
    5c1e:	08fe      	lsrs	r6, r7, #3
    5c20:	4216      	tst	r6, r2
    5c22:	d1ee      	bne.n	5c02 <__aeabi_fadd+0x28e>
    5c24:	1c33      	adds	r3, r6, #0
    5c26:	e7ec      	b.n	5c02 <__aeabi_fadd+0x28e>
    5c28:	1c3b      	adds	r3, r7, #0
    5c2a:	24ff      	movs	r4, #255	; 0xff
    5c2c:	e6b8      	b.n	59a0 <__aeabi_fadd+0x2c>
    5c2e:	1c3b      	adds	r3, r7, #0
    5c30:	1c14      	adds	r4, r2, #0
    5c32:	e6b5      	b.n	59a0 <__aeabi_fadd+0x2c>
    5c34:	1c23      	adds	r3, r4, #0
    5c36:	2000      	movs	r0, #0
    5c38:	e6e4      	b.n	5a04 <__aeabi_fadd+0x90>
    5c3a:	2380      	movs	r3, #128	; 0x80
    5c3c:	2000      	movs	r0, #0
    5c3e:	049b      	lsls	r3, r3, #18
    5c40:	24ff      	movs	r4, #255	; 0xff
    5c42:	e6df      	b.n	5a04 <__aeabi_fadd+0x90>
    5c44:	1c1e      	adds	r6, r3, #0
    5c46:	2420      	movs	r4, #32
    5c48:	40ce      	lsrs	r6, r1
    5c4a:	1a61      	subs	r1, r4, r1
    5c4c:	408b      	lsls	r3, r1
    5c4e:	1e59      	subs	r1, r3, #1
    5c50:	418b      	sbcs	r3, r1
    5c52:	4333      	orrs	r3, r6
    5c54:	e79f      	b.n	5b96 <__aeabi_fadd+0x222>
    5c56:	1c3b      	adds	r3, r7, #0
    5c58:	e6a2      	b.n	59a0 <__aeabi_fadd+0x2c>
    5c5a:	1e13      	subs	r3, r2, #0
    5c5c:	d000      	beq.n	5c60 <__aeabi_fadd+0x2ec>
    5c5e:	e6ce      	b.n	59fe <__aeabi_fadd+0x8a>
    5c60:	2300      	movs	r3, #0
    5c62:	2000      	movs	r0, #0
    5c64:	e6ce      	b.n	5a04 <__aeabi_fadd+0x90>
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	fbffffff 	.word	0xfbffffff

00005c6c <__aeabi_fdiv>:
    5c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c6e:	4656      	mov	r6, sl
    5c70:	464d      	mov	r5, r9
    5c72:	465f      	mov	r7, fp
    5c74:	4644      	mov	r4, r8
    5c76:	b4f0      	push	{r4, r5, r6, r7}
    5c78:	0243      	lsls	r3, r0, #9
    5c7a:	0045      	lsls	r5, r0, #1
    5c7c:	0fc7      	lsrs	r7, r0, #31
    5c7e:	b083      	sub	sp, #12
    5c80:	468a      	mov	sl, r1
    5c82:	0a5c      	lsrs	r4, r3, #9
    5c84:	0e2e      	lsrs	r6, r5, #24
    5c86:	46b9      	mov	r9, r7
    5c88:	d041      	beq.n	5d0e <__aeabi_fdiv+0xa2>
    5c8a:	2eff      	cmp	r6, #255	; 0xff
    5c8c:	d026      	beq.n	5cdc <__aeabi_fdiv+0x70>
    5c8e:	2380      	movs	r3, #128	; 0x80
    5c90:	041b      	lsls	r3, r3, #16
    5c92:	4323      	orrs	r3, r4
    5c94:	00dc      	lsls	r4, r3, #3
    5c96:	2300      	movs	r3, #0
    5c98:	4698      	mov	r8, r3
    5c9a:	469b      	mov	fp, r3
    5c9c:	3e7f      	subs	r6, #127	; 0x7f
    5c9e:	4653      	mov	r3, sl
    5ca0:	025b      	lsls	r3, r3, #9
    5ca2:	0a5d      	lsrs	r5, r3, #9
    5ca4:	4653      	mov	r3, sl
    5ca6:	005a      	lsls	r2, r3, #1
    5ca8:	0fdb      	lsrs	r3, r3, #31
    5caa:	0e12      	lsrs	r2, r2, #24
    5cac:	469a      	mov	sl, r3
    5cae:	d039      	beq.n	5d24 <__aeabi_fdiv+0xb8>
    5cb0:	2aff      	cmp	r2, #255	; 0xff
    5cb2:	d033      	beq.n	5d1c <__aeabi_fdiv+0xb0>
    5cb4:	2380      	movs	r3, #128	; 0x80
    5cb6:	041b      	lsls	r3, r3, #16
    5cb8:	432b      	orrs	r3, r5
    5cba:	00dd      	lsls	r5, r3, #3
    5cbc:	2300      	movs	r3, #0
    5cbe:	3a7f      	subs	r2, #127	; 0x7f
    5cc0:	4651      	mov	r1, sl
    5cc2:	1ab2      	subs	r2, r6, r2
    5cc4:	4646      	mov	r6, r8
    5cc6:	4079      	eors	r1, r7
    5cc8:	1c08      	adds	r0, r1, #0
    5cca:	9201      	str	r2, [sp, #4]
    5ccc:	431e      	orrs	r6, r3
    5cce:	2e0f      	cmp	r6, #15
    5cd0:	d900      	bls.n	5cd4 <__aeabi_fdiv+0x68>
    5cd2:	e076      	b.n	5dc2 <__aeabi_fdiv+0x156>
    5cd4:	4a7e      	ldr	r2, [pc, #504]	; (5ed0 <__aeabi_fdiv+0x264>)
    5cd6:	00b6      	lsls	r6, r6, #2
    5cd8:	5996      	ldr	r6, [r2, r6]
    5cda:	46b7      	mov	pc, r6
    5cdc:	2c00      	cmp	r4, #0
    5cde:	d130      	bne.n	5d42 <__aeabi_fdiv+0xd6>
    5ce0:	2308      	movs	r3, #8
    5ce2:	4698      	mov	r8, r3
    5ce4:	3b06      	subs	r3, #6
    5ce6:	469b      	mov	fp, r3
    5ce8:	e7d9      	b.n	5c9e <__aeabi_fdiv+0x32>
    5cea:	2380      	movs	r3, #128	; 0x80
    5cec:	2100      	movs	r1, #0
    5cee:	03db      	lsls	r3, r3, #15
    5cf0:	24ff      	movs	r4, #255	; 0xff
    5cf2:	025b      	lsls	r3, r3, #9
    5cf4:	05e4      	lsls	r4, r4, #23
    5cf6:	0a5b      	lsrs	r3, r3, #9
    5cf8:	07c9      	lsls	r1, r1, #31
    5cfa:	4323      	orrs	r3, r4
    5cfc:	430b      	orrs	r3, r1
    5cfe:	1c18      	adds	r0, r3, #0
    5d00:	b003      	add	sp, #12
    5d02:	bc3c      	pop	{r2, r3, r4, r5}
    5d04:	4690      	mov	r8, r2
    5d06:	4699      	mov	r9, r3
    5d08:	46a2      	mov	sl, r4
    5d0a:	46ab      	mov	fp, r5
    5d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0e:	2c00      	cmp	r4, #0
    5d10:	d128      	bne.n	5d64 <__aeabi_fdiv+0xf8>
    5d12:	2304      	movs	r3, #4
    5d14:	4698      	mov	r8, r3
    5d16:	3b03      	subs	r3, #3
    5d18:	469b      	mov	fp, r3
    5d1a:	e7c0      	b.n	5c9e <__aeabi_fdiv+0x32>
    5d1c:	2d00      	cmp	r5, #0
    5d1e:	d11f      	bne.n	5d60 <__aeabi_fdiv+0xf4>
    5d20:	2302      	movs	r3, #2
    5d22:	e002      	b.n	5d2a <__aeabi_fdiv+0xbe>
    5d24:	2d00      	cmp	r5, #0
    5d26:	d111      	bne.n	5d4c <__aeabi_fdiv+0xe0>
    5d28:	2301      	movs	r3, #1
    5d2a:	1ab2      	subs	r2, r6, r2
    5d2c:	4650      	mov	r0, sl
    5d2e:	4646      	mov	r6, r8
    5d30:	4078      	eors	r0, r7
    5d32:	9201      	str	r2, [sp, #4]
    5d34:	431e      	orrs	r6, r3
    5d36:	2e0f      	cmp	r6, #15
    5d38:	d827      	bhi.n	5d8a <__aeabi_fdiv+0x11e>
    5d3a:	4966      	ldr	r1, [pc, #408]	; (5ed4 <__aeabi_fdiv+0x268>)
    5d3c:	00b6      	lsls	r6, r6, #2
    5d3e:	5989      	ldr	r1, [r1, r6]
    5d40:	468f      	mov	pc, r1
    5d42:	230c      	movs	r3, #12
    5d44:	4698      	mov	r8, r3
    5d46:	3b09      	subs	r3, #9
    5d48:	469b      	mov	fp, r3
    5d4a:	e7a8      	b.n	5c9e <__aeabi_fdiv+0x32>
    5d4c:	1c28      	adds	r0, r5, #0
    5d4e:	f7ff fdbb 	bl	58c8 <__clzsi2>
    5d52:	2276      	movs	r2, #118	; 0x76
    5d54:	1f43      	subs	r3, r0, #5
    5d56:	4252      	negs	r2, r2
    5d58:	409d      	lsls	r5, r3
    5d5a:	1a12      	subs	r2, r2, r0
    5d5c:	2300      	movs	r3, #0
    5d5e:	e7af      	b.n	5cc0 <__aeabi_fdiv+0x54>
    5d60:	2303      	movs	r3, #3
    5d62:	e7ad      	b.n	5cc0 <__aeabi_fdiv+0x54>
    5d64:	1c20      	adds	r0, r4, #0
    5d66:	f7ff fdaf 	bl	58c8 <__clzsi2>
    5d6a:	1f43      	subs	r3, r0, #5
    5d6c:	409c      	lsls	r4, r3
    5d6e:	2376      	movs	r3, #118	; 0x76
    5d70:	425b      	negs	r3, r3
    5d72:	1a1e      	subs	r6, r3, r0
    5d74:	2300      	movs	r3, #0
    5d76:	4698      	mov	r8, r3
    5d78:	469b      	mov	fp, r3
    5d7a:	e790      	b.n	5c9e <__aeabi_fdiv+0x32>
    5d7c:	2500      	movs	r5, #0
    5d7e:	46d1      	mov	r9, sl
    5d80:	469b      	mov	fp, r3
    5d82:	465b      	mov	r3, fp
    5d84:	4648      	mov	r0, r9
    5d86:	2b02      	cmp	r3, #2
    5d88:	d16f      	bne.n	5e6a <__aeabi_fdiv+0x1fe>
    5d8a:	2101      	movs	r1, #1
    5d8c:	24ff      	movs	r4, #255	; 0xff
    5d8e:	4001      	ands	r1, r0
    5d90:	2300      	movs	r3, #0
    5d92:	e7ae      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5d94:	237e      	movs	r3, #126	; 0x7e
    5d96:	9a01      	ldr	r2, [sp, #4]
    5d98:	425b      	negs	r3, r3
    5d9a:	1a9b      	subs	r3, r3, r2
    5d9c:	2b1b      	cmp	r3, #27
    5d9e:	dd6d      	ble.n	5e7c <__aeabi_fdiv+0x210>
    5da0:	2101      	movs	r1, #1
    5da2:	464b      	mov	r3, r9
    5da4:	4019      	ands	r1, r3
    5da6:	2400      	movs	r4, #0
    5da8:	2300      	movs	r3, #0
    5daa:	e7a2      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5dac:	2380      	movs	r3, #128	; 0x80
    5dae:	03db      	lsls	r3, r3, #15
    5db0:	421c      	tst	r4, r3
    5db2:	d149      	bne.n	5e48 <__aeabi_fdiv+0x1dc>
    5db4:	2380      	movs	r3, #128	; 0x80
    5db6:	03db      	lsls	r3, r3, #15
    5db8:	4323      	orrs	r3, r4
    5dba:	025b      	lsls	r3, r3, #9
    5dbc:	0a5b      	lsrs	r3, r3, #9
    5dbe:	1c39      	adds	r1, r7, #0
    5dc0:	e796      	b.n	5cf0 <__aeabi_fdiv+0x84>
    5dc2:	0163      	lsls	r3, r4, #5
    5dc4:	016d      	lsls	r5, r5, #5
    5dc6:	42ab      	cmp	r3, r5
    5dc8:	d337      	bcc.n	5e3a <__aeabi_fdiv+0x1ce>
    5dca:	4689      	mov	r9, r1
    5dcc:	201a      	movs	r0, #26
    5dce:	2101      	movs	r1, #1
    5dd0:	1b5b      	subs	r3, r3, r5
    5dd2:	2401      	movs	r4, #1
    5dd4:	1c1e      	adds	r6, r3, #0
    5dd6:	0049      	lsls	r1, r1, #1
    5dd8:	005b      	lsls	r3, r3, #1
    5dda:	2e00      	cmp	r6, #0
    5ddc:	db01      	blt.n	5de2 <__aeabi_fdiv+0x176>
    5dde:	42ab      	cmp	r3, r5
    5de0:	d301      	bcc.n	5de6 <__aeabi_fdiv+0x17a>
    5de2:	1b5b      	subs	r3, r3, r5
    5de4:	4321      	orrs	r1, r4
    5de6:	3801      	subs	r0, #1
    5de8:	2800      	cmp	r0, #0
    5dea:	d1f3      	bne.n	5dd4 <__aeabi_fdiv+0x168>
    5dec:	1e58      	subs	r0, r3, #1
    5dee:	4183      	sbcs	r3, r0
    5df0:	430b      	orrs	r3, r1
    5df2:	1c1d      	adds	r5, r3, #0
    5df4:	9c01      	ldr	r4, [sp, #4]
    5df6:	347f      	adds	r4, #127	; 0x7f
    5df8:	2c00      	cmp	r4, #0
    5dfa:	ddcb      	ble.n	5d94 <__aeabi_fdiv+0x128>
    5dfc:	076b      	lsls	r3, r5, #29
    5dfe:	d004      	beq.n	5e0a <__aeabi_fdiv+0x19e>
    5e00:	230f      	movs	r3, #15
    5e02:	402b      	ands	r3, r5
    5e04:	2b04      	cmp	r3, #4
    5e06:	d000      	beq.n	5e0a <__aeabi_fdiv+0x19e>
    5e08:	3504      	adds	r5, #4
    5e0a:	012b      	lsls	r3, r5, #4
    5e0c:	d504      	bpl.n	5e18 <__aeabi_fdiv+0x1ac>
    5e0e:	9a01      	ldr	r2, [sp, #4]
    5e10:	4b31      	ldr	r3, [pc, #196]	; (5ed8 <__aeabi_fdiv+0x26c>)
    5e12:	3280      	adds	r2, #128	; 0x80
    5e14:	1c14      	adds	r4, r2, #0
    5e16:	401d      	ands	r5, r3
    5e18:	2cfe      	cmp	r4, #254	; 0xfe
    5e1a:	dd07      	ble.n	5e2c <__aeabi_fdiv+0x1c0>
    5e1c:	464b      	mov	r3, r9
    5e1e:	2101      	movs	r1, #1
    5e20:	24ff      	movs	r4, #255	; 0xff
    5e22:	4019      	ands	r1, r3
    5e24:	2300      	movs	r3, #0
    5e26:	e764      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5e28:	1c25      	adds	r5, r4, #0
    5e2a:	e7aa      	b.n	5d82 <__aeabi_fdiv+0x116>
    5e2c:	2101      	movs	r1, #1
    5e2e:	464a      	mov	r2, r9
    5e30:	01ab      	lsls	r3, r5, #6
    5e32:	0a5b      	lsrs	r3, r3, #9
    5e34:	b2e4      	uxtb	r4, r4
    5e36:	4011      	ands	r1, r2
    5e38:	e75b      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5e3a:	9a01      	ldr	r2, [sp, #4]
    5e3c:	4689      	mov	r9, r1
    5e3e:	3a01      	subs	r2, #1
    5e40:	9201      	str	r2, [sp, #4]
    5e42:	201b      	movs	r0, #27
    5e44:	2100      	movs	r1, #0
    5e46:	e7c4      	b.n	5dd2 <__aeabi_fdiv+0x166>
    5e48:	421d      	tst	r5, r3
    5e4a:	d007      	beq.n	5e5c <__aeabi_fdiv+0x1f0>
    5e4c:	4323      	orrs	r3, r4
    5e4e:	025b      	lsls	r3, r3, #9
    5e50:	0a5b      	lsrs	r3, r3, #9
    5e52:	1c39      	adds	r1, r7, #0
    5e54:	e74c      	b.n	5cf0 <__aeabi_fdiv+0x84>
    5e56:	2500      	movs	r5, #0
    5e58:	0263      	lsls	r3, r4, #9
    5e5a:	d5ab      	bpl.n	5db4 <__aeabi_fdiv+0x148>
    5e5c:	2380      	movs	r3, #128	; 0x80
    5e5e:	03db      	lsls	r3, r3, #15
    5e60:	432b      	orrs	r3, r5
    5e62:	025b      	lsls	r3, r3, #9
    5e64:	0a5b      	lsrs	r3, r3, #9
    5e66:	4651      	mov	r1, sl
    5e68:	e742      	b.n	5cf0 <__aeabi_fdiv+0x84>
    5e6a:	2b03      	cmp	r3, #3
    5e6c:	d025      	beq.n	5eba <__aeabi_fdiv+0x24e>
    5e6e:	2b01      	cmp	r3, #1
    5e70:	d1c0      	bne.n	5df4 <__aeabi_fdiv+0x188>
    5e72:	2101      	movs	r1, #1
    5e74:	2400      	movs	r4, #0
    5e76:	4001      	ands	r1, r0
    5e78:	2300      	movs	r3, #0
    5e7a:	e73a      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5e7c:	1c29      	adds	r1, r5, #0
    5e7e:	40d9      	lsrs	r1, r3
    5e80:	1c2b      	adds	r3, r5, #0
    5e82:	9a01      	ldr	r2, [sp, #4]
    5e84:	329e      	adds	r2, #158	; 0x9e
    5e86:	4093      	lsls	r3, r2
    5e88:	1e5d      	subs	r5, r3, #1
    5e8a:	41ab      	sbcs	r3, r5
    5e8c:	430b      	orrs	r3, r1
    5e8e:	075a      	lsls	r2, r3, #29
    5e90:	d004      	beq.n	5e9c <__aeabi_fdiv+0x230>
    5e92:	220f      	movs	r2, #15
    5e94:	401a      	ands	r2, r3
    5e96:	2a04      	cmp	r2, #4
    5e98:	d000      	beq.n	5e9c <__aeabi_fdiv+0x230>
    5e9a:	3304      	adds	r3, #4
    5e9c:	015a      	lsls	r2, r3, #5
    5e9e:	d505      	bpl.n	5eac <__aeabi_fdiv+0x240>
    5ea0:	464b      	mov	r3, r9
    5ea2:	2101      	movs	r1, #1
    5ea4:	2401      	movs	r4, #1
    5ea6:	4019      	ands	r1, r3
    5ea8:	2300      	movs	r3, #0
    5eaa:	e722      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5eac:	2101      	movs	r1, #1
    5eae:	464a      	mov	r2, r9
    5eb0:	019b      	lsls	r3, r3, #6
    5eb2:	0a5b      	lsrs	r3, r3, #9
    5eb4:	4011      	ands	r1, r2
    5eb6:	2400      	movs	r4, #0
    5eb8:	e71b      	b.n	5cf2 <__aeabi_fdiv+0x86>
    5eba:	2380      	movs	r3, #128	; 0x80
    5ebc:	2101      	movs	r1, #1
    5ebe:	464a      	mov	r2, r9
    5ec0:	03db      	lsls	r3, r3, #15
    5ec2:	432b      	orrs	r3, r5
    5ec4:	025b      	lsls	r3, r3, #9
    5ec6:	400a      	ands	r2, r1
    5ec8:	0a5b      	lsrs	r3, r3, #9
    5eca:	1c11      	adds	r1, r2, #0
    5ecc:	e710      	b.n	5cf0 <__aeabi_fdiv+0x84>
    5ece:	46c0      	nop			; (mov r8, r8)
    5ed0:	000079f0 	.word	0x000079f0
    5ed4:	00007a30 	.word	0x00007a30
    5ed8:	f7ffffff 	.word	0xf7ffffff

00005edc <__aeabi_fmul>:
    5edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ede:	465f      	mov	r7, fp
    5ee0:	4656      	mov	r6, sl
    5ee2:	464d      	mov	r5, r9
    5ee4:	4644      	mov	r4, r8
    5ee6:	b4f0      	push	{r4, r5, r6, r7}
    5ee8:	0245      	lsls	r5, r0, #9
    5eea:	0046      	lsls	r6, r0, #1
    5eec:	0fc4      	lsrs	r4, r0, #31
    5eee:	b083      	sub	sp, #12
    5ef0:	1c0f      	adds	r7, r1, #0
    5ef2:	0a6d      	lsrs	r5, r5, #9
    5ef4:	0e36      	lsrs	r6, r6, #24
    5ef6:	46a3      	mov	fp, r4
    5ef8:	d045      	beq.n	5f86 <__aeabi_fmul+0xaa>
    5efa:	2eff      	cmp	r6, #255	; 0xff
    5efc:	d025      	beq.n	5f4a <__aeabi_fmul+0x6e>
    5efe:	2380      	movs	r3, #128	; 0x80
    5f00:	041b      	lsls	r3, r3, #16
    5f02:	431d      	orrs	r5, r3
    5f04:	2300      	movs	r3, #0
    5f06:	469a      	mov	sl, r3
    5f08:	00ed      	lsls	r5, r5, #3
    5f0a:	3e7f      	subs	r6, #127	; 0x7f
    5f0c:	9301      	str	r3, [sp, #4]
    5f0e:	027b      	lsls	r3, r7, #9
    5f10:	0a5b      	lsrs	r3, r3, #9
    5f12:	4698      	mov	r8, r3
    5f14:	0078      	lsls	r0, r7, #1
    5f16:	0ffb      	lsrs	r3, r7, #31
    5f18:	0e00      	lsrs	r0, r0, #24
    5f1a:	4699      	mov	r9, r3
    5f1c:	d040      	beq.n	5fa0 <__aeabi_fmul+0xc4>
    5f1e:	28ff      	cmp	r0, #255	; 0xff
    5f20:	d038      	beq.n	5f94 <__aeabi_fmul+0xb8>
    5f22:	2380      	movs	r3, #128	; 0x80
    5f24:	4642      	mov	r2, r8
    5f26:	041b      	lsls	r3, r3, #16
    5f28:	4313      	orrs	r3, r2
    5f2a:	00db      	lsls	r3, r3, #3
    5f2c:	4698      	mov	r8, r3
    5f2e:	2300      	movs	r3, #0
    5f30:	387f      	subs	r0, #127	; 0x7f
    5f32:	464a      	mov	r2, r9
    5f34:	9f01      	ldr	r7, [sp, #4]
    5f36:	1830      	adds	r0, r6, r0
    5f38:	4062      	eors	r2, r4
    5f3a:	1c41      	adds	r1, r0, #1
    5f3c:	431f      	orrs	r7, r3
    5f3e:	2f0f      	cmp	r7, #15
    5f40:	d869      	bhi.n	6016 <__aeabi_fmul+0x13a>
    5f42:	4e7d      	ldr	r6, [pc, #500]	; (6138 <__aeabi_fmul+0x25c>)
    5f44:	00bf      	lsls	r7, r7, #2
    5f46:	59f6      	ldr	r6, [r6, r7]
    5f48:	46b7      	mov	pc, r6
    5f4a:	2d00      	cmp	r5, #0
    5f4c:	d145      	bne.n	5fda <__aeabi_fmul+0xfe>
    5f4e:	2308      	movs	r3, #8
    5f50:	9301      	str	r3, [sp, #4]
    5f52:	3b06      	subs	r3, #6
    5f54:	469a      	mov	sl, r3
    5f56:	e7da      	b.n	5f0e <__aeabi_fmul+0x32>
    5f58:	4693      	mov	fp, r2
    5f5a:	4653      	mov	r3, sl
    5f5c:	2b02      	cmp	r3, #2
    5f5e:	d12f      	bne.n	5fc0 <__aeabi_fmul+0xe4>
    5f60:	465b      	mov	r3, fp
    5f62:	2401      	movs	r4, #1
    5f64:	2500      	movs	r5, #0
    5f66:	401c      	ands	r4, r3
    5f68:	23ff      	movs	r3, #255	; 0xff
    5f6a:	026d      	lsls	r5, r5, #9
    5f6c:	05db      	lsls	r3, r3, #23
    5f6e:	0a6d      	lsrs	r5, r5, #9
    5f70:	07e4      	lsls	r4, r4, #31
    5f72:	431d      	orrs	r5, r3
    5f74:	4325      	orrs	r5, r4
    5f76:	1c28      	adds	r0, r5, #0
    5f78:	b003      	add	sp, #12
    5f7a:	bc3c      	pop	{r2, r3, r4, r5}
    5f7c:	4690      	mov	r8, r2
    5f7e:	4699      	mov	r9, r3
    5f80:	46a2      	mov	sl, r4
    5f82:	46ab      	mov	fp, r5
    5f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f86:	2d00      	cmp	r5, #0
    5f88:	d12c      	bne.n	5fe4 <__aeabi_fmul+0x108>
    5f8a:	2304      	movs	r3, #4
    5f8c:	9301      	str	r3, [sp, #4]
    5f8e:	3b03      	subs	r3, #3
    5f90:	469a      	mov	sl, r3
    5f92:	e7bc      	b.n	5f0e <__aeabi_fmul+0x32>
    5f94:	4643      	mov	r3, r8
    5f96:	425a      	negs	r2, r3
    5f98:	4153      	adcs	r3, r2
    5f9a:	2203      	movs	r2, #3
    5f9c:	1ad3      	subs	r3, r2, r3
    5f9e:	e7c8      	b.n	5f32 <__aeabi_fmul+0x56>
    5fa0:	4642      	mov	r2, r8
    5fa2:	2301      	movs	r3, #1
    5fa4:	2a00      	cmp	r2, #0
    5fa6:	d0c4      	beq.n	5f32 <__aeabi_fmul+0x56>
    5fa8:	4640      	mov	r0, r8
    5faa:	f7ff fc8d 	bl	58c8 <__clzsi2>
    5fae:	4642      	mov	r2, r8
    5fb0:	1f43      	subs	r3, r0, #5
    5fb2:	409a      	lsls	r2, r3
    5fb4:	2376      	movs	r3, #118	; 0x76
    5fb6:	425b      	negs	r3, r3
    5fb8:	1a18      	subs	r0, r3, r0
    5fba:	4690      	mov	r8, r2
    5fbc:	2300      	movs	r3, #0
    5fbe:	e7b8      	b.n	5f32 <__aeabi_fmul+0x56>
    5fc0:	2b03      	cmp	r3, #3
    5fc2:	d100      	bne.n	5fc6 <__aeabi_fmul+0xea>
    5fc4:	e0ad      	b.n	6122 <__aeabi_fmul+0x246>
    5fc6:	2b01      	cmp	r3, #1
    5fc8:	d000      	beq.n	5fcc <__aeabi_fmul+0xf0>
    5fca:	e08c      	b.n	60e6 <__aeabi_fmul+0x20a>
    5fcc:	465b      	mov	r3, fp
    5fce:	4654      	mov	r4, sl
    5fd0:	401c      	ands	r4, r3
    5fd2:	b2e4      	uxtb	r4, r4
    5fd4:	2300      	movs	r3, #0
    5fd6:	2500      	movs	r5, #0
    5fd8:	e7c7      	b.n	5f6a <__aeabi_fmul+0x8e>
    5fda:	230c      	movs	r3, #12
    5fdc:	9301      	str	r3, [sp, #4]
    5fde:	3b09      	subs	r3, #9
    5fe0:	469a      	mov	sl, r3
    5fe2:	e794      	b.n	5f0e <__aeabi_fmul+0x32>
    5fe4:	1c28      	adds	r0, r5, #0
    5fe6:	f7ff fc6f 	bl	58c8 <__clzsi2>
    5fea:	2676      	movs	r6, #118	; 0x76
    5fec:	1f43      	subs	r3, r0, #5
    5fee:	409d      	lsls	r5, r3
    5ff0:	2300      	movs	r3, #0
    5ff2:	4276      	negs	r6, r6
    5ff4:	1a36      	subs	r6, r6, r0
    5ff6:	9301      	str	r3, [sp, #4]
    5ff8:	469a      	mov	sl, r3
    5ffa:	e788      	b.n	5f0e <__aeabi_fmul+0x32>
    5ffc:	2580      	movs	r5, #128	; 0x80
    5ffe:	2400      	movs	r4, #0
    6000:	03ed      	lsls	r5, r5, #15
    6002:	23ff      	movs	r3, #255	; 0xff
    6004:	e7b1      	b.n	5f6a <__aeabi_fmul+0x8e>
    6006:	4645      	mov	r5, r8
    6008:	46cb      	mov	fp, r9
    600a:	469a      	mov	sl, r3
    600c:	e7a5      	b.n	5f5a <__aeabi_fmul+0x7e>
    600e:	4645      	mov	r5, r8
    6010:	4693      	mov	fp, r2
    6012:	469a      	mov	sl, r3
    6014:	e7a1      	b.n	5f5a <__aeabi_fmul+0x7e>
    6016:	4643      	mov	r3, r8
    6018:	042c      	lsls	r4, r5, #16
    601a:	0c1b      	lsrs	r3, r3, #16
    601c:	469c      	mov	ip, r3
    601e:	0c23      	lsrs	r3, r4, #16
    6020:	4644      	mov	r4, r8
    6022:	0426      	lsls	r6, r4, #16
    6024:	1c1c      	adds	r4, r3, #0
    6026:	0c36      	lsrs	r6, r6, #16
    6028:	0c2f      	lsrs	r7, r5, #16
    602a:	4374      	muls	r4, r6
    602c:	1c35      	adds	r5, r6, #0
    602e:	4666      	mov	r6, ip
    6030:	437d      	muls	r5, r7
    6032:	4373      	muls	r3, r6
    6034:	4377      	muls	r7, r6
    6036:	18eb      	adds	r3, r5, r3
    6038:	0c26      	lsrs	r6, r4, #16
    603a:	199e      	adds	r6, r3, r6
    603c:	42b5      	cmp	r5, r6
    603e:	d903      	bls.n	6048 <__aeabi_fmul+0x16c>
    6040:	2380      	movs	r3, #128	; 0x80
    6042:	025b      	lsls	r3, r3, #9
    6044:	469c      	mov	ip, r3
    6046:	4467      	add	r7, ip
    6048:	0424      	lsls	r4, r4, #16
    604a:	0433      	lsls	r3, r6, #16
    604c:	0c24      	lsrs	r4, r4, #16
    604e:	191b      	adds	r3, r3, r4
    6050:	019d      	lsls	r5, r3, #6
    6052:	1e6c      	subs	r4, r5, #1
    6054:	41a5      	sbcs	r5, r4
    6056:	0e9b      	lsrs	r3, r3, #26
    6058:	0c36      	lsrs	r6, r6, #16
    605a:	432b      	orrs	r3, r5
    605c:	19bd      	adds	r5, r7, r6
    605e:	01ad      	lsls	r5, r5, #6
    6060:	431d      	orrs	r5, r3
    6062:	012b      	lsls	r3, r5, #4
    6064:	d504      	bpl.n	6070 <__aeabi_fmul+0x194>
    6066:	2301      	movs	r3, #1
    6068:	0868      	lsrs	r0, r5, #1
    606a:	401d      	ands	r5, r3
    606c:	4305      	orrs	r5, r0
    606e:	1c08      	adds	r0, r1, #0
    6070:	1c03      	adds	r3, r0, #0
    6072:	337f      	adds	r3, #127	; 0x7f
    6074:	2b00      	cmp	r3, #0
    6076:	dd2c      	ble.n	60d2 <__aeabi_fmul+0x1f6>
    6078:	0769      	lsls	r1, r5, #29
    607a:	d004      	beq.n	6086 <__aeabi_fmul+0x1aa>
    607c:	210f      	movs	r1, #15
    607e:	4029      	ands	r1, r5
    6080:	2904      	cmp	r1, #4
    6082:	d000      	beq.n	6086 <__aeabi_fmul+0x1aa>
    6084:	3504      	adds	r5, #4
    6086:	0129      	lsls	r1, r5, #4
    6088:	d503      	bpl.n	6092 <__aeabi_fmul+0x1b6>
    608a:	4b2c      	ldr	r3, [pc, #176]	; (613c <__aeabi_fmul+0x260>)
    608c:	401d      	ands	r5, r3
    608e:	1c03      	adds	r3, r0, #0
    6090:	3380      	adds	r3, #128	; 0x80
    6092:	2bfe      	cmp	r3, #254	; 0xfe
    6094:	dd17      	ble.n	60c6 <__aeabi_fmul+0x1ea>
    6096:	2401      	movs	r4, #1
    6098:	23ff      	movs	r3, #255	; 0xff
    609a:	4014      	ands	r4, r2
    609c:	2500      	movs	r5, #0
    609e:	e764      	b.n	5f6a <__aeabi_fmul+0x8e>
    60a0:	2080      	movs	r0, #128	; 0x80
    60a2:	03c0      	lsls	r0, r0, #15
    60a4:	4205      	tst	r5, r0
    60a6:	d009      	beq.n	60bc <__aeabi_fmul+0x1e0>
    60a8:	4643      	mov	r3, r8
    60aa:	4203      	tst	r3, r0
    60ac:	d106      	bne.n	60bc <__aeabi_fmul+0x1e0>
    60ae:	4645      	mov	r5, r8
    60b0:	4305      	orrs	r5, r0
    60b2:	026d      	lsls	r5, r5, #9
    60b4:	0a6d      	lsrs	r5, r5, #9
    60b6:	464c      	mov	r4, r9
    60b8:	23ff      	movs	r3, #255	; 0xff
    60ba:	e756      	b.n	5f6a <__aeabi_fmul+0x8e>
    60bc:	4305      	orrs	r5, r0
    60be:	026d      	lsls	r5, r5, #9
    60c0:	0a6d      	lsrs	r5, r5, #9
    60c2:	23ff      	movs	r3, #255	; 0xff
    60c4:	e751      	b.n	5f6a <__aeabi_fmul+0x8e>
    60c6:	2401      	movs	r4, #1
    60c8:	01ad      	lsls	r5, r5, #6
    60ca:	0a6d      	lsrs	r5, r5, #9
    60cc:	b2db      	uxtb	r3, r3
    60ce:	4014      	ands	r4, r2
    60d0:	e74b      	b.n	5f6a <__aeabi_fmul+0x8e>
    60d2:	237e      	movs	r3, #126	; 0x7e
    60d4:	425b      	negs	r3, r3
    60d6:	1a1b      	subs	r3, r3, r0
    60d8:	2b1b      	cmp	r3, #27
    60da:	dd07      	ble.n	60ec <__aeabi_fmul+0x210>
    60dc:	2401      	movs	r4, #1
    60de:	2300      	movs	r3, #0
    60e0:	4014      	ands	r4, r2
    60e2:	2500      	movs	r5, #0
    60e4:	e741      	b.n	5f6a <__aeabi_fmul+0x8e>
    60e6:	1c08      	adds	r0, r1, #0
    60e8:	465a      	mov	r2, fp
    60ea:	e7c1      	b.n	6070 <__aeabi_fmul+0x194>
    60ec:	309e      	adds	r0, #158	; 0x9e
    60ee:	1c29      	adds	r1, r5, #0
    60f0:	4085      	lsls	r5, r0
    60f2:	40d9      	lsrs	r1, r3
    60f4:	1e68      	subs	r0, r5, #1
    60f6:	4185      	sbcs	r5, r0
    60f8:	430d      	orrs	r5, r1
    60fa:	076b      	lsls	r3, r5, #29
    60fc:	d004      	beq.n	6108 <__aeabi_fmul+0x22c>
    60fe:	230f      	movs	r3, #15
    6100:	402b      	ands	r3, r5
    6102:	2b04      	cmp	r3, #4
    6104:	d000      	beq.n	6108 <__aeabi_fmul+0x22c>
    6106:	3504      	adds	r5, #4
    6108:	016b      	lsls	r3, r5, #5
    610a:	d504      	bpl.n	6116 <__aeabi_fmul+0x23a>
    610c:	2401      	movs	r4, #1
    610e:	2301      	movs	r3, #1
    6110:	4014      	ands	r4, r2
    6112:	2500      	movs	r5, #0
    6114:	e729      	b.n	5f6a <__aeabi_fmul+0x8e>
    6116:	2401      	movs	r4, #1
    6118:	01ad      	lsls	r5, r5, #6
    611a:	0a6d      	lsrs	r5, r5, #9
    611c:	4014      	ands	r4, r2
    611e:	2300      	movs	r3, #0
    6120:	e723      	b.n	5f6a <__aeabi_fmul+0x8e>
    6122:	2380      	movs	r3, #128	; 0x80
    6124:	03db      	lsls	r3, r3, #15
    6126:	431d      	orrs	r5, r3
    6128:	2401      	movs	r4, #1
    612a:	465b      	mov	r3, fp
    612c:	026d      	lsls	r5, r5, #9
    612e:	4023      	ands	r3, r4
    6130:	1c1c      	adds	r4, r3, #0
    6132:	0a6d      	lsrs	r5, r5, #9
    6134:	23ff      	movs	r3, #255	; 0xff
    6136:	e718      	b.n	5f6a <__aeabi_fmul+0x8e>
    6138:	00007a70 	.word	0x00007a70
    613c:	f7ffffff 	.word	0xf7ffffff

00006140 <__aeabi_fsub>:
    6140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6142:	004a      	lsls	r2, r1, #1
    6144:	0243      	lsls	r3, r0, #9
    6146:	0044      	lsls	r4, r0, #1
    6148:	024d      	lsls	r5, r1, #9
    614a:	0fc0      	lsrs	r0, r0, #31
    614c:	0e24      	lsrs	r4, r4, #24
    614e:	1c06      	adds	r6, r0, #0
    6150:	099b      	lsrs	r3, r3, #6
    6152:	0e12      	lsrs	r2, r2, #24
    6154:	0fc9      	lsrs	r1, r1, #31
    6156:	09ad      	lsrs	r5, r5, #6
    6158:	2aff      	cmp	r2, #255	; 0xff
    615a:	d100      	bne.n	615e <__aeabi_fsub+0x1e>
    615c:	e075      	b.n	624a <__aeabi_fsub+0x10a>
    615e:	2701      	movs	r7, #1
    6160:	4079      	eors	r1, r7
    6162:	4288      	cmp	r0, r1
    6164:	d050      	beq.n	6208 <__aeabi_fsub+0xc8>
    6166:	1aa0      	subs	r0, r4, r2
    6168:	2800      	cmp	r0, #0
    616a:	dc00      	bgt.n	616e <__aeabi_fsub+0x2e>
    616c:	e08f      	b.n	628e <__aeabi_fsub+0x14e>
    616e:	2a00      	cmp	r2, #0
    6170:	d11e      	bne.n	61b0 <__aeabi_fsub+0x70>
    6172:	2d00      	cmp	r5, #0
    6174:	d000      	beq.n	6178 <__aeabi_fsub+0x38>
    6176:	e075      	b.n	6264 <__aeabi_fsub+0x124>
    6178:	075a      	lsls	r2, r3, #29
    617a:	d004      	beq.n	6186 <__aeabi_fsub+0x46>
    617c:	220f      	movs	r2, #15
    617e:	401a      	ands	r2, r3
    6180:	2a04      	cmp	r2, #4
    6182:	d000      	beq.n	6186 <__aeabi_fsub+0x46>
    6184:	3304      	adds	r3, #4
    6186:	2280      	movs	r2, #128	; 0x80
    6188:	2001      	movs	r0, #1
    618a:	04d2      	lsls	r2, r2, #19
    618c:	401a      	ands	r2, r3
    618e:	4030      	ands	r0, r6
    6190:	2a00      	cmp	r2, #0
    6192:	d032      	beq.n	61fa <__aeabi_fsub+0xba>
    6194:	3401      	adds	r4, #1
    6196:	2cff      	cmp	r4, #255	; 0xff
    6198:	d100      	bne.n	619c <__aeabi_fsub+0x5c>
    619a:	e084      	b.n	62a6 <__aeabi_fsub+0x166>
    619c:	019b      	lsls	r3, r3, #6
    619e:	0a5b      	lsrs	r3, r3, #9
    61a0:	b2e4      	uxtb	r4, r4
    61a2:	025b      	lsls	r3, r3, #9
    61a4:	05e4      	lsls	r4, r4, #23
    61a6:	0a5b      	lsrs	r3, r3, #9
    61a8:	4323      	orrs	r3, r4
    61aa:	07c0      	lsls	r0, r0, #31
    61ac:	4318      	orrs	r0, r3
    61ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61b0:	2cff      	cmp	r4, #255	; 0xff
    61b2:	d0e1      	beq.n	6178 <__aeabi_fsub+0x38>
    61b4:	2280      	movs	r2, #128	; 0x80
    61b6:	04d2      	lsls	r2, r2, #19
    61b8:	4315      	orrs	r5, r2
    61ba:	281b      	cmp	r0, #27
    61bc:	dd7a      	ble.n	62b4 <__aeabi_fsub+0x174>
    61be:	2501      	movs	r5, #1
    61c0:	1b5b      	subs	r3, r3, r5
    61c2:	015a      	lsls	r2, r3, #5
    61c4:	d55d      	bpl.n	6282 <__aeabi_fsub+0x142>
    61c6:	019b      	lsls	r3, r3, #6
    61c8:	099f      	lsrs	r7, r3, #6
    61ca:	1c38      	adds	r0, r7, #0
    61cc:	f7ff fb7c 	bl	58c8 <__clzsi2>
    61d0:	3805      	subs	r0, #5
    61d2:	4087      	lsls	r7, r0
    61d4:	4284      	cmp	r4, r0
    61d6:	dc69      	bgt.n	62ac <__aeabi_fsub+0x16c>
    61d8:	1b00      	subs	r0, r0, r4
    61da:	241f      	movs	r4, #31
    61dc:	1c3a      	adds	r2, r7, #0
    61de:	1c43      	adds	r3, r0, #1
    61e0:	1a20      	subs	r0, r4, r0
    61e2:	40da      	lsrs	r2, r3
    61e4:	4087      	lsls	r7, r0
    61e6:	1c13      	adds	r3, r2, #0
    61e8:	1e7c      	subs	r4, r7, #1
    61ea:	41a7      	sbcs	r7, r4
    61ec:	2400      	movs	r4, #0
    61ee:	433b      	orrs	r3, r7
    61f0:	e7c2      	b.n	6178 <__aeabi_fsub+0x38>
    61f2:	1e13      	subs	r3, r2, #0
    61f4:	d145      	bne.n	6282 <__aeabi_fsub+0x142>
    61f6:	2300      	movs	r3, #0
    61f8:	2000      	movs	r0, #0
    61fa:	08db      	lsrs	r3, r3, #3
    61fc:	2cff      	cmp	r4, #255	; 0xff
    61fe:	d028      	beq.n	6252 <__aeabi_fsub+0x112>
    6200:	025b      	lsls	r3, r3, #9
    6202:	0a5b      	lsrs	r3, r3, #9
    6204:	b2e4      	uxtb	r4, r4
    6206:	e7cc      	b.n	61a2 <__aeabi_fsub+0x62>
    6208:	1aa1      	subs	r1, r4, r2
    620a:	2900      	cmp	r1, #0
    620c:	dd5b      	ble.n	62c6 <__aeabi_fsub+0x186>
    620e:	2a00      	cmp	r2, #0
    6210:	d02e      	beq.n	6270 <__aeabi_fsub+0x130>
    6212:	2cff      	cmp	r4, #255	; 0xff
    6214:	d0b0      	beq.n	6178 <__aeabi_fsub+0x38>
    6216:	2280      	movs	r2, #128	; 0x80
    6218:	04d2      	lsls	r2, r2, #19
    621a:	4315      	orrs	r5, r2
    621c:	291b      	cmp	r1, #27
    621e:	dc74      	bgt.n	630a <__aeabi_fsub+0x1ca>
    6220:	1c2f      	adds	r7, r5, #0
    6222:	2220      	movs	r2, #32
    6224:	40cf      	lsrs	r7, r1
    6226:	1a51      	subs	r1, r2, r1
    6228:	408d      	lsls	r5, r1
    622a:	1e69      	subs	r1, r5, #1
    622c:	418d      	sbcs	r5, r1
    622e:	433d      	orrs	r5, r7
    6230:	195b      	adds	r3, r3, r5
    6232:	015a      	lsls	r2, r3, #5
    6234:	d525      	bpl.n	6282 <__aeabi_fsub+0x142>
    6236:	3401      	adds	r4, #1
    6238:	2cff      	cmp	r4, #255	; 0xff
    623a:	d074      	beq.n	6326 <__aeabi_fsub+0x1e6>
    623c:	2101      	movs	r1, #1
    623e:	4a7e      	ldr	r2, [pc, #504]	; (6438 <__aeabi_fsub+0x2f8>)
    6240:	4019      	ands	r1, r3
    6242:	4013      	ands	r3, r2
    6244:	085b      	lsrs	r3, r3, #1
    6246:	430b      	orrs	r3, r1
    6248:	e796      	b.n	6178 <__aeabi_fsub+0x38>
    624a:	2d00      	cmp	r5, #0
    624c:	d000      	beq.n	6250 <__aeabi_fsub+0x110>
    624e:	e788      	b.n	6162 <__aeabi_fsub+0x22>
    6250:	e785      	b.n	615e <__aeabi_fsub+0x1e>
    6252:	2b00      	cmp	r3, #0
    6254:	d027      	beq.n	62a6 <__aeabi_fsub+0x166>
    6256:	2280      	movs	r2, #128	; 0x80
    6258:	03d2      	lsls	r2, r2, #15
    625a:	4313      	orrs	r3, r2
    625c:	025b      	lsls	r3, r3, #9
    625e:	0a5b      	lsrs	r3, r3, #9
    6260:	24ff      	movs	r4, #255	; 0xff
    6262:	e79e      	b.n	61a2 <__aeabi_fsub+0x62>
    6264:	3801      	subs	r0, #1
    6266:	2800      	cmp	r0, #0
    6268:	d0aa      	beq.n	61c0 <__aeabi_fsub+0x80>
    626a:	2cff      	cmp	r4, #255	; 0xff
    626c:	d1a5      	bne.n	61ba <__aeabi_fsub+0x7a>
    626e:	e783      	b.n	6178 <__aeabi_fsub+0x38>
    6270:	2d00      	cmp	r5, #0
    6272:	d100      	bne.n	6276 <__aeabi_fsub+0x136>
    6274:	e780      	b.n	6178 <__aeabi_fsub+0x38>
    6276:	3901      	subs	r1, #1
    6278:	2900      	cmp	r1, #0
    627a:	d0d9      	beq.n	6230 <__aeabi_fsub+0xf0>
    627c:	2cff      	cmp	r4, #255	; 0xff
    627e:	d1cd      	bne.n	621c <__aeabi_fsub+0xdc>
    6280:	e77a      	b.n	6178 <__aeabi_fsub+0x38>
    6282:	075a      	lsls	r2, r3, #29
    6284:	d000      	beq.n	6288 <__aeabi_fsub+0x148>
    6286:	e779      	b.n	617c <__aeabi_fsub+0x3c>
    6288:	2001      	movs	r0, #1
    628a:	4030      	ands	r0, r6
    628c:	e7b5      	b.n	61fa <__aeabi_fsub+0xba>
    628e:	2800      	cmp	r0, #0
    6290:	d125      	bne.n	62de <__aeabi_fsub+0x19e>
    6292:	1c62      	adds	r2, r4, #1
    6294:	b2d2      	uxtb	r2, r2
    6296:	2a01      	cmp	r2, #1
    6298:	dd55      	ble.n	6346 <__aeabi_fsub+0x206>
    629a:	1b5f      	subs	r7, r3, r5
    629c:	017a      	lsls	r2, r7, #5
    629e:	d52d      	bpl.n	62fc <__aeabi_fsub+0x1bc>
    62a0:	1aef      	subs	r7, r5, r3
    62a2:	1c0e      	adds	r6, r1, #0
    62a4:	e791      	b.n	61ca <__aeabi_fsub+0x8a>
    62a6:	24ff      	movs	r4, #255	; 0xff
    62a8:	2300      	movs	r3, #0
    62aa:	e77a      	b.n	61a2 <__aeabi_fsub+0x62>
    62ac:	4b62      	ldr	r3, [pc, #392]	; (6438 <__aeabi_fsub+0x2f8>)
    62ae:	1a24      	subs	r4, r4, r0
    62b0:	403b      	ands	r3, r7
    62b2:	e761      	b.n	6178 <__aeabi_fsub+0x38>
    62b4:	1c29      	adds	r1, r5, #0
    62b6:	2220      	movs	r2, #32
    62b8:	40c1      	lsrs	r1, r0
    62ba:	1a10      	subs	r0, r2, r0
    62bc:	4085      	lsls	r5, r0
    62be:	1e68      	subs	r0, r5, #1
    62c0:	4185      	sbcs	r5, r0
    62c2:	430d      	orrs	r5, r1
    62c4:	e77c      	b.n	61c0 <__aeabi_fsub+0x80>
    62c6:	2900      	cmp	r1, #0
    62c8:	d146      	bne.n	6358 <__aeabi_fsub+0x218>
    62ca:	1c62      	adds	r2, r4, #1
    62cc:	b2d1      	uxtb	r1, r2
    62ce:	2901      	cmp	r1, #1
    62d0:	dd2b      	ble.n	632a <__aeabi_fsub+0x1ea>
    62d2:	2aff      	cmp	r2, #255	; 0xff
    62d4:	d026      	beq.n	6324 <__aeabi_fsub+0x1e4>
    62d6:	18eb      	adds	r3, r5, r3
    62d8:	085b      	lsrs	r3, r3, #1
    62da:	1c14      	adds	r4, r2, #0
    62dc:	e74c      	b.n	6178 <__aeabi_fsub+0x38>
    62de:	2c00      	cmp	r4, #0
    62e0:	d015      	beq.n	630e <__aeabi_fsub+0x1ce>
    62e2:	2aff      	cmp	r2, #255	; 0xff
    62e4:	d01a      	beq.n	631c <__aeabi_fsub+0x1dc>
    62e6:	2480      	movs	r4, #128	; 0x80
    62e8:	04e4      	lsls	r4, r4, #19
    62ea:	4240      	negs	r0, r0
    62ec:	4323      	orrs	r3, r4
    62ee:	281b      	cmp	r0, #27
    62f0:	dd4d      	ble.n	638e <__aeabi_fsub+0x24e>
    62f2:	2301      	movs	r3, #1
    62f4:	1aeb      	subs	r3, r5, r3
    62f6:	1c14      	adds	r4, r2, #0
    62f8:	1c0e      	adds	r6, r1, #0
    62fa:	e762      	b.n	61c2 <__aeabi_fsub+0x82>
    62fc:	2f00      	cmp	r7, #0
    62fe:	d000      	beq.n	6302 <__aeabi_fsub+0x1c2>
    6300:	e763      	b.n	61ca <__aeabi_fsub+0x8a>
    6302:	2300      	movs	r3, #0
    6304:	2000      	movs	r0, #0
    6306:	2400      	movs	r4, #0
    6308:	e777      	b.n	61fa <__aeabi_fsub+0xba>
    630a:	2501      	movs	r5, #1
    630c:	e790      	b.n	6230 <__aeabi_fsub+0xf0>
    630e:	2b00      	cmp	r3, #0
    6310:	d039      	beq.n	6386 <__aeabi_fsub+0x246>
    6312:	43c0      	mvns	r0, r0
    6314:	2800      	cmp	r0, #0
    6316:	d0ed      	beq.n	62f4 <__aeabi_fsub+0x1b4>
    6318:	2aff      	cmp	r2, #255	; 0xff
    631a:	d1e8      	bne.n	62ee <__aeabi_fsub+0x1ae>
    631c:	1c2b      	adds	r3, r5, #0
    631e:	24ff      	movs	r4, #255	; 0xff
    6320:	1c0e      	adds	r6, r1, #0
    6322:	e729      	b.n	6178 <__aeabi_fsub+0x38>
    6324:	24ff      	movs	r4, #255	; 0xff
    6326:	2300      	movs	r3, #0
    6328:	e767      	b.n	61fa <__aeabi_fsub+0xba>
    632a:	2c00      	cmp	r4, #0
    632c:	d15a      	bne.n	63e4 <__aeabi_fsub+0x2a4>
    632e:	2b00      	cmp	r3, #0
    6330:	d07f      	beq.n	6432 <__aeabi_fsub+0x2f2>
    6332:	2d00      	cmp	r5, #0
    6334:	d100      	bne.n	6338 <__aeabi_fsub+0x1f8>
    6336:	e71f      	b.n	6178 <__aeabi_fsub+0x38>
    6338:	195b      	adds	r3, r3, r5
    633a:	015a      	lsls	r2, r3, #5
    633c:	d5a1      	bpl.n	6282 <__aeabi_fsub+0x142>
    633e:	4a3e      	ldr	r2, [pc, #248]	; (6438 <__aeabi_fsub+0x2f8>)
    6340:	3401      	adds	r4, #1
    6342:	4013      	ands	r3, r2
    6344:	e718      	b.n	6178 <__aeabi_fsub+0x38>
    6346:	2c00      	cmp	r4, #0
    6348:	d115      	bne.n	6376 <__aeabi_fsub+0x236>
    634a:	2b00      	cmp	r3, #0
    634c:	d12f      	bne.n	63ae <__aeabi_fsub+0x26e>
    634e:	2d00      	cmp	r5, #0
    6350:	d05e      	beq.n	6410 <__aeabi_fsub+0x2d0>
    6352:	1c2b      	adds	r3, r5, #0
    6354:	1c0e      	adds	r6, r1, #0
    6356:	e70f      	b.n	6178 <__aeabi_fsub+0x38>
    6358:	2c00      	cmp	r4, #0
    635a:	d121      	bne.n	63a0 <__aeabi_fsub+0x260>
    635c:	2b00      	cmp	r3, #0
    635e:	d054      	beq.n	640a <__aeabi_fsub+0x2ca>
    6360:	43c9      	mvns	r1, r1
    6362:	2900      	cmp	r1, #0
    6364:	d004      	beq.n	6370 <__aeabi_fsub+0x230>
    6366:	2aff      	cmp	r2, #255	; 0xff
    6368:	d04c      	beq.n	6404 <__aeabi_fsub+0x2c4>
    636a:	291b      	cmp	r1, #27
    636c:	dd58      	ble.n	6420 <__aeabi_fsub+0x2e0>
    636e:	2301      	movs	r3, #1
    6370:	195b      	adds	r3, r3, r5
    6372:	1c14      	adds	r4, r2, #0
    6374:	e75d      	b.n	6232 <__aeabi_fsub+0xf2>
    6376:	2b00      	cmp	r3, #0
    6378:	d123      	bne.n	63c2 <__aeabi_fsub+0x282>
    637a:	2d00      	cmp	r5, #0
    637c:	d04b      	beq.n	6416 <__aeabi_fsub+0x2d6>
    637e:	1c2b      	adds	r3, r5, #0
    6380:	1c0e      	adds	r6, r1, #0
    6382:	24ff      	movs	r4, #255	; 0xff
    6384:	e6f8      	b.n	6178 <__aeabi_fsub+0x38>
    6386:	1c2b      	adds	r3, r5, #0
    6388:	1c14      	adds	r4, r2, #0
    638a:	1c0e      	adds	r6, r1, #0
    638c:	e6f4      	b.n	6178 <__aeabi_fsub+0x38>
    638e:	1c1e      	adds	r6, r3, #0
    6390:	2420      	movs	r4, #32
    6392:	40c6      	lsrs	r6, r0
    6394:	1a20      	subs	r0, r4, r0
    6396:	4083      	lsls	r3, r0
    6398:	1e58      	subs	r0, r3, #1
    639a:	4183      	sbcs	r3, r0
    639c:	4333      	orrs	r3, r6
    639e:	e7a9      	b.n	62f4 <__aeabi_fsub+0x1b4>
    63a0:	2aff      	cmp	r2, #255	; 0xff
    63a2:	d02f      	beq.n	6404 <__aeabi_fsub+0x2c4>
    63a4:	2480      	movs	r4, #128	; 0x80
    63a6:	04e4      	lsls	r4, r4, #19
    63a8:	4249      	negs	r1, r1
    63aa:	4323      	orrs	r3, r4
    63ac:	e7dd      	b.n	636a <__aeabi_fsub+0x22a>
    63ae:	2d00      	cmp	r5, #0
    63b0:	d100      	bne.n	63b4 <__aeabi_fsub+0x274>
    63b2:	e6e1      	b.n	6178 <__aeabi_fsub+0x38>
    63b4:	1b5a      	subs	r2, r3, r5
    63b6:	0150      	lsls	r0, r2, #5
    63b8:	d400      	bmi.n	63bc <__aeabi_fsub+0x27c>
    63ba:	e71a      	b.n	61f2 <__aeabi_fsub+0xb2>
    63bc:	1aeb      	subs	r3, r5, r3
    63be:	1c0e      	adds	r6, r1, #0
    63c0:	e6da      	b.n	6178 <__aeabi_fsub+0x38>
    63c2:	24ff      	movs	r4, #255	; 0xff
    63c4:	2d00      	cmp	r5, #0
    63c6:	d100      	bne.n	63ca <__aeabi_fsub+0x28a>
    63c8:	e6d6      	b.n	6178 <__aeabi_fsub+0x38>
    63ca:	2280      	movs	r2, #128	; 0x80
    63cc:	08db      	lsrs	r3, r3, #3
    63ce:	03d2      	lsls	r2, r2, #15
    63d0:	4213      	tst	r3, r2
    63d2:	d004      	beq.n	63de <__aeabi_fsub+0x29e>
    63d4:	08ed      	lsrs	r5, r5, #3
    63d6:	4215      	tst	r5, r2
    63d8:	d101      	bne.n	63de <__aeabi_fsub+0x29e>
    63da:	1c2b      	adds	r3, r5, #0
    63dc:	1c0e      	adds	r6, r1, #0
    63de:	00db      	lsls	r3, r3, #3
    63e0:	24ff      	movs	r4, #255	; 0xff
    63e2:	e6c9      	b.n	6178 <__aeabi_fsub+0x38>
    63e4:	2b00      	cmp	r3, #0
    63e6:	d00d      	beq.n	6404 <__aeabi_fsub+0x2c4>
    63e8:	24ff      	movs	r4, #255	; 0xff
    63ea:	2d00      	cmp	r5, #0
    63ec:	d100      	bne.n	63f0 <__aeabi_fsub+0x2b0>
    63ee:	e6c3      	b.n	6178 <__aeabi_fsub+0x38>
    63f0:	2280      	movs	r2, #128	; 0x80
    63f2:	08db      	lsrs	r3, r3, #3
    63f4:	03d2      	lsls	r2, r2, #15
    63f6:	4213      	tst	r3, r2
    63f8:	d0f1      	beq.n	63de <__aeabi_fsub+0x29e>
    63fa:	08ed      	lsrs	r5, r5, #3
    63fc:	4215      	tst	r5, r2
    63fe:	d1ee      	bne.n	63de <__aeabi_fsub+0x29e>
    6400:	1c2b      	adds	r3, r5, #0
    6402:	e7ec      	b.n	63de <__aeabi_fsub+0x29e>
    6404:	1c2b      	adds	r3, r5, #0
    6406:	24ff      	movs	r4, #255	; 0xff
    6408:	e6b6      	b.n	6178 <__aeabi_fsub+0x38>
    640a:	1c2b      	adds	r3, r5, #0
    640c:	1c14      	adds	r4, r2, #0
    640e:	e6b3      	b.n	6178 <__aeabi_fsub+0x38>
    6410:	1c23      	adds	r3, r4, #0
    6412:	2000      	movs	r0, #0
    6414:	e6f1      	b.n	61fa <__aeabi_fsub+0xba>
    6416:	2380      	movs	r3, #128	; 0x80
    6418:	2000      	movs	r0, #0
    641a:	049b      	lsls	r3, r3, #18
    641c:	24ff      	movs	r4, #255	; 0xff
    641e:	e6ec      	b.n	61fa <__aeabi_fsub+0xba>
    6420:	1c1f      	adds	r7, r3, #0
    6422:	2420      	movs	r4, #32
    6424:	40cf      	lsrs	r7, r1
    6426:	1a61      	subs	r1, r4, r1
    6428:	408b      	lsls	r3, r1
    642a:	1e59      	subs	r1, r3, #1
    642c:	418b      	sbcs	r3, r1
    642e:	433b      	orrs	r3, r7
    6430:	e79e      	b.n	6370 <__aeabi_fsub+0x230>
    6432:	1c2b      	adds	r3, r5, #0
    6434:	e6a0      	b.n	6178 <__aeabi_fsub+0x38>
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	fbffffff 	.word	0xfbffffff

0000643c <__aeabi_f2iz>:
    643c:	0242      	lsls	r2, r0, #9
    643e:	0a51      	lsrs	r1, r2, #9
    6440:	0042      	lsls	r2, r0, #1
    6442:	0fc3      	lsrs	r3, r0, #31
    6444:	0e12      	lsrs	r2, r2, #24
    6446:	2000      	movs	r0, #0
    6448:	2a7e      	cmp	r2, #126	; 0x7e
    644a:	dd0d      	ble.n	6468 <__aeabi_f2iz+0x2c>
    644c:	2a9d      	cmp	r2, #157	; 0x9d
    644e:	dc0c      	bgt.n	646a <__aeabi_f2iz+0x2e>
    6450:	2080      	movs	r0, #128	; 0x80
    6452:	0400      	lsls	r0, r0, #16
    6454:	4301      	orrs	r1, r0
    6456:	2a95      	cmp	r2, #149	; 0x95
    6458:	dc0a      	bgt.n	6470 <__aeabi_f2iz+0x34>
    645a:	2096      	movs	r0, #150	; 0x96
    645c:	1a82      	subs	r2, r0, r2
    645e:	40d1      	lsrs	r1, r2
    6460:	1c0a      	adds	r2, r1, #0
    6462:	4258      	negs	r0, r3
    6464:	4042      	eors	r2, r0
    6466:	18d0      	adds	r0, r2, r3
    6468:	4770      	bx	lr
    646a:	4a03      	ldr	r2, [pc, #12]	; (6478 <__aeabi_f2iz+0x3c>)
    646c:	1898      	adds	r0, r3, r2
    646e:	e7fb      	b.n	6468 <__aeabi_f2iz+0x2c>
    6470:	3a96      	subs	r2, #150	; 0x96
    6472:	4091      	lsls	r1, r2
    6474:	1c0a      	adds	r2, r1, #0
    6476:	e7f4      	b.n	6462 <__aeabi_f2iz+0x26>
    6478:	7fffffff 	.word	0x7fffffff

0000647c <__aeabi_i2f>:
    647c:	b570      	push	{r4, r5, r6, lr}
    647e:	1e04      	subs	r4, r0, #0
    6480:	d039      	beq.n	64f6 <__aeabi_i2f+0x7a>
    6482:	0fc5      	lsrs	r5, r0, #31
    6484:	d000      	beq.n	6488 <__aeabi_i2f+0xc>
    6486:	4244      	negs	r4, r0
    6488:	1c20      	adds	r0, r4, #0
    648a:	f7ff fa1d 	bl	58c8 <__clzsi2>
    648e:	239e      	movs	r3, #158	; 0x9e
    6490:	1c26      	adds	r6, r4, #0
    6492:	1a1b      	subs	r3, r3, r0
    6494:	2b96      	cmp	r3, #150	; 0x96
    6496:	dc07      	bgt.n	64a8 <__aeabi_i2f+0x2c>
    6498:	2808      	cmp	r0, #8
    649a:	dd01      	ble.n	64a0 <__aeabi_i2f+0x24>
    649c:	3808      	subs	r0, #8
    649e:	4084      	lsls	r4, r0
    64a0:	0264      	lsls	r4, r4, #9
    64a2:	0a64      	lsrs	r4, r4, #9
    64a4:	b2d8      	uxtb	r0, r3
    64a6:	e01e      	b.n	64e6 <__aeabi_i2f+0x6a>
    64a8:	2b99      	cmp	r3, #153	; 0x99
    64aa:	dd0a      	ble.n	64c2 <__aeabi_i2f+0x46>
    64ac:	2205      	movs	r2, #5
    64ae:	1c21      	adds	r1, r4, #0
    64b0:	1a12      	subs	r2, r2, r0
    64b2:	40d1      	lsrs	r1, r2
    64b4:	1c0a      	adds	r2, r1, #0
    64b6:	1c01      	adds	r1, r0, #0
    64b8:	311b      	adds	r1, #27
    64ba:	408e      	lsls	r6, r1
    64bc:	1e71      	subs	r1, r6, #1
    64be:	418e      	sbcs	r6, r1
    64c0:	4316      	orrs	r6, r2
    64c2:	2805      	cmp	r0, #5
    64c4:	dd01      	ble.n	64ca <__aeabi_i2f+0x4e>
    64c6:	1f42      	subs	r2, r0, #5
    64c8:	4096      	lsls	r6, r2
    64ca:	4c0f      	ldr	r4, [pc, #60]	; (6508 <__aeabi_i2f+0x8c>)
    64cc:	4034      	ands	r4, r6
    64ce:	0772      	lsls	r2, r6, #29
    64d0:	d004      	beq.n	64dc <__aeabi_i2f+0x60>
    64d2:	220f      	movs	r2, #15
    64d4:	4016      	ands	r6, r2
    64d6:	2e04      	cmp	r6, #4
    64d8:	d000      	beq.n	64dc <__aeabi_i2f+0x60>
    64da:	3404      	adds	r4, #4
    64dc:	0162      	lsls	r2, r4, #5
    64de:	d40e      	bmi.n	64fe <__aeabi_i2f+0x82>
    64e0:	01a4      	lsls	r4, r4, #6
    64e2:	0a64      	lsrs	r4, r4, #9
    64e4:	b2d8      	uxtb	r0, r3
    64e6:	0264      	lsls	r4, r4, #9
    64e8:	05c0      	lsls	r0, r0, #23
    64ea:	0a64      	lsrs	r4, r4, #9
    64ec:	07ed      	lsls	r5, r5, #31
    64ee:	4304      	orrs	r4, r0
    64f0:	432c      	orrs	r4, r5
    64f2:	1c20      	adds	r0, r4, #0
    64f4:	bd70      	pop	{r4, r5, r6, pc}
    64f6:	2500      	movs	r5, #0
    64f8:	2000      	movs	r0, #0
    64fa:	2400      	movs	r4, #0
    64fc:	e7f3      	b.n	64e6 <__aeabi_i2f+0x6a>
    64fe:	4b02      	ldr	r3, [pc, #8]	; (6508 <__aeabi_i2f+0x8c>)
    6500:	401c      	ands	r4, r3
    6502:	239f      	movs	r3, #159	; 0x9f
    6504:	1a1b      	subs	r3, r3, r0
    6506:	e7eb      	b.n	64e0 <__aeabi_i2f+0x64>
    6508:	fbffffff 	.word	0xfbffffff

0000650c <__aeabi_ui2f>:
    650c:	b510      	push	{r4, lr}
    650e:	1e04      	subs	r4, r0, #0
    6510:	d035      	beq.n	657e <__aeabi_ui2f+0x72>
    6512:	f7ff f9d9 	bl	58c8 <__clzsi2>
    6516:	219e      	movs	r1, #158	; 0x9e
    6518:	1a09      	subs	r1, r1, r0
    651a:	2996      	cmp	r1, #150	; 0x96
    651c:	dc09      	bgt.n	6532 <__aeabi_ui2f+0x26>
    651e:	2808      	cmp	r0, #8
    6520:	dd30      	ble.n	6584 <__aeabi_ui2f+0x78>
    6522:	1c02      	adds	r2, r0, #0
    6524:	1c23      	adds	r3, r4, #0
    6526:	3a08      	subs	r2, #8
    6528:	4093      	lsls	r3, r2
    652a:	025b      	lsls	r3, r3, #9
    652c:	0a5b      	lsrs	r3, r3, #9
    652e:	b2c8      	uxtb	r0, r1
    6530:	e020      	b.n	6574 <__aeabi_ui2f+0x68>
    6532:	2999      	cmp	r1, #153	; 0x99
    6534:	dd0c      	ble.n	6550 <__aeabi_ui2f+0x44>
    6536:	2205      	movs	r2, #5
    6538:	1c23      	adds	r3, r4, #0
    653a:	1a12      	subs	r2, r2, r0
    653c:	40d3      	lsrs	r3, r2
    653e:	1c1a      	adds	r2, r3, #0
    6540:	1c03      	adds	r3, r0, #0
    6542:	331b      	adds	r3, #27
    6544:	409c      	lsls	r4, r3
    6546:	1c23      	adds	r3, r4, #0
    6548:	1e5c      	subs	r4, r3, #1
    654a:	41a3      	sbcs	r3, r4
    654c:	4313      	orrs	r3, r2
    654e:	1c1c      	adds	r4, r3, #0
    6550:	2805      	cmp	r0, #5
    6552:	dd01      	ble.n	6558 <__aeabi_ui2f+0x4c>
    6554:	1f43      	subs	r3, r0, #5
    6556:	409c      	lsls	r4, r3
    6558:	4b0f      	ldr	r3, [pc, #60]	; (6598 <__aeabi_ui2f+0x8c>)
    655a:	4023      	ands	r3, r4
    655c:	0762      	lsls	r2, r4, #29
    655e:	d004      	beq.n	656a <__aeabi_ui2f+0x5e>
    6560:	220f      	movs	r2, #15
    6562:	4014      	ands	r4, r2
    6564:	2c04      	cmp	r4, #4
    6566:	d000      	beq.n	656a <__aeabi_ui2f+0x5e>
    6568:	3304      	adds	r3, #4
    656a:	015a      	lsls	r2, r3, #5
    656c:	d40e      	bmi.n	658c <__aeabi_ui2f+0x80>
    656e:	019b      	lsls	r3, r3, #6
    6570:	0a5b      	lsrs	r3, r3, #9
    6572:	b2c8      	uxtb	r0, r1
    6574:	025b      	lsls	r3, r3, #9
    6576:	0a5b      	lsrs	r3, r3, #9
    6578:	05c0      	lsls	r0, r0, #23
    657a:	4318      	orrs	r0, r3
    657c:	bd10      	pop	{r4, pc}
    657e:	2000      	movs	r0, #0
    6580:	2300      	movs	r3, #0
    6582:	e7f7      	b.n	6574 <__aeabi_ui2f+0x68>
    6584:	0263      	lsls	r3, r4, #9
    6586:	0a5b      	lsrs	r3, r3, #9
    6588:	b2c8      	uxtb	r0, r1
    658a:	e7f3      	b.n	6574 <__aeabi_ui2f+0x68>
    658c:	219f      	movs	r1, #159	; 0x9f
    658e:	4a02      	ldr	r2, [pc, #8]	; (6598 <__aeabi_ui2f+0x8c>)
    6590:	1a09      	subs	r1, r1, r0
    6592:	4013      	ands	r3, r2
    6594:	e7eb      	b.n	656e <__aeabi_ui2f+0x62>
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	fbffffff 	.word	0xfbffffff

0000659c <__aeabi_ddiv>:
    659c:	b5f0      	push	{r4, r5, r6, r7, lr}
    659e:	465f      	mov	r7, fp
    65a0:	4656      	mov	r6, sl
    65a2:	464d      	mov	r5, r9
    65a4:	4644      	mov	r4, r8
    65a6:	b4f0      	push	{r4, r5, r6, r7}
    65a8:	030f      	lsls	r7, r1, #12
    65aa:	b087      	sub	sp, #28
    65ac:	4698      	mov	r8, r3
    65ae:	004d      	lsls	r5, r1, #1
    65b0:	0b3b      	lsrs	r3, r7, #12
    65b2:	0fcc      	lsrs	r4, r1, #31
    65b4:	1c06      	adds	r6, r0, #0
    65b6:	4692      	mov	sl, r2
    65b8:	4681      	mov	r9, r0
    65ba:	469b      	mov	fp, r3
    65bc:	0d6d      	lsrs	r5, r5, #21
    65be:	9401      	str	r4, [sp, #4]
    65c0:	d06b      	beq.n	669a <__aeabi_ddiv+0xfe>
    65c2:	4b66      	ldr	r3, [pc, #408]	; (675c <__aeabi_ddiv+0x1c0>)
    65c4:	429d      	cmp	r5, r3
    65c6:	d035      	beq.n	6634 <__aeabi_ddiv+0x98>
    65c8:	2780      	movs	r7, #128	; 0x80
    65ca:	465b      	mov	r3, fp
    65cc:	037f      	lsls	r7, r7, #13
    65ce:	431f      	orrs	r7, r3
    65d0:	00f3      	lsls	r3, r6, #3
    65d2:	4699      	mov	r9, r3
    65d4:	4b62      	ldr	r3, [pc, #392]	; (6760 <__aeabi_ddiv+0x1c4>)
    65d6:	00ff      	lsls	r7, r7, #3
    65d8:	0f40      	lsrs	r0, r0, #29
    65da:	469c      	mov	ip, r3
    65dc:	4307      	orrs	r7, r0
    65de:	2300      	movs	r3, #0
    65e0:	46bb      	mov	fp, r7
    65e2:	2600      	movs	r6, #0
    65e4:	4465      	add	r5, ip
    65e6:	9300      	str	r3, [sp, #0]
    65e8:	4642      	mov	r2, r8
    65ea:	0317      	lsls	r7, r2, #12
    65ec:	0050      	lsls	r0, r2, #1
    65ee:	0fd2      	lsrs	r2, r2, #31
    65f0:	4653      	mov	r3, sl
    65f2:	0b3f      	lsrs	r7, r7, #12
    65f4:	0d40      	lsrs	r0, r0, #21
    65f6:	4690      	mov	r8, r2
    65f8:	d100      	bne.n	65fc <__aeabi_ddiv+0x60>
    65fa:	e072      	b.n	66e2 <__aeabi_ddiv+0x146>
    65fc:	4a57      	ldr	r2, [pc, #348]	; (675c <__aeabi_ddiv+0x1c0>)
    65fe:	4290      	cmp	r0, r2
    6600:	d067      	beq.n	66d2 <__aeabi_ddiv+0x136>
    6602:	2380      	movs	r3, #128	; 0x80
    6604:	035b      	lsls	r3, r3, #13
    6606:	431f      	orrs	r7, r3
    6608:	4653      	mov	r3, sl
    660a:	4a55      	ldr	r2, [pc, #340]	; (6760 <__aeabi_ddiv+0x1c4>)
    660c:	0f5b      	lsrs	r3, r3, #29
    660e:	00ff      	lsls	r7, r7, #3
    6610:	431f      	orrs	r7, r3
    6612:	4694      	mov	ip, r2
    6614:	4653      	mov	r3, sl
    6616:	2100      	movs	r1, #0
    6618:	00db      	lsls	r3, r3, #3
    661a:	4460      	add	r0, ip
    661c:	4642      	mov	r2, r8
    661e:	4062      	eors	r2, r4
    6620:	4692      	mov	sl, r2
    6622:	1a2d      	subs	r5, r5, r0
    6624:	430e      	orrs	r6, r1
    6626:	2e0f      	cmp	r6, #15
    6628:	d900      	bls.n	662c <__aeabi_ddiv+0x90>
    662a:	e0a1      	b.n	6770 <__aeabi_ddiv+0x1d4>
    662c:	484d      	ldr	r0, [pc, #308]	; (6764 <__aeabi_ddiv+0x1c8>)
    662e:	00b6      	lsls	r6, r6, #2
    6630:	5980      	ldr	r0, [r0, r6]
    6632:	4687      	mov	pc, r0
    6634:	465b      	mov	r3, fp
    6636:	431e      	orrs	r6, r3
    6638:	d000      	beq.n	663c <__aeabi_ddiv+0xa0>
    663a:	e076      	b.n	672a <__aeabi_ddiv+0x18e>
    663c:	2300      	movs	r3, #0
    663e:	469b      	mov	fp, r3
    6640:	4699      	mov	r9, r3
    6642:	3302      	adds	r3, #2
    6644:	2608      	movs	r6, #8
    6646:	9300      	str	r3, [sp, #0]
    6648:	e7ce      	b.n	65e8 <__aeabi_ddiv+0x4c>
    664a:	4699      	mov	r9, r3
    664c:	4643      	mov	r3, r8
    664e:	46bb      	mov	fp, r7
    6650:	9301      	str	r3, [sp, #4]
    6652:	9100      	str	r1, [sp, #0]
    6654:	9b00      	ldr	r3, [sp, #0]
    6656:	2b02      	cmp	r3, #2
    6658:	d16b      	bne.n	6732 <__aeabi_ddiv+0x196>
    665a:	9b01      	ldr	r3, [sp, #4]
    665c:	469a      	mov	sl, r3
    665e:	2100      	movs	r1, #0
    6660:	4653      	mov	r3, sl
    6662:	2201      	movs	r2, #1
    6664:	2700      	movs	r7, #0
    6666:	4689      	mov	r9, r1
    6668:	401a      	ands	r2, r3
    666a:	4b3c      	ldr	r3, [pc, #240]	; (675c <__aeabi_ddiv+0x1c0>)
    666c:	2100      	movs	r1, #0
    666e:	033f      	lsls	r7, r7, #12
    6670:	0d0c      	lsrs	r4, r1, #20
    6672:	0524      	lsls	r4, r4, #20
    6674:	0b3f      	lsrs	r7, r7, #12
    6676:	4327      	orrs	r7, r4
    6678:	4c3b      	ldr	r4, [pc, #236]	; (6768 <__aeabi_ddiv+0x1cc>)
    667a:	051b      	lsls	r3, r3, #20
    667c:	4027      	ands	r7, r4
    667e:	431f      	orrs	r7, r3
    6680:	007f      	lsls	r7, r7, #1
    6682:	07d2      	lsls	r2, r2, #31
    6684:	087f      	lsrs	r7, r7, #1
    6686:	4317      	orrs	r7, r2
    6688:	4648      	mov	r0, r9
    668a:	1c39      	adds	r1, r7, #0
    668c:	b007      	add	sp, #28
    668e:	bc3c      	pop	{r2, r3, r4, r5}
    6690:	4690      	mov	r8, r2
    6692:	4699      	mov	r9, r3
    6694:	46a2      	mov	sl, r4
    6696:	46ab      	mov	fp, r5
    6698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    669a:	4303      	orrs	r3, r0
    669c:	d03e      	beq.n	671c <__aeabi_ddiv+0x180>
    669e:	465b      	mov	r3, fp
    66a0:	2b00      	cmp	r3, #0
    66a2:	d100      	bne.n	66a6 <__aeabi_ddiv+0x10a>
    66a4:	e19c      	b.n	69e0 <__aeabi_ddiv+0x444>
    66a6:	4658      	mov	r0, fp
    66a8:	f7ff f90e 	bl	58c8 <__clzsi2>
    66ac:	2328      	movs	r3, #40	; 0x28
    66ae:	1c31      	adds	r1, r6, #0
    66b0:	1a1b      	subs	r3, r3, r0
    66b2:	1c02      	adds	r2, r0, #0
    66b4:	465f      	mov	r7, fp
    66b6:	40d9      	lsrs	r1, r3
    66b8:	3a08      	subs	r2, #8
    66ba:	4097      	lsls	r7, r2
    66bc:	1c0b      	adds	r3, r1, #0
    66be:	4096      	lsls	r6, r2
    66c0:	433b      	orrs	r3, r7
    66c2:	469b      	mov	fp, r3
    66c4:	46b1      	mov	r9, r6
    66c6:	2300      	movs	r3, #0
    66c8:	4d28      	ldr	r5, [pc, #160]	; (676c <__aeabi_ddiv+0x1d0>)
    66ca:	2600      	movs	r6, #0
    66cc:	1a2d      	subs	r5, r5, r0
    66ce:	9300      	str	r3, [sp, #0]
    66d0:	e78a      	b.n	65e8 <__aeabi_ddiv+0x4c>
    66d2:	4652      	mov	r2, sl
    66d4:	2103      	movs	r1, #3
    66d6:	433a      	orrs	r2, r7
    66d8:	d1a0      	bne.n	661c <__aeabi_ddiv+0x80>
    66da:	2700      	movs	r7, #0
    66dc:	2300      	movs	r3, #0
    66de:	2102      	movs	r1, #2
    66e0:	e79c      	b.n	661c <__aeabi_ddiv+0x80>
    66e2:	4652      	mov	r2, sl
    66e4:	433a      	orrs	r2, r7
    66e6:	d015      	beq.n	6714 <__aeabi_ddiv+0x178>
    66e8:	2f00      	cmp	r7, #0
    66ea:	d100      	bne.n	66ee <__aeabi_ddiv+0x152>
    66ec:	e185      	b.n	69fa <__aeabi_ddiv+0x45e>
    66ee:	1c38      	adds	r0, r7, #0
    66f0:	f7ff f8ea 	bl	58c8 <__clzsi2>
    66f4:	1c02      	adds	r2, r0, #0
    66f6:	2128      	movs	r1, #40	; 0x28
    66f8:	4650      	mov	r0, sl
    66fa:	1a89      	subs	r1, r1, r2
    66fc:	1c13      	adds	r3, r2, #0
    66fe:	40c8      	lsrs	r0, r1
    6700:	4651      	mov	r1, sl
    6702:	3b08      	subs	r3, #8
    6704:	4099      	lsls	r1, r3
    6706:	409f      	lsls	r7, r3
    6708:	1c0b      	adds	r3, r1, #0
    670a:	4307      	orrs	r7, r0
    670c:	4817      	ldr	r0, [pc, #92]	; (676c <__aeabi_ddiv+0x1d0>)
    670e:	2100      	movs	r1, #0
    6710:	1a80      	subs	r0, r0, r2
    6712:	e783      	b.n	661c <__aeabi_ddiv+0x80>
    6714:	2700      	movs	r7, #0
    6716:	2300      	movs	r3, #0
    6718:	2101      	movs	r1, #1
    671a:	e77f      	b.n	661c <__aeabi_ddiv+0x80>
    671c:	2300      	movs	r3, #0
    671e:	469b      	mov	fp, r3
    6720:	4699      	mov	r9, r3
    6722:	3301      	adds	r3, #1
    6724:	2604      	movs	r6, #4
    6726:	9300      	str	r3, [sp, #0]
    6728:	e75e      	b.n	65e8 <__aeabi_ddiv+0x4c>
    672a:	2303      	movs	r3, #3
    672c:	260c      	movs	r6, #12
    672e:	9300      	str	r3, [sp, #0]
    6730:	e75a      	b.n	65e8 <__aeabi_ddiv+0x4c>
    6732:	2b03      	cmp	r3, #3
    6734:	d100      	bne.n	6738 <__aeabi_ddiv+0x19c>
    6736:	e23c      	b.n	6bb2 <__aeabi_ddiv+0x616>
    6738:	2b01      	cmp	r3, #1
    673a:	d000      	beq.n	673e <__aeabi_ddiv+0x1a2>
    673c:	e1bf      	b.n	6abe <__aeabi_ddiv+0x522>
    673e:	1c1a      	adds	r2, r3, #0
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	401a      	ands	r2, r3
    6744:	2100      	movs	r1, #0
    6746:	2300      	movs	r3, #0
    6748:	2700      	movs	r7, #0
    674a:	4689      	mov	r9, r1
    674c:	e78e      	b.n	666c <__aeabi_ddiv+0xd0>
    674e:	2300      	movs	r3, #0
    6750:	2780      	movs	r7, #128	; 0x80
    6752:	4699      	mov	r9, r3
    6754:	2200      	movs	r2, #0
    6756:	033f      	lsls	r7, r7, #12
    6758:	4b00      	ldr	r3, [pc, #0]	; (675c <__aeabi_ddiv+0x1c0>)
    675a:	e787      	b.n	666c <__aeabi_ddiv+0xd0>
    675c:	000007ff 	.word	0x000007ff
    6760:	fffffc01 	.word	0xfffffc01
    6764:	00007ab0 	.word	0x00007ab0
    6768:	800fffff 	.word	0x800fffff
    676c:	fffffc0d 	.word	0xfffffc0d
    6770:	45bb      	cmp	fp, r7
    6772:	d900      	bls.n	6776 <__aeabi_ddiv+0x1da>
    6774:	e151      	b.n	6a1a <__aeabi_ddiv+0x47e>
    6776:	d100      	bne.n	677a <__aeabi_ddiv+0x1de>
    6778:	e14c      	b.n	6a14 <__aeabi_ddiv+0x478>
    677a:	464a      	mov	r2, r9
    677c:	9203      	str	r2, [sp, #12]
    677e:	2200      	movs	r2, #0
    6780:	465c      	mov	r4, fp
    6782:	4690      	mov	r8, r2
    6784:	3d01      	subs	r5, #1
    6786:	0e18      	lsrs	r0, r3, #24
    6788:	023f      	lsls	r7, r7, #8
    678a:	4338      	orrs	r0, r7
    678c:	021b      	lsls	r3, r3, #8
    678e:	9301      	str	r3, [sp, #4]
    6790:	0c03      	lsrs	r3, r0, #16
    6792:	4699      	mov	r9, r3
    6794:	0403      	lsls	r3, r0, #16
    6796:	0c1b      	lsrs	r3, r3, #16
    6798:	4649      	mov	r1, r9
    679a:	1c06      	adds	r6, r0, #0
    679c:	1c20      	adds	r0, r4, #0
    679e:	1c1f      	adds	r7, r3, #0
    67a0:	9300      	str	r3, [sp, #0]
    67a2:	f7fe ff0f 	bl	55c4 <__aeabi_uidiv>
    67a6:	1c02      	adds	r2, r0, #0
    67a8:	437a      	muls	r2, r7
    67aa:	9002      	str	r0, [sp, #8]
    67ac:	4649      	mov	r1, r9
    67ae:	1c20      	adds	r0, r4, #0
    67b0:	1c17      	adds	r7, r2, #0
    67b2:	f7fe ff8d 	bl	56d0 <__aeabi_uidivmod>
    67b6:	9b03      	ldr	r3, [sp, #12]
    67b8:	0409      	lsls	r1, r1, #16
    67ba:	0c1b      	lsrs	r3, r3, #16
    67bc:	4319      	orrs	r1, r3
    67be:	428f      	cmp	r7, r1
    67c0:	d90c      	bls.n	67dc <__aeabi_ddiv+0x240>
    67c2:	9b02      	ldr	r3, [sp, #8]
    67c4:	1989      	adds	r1, r1, r6
    67c6:	3b01      	subs	r3, #1
    67c8:	428e      	cmp	r6, r1
    67ca:	d900      	bls.n	67ce <__aeabi_ddiv+0x232>
    67cc:	e152      	b.n	6a74 <__aeabi_ddiv+0x4d8>
    67ce:	428f      	cmp	r7, r1
    67d0:	d800      	bhi.n	67d4 <__aeabi_ddiv+0x238>
    67d2:	e14f      	b.n	6a74 <__aeabi_ddiv+0x4d8>
    67d4:	9b02      	ldr	r3, [sp, #8]
    67d6:	1989      	adds	r1, r1, r6
    67d8:	3b02      	subs	r3, #2
    67da:	9302      	str	r3, [sp, #8]
    67dc:	1bcc      	subs	r4, r1, r7
    67de:	1c20      	adds	r0, r4, #0
    67e0:	4649      	mov	r1, r9
    67e2:	f7fe feef 	bl	55c4 <__aeabi_uidiv>
    67e6:	9f00      	ldr	r7, [sp, #0]
    67e8:	4683      	mov	fp, r0
    67ea:	4347      	muls	r7, r0
    67ec:	4649      	mov	r1, r9
    67ee:	1c20      	adds	r0, r4, #0
    67f0:	f7fe ff6e 	bl	56d0 <__aeabi_uidivmod>
    67f4:	9a03      	ldr	r2, [sp, #12]
    67f6:	040b      	lsls	r3, r1, #16
    67f8:	0414      	lsls	r4, r2, #16
    67fa:	0c24      	lsrs	r4, r4, #16
    67fc:	4323      	orrs	r3, r4
    67fe:	429f      	cmp	r7, r3
    6800:	d90d      	bls.n	681e <__aeabi_ddiv+0x282>
    6802:	465a      	mov	r2, fp
    6804:	199b      	adds	r3, r3, r6
    6806:	3a01      	subs	r2, #1
    6808:	429e      	cmp	r6, r3
    680a:	d900      	bls.n	680e <__aeabi_ddiv+0x272>
    680c:	e130      	b.n	6a70 <__aeabi_ddiv+0x4d4>
    680e:	429f      	cmp	r7, r3
    6810:	d800      	bhi.n	6814 <__aeabi_ddiv+0x278>
    6812:	e12d      	b.n	6a70 <__aeabi_ddiv+0x4d4>
    6814:	2202      	movs	r2, #2
    6816:	4252      	negs	r2, r2
    6818:	4694      	mov	ip, r2
    681a:	199b      	adds	r3, r3, r6
    681c:	44e3      	add	fp, ip
    681e:	9a02      	ldr	r2, [sp, #8]
    6820:	1bdb      	subs	r3, r3, r7
    6822:	0417      	lsls	r7, r2, #16
    6824:	465a      	mov	r2, fp
    6826:	433a      	orrs	r2, r7
    6828:	4693      	mov	fp, r2
    682a:	9c01      	ldr	r4, [sp, #4]
    682c:	0c17      	lsrs	r7, r2, #16
    682e:	0c22      	lsrs	r2, r4, #16
    6830:	1c10      	adds	r0, r2, #0
    6832:	9204      	str	r2, [sp, #16]
    6834:	465a      	mov	r2, fp
    6836:	0411      	lsls	r1, r2, #16
    6838:	0422      	lsls	r2, r4, #16
    683a:	0c12      	lsrs	r2, r2, #16
    683c:	1c14      	adds	r4, r2, #0
    683e:	0c09      	lsrs	r1, r1, #16
    6840:	437c      	muls	r4, r7
    6842:	9205      	str	r2, [sp, #20]
    6844:	434a      	muls	r2, r1
    6846:	4341      	muls	r1, r0
    6848:	4347      	muls	r7, r0
    684a:	1861      	adds	r1, r4, r1
    684c:	0c10      	lsrs	r0, r2, #16
    684e:	1809      	adds	r1, r1, r0
    6850:	428c      	cmp	r4, r1
    6852:	d903      	bls.n	685c <__aeabi_ddiv+0x2c0>
    6854:	2080      	movs	r0, #128	; 0x80
    6856:	0240      	lsls	r0, r0, #9
    6858:	4684      	mov	ip, r0
    685a:	4467      	add	r7, ip
    685c:	0c0c      	lsrs	r4, r1, #16
    685e:	0412      	lsls	r2, r2, #16
    6860:	0408      	lsls	r0, r1, #16
    6862:	0c12      	lsrs	r2, r2, #16
    6864:	193c      	adds	r4, r7, r4
    6866:	1881      	adds	r1, r0, r2
    6868:	42a3      	cmp	r3, r4
    686a:	d200      	bcs.n	686e <__aeabi_ddiv+0x2d2>
    686c:	e0e5      	b.n	6a3a <__aeabi_ddiv+0x49e>
    686e:	d100      	bne.n	6872 <__aeabi_ddiv+0x2d6>
    6870:	e0df      	b.n	6a32 <__aeabi_ddiv+0x496>
    6872:	1b1f      	subs	r7, r3, r4
    6874:	4643      	mov	r3, r8
    6876:	1a5c      	subs	r4, r3, r1
    6878:	45a0      	cmp	r8, r4
    687a:	4192      	sbcs	r2, r2
    687c:	4252      	negs	r2, r2
    687e:	1abf      	subs	r7, r7, r2
    6880:	42b7      	cmp	r7, r6
    6882:	d100      	bne.n	6886 <__aeabi_ddiv+0x2ea>
    6884:	e10e      	b.n	6aa4 <__aeabi_ddiv+0x508>
    6886:	1c38      	adds	r0, r7, #0
    6888:	4649      	mov	r1, r9
    688a:	f7fe fe9b 	bl	55c4 <__aeabi_uidiv>
    688e:	9b00      	ldr	r3, [sp, #0]
    6890:	9002      	str	r0, [sp, #8]
    6892:	4343      	muls	r3, r0
    6894:	4649      	mov	r1, r9
    6896:	1c38      	adds	r0, r7, #0
    6898:	4698      	mov	r8, r3
    689a:	f7fe ff19 	bl	56d0 <__aeabi_uidivmod>
    689e:	0c23      	lsrs	r3, r4, #16
    68a0:	040f      	lsls	r7, r1, #16
    68a2:	431f      	orrs	r7, r3
    68a4:	45b8      	cmp	r8, r7
    68a6:	d90c      	bls.n	68c2 <__aeabi_ddiv+0x326>
    68a8:	9b02      	ldr	r3, [sp, #8]
    68aa:	19bf      	adds	r7, r7, r6
    68ac:	3b01      	subs	r3, #1
    68ae:	42be      	cmp	r6, r7
    68b0:	d900      	bls.n	68b4 <__aeabi_ddiv+0x318>
    68b2:	e0fb      	b.n	6aac <__aeabi_ddiv+0x510>
    68b4:	45b8      	cmp	r8, r7
    68b6:	d800      	bhi.n	68ba <__aeabi_ddiv+0x31e>
    68b8:	e0f8      	b.n	6aac <__aeabi_ddiv+0x510>
    68ba:	9b02      	ldr	r3, [sp, #8]
    68bc:	19bf      	adds	r7, r7, r6
    68be:	3b02      	subs	r3, #2
    68c0:	9302      	str	r3, [sp, #8]
    68c2:	4643      	mov	r3, r8
    68c4:	1aff      	subs	r7, r7, r3
    68c6:	4649      	mov	r1, r9
    68c8:	1c38      	adds	r0, r7, #0
    68ca:	f7fe fe7b 	bl	55c4 <__aeabi_uidiv>
    68ce:	9b00      	ldr	r3, [sp, #0]
    68d0:	9003      	str	r0, [sp, #12]
    68d2:	4343      	muls	r3, r0
    68d4:	4649      	mov	r1, r9
    68d6:	1c38      	adds	r0, r7, #0
    68d8:	4698      	mov	r8, r3
    68da:	f7fe fef9 	bl	56d0 <__aeabi_uidivmod>
    68de:	0424      	lsls	r4, r4, #16
    68e0:	0409      	lsls	r1, r1, #16
    68e2:	0c24      	lsrs	r4, r4, #16
    68e4:	4321      	orrs	r1, r4
    68e6:	4588      	cmp	r8, r1
    68e8:	d90c      	bls.n	6904 <__aeabi_ddiv+0x368>
    68ea:	9b03      	ldr	r3, [sp, #12]
    68ec:	1989      	adds	r1, r1, r6
    68ee:	3b01      	subs	r3, #1
    68f0:	428e      	cmp	r6, r1
    68f2:	d900      	bls.n	68f6 <__aeabi_ddiv+0x35a>
    68f4:	e0dc      	b.n	6ab0 <__aeabi_ddiv+0x514>
    68f6:	4588      	cmp	r8, r1
    68f8:	d800      	bhi.n	68fc <__aeabi_ddiv+0x360>
    68fa:	e0d9      	b.n	6ab0 <__aeabi_ddiv+0x514>
    68fc:	9b03      	ldr	r3, [sp, #12]
    68fe:	1989      	adds	r1, r1, r6
    6900:	3b02      	subs	r3, #2
    6902:	9303      	str	r3, [sp, #12]
    6904:	4643      	mov	r3, r8
    6906:	1ac9      	subs	r1, r1, r3
    6908:	9b02      	ldr	r3, [sp, #8]
    690a:	9a03      	ldr	r2, [sp, #12]
    690c:	041b      	lsls	r3, r3, #16
    690e:	9c05      	ldr	r4, [sp, #20]
    6910:	431a      	orrs	r2, r3
    6912:	0c10      	lsrs	r0, r2, #16
    6914:	0413      	lsls	r3, r2, #16
    6916:	4691      	mov	r9, r2
    6918:	1c22      	adds	r2, r4, #0
    691a:	9f04      	ldr	r7, [sp, #16]
    691c:	0c1b      	lsrs	r3, r3, #16
    691e:	435a      	muls	r2, r3
    6920:	4344      	muls	r4, r0
    6922:	437b      	muls	r3, r7
    6924:	4378      	muls	r0, r7
    6926:	18e3      	adds	r3, r4, r3
    6928:	0c17      	lsrs	r7, r2, #16
    692a:	19db      	adds	r3, r3, r7
    692c:	429c      	cmp	r4, r3
    692e:	d903      	bls.n	6938 <__aeabi_ddiv+0x39c>
    6930:	2480      	movs	r4, #128	; 0x80
    6932:	0264      	lsls	r4, r4, #9
    6934:	46a4      	mov	ip, r4
    6936:	4460      	add	r0, ip
    6938:	0c1c      	lsrs	r4, r3, #16
    693a:	0412      	lsls	r2, r2, #16
    693c:	041b      	lsls	r3, r3, #16
    693e:	0c12      	lsrs	r2, r2, #16
    6940:	1900      	adds	r0, r0, r4
    6942:	189b      	adds	r3, r3, r2
    6944:	4281      	cmp	r1, r0
    6946:	d200      	bcs.n	694a <__aeabi_ddiv+0x3ae>
    6948:	e096      	b.n	6a78 <__aeabi_ddiv+0x4dc>
    694a:	d100      	bne.n	694e <__aeabi_ddiv+0x3b2>
    694c:	e0fc      	b.n	6b48 <__aeabi_ddiv+0x5ac>
    694e:	464a      	mov	r2, r9
    6950:	2301      	movs	r3, #1
    6952:	431a      	orrs	r2, r3
    6954:	4691      	mov	r9, r2
    6956:	4b9b      	ldr	r3, [pc, #620]	; (6bc4 <__aeabi_ddiv+0x628>)
    6958:	18eb      	adds	r3, r5, r3
    695a:	2b00      	cmp	r3, #0
    695c:	dc00      	bgt.n	6960 <__aeabi_ddiv+0x3c4>
    695e:	e099      	b.n	6a94 <__aeabi_ddiv+0x4f8>
    6960:	464a      	mov	r2, r9
    6962:	0752      	lsls	r2, r2, #29
    6964:	d00a      	beq.n	697c <__aeabi_ddiv+0x3e0>
    6966:	220f      	movs	r2, #15
    6968:	4649      	mov	r1, r9
    696a:	400a      	ands	r2, r1
    696c:	2a04      	cmp	r2, #4
    696e:	d005      	beq.n	697c <__aeabi_ddiv+0x3e0>
    6970:	3104      	adds	r1, #4
    6972:	4549      	cmp	r1, r9
    6974:	4192      	sbcs	r2, r2
    6976:	4689      	mov	r9, r1
    6978:	4252      	negs	r2, r2
    697a:	4493      	add	fp, r2
    697c:	465a      	mov	r2, fp
    697e:	01d2      	lsls	r2, r2, #7
    6980:	d506      	bpl.n	6990 <__aeabi_ddiv+0x3f4>
    6982:	465a      	mov	r2, fp
    6984:	4b90      	ldr	r3, [pc, #576]	; (6bc8 <__aeabi_ddiv+0x62c>)
    6986:	401a      	ands	r2, r3
    6988:	2380      	movs	r3, #128	; 0x80
    698a:	4693      	mov	fp, r2
    698c:	00db      	lsls	r3, r3, #3
    698e:	18eb      	adds	r3, r5, r3
    6990:	4a8e      	ldr	r2, [pc, #568]	; (6bcc <__aeabi_ddiv+0x630>)
    6992:	4293      	cmp	r3, r2
    6994:	dd00      	ble.n	6998 <__aeabi_ddiv+0x3fc>
    6996:	e662      	b.n	665e <__aeabi_ddiv+0xc2>
    6998:	464a      	mov	r2, r9
    699a:	4659      	mov	r1, fp
    699c:	08d2      	lsrs	r2, r2, #3
    699e:	0749      	lsls	r1, r1, #29
    69a0:	4311      	orrs	r1, r2
    69a2:	465a      	mov	r2, fp
    69a4:	4689      	mov	r9, r1
    69a6:	0257      	lsls	r7, r2, #9
    69a8:	4651      	mov	r1, sl
    69aa:	2201      	movs	r2, #1
    69ac:	055b      	lsls	r3, r3, #21
    69ae:	0b3f      	lsrs	r7, r7, #12
    69b0:	0d5b      	lsrs	r3, r3, #21
    69b2:	400a      	ands	r2, r1
    69b4:	e65a      	b.n	666c <__aeabi_ddiv+0xd0>
    69b6:	2080      	movs	r0, #128	; 0x80
    69b8:	465a      	mov	r2, fp
    69ba:	0300      	lsls	r0, r0, #12
    69bc:	4202      	tst	r2, r0
    69be:	d008      	beq.n	69d2 <__aeabi_ddiv+0x436>
    69c0:	4207      	tst	r7, r0
    69c2:	d106      	bne.n	69d2 <__aeabi_ddiv+0x436>
    69c4:	4307      	orrs	r7, r0
    69c6:	033f      	lsls	r7, r7, #12
    69c8:	4699      	mov	r9, r3
    69ca:	0b3f      	lsrs	r7, r7, #12
    69cc:	4642      	mov	r2, r8
    69ce:	4b80      	ldr	r3, [pc, #512]	; (6bd0 <__aeabi_ddiv+0x634>)
    69d0:	e64c      	b.n	666c <__aeabi_ddiv+0xd0>
    69d2:	465f      	mov	r7, fp
    69d4:	4307      	orrs	r7, r0
    69d6:	033f      	lsls	r7, r7, #12
    69d8:	0b3f      	lsrs	r7, r7, #12
    69da:	1c22      	adds	r2, r4, #0
    69dc:	4b7c      	ldr	r3, [pc, #496]	; (6bd0 <__aeabi_ddiv+0x634>)
    69de:	e645      	b.n	666c <__aeabi_ddiv+0xd0>
    69e0:	f7fe ff72 	bl	58c8 <__clzsi2>
    69e4:	1c03      	adds	r3, r0, #0
    69e6:	3020      	adds	r0, #32
    69e8:	2827      	cmp	r0, #39	; 0x27
    69ea:	dc00      	bgt.n	69ee <__aeabi_ddiv+0x452>
    69ec:	e65e      	b.n	66ac <__aeabi_ddiv+0x110>
    69ee:	3b08      	subs	r3, #8
    69f0:	409e      	lsls	r6, r3
    69f2:	2300      	movs	r3, #0
    69f4:	46b3      	mov	fp, r6
    69f6:	4699      	mov	r9, r3
    69f8:	e665      	b.n	66c6 <__aeabi_ddiv+0x12a>
    69fa:	4650      	mov	r0, sl
    69fc:	f7fe ff64 	bl	58c8 <__clzsi2>
    6a00:	1c02      	adds	r2, r0, #0
    6a02:	3220      	adds	r2, #32
    6a04:	2a27      	cmp	r2, #39	; 0x27
    6a06:	dc00      	bgt.n	6a0a <__aeabi_ddiv+0x46e>
    6a08:	e675      	b.n	66f6 <__aeabi_ddiv+0x15a>
    6a0a:	4657      	mov	r7, sl
    6a0c:	3808      	subs	r0, #8
    6a0e:	4087      	lsls	r7, r0
    6a10:	2300      	movs	r3, #0
    6a12:	e67b      	b.n	670c <__aeabi_ddiv+0x170>
    6a14:	4599      	cmp	r9, r3
    6a16:	d200      	bcs.n	6a1a <__aeabi_ddiv+0x47e>
    6a18:	e6af      	b.n	677a <__aeabi_ddiv+0x1de>
    6a1a:	465a      	mov	r2, fp
    6a1c:	4659      	mov	r1, fp
    6a1e:	0854      	lsrs	r4, r2, #1
    6a20:	464a      	mov	r2, r9
    6a22:	07c8      	lsls	r0, r1, #31
    6a24:	0852      	lsrs	r2, r2, #1
    6a26:	4302      	orrs	r2, r0
    6a28:	9203      	str	r2, [sp, #12]
    6a2a:	464a      	mov	r2, r9
    6a2c:	07d2      	lsls	r2, r2, #31
    6a2e:	4690      	mov	r8, r2
    6a30:	e6a9      	b.n	6786 <__aeabi_ddiv+0x1ea>
    6a32:	2700      	movs	r7, #0
    6a34:	4588      	cmp	r8, r1
    6a36:	d300      	bcc.n	6a3a <__aeabi_ddiv+0x49e>
    6a38:	e71c      	b.n	6874 <__aeabi_ddiv+0x2d8>
    6a3a:	9f01      	ldr	r7, [sp, #4]
    6a3c:	465a      	mov	r2, fp
    6a3e:	46bc      	mov	ip, r7
    6a40:	44e0      	add	r8, ip
    6a42:	45b8      	cmp	r8, r7
    6a44:	41bf      	sbcs	r7, r7
    6a46:	427f      	negs	r7, r7
    6a48:	19bf      	adds	r7, r7, r6
    6a4a:	18ff      	adds	r7, r7, r3
    6a4c:	3a01      	subs	r2, #1
    6a4e:	42be      	cmp	r6, r7
    6a50:	d206      	bcs.n	6a60 <__aeabi_ddiv+0x4c4>
    6a52:	42bc      	cmp	r4, r7
    6a54:	d85f      	bhi.n	6b16 <__aeabi_ddiv+0x57a>
    6a56:	d100      	bne.n	6a5a <__aeabi_ddiv+0x4be>
    6a58:	e09f      	b.n	6b9a <__aeabi_ddiv+0x5fe>
    6a5a:	1b3f      	subs	r7, r7, r4
    6a5c:	4693      	mov	fp, r2
    6a5e:	e709      	b.n	6874 <__aeabi_ddiv+0x2d8>
    6a60:	42b7      	cmp	r7, r6
    6a62:	d1fa      	bne.n	6a5a <__aeabi_ddiv+0x4be>
    6a64:	9b01      	ldr	r3, [sp, #4]
    6a66:	4543      	cmp	r3, r8
    6a68:	d9f3      	bls.n	6a52 <__aeabi_ddiv+0x4b6>
    6a6a:	1b37      	subs	r7, r6, r4
    6a6c:	4693      	mov	fp, r2
    6a6e:	e701      	b.n	6874 <__aeabi_ddiv+0x2d8>
    6a70:	4693      	mov	fp, r2
    6a72:	e6d4      	b.n	681e <__aeabi_ddiv+0x282>
    6a74:	9302      	str	r3, [sp, #8]
    6a76:	e6b1      	b.n	67dc <__aeabi_ddiv+0x240>
    6a78:	464a      	mov	r2, r9
    6a7a:	1989      	adds	r1, r1, r6
    6a7c:	3a01      	subs	r2, #1
    6a7e:	428e      	cmp	r6, r1
    6a80:	d918      	bls.n	6ab4 <__aeabi_ddiv+0x518>
    6a82:	4691      	mov	r9, r2
    6a84:	4281      	cmp	r1, r0
    6a86:	d000      	beq.n	6a8a <__aeabi_ddiv+0x4ee>
    6a88:	e761      	b.n	694e <__aeabi_ddiv+0x3b2>
    6a8a:	9a01      	ldr	r2, [sp, #4]
    6a8c:	429a      	cmp	r2, r3
    6a8e:	d000      	beq.n	6a92 <__aeabi_ddiv+0x4f6>
    6a90:	e75d      	b.n	694e <__aeabi_ddiv+0x3b2>
    6a92:	e760      	b.n	6956 <__aeabi_ddiv+0x3ba>
    6a94:	4f4f      	ldr	r7, [pc, #316]	; (6bd4 <__aeabi_ddiv+0x638>)
    6a96:	1b7f      	subs	r7, r7, r5
    6a98:	2f38      	cmp	r7, #56	; 0x38
    6a9a:	dd13      	ble.n	6ac4 <__aeabi_ddiv+0x528>
    6a9c:	2201      	movs	r2, #1
    6a9e:	4653      	mov	r3, sl
    6aa0:	401a      	ands	r2, r3
    6aa2:	e64f      	b.n	6744 <__aeabi_ddiv+0x1a8>
    6aa4:	2301      	movs	r3, #1
    6aa6:	425b      	negs	r3, r3
    6aa8:	4699      	mov	r9, r3
    6aaa:	e754      	b.n	6956 <__aeabi_ddiv+0x3ba>
    6aac:	9302      	str	r3, [sp, #8]
    6aae:	e708      	b.n	68c2 <__aeabi_ddiv+0x326>
    6ab0:	9303      	str	r3, [sp, #12]
    6ab2:	e727      	b.n	6904 <__aeabi_ddiv+0x368>
    6ab4:	4288      	cmp	r0, r1
    6ab6:	d83c      	bhi.n	6b32 <__aeabi_ddiv+0x596>
    6ab8:	d074      	beq.n	6ba4 <__aeabi_ddiv+0x608>
    6aba:	4691      	mov	r9, r2
    6abc:	e747      	b.n	694e <__aeabi_ddiv+0x3b2>
    6abe:	9b01      	ldr	r3, [sp, #4]
    6ac0:	469a      	mov	sl, r3
    6ac2:	e748      	b.n	6956 <__aeabi_ddiv+0x3ba>
    6ac4:	2f1f      	cmp	r7, #31
    6ac6:	dc44      	bgt.n	6b52 <__aeabi_ddiv+0x5b6>
    6ac8:	4b43      	ldr	r3, [pc, #268]	; (6bd8 <__aeabi_ddiv+0x63c>)
    6aca:	464a      	mov	r2, r9
    6acc:	469c      	mov	ip, r3
    6ace:	465b      	mov	r3, fp
    6ad0:	4465      	add	r5, ip
    6ad2:	40fa      	lsrs	r2, r7
    6ad4:	40ab      	lsls	r3, r5
    6ad6:	4313      	orrs	r3, r2
    6ad8:	464a      	mov	r2, r9
    6ada:	40aa      	lsls	r2, r5
    6adc:	1c15      	adds	r5, r2, #0
    6ade:	1e6a      	subs	r2, r5, #1
    6ae0:	4195      	sbcs	r5, r2
    6ae2:	465a      	mov	r2, fp
    6ae4:	40fa      	lsrs	r2, r7
    6ae6:	432b      	orrs	r3, r5
    6ae8:	1c17      	adds	r7, r2, #0
    6aea:	075a      	lsls	r2, r3, #29
    6aec:	d009      	beq.n	6b02 <__aeabi_ddiv+0x566>
    6aee:	220f      	movs	r2, #15
    6af0:	401a      	ands	r2, r3
    6af2:	2a04      	cmp	r2, #4
    6af4:	d005      	beq.n	6b02 <__aeabi_ddiv+0x566>
    6af6:	1d1a      	adds	r2, r3, #4
    6af8:	429a      	cmp	r2, r3
    6afa:	419b      	sbcs	r3, r3
    6afc:	425b      	negs	r3, r3
    6afe:	18ff      	adds	r7, r7, r3
    6b00:	1c13      	adds	r3, r2, #0
    6b02:	023a      	lsls	r2, r7, #8
    6b04:	d53e      	bpl.n	6b84 <__aeabi_ddiv+0x5e8>
    6b06:	4653      	mov	r3, sl
    6b08:	2201      	movs	r2, #1
    6b0a:	2100      	movs	r1, #0
    6b0c:	401a      	ands	r2, r3
    6b0e:	2700      	movs	r7, #0
    6b10:	2301      	movs	r3, #1
    6b12:	4689      	mov	r9, r1
    6b14:	e5aa      	b.n	666c <__aeabi_ddiv+0xd0>
    6b16:	2302      	movs	r3, #2
    6b18:	425b      	negs	r3, r3
    6b1a:	469c      	mov	ip, r3
    6b1c:	9a01      	ldr	r2, [sp, #4]
    6b1e:	44e3      	add	fp, ip
    6b20:	4694      	mov	ip, r2
    6b22:	44e0      	add	r8, ip
    6b24:	4590      	cmp	r8, r2
    6b26:	419b      	sbcs	r3, r3
    6b28:	425b      	negs	r3, r3
    6b2a:	199b      	adds	r3, r3, r6
    6b2c:	19df      	adds	r7, r3, r7
    6b2e:	1b3f      	subs	r7, r7, r4
    6b30:	e6a0      	b.n	6874 <__aeabi_ddiv+0x2d8>
    6b32:	9f01      	ldr	r7, [sp, #4]
    6b34:	464a      	mov	r2, r9
    6b36:	007c      	lsls	r4, r7, #1
    6b38:	42bc      	cmp	r4, r7
    6b3a:	41bf      	sbcs	r7, r7
    6b3c:	427f      	negs	r7, r7
    6b3e:	19bf      	adds	r7, r7, r6
    6b40:	3a02      	subs	r2, #2
    6b42:	19c9      	adds	r1, r1, r7
    6b44:	9401      	str	r4, [sp, #4]
    6b46:	e79c      	b.n	6a82 <__aeabi_ddiv+0x4e6>
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d195      	bne.n	6a78 <__aeabi_ddiv+0x4dc>
    6b4c:	2200      	movs	r2, #0
    6b4e:	9201      	str	r2, [sp, #4]
    6b50:	e79b      	b.n	6a8a <__aeabi_ddiv+0x4ee>
    6b52:	465a      	mov	r2, fp
    6b54:	4b21      	ldr	r3, [pc, #132]	; (6bdc <__aeabi_ddiv+0x640>)
    6b56:	1b5b      	subs	r3, r3, r5
    6b58:	40da      	lsrs	r2, r3
    6b5a:	2f20      	cmp	r7, #32
    6b5c:	d027      	beq.n	6bae <__aeabi_ddiv+0x612>
    6b5e:	4b20      	ldr	r3, [pc, #128]	; (6be0 <__aeabi_ddiv+0x644>)
    6b60:	469c      	mov	ip, r3
    6b62:	465b      	mov	r3, fp
    6b64:	4465      	add	r5, ip
    6b66:	40ab      	lsls	r3, r5
    6b68:	4649      	mov	r1, r9
    6b6a:	430b      	orrs	r3, r1
    6b6c:	1e59      	subs	r1, r3, #1
    6b6e:	418b      	sbcs	r3, r1
    6b70:	4313      	orrs	r3, r2
    6b72:	2207      	movs	r2, #7
    6b74:	2700      	movs	r7, #0
    6b76:	401a      	ands	r2, r3
    6b78:	d007      	beq.n	6b8a <__aeabi_ddiv+0x5ee>
    6b7a:	220f      	movs	r2, #15
    6b7c:	2700      	movs	r7, #0
    6b7e:	401a      	ands	r2, r3
    6b80:	2a04      	cmp	r2, #4
    6b82:	d1b8      	bne.n	6af6 <__aeabi_ddiv+0x55a>
    6b84:	077a      	lsls	r2, r7, #29
    6b86:	027f      	lsls	r7, r7, #9
    6b88:	0b3f      	lsrs	r7, r7, #12
    6b8a:	08db      	lsrs	r3, r3, #3
    6b8c:	4313      	orrs	r3, r2
    6b8e:	4699      	mov	r9, r3
    6b90:	2201      	movs	r2, #1
    6b92:	4653      	mov	r3, sl
    6b94:	401a      	ands	r2, r3
    6b96:	2300      	movs	r3, #0
    6b98:	e568      	b.n	666c <__aeabi_ddiv+0xd0>
    6b9a:	4541      	cmp	r1, r8
    6b9c:	d8bb      	bhi.n	6b16 <__aeabi_ddiv+0x57a>
    6b9e:	4693      	mov	fp, r2
    6ba0:	2700      	movs	r7, #0
    6ba2:	e667      	b.n	6874 <__aeabi_ddiv+0x2d8>
    6ba4:	9c01      	ldr	r4, [sp, #4]
    6ba6:	429c      	cmp	r4, r3
    6ba8:	d3c3      	bcc.n	6b32 <__aeabi_ddiv+0x596>
    6baa:	4691      	mov	r9, r2
    6bac:	e76d      	b.n	6a8a <__aeabi_ddiv+0x4ee>
    6bae:	2300      	movs	r3, #0
    6bb0:	e7da      	b.n	6b68 <__aeabi_ddiv+0x5cc>
    6bb2:	2780      	movs	r7, #128	; 0x80
    6bb4:	465b      	mov	r3, fp
    6bb6:	033f      	lsls	r7, r7, #12
    6bb8:	431f      	orrs	r7, r3
    6bba:	033f      	lsls	r7, r7, #12
    6bbc:	0b3f      	lsrs	r7, r7, #12
    6bbe:	9a01      	ldr	r2, [sp, #4]
    6bc0:	4b03      	ldr	r3, [pc, #12]	; (6bd0 <__aeabi_ddiv+0x634>)
    6bc2:	e553      	b.n	666c <__aeabi_ddiv+0xd0>
    6bc4:	000003ff 	.word	0x000003ff
    6bc8:	feffffff 	.word	0xfeffffff
    6bcc:	000007fe 	.word	0x000007fe
    6bd0:	000007ff 	.word	0x000007ff
    6bd4:	fffffc02 	.word	0xfffffc02
    6bd8:	0000041e 	.word	0x0000041e
    6bdc:	fffffbe2 	.word	0xfffffbe2
    6be0:	0000043e 	.word	0x0000043e

00006be4 <__aeabi_dsub>:
    6be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6be6:	464d      	mov	r5, r9
    6be8:	4644      	mov	r4, r8
    6bea:	465f      	mov	r7, fp
    6bec:	4656      	mov	r6, sl
    6bee:	b4f0      	push	{r4, r5, r6, r7}
    6bf0:	1c0e      	adds	r6, r1, #0
    6bf2:	1c11      	adds	r1, r2, #0
    6bf4:	0332      	lsls	r2, r6, #12
    6bf6:	0a52      	lsrs	r2, r2, #9
    6bf8:	0f47      	lsrs	r7, r0, #29
    6bfa:	4317      	orrs	r7, r2
    6bfc:	00c5      	lsls	r5, r0, #3
    6bfe:	031a      	lsls	r2, r3, #12
    6c00:	0058      	lsls	r0, r3, #1
    6c02:	0fdb      	lsrs	r3, r3, #31
    6c04:	4699      	mov	r9, r3
    6c06:	0a52      	lsrs	r2, r2, #9
    6c08:	0f4b      	lsrs	r3, r1, #29
    6c0a:	b083      	sub	sp, #12
    6c0c:	431a      	orrs	r2, r3
    6c0e:	00cb      	lsls	r3, r1, #3
    6c10:	9301      	str	r3, [sp, #4]
    6c12:	4bcf      	ldr	r3, [pc, #828]	; (6f50 <__aeabi_dsub+0x36c>)
    6c14:	0074      	lsls	r4, r6, #1
    6c16:	0ff6      	lsrs	r6, r6, #31
    6c18:	0d64      	lsrs	r4, r4, #21
    6c1a:	46b0      	mov	r8, r6
    6c1c:	0d40      	lsrs	r0, r0, #21
    6c1e:	4298      	cmp	r0, r3
    6c20:	d100      	bne.n	6c24 <__aeabi_dsub+0x40>
    6c22:	e0e8      	b.n	6df6 <__aeabi_dsub+0x212>
    6c24:	2301      	movs	r3, #1
    6c26:	4649      	mov	r1, r9
    6c28:	4059      	eors	r1, r3
    6c2a:	1c0b      	adds	r3, r1, #0
    6c2c:	429e      	cmp	r6, r3
    6c2e:	d100      	bne.n	6c32 <__aeabi_dsub+0x4e>
    6c30:	e0b1      	b.n	6d96 <__aeabi_dsub+0x1b2>
    6c32:	1a26      	subs	r6, r4, r0
    6c34:	2e00      	cmp	r6, #0
    6c36:	dc00      	bgt.n	6c3a <__aeabi_dsub+0x56>
    6c38:	e11c      	b.n	6e74 <__aeabi_dsub+0x290>
    6c3a:	2800      	cmp	r0, #0
    6c3c:	d142      	bne.n	6cc4 <__aeabi_dsub+0xe0>
    6c3e:	1c13      	adds	r3, r2, #0
    6c40:	9901      	ldr	r1, [sp, #4]
    6c42:	430b      	orrs	r3, r1
    6c44:	d000      	beq.n	6c48 <__aeabi_dsub+0x64>
    6c46:	e0e6      	b.n	6e16 <__aeabi_dsub+0x232>
    6c48:	076b      	lsls	r3, r5, #29
    6c4a:	d100      	bne.n	6c4e <__aeabi_dsub+0x6a>
    6c4c:	e08e      	b.n	6d6c <__aeabi_dsub+0x188>
    6c4e:	230f      	movs	r3, #15
    6c50:	402b      	ands	r3, r5
    6c52:	2b04      	cmp	r3, #4
    6c54:	d100      	bne.n	6c58 <__aeabi_dsub+0x74>
    6c56:	e089      	b.n	6d6c <__aeabi_dsub+0x188>
    6c58:	1d2a      	adds	r2, r5, #4
    6c5a:	42aa      	cmp	r2, r5
    6c5c:	41ad      	sbcs	r5, r5
    6c5e:	2380      	movs	r3, #128	; 0x80
    6c60:	2601      	movs	r6, #1
    6c62:	4641      	mov	r1, r8
    6c64:	426d      	negs	r5, r5
    6c66:	197f      	adds	r7, r7, r5
    6c68:	041b      	lsls	r3, r3, #16
    6c6a:	403b      	ands	r3, r7
    6c6c:	400e      	ands	r6, r1
    6c6e:	1c15      	adds	r5, r2, #0
    6c70:	2b00      	cmp	r3, #0
    6c72:	d100      	bne.n	6c76 <__aeabi_dsub+0x92>
    6c74:	e083      	b.n	6d7e <__aeabi_dsub+0x19a>
    6c76:	4bb6      	ldr	r3, [pc, #728]	; (6f50 <__aeabi_dsub+0x36c>)
    6c78:	3401      	adds	r4, #1
    6c7a:	429c      	cmp	r4, r3
    6c7c:	d100      	bne.n	6c80 <__aeabi_dsub+0x9c>
    6c7e:	e116      	b.n	6eae <__aeabi_dsub+0x2ca>
    6c80:	1c3a      	adds	r2, r7, #0
    6c82:	4bb4      	ldr	r3, [pc, #720]	; (6f54 <__aeabi_dsub+0x370>)
    6c84:	08ed      	lsrs	r5, r5, #3
    6c86:	401a      	ands	r2, r3
    6c88:	0750      	lsls	r0, r2, #29
    6c8a:	0564      	lsls	r4, r4, #21
    6c8c:	0252      	lsls	r2, r2, #9
    6c8e:	4305      	orrs	r5, r0
    6c90:	0b12      	lsrs	r2, r2, #12
    6c92:	0d64      	lsrs	r4, r4, #21
    6c94:	2100      	movs	r1, #0
    6c96:	0312      	lsls	r2, r2, #12
    6c98:	0d0b      	lsrs	r3, r1, #20
    6c9a:	051b      	lsls	r3, r3, #20
    6c9c:	0564      	lsls	r4, r4, #21
    6c9e:	0b12      	lsrs	r2, r2, #12
    6ca0:	431a      	orrs	r2, r3
    6ca2:	0863      	lsrs	r3, r4, #1
    6ca4:	4cac      	ldr	r4, [pc, #688]	; (6f58 <__aeabi_dsub+0x374>)
    6ca6:	07f6      	lsls	r6, r6, #31
    6ca8:	4014      	ands	r4, r2
    6caa:	431c      	orrs	r4, r3
    6cac:	0064      	lsls	r4, r4, #1
    6cae:	0864      	lsrs	r4, r4, #1
    6cb0:	4334      	orrs	r4, r6
    6cb2:	1c28      	adds	r0, r5, #0
    6cb4:	1c21      	adds	r1, r4, #0
    6cb6:	b003      	add	sp, #12
    6cb8:	bc3c      	pop	{r2, r3, r4, r5}
    6cba:	4690      	mov	r8, r2
    6cbc:	4699      	mov	r9, r3
    6cbe:	46a2      	mov	sl, r4
    6cc0:	46ab      	mov	fp, r5
    6cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cc4:	4ba2      	ldr	r3, [pc, #648]	; (6f50 <__aeabi_dsub+0x36c>)
    6cc6:	429c      	cmp	r4, r3
    6cc8:	d0be      	beq.n	6c48 <__aeabi_dsub+0x64>
    6cca:	2380      	movs	r3, #128	; 0x80
    6ccc:	041b      	lsls	r3, r3, #16
    6cce:	431a      	orrs	r2, r3
    6cd0:	2e38      	cmp	r6, #56	; 0x38
    6cd2:	dd00      	ble.n	6cd6 <__aeabi_dsub+0xf2>
    6cd4:	e103      	b.n	6ede <__aeabi_dsub+0x2fa>
    6cd6:	2e1f      	cmp	r6, #31
    6cd8:	dd00      	ble.n	6cdc <__aeabi_dsub+0xf8>
    6cda:	e13f      	b.n	6f5c <__aeabi_dsub+0x378>
    6cdc:	2020      	movs	r0, #32
    6cde:	1b83      	subs	r3, r0, r6
    6ce0:	4699      	mov	r9, r3
    6ce2:	1c13      	adds	r3, r2, #0
    6ce4:	4649      	mov	r1, r9
    6ce6:	408b      	lsls	r3, r1
    6ce8:	469c      	mov	ip, r3
    6cea:	9b01      	ldr	r3, [sp, #4]
    6cec:	4660      	mov	r0, ip
    6cee:	40f3      	lsrs	r3, r6
    6cf0:	4303      	orrs	r3, r0
    6cf2:	9801      	ldr	r0, [sp, #4]
    6cf4:	40f2      	lsrs	r2, r6
    6cf6:	4088      	lsls	r0, r1
    6cf8:	1c01      	adds	r1, r0, #0
    6cfa:	1e48      	subs	r0, r1, #1
    6cfc:	4181      	sbcs	r1, r0
    6cfe:	430b      	orrs	r3, r1
    6d00:	1aeb      	subs	r3, r5, r3
    6d02:	429d      	cmp	r5, r3
    6d04:	4180      	sbcs	r0, r0
    6d06:	1c1d      	adds	r5, r3, #0
    6d08:	1aba      	subs	r2, r7, r2
    6d0a:	4240      	negs	r0, r0
    6d0c:	1a17      	subs	r7, r2, r0
    6d0e:	023b      	lsls	r3, r7, #8
    6d10:	d400      	bmi.n	6d14 <__aeabi_dsub+0x130>
    6d12:	e0a8      	b.n	6e66 <__aeabi_dsub+0x282>
    6d14:	027a      	lsls	r2, r7, #9
    6d16:	0a56      	lsrs	r6, r2, #9
    6d18:	2e00      	cmp	r6, #0
    6d1a:	d100      	bne.n	6d1e <__aeabi_dsub+0x13a>
    6d1c:	e0ca      	b.n	6eb4 <__aeabi_dsub+0x2d0>
    6d1e:	1c30      	adds	r0, r6, #0
    6d20:	f7fe fdd2 	bl	58c8 <__clzsi2>
    6d24:	1c03      	adds	r3, r0, #0
    6d26:	3b08      	subs	r3, #8
    6d28:	2b1f      	cmp	r3, #31
    6d2a:	dd00      	ble.n	6d2e <__aeabi_dsub+0x14a>
    6d2c:	e0cb      	b.n	6ec6 <__aeabi_dsub+0x2e2>
    6d2e:	2228      	movs	r2, #40	; 0x28
    6d30:	1c29      	adds	r1, r5, #0
    6d32:	1a12      	subs	r2, r2, r0
    6d34:	40d1      	lsrs	r1, r2
    6d36:	409e      	lsls	r6, r3
    6d38:	1c0a      	adds	r2, r1, #0
    6d3a:	409d      	lsls	r5, r3
    6d3c:	4332      	orrs	r2, r6
    6d3e:	429c      	cmp	r4, r3
    6d40:	dd00      	ble.n	6d44 <__aeabi_dsub+0x160>
    6d42:	e0c8      	b.n	6ed6 <__aeabi_dsub+0x2f2>
    6d44:	1b1c      	subs	r4, r3, r4
    6d46:	1c67      	adds	r7, r4, #1
    6d48:	2f1f      	cmp	r7, #31
    6d4a:	dd00      	ble.n	6d4e <__aeabi_dsub+0x16a>
    6d4c:	e0ed      	b.n	6f2a <__aeabi_dsub+0x346>
    6d4e:	231f      	movs	r3, #31
    6d50:	1c29      	adds	r1, r5, #0
    6d52:	1b1c      	subs	r4, r3, r4
    6d54:	1c13      	adds	r3, r2, #0
    6d56:	40a5      	lsls	r5, r4
    6d58:	40a3      	lsls	r3, r4
    6d5a:	40f9      	lsrs	r1, r7
    6d5c:	1e6c      	subs	r4, r5, #1
    6d5e:	41a5      	sbcs	r5, r4
    6d60:	40fa      	lsrs	r2, r7
    6d62:	4319      	orrs	r1, r3
    6d64:	430d      	orrs	r5, r1
    6d66:	1c17      	adds	r7, r2, #0
    6d68:	2400      	movs	r4, #0
    6d6a:	e76d      	b.n	6c48 <__aeabi_dsub+0x64>
    6d6c:	2380      	movs	r3, #128	; 0x80
    6d6e:	2601      	movs	r6, #1
    6d70:	4642      	mov	r2, r8
    6d72:	041b      	lsls	r3, r3, #16
    6d74:	403b      	ands	r3, r7
    6d76:	4016      	ands	r6, r2
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d000      	beq.n	6d7e <__aeabi_dsub+0x19a>
    6d7c:	e77b      	b.n	6c76 <__aeabi_dsub+0x92>
    6d7e:	4b74      	ldr	r3, [pc, #464]	; (6f50 <__aeabi_dsub+0x36c>)
    6d80:	08ed      	lsrs	r5, r5, #3
    6d82:	0778      	lsls	r0, r7, #29
    6d84:	4305      	orrs	r5, r0
    6d86:	08fa      	lsrs	r2, r7, #3
    6d88:	429c      	cmp	r4, r3
    6d8a:	d03b      	beq.n	6e04 <__aeabi_dsub+0x220>
    6d8c:	0312      	lsls	r2, r2, #12
    6d8e:	0564      	lsls	r4, r4, #21
    6d90:	0b12      	lsrs	r2, r2, #12
    6d92:	0d64      	lsrs	r4, r4, #21
    6d94:	e77e      	b.n	6c94 <__aeabi_dsub+0xb0>
    6d96:	1a23      	subs	r3, r4, r0
    6d98:	469a      	mov	sl, r3
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	dc00      	bgt.n	6da0 <__aeabi_dsub+0x1bc>
    6d9e:	e0a5      	b.n	6eec <__aeabi_dsub+0x308>
    6da0:	2800      	cmp	r0, #0
    6da2:	d044      	beq.n	6e2e <__aeabi_dsub+0x24a>
    6da4:	486a      	ldr	r0, [pc, #424]	; (6f50 <__aeabi_dsub+0x36c>)
    6da6:	4284      	cmp	r4, r0
    6da8:	d100      	bne.n	6dac <__aeabi_dsub+0x1c8>
    6daa:	e74d      	b.n	6c48 <__aeabi_dsub+0x64>
    6dac:	2080      	movs	r0, #128	; 0x80
    6dae:	0400      	lsls	r0, r0, #16
    6db0:	4302      	orrs	r2, r0
    6db2:	4653      	mov	r3, sl
    6db4:	2b38      	cmp	r3, #56	; 0x38
    6db6:	dc00      	bgt.n	6dba <__aeabi_dsub+0x1d6>
    6db8:	e11c      	b.n	6ff4 <__aeabi_dsub+0x410>
    6dba:	9b01      	ldr	r3, [sp, #4]
    6dbc:	431a      	orrs	r2, r3
    6dbe:	1e51      	subs	r1, r2, #1
    6dc0:	418a      	sbcs	r2, r1
    6dc2:	b2d1      	uxtb	r1, r2
    6dc4:	2200      	movs	r2, #0
    6dc6:	1949      	adds	r1, r1, r5
    6dc8:	42a9      	cmp	r1, r5
    6dca:	4180      	sbcs	r0, r0
    6dcc:	1c0d      	adds	r5, r1, #0
    6dce:	19d2      	adds	r2, r2, r7
    6dd0:	4240      	negs	r0, r0
    6dd2:	1817      	adds	r7, r2, r0
    6dd4:	023b      	lsls	r3, r7, #8
    6dd6:	d546      	bpl.n	6e66 <__aeabi_dsub+0x282>
    6dd8:	4b5d      	ldr	r3, [pc, #372]	; (6f50 <__aeabi_dsub+0x36c>)
    6dda:	3401      	adds	r4, #1
    6ddc:	429c      	cmp	r4, r3
    6dde:	d100      	bne.n	6de2 <__aeabi_dsub+0x1fe>
    6de0:	e169      	b.n	70b6 <__aeabi_dsub+0x4d2>
    6de2:	2001      	movs	r0, #1
    6de4:	4a5b      	ldr	r2, [pc, #364]	; (6f54 <__aeabi_dsub+0x370>)
    6de6:	086b      	lsrs	r3, r5, #1
    6de8:	403a      	ands	r2, r7
    6dea:	4028      	ands	r0, r5
    6dec:	4318      	orrs	r0, r3
    6dee:	07d5      	lsls	r5, r2, #31
    6df0:	4305      	orrs	r5, r0
    6df2:	0857      	lsrs	r7, r2, #1
    6df4:	e728      	b.n	6c48 <__aeabi_dsub+0x64>
    6df6:	1c13      	adds	r3, r2, #0
    6df8:	9901      	ldr	r1, [sp, #4]
    6dfa:	430b      	orrs	r3, r1
    6dfc:	d100      	bne.n	6e00 <__aeabi_dsub+0x21c>
    6dfe:	e711      	b.n	6c24 <__aeabi_dsub+0x40>
    6e00:	464b      	mov	r3, r9
    6e02:	e713      	b.n	6c2c <__aeabi_dsub+0x48>
    6e04:	1c2b      	adds	r3, r5, #0
    6e06:	4313      	orrs	r3, r2
    6e08:	d051      	beq.n	6eae <__aeabi_dsub+0x2ca>
    6e0a:	2380      	movs	r3, #128	; 0x80
    6e0c:	031b      	lsls	r3, r3, #12
    6e0e:	431a      	orrs	r2, r3
    6e10:	0312      	lsls	r2, r2, #12
    6e12:	0b12      	lsrs	r2, r2, #12
    6e14:	e73e      	b.n	6c94 <__aeabi_dsub+0xb0>
    6e16:	3e01      	subs	r6, #1
    6e18:	2e00      	cmp	r6, #0
    6e1a:	d000      	beq.n	6e1e <__aeabi_dsub+0x23a>
    6e1c:	e080      	b.n	6f20 <__aeabi_dsub+0x33c>
    6e1e:	1a69      	subs	r1, r5, r1
    6e20:	428d      	cmp	r5, r1
    6e22:	419b      	sbcs	r3, r3
    6e24:	1aba      	subs	r2, r7, r2
    6e26:	425b      	negs	r3, r3
    6e28:	1ad7      	subs	r7, r2, r3
    6e2a:	1c0d      	adds	r5, r1, #0
    6e2c:	e76f      	b.n	6d0e <__aeabi_dsub+0x12a>
    6e2e:	1c10      	adds	r0, r2, #0
    6e30:	9b01      	ldr	r3, [sp, #4]
    6e32:	4318      	orrs	r0, r3
    6e34:	d100      	bne.n	6e38 <__aeabi_dsub+0x254>
    6e36:	e707      	b.n	6c48 <__aeabi_dsub+0x64>
    6e38:	2301      	movs	r3, #1
    6e3a:	425b      	negs	r3, r3
    6e3c:	469c      	mov	ip, r3
    6e3e:	44e2      	add	sl, ip
    6e40:	4653      	mov	r3, sl
    6e42:	2b00      	cmp	r3, #0
    6e44:	d000      	beq.n	6e48 <__aeabi_dsub+0x264>
    6e46:	e102      	b.n	704e <__aeabi_dsub+0x46a>
    6e48:	9b01      	ldr	r3, [sp, #4]
    6e4a:	19d2      	adds	r2, r2, r7
    6e4c:	1959      	adds	r1, r3, r5
    6e4e:	42a9      	cmp	r1, r5
    6e50:	419b      	sbcs	r3, r3
    6e52:	425b      	negs	r3, r3
    6e54:	18d7      	adds	r7, r2, r3
    6e56:	1c0d      	adds	r5, r1, #0
    6e58:	e7bc      	b.n	6dd4 <__aeabi_dsub+0x1f0>
    6e5a:	4663      	mov	r3, ip
    6e5c:	4303      	orrs	r3, r0
    6e5e:	d100      	bne.n	6e62 <__aeabi_dsub+0x27e>
    6e60:	e128      	b.n	70b4 <__aeabi_dsub+0x4d0>
    6e62:	1c07      	adds	r7, r0, #0
    6e64:	4665      	mov	r5, ip
    6e66:	076b      	lsls	r3, r5, #29
    6e68:	d000      	beq.n	6e6c <__aeabi_dsub+0x288>
    6e6a:	e6f0      	b.n	6c4e <__aeabi_dsub+0x6a>
    6e6c:	2601      	movs	r6, #1
    6e6e:	4643      	mov	r3, r8
    6e70:	401e      	ands	r6, r3
    6e72:	e784      	b.n	6d7e <__aeabi_dsub+0x19a>
    6e74:	2e00      	cmp	r6, #0
    6e76:	d000      	beq.n	6e7a <__aeabi_dsub+0x296>
    6e78:	e081      	b.n	6f7e <__aeabi_dsub+0x39a>
    6e7a:	1c60      	adds	r0, r4, #1
    6e7c:	0540      	lsls	r0, r0, #21
    6e7e:	0d40      	lsrs	r0, r0, #21
    6e80:	2801      	cmp	r0, #1
    6e82:	dc00      	bgt.n	6e86 <__aeabi_dsub+0x2a2>
    6e84:	e107      	b.n	7096 <__aeabi_dsub+0x4b2>
    6e86:	9901      	ldr	r1, [sp, #4]
    6e88:	1a68      	subs	r0, r5, r1
    6e8a:	4684      	mov	ip, r0
    6e8c:	4565      	cmp	r5, ip
    6e8e:	41b6      	sbcs	r6, r6
    6e90:	1ab8      	subs	r0, r7, r2
    6e92:	4276      	negs	r6, r6
    6e94:	1b86      	subs	r6, r0, r6
    6e96:	0230      	lsls	r0, r6, #8
    6e98:	d400      	bmi.n	6e9c <__aeabi_dsub+0x2b8>
    6e9a:	e0a1      	b.n	6fe0 <__aeabi_dsub+0x3fc>
    6e9c:	468c      	mov	ip, r1
    6e9e:	1b4d      	subs	r5, r1, r5
    6ea0:	45ac      	cmp	ip, r5
    6ea2:	4189      	sbcs	r1, r1
    6ea4:	1bd2      	subs	r2, r2, r7
    6ea6:	4249      	negs	r1, r1
    6ea8:	1a56      	subs	r6, r2, r1
    6eaa:	4698      	mov	r8, r3
    6eac:	e734      	b.n	6d18 <__aeabi_dsub+0x134>
    6eae:	2200      	movs	r2, #0
    6eb0:	2500      	movs	r5, #0
    6eb2:	e6ef      	b.n	6c94 <__aeabi_dsub+0xb0>
    6eb4:	1c28      	adds	r0, r5, #0
    6eb6:	f7fe fd07 	bl	58c8 <__clzsi2>
    6eba:	3020      	adds	r0, #32
    6ebc:	1c03      	adds	r3, r0, #0
    6ebe:	3b08      	subs	r3, #8
    6ec0:	2b1f      	cmp	r3, #31
    6ec2:	dc00      	bgt.n	6ec6 <__aeabi_dsub+0x2e2>
    6ec4:	e733      	b.n	6d2e <__aeabi_dsub+0x14a>
    6ec6:	1c02      	adds	r2, r0, #0
    6ec8:	3a28      	subs	r2, #40	; 0x28
    6eca:	4095      	lsls	r5, r2
    6ecc:	1c2a      	adds	r2, r5, #0
    6ece:	2500      	movs	r5, #0
    6ed0:	429c      	cmp	r4, r3
    6ed2:	dc00      	bgt.n	6ed6 <__aeabi_dsub+0x2f2>
    6ed4:	e736      	b.n	6d44 <__aeabi_dsub+0x160>
    6ed6:	4f1f      	ldr	r7, [pc, #124]	; (6f54 <__aeabi_dsub+0x370>)
    6ed8:	1ae4      	subs	r4, r4, r3
    6eda:	4017      	ands	r7, r2
    6edc:	e6b4      	b.n	6c48 <__aeabi_dsub+0x64>
    6ede:	9b01      	ldr	r3, [sp, #4]
    6ee0:	431a      	orrs	r2, r3
    6ee2:	1e51      	subs	r1, r2, #1
    6ee4:	418a      	sbcs	r2, r1
    6ee6:	b2d3      	uxtb	r3, r2
    6ee8:	2200      	movs	r2, #0
    6eea:	e709      	b.n	6d00 <__aeabi_dsub+0x11c>
    6eec:	2b00      	cmp	r3, #0
    6eee:	d000      	beq.n	6ef2 <__aeabi_dsub+0x30e>
    6ef0:	e101      	b.n	70f6 <__aeabi_dsub+0x512>
    6ef2:	1c60      	adds	r0, r4, #1
    6ef4:	0543      	lsls	r3, r0, #21
    6ef6:	0d5b      	lsrs	r3, r3, #21
    6ef8:	2b01      	cmp	r3, #1
    6efa:	dc00      	bgt.n	6efe <__aeabi_dsub+0x31a>
    6efc:	e0b0      	b.n	7060 <__aeabi_dsub+0x47c>
    6efe:	4b14      	ldr	r3, [pc, #80]	; (6f50 <__aeabi_dsub+0x36c>)
    6f00:	4298      	cmp	r0, r3
    6f02:	d100      	bne.n	6f06 <__aeabi_dsub+0x322>
    6f04:	e11e      	b.n	7144 <__aeabi_dsub+0x560>
    6f06:	9b01      	ldr	r3, [sp, #4]
    6f08:	19d2      	adds	r2, r2, r7
    6f0a:	1959      	adds	r1, r3, r5
    6f0c:	42a9      	cmp	r1, r5
    6f0e:	419b      	sbcs	r3, r3
    6f10:	425b      	negs	r3, r3
    6f12:	18d2      	adds	r2, r2, r3
    6f14:	0849      	lsrs	r1, r1, #1
    6f16:	07d5      	lsls	r5, r2, #31
    6f18:	430d      	orrs	r5, r1
    6f1a:	0857      	lsrs	r7, r2, #1
    6f1c:	1c04      	adds	r4, r0, #0
    6f1e:	e693      	b.n	6c48 <__aeabi_dsub+0x64>
    6f20:	4b0b      	ldr	r3, [pc, #44]	; (6f50 <__aeabi_dsub+0x36c>)
    6f22:	429c      	cmp	r4, r3
    6f24:	d000      	beq.n	6f28 <__aeabi_dsub+0x344>
    6f26:	e6d3      	b.n	6cd0 <__aeabi_dsub+0xec>
    6f28:	e68e      	b.n	6c48 <__aeabi_dsub+0x64>
    6f2a:	1c21      	adds	r1, r4, #0
    6f2c:	1c13      	adds	r3, r2, #0
    6f2e:	391f      	subs	r1, #31
    6f30:	40cb      	lsrs	r3, r1
    6f32:	1c19      	adds	r1, r3, #0
    6f34:	2f20      	cmp	r7, #32
    6f36:	d100      	bne.n	6f3a <__aeabi_dsub+0x356>
    6f38:	e08e      	b.n	7058 <__aeabi_dsub+0x474>
    6f3a:	233f      	movs	r3, #63	; 0x3f
    6f3c:	1b1c      	subs	r4, r3, r4
    6f3e:	40a2      	lsls	r2, r4
    6f40:	4315      	orrs	r5, r2
    6f42:	1e6a      	subs	r2, r5, #1
    6f44:	4195      	sbcs	r5, r2
    6f46:	2700      	movs	r7, #0
    6f48:	430d      	orrs	r5, r1
    6f4a:	2400      	movs	r4, #0
    6f4c:	e78b      	b.n	6e66 <__aeabi_dsub+0x282>
    6f4e:	46c0      	nop			; (mov r8, r8)
    6f50:	000007ff 	.word	0x000007ff
    6f54:	ff7fffff 	.word	0xff7fffff
    6f58:	800fffff 	.word	0x800fffff
    6f5c:	1c33      	adds	r3, r6, #0
    6f5e:	1c10      	adds	r0, r2, #0
    6f60:	3b20      	subs	r3, #32
    6f62:	40d8      	lsrs	r0, r3
    6f64:	2e20      	cmp	r6, #32
    6f66:	d079      	beq.n	705c <__aeabi_dsub+0x478>
    6f68:	2340      	movs	r3, #64	; 0x40
    6f6a:	1b9b      	subs	r3, r3, r6
    6f6c:	409a      	lsls	r2, r3
    6f6e:	1c13      	adds	r3, r2, #0
    6f70:	9a01      	ldr	r2, [sp, #4]
    6f72:	4313      	orrs	r3, r2
    6f74:	1e59      	subs	r1, r3, #1
    6f76:	418b      	sbcs	r3, r1
    6f78:	2200      	movs	r2, #0
    6f7a:	4303      	orrs	r3, r0
    6f7c:	e6c0      	b.n	6d00 <__aeabi_dsub+0x11c>
    6f7e:	2c00      	cmp	r4, #0
    6f80:	d053      	beq.n	702a <__aeabi_dsub+0x446>
    6f82:	4cc7      	ldr	r4, [pc, #796]	; (72a0 <__aeabi_dsub+0x6bc>)
    6f84:	42a0      	cmp	r0, r4
    6f86:	d100      	bne.n	6f8a <__aeabi_dsub+0x3a6>
    6f88:	e0b0      	b.n	70ec <__aeabi_dsub+0x508>
    6f8a:	2480      	movs	r4, #128	; 0x80
    6f8c:	4271      	negs	r1, r6
    6f8e:	4689      	mov	r9, r1
    6f90:	0424      	lsls	r4, r4, #16
    6f92:	4327      	orrs	r7, r4
    6f94:	4649      	mov	r1, r9
    6f96:	2938      	cmp	r1, #56	; 0x38
    6f98:	dd00      	ble.n	6f9c <__aeabi_dsub+0x3b8>
    6f9a:	e0cd      	b.n	7138 <__aeabi_dsub+0x554>
    6f9c:	291f      	cmp	r1, #31
    6f9e:	dd00      	ble.n	6fa2 <__aeabi_dsub+0x3be>
    6fa0:	e159      	b.n	7256 <__aeabi_dsub+0x672>
    6fa2:	2420      	movs	r4, #32
    6fa4:	1c3e      	adds	r6, r7, #0
    6fa6:	1a61      	subs	r1, r4, r1
    6fa8:	408e      	lsls	r6, r1
    6faa:	468a      	mov	sl, r1
    6fac:	46b0      	mov	r8, r6
    6fae:	4649      	mov	r1, r9
    6fb0:	1c2e      	adds	r6, r5, #0
    6fb2:	40ce      	lsrs	r6, r1
    6fb4:	4651      	mov	r1, sl
    6fb6:	46b4      	mov	ip, r6
    6fb8:	408d      	lsls	r5, r1
    6fba:	4664      	mov	r4, ip
    6fbc:	4646      	mov	r6, r8
    6fbe:	4649      	mov	r1, r9
    6fc0:	4326      	orrs	r6, r4
    6fc2:	1e6c      	subs	r4, r5, #1
    6fc4:	41a5      	sbcs	r5, r4
    6fc6:	40cf      	lsrs	r7, r1
    6fc8:	4335      	orrs	r5, r6
    6fca:	9901      	ldr	r1, [sp, #4]
    6fcc:	1bd7      	subs	r7, r2, r7
    6fce:	468c      	mov	ip, r1
    6fd0:	1b4d      	subs	r5, r1, r5
    6fd2:	45ac      	cmp	ip, r5
    6fd4:	4192      	sbcs	r2, r2
    6fd6:	4252      	negs	r2, r2
    6fd8:	1abf      	subs	r7, r7, r2
    6fda:	1c04      	adds	r4, r0, #0
    6fdc:	4698      	mov	r8, r3
    6fde:	e696      	b.n	6d0e <__aeabi_dsub+0x12a>
    6fe0:	4663      	mov	r3, ip
    6fe2:	4665      	mov	r5, ip
    6fe4:	4333      	orrs	r3, r6
    6fe6:	d000      	beq.n	6fea <__aeabi_dsub+0x406>
    6fe8:	e696      	b.n	6d18 <__aeabi_dsub+0x134>
    6fea:	2600      	movs	r6, #0
    6fec:	2700      	movs	r7, #0
    6fee:	2400      	movs	r4, #0
    6ff0:	2500      	movs	r5, #0
    6ff2:	e6c4      	b.n	6d7e <__aeabi_dsub+0x19a>
    6ff4:	2b1f      	cmp	r3, #31
    6ff6:	dc61      	bgt.n	70bc <__aeabi_dsub+0x4d8>
    6ff8:	2020      	movs	r0, #32
    6ffa:	1ac3      	subs	r3, r0, r3
    6ffc:	469b      	mov	fp, r3
    6ffe:	1c13      	adds	r3, r2, #0
    7000:	4659      	mov	r1, fp
    7002:	408b      	lsls	r3, r1
    7004:	4651      	mov	r1, sl
    7006:	4699      	mov	r9, r3
    7008:	9b01      	ldr	r3, [sp, #4]
    700a:	40cb      	lsrs	r3, r1
    700c:	469c      	mov	ip, r3
    700e:	464b      	mov	r3, r9
    7010:	4660      	mov	r0, ip
    7012:	4303      	orrs	r3, r0
    7014:	469c      	mov	ip, r3
    7016:	465b      	mov	r3, fp
    7018:	9901      	ldr	r1, [sp, #4]
    701a:	4099      	lsls	r1, r3
    701c:	4663      	mov	r3, ip
    701e:	1e48      	subs	r0, r1, #1
    7020:	4181      	sbcs	r1, r0
    7022:	4319      	orrs	r1, r3
    7024:	4653      	mov	r3, sl
    7026:	40da      	lsrs	r2, r3
    7028:	e6cd      	b.n	6dc6 <__aeabi_dsub+0x1e2>
    702a:	1c3c      	adds	r4, r7, #0
    702c:	432c      	orrs	r4, r5
    702e:	d05d      	beq.n	70ec <__aeabi_dsub+0x508>
    7030:	43f1      	mvns	r1, r6
    7032:	4689      	mov	r9, r1
    7034:	2900      	cmp	r1, #0
    7036:	d155      	bne.n	70e4 <__aeabi_dsub+0x500>
    7038:	9901      	ldr	r1, [sp, #4]
    703a:	1bd2      	subs	r2, r2, r7
    703c:	468c      	mov	ip, r1
    703e:	1b4d      	subs	r5, r1, r5
    7040:	45ac      	cmp	ip, r5
    7042:	4189      	sbcs	r1, r1
    7044:	4249      	negs	r1, r1
    7046:	1a57      	subs	r7, r2, r1
    7048:	1c04      	adds	r4, r0, #0
    704a:	4698      	mov	r8, r3
    704c:	e65f      	b.n	6d0e <__aeabi_dsub+0x12a>
    704e:	4894      	ldr	r0, [pc, #592]	; (72a0 <__aeabi_dsub+0x6bc>)
    7050:	4284      	cmp	r4, r0
    7052:	d000      	beq.n	7056 <__aeabi_dsub+0x472>
    7054:	e6ad      	b.n	6db2 <__aeabi_dsub+0x1ce>
    7056:	e5f7      	b.n	6c48 <__aeabi_dsub+0x64>
    7058:	2200      	movs	r2, #0
    705a:	e771      	b.n	6f40 <__aeabi_dsub+0x35c>
    705c:	2300      	movs	r3, #0
    705e:	e787      	b.n	6f70 <__aeabi_dsub+0x38c>
    7060:	1c3b      	adds	r3, r7, #0
    7062:	432b      	orrs	r3, r5
    7064:	2c00      	cmp	r4, #0
    7066:	d000      	beq.n	706a <__aeabi_dsub+0x486>
    7068:	e0da      	b.n	7220 <__aeabi_dsub+0x63c>
    706a:	2b00      	cmp	r3, #0
    706c:	d100      	bne.n	7070 <__aeabi_dsub+0x48c>
    706e:	e113      	b.n	7298 <__aeabi_dsub+0x6b4>
    7070:	1c13      	adds	r3, r2, #0
    7072:	9901      	ldr	r1, [sp, #4]
    7074:	430b      	orrs	r3, r1
    7076:	d100      	bne.n	707a <__aeabi_dsub+0x496>
    7078:	e5e6      	b.n	6c48 <__aeabi_dsub+0x64>
    707a:	1949      	adds	r1, r1, r5
    707c:	42a9      	cmp	r1, r5
    707e:	419b      	sbcs	r3, r3
    7080:	19d2      	adds	r2, r2, r7
    7082:	425b      	negs	r3, r3
    7084:	18d7      	adds	r7, r2, r3
    7086:	023b      	lsls	r3, r7, #8
    7088:	d400      	bmi.n	708c <__aeabi_dsub+0x4a8>
    708a:	e121      	b.n	72d0 <__aeabi_dsub+0x6ec>
    708c:	4b85      	ldr	r3, [pc, #532]	; (72a4 <__aeabi_dsub+0x6c0>)
    708e:	1c0d      	adds	r5, r1, #0
    7090:	401f      	ands	r7, r3
    7092:	1c04      	adds	r4, r0, #0
    7094:	e5d8      	b.n	6c48 <__aeabi_dsub+0x64>
    7096:	1c38      	adds	r0, r7, #0
    7098:	4328      	orrs	r0, r5
    709a:	2c00      	cmp	r4, #0
    709c:	d140      	bne.n	7120 <__aeabi_dsub+0x53c>
    709e:	2800      	cmp	r0, #0
    70a0:	d000      	beq.n	70a4 <__aeabi_dsub+0x4c0>
    70a2:	e083      	b.n	71ac <__aeabi_dsub+0x5c8>
    70a4:	1c10      	adds	r0, r2, #0
    70a6:	9901      	ldr	r1, [sp, #4]
    70a8:	4308      	orrs	r0, r1
    70aa:	d003      	beq.n	70b4 <__aeabi_dsub+0x4d0>
    70ac:	1c17      	adds	r7, r2, #0
    70ae:	1c0d      	adds	r5, r1, #0
    70b0:	4698      	mov	r8, r3
    70b2:	e5c9      	b.n	6c48 <__aeabi_dsub+0x64>
    70b4:	2600      	movs	r6, #0
    70b6:	2700      	movs	r7, #0
    70b8:	2500      	movs	r5, #0
    70ba:	e660      	b.n	6d7e <__aeabi_dsub+0x19a>
    70bc:	4650      	mov	r0, sl
    70be:	1c13      	adds	r3, r2, #0
    70c0:	3820      	subs	r0, #32
    70c2:	40c3      	lsrs	r3, r0
    70c4:	1c18      	adds	r0, r3, #0
    70c6:	4653      	mov	r3, sl
    70c8:	2b20      	cmp	r3, #32
    70ca:	d100      	bne.n	70ce <__aeabi_dsub+0x4ea>
    70cc:	e0c1      	b.n	7252 <__aeabi_dsub+0x66e>
    70ce:	2340      	movs	r3, #64	; 0x40
    70d0:	4651      	mov	r1, sl
    70d2:	1a5b      	subs	r3, r3, r1
    70d4:	409a      	lsls	r2, r3
    70d6:	9901      	ldr	r1, [sp, #4]
    70d8:	4311      	orrs	r1, r2
    70da:	1e4a      	subs	r2, r1, #1
    70dc:	4191      	sbcs	r1, r2
    70de:	2200      	movs	r2, #0
    70e0:	4301      	orrs	r1, r0
    70e2:	e670      	b.n	6dc6 <__aeabi_dsub+0x1e2>
    70e4:	4c6e      	ldr	r4, [pc, #440]	; (72a0 <__aeabi_dsub+0x6bc>)
    70e6:	42a0      	cmp	r0, r4
    70e8:	d000      	beq.n	70ec <__aeabi_dsub+0x508>
    70ea:	e753      	b.n	6f94 <__aeabi_dsub+0x3b0>
    70ec:	1c17      	adds	r7, r2, #0
    70ee:	9d01      	ldr	r5, [sp, #4]
    70f0:	1c04      	adds	r4, r0, #0
    70f2:	4698      	mov	r8, r3
    70f4:	e5a8      	b.n	6c48 <__aeabi_dsub+0x64>
    70f6:	2c00      	cmp	r4, #0
    70f8:	d128      	bne.n	714c <__aeabi_dsub+0x568>
    70fa:	1c3c      	adds	r4, r7, #0
    70fc:	432c      	orrs	r4, r5
    70fe:	d100      	bne.n	7102 <__aeabi_dsub+0x51e>
    7100:	e08a      	b.n	7218 <__aeabi_dsub+0x634>
    7102:	43db      	mvns	r3, r3
    7104:	469a      	mov	sl, r3
    7106:	2b00      	cmp	r3, #0
    7108:	d000      	beq.n	710c <__aeabi_dsub+0x528>
    710a:	e082      	b.n	7212 <__aeabi_dsub+0x62e>
    710c:	9b01      	ldr	r3, [sp, #4]
    710e:	19d2      	adds	r2, r2, r7
    7110:	469c      	mov	ip, r3
    7112:	4465      	add	r5, ip
    7114:	429d      	cmp	r5, r3
    7116:	4189      	sbcs	r1, r1
    7118:	4249      	negs	r1, r1
    711a:	1857      	adds	r7, r2, r1
    711c:	1c04      	adds	r4, r0, #0
    711e:	e659      	b.n	6dd4 <__aeabi_dsub+0x1f0>
    7120:	2800      	cmp	r0, #0
    7122:	d15b      	bne.n	71dc <__aeabi_dsub+0x5f8>
    7124:	1c10      	adds	r0, r2, #0
    7126:	9901      	ldr	r1, [sp, #4]
    7128:	4308      	orrs	r0, r1
    712a:	d100      	bne.n	712e <__aeabi_dsub+0x54a>
    712c:	e0a4      	b.n	7278 <__aeabi_dsub+0x694>
    712e:	1c17      	adds	r7, r2, #0
    7130:	1c0d      	adds	r5, r1, #0
    7132:	4698      	mov	r8, r3
    7134:	4c5a      	ldr	r4, [pc, #360]	; (72a0 <__aeabi_dsub+0x6bc>)
    7136:	e587      	b.n	6c48 <__aeabi_dsub+0x64>
    7138:	433d      	orrs	r5, r7
    713a:	1e6f      	subs	r7, r5, #1
    713c:	41bd      	sbcs	r5, r7
    713e:	2700      	movs	r7, #0
    7140:	b2ed      	uxtb	r5, r5
    7142:	e742      	b.n	6fca <__aeabi_dsub+0x3e6>
    7144:	1c04      	adds	r4, r0, #0
    7146:	2700      	movs	r7, #0
    7148:	2500      	movs	r5, #0
    714a:	e618      	b.n	6d7e <__aeabi_dsub+0x19a>
    714c:	4c54      	ldr	r4, [pc, #336]	; (72a0 <__aeabi_dsub+0x6bc>)
    714e:	42a0      	cmp	r0, r4
    7150:	d062      	beq.n	7218 <__aeabi_dsub+0x634>
    7152:	4653      	mov	r3, sl
    7154:	2480      	movs	r4, #128	; 0x80
    7156:	425b      	negs	r3, r3
    7158:	469a      	mov	sl, r3
    715a:	0424      	lsls	r4, r4, #16
    715c:	4327      	orrs	r7, r4
    715e:	4653      	mov	r3, sl
    7160:	2b38      	cmp	r3, #56	; 0x38
    7162:	dd00      	ble.n	7166 <__aeabi_dsub+0x582>
    7164:	e08e      	b.n	7284 <__aeabi_dsub+0x6a0>
    7166:	2b1f      	cmp	r3, #31
    7168:	dd00      	ble.n	716c <__aeabi_dsub+0x588>
    716a:	e09d      	b.n	72a8 <__aeabi_dsub+0x6c4>
    716c:	2420      	movs	r4, #32
    716e:	1ae3      	subs	r3, r4, r3
    7170:	469b      	mov	fp, r3
    7172:	1c3b      	adds	r3, r7, #0
    7174:	4659      	mov	r1, fp
    7176:	408b      	lsls	r3, r1
    7178:	4651      	mov	r1, sl
    717a:	4699      	mov	r9, r3
    717c:	1c2b      	adds	r3, r5, #0
    717e:	40cb      	lsrs	r3, r1
    7180:	469c      	mov	ip, r3
    7182:	464b      	mov	r3, r9
    7184:	4664      	mov	r4, ip
    7186:	4323      	orrs	r3, r4
    7188:	469c      	mov	ip, r3
    718a:	465b      	mov	r3, fp
    718c:	409d      	lsls	r5, r3
    718e:	4663      	mov	r3, ip
    7190:	1e6c      	subs	r4, r5, #1
    7192:	41a5      	sbcs	r5, r4
    7194:	40cf      	lsrs	r7, r1
    7196:	431d      	orrs	r5, r3
    7198:	9b01      	ldr	r3, [sp, #4]
    719a:	18bf      	adds	r7, r7, r2
    719c:	469c      	mov	ip, r3
    719e:	4465      	add	r5, ip
    71a0:	429d      	cmp	r5, r3
    71a2:	4192      	sbcs	r2, r2
    71a4:	4252      	negs	r2, r2
    71a6:	18bf      	adds	r7, r7, r2
    71a8:	1c04      	adds	r4, r0, #0
    71aa:	e613      	b.n	6dd4 <__aeabi_dsub+0x1f0>
    71ac:	1c10      	adds	r0, r2, #0
    71ae:	9901      	ldr	r1, [sp, #4]
    71b0:	4308      	orrs	r0, r1
    71b2:	d100      	bne.n	71b6 <__aeabi_dsub+0x5d2>
    71b4:	e548      	b.n	6c48 <__aeabi_dsub+0x64>
    71b6:	1a68      	subs	r0, r5, r1
    71b8:	4684      	mov	ip, r0
    71ba:	4285      	cmp	r5, r0
    71bc:	4180      	sbcs	r0, r0
    71be:	1abe      	subs	r6, r7, r2
    71c0:	4240      	negs	r0, r0
    71c2:	1a30      	subs	r0, r6, r0
    71c4:	0206      	lsls	r6, r0, #8
    71c6:	d400      	bmi.n	71ca <__aeabi_dsub+0x5e6>
    71c8:	e647      	b.n	6e5a <__aeabi_dsub+0x276>
    71ca:	468c      	mov	ip, r1
    71cc:	1b4d      	subs	r5, r1, r5
    71ce:	45ac      	cmp	ip, r5
    71d0:	4189      	sbcs	r1, r1
    71d2:	1bd2      	subs	r2, r2, r7
    71d4:	4249      	negs	r1, r1
    71d6:	1a57      	subs	r7, r2, r1
    71d8:	4698      	mov	r8, r3
    71da:	e535      	b.n	6c48 <__aeabi_dsub+0x64>
    71dc:	1c10      	adds	r0, r2, #0
    71de:	9901      	ldr	r1, [sp, #4]
    71e0:	4308      	orrs	r0, r1
    71e2:	d034      	beq.n	724e <__aeabi_dsub+0x66a>
    71e4:	2480      	movs	r4, #128	; 0x80
    71e6:	0778      	lsls	r0, r7, #29
    71e8:	08ed      	lsrs	r5, r5, #3
    71ea:	08ff      	lsrs	r7, r7, #3
    71ec:	0324      	lsls	r4, r4, #12
    71ee:	4328      	orrs	r0, r5
    71f0:	4227      	tst	r7, r4
    71f2:	d008      	beq.n	7206 <__aeabi_dsub+0x622>
    71f4:	08d6      	lsrs	r6, r2, #3
    71f6:	4226      	tst	r6, r4
    71f8:	d105      	bne.n	7206 <__aeabi_dsub+0x622>
    71fa:	08c9      	lsrs	r1, r1, #3
    71fc:	0752      	lsls	r2, r2, #29
    71fe:	430a      	orrs	r2, r1
    7200:	1c10      	adds	r0, r2, #0
    7202:	1c37      	adds	r7, r6, #0
    7204:	4698      	mov	r8, r3
    7206:	00ff      	lsls	r7, r7, #3
    7208:	0f42      	lsrs	r2, r0, #29
    720a:	4317      	orrs	r7, r2
    720c:	00c5      	lsls	r5, r0, #3
    720e:	4c24      	ldr	r4, [pc, #144]	; (72a0 <__aeabi_dsub+0x6bc>)
    7210:	e51a      	b.n	6c48 <__aeabi_dsub+0x64>
    7212:	4c23      	ldr	r4, [pc, #140]	; (72a0 <__aeabi_dsub+0x6bc>)
    7214:	42a0      	cmp	r0, r4
    7216:	d1a2      	bne.n	715e <__aeabi_dsub+0x57a>
    7218:	1c17      	adds	r7, r2, #0
    721a:	9d01      	ldr	r5, [sp, #4]
    721c:	1c04      	adds	r4, r0, #0
    721e:	e513      	b.n	6c48 <__aeabi_dsub+0x64>
    7220:	2b00      	cmp	r3, #0
    7222:	d035      	beq.n	7290 <__aeabi_dsub+0x6ac>
    7224:	1c13      	adds	r3, r2, #0
    7226:	9901      	ldr	r1, [sp, #4]
    7228:	430b      	orrs	r3, r1
    722a:	d010      	beq.n	724e <__aeabi_dsub+0x66a>
    722c:	2480      	movs	r4, #128	; 0x80
    722e:	0778      	lsls	r0, r7, #29
    7230:	08ed      	lsrs	r5, r5, #3
    7232:	08ff      	lsrs	r7, r7, #3
    7234:	0324      	lsls	r4, r4, #12
    7236:	4328      	orrs	r0, r5
    7238:	4227      	tst	r7, r4
    723a:	d0e4      	beq.n	7206 <__aeabi_dsub+0x622>
    723c:	08d3      	lsrs	r3, r2, #3
    723e:	4223      	tst	r3, r4
    7240:	d1e1      	bne.n	7206 <__aeabi_dsub+0x622>
    7242:	08c9      	lsrs	r1, r1, #3
    7244:	0752      	lsls	r2, r2, #29
    7246:	430a      	orrs	r2, r1
    7248:	1c10      	adds	r0, r2, #0
    724a:	1c1f      	adds	r7, r3, #0
    724c:	e7db      	b.n	7206 <__aeabi_dsub+0x622>
    724e:	4c14      	ldr	r4, [pc, #80]	; (72a0 <__aeabi_dsub+0x6bc>)
    7250:	e4fa      	b.n	6c48 <__aeabi_dsub+0x64>
    7252:	2200      	movs	r2, #0
    7254:	e73f      	b.n	70d6 <__aeabi_dsub+0x4f2>
    7256:	464c      	mov	r4, r9
    7258:	1c3e      	adds	r6, r7, #0
    725a:	3c20      	subs	r4, #32
    725c:	40e6      	lsrs	r6, r4
    725e:	4649      	mov	r1, r9
    7260:	1c34      	adds	r4, r6, #0
    7262:	2920      	cmp	r1, #32
    7264:	d032      	beq.n	72cc <__aeabi_dsub+0x6e8>
    7266:	2640      	movs	r6, #64	; 0x40
    7268:	1a76      	subs	r6, r6, r1
    726a:	40b7      	lsls	r7, r6
    726c:	433d      	orrs	r5, r7
    726e:	1e6f      	subs	r7, r5, #1
    7270:	41bd      	sbcs	r5, r7
    7272:	2700      	movs	r7, #0
    7274:	4325      	orrs	r5, r4
    7276:	e6a8      	b.n	6fca <__aeabi_dsub+0x3e6>
    7278:	2780      	movs	r7, #128	; 0x80
    727a:	2600      	movs	r6, #0
    727c:	03ff      	lsls	r7, r7, #15
    727e:	4c08      	ldr	r4, [pc, #32]	; (72a0 <__aeabi_dsub+0x6bc>)
    7280:	2500      	movs	r5, #0
    7282:	e57c      	b.n	6d7e <__aeabi_dsub+0x19a>
    7284:	433d      	orrs	r5, r7
    7286:	1e6f      	subs	r7, r5, #1
    7288:	41bd      	sbcs	r5, r7
    728a:	2700      	movs	r7, #0
    728c:	b2ed      	uxtb	r5, r5
    728e:	e783      	b.n	7198 <__aeabi_dsub+0x5b4>
    7290:	1c17      	adds	r7, r2, #0
    7292:	9d01      	ldr	r5, [sp, #4]
    7294:	4c02      	ldr	r4, [pc, #8]	; (72a0 <__aeabi_dsub+0x6bc>)
    7296:	e4d7      	b.n	6c48 <__aeabi_dsub+0x64>
    7298:	1c17      	adds	r7, r2, #0
    729a:	9d01      	ldr	r5, [sp, #4]
    729c:	e4d4      	b.n	6c48 <__aeabi_dsub+0x64>
    729e:	46c0      	nop			; (mov r8, r8)
    72a0:	000007ff 	.word	0x000007ff
    72a4:	ff7fffff 	.word	0xff7fffff
    72a8:	4654      	mov	r4, sl
    72aa:	1c3b      	adds	r3, r7, #0
    72ac:	3c20      	subs	r4, #32
    72ae:	40e3      	lsrs	r3, r4
    72b0:	1c1c      	adds	r4, r3, #0
    72b2:	4653      	mov	r3, sl
    72b4:	2b20      	cmp	r3, #32
    72b6:	d00d      	beq.n	72d4 <__aeabi_dsub+0x6f0>
    72b8:	2340      	movs	r3, #64	; 0x40
    72ba:	4651      	mov	r1, sl
    72bc:	1a5b      	subs	r3, r3, r1
    72be:	409f      	lsls	r7, r3
    72c0:	433d      	orrs	r5, r7
    72c2:	1e6f      	subs	r7, r5, #1
    72c4:	41bd      	sbcs	r5, r7
    72c6:	2700      	movs	r7, #0
    72c8:	4325      	orrs	r5, r4
    72ca:	e765      	b.n	7198 <__aeabi_dsub+0x5b4>
    72cc:	2700      	movs	r7, #0
    72ce:	e7cd      	b.n	726c <__aeabi_dsub+0x688>
    72d0:	1c0d      	adds	r5, r1, #0
    72d2:	e5c8      	b.n	6e66 <__aeabi_dsub+0x282>
    72d4:	2700      	movs	r7, #0
    72d6:	e7f3      	b.n	72c0 <__aeabi_dsub+0x6dc>

000072d8 <__aeabi_f2d>:
    72d8:	0042      	lsls	r2, r0, #1
    72da:	0e12      	lsrs	r2, r2, #24
    72dc:	1c51      	adds	r1, r2, #1
    72de:	b538      	push	{r3, r4, r5, lr}
    72e0:	b2c9      	uxtb	r1, r1
    72e2:	0243      	lsls	r3, r0, #9
    72e4:	0a5d      	lsrs	r5, r3, #9
    72e6:	0fc4      	lsrs	r4, r0, #31
    72e8:	2901      	cmp	r1, #1
    72ea:	dd15      	ble.n	7318 <__aeabi_f2d+0x40>
    72ec:	21e0      	movs	r1, #224	; 0xe0
    72ee:	0089      	lsls	r1, r1, #2
    72f0:	468c      	mov	ip, r1
    72f2:	076d      	lsls	r5, r5, #29
    72f4:	0b1b      	lsrs	r3, r3, #12
    72f6:	4462      	add	r2, ip
    72f8:	2100      	movs	r1, #0
    72fa:	1c28      	adds	r0, r5, #0
    72fc:	0d0d      	lsrs	r5, r1, #20
    72fe:	052d      	lsls	r5, r5, #20
    7300:	432b      	orrs	r3, r5
    7302:	4d1c      	ldr	r5, [pc, #112]	; (7374 <__aeabi_f2d+0x9c>)
    7304:	0552      	lsls	r2, r2, #21
    7306:	402b      	ands	r3, r5
    7308:	0852      	lsrs	r2, r2, #1
    730a:	4313      	orrs	r3, r2
    730c:	005b      	lsls	r3, r3, #1
    730e:	07e4      	lsls	r4, r4, #31
    7310:	085b      	lsrs	r3, r3, #1
    7312:	4323      	orrs	r3, r4
    7314:	1c19      	adds	r1, r3, #0
    7316:	bd38      	pop	{r3, r4, r5, pc}
    7318:	2a00      	cmp	r2, #0
    731a:	d115      	bne.n	7348 <__aeabi_f2d+0x70>
    731c:	2d00      	cmp	r5, #0
    731e:	d01f      	beq.n	7360 <__aeabi_f2d+0x88>
    7320:	1c28      	adds	r0, r5, #0
    7322:	f7fe fad1 	bl	58c8 <__clzsi2>
    7326:	280a      	cmp	r0, #10
    7328:	dc1d      	bgt.n	7366 <__aeabi_f2d+0x8e>
    732a:	230b      	movs	r3, #11
    732c:	1c2a      	adds	r2, r5, #0
    732e:	1a1b      	subs	r3, r3, r0
    7330:	40da      	lsrs	r2, r3
    7332:	1c13      	adds	r3, r2, #0
    7334:	1c02      	adds	r2, r0, #0
    7336:	3215      	adds	r2, #21
    7338:	4095      	lsls	r5, r2
    733a:	4a0f      	ldr	r2, [pc, #60]	; (7378 <__aeabi_f2d+0xa0>)
    733c:	031b      	lsls	r3, r3, #12
    733e:	1a12      	subs	r2, r2, r0
    7340:	0552      	lsls	r2, r2, #21
    7342:	0b1b      	lsrs	r3, r3, #12
    7344:	0d52      	lsrs	r2, r2, #21
    7346:	e7d7      	b.n	72f8 <__aeabi_f2d+0x20>
    7348:	2d00      	cmp	r5, #0
    734a:	d006      	beq.n	735a <__aeabi_f2d+0x82>
    734c:	2280      	movs	r2, #128	; 0x80
    734e:	0b1b      	lsrs	r3, r3, #12
    7350:	0312      	lsls	r2, r2, #12
    7352:	4313      	orrs	r3, r2
    7354:	076d      	lsls	r5, r5, #29
    7356:	4a09      	ldr	r2, [pc, #36]	; (737c <__aeabi_f2d+0xa4>)
    7358:	e7ce      	b.n	72f8 <__aeabi_f2d+0x20>
    735a:	4a08      	ldr	r2, [pc, #32]	; (737c <__aeabi_f2d+0xa4>)
    735c:	2300      	movs	r3, #0
    735e:	e7cb      	b.n	72f8 <__aeabi_f2d+0x20>
    7360:	2200      	movs	r2, #0
    7362:	2300      	movs	r3, #0
    7364:	e7c8      	b.n	72f8 <__aeabi_f2d+0x20>
    7366:	1c03      	adds	r3, r0, #0
    7368:	3b0b      	subs	r3, #11
    736a:	409d      	lsls	r5, r3
    736c:	1c2b      	adds	r3, r5, #0
    736e:	2500      	movs	r5, #0
    7370:	e7e3      	b.n	733a <__aeabi_f2d+0x62>
    7372:	46c0      	nop			; (mov r8, r8)
    7374:	800fffff 	.word	0x800fffff
    7378:	00000389 	.word	0x00000389
    737c:	000007ff 	.word	0x000007ff

00007380 <__aeabi_d2f>:
    7380:	b570      	push	{r4, r5, r6, lr}
    7382:	030b      	lsls	r3, r1, #12
    7384:	004d      	lsls	r5, r1, #1
    7386:	0f44      	lsrs	r4, r0, #29
    7388:	0d6d      	lsrs	r5, r5, #21
    738a:	0a5b      	lsrs	r3, r3, #9
    738c:	4323      	orrs	r3, r4
    738e:	1c6c      	adds	r4, r5, #1
    7390:	0564      	lsls	r4, r4, #21
    7392:	0fc9      	lsrs	r1, r1, #31
    7394:	00c2      	lsls	r2, r0, #3
    7396:	0d64      	lsrs	r4, r4, #21
    7398:	2c01      	cmp	r4, #1
    739a:	dd2a      	ble.n	73f2 <__aeabi_d2f+0x72>
    739c:	4c3b      	ldr	r4, [pc, #236]	; (748c <__aeabi_d2f+0x10c>)
    739e:	192c      	adds	r4, r5, r4
    73a0:	2cfe      	cmp	r4, #254	; 0xfe
    73a2:	dc1a      	bgt.n	73da <__aeabi_d2f+0x5a>
    73a4:	2c00      	cmp	r4, #0
    73a6:	dd35      	ble.n	7414 <__aeabi_d2f+0x94>
    73a8:	0180      	lsls	r0, r0, #6
    73aa:	1e45      	subs	r5, r0, #1
    73ac:	41a8      	sbcs	r0, r5
    73ae:	00db      	lsls	r3, r3, #3
    73b0:	4303      	orrs	r3, r0
    73b2:	0f52      	lsrs	r2, r2, #29
    73b4:	4313      	orrs	r3, r2
    73b6:	075a      	lsls	r2, r3, #29
    73b8:	d004      	beq.n	73c4 <__aeabi_d2f+0x44>
    73ba:	220f      	movs	r2, #15
    73bc:	401a      	ands	r2, r3
    73be:	2a04      	cmp	r2, #4
    73c0:	d000      	beq.n	73c4 <__aeabi_d2f+0x44>
    73c2:	3304      	adds	r3, #4
    73c4:	2280      	movs	r2, #128	; 0x80
    73c6:	04d2      	lsls	r2, r2, #19
    73c8:	401a      	ands	r2, r3
    73ca:	d027      	beq.n	741c <__aeabi_d2f+0x9c>
    73cc:	3401      	adds	r4, #1
    73ce:	2cff      	cmp	r4, #255	; 0xff
    73d0:	d003      	beq.n	73da <__aeabi_d2f+0x5a>
    73d2:	019b      	lsls	r3, r3, #6
    73d4:	0a5b      	lsrs	r3, r3, #9
    73d6:	b2e4      	uxtb	r4, r4
    73d8:	e001      	b.n	73de <__aeabi_d2f+0x5e>
    73da:	24ff      	movs	r4, #255	; 0xff
    73dc:	2300      	movs	r3, #0
    73de:	025b      	lsls	r3, r3, #9
    73e0:	05e4      	lsls	r4, r4, #23
    73e2:	0a5b      	lsrs	r3, r3, #9
    73e4:	4323      	orrs	r3, r4
    73e6:	005b      	lsls	r3, r3, #1
    73e8:	07c9      	lsls	r1, r1, #31
    73ea:	085b      	lsrs	r3, r3, #1
    73ec:	430b      	orrs	r3, r1
    73ee:	1c18      	adds	r0, r3, #0
    73f0:	bd70      	pop	{r4, r5, r6, pc}
    73f2:	2d00      	cmp	r5, #0
    73f4:	d106      	bne.n	7404 <__aeabi_d2f+0x84>
    73f6:	4313      	orrs	r3, r2
    73f8:	d10e      	bne.n	7418 <__aeabi_d2f+0x98>
    73fa:	2400      	movs	r4, #0
    73fc:	025b      	lsls	r3, r3, #9
    73fe:	0a5b      	lsrs	r3, r3, #9
    7400:	b2e4      	uxtb	r4, r4
    7402:	e7ec      	b.n	73de <__aeabi_d2f+0x5e>
    7404:	431a      	orrs	r2, r3
    7406:	d0e8      	beq.n	73da <__aeabi_d2f+0x5a>
    7408:	2080      	movs	r0, #128	; 0x80
    740a:	00db      	lsls	r3, r3, #3
    740c:	0480      	lsls	r0, r0, #18
    740e:	4303      	orrs	r3, r0
    7410:	24ff      	movs	r4, #255	; 0xff
    7412:	e7d0      	b.n	73b6 <__aeabi_d2f+0x36>
    7414:	3417      	adds	r4, #23
    7416:	da0c      	bge.n	7432 <__aeabi_d2f+0xb2>
    7418:	2305      	movs	r3, #5
    741a:	2400      	movs	r4, #0
    741c:	08db      	lsrs	r3, r3, #3
    741e:	2cff      	cmp	r4, #255	; 0xff
    7420:	d1ec      	bne.n	73fc <__aeabi_d2f+0x7c>
    7422:	2b00      	cmp	r3, #0
    7424:	d02d      	beq.n	7482 <__aeabi_d2f+0x102>
    7426:	2280      	movs	r2, #128	; 0x80
    7428:	03d2      	lsls	r2, r2, #15
    742a:	4313      	orrs	r3, r2
    742c:	025b      	lsls	r3, r3, #9
    742e:	0a5b      	lsrs	r3, r3, #9
    7430:	e7d5      	b.n	73de <__aeabi_d2f+0x5e>
    7432:	2480      	movs	r4, #128	; 0x80
    7434:	4816      	ldr	r0, [pc, #88]	; (7490 <__aeabi_d2f+0x110>)
    7436:	0424      	lsls	r4, r4, #16
    7438:	4323      	orrs	r3, r4
    743a:	1b40      	subs	r0, r0, r5
    743c:	281f      	cmp	r0, #31
    743e:	dc0d      	bgt.n	745c <__aeabi_d2f+0xdc>
    7440:	4c14      	ldr	r4, [pc, #80]	; (7494 <__aeabi_d2f+0x114>)
    7442:	46a4      	mov	ip, r4
    7444:	4465      	add	r5, ip
    7446:	40ab      	lsls	r3, r5
    7448:	1c1c      	adds	r4, r3, #0
    744a:	1c13      	adds	r3, r2, #0
    744c:	40ab      	lsls	r3, r5
    744e:	1e5d      	subs	r5, r3, #1
    7450:	41ab      	sbcs	r3, r5
    7452:	40c2      	lsrs	r2, r0
    7454:	4323      	orrs	r3, r4
    7456:	4313      	orrs	r3, r2
    7458:	2400      	movs	r4, #0
    745a:	e7ac      	b.n	73b6 <__aeabi_d2f+0x36>
    745c:	1c1e      	adds	r6, r3, #0
    745e:	4c0e      	ldr	r4, [pc, #56]	; (7498 <__aeabi_d2f+0x118>)
    7460:	1b64      	subs	r4, r4, r5
    7462:	40e6      	lsrs	r6, r4
    7464:	1c34      	adds	r4, r6, #0
    7466:	2820      	cmp	r0, #32
    7468:	d00d      	beq.n	7486 <__aeabi_d2f+0x106>
    746a:	480c      	ldr	r0, [pc, #48]	; (749c <__aeabi_d2f+0x11c>)
    746c:	4684      	mov	ip, r0
    746e:	4465      	add	r5, ip
    7470:	40ab      	lsls	r3, r5
    7472:	1c1d      	adds	r5, r3, #0
    7474:	432a      	orrs	r2, r5
    7476:	1e53      	subs	r3, r2, #1
    7478:	419a      	sbcs	r2, r3
    747a:	1c13      	adds	r3, r2, #0
    747c:	4323      	orrs	r3, r4
    747e:	2400      	movs	r4, #0
    7480:	e799      	b.n	73b6 <__aeabi_d2f+0x36>
    7482:	2300      	movs	r3, #0
    7484:	e7ab      	b.n	73de <__aeabi_d2f+0x5e>
    7486:	2500      	movs	r5, #0
    7488:	e7f4      	b.n	7474 <__aeabi_d2f+0xf4>
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	fffffc80 	.word	0xfffffc80
    7490:	0000039e 	.word	0x0000039e
    7494:	fffffc82 	.word	0xfffffc82
    7498:	0000037e 	.word	0x0000037e
    749c:	fffffca2 	.word	0xfffffca2

000074a0 <__aeabi_cfrcmple>:
    74a0:	4684      	mov	ip, r0
    74a2:	1c08      	adds	r0, r1, #0
    74a4:	4661      	mov	r1, ip
    74a6:	e7ff      	b.n	74a8 <__aeabi_cfcmpeq>

000074a8 <__aeabi_cfcmpeq>:
    74a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    74aa:	f000 f8a7 	bl	75fc <__lesf2>
    74ae:	2800      	cmp	r0, #0
    74b0:	d401      	bmi.n	74b6 <__aeabi_cfcmpeq+0xe>
    74b2:	2100      	movs	r1, #0
    74b4:	42c8      	cmn	r0, r1
    74b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000074b8 <__aeabi_fcmpeq>:
    74b8:	b510      	push	{r4, lr}
    74ba:	f000 f82b 	bl	7514 <__eqsf2>
    74be:	4240      	negs	r0, r0
    74c0:	3001      	adds	r0, #1
    74c2:	bd10      	pop	{r4, pc}

000074c4 <__aeabi_fcmplt>:
    74c4:	b510      	push	{r4, lr}
    74c6:	f000 f899 	bl	75fc <__lesf2>
    74ca:	2800      	cmp	r0, #0
    74cc:	db01      	blt.n	74d2 <__aeabi_fcmplt+0xe>
    74ce:	2000      	movs	r0, #0
    74d0:	bd10      	pop	{r4, pc}
    74d2:	2001      	movs	r0, #1
    74d4:	bd10      	pop	{r4, pc}
    74d6:	46c0      	nop			; (mov r8, r8)

000074d8 <__aeabi_fcmple>:
    74d8:	b510      	push	{r4, lr}
    74da:	f000 f88f 	bl	75fc <__lesf2>
    74de:	2800      	cmp	r0, #0
    74e0:	dd01      	ble.n	74e6 <__aeabi_fcmple+0xe>
    74e2:	2000      	movs	r0, #0
    74e4:	bd10      	pop	{r4, pc}
    74e6:	2001      	movs	r0, #1
    74e8:	bd10      	pop	{r4, pc}
    74ea:	46c0      	nop			; (mov r8, r8)

000074ec <__aeabi_fcmpgt>:
    74ec:	b510      	push	{r4, lr}
    74ee:	f000 f83b 	bl	7568 <__gesf2>
    74f2:	2800      	cmp	r0, #0
    74f4:	dc01      	bgt.n	74fa <__aeabi_fcmpgt+0xe>
    74f6:	2000      	movs	r0, #0
    74f8:	bd10      	pop	{r4, pc}
    74fa:	2001      	movs	r0, #1
    74fc:	bd10      	pop	{r4, pc}
    74fe:	46c0      	nop			; (mov r8, r8)

00007500 <__aeabi_fcmpge>:
    7500:	b510      	push	{r4, lr}
    7502:	f000 f831 	bl	7568 <__gesf2>
    7506:	2800      	cmp	r0, #0
    7508:	da01      	bge.n	750e <__aeabi_fcmpge+0xe>
    750a:	2000      	movs	r0, #0
    750c:	bd10      	pop	{r4, pc}
    750e:	2001      	movs	r0, #1
    7510:	bd10      	pop	{r4, pc}
    7512:	46c0      	nop			; (mov r8, r8)

00007514 <__eqsf2>:
    7514:	0243      	lsls	r3, r0, #9
    7516:	b570      	push	{r4, r5, r6, lr}
    7518:	0042      	lsls	r2, r0, #1
    751a:	004c      	lsls	r4, r1, #1
    751c:	0a5d      	lsrs	r5, r3, #9
    751e:	0fc3      	lsrs	r3, r0, #31
    7520:	0248      	lsls	r0, r1, #9
    7522:	0e12      	lsrs	r2, r2, #24
    7524:	0a46      	lsrs	r6, r0, #9
    7526:	0e24      	lsrs	r4, r4, #24
    7528:	0fc9      	lsrs	r1, r1, #31
    752a:	2aff      	cmp	r2, #255	; 0xff
    752c:	d005      	beq.n	753a <__eqsf2+0x26>
    752e:	2cff      	cmp	r4, #255	; 0xff
    7530:	d008      	beq.n	7544 <__eqsf2+0x30>
    7532:	2001      	movs	r0, #1
    7534:	42a2      	cmp	r2, r4
    7536:	d00b      	beq.n	7550 <__eqsf2+0x3c>
    7538:	bd70      	pop	{r4, r5, r6, pc}
    753a:	2001      	movs	r0, #1
    753c:	2d00      	cmp	r5, #0
    753e:	d1fb      	bne.n	7538 <__eqsf2+0x24>
    7540:	2cff      	cmp	r4, #255	; 0xff
    7542:	d1f6      	bne.n	7532 <__eqsf2+0x1e>
    7544:	2001      	movs	r0, #1
    7546:	2e00      	cmp	r6, #0
    7548:	d1f6      	bne.n	7538 <__eqsf2+0x24>
    754a:	2001      	movs	r0, #1
    754c:	42a2      	cmp	r2, r4
    754e:	d1f3      	bne.n	7538 <__eqsf2+0x24>
    7550:	42b5      	cmp	r5, r6
    7552:	d1f1      	bne.n	7538 <__eqsf2+0x24>
    7554:	428b      	cmp	r3, r1
    7556:	d005      	beq.n	7564 <__eqsf2+0x50>
    7558:	2a00      	cmp	r2, #0
    755a:	d1ed      	bne.n	7538 <__eqsf2+0x24>
    755c:	1c28      	adds	r0, r5, #0
    755e:	1e43      	subs	r3, r0, #1
    7560:	4198      	sbcs	r0, r3
    7562:	e7e9      	b.n	7538 <__eqsf2+0x24>
    7564:	2000      	movs	r0, #0
    7566:	e7e7      	b.n	7538 <__eqsf2+0x24>

00007568 <__gesf2>:
    7568:	b5f0      	push	{r4, r5, r6, r7, lr}
    756a:	0243      	lsls	r3, r0, #9
    756c:	024d      	lsls	r5, r1, #9
    756e:	004a      	lsls	r2, r1, #1
    7570:	0044      	lsls	r4, r0, #1
    7572:	0a5e      	lsrs	r6, r3, #9
    7574:	0e24      	lsrs	r4, r4, #24
    7576:	0fc3      	lsrs	r3, r0, #31
    7578:	0a6d      	lsrs	r5, r5, #9
    757a:	0e12      	lsrs	r2, r2, #24
    757c:	0fc9      	lsrs	r1, r1, #31
    757e:	2cff      	cmp	r4, #255	; 0xff
    7580:	d00d      	beq.n	759e <__gesf2+0x36>
    7582:	2aff      	cmp	r2, #255	; 0xff
    7584:	d031      	beq.n	75ea <__gesf2+0x82>
    7586:	2c00      	cmp	r4, #0
    7588:	d10d      	bne.n	75a6 <__gesf2+0x3e>
    758a:	4277      	negs	r7, r6
    758c:	4177      	adcs	r7, r6
    758e:	2a00      	cmp	r2, #0
    7590:	d123      	bne.n	75da <__gesf2+0x72>
    7592:	2d00      	cmp	r5, #0
    7594:	d121      	bne.n	75da <__gesf2+0x72>
    7596:	2000      	movs	r0, #0
    7598:	2f00      	cmp	r7, #0
    759a:	d10b      	bne.n	75b4 <__gesf2+0x4c>
    759c:	e007      	b.n	75ae <__gesf2+0x46>
    759e:	2e00      	cmp	r6, #0
    75a0:	d128      	bne.n	75f4 <__gesf2+0x8c>
    75a2:	2aff      	cmp	r2, #255	; 0xff
    75a4:	d021      	beq.n	75ea <__gesf2+0x82>
    75a6:	2a00      	cmp	r2, #0
    75a8:	d005      	beq.n	75b6 <__gesf2+0x4e>
    75aa:	428b      	cmp	r3, r1
    75ac:	d007      	beq.n	75be <__gesf2+0x56>
    75ae:	4258      	negs	r0, r3
    75b0:	2301      	movs	r3, #1
    75b2:	4318      	orrs	r0, r3
    75b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75b6:	2d00      	cmp	r5, #0
    75b8:	d0f9      	beq.n	75ae <__gesf2+0x46>
    75ba:	428b      	cmp	r3, r1
    75bc:	d1f7      	bne.n	75ae <__gesf2+0x46>
    75be:	4294      	cmp	r4, r2
    75c0:	dcf5      	bgt.n	75ae <__gesf2+0x46>
    75c2:	db04      	blt.n	75ce <__gesf2+0x66>
    75c4:	42ae      	cmp	r6, r5
    75c6:	d8f2      	bhi.n	75ae <__gesf2+0x46>
    75c8:	2000      	movs	r0, #0
    75ca:	42ae      	cmp	r6, r5
    75cc:	d2f2      	bcs.n	75b4 <__gesf2+0x4c>
    75ce:	4258      	negs	r0, r3
    75d0:	4143      	adcs	r3, r0
    75d2:	2001      	movs	r0, #1
    75d4:	425b      	negs	r3, r3
    75d6:	4318      	orrs	r0, r3
    75d8:	e7ec      	b.n	75b4 <__gesf2+0x4c>
    75da:	2f00      	cmp	r7, #0
    75dc:	d0e5      	beq.n	75aa <__gesf2+0x42>
    75de:	4248      	negs	r0, r1
    75e0:	4141      	adcs	r1, r0
    75e2:	2001      	movs	r0, #1
    75e4:	4249      	negs	r1, r1
    75e6:	4308      	orrs	r0, r1
    75e8:	e7e4      	b.n	75b4 <__gesf2+0x4c>
    75ea:	2d00      	cmp	r5, #0
    75ec:	d102      	bne.n	75f4 <__gesf2+0x8c>
    75ee:	2c00      	cmp	r4, #0
    75f0:	d0cb      	beq.n	758a <__gesf2+0x22>
    75f2:	e7da      	b.n	75aa <__gesf2+0x42>
    75f4:	2002      	movs	r0, #2
    75f6:	4240      	negs	r0, r0
    75f8:	e7dc      	b.n	75b4 <__gesf2+0x4c>
    75fa:	46c0      	nop			; (mov r8, r8)

000075fc <__lesf2>:
    75fc:	0243      	lsls	r3, r0, #9
    75fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    7600:	0042      	lsls	r2, r0, #1
    7602:	004c      	lsls	r4, r1, #1
    7604:	0a5e      	lsrs	r6, r3, #9
    7606:	0fc3      	lsrs	r3, r0, #31
    7608:	0248      	lsls	r0, r1, #9
    760a:	0e12      	lsrs	r2, r2, #24
    760c:	0a45      	lsrs	r5, r0, #9
    760e:	0e24      	lsrs	r4, r4, #24
    7610:	0fc9      	lsrs	r1, r1, #31
    7612:	2aff      	cmp	r2, #255	; 0xff
    7614:	d00f      	beq.n	7636 <__lesf2+0x3a>
    7616:	2cff      	cmp	r4, #255	; 0xff
    7618:	d01a      	beq.n	7650 <__lesf2+0x54>
    761a:	2a00      	cmp	r2, #0
    761c:	d110      	bne.n	7640 <__lesf2+0x44>
    761e:	4277      	negs	r7, r6
    7620:	4177      	adcs	r7, r6
    7622:	2c00      	cmp	r4, #0
    7624:	d029      	beq.n	767a <__lesf2+0x7e>
    7626:	2f00      	cmp	r7, #0
    7628:	d017      	beq.n	765a <__lesf2+0x5e>
    762a:	4248      	negs	r0, r1
    762c:	4141      	adcs	r1, r0
    762e:	2001      	movs	r0, #1
    7630:	4249      	negs	r1, r1
    7632:	4308      	orrs	r0, r1
    7634:	e00b      	b.n	764e <__lesf2+0x52>
    7636:	2002      	movs	r0, #2
    7638:	2e00      	cmp	r6, #0
    763a:	d108      	bne.n	764e <__lesf2+0x52>
    763c:	2cff      	cmp	r4, #255	; 0xff
    763e:	d007      	beq.n	7650 <__lesf2+0x54>
    7640:	2c00      	cmp	r4, #0
    7642:	d10a      	bne.n	765a <__lesf2+0x5e>
    7644:	2d00      	cmp	r5, #0
    7646:	d108      	bne.n	765a <__lesf2+0x5e>
    7648:	4258      	negs	r0, r3
    764a:	2301      	movs	r3, #1
    764c:	4318      	orrs	r0, r3
    764e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7650:	2002      	movs	r0, #2
    7652:	2d00      	cmp	r5, #0
    7654:	d1fb      	bne.n	764e <__lesf2+0x52>
    7656:	2a00      	cmp	r2, #0
    7658:	d0e1      	beq.n	761e <__lesf2+0x22>
    765a:	428b      	cmp	r3, r1
    765c:	d1f4      	bne.n	7648 <__lesf2+0x4c>
    765e:	42a2      	cmp	r2, r4
    7660:	dcf2      	bgt.n	7648 <__lesf2+0x4c>
    7662:	db04      	blt.n	766e <__lesf2+0x72>
    7664:	42ae      	cmp	r6, r5
    7666:	d8ef      	bhi.n	7648 <__lesf2+0x4c>
    7668:	2000      	movs	r0, #0
    766a:	42ae      	cmp	r6, r5
    766c:	d2ef      	bcs.n	764e <__lesf2+0x52>
    766e:	4258      	negs	r0, r3
    7670:	4143      	adcs	r3, r0
    7672:	2001      	movs	r0, #1
    7674:	425b      	negs	r3, r3
    7676:	4318      	orrs	r0, r3
    7678:	e7e9      	b.n	764e <__lesf2+0x52>
    767a:	2d00      	cmp	r5, #0
    767c:	d1d3      	bne.n	7626 <__lesf2+0x2a>
    767e:	2000      	movs	r0, #0
    7680:	2f00      	cmp	r7, #0
    7682:	d1e4      	bne.n	764e <__lesf2+0x52>
    7684:	e7e0      	b.n	7648 <__lesf2+0x4c>
    7686:	46c0      	nop			; (mov r8, r8)

00007688 <__libc_init_array>:
    7688:	4b0e      	ldr	r3, [pc, #56]	; (76c4 <__libc_init_array+0x3c>)
    768a:	b570      	push	{r4, r5, r6, lr}
    768c:	2500      	movs	r5, #0
    768e:	1c1e      	adds	r6, r3, #0
    7690:	4c0d      	ldr	r4, [pc, #52]	; (76c8 <__libc_init_array+0x40>)
    7692:	1ae4      	subs	r4, r4, r3
    7694:	10a4      	asrs	r4, r4, #2
    7696:	42a5      	cmp	r5, r4
    7698:	d004      	beq.n	76a4 <__libc_init_array+0x1c>
    769a:	00ab      	lsls	r3, r5, #2
    769c:	58f3      	ldr	r3, [r6, r3]
    769e:	4798      	blx	r3
    76a0:	3501      	adds	r5, #1
    76a2:	e7f8      	b.n	7696 <__libc_init_array+0xe>
    76a4:	f000 fa24 	bl	7af0 <_init>
    76a8:	4b08      	ldr	r3, [pc, #32]	; (76cc <__libc_init_array+0x44>)
    76aa:	2500      	movs	r5, #0
    76ac:	1c1e      	adds	r6, r3, #0
    76ae:	4c08      	ldr	r4, [pc, #32]	; (76d0 <__libc_init_array+0x48>)
    76b0:	1ae4      	subs	r4, r4, r3
    76b2:	10a4      	asrs	r4, r4, #2
    76b4:	42a5      	cmp	r5, r4
    76b6:	d004      	beq.n	76c2 <__libc_init_array+0x3a>
    76b8:	00ab      	lsls	r3, r5, #2
    76ba:	58f3      	ldr	r3, [r6, r3]
    76bc:	4798      	blx	r3
    76be:	3501      	adds	r5, #1
    76c0:	e7f8      	b.n	76b4 <__libc_init_array+0x2c>
    76c2:	bd70      	pop	{r4, r5, r6, pc}
    76c4:	00007afc 	.word	0x00007afc
    76c8:	00007afc 	.word	0x00007afc
    76cc:	00007afc 	.word	0x00007afc
    76d0:	00007b00 	.word	0x00007b00

000076d4 <memcpy>:
    76d4:	2300      	movs	r3, #0
    76d6:	b510      	push	{r4, lr}
    76d8:	4293      	cmp	r3, r2
    76da:	d003      	beq.n	76e4 <memcpy+0x10>
    76dc:	5ccc      	ldrb	r4, [r1, r3]
    76de:	54c4      	strb	r4, [r0, r3]
    76e0:	3301      	adds	r3, #1
    76e2:	e7f9      	b.n	76d8 <memcpy+0x4>
    76e4:	bd10      	pop	{r4, pc}

000076e6 <memset>:
    76e6:	1c03      	adds	r3, r0, #0
    76e8:	1882      	adds	r2, r0, r2
    76ea:	4293      	cmp	r3, r2
    76ec:	d002      	beq.n	76f4 <memset+0xe>
    76ee:	7019      	strb	r1, [r3, #0]
    76f0:	3301      	adds	r3, #1
    76f2:	e7fa      	b.n	76ea <memset+0x4>
    76f4:	4770      	bx	lr
	...

000076f8 <tc_interrupt_vectors.13101>:
    76f8:	1312 0014 004c 0004 0240 2000 0000 0000     ....L...@.. ....
    7708:	0ab4 0000 0b2c 0000 0b2c 0000 0b2c 0000     ....,...,...,...
    7718:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    7728:	0b02 0000 0b2c 0000 0b2c 0000 0a4c 0000     ....,...,...L...
    7738:	0a92 0000 0b2c 0000 0a40 0000 0b2c 0000     ....,...@...,...
    7748:	0b2c 0000 0b2c 0000 0b2c 0000 0a66 0000     ,...,...,...f...
    7758:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    7768:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    7778:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    7788:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    7798:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    77a8:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    77b8:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    77c8:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    77d8:	0b2c 0000 0b2c 0000 0b2c 0000 0b2c 0000     ,...,...,...,...
    77e8:	0b2c 0000 0b12 0000 16f6 0000 1956 0000     ,...........V...
    77f8:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7808:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7818:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7828:	1956 0000 1956 0000 16de 0000 1956 0000     V...V.......V...
    7838:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7848:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7858:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7868:	1956 0000 1956 0000 16ee 0000 1956 0000     V...V.......V...
    7878:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7888:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    7898:	1956 0000 1956 0000 1956 0000 1956 0000     V...V...V...V...
    78a8:	1956 0000 1956 0000 16e6 0000 16fe 0000     V...V...........
    78b8:	16c6 0000 16d6 0000 16ce 0000 0002 0000     ................
    78c8:	0003 0000 0028 0000 0029 0000 0004 0000     ....(...).......
    78d8:	0005 0000 0006 0000 0007 0000 ffff 0000     ................
    78e8:	ffff 0000 0022 0000 0023 0000 ffff 0000     ...."...#.......
    78f8:	ffff 0000 ffff 0000 ffff 0000 0008 0000     ................
    7908:	0009 0000 000a 0000 000b 0000 0800 4200     ...............B
    7918:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    7928:	1c00 4200 0a09 0c0b 0e0d 0000 2746 0000     ...B........F'..
    7938:	2742 0000 2742 0000 27a2 0000 27a2 0000     B'..B'...'...'..
    7948:	275c 0000 274c 0000 2762 0000 2790 0000     \'..L'..b'...'..

00007958 <_tcc_gclk_ids>:
    7958:	1a1a 001b                                   ....

0000795c <_tcc_apbcmasks>:
    795c:	0100 0000 0200 0000 0400 0000               ............

00007968 <_tcc_maxs>:
    7968:	ffff 00ff ffff 00ff ffff 0000               ............

00007974 <_tcc_cc_nums>:
    7974:	0204 0002                                   ....

00007978 <_tcc_ow_nums>:
    7978:	0408 0002                                   ....

0000797c <_tcc_intflag>:
    797c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    798c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    799c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    79ac:	2c00 4200 3000 4200 3400 4200 1c1b 001c     .,.B.0.B.4.B....
    79bc:	0800 1000 2000 0000 0300 0102 43ce 0000     ..... .......C..
    79cc:	43dc 0000 447a 0000 44e2 0000 4546 0000     .C..zD...D..FE..

000079dc <_usb_device_irq_bits>:
    79dc:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

000079ec <_usb_endpoint_irq_bits>:
    79ec:	0c03 6010 5dc2 0000 5d8a 0000 5da6 0000     ...`.]...]...]..
    79fc:	5d7e 0000 5da6 0000 5cea 0000 5da6 0000     ~]...]...\...]..
    7a0c:	5d7e 0000 5d8a 0000 5d8a 0000 5cea 0000     ~]...]...]...\..
    7a1c:	5d7e 0000 5e28 0000 5e28 0000 5e28 0000     ~]..(^..(^..(^..
    7a2c:	5dac 0000 5d8a 0000 5d8a 0000 5e72 0000     .]...]...]..r^..
    7a3c:	5d7c 0000 5e72 0000 5cea 0000 5e72 0000     |]..r^...\..r^..
    7a4c:	5d7c 0000 5d8a 0000 5d8a 0000 5cea 0000     |]...]...]...\..
    7a5c:	5d7c 0000 5e28 0000 5e28 0000 5e28 0000     |]..(^..(^..(^..
    7a6c:	5e56 0000 6016 0000 600e 0000 600e 0000     V^...`...`...`..
    7a7c:	6006 0000 5f58 0000 5f58 0000 5ffc 0000     .`..X_..X_..._..
    7a8c:	6006 0000 5f58 0000 5ffc 0000 5f58 0000     .`..X_..._..X_..
    7a9c:	6006 0000 5f5a 0000 5f5a 0000 5f5a 0000     .`..Z_..Z_..Z_..
    7aac:	60a0 0000 6770 0000 665e 0000 6744 0000     .`..pg..^f..Dg..
    7abc:	664a 0000 6744 0000 674e 0000 6744 0000     Jf..Dg..Ng..Dg..
    7acc:	664a 0000 665e 0000 665e 0000 674e 0000     Jf..^f..^f..Ng..
    7adc:	664a 0000 6654 0000 6654 0000 6654 0000     Jf..Tf..Tf..Tf..
    7aec:	69b6 0000                                   .i..

00007af0 <_init>:
    7af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7af2:	46c0      	nop			; (mov r8, r8)
    7af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7af6:	bc08      	pop	{r3}
    7af8:	469e      	mov	lr, r3
    7afa:	4770      	bx	lr

00007afc <__init_array_start>:
    7afc:	000000dd 	.word	0x000000dd

00007b00 <_fini>:
    7b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b02:	46c0      	nop			; (mov r8, r8)
    7b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7b06:	bc08      	pop	{r3}
    7b08:	469e      	mov	lr, r3
    7b0a:	4770      	bx	lr

00007b0c <__fini_array_start>:
    7b0c:	000000b5 	.word	0x000000b5
